/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,n={184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"===a||"number"===a)e.push(n);else if(Array.isArray(n)){if(n.length){var i=o.apply(null,n);i&&e.push(i)}}else if("object"===a){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){e.push(n.toString());continue}for(var l in n)r.call(n,l)&&n[l]&&e.push(l)}}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},528:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,"body{padding:0px;margin:0px}.facts{display:flex;justify-content:center;width:100%;height:900px;background-color:#006064;color:#b2ebf2;font-size:30px;text-shadow:3px 3px 15px black;font-family:'Trebuchet MS', 'Lucida Sans Unicode';font-weight:bold}.facts .table{width:700px;text-align:center}.facts hr{border:1px solid #4dd0e1}.navigation{display:flex;flex-direction:column;background-color:#293629;width:800px}.loader{margin:auto;padding-top:350px;display:flex;justify-content:center;align-items:center}.history{font-size:28px;text-align:center;height:80px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.paper{display:flex;flex-basis:auto;margin-top:8px;height:35px;justify-items:center;width:250px}.paper .base{justify-items:center;height:30px;padding-top:11px;padding-left:15px;font-size:22px;color:dodgerblue}.place{justify-content:space-between;width:600px;height:430px;margin:auto;background-color:#bdd8ee;padding:30px 15px;font-family:'Trebuchet MS', 'Lucida Sans Unicode';margin-top:10px}.place .search{width:300px}.drzava{cursor:pointer}.drzava:hover{color:#ffdd56;font-weight:bold;text-shadow:2px 2px 12px black}.tabelaZemlje{margin:auto;width:800px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.tabelaZemlje .razmak{height:70px}.tabelaZemlje .results{background-color:#bbdefb;font-size:18px}.tabelaZemlje .navod{font-size:24px;display:flex;align-content:flex-start;width:120px;padding-left:5px}.tabelaZemlje tr:nth-child(even){background-color:#e5e4e7}.tabelaZemlje .nameComm{font-size:28px;width:650px;padding-left:5px}.tabelaZemlje .history{font-size:28px;text-align:center;height:60px}.tabelaZemlje .celebrity{text-transform:capitalize;text-align:left}.tabelaZemlje .celebrity,.tabelaZemlje .networth{font-weight:bold;font-size:30px}.tabelaZemlje .historyPerson{font-weight:bold;font-size:30px;cursor:pointer}.tabelaZemlje .historyPerson:hover{text-shadow:1px 1px 3px #64b5f6}.tabelaZemlje .dictionary{width:800px;font-size:28px;padding-left:10px}.tabelaZemlje .nameComm{font-size:24px}.tabelaZemlje .nameComm ul{padding:0}.tabelaZemlje .nameComm li{list-style:none;padding:0}.tabelaZemlje .more{display:block;align-items:end;width:120px;color:#1976d2;cursor:pointer;font-size:24px}.tabelaZemlje .more:hover{color:#64b5f6}.tabelaZemlje img{width:700px}.tabelaZemlje .imgRobot{width:300px}.tabelaZemlje hr{border:2px solid #6a757e}.tabelaZemlje td{font-size:24px}.mainDiv{background-color:#ffe0b2}.jokesMain{background-color:#b2ebf2;width:400px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesMain th{font-size:32px}.jokesMain td{padding:25px;font-size:34px;font-family:'Arial Narrow Bold', sans-serif}.jokesMain td img{width:500px}.jokesMain .borderGif{border-bottom:2px solid #6767bc}.jokesMain .pun{text-align:center;font-size:34px;font-weight:bold}.jokesText{display:flex;justify-content:space-around;width:1700px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesText th{font-size:32px}.jokesText td{padding:25px;font-size:34px;font-family:'Arial Narrow Bold', sans-serif}.jokesText .created{font-size:18px}.poznatiMain{margin:auto;display:flex;justify-content:space-around;border:2px solid black;width:1200px;height:1650px}.punapi{width:500px;border-radius:10px;background-color:#fff8e1;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.punapi th{font-size:28px;color:#2b7f7f;text-align:center}.punapi td{font-size:28px;padding:2px 20px}.jokeMain{border-radius:12px;width:500px;margin:auto;background-color:#f9fbe7;padding:20px 15px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokeMain .jokeAnswer,.jokeMain .jokeAns{font-weight:bold;font-size:28px;color:#1a237e}.jokeMain .jokeAnswer:hover{color:#ff8f00}.trivia{width:600px;height:900px;margin:auto;background-color:#bdd8ee;padding:30px 15px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.trivia .category{width:300px;height:40px;margin-top:10px;background-color:#80deea;border-radius:7px;font-size:24px;padding:5px 15px;cursor:pointer}.trivia .category:hover{background-color:#26c6da}.trivia .triviaAnswer:hover{color:#388e3c}.trivia .triviaAnswer,.trivia .triviaAns{font-weight:bold;font-size:28px;color:#1a237e}.dadJokes{background-color:#c8e6c9;width:500px;font-size:24px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.dadJokes .border{border-bottom:1px solid #4db6ac}.dadJokes .borderChuk{border-bottom:1px solid #4db6ac;font-size:20px}.dadJokes img{width:700px;text-align:center}.footer{font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;text-align:center;padding-top:450px;height:480px}@media screen and (max-width: 500px){.place{margin:0;display:flex;flex-direction:column;width:352px}.jokesText{display:block;width:358px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesText th{font-size:22px}.jokesText td{padding:8px;font-size:20px}.trivia{width:358px}.trivia .triviaAnswer{font-size:22px}.trivia .triviaAns{font-size:22px}.trivia .category{font-size:20px;height:36px}.facts{font-size:18px;text-shadow:1px 1px 3px black}.facts .table{width:340px}.facts .table td{padding:0px 5px}.jokeMain{width:358px;border-radius:0}.jokeMain .jokeAnswer{font-size:22px}.jokeMain .jokeAns{font-size:22px}.tabelaZemlje{width:350px}.tabelaZemlje .razmak{height:20px}.tabelaZemlje .history,.tabelaZemlje .historyPerson{font-size:20px;height:40px}.tabelaZemlje .celebrity{font-size:22px;padding-left:8px}.tabelaZemlje .dictionary{padding-left:8px;font-size:20px}.tabelaZemlje img{width:350px}.tabelaZemlje .imgRobot{width:200px}.tabelaZemlje .navod,.tabelaZemlje .more{padding-left:4px;font-size:16px;width:95px}.tabelaZemlje .nameComm{padding-left:4px;font-size:20px;width:255px}.tabelaZemlje .networth{font-size:24px}.dadJokes{width:358px;font-size:18px}.dadJokes .created{font-size:14px}.dadJokes hr{border:1px solid}.mainJoke{width:358px;font-size:20px}.jokesMain{width:358px;border-radius:0;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesMain th{font-size:20px}.jokesMain td{padding:15px;font-size:20px}.jokesMain td img{width:350px}.jokesMain .pun{font-size:22px}}\n","",{version:3,sources:["webpack://./src/scss/main.scss"],names:[],mappings:"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",sourcesContent:["body {\r\n    padding: 0px;\r\n    margin: 0px;\r\n}\r\n\r\n.facts {\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n\r\n\r\n    width: 100%;\r\n    height: 900px;\r\n\r\n\r\n    background-color: #006064;\r\n\r\n    color: #b2ebf2;\r\n    font-size: 30px;\r\n    text-shadow: 3px 3px 15px black;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode';\r\n    // padding-top: 10PX;\r\n    font-weight: bold;\r\n\r\n    .table {\r\n        width: 700px;\r\n        text-align: center;\r\n    }\r\n\r\n    hr {\r\n        border: 1px solid #4dd0e1;\r\n    }\r\n}\r\n\r\n.navigation {\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: #293629;\r\n    width: 800px;\r\n}\r\n\r\n.loader {\r\n    margin: auto;\r\n    padding-top: 350px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n}\r\n\r\n.history {\r\n    font-size: 28px;\r\n    text-align: center;\r\n    height: 80px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n\r\n.paper {\r\n    display: flex;\r\n    flex-basis: auto;\r\n    margin-top: 8px;\r\n\r\n    height: 35px;\r\n    justify-items: center;\r\n    width: 250px;\r\n\r\n\r\n    .base {\r\n        justify-items: center;\r\n\r\n        height: 30px;\r\n        padding-top: 11px;\r\n        padding-left: 15px;\r\n        font-size: 22px;\r\n        color: dodgerblue;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n.place {\r\n\r\n    justify-content: space-between;\r\n\r\n    width: 600px;\r\n    height: 430px;\r\n    margin: auto;\r\n    background-color: #bdd8ee;\r\n    padding: 30px 15px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode';\r\n\r\n\r\n    margin-top: 10px;\r\n\r\n\r\n    .search {\r\n        width: 300px;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n.drzava {\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        color: rgb(255, 221, 86);\r\n        font-weight: bold;\r\n        text-shadow: 2px 2px 12px black;\r\n    }\r\n}\r\n\r\n\r\n\r\n.tabelaZemlje {\r\n\r\n    margin: auto;\r\n\r\n\r\n\r\n    width: 800px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .razmak {\r\n        height: 70px;\r\n    }\r\n\r\n    .results {\r\n        background-color: #bbdefb;\r\n        font-size: 18px;\r\n    }\r\n\r\n    .navod {\r\n        font-size: 24px;\r\n\r\n        display: flex;\r\n        align-content: flex-start;\r\n\r\n        width: 120px;\r\n        padding-left: 5px;\r\n    }\r\n\r\n    tr {\r\n        &:nth-child(even) {\r\n            background-color: #e5e4e7;\r\n        }\r\n    }\r\n\r\n    .nameComm {\r\n        font-size: 28px;\r\n        width: 650px;\r\n        padding-left: 5px;\r\n    }\r\n\r\n    .history {\r\n        font-size: 28px;\r\n        text-align: center;\r\n        height: 60px;\r\n    }\r\n\r\n    .celebrity {\r\n        text-transform: capitalize;\r\n        text-align: left;\r\n    }\r\n\r\n    .celebrity,\r\n    .networth {\r\n        font-weight: bold;\r\n        font-size: 30px;\r\n    }\r\n\r\n    .historyPerson {\r\n        font-weight: bold;\r\n        font-size: 30px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            text-shadow: 1px 1px 3px #64b5f6;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    .dictionary {\r\n        width: 800px;\r\n        font-size: 28px;\r\n        padding-left: 10px;\r\n    }\r\n\r\n    .nameComm {\r\n        font-size: 24px;\r\n\r\n        ul {\r\n            padding: 0;\r\n        }\r\n\r\n        li {\r\n            list-style: none;\r\n            padding: 0;\r\n        }\r\n    }\r\n\r\n    .more {\r\n        display: block;\r\n        align-items: end;\r\n        width: 120px;\r\n        // text-align: right;\r\n        color: #1976d2;\r\n        cursor: pointer;\r\n        font-size: 24px;\r\n\r\n        &:hover {\r\n            color: #64b5f6;\r\n        }\r\n    }\r\n\r\n    img {\r\n        width: 700px;\r\n    }\r\n\r\n    .imgRobot {\r\n        width: 300px;\r\n    }\r\n\r\n    hr {\r\n\r\n\r\n        border: 2px solid #6a757e;\r\n    }\r\n\r\n    td {\r\n        font-size: 24px;\r\n    }\r\n\r\n\r\n}\r\n\r\n.mainDiv {\r\n    background-color: #ffe0b2;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n.jokesMain {\r\n    background-color: #b2ebf2;\r\n    width: 400px;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    th {\r\n        font-size: 32px;\r\n    }\r\n\r\n    td {\r\n        padding: 25px;\r\n        font-size: 34px;\r\n        font-family: 'Arial Narrow Bold', sans-serif;\r\n\r\n        img {\r\n            width: 500px;\r\n        }\r\n    }\r\n\r\n    .borderGif {\r\n        border-bottom: 2px solid rgb(103, 103, 188);\r\n    }\r\n\r\n    .pun {\r\n        text-align: center;\r\n        font-size: 34px;\r\n        font-weight: bold;\r\n    }\r\n}\r\n\r\n.jokesText {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 1700px;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    th {\r\n        font-size: 32px;\r\n    }\r\n\r\n    td {\r\n        padding: 25px;\r\n        font-size: 34px;\r\n        font-family: 'Arial Narrow Bold', sans-serif;\r\n\r\n    }\r\n\r\n    .created {\r\n        font-size: 18px;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.poznatiMain {\r\n    margin: auto;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    border: 2px solid black;\r\n    width: 1200px;\r\n    height: 1650px;\r\n}\r\n\r\n\r\n\r\n.punapi {\r\n    width: 500px;\r\n    border-radius: 10px;\r\n    background-color: #fff8e1;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    th {\r\n        font-size: 28px;\r\n        color: rgb(43, 127, 127);\r\n        text-align: center;\r\n    }\r\n\r\n    td {\r\n        font-size: 28px;\r\n        padding: 2px 20px;\r\n    }\r\n}\r\n\r\n.jokeMain {\r\n    border-radius: 12px;\r\n    width: 500px;\r\n    // height: 500px;\r\n    margin: auto;\r\n    background-color: #f9fbe7;\r\n    padding: 20px 15px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .jokeAnswer,\r\n    .jokeAns {\r\n        font-weight: bold;\r\n        font-size: 28px;\r\n        color: #1a237e;\r\n    }\r\n\r\n    .jokeAnswer {\r\n        &:hover {\r\n            color: #ff8f00;\r\n        }\r\n    }\r\n}\r\n\r\n.trivia {\r\n    width: 600px;\r\n    height: 900px;\r\n    margin: auto;\r\n    background-color: #bdd8ee;\r\n    padding: 30px 15px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .category {\r\n        width: 300px;\r\n        height: 40px;\r\n        margin-top: 10px;\r\n        background-color: #80deea;\r\n        border-radius: 7px;\r\n        font-size: 24px;\r\n        padding: 5px 15px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: #26c6da;\r\n        }\r\n    }\r\n\r\n    .triviaAnswer {\r\n        &:hover {\r\n            color: #388e3c;\r\n        }\r\n    }\r\n\r\n    .triviaAnswer,\r\n    .triviaAns {\r\n        font-weight: bold;\r\n        font-size: 28px;\r\n        color: #1a237e;\r\n    }\r\n}\r\n\r\n.dadJokes {\r\n    background-color: #c8e6c9;\r\n    width: 500px;\r\n    font-size: 24px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .border {\r\n        border-bottom: 1px solid #4db6ac;\r\n\r\n\r\n    }\r\n\r\n    .borderChuk {\r\n        border-bottom: 1px solid #4db6ac;\r\n\r\n        font-size: 20px;\r\n    }\r\n\r\n\r\n\r\n    img {\r\n        width: 700px;\r\n        text-align: center;\r\n    }\r\n}\r\n\r\n\r\n.footer {\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n    text-align: center;\r\n    padding-top: 450px;\r\n    height: 480px;\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n\r\n    .place {\r\n        margin: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 352px;\r\n\r\n    }\r\n\r\n    .jokesText {\r\n        display: block;\r\n        width: 358px;\r\n\r\n        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n        th {\r\n            font-size: 22px;\r\n        }\r\n\r\n        td {\r\n            padding: 8px;\r\n            font-size: 20px;\r\n\r\n\r\n        }\r\n    }\r\n\r\n    .trivia {\r\n        width: 358px;\r\n\r\n        .triviaAnswer {\r\n            font-size: 22px;\r\n\r\n        }\r\n\r\n        .triviaAns {\r\n            font-size: 22px;\r\n        }\r\n\r\n        .category {\r\n            font-size: 20px;\r\n            height: 36px;\r\n        }\r\n    }\r\n\r\n    .facts {\r\n\r\n        font-size: 18px;\r\n        text-shadow: 1px 1px 3px black;\r\n\r\n        .table {\r\n            width: 340px;\r\n\r\n            td {\r\n                padding: 0px 5px;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    .jokeMain {\r\n        width: 358px;\r\n        border-radius: 0;\r\n\r\n        .jokeAnswer {\r\n            font-size: 22px;\r\n\r\n        }\r\n\r\n        .jokeAns {\r\n            font-size: 22px;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    .tabelaZemlje {\r\n        width: 350px;\r\n\r\n        .razmak {\r\n            height: 20px;\r\n        }\r\n\r\n        .history,\r\n        .historyPerson {\r\n            font-size: 20px;\r\n            height: 40px;\r\n        }\r\n\r\n\r\n        .celebrity {\r\n            font-size: 22px;\r\n            padding-left: 8px;\r\n        }\r\n\r\n        .dictionary {\r\n            padding-left: 8px;\r\n            font-size: 20px;\r\n        }\r\n\r\n        img {\r\n            width: 350px;\r\n        }\r\n\r\n        .imgRobot {\r\n            width: 200px;\r\n        }\r\n\r\n        .navod,\r\n        .more {\r\n            padding-left: 4px;\r\n            font-size: 16px;\r\n            width: 95px;\r\n        }\r\n\r\n        .nameComm {\r\n            padding-left: 4px;\r\n            font-size: 20px;\r\n            width: 255px;\r\n        }\r\n\r\n        .networth {\r\n            font-size: 24px;\r\n        }\r\n    }\r\n\r\n    .dadJokes {\r\n\r\n        width: 358px;\r\n        font-size: 18px;\r\n\r\n        .created {\r\n            font-size: 14px;\r\n        }\r\n\r\n        hr {\r\n            border: 1px solid;\r\n        }\r\n    }\r\n\r\n    .mainJoke {\r\n        width: 358px;\r\n        font-size: 20px;\r\n    }\r\n\r\n    .jokesMain {\r\n\r\n        width: 358px;\r\n        border-radius: 0;\r\n        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n        th {\r\n            font-size: 20px;\r\n        }\r\n\r\n        td {\r\n            padding: 15px;\r\n            font-size: 20px;\r\n\r\n\r\n            img {\r\n                width: 350px;\r\n            }\r\n        }\r\n\r\n        .pun {\r\n            font-size: 22px;\r\n        }\r\n    }\r\n\r\n}"],sourceRoot:""}]);const l=i},740:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,"/* body {\n    margin: 0;\n}\n.title {\n    background-color: red;\n    color: #fff;\n    padding: 20px;\n    font-size: 18px;\n    text-align: center;\n}\n.custom-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n.custom-table,\n.custom-td {\n\n    border: 1px solid #ddd;\n    text-align: left;\n    padding: 10px;\n}\n\n.custom-table th {\n    background-color: mediumaquamarine;\n    color: #fff;\n}\n.custom-table tr:nth-child(even) {\n    background-color: #ddd;\n}\n\n.main-heading {\n    padding: 30px;\n    font-size: 22px;\n    margin: 20px auto;\n    text-align: center;\n}\n.active {\n    background-color: cornflowerblue;\n    color: #fff;\n    border: 2px solid red;\n}\n\n.form-text {\n    border: 2px solid red;\n}\n\n\n.btn {\n    min-width: 150px;\n    background-color: crimson;\n    color: #fff;\n    font-size: 18px;\n    display: block;\n    padding: 10px;\n    margin: 20px;\n    border: none;\n    cursor: pointer;\n}\n.btn:hover {\n    background-color: rgb(130, 189, 248);\n}\n.btn.btn-warning {\n    background-color: orange;\n}\n\n.btn:disabled {\n    background-color: darkgrey;\n    cursor: not-allowed;\n}\n.top_nav {\n\n    display: flex;\n    background-color: blue;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n.top_nav .navig {\n\n    margin: 15px;\n    padding: 20px;\n    font-size: 18px;\n    color: #fff;\n    text-decoration: none;\n}*/\n.loader-container {\n    height: 100vh;\n \n    background-color: rgb(174, 191, 191);\n\n    width: 800px;\n    display: flex;\n    justify-content: center;\n    margin: auto;\n    /* align-items: center; */\n}\n\n.comments-container {\n    max-width: 450px;\n    margin: auto;\n}\n.comments {\n    padding: 20px 0;\n    border-bottom:  solid 2px  #ccc;\n \n} \n body {\n    padding: 50px;\n    background-color: #cacbda;\n    color: #0d2a32;\n}\n.todo-input-container input{\n    padding: 10px;\n    border: 2px sollid #fff;\n    border-radius: 5px;\n    outline: none;\n}\n.todo-input-container .btn {\n    margin-left: 10px;\n    background-color: #fff;\n    color: #333;\n    cursor: pointer;\n}\n.todo-list {\n    padding: 0;\n    list-style: none;\n    max-width: 350px;\n}\n\n.todo-list li {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    color: #333;\n    background-color: #61dafb;\n    padding: 15px;\n    margin: 15px 0;\n    border-radius: 10px;\n} \n\n.loader-container {\n    height: 100hv;\n   \n    background-color: rgb(195, 204, 204);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.single-comment {\n    background-color: #61dafb;\n    padding: 15px;\n    margin-bottom: 20px;\n    border-radius: 5px;\n    color: #333;\n}\n.single-comment\n.samoID {\n    background-color: blueviolet;\n    padding: 12px;\n    margin-right: 12px;\n    cursor: pointer;\n}\n\n.users-container {\n    min-width: 900px;\n    /* background-color: #61dafb; */\n}\n\n.users-container th,\n.users-container td {\n    padding: 5px;\n    text-align: left;\n    border: 1px solid rgb(156, 161, 199);\n    padding-right: 30px;\n}\n\n.users:nth-child(even) {\n\n    border: 1px solid rgb(156, 161, 199);\n    padding: 10px;\n\n    background-color: rgb(156, 161, 199);\n}\n\n.users td {\n\n    padding: 5px 20px;\n\n}\n\n\n.korisnik {\n    display: flex;\n    justify-content: space-between;\n\n    \n\n    /* width: 750px; */\n    background-color: #61dafb;\n}\n.korisnik h1 {\n    font-size: 20px;\n    font-weight: bolder;\n    padding: 5px 10px;\n    color: darkslateblue;\n    font-family: Calibri, 'Trebuchet MS', sans-serif;\n}\n.korisnik p {\n    padding: 10px 10px;\n    font-size: 12px;\n\n}\n\n.korisnik div {\n    width: 250px;\n    padding: 0 10px;\n    /* padding: 8px; */\n    background-color: rgb(184, 205, 227);\n    color: darkslategrey;\n    border-bottom: 2px solid #7272ab;\n}\n\n.korisnik li {\n    list-style: none;\n    padding: 10px;\n}\n\n.lista {\n    font-family: 'Arial Narrow Bold', sans-serif;\n}\n\n.glavni {\n    display: flex;\n}\n\n.glavni h1 {\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande';\n    text-align: center;\n    background-color: antiquewhite;\n    color: darkslategrey;\n}\n\n/* .karusel img{\n    height: 460px;\n    color: rgb(250, 155, 30);\n    \n    font-size: 18px;\n    text-align: center;\n    background-color: #61dafb;\n   } */\n.vajari {\n    width: 700px;\n    display: flex;\n    justify-content: space-between;\n    border-bottom: 3px solid rgb(81, 88, 137);\n   \n}\n.vajari .vajar-opis p, \n.vajari .vajar-opis h2{\n   width: 300px;\n   \n    padding: 15px;\n}\n.vajar-slika {\ntext-align: center;\npadding: 15px;\n}\n.upis-todo {\n    background-color: aliceblue;\n}\n\n\n.tacke2 {\n    margin-top: 460px;\n    top: 8px;\n    width: 1960px;\n    display: block;\n    position: absolute;\n    border-bottom: 16px dotted;\n    animation: move2 5s infinite linear;\n  \n}\n\n\n\n\n@keyframes move2 {\n    from {\n        transform: translateX(1%);\n    }\n\n    to {\n        transform: translateX(-50%);\n    }\n}\n.zaDigitron {\n   margin: 0px 150px;\n    display: flex;\n   justify-content: space-between;\n    align-items: center;\n}\n.form-tekst {\n    border: 2px solid green;\n}\n.form-tekst:hover {\n    border-color: #61dafb;\n    background-color: #ccc;\n}","",{version:3,sources:["webpack://./src/css/styles.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoFE;AACF;IACI,aAAa;;IAEb,oCAAoC;;IAEpC,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,gBAAgB;IAChB,YAAY;AAChB;AACA;IACI,eAAe;IACf,+BAA+B;;AAEnC;CACC;IACG,aAAa;IACb,yBAAyB;IACzB,cAAc;AAClB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,aAAa;AACjB;AACA;IACI,iBAAiB;IACjB,sBAAsB;IACtB,WAAW;IACX,eAAe;AACnB;AACA;IACI,UAAU;IACV,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,WAAW;IACX,yBAAyB;IACzB,aAAa;IACb,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,aAAa;;IAEb,oCAAoC;IACpC,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,WAAW;AACf;AACA;;IAEI,4BAA4B;IAC5B,aAAa;IACb,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,+BAA+B;AACnC;;AAEA;;IAEI,YAAY;IACZ,gBAAgB;IAChB,oCAAoC;IACpC,mBAAmB;AACvB;;AAEA;;IAEI,oCAAoC;IACpC,aAAa;;IAEb,oCAAoC;AACxC;;AAEA;;IAEI,iBAAiB;;AAErB;;;AAGA;IACI,aAAa;IACb,8BAA8B;;;;IAI9B,kBAAkB;IAClB,yBAAyB;AAC7B;AACA;IACI,eAAe;IACf,mBAAmB;IACnB,iBAAiB;IACjB,oBAAoB;IACpB,gDAAgD;AACpD;AACA;IACI,kBAAkB;IAClB,eAAe;;AAEnB;;AAEA;IACI,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,oCAAoC;IACpC,oBAAoB;IACpB,gCAAgC;AACpC;;AAEA;IACI,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,4CAA4C;AAChD;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,mEAAmE;IACnE,kBAAkB;IAClB,8BAA8B;IAC9B,oBAAoB;AACxB;;AAEA;;;;;;;MAOM;AACN;IACI,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,yCAAyC;;AAE7C;AACA;;GAEG,YAAY;;IAEX,aAAa;AACjB;AACA;AACA,kBAAkB;AAClB,aAAa;AACb;AACA;IACI,2BAA2B;AAC/B;;;AAGA;IACI,iBAAiB;IACjB,QAAQ;IACR,aAAa;IACb,cAAc;IACd,kBAAkB;IAClB,0BAA0B;IAC1B,mCAAmC;;AAEvC;;;;;AAKA;IACI;QACI,yBAAyB;IAC7B;;IAEA;QACI,2BAA2B;IAC/B;AACJ;AACA;GACG,iBAAiB;IAChB,aAAa;GACd,8BAA8B;IAC7B,mBAAmB;AACvB;AACA;IACI,uBAAuB;AAC3B;AACA;IACI,qBAAqB;IACrB,sBAAsB;AAC1B",sourcesContent:["/* body {\r\n    margin: 0;\r\n}\r\n.title {\r\n    background-color: red;\r\n    color: #fff;\r\n    padding: 20px;\r\n    font-size: 18px;\r\n    text-align: center;\r\n}\r\n.custom-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n}\r\n.custom-table,\r\n.custom-td {\r\n\r\n    border: 1px solid #ddd;\r\n    text-align: left;\r\n    padding: 10px;\r\n}\r\n\r\n.custom-table th {\r\n    background-color: mediumaquamarine;\r\n    color: #fff;\r\n}\r\n.custom-table tr:nth-child(even) {\r\n    background-color: #ddd;\r\n}\r\n\r\n.main-heading {\r\n    padding: 30px;\r\n    font-size: 22px;\r\n    margin: 20px auto;\r\n    text-align: center;\r\n}\r\n.active {\r\n    background-color: cornflowerblue;\r\n    color: #fff;\r\n    border: 2px solid red;\r\n}\r\n\r\n.form-text {\r\n    border: 2px solid red;\r\n}\r\n\r\n\r\n.btn {\r\n    min-width: 150px;\r\n    background-color: crimson;\r\n    color: #fff;\r\n    font-size: 18px;\r\n    display: block;\r\n    padding: 10px;\r\n    margin: 20px;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n.btn:hover {\r\n    background-color: rgb(130, 189, 248);\r\n}\r\n.btn.btn-warning {\r\n    background-color: orange;\r\n}\r\n\r\n.btn:disabled {\r\n    background-color: darkgrey;\r\n    cursor: not-allowed;\r\n}\r\n.top_nav {\r\n\r\n    display: flex;\r\n    background-color: blue;\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n.top_nav .navig {\r\n\r\n    margin: 15px;\r\n    padding: 20px;\r\n    font-size: 18px;\r\n    color: #fff;\r\n    text-decoration: none;\r\n}*/\r\n.loader-container {\r\n    height: 100vh;\r\n \r\n    background-color: rgb(174, 191, 191);\r\n\r\n    width: 800px;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: auto;\r\n    /* align-items: center; */\r\n}\r\n\r\n.comments-container {\r\n    max-width: 450px;\r\n    margin: auto;\r\n}\r\n.comments {\r\n    padding: 20px 0;\r\n    border-bottom:  solid 2px  #ccc;\r\n \r\n} \r\n body {\r\n    padding: 50px;\r\n    background-color: #cacbda;\r\n    color: #0d2a32;\r\n}\r\n.todo-input-container input{\r\n    padding: 10px;\r\n    border: 2px sollid #fff;\r\n    border-radius: 5px;\r\n    outline: none;\r\n}\r\n.todo-input-container .btn {\r\n    margin-left: 10px;\r\n    background-color: #fff;\r\n    color: #333;\r\n    cursor: pointer;\r\n}\r\n.todo-list {\r\n    padding: 0;\r\n    list-style: none;\r\n    max-width: 350px;\r\n}\r\n\r\n.todo-list li {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    color: #333;\r\n    background-color: #61dafb;\r\n    padding: 15px;\r\n    margin: 15px 0;\r\n    border-radius: 10px;\r\n} \r\n\r\n.loader-container {\r\n    height: 100hv;\r\n   \r\n    background-color: rgb(195, 204, 204);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.single-comment {\r\n    background-color: #61dafb;\r\n    padding: 15px;\r\n    margin-bottom: 20px;\r\n    border-radius: 5px;\r\n    color: #333;\r\n}\r\n.single-comment\r\n.samoID {\r\n    background-color: blueviolet;\r\n    padding: 12px;\r\n    margin-right: 12px;\r\n    cursor: pointer;\r\n}\r\n\r\n.users-container {\r\n    min-width: 900px;\r\n    /* background-color: #61dafb; */\r\n}\r\n\r\n.users-container th,\r\n.users-container td {\r\n    padding: 5px;\r\n    text-align: left;\r\n    border: 1px solid rgb(156, 161, 199);\r\n    padding-right: 30px;\r\n}\r\n\r\n.users:nth-child(even) {\r\n\r\n    border: 1px solid rgb(156, 161, 199);\r\n    padding: 10px;\r\n\r\n    background-color: rgb(156, 161, 199);\r\n}\r\n\r\n.users td {\r\n\r\n    padding: 5px 20px;\r\n\r\n}\r\n\r\n\r\n.korisnik {\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    \r\n\r\n    /* width: 750px; */\r\n    background-color: #61dafb;\r\n}\r\n.korisnik h1 {\r\n    font-size: 20px;\r\n    font-weight: bolder;\r\n    padding: 5px 10px;\r\n    color: darkslateblue;\r\n    font-family: Calibri, 'Trebuchet MS', sans-serif;\r\n}\r\n.korisnik p {\r\n    padding: 10px 10px;\r\n    font-size: 12px;\r\n\r\n}\r\n\r\n.korisnik div {\r\n    width: 250px;\r\n    padding: 0 10px;\r\n    /* padding: 8px; */\r\n    background-color: rgb(184, 205, 227);\r\n    color: darkslategrey;\r\n    border-bottom: 2px solid #7272ab;\r\n}\r\n\r\n.korisnik li {\r\n    list-style: none;\r\n    padding: 10px;\r\n}\r\n\r\n.lista {\r\n    font-family: 'Arial Narrow Bold', sans-serif;\r\n}\r\n\r\n.glavni {\r\n    display: flex;\r\n}\r\n\r\n.glavni h1 {\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande';\r\n    text-align: center;\r\n    background-color: antiquewhite;\r\n    color: darkslategrey;\r\n}\r\n\r\n/* .karusel img{\r\n    height: 460px;\r\n    color: rgb(250, 155, 30);\r\n    \r\n    font-size: 18px;\r\n    text-align: center;\r\n    background-color: #61dafb;\r\n   } */\r\n.vajari {\r\n    width: 700px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-bottom: 3px solid rgb(81, 88, 137);\r\n   \r\n}\r\n.vajari .vajar-opis p, \r\n.vajari .vajar-opis h2{\r\n   width: 300px;\r\n   \r\n    padding: 15px;\r\n}\r\n.vajar-slika {\r\ntext-align: center;\r\npadding: 15px;\r\n}\r\n.upis-todo {\r\n    background-color: aliceblue;\r\n}\r\n\r\n\r\n.tacke2 {\r\n    margin-top: 460px;\r\n    top: 8px;\r\n    width: 1960px;\r\n    display: block;\r\n    position: absolute;\r\n    border-bottom: 16px dotted;\r\n    animation: move2 5s infinite linear;\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n@keyframes move2 {\r\n    from {\r\n        transform: translateX(1%);\r\n    }\r\n\r\n    to {\r\n        transform: translateX(-50%);\r\n    }\r\n}\r\n.zaDigitron {\r\n   margin: 0px 150px;\r\n    display: flex;\r\n   justify-content: space-between;\r\n    align-items: center;\r\n}\r\n.form-tekst {\r\n    border: 2px solid green;\r\n}\r\n.form-tekst:hover {\r\n    border-color: #61dafb;\r\n    background-color: #ccc;\r\n}"],sourceRoot:""}]);const l=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var u=0;u<e.length;u++){var s=[].concat(e[u]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},679:(e,t,n)=>{"use strict";var r=n(296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function c(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=c(t),m=c(n),y=0;y<i.length;++y){var v=i[y];if(!(a[v]||r&&r[v]||m&&m[v]||l&&l[v])){var g=d(n,v);try{u(t,v,g)}catch(e){}}}}return t}},103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,c=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case u:case d:case y:case m:case c:return e;default:return t}}case o:return t}}}function E(e){return x(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=c,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return E(e)||x(e)===s},t.isConcurrentMode=E,t.isContextConsumer=function(e){return x(e)===u},t.isContextProvider=function(e){return x(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===y},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===c||e.$$typeof===u||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===v)},t.typeOf=x},296:(e,t,n)=>{"use strict";e.exports=n(103)},448:(e,t,n)=>{"use strict";var r=n(294),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function c(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),E=Symbol.for("react.portal"),A=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),L=Symbol.for("react.context"),O=Symbol.for("react.forward_ref"),j=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),T=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var P=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var I=Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=I&&e[I]||e["@@iterator"])?e:null}var z,M=Object.assign;function R(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var F=!1;function $(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var c="\n"+o[i].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?R(e):""}function D(e){switch(e.tag){case 5:return R(e.type);case 16:return R("Lazy");case 13:return R("Suspense");case 19:return R("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 1:return $(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case A:return"Fragment";case E:return"Portal";case k:return"Profiler";case S:return"StrictMode";case j:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case L:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(t=e.displayName||null)?t:G(e.type)||"Memo";case T:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return G(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function V(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=H(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Q(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){Q(e,t);var n=H(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+H(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:H(n)}}function ae(e,t){var n=H(t.value),r=H(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ce(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ye(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Ae=null,Se=null;function ke(e){if(e=wo(e)){if("function"!=typeof Ee)throw Error(a(280));var t=e.stateNode;t&&(t=Eo(t),Ee(e.stateNode,e.type,t))}}function Ce(e){Ae?Se?Se.push(e):Se=[e]:Ae=e}function Le(){if(Ae){var e=Ae,t=Se;if(Se=Ae=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function Oe(e,t){return e(t)}function je(){}var Ne=!1;function _e(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Oe(e,t,n)}finally{Ne=!1,(null!==Ae||null!==Se)&&(je(),Le())}}function Te(e,t){var n=e.stateNode;if(null===n)return null;var r=Eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Pe=!1;if(s)try{var Ie={};Object.defineProperty(Ie,"passive",{get:function(){Pe=!0}}),window.addEventListener("test",Ie,Ie),window.removeEventListener("test",Ie,Ie)}catch(se){Pe=!1}function Be(e,t,n,r,o,a,i,l,c){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var ze=!1,Me=null,Re=!1,Fe=null,$e={onError:function(e){ze=!0,Me=e}};function De(e,t,n,r,o,a,i,l,c){ze=!1,Me=null,Be.apply($e,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if(Ge(e)!==e)throw Error(a(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return He(o),e;if(i===r)return He(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,c=o.child;c;){if(c===n){l=!0,n=o,r=i;break}if(c===r){l=!0,r=o,n=i;break}c=c.sibling}if(!l){for(c=i.child;c;){if(c===n){l=!0,n=i,r=o;break}if(c===r){l=!0,r=i,n=o;break}c=c.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var Ve=o.unstable_scheduleCallback,qe=o.unstable_cancelCallback,Ke=o.unstable_shouldYield,Xe=o.unstable_requestPaint,Qe=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ct|0)|0},lt=Math.log,ct=Math.LN2,ut=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=ft(l):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function yt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,Et,At,St,kt,Ct=!1,Lt=[],Ot=null,jt=null,Nt=null,_t=new Map,Tt=new Map,Pt=[],It="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Bt(e,t){switch(e){case"focusin":case"focusout":Ot=null;break;case"dragenter":case"dragleave":jt=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":_t.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function zt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Mt(e){var t=bo(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void kt(e.priority,(function(){At(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Rt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){Rt(e)&&n.delete(t)}function $t(){Ct=!1,null!==Ot&&Rt(Ot)&&(Ot=null),null!==jt&&Rt(jt)&&(jt=null),null!==Nt&&Rt(Nt)&&(Nt=null),_t.forEach(Ft),Tt.forEach(Ft)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,$t)))}function Gt(e){function t(t){return Dt(t,e)}if(0<Lt.length){Dt(Lt[0],e);for(var n=1;n<Lt.length;n++){var r=Lt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ot&&Dt(Ot,e),null!==jt&&Dt(jt,e),null!==Nt&&Dt(Nt,e),_t.forEach(t),Tt.forEach(t),n=0;n<Pt.length;n++)(r=Pt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Pt.length&&null===(n=Pt[0]).blockedOn;)Mt(n),null===n.blockedOn&&Pt.shift()}var Ut=w.ReactCurrentBatchConfig,Ht=!0;function Wt(e,t,n,r){var o=bt,a=Ut.transition;Ut.transition=null;try{bt=1,Vt(e,t,n,r)}finally{bt=o,Ut.transition=a}}function Yt(e,t,n,r){var o=bt,a=Ut.transition;Ut.transition=null;try{bt=4,Vt(e,t,n,r)}finally{bt=o,Ut.transition=a}}function Vt(e,t,n,r){if(Ht){var o=Kt(e,t,n,r);if(null===o)Hr(e,t,r,qt,n),Bt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ot=zt(Ot,e,t,n,r,o),!0;case"dragenter":return jt=zt(jt,e,t,n,r,o),!0;case"mouseover":return Nt=zt(Nt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return _t.set(a,zt(_t.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Tt.set(a,zt(Tt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Bt(e,r),4&t&&-1<It.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&xt(a),null===(a=Kt(e,t,n,r))&&Hr(e,t,r,qt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Hr(e,t,r,null,n)}}var qt=null;function Kt(e,t,n,r){if(qt=null,null!==(e=bo(e=xe(r))))if(null===(t=Ge(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Qt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,o="value"in Qt?Qt.value:Qt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,cn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(un),fn=M({},un,{view:0,detail:0}),dn=on(fn),pn=M({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(an=e.screenX-cn.screenX,ln=e.screenY-cn.screenY):ln=an=0,cn=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(M({},pn,{dataTransfer:0})),yn=on(M({},fn,{relatedTarget:0})),vn=on(M({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=M({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),wn=on(M({},un,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},An={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=An[e])&&!!t[e]}function kn(){return Sn}var Cn=M({},fn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ln=on(Cn),On=on(M({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),jn=on(M({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Nn=on(M({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),_n=M({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Tn=on(_n),Pn=[9,13,27,32],In=s&&"CompositionEvent"in window,Bn=null;s&&"documentMode"in document&&(Bn=document.documentMode);var zn=s&&"TextEvent"in window&&!Bn,Mn=s&&(!In||Bn&&8<Bn&&11>=Bn),Rn=String.fromCharCode(32),Fn=!1;function $n(e,t){switch(e){case"keyup":return-1!==Pn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Dn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Gn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Wn(e,t,n,r){Ce(r),0<(t=Yr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Vn=null;function qn(e){Rr(e,0)}function Kn(e){if(V(xo(e)))return e}function Xn(e,t){if("change"===e)return t}var Qn=!1;if(s){var Zn;if(s){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Qn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Yn&&(Yn.detachEvent("onpropertychange",nr),Vn=Yn=null)}function nr(e){if("value"===e.propertyName&&Kn(Vn)){var t=[];Wn(t,Vn,e,xe(e)),_e(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Vn=n,(Yn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Vn)}function ar(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function cr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=sr(n,a);var i=sr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=s&&"documentMode"in document&&11>=document.documentMode,yr=null,vr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==yr||yr!==q(r)||(r="selectionStart"in(r=yr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&cr(gr,r)||(gr=r,0<(r=Yr(vr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},Ar={},Sr={};function kr(e){if(Ar[e])return Ar[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return Ar[e]=n[t];return e}s&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var Cr=kr("animationend"),Lr=kr("animationiteration"),Or=kr("animationstart"),jr=kr("transitionend"),Nr=new Map,_r="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Tr(e,t){Nr.set(e,t),c(t,[e])}for(var Pr=0;Pr<_r.length;Pr++){var Ir=_r[Pr];Tr(Ir.toLowerCase(),"on"+(Ir[0].toUpperCase()+Ir.slice(1)))}Tr(Cr,"onAnimationEnd"),Tr(Lr,"onAnimationIteration"),Tr(Or,"onAnimationStart"),Tr("dblclick","onDoubleClick"),Tr("focusin","onFocus"),Tr("focusout","onBlur"),Tr(jr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Br="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),zr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Br));function Mr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,c,u){if(De.apply(this,arguments),ze){if(!ze)throw Error(a(198));var s=Me;ze=!1,Me=null,Re||(Re=!0,Fe=s)}}(r,t,void 0,e),e.currentTarget=null}function Rr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],c=l.instance,u=l.currentTarget;if(l=l.listener,c!==a&&o.isPropagationStopped())break e;Mr(o,l,u),a=c}else for(i=0;i<r.length;i++){if(c=(l=r[i]).instance,u=l.currentTarget,l=l.listener,c!==a&&o.isPropagationStopped())break e;Mr(o,l,u),a=c}}}if(Re)throw e=Fe,Re=!1,Fe=null,e}function Fr(e,t){var n=t[yo];void 0===n&&(n=t[yo]=new Set);var r=e+"__bubble";n.has(r)||(Ur(t,e,2,!1),n.add(r))}function $r(e,t,n){var r=0;t&&(r|=4),Ur(n,e,r,t)}var Dr="_reactListening"+Math.random().toString(36).slice(2);function Gr(e){if(!e[Dr]){e[Dr]=!0,i.forEach((function(t){"selectionchange"!==t&&(zr.has(t)||$r(t,!1,e),$r(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Dr]||(t[Dr]=!0,$r("selectionchange",!1,t))}}function Ur(e,t,n,r){switch(Xt(t)){case 1:var o=Wt;break;case 4:o=Yt;break;default:o=Vt}n=o.bind(null,t,n,e),o=void 0,!Pe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Hr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var c=i.tag;if((3===c||4===c)&&((c=i.stateNode.containerInfo)===o||8===c.nodeType&&c.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(c=i.tag)||6===c){r=a=i;continue e}l=l.parentNode}}r=r.return}_e((function(){var r=a,o=xe(n),i=[];e:{var l=Nr.get(e);if(void 0!==l){var c=sn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":c=Ln;break;case"focusin":u="focus",c=yn;break;case"focusout":u="blur",c=yn;break;case"beforeblur":case"afterblur":c=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":c=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":c=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":c=jn;break;case Cr:case Lr:case Or:c=vn;break;case jr:c=Nn;break;case"scroll":c=dn;break;case"wheel":c=Tn;break;case"copy":case"cut":case"paste":c=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":c=On}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Te(h,d))&&s.push(Wr(h,m,p))),f)break;h=h.return}0<s.length&&(l=new c(l,u,null,n,o),i.push({event:l,listeners:s}))}}if(0==(7&t)){if(c="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(u=n.relatedTarget||n.fromElement)||!bo(u)&&!u[mo])&&(c||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,c?(c=r,null!==(u=(u=n.relatedTarget||n.toElement)?bo(u):null)&&(u!==(f=Ge(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(c=null,u=r),c!==u)){if(s=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=On,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==c?l:xo(c),p=null==u?l:xo(u),(l=new s(m,h+"leave",c,n,o)).target=f,l.relatedTarget=p,m=null,bo(o)===r&&((s=new s(d,h+"enter",u,n,o)).target=p,s.relatedTarget=f,m=s),f=m,c&&u)e:{for(d=u,h=0,p=s=c;p;p=Vr(p))h++;for(p=0,m=d;m;m=Vr(m))p++;for(;0<h-p;)s=Vr(s),h--;for(;0<p-h;)d=Vr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Vr(s),d=Vr(d)}s=null}else s=null;null!==c&&qr(i,l,c,s,!1),null!==u&&null!==f&&qr(i,f,u,s,!0)}if("select"===(c=(l=r?xo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===c&&"file"===l.type)var y=Xn;else if(Hn(l))if(Qn)y=ir;else{y=or;var v=rr}else(c=l.nodeName)&&"input"===c.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(y=ar);switch(y&&(y=y(e,r))?Wn(i,y,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?xo(r):window,e){case"focusin":(Hn(v)||"true"===v.contentEditable)&&(yr=v,vr=r,gr=null);break;case"focusout":gr=vr=yr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var g;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Gn?$n(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(Gn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Gn&&(g=en()):(Zt="value"in(Qt=o)?Qt.value:Qt.textContent,Gn=!0)),0<(v=Yr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:v}),(g||null!==(g=Dn(n)))&&(b.data=g))),(g=zn?function(e,t){switch(e){case"compositionend":return Dn(t);case"keypress":return 32!==t.which?null:(Fn=!0,Rn);case"textInput":return(e=t.data)===Rn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Gn)return"compositionend"===e||!In&&$n(e,t)?(e=en(),Jt=Zt=Qt=null,Gn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Rr(i,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Te(e,n))&&r.unshift(Wr(e,a,o)),null!=(a=Te(e,t))&&r.push(Wr(e,a,o))),e=e.return}return r}function Vr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,c=l.alternate,u=l.stateNode;if(null!==c&&c===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(c=Te(n,a))&&i.unshift(Wr(n,c,l)):o||null!=(c=Te(n,a))&&i.push(Wr(n,c,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Kr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Qr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Xr,"")}function Zr(e,t,n){if(t=Qr(t),Qr(e)!==t&&n)throw Error(a(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function co(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Gt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Gt(t)}function uo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,yo="__reactEvents$"+fo,vo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[po])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Eo(e){return e[ho]||null}var Ao=[],So=-1;function ko(e){return{current:e}}function Co(e){0>So||(e.current=Ao[So],Ao[So]=null,So--)}function Lo(e,t){So++,Ao[So]=e.current,e.current=t}var Oo={},jo=ko(Oo),No=ko(!1),_o=Oo;function To(e,t){var n=e.type.contextTypes;if(!n)return Oo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Po(e){return null!=e.childContextTypes}function Io(){Co(No),Co(jo)}function Bo(e,t,n){if(jo.current!==Oo)throw Error(a(168));Lo(jo,t),Lo(No,n)}function zo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,U(e)||"Unknown",o));return M({},n,r)}function Mo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Oo,_o=jo.current,Lo(jo,e),Lo(No,No.current),!0}function Ro(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=zo(e,t,_o),r.__reactInternalMemoizedMergedChildContext=e,Co(No),Co(jo),Lo(jo,e)):Co(No),Lo(No,n)}var Fo=null,$o=!1,Do=!1;function Go(e){null===Fo?Fo=[e]:Fo.push(e)}function Uo(){if(!Do&&null!==Fo){Do=!0;var e=0,t=bt;try{var n=Fo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fo=null,$o=!1}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),Ve(Je,Uo),t}finally{bt=t,Do=!1}}return null}var Ho=[],Wo=0,Yo=null,Vo=0,qo=[],Ko=0,Xo=null,Qo=1,Zo="";function Jo(e,t){Ho[Wo++]=Vo,Ho[Wo++]=Yo,Yo=e,Vo=t}function ea(e,t,n){qo[Ko++]=Qo,qo[Ko++]=Zo,qo[Ko++]=Xo,Xo=e;var r=Qo;e=Zo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Qo=1<<32-it(t)+o|n<<o|r,Zo=a+e}else Qo=1<<a|n<<o|r,Zo=e}function ta(e){null!==e.return&&(Jo(e,1),ea(e,1,0))}function na(e){for(;e===Yo;)Yo=Ho[--Wo],Ho[Wo]=null,Vo=Ho[--Wo],Ho[Wo]=null;for(;e===Xo;)Xo=qo[--Ko],qo[Ko]=null,Zo=qo[--Ko],qo[Ko]=null,Qo=qo[--Ko],qo[Ko]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Tu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ca(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=uo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Xo?{id:Qo,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Tu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ua(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function sa(e){if(aa){var t=oa;if(t){var n=t;if(!ca(e,t)){if(ua(e))throw Error(a(418));t=uo(n.nextSibling);var r=ra;t&&ca(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ua(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function da(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ua(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=uo(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=uo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?uo(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=uo(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var ya=w.ReactCurrentBatchConfig;function va(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ga=ko(null),ba=null,wa=null,xa=null;function Ea(){xa=wa=ba=null}function Aa(e){var t=ga.current;Co(ga),e._currentValue=t}function Sa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ka(e,t){ba=e,xa=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function Ca(e){var t=e._currentValue;if(xa!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var La=null;function Oa(e){null===La?La=[e]:La.push(e)}function ja(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Oa(t)):(n.next=o.next,o.next=n),t.interleaved=n,Na(e,r)}function Na(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var _a=!1;function Ta(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Pa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ba(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&jc)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Na(e,n)}return null===(o=r.interleaved)?(t.next=t,Oa(r)):(t.next=o.next,o.next=t),r.interleaved=t,Na(e,n)}function za(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Ma(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ra(e,t,n,r){var o=e.updateQueue;_a=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,u=c.next;c.next=null,null===i?a=u:i.next=u,i=c;var s=e.alternate;null!==s&&(l=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===l?s.firstBaseUpdate=u:l.next=u,s.lastBaseUpdate=c)}if(null!==a){var f=o.baseState;for(i=0,s=u=c=null,l=a;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=M({},f,d);break e;case 2:_a=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(u=s=p,c=f):s=s.next=p,i|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===s&&(c=f),o.baseState=c,o.firstBaseUpdate=u,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Mc|=i,e.lanes=i,e.memoizedState=f}}function Fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var $a=(new r.Component).refs;function Da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Ia(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Ba(e,a,o))&&(ru(t,e,o,r),za(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Ba(e,a,o))&&(ru(t,e,o,r),za(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),r=nu(e),o=Ia(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Ba(e,o,r))&&(ru(t,e,r,n),za(t,e,r))}};function Ua(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&cr(n,r)&&cr(o,a))}function Ha(e,t,n){var r=!1,o=Oo,a=t.contextType;return"object"==typeof a&&null!==a?a=Ca(a):(o=Po(t)?_o:jo.current,a=(r=null!=(r=t.contextTypes))?To(e,o):Oo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ga,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Wa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ga.enqueueReplaceState(t,t.state,null)}function Ya(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=$a,Ta(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Ca(a):(a=Po(t)?_o:jo.current,o.context=To(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Da(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ga.enqueueReplaceState(o,o.state,null),Ra(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Va(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===$a&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function qa(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ka(e){return(0,e._init)(e._payload)}function Xa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Iu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Ru(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===A?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===T&&Ka(a)===t.type)?((r=o(t,n.props)).ref=Va(e,t,n),r.return=e,r):((r=Bu(n.type,n.key,n.props,null,e.mode,r)).ref=Va(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=zu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ru(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Bu(t.type,t.key,t.props,null,e.mode,n)).ref=Va(e,null,t),n.return=e,n;case E:return(t=Fu(t,e.mode,n)).return=e,t;case T:return d(e,(0,t._init)(t._payload),n)}if(te(t)||B(t))return(t=zu(t,e.mode,n,null)).return=e,t;qa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?u(e,t,n,r):null;case E:return n.key===o?s(e,t,n,r):null;case T:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||B(n))return null!==o?null:f(e,t,n,r,null);qa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case E:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case T:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||B(r))return f(t,e=e.get(n)||null,r,o,null);qa(t,r)}return null}function m(o,a,l,c){for(var u=null,s=null,f=a,m=a=0,y=null;null!==f&&m<l.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(o,f,l[m],c);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,m),null===s?u=v:s.sibling=v,s=v,f=y}if(m===l.length)return n(o,f),aa&&Jo(o,m),u;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],c))&&(a=i(f,a,m),null===s?u=f:s.sibling=f,s=f);return aa&&Jo(o,m),u}for(f=r(o,f);m<l.length;m++)null!==(y=h(f,o,m,l[m],c))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),a=i(y,a,m),null===s?u=y:s.sibling=y,s=y);return e&&f.forEach((function(e){return t(o,e)})),aa&&Jo(o,m),u}function y(o,l,c,u){var s=B(c);if("function"!=typeof s)throw Error(a(150));if(null==(c=s.call(c)))throw Error(a(151));for(var f=s=null,m=l,y=l=0,v=null,g=c.next();null!==m&&!g.done;y++,g=c.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(o,m,g.value,u);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,y),null===f?s=b:f.sibling=b,f=b,m=v}if(g.done)return n(o,m),aa&&Jo(o,y),s;if(null===m){for(;!g.done;y++,g=c.next())null!==(g=d(o,g.value,u))&&(l=i(g,l,y),null===f?s=g:f.sibling=g,f=g);return aa&&Jo(o,y),s}for(m=r(o,m);!g.done;y++,g=c.next())null!==(g=h(m,o,y,g.value,u))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),l=i(g,l,y),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),aa&&Jo(o,y),s}return function e(r,a,i,c){if("object"==typeof i&&null!==i&&i.type===A&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var u=i.key,s=a;null!==s;){if(s.key===u){if((u=i.type)===A){if(7===s.tag){n(r,s.sibling),(a=o(s,i.props.children)).return=r,r=a;break e}}else if(s.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===T&&Ka(u)===s.type){n(r,s.sibling),(a=o(s,i.props)).ref=Va(r,s,i),a.return=r,r=a;break e}n(r,s);break}t(r,s),s=s.sibling}i.type===A?((a=zu(i.props.children,r.mode,c,i.key)).return=r,r=a):((c=Bu(i.type,i.key,i.props,null,r.mode,c)).ref=Va(r,a,i),c.return=r,r=c)}return l(r);case E:e:{for(s=i.key;null!==a;){if(a.key===s){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Fu(i,r.mode,c)).return=r,r=a}return l(r);case T:return e(r,a,(s=i._init)(i._payload),c)}if(te(i))return m(r,a,i,c);if(B(i))return y(r,a,i,c);qa(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Ru(i,r.mode,c)).return=r,r=a),l(r)):n(r,a)}}var Qa=Xa(!0),Za=Xa(!1),Ja={},ei=ko(Ja),ti=ko(Ja),ni=ko(Ja);function ri(e){if(e===Ja)throw Error(a(174));return e}function oi(e,t){switch(Lo(ni,t),Lo(ti,e),Lo(ei,Ja),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ce(null,"");break;default:t=ce(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Co(ei),Lo(ei,t)}function ai(){Co(ei),Co(ti),Co(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ce(t,e.type);t!==n&&(Lo(ti,e),Lo(ei,n))}function li(e){ti.current===e&&(Co(ei),Co(ti))}var ci=ko(0);function ui(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var si=[];function fi(){for(var e=0;e<si.length;e++)si[e]._workInProgressVersionPrimary=null;si.length=0}var di=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,mi=null,yi=null,vi=null,gi=!1,bi=!1,wi=0,xi=0;function Ei(){throw Error(a(321))}function Ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Si(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?ll:cl,e=n(r,o),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(a(301));i+=1,vi=yi=null,t.updateQueue=null,di.current=ul,e=n(r,o)}while(bi)}if(di.current=il,t=null!==yi&&null!==yi.next,hi=0,vi=yi=mi=null,gi=!1,t)throw Error(a(300));return e}function ki(){var e=0!==wi;return wi=0,e}function Ci(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?mi.memoizedState=vi=e:vi=vi.next=e,vi}function Li(){if(null===yi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=yi.next;var t=null===vi?mi.memoizedState:vi.next;if(null!==t)vi=t,yi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(yi=e).memoizedState,baseState:yi.baseState,baseQueue:yi.baseQueue,queue:yi.queue,next:null},null===vi?mi.memoizedState=vi=e:vi=vi.next=e}return vi}function Oi(e,t){return"function"==typeof t?t(e):t}function ji(e){var t=Li(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=yi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var c=l=null,u=null,s=i;do{var f=s.lane;if((hi&f)===f)null!==u&&(u=u.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===u?(c=u=d,l=r):u=u.next=d,mi.lanes|=f,Mc|=f}s=s.next}while(null!==s&&s!==i);null===u?l=r:u.next=c,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Mc|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ni(e){var t=Li(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(wl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function _i(){}function Ti(e,t){var n=mi,r=Li(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,wl=!0),r=r.queue,Hi(Bi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(n.flags|=2048,Fi(9,Ii.bind(null,n,r,o,t),void 0,null),null===Nc)throw Error(a(349));0!=(30&hi)||Pi(n,t,o)}return o}function Pi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ii(e,t,n,r){t.value=n,t.getSnapshot=r,zi(t)&&Mi(e)}function Bi(e,t,n){return n((function(){zi(t)&&Mi(e)}))}function zi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Mi(e){var t=Na(e,1);null!==t&&ru(t,e,1,-1)}function Ri(e){var t=Ci();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Oi,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,mi,e),[t.memoizedState,e]}function Fi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function $i(){return Li().memoizedState}function Di(e,t,n,r){var o=Ci();mi.flags|=e,o.memoizedState=Fi(1|t,n,void 0,void 0===r?null:r)}function Gi(e,t,n,r){var o=Li();r=void 0===r?null:r;var a=void 0;if(null!==yi){var i=yi.memoizedState;if(a=i.destroy,null!==r&&Ai(r,i.deps))return void(o.memoizedState=Fi(t,n,a,r))}mi.flags|=e,o.memoizedState=Fi(1|t,n,a,r)}function Ui(e,t){return Di(8390656,8,e,t)}function Hi(e,t){return Gi(2048,8,e,t)}function Wi(e,t){return Gi(4,2,e,t)}function Yi(e,t){return Gi(4,4,e,t)}function Vi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function qi(e,t,n){return n=null!=n?n.concat([e]):null,Gi(4,4,Vi.bind(null,t,e),n)}function Ki(){}function Xi(e,t){var n=Li();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ai(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Qi(e,t){var n=Li();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ai(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Zi(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),mi.lanes|=n,Mc|=n,e.baseState=!0),t)}function Ji(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function el(){return Li().memoizedState}function tl(e,t,n){var r=nu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=ja(e,t,n,r))&&(ru(n,e,r,tu()),al(n,t,r))}function nl(e,t,n){var r=nu(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var c=t.interleaved;return null===c?(o.next=o,Oa(t)):(o.next=c.next,c.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=ja(e,t,o,r))&&(ru(n,e,r,o=tu()),al(n,t,r))}}function rl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ol(e,t){bi=gi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var il={readContext:Ca,useCallback:Ei,useContext:Ei,useEffect:Ei,useImperativeHandle:Ei,useInsertionEffect:Ei,useLayoutEffect:Ei,useMemo:Ei,useReducer:Ei,useRef:Ei,useState:Ei,useDebugValue:Ei,useDeferredValue:Ei,useTransition:Ei,useMutableSource:Ei,useSyncExternalStore:Ei,useId:Ei,unstable_isNewReconciler:!1},ll={readContext:Ca,useCallback:function(e,t){return Ci().memoizedState=[e,void 0===t?null:t],e},useContext:Ca,useEffect:Ui,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Di(4194308,4,Vi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Di(4194308,4,e,t)},useInsertionEffect:function(e,t){return Di(4,2,e,t)},useMemo:function(e,t){var n=Ci();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ci();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ci().memoizedState=e},useState:Ri,useDebugValue:Ki,useDeferredValue:function(e){return Ci().memoizedState=e},useTransition:function(){var e=Ri(!1),t=e[0];return e=Ji.bind(null,e[1]),Ci().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=Ci();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Nc)throw Error(a(349));0!=(30&hi)||Pi(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Ui(Bi.bind(null,r,i,e),[e]),r.flags|=2048,Fi(9,Ii.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Ci(),t=Nc.identifierPrefix;if(aa){var n=Zo;t=":"+t+"R"+(n=(Qo&~(1<<32-it(Qo)-1)).toString(32)+n),0<(n=wi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=xi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},cl={readContext:Ca,useCallback:Xi,useContext:Ca,useEffect:Hi,useImperativeHandle:qi,useInsertionEffect:Wi,useLayoutEffect:Yi,useMemo:Qi,useReducer:ji,useRef:$i,useState:function(){return ji(Oi)},useDebugValue:Ki,useDeferredValue:function(e){return Zi(Li(),yi.memoizedState,e)},useTransition:function(){return[ji(Oi)[0],Li().memoizedState]},useMutableSource:_i,useSyncExternalStore:Ti,useId:el,unstable_isNewReconciler:!1},ul={readContext:Ca,useCallback:Xi,useContext:Ca,useEffect:Hi,useImperativeHandle:qi,useInsertionEffect:Wi,useLayoutEffect:Yi,useMemo:Qi,useReducer:Ni,useRef:$i,useState:function(){return Ni(Oi)},useDebugValue:Ki,useDeferredValue:function(e){var t=Li();return null===yi?t.memoizedState=e:Zi(t,yi.memoizedState,e)},useTransition:function(){return[Ni(Oi)[0],Li().memoizedState]},useMutableSource:_i,useSyncExternalStore:Ti,useId:el,unstable_isNewReconciler:!1};function sl(e,t){try{var n="",r=t;do{n+=D(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wc||(Wc=!0,Yc=r),dl(0,t)},n}function ml(e,t,n){(n=Ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){dl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Vc?Vc=new Set([this]):Vc.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function yl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Cu.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ia(-1,1)).tag=2,Ba(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function xl(e,t,n,r){t.child=null===e?Za(t,null,n,r):Qa(t,e.child,n,r)}function El(e,t,n,r,o){n=n.render;var a=t.ref;return ka(t,o),r=Si(e,t,n,r,a,o),n=ki(),null===e||wl?(aa&&n&&ta(t),t.flags|=1,xl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Wl(e,t,o))}function Al(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Pu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Sl(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:cr)(i,r)&&e.ref===t.ref)return Wl(e,t,o)}return t.flags|=1,(e=Iu(a,r)).ref=t.ref,e.return=t,t.child=e}function Sl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(cr(a,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Wl(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return Ll(e,t,n,r,o)}function kl(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Lo(Ic,Pc),Pc|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Lo(Ic,Pc),Pc|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Lo(Ic,Pc),Pc|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Lo(Ic,Pc),Pc|=r;return xl(e,t,o,n),t.child}function Cl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ll(e,t,n,r,o){var a=Po(n)?_o:jo.current;return a=To(t,a),ka(t,o),n=Si(e,t,n,r,a,o),r=ki(),null===e||wl?(aa&&r&&ta(t),t.flags|=1,xl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Wl(e,t,o))}function Ol(e,t,n,r,o){if(Po(n)){var a=!0;Mo(t)}else a=!1;if(ka(t,o),null===t.stateNode)Hl(e,t),Ha(t,n,r),Ya(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var c=i.context,u=n.contextType;u="object"==typeof u&&null!==u?Ca(u):To(t,u=Po(n)?_o:jo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||c!==u)&&Wa(t,i,r,u),_a=!1;var d=t.memoizedState;i.state=d,Ra(t,r,i,o),c=t.memoizedState,l!==r||d!==c||No.current||_a?("function"==typeof s&&(Da(t,n,s,r),c=t.memoizedState),(l=_a||Ua(t,n,l,r,d,c,u))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=c),i.props=r,i.state=c,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Pa(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:va(t.type,l),i.props=u,f=t.pendingProps,d=i.context,c="object"==typeof(c=n.contextType)&&null!==c?Ca(c):To(t,c=Po(n)?_o:jo.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==c)&&Wa(t,i,r,c),_a=!1,d=t.memoizedState,i.state=d,Ra(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||No.current||_a?("function"==typeof p&&(Da(t,n,p,r),h=t.memoizedState),(u=_a||Ua(t,n,u,r,d,h,c)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,c)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=c,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return jl(e,t,n,r,a,o)}function jl(e,t,n,r,o,a){Cl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Ro(t,n,!1),Wl(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Qa(t,e.child,null,a),t.child=Qa(t,null,l,a)):xl(e,t,l,a),t.memoizedState=r.state,o&&Ro(t,n,!0),t.child}function Nl(e){var t=e.stateNode;t.pendingContext?Bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Bo(0,t.context,!1),oi(e,t.containerInfo)}function _l(e,t,n,r,o){return ha(),ma(o),t.flags|=256,xl(e,t,n,r),t.child}var Tl,Pl,Il,Bl,zl={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function Rl(e,t,n){var r,o=t.pendingProps,i=ci.current,l=!1,c=0!=(128&t.flags);if((r=c)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Lo(ci,1&i),null===e)return sa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(c=o.children,e=o.fallback,l?(o=t.mode,l=t.child,c={mode:"hidden",children:c},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=c):l=Mu(c,o,0,null),e=zu(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(n),t.memoizedState=zl,e):Fl(t,c));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,$l(e,t,l,r=fl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Mu({mode:"visible",children:r.children},o,0,null),(i=zu(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Qa(t,e.child,null,l),t.child.memoizedState=Ml(l),t.memoizedState=zl,i);if(0==(1&t.mode))return $l(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var c=r.dgst;return r=c,$l(e,t,l,r=fl(i=Error(a(419)),r,void 0))}if(c=0!=(l&e.childLanes),wl||c){if(null!==(r=Nc)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Na(e,o),ru(r,e,o,-1))}return yu(),$l(e,t,l,r=fl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Ou.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=uo(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(qo[Ko++]=Qo,qo[Ko++]=Zo,qo[Ko++]=Xo,Qo=e.id,Zo=e.overflow,Xo=t),(t=Fl(t,r.children)).flags|=4096,t)}(e,t,c,o,r,i,n);if(l){l=o.fallback,c=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:o.children};return 0==(1&c)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=u,t.deletions=null):(o=Iu(i,u)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Iu(r,l):(l=zu(l,c,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,c=null===(c=e.child.memoizedState)?Ml(n):{baseLanes:c.baseLanes|n,cachePool:null,transitions:c.transitions},l.memoizedState=c,l.childLanes=e.childLanes&~n,t.memoizedState=zl,o}return e=(l=e.child).sibling,o=Iu(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Fl(e,t){return(t=Mu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function $l(e,t,n,r){return null!==r&&ma(r),Qa(t,e.child,null,n),(e=Fl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Dl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Sa(e.return,t,n)}function Gl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Ul(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(xl(e,t,r.children,n),0!=(2&(r=ci.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Dl(e,n,t);else if(19===e.tag)Dl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Lo(ci,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ui(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Gl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ui(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Gl(t,!0,n,null,a);break;case"together":Gl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Hl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Wl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Mc|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Iu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Iu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Yl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Vl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ql(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Vl(t),null;case 1:case 17:return Po(t.type)&&Io(),Vl(t),null;case 3:return r=t.stateNode,ai(),Co(No),Co(jo),fi(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(lu(ia),ia=null))),Pl(e,t),Vl(t),null;case 5:li(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Il(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Vl(t),null}if(e=ri(ei.current),da(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(o=0;o<Br.length;o++)Fr(Br[o],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":X(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":oe(r,i),Fr("invalid",r)}for(var c in ge(n,i),o=null,i)if(i.hasOwnProperty(c)){var u=i[c];"children"===c?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,u,e),o=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,u,e),o=["children",""+u]):l.hasOwnProperty(c)&&null!=u&&"onScroll"===c&&Fr("scroll",r)}switch(n){case"input":Y(r),J(r,i,!0);break;case"textarea":Y(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{c=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[po]=t,e[ho]=r,Tl(e,t,!1,!1),t.stateNode=e;e:{switch(c=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),o=r;break;case"iframe":case"object":case"embed":Fr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Br.length;o++)Fr(Br[o],e);o=r;break;case"source":Fr("error",e),o=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),o=r;break;case"details":Fr("toggle",e),o=r;break;case"input":X(e,r),o=K(e,r),Fr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=M({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Fr("invalid",e)}for(i in ge(n,o),u=o)if(u.hasOwnProperty(i)){var s=u[i];"style"===i?ye(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&de(e,s):"number"==typeof s&&de(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=s&&"onScroll"===i&&Fr("scroll",e):null!=s&&b(e,i,s,c))}switch(n){case"input":Y(e),J(e,r,!1);break;case"textarea":Y(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Vl(t),null;case 6:if(e&&null!=t.stateNode)Bl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),da(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Vl(t),null;case 13:if(Co(ci),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Vl(t),i=!1}else null!==ia&&(lu(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ci.current)?0===Bc&&(Bc=3):yu())),null!==t.updateQueue&&(t.flags|=4),Vl(t),null);case 4:return ai(),Pl(e,t),null===e&&Gr(t.stateNode.containerInfo),Vl(t),null;case 10:return Aa(t.type._context),Vl(t),null;case 19:if(Co(ci),null===(i=t.memoizedState))return Vl(t),null;if(r=0!=(128&t.flags),null===(c=i.rendering))if(r)Yl(i,!1);else{if(0!==Bc||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(c=ui(e))){for(t.flags|=128,Yl(i,!1),null!==(r=c.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(c=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=c.childLanes,i.lanes=c.lanes,i.child=c.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=c.memoizedProps,i.memoizedState=c.memoizedState,i.updateQueue=c.updateQueue,i.type=c.type,e=c.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Lo(ci,1&ci.current|2),t.child}e=e.sibling}null!==i.tail&&Qe()>Uc&&(t.flags|=128,r=!0,Yl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ui(c))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Yl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!aa)return Vl(t),null}else 2*Qe()-i.renderingStartTime>Uc&&1073741824!==n&&(t.flags|=128,r=!0,Yl(i,!1),t.lanes=4194304);i.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=i.last)?n.sibling=c:t.child=c,i.last=c)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Qe(),t.sibling=null,n=ci.current,Lo(ci,r?1&n|2:1&n),t):(Vl(t),null);case 22:case 23:return du(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Pc)&&(Vl(t),6&t.subtreeFlags&&(t.flags|=8192)):Vl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Kl(e,t){switch(na(t),t.tag){case 1:return Po(t.type)&&Io(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),Co(No),Co(jo),fi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(Co(ci),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Co(ci),null;case 4:return ai(),null;case 10:return Aa(t.type._context),null;case 22:case 23:return du(),null;default:return null}}Tl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Pl=function(){},Il=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=K(e,o),r=K(e,r),i=[];break;case"select":o=M({},o,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(s in ge(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var c=o[s];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var u=r[s];if(c=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&u!==c&&(null!=u||null!=c))if("style"===s)if(c){for(a in c)!c.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&c[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(i||(i=[]),i.push(s,n)),n=u;else"dangerouslySetInnerHTML"===s?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(i=i||[]).push(s,u)):"children"===s?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(s,""+u):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=u&&"onScroll"===s&&Fr("scroll",e),i||c===u||(i=[])):(i=i||[]).push(s,u))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},Bl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Xl=!1,Ql=!1,Zl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function ec(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ku(e,t,n)}else n.current=null}function tc(e,t,n){try{n()}catch(n){ku(e,t,n)}}var nc=!1;function rc(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&tc(t,n,a)}o=o.next}while(o!==r)}}function oc(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ac(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ic(e){var t=e.alternate;null!==t&&(e.alternate=null,ic(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[yo],delete t[vo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lc(e){return 5===e.tag||3===e.tag||4===e.tag}function cc(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lc(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(uc(e,t,n),e=e.sibling;null!==e;)uc(e,t,n),e=e.sibling}function sc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(sc(e,t,n),e=e.sibling;null!==e;)sc(e,t,n),e=e.sibling}var fc=null,dc=!1;function pc(e,t,n){for(n=n.child;null!==n;)hc(e,t,n),n=n.sibling}function hc(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Ql||ec(n,t);case 6:var r=fc,o=dc;fc=null,pc(e,t,n),dc=o,null!==(fc=r)&&(dc?(e=fc,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fc.removeChild(n.stateNode));break;case 18:null!==fc&&(dc?(e=fc,n=n.stateNode,8===e.nodeType?co(e.parentNode,n):1===e.nodeType&&co(e,n),Gt(e)):co(fc,n.stateNode));break;case 4:r=fc,o=dc,fc=n.stateNode.containerInfo,dc=!0,pc(e,t,n),fc=r,dc=o;break;case 0:case 11:case 14:case 15:if(!Ql&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&tc(n,t,i),o=o.next}while(o!==r)}pc(e,t,n);break;case 1:if(!Ql&&(ec(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){ku(n,t,e)}pc(e,t,n);break;case 21:pc(e,t,n);break;case 22:1&n.mode?(Ql=(r=Ql)||null!==n.memoizedState,pc(e,t,n),Ql=r):pc(e,t,n);break;default:pc(e,t,n)}}function mc(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zl),t.forEach((function(t){var r=ju.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function yc(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,c=l;e:for(;null!==c;){switch(c.tag){case 5:fc=c.stateNode,dc=!1;break e;case 3:case 4:fc=c.stateNode.containerInfo,dc=!0;break e}c=c.return}if(null===fc)throw Error(a(160));hc(i,l,o),fc=null,dc=!1;var u=o.alternate;null!==u&&(u.return=null),o.return=null}catch(e){ku(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vc(t,e),t=t.sibling}function vc(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(yc(t,e),gc(e),4&r){try{rc(3,e,e.return),oc(3,e)}catch(t){ku(e,e.return,t)}try{rc(5,e,e.return)}catch(t){ku(e,e.return,t)}}break;case 1:yc(t,e),gc(e),512&r&&null!==n&&ec(n,n.return);break;case 5:if(yc(t,e),gc(e),512&r&&null!==n&&ec(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){ku(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,c=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===c&&"radio"===i.type&&null!=i.name&&Q(o,i),be(c,l);var s=be(c,i);for(l=0;l<u.length;l+=2){var f=u[l],d=u[l+1];"style"===f?ye(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,s)}switch(c){case"input":Z(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){ku(e,e.return,t)}}break;case 6:if(yc(t,e),gc(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){ku(e,e.return,t)}}break;case 3:if(yc(t,e),gc(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Gt(t.containerInfo)}catch(t){ku(e,e.return,t)}break;case 4:default:yc(t,e),gc(e);break;case 13:yc(t,e),gc(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Gc=Qe())),4&r&&mc(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Ql=(s=Ql)||f,yc(t,e),Ql=s):yc(t,e),gc(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Jl=e,f=e.child;null!==f;){for(d=Jl=f;null!==Jl;){switch(h=(p=Jl).child,p.tag){case 0:case 11:case 14:case 15:rc(4,p,p.return);break;case 1:ec(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){ku(r,n,e)}}break;case 5:ec(p,p.return);break;case 22:if(null!==p.memoizedState){Ec(d);continue}}null!==h?(h.return=p,Jl=h):Ec(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,s?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(c=d.stateNode,l=null!=(u=d.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,c.style.display=me("display",l))}catch(t){ku(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=s?"":d.memoizedProps}catch(t){ku(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:yc(t,e),gc(e),4&r&&mc(e);case 21:}}function gc(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lc(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),sc(e,cc(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;uc(e,cc(e),i);break;default:throw Error(a(161))}}catch(t){ku(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bc(e,t,n){Jl=e,wc(e,t,n)}function wc(e,t,n){for(var r=0!=(1&e.mode);null!==Jl;){var o=Jl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Xl;if(!i){var l=o.alternate,c=null!==l&&null!==l.memoizedState||Ql;l=Xl;var u=Ql;if(Xl=i,(Ql=c)&&!u)for(Jl=o;null!==Jl;)c=(i=Jl).child,22===i.tag&&null!==i.memoizedState?Ac(o):null!==c?(c.return=i,Jl=c):Ac(o);for(;null!==a;)Jl=a,wc(a,t,n),a=a.sibling;Jl=o,Xl=l,Ql=u}xc(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Jl=a):xc(e)}}function xc(e){for(;null!==Jl;){var t=Jl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ql||oc(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ql)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:va(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Fa(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fa(t,l,n)}break;case 5:var c=t.stateNode;if(null===n&&4&t.flags){n=c;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Gt(d)}}}break;default:throw Error(a(163))}Ql||512&t.flags&&ac(t)}catch(e){ku(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function Ec(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function Ac(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{oc(4,t)}catch(e){ku(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){ku(t,o,e)}}var a=t.return;try{ac(t)}catch(e){ku(t,a,e)}break;case 5:var i=t.return;try{ac(t)}catch(e){ku(t,i,e)}}}catch(e){ku(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var Sc,kc=Math.ceil,Cc=w.ReactCurrentDispatcher,Lc=w.ReactCurrentOwner,Oc=w.ReactCurrentBatchConfig,jc=0,Nc=null,_c=null,Tc=0,Pc=0,Ic=ko(0),Bc=0,zc=null,Mc=0,Rc=0,Fc=0,$c=null,Dc=null,Gc=0,Uc=1/0,Hc=null,Wc=!1,Yc=null,Vc=null,qc=!1,Kc=null,Xc=0,Qc=0,Zc=null,Jc=-1,eu=0;function tu(){return 0!=(6&jc)?Qe():-1!==Jc?Jc:Jc=Qe()}function nu(e){return 0==(1&e.mode)?1:0!=(2&jc)&&0!==Tc?Tc&-Tc:null!==ya.transition?(0===eu&&(eu=mt()),eu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Xt(e.type)}function ru(e,t,n,r){if(50<Qc)throw Qc=0,Zc=null,Error(a(185));vt(e,n,r),0!=(2&jc)&&e===Nc||(e===Nc&&(0==(2&jc)&&(Rc|=n),4===Bc&&cu(e,Tc)),ou(e,r),1===n&&0===jc&&0==(1&t.mode)&&(Uc=Qe()+500,$o&&Uo()))}function ou(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,c=o[i];-1===c?0!=(l&n)&&0==(l&r)||(o[i]=pt(l,t)):c<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=dt(e,e===Nc?Tc:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){$o=!0,Go(e)}(uu.bind(null,e)):Go(uu.bind(null,e)),io((function(){0==(6&jc)&&Uo()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Nu(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if(Jc=-1,eu=0,0!=(6&jc))throw Error(a(327));var n=e.callbackNode;if(Au()&&e.callbackNode!==n)return null;var r=dt(e,e===Nc?Tc:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vu(e,r);else{t=r;var o=jc;jc|=2;var i=mu();for(Nc===e&&Tc===t||(Hc=null,Uc=Qe()+500,pu(e,t));;)try{bu();break}catch(t){hu(e,t)}Ea(),Cc.current=i,jc=o,null!==_c?t=0:(Nc=null,Tc=0,t=Bc)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=iu(e,o)),1===t)throw n=zc,pu(e,0),cu(e,r),ou(e,Qe()),n;if(6===t)cu(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=vu(e,r))&&0!==(i=ht(e))&&(r=i,t=iu(e,i)),1===t))throw n=zc,pu(e,0),cu(e,r),ou(e,Qe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Eu(e,Dc,Hc);break;case 3:if(cu(e,r),(130023424&r)===r&&10<(t=Gc+500-Qe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Eu.bind(null,e,Dc,Hc),t);break}Eu(e,Dc,Hc);break;case 4:if(cu(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*kc(r/1960))-r)){e.timeoutHandle=ro(Eu.bind(null,e,Dc,Hc),r);break}Eu(e,Dc,Hc);break;default:throw Error(a(329))}}}return ou(e,Qe()),e.callbackNode===n?au.bind(null,e):null}function iu(e,t){var n=$c;return e.current.memoizedState.isDehydrated&&(pu(e,t).flags|=256),2!==(e=vu(e,t))&&(t=Dc,Dc=n,null!==t&&lu(t)),e}function lu(e){null===Dc?Dc=e:Dc.push.apply(Dc,e)}function cu(e,t){for(t&=~Fc,t&=~Rc,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function uu(e){if(0!=(6&jc))throw Error(a(327));Au();var t=dt(e,0);if(0==(1&t))return ou(e,Qe()),null;var n=vu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=iu(e,r))}if(1===n)throw n=zc,pu(e,0),cu(e,t),ou(e,Qe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Eu(e,Dc,Hc),ou(e,Qe()),null}function su(e,t){var n=jc;jc|=1;try{return e(t)}finally{0===(jc=n)&&(Uc=Qe()+500,$o&&Uo())}}function fu(e){null!==Kc&&0===Kc.tag&&0==(6&jc)&&Au();var t=jc;jc|=1;var n=Oc.transition,r=bt;try{if(Oc.transition=null,bt=1,e)return e()}finally{bt=r,Oc.transition=n,0==(6&(jc=t))&&Uo()}}function du(){Pc=Ic.current,Co(Ic)}function pu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==_c)for(n=_c.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Io();break;case 3:ai(),Co(No),Co(jo),fi();break;case 5:li(r);break;case 4:ai();break;case 13:case 19:Co(ci);break;case 10:Aa(r.type._context);break;case 22:case 23:du()}n=n.return}if(Nc=e,_c=e=Iu(e.current,null),Tc=Pc=t,Bc=0,zc=null,Fc=Rc=Mc=0,Dc=$c=null,null!==La){for(t=0;t<La.length;t++)if(null!==(r=(n=La[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}La=null}return e}function hu(e,t){for(;;){var n=_c;try{if(Ea(),di.current=il,gi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}gi=!1}if(hi=0,vi=yi=mi=null,bi=!1,wi=0,Lc.current=null,null===n||null===n.return){Bc=1,zc=t,_c=null;break}e:{var i=e,l=n.return,c=n,u=t;if(t=Tc,c.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u,f=c,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=vl(l);if(null!==h){h.flags&=-257,gl(h,l,c,0,t),1&h.mode&&yl(i,s,t),u=s;var m=(t=h).updateQueue;if(null===m){var y=new Set;y.add(u),t.updateQueue=y}else m.add(u);break e}if(0==(1&t)){yl(i,s,t),yu();break e}u=Error(a(426))}else if(aa&&1&c.mode){var v=vl(l);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),gl(v,l,c,0,t),ma(sl(u,c));break e}}i=u=sl(u,c),4!==Bc&&(Bc=2),null===$c?$c=[i]:$c.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Ma(i,hl(0,u,t));break e;case 1:c=u;var g=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Vc||!Vc.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Ma(i,ml(i,c,t));break e}}i=i.return}while(null!==i)}xu(n)}catch(e){t=e,_c===n&&null!==n&&(_c=n=n.return);continue}break}}function mu(){var e=Cc.current;return Cc.current=il,null===e?il:e}function yu(){0!==Bc&&3!==Bc&&2!==Bc||(Bc=4),null===Nc||0==(268435455&Mc)&&0==(268435455&Rc)||cu(Nc,Tc)}function vu(e,t){var n=jc;jc|=2;var r=mu();for(Nc===e&&Tc===t||(Hc=null,pu(e,t));;)try{gu();break}catch(t){hu(e,t)}if(Ea(),jc=n,Cc.current=r,null!==_c)throw Error(a(261));return Nc=null,Tc=0,Bc}function gu(){for(;null!==_c;)wu(_c)}function bu(){for(;null!==_c&&!Ke();)wu(_c)}function wu(e){var t=Sc(e.alternate,e,Pc);e.memoizedProps=e.pendingProps,null===t?xu(e):_c=t,Lc.current=null}function xu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=ql(n,t,Pc)))return void(_c=n)}else{if(null!==(n=Kl(n,t)))return n.flags&=32767,void(_c=n);if(null===e)return Bc=6,void(_c=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(_c=t);_c=t=e}while(null!==t);0===Bc&&(Bc=5)}function Eu(e,t,n){var r=bt,o=Oc.transition;try{Oc.transition=null,bt=1,function(e,t,n,r){do{Au()}while(null!==Kc);if(0!=(6&jc))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Nc&&(_c=Nc=null,Tc=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||qc||(qc=!0,Nu(tt,(function(){return Au(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Oc.transition,Oc.transition=null;var l=bt;bt=1;var c=jc;jc|=4,Lc.current=null,function(e,t){if(eo=Ht,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,c=-1,u=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(c=l+o),d!==i||0!==r&&3!==d.nodeType||(u=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===o&&(c=l),p===i&&++f===r&&(u=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===c||-1===u?null:{start:c,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Ht=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var y=m.memoizedProps,v=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?y:va(t.type,y),v);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){ku(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}m=nc,nc=!1}(e,n),vc(n,e),hr(to),Ht=!!eo,to=eo=null,e.current=n,bc(n,e,o),Xe(),jc=c,bt=l,Oc.transition=i}else e.current=n;if(qc&&(qc=!1,Kc=e,Xc=o),0===(i=e.pendingLanes)&&(Vc=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ou(e,Qe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Wc)throw Wc=!1,e=Yc,Yc=null,e;0!=(1&Xc)&&0!==e.tag&&Au(),0!=(1&(i=e.pendingLanes))?e===Zc?Qc++:(Qc=0,Zc=e):Qc=0,Uo()}(e,t,n,r)}finally{Oc.transition=o,bt=r}return null}function Au(){if(null!==Kc){var e=wt(Xc),t=Oc.transition,n=bt;try{if(Oc.transition=null,bt=16>e?16:e,null===Kc)var r=!1;else{if(e=Kc,Kc=null,Xc=0,0!=(6&jc))throw Error(a(331));var o=jc;for(jc|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(0!=(16&Jl.flags)){var c=i.deletions;if(null!==c){for(var u=0;u<c.length;u++){var s=c[u];for(Jl=s;null!==Jl;){var f=Jl;switch(f.tag){case 0:case 11:case 15:rc(8,f,i)}var d=f.child;if(null!==d)d.return=f,Jl=d;else for(;null!==Jl;){var p=(f=Jl).sibling,h=f.return;if(ic(f),f===s){Jl=null;break}if(null!==p){p.return=h,Jl=p;break}Jl=h}}}var m=i.alternate;if(null!==m){var y=m.child;if(null!==y){m.child=null;do{var v=y.sibling;y.sibling=null,y=v}while(null!==y)}}Jl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(0!=(2048&(i=Jl).flags))switch(i.tag){case 0:case 11:case 15:rc(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Jl=g;break e}Jl=i.return}}var b=e.current;for(Jl=b;null!==Jl;){var w=(l=Jl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Jl=w;else e:for(l=b;null!==Jl;){if(0!=(2048&(c=Jl).flags))try{switch(c.tag){case 0:case 11:case 15:oc(9,c)}}catch(e){ku(c,c.return,e)}if(c===l){Jl=null;break e}var x=c.sibling;if(null!==x){x.return=c.return,Jl=x;break e}Jl=c.return}}if(jc=o,Uo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Oc.transition=t}}return!1}function Su(e,t,n){e=Ba(e,t=hl(0,t=sl(n,t),1),1),t=tu(),null!==e&&(vt(e,1,t),ou(e,t))}function ku(e,t,n){if(3===e.tag)Su(e,e,n);else for(;null!==t;){if(3===t.tag){Su(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Vc||!Vc.has(r))){t=Ba(t,e=ml(t,e=sl(n,e),1),1),e=tu(),null!==t&&(vt(t,1,e),ou(t,e));break}}t=t.return}}function Cu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,Nc===e&&(Tc&n)===n&&(4===Bc||3===Bc&&(130023424&Tc)===Tc&&500>Qe()-Gc?pu(e,0):Fc|=n),ou(e,t)}function Lu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=tu();null!==(e=Na(e,t))&&(vt(e,t,n),ou(e,n))}function Ou(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Lu(e,n)}function ju(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Lu(e,n)}function Nu(e,t){return Ve(e,t)}function _u(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Tu(e,t,n,r){return new _u(e,t,n,r)}function Pu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Iu(e,t){var n=e.alternate;return null===n?((n=Tu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Pu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case A:return zu(n.children,o,i,t);case S:l=8,o|=8;break;case k:return(e=Tu(12,n,t,2|o)).elementType=k,e.lanes=i,e;case j:return(e=Tu(13,n,t,o)).elementType=j,e.lanes=i,e;case N:return(e=Tu(19,n,t,o)).elementType=N,e.lanes=i,e;case P:return Mu(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case L:l=9;break e;case O:l=11;break e;case _:l=14;break e;case T:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Tu(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function zu(e,t,n,r){return(e=Tu(7,e,r,t)).lanes=n,e}function Mu(e,t,n,r){return(e=Tu(22,e,r,t)).elementType=P,e.lanes=n,e.stateNode={isHidden:!1},e}function Ru(e,t,n){return(e=Tu(6,e,null,t)).lanes=n,e}function Fu(e,t,n){return(t=Tu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $u(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yt(0),this.expirationTimes=yt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Du(e,t,n,r,o,a,i,l,c){return e=new $u(e,t,n,l,c),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Tu(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ta(a),e}function Gu(e){if(!e)return Oo;e:{if(Ge(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Po(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Po(n))return zo(e,n,t)}return t}function Uu(e,t,n,r,o,a,i,l,c){return(e=Du(n,r,!0,e,0,a,0,l,c)).context=Gu(null),n=e.current,(a=Ia(r=tu(),o=nu(n))).callback=null!=t?t:null,Ba(n,a,o),e.current.lanes=o,vt(e,o,r),ou(e,r),e}function Hu(e,t,n,r){var o=t.current,a=tu(),i=nu(o);return n=Gu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ia(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ba(o,t,i))&&(ru(e,o,i,a),za(e,o,i)),i}function Wu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Yu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Vu(e,t){Yu(e,t),(e=e.alternate)&&Yu(e,t)}Sc=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||No.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Nl(t),ha();break;case 5:ii(t);break;case 1:Po(t.type)&&Mo(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Lo(ga,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Lo(ci,1&ci.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Rl(e,t,n):(Lo(ci,1&ci.current),null!==(e=Wl(e,t,n))?e.sibling:null);Lo(ci,1&ci.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Ul(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Lo(ci,ci.current),r)break;return null;case 22:case 23:return t.lanes=0,kl(e,t,n)}return Wl(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,aa&&0!=(1048576&t.flags)&&ea(t,Vo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Hl(e,t),e=t.pendingProps;var o=To(t,jo.current);ka(t,n),o=Si(null,t,r,e,o,n);var i=ki();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Po(r)?(i=!0,Mo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ta(t),o.updater=Ga,t.stateNode=o,o._reactInternals=t,Ya(t,r,e,n),t=jl(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),xl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Hl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Pu(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===_)return 14}return 2}(r),e=va(r,e),o){case 0:t=Ll(null,t,r,e,n);break e;case 1:t=Ol(null,t,r,e,n);break e;case 11:t=El(null,t,r,e,n);break e;case 14:t=Al(null,t,r,va(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ll(e,t,r,o=t.elementType===r?o:va(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ol(e,t,r,o=t.elementType===r?o:va(r,o),n);case 3:e:{if(Nl(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Pa(e,t),Ra(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=_l(e,t,r,n,o=sl(Error(a(423)),t));break e}if(r!==o){t=_l(e,t,r,n,o=sl(Error(a(424)),t));break e}for(oa=uo(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Za(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Wl(e,t,n);break e}xl(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),Cl(e,t),xl(e,t,l,n),t.child;case 6:return null===e&&sa(t),null;case 13:return Rl(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Qa(t,null,r,n):xl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,El(e,t,r,o=t.elementType===r?o:va(r,o),n);case 7:return xl(e,t,t.pendingProps,n),t.child;case 8:case 12:return xl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Lo(ga,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!No.current){t=Wl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var c=i.dependencies;if(null!==c){l=i.child;for(var u=c.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Ia(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?u.next=u:(u.next=f.next,f.next=u),s.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Sa(i.return,n,t),c.lanes|=n;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),Sa(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}xl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,ka(t,n),r=r(o=Ca(o)),t.flags|=1,xl(e,t,r,n),t.child;case 14:return o=va(r=t.type,t.pendingProps),Al(e,t,r,o=va(r.type,o),n);case 15:return Sl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:va(r,o),Hl(e,t),t.tag=1,Po(r)?(e=!0,Mo(t)):e=!1,ka(t,n),Ha(t,r,o),Ya(t,r,o,n),jl(null,t,r,!0,e,n);case 19:return Ul(e,t,n);case 22:return kl(e,t,n)}throw Error(a(156,t.tag))};var qu="function"==typeof reportError?reportError:function(e){console.error(e)};function Ku(e){this._internalRoot=e}function Xu(e){this._internalRoot=e}function Qu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Wu(i);l.call(e)}}Hu(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Wu(i);a.call(e)}}var i=Uu(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=i,e[mo]=i.current,Gr(8===e.nodeType?e.parentNode:e),fu(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Wu(c);l.call(e)}}var c=Du(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=c,e[mo]=c.current,Gr(8===e.nodeType?e.parentNode:e),fu((function(){Hu(t,c,n,r)})),c}(n,t,e,o,r);return Wu(i)}Xu.prototype.render=Ku.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Hu(e,t,null,null)},Xu.prototype.unmount=Ku.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fu((function(){Hu(null,e,null,null)})),t[mo]=null}},Xu.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Pt.length&&0!==t&&t<Pt[n].priority;n++);Pt.splice(n,0,e),0===n&&Mt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),ou(t,Qe()),0==(6&jc)&&(Uc=Qe()+500,Uo()))}break;case 13:fu((function(){var t=Na(e,1);if(null!==t){var n=tu();ru(t,e,1,n)}})),Vu(e,1)}},Et=function(e){if(13===e.tag){var t=Na(e,134217728);null!==t&&ru(t,e,134217728,tu()),Vu(e,134217728)}},At=function(e){if(13===e.tag){var t=nu(e),n=Na(e,t);null!==n&&ru(n,e,t,tu()),Vu(e,t)}},St=function(){return bt},kt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ee=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Eo(r);if(!o)throw Error(a(90));V(r),Z(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Oe=su,je=fu;var ts={usingClientEntryPoint:!1,Events:[wo,xo,Eo,Ce,Le,su]},ns={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ot=os.inject(rs),at=os}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Qu(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Qu(e))throw Error(a(299));var n=!1,r="",o=qu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Du(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Gr(8===e.nodeType?e.parentNode:e),new Ku(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return fu(e)},t.hydrate=function(e,t,n){if(!Zu(t))throw Error(a(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Qu(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=qu;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Uu(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Gr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Xu(t)},t.render=function(e,t,n){if(!Zu(t))throw Error(a(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(a(40));return!!e._reactRootContainer&&(fu((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=su,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return es(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),c=Symbol.for("react.context"),u=Symbol.for("react.server_context"),s=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),d=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),h=Symbol.for("react.lazy");Symbol.for("react.offscreen");function m(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case i:case a:case f:case d:return e;default:switch(e=e&&e.$$typeof){case u:case c:case s:case h:case p:case l:return e;default:return t}}case r:return t}}}Symbol.for("react.module.reference"),t.isFragment=function(e){return m(e)===o},t.isMemo=function(e){return m(e)===p}},864:(e,t,n)=>{"use strict";e.exports=n(921)},251:(e,t,n)=>{"use strict";var r=n(294),o=Symbol.for("react.element"),a=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,c={},u=null,s=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(s=t.ref),t)a.call(t,r)&&!l.hasOwnProperty(r)&&(c[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===c[r]&&(c[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:s,props:c,_owner:i.current}}t.jsx=c,t.jsxs=c},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),c=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function v(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var w=b.prototype=new g;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var x=Array.isArray,E=Object.prototype.hasOwnProperty,A={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,o)&&!S.hasOwnProperty(o)&&(a[o]=t[o]);var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){for(var u=Array(c),s=0;s<c;s++)u[s]=arguments[s+2];a.children=u}if(e&&e.defaultProps)for(o in c=e.defaultProps)void 0===a[o]&&(a[o]=c[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:A.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var L=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function j(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var c=!1;if(null===e)c=!0;else switch(l){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0}}if(c)return i=i(c=e),e=""===a?"."+O(c,0):a,x(i)?(o="",null!=e&&(o=e.replace(L,"$&/")+"/"),j(i,t,o,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||c&&c.key===i.key?"":(""+i.key).replace(L,"$&/")+"/")+e)),t.push(i)),1;if(c=0,a=""===a?".":a+":",x(e))for(var u=0;u<e.length;u++){var s=a+O(l=e[u],u);c+=j(l,t,o,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),u=0;!(l=e.next()).done;)c+=j(l=l.value,t,o,s=a+O(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return c}function N(e,t,n){if(null==e)return e;var r=[],o=0;return j(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var T={current:null},P={transition:null},I={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:P,ReactCurrentOwner:A};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=A.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)E.call(t,u)&&!S.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){c=Array(u);for(var s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:c,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=P.transition;P.transition={};try{e()}finally{P.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return T.current.useCallback(e,t)},t.useContext=function(e){return T.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return T.current.useDeferredValue(e)},t.useEffect=function(e,t){return T.current.useEffect(e,t)},t.useId=function(){return T.current.useId()},t.useImperativeHandle=function(e,t,n){return T.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return T.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return T.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return T.current.useMemo(e,t)},t.useReducer=function(e,t,n){return T.current.useReducer(e,t,n)},t.useRef=function(e){return T.current.useRef(e)},t.useState=function(e){return T.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return T.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return T.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,c=e[l],u=l+1,s=e[u];if(0>a(c,n))u<o&&0>a(s,c)?(e[r]=s,e[u]=n,r=u):(e[r]=c,e[l]=n,r=l);else{if(!(u<o&&0>a(s,n)))break e;e[r]=s,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,c=l.now();t.unstable_now=function(){return l.now()-c}}var u=[],s=[],f=1,d=null,p=3,h=!1,m=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(u,t)}t=r(s)}}function x(e){if(y=!1,w(e),!m)if(null!==r(u))m=!0,P(E);else{var t=r(s);null!==t&&I(x,t.startTime-e)}}function E(e,n){m=!1,y&&(y=!1,g(C),C=-1),h=!0;var a=p;try{for(w(n),d=r(u);null!==d&&(!(d.expirationTime>n)||e&&!j());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(u)&&o(u),w(n)}else o(u);d=r(u)}if(null!==d)var c=!0;else{var f=r(s);null!==f&&I(x,f.startTime-n),c=!1}return c}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var A,S=!1,k=null,C=-1,L=5,O=-1;function j(){return!(t.unstable_now()-O<L)}function N(){if(null!==k){var e=t.unstable_now();O=e;var n=!0;try{n=k(!0,e)}finally{n?A():(S=!1,k=null)}}else S=!1}if("function"==typeof b)A=function(){b(N)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,T=_.port2;_.port1.onmessage=N,A=function(){T.postMessage(null)}}else A=function(){v(N,0)};function P(e){k=e,S||(S=!0,A())}function I(e,n){C=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,P(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):L=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(s,e),null===r(u)&&e===r(s)&&(y?(g(C),C=-1):y=!0,I(x,a-i))):(e.sortIndex=l,n(u,e),m||h||(m=!0,P(E))),e},t.unstable_shouldYield=j,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var c=e[l],u=r.base?c[0]+r.base:c[0],s=a[u]||0,f="".concat(u," ").concat(s);a[u]=s+1;var d=n(f),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var c=r(e,o),u=0;u<a.length;u++){var s=n(a[u]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}a=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={id:e,exports:{}};return n[e](a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0,(()=>{"use strict";var e={};o.r(e),o.d(e,{hasBrowserEnv:()=>Vi,hasStandardBrowserEnv:()=>qi,hasStandardBrowserWebWorkerEnv:()=>Xi});var t=o(294),n=o.t(t,2),r=o(745),a=o(379),i=o.n(a),l=o(795),c=o.n(l),u=o(569),s=o.n(u),f=o(565),d=o.n(f),p=o(216),h=o.n(p),m=o(589),y=o.n(m),v=o(740),g={};g.styleTagTransform=y(),g.setAttributes=d(),g.insert=s().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=h(),i()(v.Z,g),v.Z&&v.Z.locals&&v.Z.locals;var b=o(528),w={};function x(){return x=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},x.apply(this,arguments)}function E(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function A(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}function S(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function k(e){if(!S(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=k(e[n])})),t}function C(e,t,n={clone:!0}){const r=n.clone?x({},e):e;return S(e)&&S(t)&&Object.keys(t).forEach((o=>{"__proto__"!==o&&(S(t[o])&&o in e&&S(e[o])?r[o]=C(e[o],t[o],n):n.clone?r[o]=S(t[o])?k(t[o]):t[o]:r[o]=t[o])})),r}w.styleTagTransform=y(),w.setAttributes=d(),w.insert=s().bind(null,"head"),w.domAPI=c(),w.insertStyleElement=h(),i()(b.Z,w),b.Z&&b.Z.locals&&b.Z.locals;const L=["values","unit","step"],O={borderRadius:4},j={xs:0,sm:600,md:900,lg:1200,xl:1536},N={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${j[e]}px)`};function _(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||N;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=r.breakpoints||N;return Object.keys(t).reduce(((r,o)=>{if(-1!==Object.keys(e.values||j).indexOf(o))r[e.up(o)]=n(t[o],o);else{const e=o;r[e]=t[e]}return r}),{})}return n(t)}function T(e){if("string"!=typeof e)throw new Error(A(7));return e.charAt(0).toUpperCase()+e.slice(1)}function P(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function I(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:P(e,n)||r,t&&(o=t(o,r,e)),o}const B=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:o}=e,a=e=>{if(null==e[t])return null;const a=e[t],i=P(e.theme,r)||{};return _(e,a,(e=>{let r=I(i,o,e);return e===r&&"string"==typeof e&&(r=I(i,o,`${t}${"default"===e?"":T(e)}`,e)),!1===n?r:{[n]:r}}))};return a.propTypes={},a.filterProps=[t],a},z=function(e,t){return t?C(e,t,{clone:!1}):e},M={m:"margin",p:"padding"},R={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},F={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},$=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!F[e])return[e];e=F[e]}const[t,n]=e.split(""),r=M[t],o=R[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),D=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],G=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],U=[...D,...G];function H(e,t,n,r){var o;const a=null!=(o=P(e,t,!1))?o:n;return"number"==typeof a?e=>"string"==typeof e?e:a*e:Array.isArray(a)?e=>"string"==typeof e?e:a[e]:"function"==typeof a?a:()=>{}}function W(e){return H(e,"spacing",8)}function Y(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function V(e,t){const n=W(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(-1===t.indexOf(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=Y(t,n),e)),{})}($(n),r);return _(e,e[n],o)}(e,t,r,n))).reduce(z,{})}function q(e){return V(e,D)}function K(e){return V(e,G)}function X(e){return V(e,U)}q.propTypes={},q.filterProps=D,K.propTypes={},K.filterProps=G,X.propTypes={},X.filterProps=U;const Q=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?z(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function Z(e){return"number"!=typeof e?e:`${e}px solid`}function J(e,t){return B({prop:e,themeKey:"borders",transform:t})}const ee=J("border",Z),te=J("borderTop",Z),ne=J("borderRight",Z),re=J("borderBottom",Z),oe=J("borderLeft",Z),ae=J("borderColor"),ie=J("borderTopColor"),le=J("borderRightColor"),ce=J("borderBottomColor"),ue=J("borderLeftColor"),se=J("outline",Z),fe=J("outlineColor"),de=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=H(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:Y(t,e)});return _(e,e.borderRadius,n)}return null};de.propTypes={},de.filterProps=["borderRadius"],Q(ee,te,ne,re,oe,ae,ie,le,ce,ue,de,se,fe);const pe=e=>{if(void 0!==e.gap&&null!==e.gap){const t=H(e.theme,"spacing",8),n=e=>({gap:Y(t,e)});return _(e,e.gap,n)}return null};pe.propTypes={},pe.filterProps=["gap"];const he=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=H(e.theme,"spacing",8),n=e=>({columnGap:Y(t,e)});return _(e,e.columnGap,n)}return null};he.propTypes={},he.filterProps=["columnGap"];const me=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=H(e.theme,"spacing",8),n=e=>({rowGap:Y(t,e)});return _(e,e.rowGap,n)}return null};function ye(e,t){return"grey"===t?t:e}function ve(e){return e<=1&&0!==e?100*e+"%":e}me.propTypes={},me.filterProps=["rowGap"],Q(pe,he,me,B({prop:"gridColumn"}),B({prop:"gridRow"}),B({prop:"gridAutoFlow"}),B({prop:"gridAutoColumns"}),B({prop:"gridAutoRows"}),B({prop:"gridTemplateColumns"}),B({prop:"gridTemplateRows"}),B({prop:"gridTemplateAreas"}),B({prop:"gridArea"})),Q(B({prop:"color",themeKey:"palette",transform:ye}),B({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:ye}),B({prop:"backgroundColor",themeKey:"palette",transform:ye}));const ge=B({prop:"width",transform:ve}),be=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r;const o=(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||j[t];return o?"px"!==(null==(r=e.theme)||null==(r=r.breakpoints)?void 0:r.unit)?{maxWidth:`${o}${e.theme.breakpoints.unit}`}:{maxWidth:o}:{maxWidth:ve(t)}};return _(e,e.maxWidth,t)}return null};be.filterProps=["maxWidth"];const we=B({prop:"minWidth",transform:ve}),xe=B({prop:"height",transform:ve}),Ee=B({prop:"maxHeight",transform:ve}),Ae=B({prop:"minHeight",transform:ve}),Se=(B({prop:"size",cssProperty:"width",transform:ve}),B({prop:"size",cssProperty:"height",transform:ve}),Q(ge,be,we,xe,Ee,Ae,B({prop:"boxSizing"})),{border:{themeKey:"borders",transform:Z},borderTop:{themeKey:"borders",transform:Z},borderRight:{themeKey:"borders",transform:Z},borderBottom:{themeKey:"borders",transform:Z},borderLeft:{themeKey:"borders",transform:Z},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:Z},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:de},color:{themeKey:"palette",transform:ye},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:ye},backgroundColor:{themeKey:"palette",transform:ye},p:{style:K},pt:{style:K},pr:{style:K},pb:{style:K},pl:{style:K},px:{style:K},py:{style:K},padding:{style:K},paddingTop:{style:K},paddingRight:{style:K},paddingBottom:{style:K},paddingLeft:{style:K},paddingX:{style:K},paddingY:{style:K},paddingInline:{style:K},paddingInlineStart:{style:K},paddingInlineEnd:{style:K},paddingBlock:{style:K},paddingBlockStart:{style:K},paddingBlockEnd:{style:K},m:{style:q},mt:{style:q},mr:{style:q},mb:{style:q},ml:{style:q},mx:{style:q},my:{style:q},margin:{style:q},marginTop:{style:q},marginRight:{style:q},marginBottom:{style:q},marginLeft:{style:q},marginX:{style:q},marginY:{style:q},marginInline:{style:q},marginInlineStart:{style:q},marginInlineEnd:{style:q},marginBlock:{style:q},marginBlockStart:{style:q},marginBlockEnd:{style:q},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:pe},rowGap:{style:me},columnGap:{style:he},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:ve},maxWidth:{style:be},minWidth:{transform:ve},height:{transform:ve},maxHeight:{transform:ve},minHeight:{transform:ve},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),ke=function(){function e(e,t,n,r){const o={[e]:t,theme:n},a=r[e];if(!a)return{[e]:t};const{cssProperty:i=e,themeKey:l,transform:c,style:u}=a;if(null==t)return null;if("typography"===l&&"inherit"===t)return{[e]:t};const s=P(n,l)||{};return u?u(o):_(o,t,(t=>{let n=I(s,c,t);return t===n&&"string"==typeof t&&(n=I(s,c,`${e}${"default"===t?"":T(t)}`,t)),!1===i?n:{[i]:n}}))}return function t(n){var r;const{sx:o,theme:a={}}=n||{};if(!o)return null;const i=null!=(r=a.unstable_sxConfig)?r:Se;function l(n){let r=n;if("function"==typeof n)r=n(a);else if("object"!=typeof n)return n;if(!r)return null;const o=function(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}(a.breakpoints),l=Object.keys(o);let c=o;return Object.keys(r).forEach((n=>{const o="function"==typeof(l=r[n])?l(a):l;var l;if(null!=o)if("object"==typeof o)if(i[n])c=z(c,e(n,o,a,i));else{const e=_({theme:a},o,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,o)?c=z(c,e):c[n]=t({sx:o,theme:a})}else c=z(c,e(n,o,a,i))})),u=c,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),u);var u}return Array.isArray(o)?o.map(l):l(o)}}();ke.filterProps=["sx"];const Ce=ke,Le=["breakpoints","palette","spacing","shape"],Oe=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:o,shape:a={}}=e,i=E(e,Le),l=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5}=e,o=E(e,L),a=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>x({},e,{[t.key]:t.val})),{})})(t),i=Object.keys(a);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function c(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function u(e,o){const a=i.indexOf(o);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==a&&"number"==typeof t[i[a]]?t[i[a]]:o)-r/100}${n})`}return x({keys:i,values:a,up:l,down:c,between:u,only:function(e){return i.indexOf(e)+1<i.length?u(e,i[i.indexOf(e)+1]):l(e)},not:function(e){const t=i.indexOf(e);return 0===t?l(i[1]):t===i.length-1?c(i[t]):u(e,i[i.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},o)}(n),c=function(e=8){if(e.mui)return e;const t=W({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(o);let u=C({breakpoints:l,direction:"ltr",components:{},palette:x({mode:"light"},r),spacing:c,shape:x({},O,a)},i);return u=t.reduce(((e,t)=>C(e,t)),u),u.unstable_sxConfig=x({},Se,null==i?void 0:i.unstable_sxConfig),u.unstable_sx=function(e){return Ce({sx:e,theme:this})},u};function je(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function Ne(e){if(e.type)return e;if("#"===e.charAt(0))return Ne(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(A(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error(A(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}function _e(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function Te(e){let t="hsl"===(e=Ne(e)).type||"hsla"===e.type?Ne(function(e){e=Ne(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const c=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",c.push(t[3])),_e({type:l,values:c})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Pe(e,t){return e=Ne(e),t=je(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,_e(e)}const Ie={black:"#000",white:"#fff"},Be={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},ze={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},Me={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},Re={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},Fe={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},$e={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},De={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},Ge=["mode","contrastThreshold","tonalOffset"],Ue={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Ie.white,default:Ie.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},He={text:{primary:Ie.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Ie.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function We(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=Ne(e),t=je(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return _e(e)}(e.main,o):"dark"===t&&(e.dark=function(e,t){if(e=Ne(e),t=je(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return _e(e)}(e.main,a)))}const Ye=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],Ve={textTransform:"uppercase"},qe='"Roboto", "Helvetica", "Arial", sans-serif';function Ke(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=qe,fontSize:o=14,fontWeightLight:a=300,fontWeightRegular:i=400,fontWeightMedium:l=500,fontWeightBold:c=700,htmlFontSize:u=16,allVariants:s,pxToRem:f}=n,d=E(n,Ye),p=o/14,h=f||(e=>e/u*p+"rem"),m=(e,t,n,o,a)=>{return x({fontFamily:r,fontWeight:e,fontSize:h(t),lineHeight:n},r===qe?{letterSpacing:(i=o/t,Math.round(1e5*i)/1e5+"em")}:{},a,s);var i},y={h1:m(a,96,1.167,-1.5),h2:m(a,60,1.2,-.5),h3:m(i,48,1.167,0),h4:m(i,34,1.235,.25),h5:m(i,24,1.334,0),h6:m(l,20,1.6,.15),subtitle1:m(i,16,1.75,.15),subtitle2:m(l,14,1.57,.1),body1:m(i,16,1.5,.15),body2:m(i,14,1.43,.15),button:m(l,14,1.75,.4,Ve),caption:m(i,12,1.66,.4),overline:m(i,12,2.66,1,Ve),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return C(x({htmlFontSize:u,pxToRem:h,fontFamily:r,fontSize:o,fontWeightLight:a,fontWeightRegular:i,fontWeightMedium:l,fontWeightBold:c},y),d,{clone:!1})}function Xe(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Qe=["none",Xe(0,2,1,-1,0,1,1,0,0,1,3,0),Xe(0,3,1,-2,0,2,2,0,0,1,5,0),Xe(0,3,3,-2,0,3,4,0,0,1,8,0),Xe(0,2,4,-1,0,4,5,0,0,1,10,0),Xe(0,3,5,-1,0,5,8,0,0,1,14,0),Xe(0,3,5,-1,0,6,10,0,0,1,18,0),Xe(0,4,5,-2,0,7,10,1,0,2,16,1),Xe(0,5,5,-3,0,8,10,1,0,3,14,2),Xe(0,5,6,-3,0,9,12,1,0,3,16,2),Xe(0,6,6,-3,0,10,14,1,0,4,18,3),Xe(0,6,7,-4,0,11,15,1,0,4,20,3),Xe(0,7,8,-4,0,12,17,2,0,5,22,4),Xe(0,7,8,-4,0,13,19,2,0,5,24,4),Xe(0,7,9,-4,0,14,21,2,0,5,26,4),Xe(0,8,9,-5,0,15,22,2,0,6,28,5),Xe(0,8,10,-5,0,16,24,2,0,6,30,5),Xe(0,8,11,-5,0,17,26,2,0,6,32,5),Xe(0,9,11,-5,0,18,28,2,0,7,34,6),Xe(0,9,12,-6,0,19,29,2,0,7,36,6),Xe(0,10,13,-6,0,20,31,3,0,8,38,7),Xe(0,10,13,-6,0,21,33,3,0,8,40,7),Xe(0,10,14,-6,0,22,35,3,0,8,42,7),Xe(0,11,14,-7,0,23,36,3,0,9,44,8),Xe(0,11,15,-7,0,24,38,3,0,9,46,8)],Ze=["duration","easing","delay"],Je={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},et={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function tt(e){return`${Math.round(e)}ms`}function nt(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function rt(e){const t=x({},Je,e.easing),n=x({},et,e.duration);return x({getAutoHeightDuration:nt,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:i=0}=r;return E(r,Ze),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:tt(o)} ${a} ${"string"==typeof i?i:tt(i)}`)).join(",")}},e,{easing:t,duration:n})}const ot={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},at=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const it=function(e={},...t){const{mixins:n={},palette:r={},transitions:o={},typography:a={}}=e,i=E(e,at);if(e.vars)throw new Error(A(18));const l=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,o=E(e,Ge),a=e.primary||function(e="light"){return"dark"===e?{main:Fe[200],light:Fe[50],dark:Fe[400]}:{main:Fe[700],light:Fe[400],dark:Fe[800]}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:ze[200],light:ze[50],dark:ze[400]}:{main:ze[500],light:ze[300],dark:ze[700]}}(t),l=e.error||function(e="light"){return"dark"===e?{main:Me[500],light:Me[300],dark:Me[700]}:{main:Me[700],light:Me[400],dark:Me[800]}}(t),c=e.info||function(e="light"){return"dark"===e?{main:$e[400],light:$e[300],dark:$e[700]}:{main:$e[700],light:$e[500],dark:$e[900]}}(t),u=e.success||function(e="light"){return"dark"===e?{main:De[400],light:De[300],dark:De[700]}:{main:De[800],light:De[500],dark:De[900]}}(t),s=e.warning||function(e="light"){return"dark"===e?{main:Re[400],light:Re[300],dark:Re[700]}:{main:"#ed6c02",light:Re[500],dark:Re[900]}}(t);function f(e){const t=function(e,t){const n=Te(e),r=Te(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,He.text.primary)>=n?He.text.primary:Ue.text.primary;return t}const d=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:a=700})=>{if(!(e=x({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(A(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(A(12,t?` (${t})`:"",JSON.stringify(e.main)));return We(e,"light",o,r),We(e,"dark",a,r),e.contrastText||(e.contrastText=f(e.main)),e},p={dark:He,light:Ue};return C(x({common:x({},Ie),mode:t,primary:d({color:a,name:"primary"}),secondary:d({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:d({color:l,name:"error"}),warning:d({color:s,name:"warning"}),info:d({color:c,name:"info"}),success:d({color:u,name:"success"}),grey:Be,contrastThreshold:n,getContrastText:f,augmentColor:d,tonalOffset:r},p[t]),o)}(r),c=Oe(e);let u=C(c,{mixins:(s=c.breakpoints,f=n,x({toolbar:{minHeight:56,[s.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[s.up("sm")]:{minHeight:64}}},f)),palette:l,shadows:Qe.slice(),typography:Ke(l,a),transitions:rt(o),zIndex:x({},ot)});var s,f;return u=C(u,i),u=t.reduce(((e,t)=>C(e,t)),u),u.unstable_sxConfig=x({},Se,null==i?void 0:i.unstable_sxConfig),u.unstable_sx=function(e){return Ce({sx:e,theme:this})},u},lt=t.createContext(null);function ct(){return t.useContext(lt)}const ut="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var st=o(893);const ft=function(e){const{children:n,theme:r}=e,o=ct(),a=t.useMemo((()=>{const e=null===o?r:function(e,t){return"function"==typeof t?t(e):x({},e,t)}(o,r);return null!=e&&(e[ut]=null!==o),e}),[r,o]);return(0,st.jsx)(lt.Provider,{value:a,children:n})};var dt=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),pt=Math.abs,ht=String.fromCharCode,mt=Object.assign;function yt(e){return e.trim()}function vt(e,t,n){return e.replace(t,n)}function gt(e,t){return e.indexOf(t)}function bt(e,t){return 0|e.charCodeAt(t)}function wt(e,t,n){return e.slice(t,n)}function xt(e){return e.length}function Et(e){return e.length}function At(e,t){return t.push(e),e}var St=1,kt=1,Ct=0,Lt=0,Ot=0,jt="";function Nt(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:St,column:kt,length:i,return:""}}function _t(e,t){return mt(Nt("",null,null,"",null,null,0),e,{length:-e.length},t)}function Tt(){return Ot=Lt>0?bt(jt,--Lt):0,kt--,10===Ot&&(kt=1,St--),Ot}function Pt(){return Ot=Lt<Ct?bt(jt,Lt++):0,kt++,10===Ot&&(kt=1,St++),Ot}function It(){return bt(jt,Lt)}function Bt(){return Lt}function zt(e,t){return wt(jt,e,t)}function Mt(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function Rt(e){return St=kt=1,Ct=xt(jt=e),Lt=0,[]}function Ft(e){return jt="",e}function $t(e){return yt(zt(Lt-1,Ut(91===e?e+2:40===e?e+1:e)))}function Dt(e){for(;(Ot=It())&&Ot<33;)Pt();return Mt(e)>2||Mt(Ot)>3?"":" "}function Gt(e,t){for(;--t&&Pt()&&!(Ot<48||Ot>102||Ot>57&&Ot<65||Ot>70&&Ot<97););return zt(e,Bt()+(t<6&&32==It()&&32==Pt()))}function Ut(e){for(;Pt();)switch(Ot){case e:return Lt;case 34:case 39:34!==e&&39!==e&&Ut(Ot);break;case 40:41===e&&Ut(e);break;case 92:Pt()}return Lt}function Ht(e,t){for(;Pt()&&e+Ot!==57&&(e+Ot!==84||47!==It()););return"/*"+zt(t,Lt-1)+"*"+ht(47===e?e:Pt())}function Wt(e){for(;!Mt(It());)Pt();return zt(e,Lt)}var Yt="-ms-",Vt="-moz-",qt="-webkit-",Kt="comm",Xt="rule",Qt="decl",Zt="@import",Jt="@keyframes",en="@layer";function tn(e,t){for(var n="",r=Et(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function nn(e,t,n,r){switch(e.type){case en:if(e.children.length)break;case Zt:case Qt:return e.return=e.return||e.value;case Kt:return"";case Jt:return e.return=e.value+"{"+tn(e.children,r)+"}";case Xt:e.value=e.props.join(",")}return xt(n=tn(e.children,r))?e.return=e.value+"{"+n+"}":""}function rn(e){return Ft(on("",null,null,null,[""],e=Rt(e),0,[0],e))}function on(e,t,n,r,o,a,i,l,c){for(var u=0,s=0,f=i,d=0,p=0,h=0,m=1,y=1,v=1,g=0,b="",w=o,x=a,E=r,A=b;y;)switch(h=g,g=Pt()){case 40:if(108!=h&&58==bt(A,f-1)){-1!=gt(A+=vt($t(g),"&","&\f"),"&\f")&&(v=-1);break}case 34:case 39:case 91:A+=$t(g);break;case 9:case 10:case 13:case 32:A+=Dt(h);break;case 92:A+=Gt(Bt()-1,7);continue;case 47:switch(It()){case 42:case 47:At(ln(Ht(Pt(),Bt()),t,n),c);break;default:A+="/"}break;case 123*m:l[u++]=xt(A)*v;case 125*m:case 59:case 0:switch(g){case 0:case 125:y=0;case 59+s:-1==v&&(A=vt(A,/\f/g,"")),p>0&&xt(A)-f&&At(p>32?cn(A+";",r,n,f-1):cn(vt(A," ","")+";",r,n,f-2),c);break;case 59:A+=";";default:if(At(E=an(A,t,n,u,s,o,l,b,w=[],x=[],f),a),123===g)if(0===s)on(A,t,E,E,w,a,f,l,x);else switch(99===d&&110===bt(A,3)?100:d){case 100:case 108:case 109:case 115:on(e,E,E,r&&At(an(e,E,E,0,0,o,l,b,o,w=[],f),x),o,x,f,l,r?w:x);break;default:on(A,E,E,E,[""],x,0,l,x)}}u=s=p=0,m=v=1,b=A="",f=i;break;case 58:f=1+xt(A),p=h;default:if(m<1)if(123==g)--m;else if(125==g&&0==m++&&125==Tt())continue;switch(A+=ht(g),g*m){case 38:v=s>0?1:(A+="\f",-1);break;case 44:l[u++]=(xt(A)-1)*v,v=1;break;case 64:45===It()&&(A+=$t(Pt())),d=It(),s=f=xt(b=A+=Wt(Bt())),g++;break;case 45:45===h&&2==xt(A)&&(m=0)}}return a}function an(e,t,n,r,o,a,i,l,c,u,s){for(var f=o-1,d=0===o?a:[""],p=Et(d),h=0,m=0,y=0;h<r;++h)for(var v=0,g=wt(e,f+1,f=pt(m=i[h])),b=e;v<p;++v)(b=yt(m>0?d[v]+" "+g:vt(g,/&\f/g,d[v])))&&(c[y++]=b);return Nt(e,t,n,0===o?Xt:l,c,u,s)}function ln(e,t,n){return Nt(e,t,n,Kt,ht(Ot),wt(e,2,-2),0)}function cn(e,t,n,r){return Nt(e,t,n,Qt,wt(e,0,r),wt(e,r+1,-1),r)}var un=function(e,t,n){for(var r=0,o=0;r=o,o=It(),38===r&&12===o&&(t[n]=1),!Mt(o);)Pt();return zt(e,Lt)},sn=new WeakMap,fn=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||sn.get(n))&&!r){sn.set(e,!0);for(var o=[],a=function(e,t){return Ft(function(e,t){var n=-1,r=44;do{switch(Mt(r)){case 0:38===r&&12===It()&&(t[n]=1),e[n]+=un(Lt-1,t,n);break;case 2:e[n]+=$t(r);break;case 4:if(44===r){e[++n]=58===It()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=ht(r)}}while(r=Pt());return e}(Rt(e),t))}(t,o),i=n.props,l=0,c=0;l<a.length;l++)for(var u=0;u<i.length;u++,c++)e.props[c]=o[l]?a[l].replace(/&\f/g,i[u]):i[u]+" "+a[l]}}},dn=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function pn(e,t){switch(function(e,t){return 45^bt(e,0)?(((t<<2^bt(e,0))<<2^bt(e,1))<<2^bt(e,2))<<2^bt(e,3):0}(e,t)){case 5103:return qt+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return qt+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return qt+e+Vt+e+Yt+e+e;case 6828:case 4268:return qt+e+Yt+e+e;case 6165:return qt+e+Yt+"flex-"+e+e;case 5187:return qt+e+vt(e,/(\w+).+(:[^]+)/,qt+"box-$1$2"+Yt+"flex-$1$2")+e;case 5443:return qt+e+Yt+"flex-item-"+vt(e,/flex-|-self/,"")+e;case 4675:return qt+e+Yt+"flex-line-pack"+vt(e,/align-content|flex-|-self/,"")+e;case 5548:return qt+e+Yt+vt(e,"shrink","negative")+e;case 5292:return qt+e+Yt+vt(e,"basis","preferred-size")+e;case 6060:return qt+"box-"+vt(e,"-grow","")+qt+e+Yt+vt(e,"grow","positive")+e;case 4554:return qt+vt(e,/([^-])(transform)/g,"$1"+qt+"$2")+e;case 6187:return vt(vt(vt(e,/(zoom-|grab)/,qt+"$1"),/(image-set)/,qt+"$1"),e,"")+e;case 5495:case 3959:return vt(e,/(image-set\([^]*)/,qt+"$1$`$1");case 4968:return vt(vt(e,/(.+:)(flex-)?(.*)/,qt+"box-pack:$3"+Yt+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+qt+e+e;case 4095:case 3583:case 4068:case 2532:return vt(e,/(.+)-inline(.+)/,qt+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(xt(e)-1-t>6)switch(bt(e,t+1)){case 109:if(45!==bt(e,t+4))break;case 102:return vt(e,/(.+:)(.+)-([^]+)/,"$1"+qt+"$2-$3$1"+Vt+(108==bt(e,t+3)?"$3":"$2-$3"))+e;case 115:return~gt(e,"stretch")?pn(vt(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==bt(e,t+1))break;case 6444:switch(bt(e,xt(e)-3-(~gt(e,"!important")&&10))){case 107:return vt(e,":",":"+qt)+e;case 101:return vt(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+qt+(45===bt(e,14)?"inline-":"")+"box$3$1"+qt+"$2$3$1"+Yt+"$2box$3")+e}break;case 5936:switch(bt(e,t+11)){case 114:return qt+e+Yt+vt(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return qt+e+Yt+vt(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return qt+e+Yt+vt(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return qt+e+Yt+e+e}return e}var hn=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case Qt:e.return=pn(e.value,e.length);break;case Jt:return tn([_t(e,{value:vt(e.value,"@","@"+qt)})],r);case Xt:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return tn([_t(e,{props:[vt(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return tn([_t(e,{props:[vt(t,/:(plac\w+)/,":"+qt+"input-$1")]}),_t(e,{props:[vt(t,/:(plac\w+)/,":-moz-$1")]}),_t(e,{props:[vt(t,/:(plac\w+)/,Yt+"input-$1")]})],r)}return""}))}}],mn=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,o,a=e.stylisPlugins||hn,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var c,u,s,f,d=[nn,(f=function(e){c.insert(e)},function(e){e.root||(e=e.return)&&f(e)})],p=(u=[fn,dn].concat(a,d),s=Et(u),function(e,t,n,r){for(var o="",a=0;a<s;a++)o+=u[a](e,t,n,r)||"";return o});o=function(e,t,n,r){c=n,function(e){tn(rn(e),p)}(e?e+"{"+t.styles+"}":t.styles),r&&(h.inserted[t.name]=!0)};var h={key:t,sheet:new dt({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:o};return h.sheet.hydrate(l),h},yn={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function vn(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var gn=/[A-Z]|^ms/g,bn=/_EMO_([^_]+?)_([^]*?)_EMO_/g,wn=function(e){return 45===e.charCodeAt(1)},xn=function(e){return null!=e&&"boolean"!=typeof e},En=vn((function(e){return wn(e)?e:e.replace(gn,"-$&").toLowerCase()})),An=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(bn,(function(e,t,n){return kn={name:t,styles:n,next:kn},t}))}return 1===yn[e]||wn(e)||"number"!=typeof t||0===t?t:t+"px"};function Sn(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return kn={name:n.name,styles:n.styles,next:kn},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)kn={name:r.name,styles:r.styles,next:kn},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=Sn(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":xn(i)&&(r+=En(a)+":"+An(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=Sn(e,t,i);switch(a){case"animation":case"animationName":r+=En(a)+":"+l+";";break;default:r+=a+"{"+l+"}"}}else for(var c=0;c<i.length;c++)xn(i[c])&&(r+=En(a)+":"+An(a,i[c])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=kn,a=n(e);return kn=o,Sn(e,t,a)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var kn,Cn=/label:\s*([^\s;\n{]+)\s*(;|$)/g,Ln=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";kn=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=Sn(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=Sn(n,t,e[i]),r&&(o+=a[i]);Cn.lastIndex=0;for(var l,c="";null!==(l=Cn.exec(o));)c+="-"+l[1];var u=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+c;return{name:u,styles:o,next:kn}},On=!!n.useInsertionEffect&&n.useInsertionEffect,jn=On||function(e){return e()},Nn=On||t.useLayoutEffect,_n=t.createContext("undefined"!=typeof HTMLElement?mn({key:"css"}):null);_n.Provider;var Tn=function(e){return(0,t.forwardRef)((function(n,r){var o=(0,t.useContext)(_n);return e(n,o,r)}))},Pn=t.createContext({});const In=function(e=null){const n=t.useContext(Pn);return n&&(r=n,0!==Object.keys(r).length)?n:e;var r},Bn={};function zn(e,n,r,o=!1){return t.useMemo((()=>{const t=e&&n[e]||n;if("function"==typeof r){const a=r(t),i=e?x({},n,{[e]:a}):a;return o?()=>i:i}return x({},n,e?{[e]:r}:r)}),[e,n,r,o])}const Mn=function(e){const{children:t,theme:n,themeId:r}=e,o=In(Bn),a=ct()||Bn,i=zn(r,o,n),l=zn(r,a,n,!0);return(0,st.jsx)(ft,{theme:l,children:(0,st.jsx)(Pn.Provider,{value:i,children:t})})},Rn="$$material",Fn=["theme"];function $n(e){let{theme:t}=e,n=E(e,Fn);const r=t[Rn];return(0,st.jsx)(Mn,x({},n,{themeId:r?Rn:void 0,theme:r||t}))}function Dn(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=Dn(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}const Gn=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=Dn(e))&&(r&&(r+=" "),r+=t);return r};function Un(e,t){const n=x({},t);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))n[r]=x({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const o=e[r]||{},a=t[r];n[r]={},a&&Object.keys(a)?o&&Object.keys(o)?(n[r]=x({},a),Object.keys(o).forEach((e=>{n[r][e]=Un(o[e],a[e])}))):n[r]=a:n[r]=o}else void 0===n[r]&&(n[r]=e[r])})),n}function Hn(e,t,n=void 0){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>{if(r){const o=t(r);""!==o&&e.push(o),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}var Wn=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,Yn=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},Vn=function(e,t,n){Yn(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}},qn=vn((function(e){return Wn.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),Kn=function(e){return"theme"!==e},Xn=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?qn:Kn},Qn=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},Zn=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return Yn(t,n,r),jn((function(){return Vn(t,n,r)})),null},Jn=function e(n,r){var o,a,i=n.__emotion_real===n,l=i&&n.__emotion_base||n;void 0!==r&&(o=r.label,a=r.target);var c=Qn(n,r,i),u=c||Xn(l),s=!u("as");return function(){var f=arguments,d=i&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==o&&d.push("label:"+o+";"),null==f[0]||void 0===f[0].raw)d.push.apply(d,f);else{d.push(f[0][0]);for(var p=f.length,h=1;h<p;h++)d.push(f[h],f[0][h])}var m=Tn((function(e,n,r){var o,i,f,p,h=s&&e.as||l,m="",y=[],v=e;if(null==e.theme){for(var g in v={},e)v[g]=e[g];v.theme=t.useContext(Pn)}"string"==typeof e.className?(o=n.registered,i=y,f=e.className,p="",f.split(" ").forEach((function(e){void 0!==o[e]?i.push(o[e]+";"):p+=e+" "})),m=p):null!=e.className&&(m=e.className+" ");var b=Ln(d.concat(y),n.registered,v);m+=n.key+"-"+b.name,void 0!==a&&(m+=" "+a);var w=s&&void 0===c?Xn(h):u,x={};for(var E in e)s&&"as"===E||w(E)&&(x[E]=e[E]);return x.className=m,x.ref=r,t.createElement(t.Fragment,null,t.createElement(Zn,{cache:n,serialized:b,isStringTag:"string"==typeof h}),t.createElement(h,x))}));return m.displayName=void 0!==o?o:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",m.defaultProps=n.defaultProps,m.__emotion_real=m,m.__emotion_base=l,m.__emotion_styles=d,m.__emotion_forwardProp=c,Object.defineProperty(m,"toString",{value:function(){return"."+a}}),m.withComponent=function(t,n){return e(t,x({},r,n,{shouldForwardProp:Qn(m,n,!0)})).apply(void 0,d)},m}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){Jn[e]=Jn(e)}));const er=["variant"];function tr(e){return 0===e.length}function nr(e){const{variant:t}=e,n=E(e,er);let r=t||"";return Object.keys(n).sort().forEach((t=>{r+="color"===t?tr(r)?e[t]:T(e[t]):`${tr(r)?t:T(t)}${T(e[t].toString())}`})),r}const rr=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],or=e=>{const t={};return e&&e.forEach((e=>{const n=nr(e.props);t[n]=e.style})),t},ar=(e,t,n)=>{const{ownerState:r={}}=e,o=[];return n&&n.forEach((n=>{let a=!0;Object.keys(n.props).forEach((t=>{r[t]!==n.props[t]&&e[t]!==n.props[t]&&(a=!1)})),a&&o.push(t[nr(n.props)])})),o};function ir(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const lr=Oe(),cr=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function ur({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function sr(e){return e?(t,n)=>n[e]:null}const fr=({styledArg:e,props:t,defaultTheme:n,themeId:r})=>{const o=e(x({},t,{theme:ur(x({},t,{defaultTheme:n,themeId:r}))}));let a;return o&&o.variants&&(a=o.variants,delete o.variants),a?[o,...ar(t,or(a),a)]:o},dr=it(),pr=e=>ir(e)&&"classes"!==e,hr=function(e={}){const{themeId:t,defaultTheme:n=lr,rootShouldForwardProp:r=ir,slotShouldForwardProp:o=ir}=e,a=e=>Ce(x({},e,{theme:ur(x({},e,{defaultTheme:n,themeId:t}))}));return a.__mui_systemSx=!0,(e,i={})=>{((e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx))))(e.__emotion_styles))})(e);const{name:l,slot:c,skipVariantsResolver:u,skipSx:s,overridesResolver:f=sr(cr(c))}=i,d=E(i,rr),p=void 0!==u?u:c&&"Root"!==c&&"root"!==c||!1,h=s||!1;let m=ir;"Root"===c||"root"===c?m=r:c?m=o:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(m=void 0);const y=function(e,t){return Jn(e,t)}(e,x({shouldForwardProp:m,label:void 0},d)),v=(r,...o)=>{const i=o?o.map((e=>{if("function"==typeof e&&e.__emotion_real!==e)return r=>fr({styledArg:e,props:r,defaultTheme:n,themeId:t});if(S(e)){let t,n=e;return e&&e.variants&&(t=e.variants,delete n.variants,n=n=>{let r=e;return ar(n,or(t),t).forEach((e=>{r=C(r,e)})),r}),n}return e})):[];let c=r;if(S(r)){let e;r&&r.variants&&(e=r.variants,delete c.variants,c=t=>{let n=r;return ar(t,or(e),e).forEach((e=>{n=C(n,e)})),n})}else"function"==typeof r&&r.__emotion_real!==r&&(c=e=>fr({styledArg:r,props:e,defaultTheme:n,themeId:t}));l&&f&&i.push((e=>{const r=ur(x({},e,{defaultTheme:n,themeId:t})),o=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(l,r);if(o){const t={};return Object.entries(o).forEach((([n,o])=>{t[n]="function"==typeof o?o(x({},e,{theme:r})):o})),f(e,t)}return null})),l&&!p&&i.push((e=>{const r=ur(x({},e,{defaultTheme:n,themeId:t}));return((e,t,n,r)=>{var o;const a=null==n||null==(o=n.components)||null==(o=o[r])?void 0:o.variants;return ar(e,t,a)})(e,((e,t)=>{let n=[];return t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants),or(n)})(l,r),r,l)})),h||i.push(a);const u=i.length-o.length;if(Array.isArray(r)&&u>0){const e=new Array(u).fill("");c=[...r,...e],c.raw=[...r.raw,...e]}const s=y(c,...i);return e.muiName&&(s.muiName=e.muiName),s};return y.withConfig&&(v.withConfig=y.withConfig),v}}({themeId:Rn,defaultTheme:dr,rootShouldForwardProp:pr}),mr=hr,yr=Oe(),vr=function(e=yr){return In(e)};function gr({props:e,name:t}){return function({props:e,name:t,defaultTheme:n,themeId:r}){let o=vr(n);r&&(o=o[r]||o);const a=function(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?Un(t.components[n].defaultProps,r):r}({theme:o,name:t,props:e});return a}({props:e,name:t,defaultTheme:dr,themeId:Rn})}function br(...e){return t.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{!function(e,t){"function"==typeof e?e(t):e&&(e.current=t)}(e,t)}))}),e)}const wr=br,xr="undefined"!=typeof window?t.useLayoutEffect:t.useEffect,Er=function(e){const n=t.useRef(e);return xr((()=>{n.current=e})),t.useRef(((...e)=>(0,n.current)(...e))).current};let Ar,Sr=!0,kr=!1;const Cr={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Lr(e){e.metaKey||e.altKey||e.ctrlKey||(Sr=!0)}function Or(){Sr=!1}function jr(){"hidden"===this.visibilityState&&kr&&(Sr=!0)}const Nr=function(){const e=t.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",Lr,!0),t.addEventListener("mousedown",Or,!0),t.addEventListener("pointerdown",Or,!0),t.addEventListener("touchstart",Or,!0),t.addEventListener("visibilitychange",jr,!0))}),[]),n=t.useRef(!1);return{isFocusVisibleRef:n,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return Sr||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!Cr[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(n.current=!0,!0)},onBlur:function(){return!!n.current&&(kr=!0,window.clearTimeout(Ar),Ar=window.setTimeout((()=>{kr=!1}),100),n.current=!1,!0)},ref:e}};function _r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Tr(e,t){return Tr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Tr(e,t)}const Pr=t.createContext(null);function Ir(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function Br(e,t,n){return null!=n[t]?n[t]:e.props[t]}function zr(e,n,r){var o=Ir(e.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var c in t){if(o[c])for(r=0;r<o[c].length;r++){var u=o[c][r];l[o[c][r]]=n(u)}l[c]=n(c)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(n,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,t.isValidElement)(l)){var c=i in n,u=i in o,s=n[i],f=(0,t.isValidElement)(s)&&!s.props.in;!u||c&&!f?u||!c||f?u&&c&&(0,t.isValidElement)(s)&&(a[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:s.props.in,exit:Br(l,"exit",e),enter:Br(l,"enter",e)})):a[i]=(0,t.cloneElement)(l,{in:!1}):a[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:Br(l,"exit",e),enter:Br(l,"enter",e)})}})),a}var Mr=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Rr=function(e){var n,r;function o(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(_r(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}r=e,(n=o).prototype=Object.create(r.prototype),n.prototype.constructor=n,Tr(n,r);var a=o.prototype;return a.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},a.componentWillUnmount=function(){this.mounted=!1},o.getDerivedStateFromProps=function(e,n){var r,o,a=n.children,i=n.handleExited;return{children:n.firstRender?(r=e,o=i,Ir(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:Br(e,"appear",r),enter:Br(e,"enter",r),exit:Br(e,"exit",r)})}))):zr(e,a,i),firstRender:!1}},a.handleExited=function(e,t){var n=Ir(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=x({},t.children);return delete n[e.key],{children:n}})))},a.render=function(){var e=this.props,n=e.component,r=e.childFactory,o=E(e,["component","childFactory"]),a=this.state.contextValue,i=Mr(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?t.createElement(Pr.Provider,{value:a},i):t.createElement(Pr.Provider,{value:a},t.createElement(n,o,i))},o}(t.Component);Rr.propTypes={},Rr.defaultProps={component:"div",childFactory:function(e){return e}};const Fr=Rr;o(679);var $r=Tn((function(e,n){var r=e.styles,o=Ln([r],void 0,t.useContext(Pn)),a=t.useRef();return Nn((function(){var e=n.key+"-global",t=new n.sheet.constructor({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),r=!1,i=document.querySelector('style[data-emotion="'+e+" "+o.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==i&&(r=!0,i.setAttribute("data-emotion",e),t.hydrate([i])),a.current=[t,r],function(){t.flush()}}),[n]),Nn((function(){var e=a.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==o.next&&Vn(n,o.next,!0),t.tags.length){var r=t.tags[t.tags.length-1].nextElementSibling;t.before=r,t.flush()}n.insert("",o,t,!1)}}),[n,o.name]),null}));function Dr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Ln(t)}var Gr=function(){var e=Dr.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};const Ur=e=>e,Hr=(()=>{let e=Ur;return{configure(t){e=t},generate:t=>e(t),reset(){e=Ur}}})(),Wr=Hr,Yr={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function Vr(e,t,n="Mui"){const r=Yr[t];return r?`${n}-${r}`:`${Wr.generate(e)}-${t}`}function qr(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=Vr(e,t,n)})),r}const Kr=qr("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Xr=["center","classes","className"];let Qr,Zr,Jr,eo,to=e=>e;const no=Gr(Qr||(Qr=to`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),ro=Gr(Zr||(Zr=to`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),oo=Gr(Jr||(Jr=to`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),ao=mr("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),io=mr((function(e){const{className:n,classes:r,pulsate:o=!1,rippleX:a,rippleY:i,rippleSize:l,in:c,onExited:u,timeout:s}=e,[f,d]=t.useState(!1),p=Gn(n,r.ripple,r.rippleVisible,o&&r.ripplePulsate),h={width:l,height:l,top:-l/2+i,left:-l/2+a},m=Gn(r.child,f&&r.childLeaving,o&&r.childPulsate);return c||f||d(!0),t.useEffect((()=>{if(!c&&null!=u){const e=setTimeout(u,s);return()=>{clearTimeout(e)}}}),[u,c,s]),(0,st.jsx)("span",{className:p,style:h,children:(0,st.jsx)("span",{className:m})})}),{name:"MuiTouchRipple",slot:"Ripple"})(eo||(eo=to`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Kr.rippleVisible,no,550,(({theme:e})=>e.transitions.easing.easeInOut),Kr.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),Kr.child,Kr.childLeaving,ro,550,(({theme:e})=>e.transitions.easing.easeInOut),Kr.childPulsate,oo,(({theme:e})=>e.transitions.easing.easeInOut)),lo=t.forwardRef((function(e,n){const r=gr({props:e,name:"MuiTouchRipple"}),{center:o=!1,classes:a={},className:i}=r,l=E(r,Xr),[c,u]=t.useState([]),s=t.useRef(0),f=t.useRef(null);t.useEffect((()=>{f.current&&(f.current(),f.current=null)}),[c]);const d=t.useRef(!1),p=t.useRef(0),h=t.useRef(null),m=t.useRef(null);t.useEffect((()=>()=>{p.current&&clearTimeout(p.current)}),[]);const y=t.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:i}=e;u((e=>[...e,(0,st.jsx)(io,{classes:{ripple:Gn(a.ripple,Kr.ripple),rippleVisible:Gn(a.rippleVisible,Kr.rippleVisible),ripplePulsate:Gn(a.ripplePulsate,Kr.ripplePulsate),child:Gn(a.child,Kr.child),childLeaving:Gn(a.childLeaving,Kr.childLeaving),childPulsate:Gn(a.childPulsate,Kr.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},s.current)])),s.current+=1,f.current=i}),[a]),v=t.useCallback(((e={},t={},n=(()=>{}))=>{const{pulsate:r=!1,center:a=o||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&d.current)return void(d.current=!1);"touchstart"===(null==e?void 0:e.type)&&(d.current=!0);const l=i?null:m.current,c=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,s,f;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(c.width/2),s=Math.round(c.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-c.left),s=Math.round(n-c.top)}if(a)f=Math.sqrt((2*c.width**2+c.height**2)/3),f%2==0&&(f+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-s),s)+2;f=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===h.current&&(h.current=()=>{y({pulsate:r,rippleX:u,rippleY:s,rippleSize:f,cb:n})},p.current=setTimeout((()=>{h.current&&(h.current(),h.current=null)}),80)):y({pulsate:r,rippleX:u,rippleY:s,rippleSize:f,cb:n})}),[o,y]),g=t.useCallback((()=>{v({},{pulsate:!0})}),[v]),b=t.useCallback(((e,t)=>{if(clearTimeout(p.current),"touchend"===(null==e?void 0:e.type)&&h.current)return h.current(),h.current=null,void(p.current=setTimeout((()=>{b(e,t)})));h.current=null,u((e=>e.length>0?e.slice(1):e)),f.current=t}),[]);return t.useImperativeHandle(n,(()=>({pulsate:g,start:v,stop:b})),[g,v,b]),(0,st.jsx)(ao,x({className:Gn(Kr.root,a.root,i),ref:m},l,{children:(0,st.jsx)(Fr,{component:null,exit:!0,children:c})}))})),co=lo;function uo(e){return Vr("MuiButtonBase",e)}const so=qr("MuiButtonBase",["root","disabled","focusVisible"]),fo=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],po=mr("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${so.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),ho=t.forwardRef((function(e,n){const r=gr({props:e,name:"MuiButtonBase"}),{action:o,centerRipple:a=!1,children:i,className:l,component:c="button",disabled:u=!1,disableRipple:s=!1,disableTouchRipple:f=!1,focusRipple:d=!1,LinkComponent:p="a",onBlur:h,onClick:m,onContextMenu:y,onDragLeave:v,onFocus:g,onFocusVisible:b,onKeyDown:w,onKeyUp:A,onMouseDown:S,onMouseLeave:k,onMouseUp:C,onTouchEnd:L,onTouchMove:O,onTouchStart:j,tabIndex:N=0,TouchRippleProps:_,touchRippleRef:T,type:P}=r,I=E(r,fo),B=t.useRef(null),z=t.useRef(null),M=wr(z,T),{isFocusVisibleRef:R,onFocus:F,onBlur:$,ref:D}=Nr(),[G,U]=t.useState(!1);u&&G&&U(!1),t.useImperativeHandle(o,(()=>({focusVisible:()=>{U(!0),B.current.focus()}})),[]);const[H,W]=t.useState(!1);t.useEffect((()=>{W(!0)}),[]);const Y=H&&!s&&!u;function V(e,t,n=f){return Er((r=>(t&&t(r),!n&&z.current&&z.current[e](r),!0)))}t.useEffect((()=>{G&&d&&!s&&H&&z.current.pulsate()}),[s,d,G,H]);const q=V("start",S),K=V("stop",y),X=V("stop",v),Q=V("stop",C),Z=V("stop",(e=>{G&&e.preventDefault(),k&&k(e)})),J=V("start",j),ee=V("stop",L),te=V("stop",O),ne=V("stop",(e=>{$(e),!1===R.current&&U(!1),h&&h(e)}),!1),re=Er((e=>{B.current||(B.current=e.currentTarget),F(e),!0===R.current&&(U(!0),b&&b(e)),g&&g(e)})),oe=()=>{const e=B.current;return c&&"button"!==c&&!("A"===e.tagName&&e.href)},ae=t.useRef(!1),ie=Er((e=>{d&&!ae.current&&G&&z.current&&" "===e.key&&(ae.current=!0,z.current.stop(e,(()=>{z.current.start(e)}))),e.target===e.currentTarget&&oe()&&" "===e.key&&e.preventDefault(),w&&w(e),e.target===e.currentTarget&&oe()&&"Enter"===e.key&&!u&&(e.preventDefault(),m&&m(e))})),le=Er((e=>{d&&" "===e.key&&z.current&&G&&!e.defaultPrevented&&(ae.current=!1,z.current.stop(e,(()=>{z.current.pulsate(e)}))),A&&A(e),m&&e.target===e.currentTarget&&oe()&&" "===e.key&&!e.defaultPrevented&&m(e)}));let ce=c;"button"===ce&&(I.href||I.to)&&(ce=p);const ue={};"button"===ce?(ue.type=void 0===P?"button":P,ue.disabled=u):(I.href||I.to||(ue.role="button"),u&&(ue["aria-disabled"]=u));const se=wr(n,D,B),fe=x({},r,{centerRipple:a,component:c,disabled:u,disableRipple:s,disableTouchRipple:f,focusRipple:d,tabIndex:N,focusVisible:G}),de=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a=Hn({root:["root",t&&"disabled",n&&"focusVisible"]},uo,o);return n&&r&&(a.root+=` ${r}`),a})(fe);return(0,st.jsxs)(po,x({as:ce,className:Gn(de.root,l),ownerState:fe,onBlur:ne,onClick:m,onContextMenu:K,onFocus:re,onKeyDown:ie,onKeyUp:le,onMouseDown:q,onMouseLeave:Z,onMouseUp:Q,onDragLeave:X,onTouchEnd:ee,onTouchMove:te,onTouchStart:J,ref:se,tabIndex:u?-1:N,type:P},ue,I,{children:[i,Y?(0,st.jsx)(co,x({ref:M,center:a},_)):null]}))})),mo=ho,yo=T;function vo(e){return Vr("MuiButton",e)}const go=qr("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),bo=t.createContext({}),wo=t.createContext(void 0),xo=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],Eo=e=>x({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),Ao=mr(mo,{shouldForwardProp:e=>pr(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${yo(n.color)}`],t[`size${yo(n.size)}`],t[`${n.variant}Size${yo(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})((({theme:e,ownerState:t})=>{var n,r;const o="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],a="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return x({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":x({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:Pe(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===t.variant&&"inherit"!==t.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Pe(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===t.variant&&"inherit"!==t.color&&{border:`1px solid ${(e.vars||e).palette[t.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Pe(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===t.variant&&{backgroundColor:e.vars?e.vars.palette.Button.inheritContainedHoverBg:a,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===t.variant&&"inherit"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":x({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${go.focusVisible}`]:x({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${go.disabled}`]:x({color:(e.vars||e).palette.action.disabled},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"contained"===t.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===t.variant&&{padding:"6px 8px"},"text"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main},"outlined"===t.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:`1px solid ${Pe(e.palette[t.color].main,.5)}`},"contained"===t.variant&&{color:e.vars?e.vars.palette.text.primary:null==(n=(r=e.palette).getContrastText)?void 0:n.call(r,e.palette.grey[300]),backgroundColor:e.vars?e.vars.palette.Button.inheritContainedBg:o,boxShadow:(e.vars||e).shadows[2]},"contained"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},"inherit"===t.color&&{color:"inherit",borderColor:"currentColor"},"small"===t.size&&"text"===t.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"text"===t.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"outlined"===t.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"outlined"===t.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"contained"===t.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"contained"===t.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})}),(({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${go.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${go.disabled}`]:{boxShadow:"none"}})),So=mr("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${yo(n.size)}`]]}})((({ownerState:e})=>x({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},Eo(e)))),ko=mr("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${yo(n.size)}`]]}})((({ownerState:e})=>x({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},Eo(e)))),Co=t.forwardRef((function(e,n){const r=t.useContext(bo),o=t.useContext(wo),a=gr({props:Un(r,e),name:"MuiButton"}),{children:i,color:l="primary",component:c="button",className:u,disabled:s=!1,disableElevation:f=!1,disableFocusRipple:d=!1,endIcon:p,focusVisibleClassName:h,fullWidth:m=!1,size:y="medium",startIcon:v,type:g,variant:b="text"}=a,w=E(a,xo),A=x({},a,{color:l,component:c,disabled:s,disableElevation:f,disableFocusRipple:d,fullWidth:m,size:y,type:g,variant:b}),S=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:a,classes:i}=e;return x({},i,Hn({root:["root",a,`${a}${yo(t)}`,`size${yo(o)}`,`${a}Size${yo(o)}`,"inherit"===t&&"colorInherit",n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["startIcon",`iconSize${yo(o)}`],endIcon:["endIcon",`iconSize${yo(o)}`]},vo,i))})(A),k=v&&(0,st.jsx)(So,{className:S.startIcon,ownerState:A,children:v}),C=p&&(0,st.jsx)(ko,{className:S.endIcon,ownerState:A,children:p}),L=o||"";return(0,st.jsxs)(Ao,x({ownerState:A,className:Gn(r.className,S.root,u,L),component:c,disabled:s,focusRipple:!d,focusVisibleClassName:Gn(S.focusVisible,h),ref:n,type:g},w,{classes:S,children:[k,i,C]}))}));var Lo,Oo=o(935),jo=o.t(Oo,2);function No(){return No=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},No.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(Lo||(Lo={}));const _o="popstate";function To(e,t){if(!1===e||null==e)throw new Error(t)}function Po(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function Io(e,t){return{usr:e.state,key:e.key,idx:t}}function Bo(e,t,n,r){return void 0===n&&(n=null),No({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?Mo(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function zo(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function Mo(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var Ro;function Fo(e,t,n){void 0===n&&(n="/");let r=Jo(("string"==typeof t?Mo(t):t).pathname||"/",n);if(null==r)return null;let o=$o(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=Xo(o[e],Zo(r));return a}function $o(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(To(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=ra([r,i.relativePath]),c=n.concat(i);e.children&&e.children.length>0&&(To(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),$o(e.children,t,c,l)),(null!=e.path||e.index)&&t.push({path:l,score:Ko(l,e.index),routesMeta:c})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of Do(e.path))o(e,t,n);else o(e,t)})),t}function Do(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=Do(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(Ro||(Ro={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const Go=/^:\w+$/,Uo=3,Ho=2,Wo=1,Yo=10,Vo=-2,qo=e=>"*"===e;function Ko(e,t){let n=e.split("/"),r=n.length;return n.some(qo)&&(r+=Vo),t&&(r+=Ho),n.filter((e=>!qo(e))).reduce(((e,t)=>e+(Go.test(t)?Uo:""===t?Wo:Yo)),r)}function Xo(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,c="/"===o?t:t.slice(o.length)||"/",u=Qo({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},c);if(!u)return null;Object.assign(r,u.params);let s=i.route;a.push({params:r,pathname:ra([o,u.pathname]),pathnameBase:oa(ra([o,u.pathnameBase])),route:s}),"/"!==u.pathnameBase&&(o=ra([o,u.pathnameBase]))}return a}function Qo(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),Po("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:o}=t;if("*"===r){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const c=l[n];return e[r]=o&&!c?void 0:function(e,t){try{return decodeURIComponent(e)}catch(n){return Po(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(c||"",r),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function Zo(e){try{return decodeURI(e)}catch(t){return Po(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function Jo(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function ea(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function ta(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function na(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=Mo(e):(o=No({},e),To(!o.pathname||!o.pathname.includes("?"),ea("?","pathname","search",o)),To(!o.pathname||!o.pathname.includes("#"),ea("#","pathname","hash",o)),To(!o.search||!o.search.includes("#"),ea("#","search","hash",o)));let a,i=""===e||""===o.pathname,l=i?"/":o.pathname;if(null==l)a=n;else if(r){let e=t[t.length-1].replace(/^\//,"").split("/");if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e.pop();o.pathname=t.join("/")}a="/"+e.join("/")}else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?Mo(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:aa(r),hash:ia(o)}}(o,a),u=l&&"/"!==l&&l.endsWith("/"),s=(i||"."===l)&&n.endsWith("/");return c.pathname.endsWith("/")||!u&&!s||(c.pathname+="/"),c}const ra=e=>e.join("/").replace(/\/\/+/g,"/"),oa=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),aa=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",ia=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const la=["post","put","patch","delete"],ca=(new Set(la),["get",...la]);function ua(){return ua=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ua.apply(this,arguments)}new Set(ca),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const sa=t.createContext(null),fa=t.createContext(null),da=t.createContext(null),pa=t.createContext(null),ha=t.createContext({outlet:null,matches:[],isDataRoute:!1}),ma=t.createContext(null);function ya(){return null!=t.useContext(pa)}function va(){return ya()||To(!1),t.useContext(pa).location}function ga(e){t.useContext(da).static||t.useLayoutEffect(e)}function ba(){let{isDataRoute:e}=t.useContext(ha);return e?function(){let{router:e}=function(e){let n=t.useContext(sa);return n||To(!1),n}(La.UseNavigateStable),n=ja(Oa.UseNavigateStable),r=t.useRef(!1);ga((()=>{r.current=!0}));let o=t.useCallback((function(t,o){void 0===o&&(o={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,ua({fromRouteId:n},o)))}),[e,n]);return o}():function(){ya()||To(!1);let e=t.useContext(sa),{basename:n,navigator:r}=t.useContext(da),{matches:o}=t.useContext(ha),{pathname:a}=va(),i=JSON.stringify(ta(o).map((e=>e.pathnameBase))),l=t.useRef(!1);ga((()=>{l.current=!0}));let c=t.useCallback((function(t,o){if(void 0===o&&(o={}),!l.current)return;if("number"==typeof t)return void r.go(t);let c=na(t,JSON.parse(i),a,"path"===o.relative);null==e&&"/"!==n&&(c.pathname="/"===c.pathname?n:ra([n,c.pathname])),(o.replace?r.replace:r.push)(c,o.state,o)}),[n,r,i,a,e]);return c}()}function wa(){let{matches:e}=t.useContext(ha),n=e[e.length-1];return n?n.params:{}}function xa(e,n){let{relative:r}=void 0===n?{}:n,{matches:o}=t.useContext(ha),{pathname:a}=va(),i=JSON.stringify(ta(o).map((e=>e.pathnameBase)));return t.useMemo((()=>na(e,JSON.parse(i),a,"path"===r)),[e,i,a,r])}function Ea(e,n,r){ya()||To(!1);let{navigator:o}=t.useContext(da),{matches:a}=t.useContext(ha),i=a[a.length-1],l=i?i.params:{},c=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let u,s=va();if(n){var f;let e="string"==typeof n?Mo(n):n;"/"===c||(null==(f=e.pathname)?void 0:f.startsWith(c))||To(!1),u=e}else u=s;let d=u.pathname||"/",p=Fo(e,{pathname:"/"===c?d:d.slice(c.length)||"/"}),h=function(e,n,r){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),null==e){var a;if(null==(a=r)||!a.errors)return null;e=r.matches}let i=e,l=null==(o=r)?void 0:o.errors;if(null!=l){let e=i.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||To(!1),i=i.slice(0,Math.min(i.length,e+1))}return i.reduceRight(((e,o,a)=>{let c=o.route.id?null==l?void 0:l[o.route.id]:null,u=null;r&&(u=o.route.errorElement||Sa);let s=n.concat(i.slice(0,a+1)),f=()=>{let n;return n=c?u:o.route.Component?t.createElement(o.route.Component,null):o.route.element?o.route.element:e,t.createElement(Ca,{match:o,routeContext:{outlet:e,matches:s,isDataRoute:null!=r},children:n})};return r&&(o.route.ErrorBoundary||o.route.errorElement||0===a)?t.createElement(ka,{location:r.location,revalidation:r.revalidation,component:u,error:c,children:f(),routeContext:{outlet:null,matches:s,isDataRoute:!0}}):f()}),null)}(p&&p.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:ra([c,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:ra([c,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),a,r);return n&&h?t.createElement(pa.Provider,{value:{location:ua({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:Lo.Pop}},h):h}function Aa(){let e=function(){var e;let n=t.useContext(ma),r=function(e){let n=t.useContext(fa);return n||To(!1),n}(Oa.UseRouteError),o=ja(Oa.UseRouteError);return n||(null==(e=r.errors)?void 0:e[o])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,null)}const Sa=t.createElement(Aa,null);class ka extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(ha.Provider,{value:this.props.routeContext},t.createElement(ma.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Ca(e){let{routeContext:n,match:r,children:o}=e,a=t.useContext(sa);return a&&a.static&&a.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(ha.Provider,{value:n},o)}var La=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(La||{}),Oa=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Oa||{});function ja(e){let n=function(e){let n=t.useContext(ha);return n||To(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||To(!1),r.route.id}function Na(e){To(!1)}function _a(e){let{basename:n="/",children:r=null,location:o,navigationType:a=Lo.Pop,navigator:i,static:l=!1}=e;ya()&&To(!1);let c=n.replace(/^\/*/,"/"),u=t.useMemo((()=>({basename:c,navigator:i,static:l})),[c,i,l]);"string"==typeof o&&(o=Mo(o));let{pathname:s="/",search:f="",hash:d="",state:p=null,key:h="default"}=o,m=t.useMemo((()=>{let e=Jo(s,c);return null==e?null:{location:{pathname:e,search:f,hash:d,state:p,key:h},navigationType:a}}),[c,s,f,d,p,h,a]);return null==m?null:t.createElement(da.Provider,{value:u},t.createElement(pa.Provider,{children:r,value:m}))}function Ta(e){let{children:t,location:n}=e;return Ea(Pa(t),n)}function Pa(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,o)=>{if(!t.isValidElement(e))return;let a=[...n,o];if(e.type===t.Fragment)return void r.push.apply(r,Pa(e.props.children,a));e.type!==Na&&To(!1),e.props.index&&e.props.children&&To(!1);let i={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=Pa(e.props.children,a)),r.push(i)})),r}function Ia(){return Ia=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ia.apply(this,arguments)}function Ba(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const za=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],Ma=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"],Ra=t.createContext({isTransitioning:!1});new Map;const Fa=n.startTransition;function $a(e){let{basename:n,children:r,future:o,window:a}=e,i=t.useRef();null==i.current&&(i.current=function(e){return void 0===e&&(e={}),function(e,t,n,r){void 0===r&&(r={});let{window:o=document.defaultView,v5Compat:a=!1}=r,i=o.history,l=Lo.Pop,c=null,u=s();function s(){return(i.state||{idx:null}).idx}function f(){l=Lo.Pop;let e=s(),t=null==e?null:e-u;u=e,c&&c({action:l,location:p.location,delta:t})}function d(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:zo(e);return To(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==u&&(u=0,i.replaceState(No({},i.state,{idx:u}),""));let p={get action(){return l},get location(){return e(o,i)},listen(e){if(c)throw new Error("A history only accepts one active listener");return o.addEventListener(_o,f),c=e,()=>{o.removeEventListener(_o,f),c=null}},createHref:e=>t(o,e),createURL:d,encodeLocation(e){let t=d(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l=Lo.Push;let r=Bo(p.location,e,t);n&&n(r,e),u=s()+1;let f=Io(r,u),d=p.createHref(r);try{i.pushState(f,"",d)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(d)}a&&c&&c({action:l,location:p.location,delta:1})},replace:function(e,t){l=Lo.Replace;let r=Bo(p.location,e,t);n&&n(r,e),u=s();let o=Io(r,u),f=p.createHref(r);i.replaceState(o,"",f),a&&c&&c({action:l,location:p.location,delta:0})},go:e=>i.go(e)};return p}((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=Mo(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),Bo("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:zo(t))}),(function(e,t){Po("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}({window:a,v5Compat:!0}));let l=i.current,[c,u]=t.useState({action:l.action,location:l.location}),{v7_startTransition:s}=o||{},f=t.useCallback((e=>{s&&Fa?Fa((()=>u(e))):u(e)}),[u,s]);return t.useLayoutEffect((()=>l.listen(f)),[l,f]),t.createElement(_a,{basename:n,children:r,location:c.location,navigationType:c.action,navigator:l})}jo.flushSync;const Da="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,Ga=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Ua=t.forwardRef((function(e,n){let r,{onClick:o,relative:a,reloadDocument:i,replace:l,state:c,target:u,to:s,preventScrollReset:f,unstable_viewTransition:d}=e,p=Ba(e,za),{basename:h}=t.useContext(da),m=!1;if("string"==typeof s&&Ga.test(s)&&(r=s,Da))try{let e=new URL(window.location.href),t=s.startsWith("//")?new URL(e.protocol+s):new URL(s),n=Jo(t.pathname,h);t.origin===e.origin&&null!=n?s=n+t.search+t.hash:m=!0}catch(e){}let y=function(e,n){let{relative:r}=void 0===n?{}:n;ya()||To(!1);let{basename:o,navigator:a}=t.useContext(da),{hash:i,pathname:l,search:c}=xa(e,{relative:r}),u=l;return"/"!==o&&(u="/"===l?o:ra([o,l])),a.createHref({pathname:u,search:c,hash:i})}(s,{relative:a}),v=function(e,n){let{target:r,replace:o,state:a,preventScrollReset:i,relative:l,unstable_viewTransition:c}=void 0===n?{}:n,u=ba(),s=va(),f=xa(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==o?o:zo(s)===zo(f);u(e,{replace:n,state:a,preventScrollReset:i,relative:l,unstable_viewTransition:c})}}),[s,u,f,o,a,r,e,i,l,c])}(s,{replace:l,state:c,target:u,preventScrollReset:f,relative:a,unstable_viewTransition:d});return t.createElement("a",Ia({},p,{href:r||y,onClick:m||i?o:function(e){o&&o(e),e.defaultPrevented||v(e)},ref:n,target:u}))})),Ha=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:o=!1,className:a="",end:i=!1,style:l,to:c,unstable_viewTransition:u,children:s}=e,f=Ba(e,Ma),d=xa(c,{relative:f.relative}),p=va(),h=t.useContext(fa),{navigator:m}=t.useContext(da),y=null!=h&&function(e,n){void 0===n&&(n={});let r=t.useContext(Ra);null==r&&To(!1);let{basename:o}=function(e){let n=t.useContext(sa);return n||To(!1),n}(Wa.useViewTransitionState),a=xa(e,{relative:n.relative});if(!r.isTransitioning)return!1;let i=Jo(r.currentLocation.pathname,o)||r.currentLocation.pathname,l=Jo(r.nextLocation.pathname,o)||r.nextLocation.pathname;return null!=Qo(a.pathname,l)||null!=Qo(a.pathname,i)}(d)&&!0===u,v=m.encodeLocation?m.encodeLocation(d).pathname:d.pathname,g=p.pathname,b=h&&h.navigation&&h.navigation.location?h.navigation.location.pathname:null;o||(g=g.toLowerCase(),b=b?b.toLowerCase():null,v=v.toLowerCase());const w="/"!==v&&v.endsWith("/")?v.length-1:v.length;let x,E=g===v||!i&&g.startsWith(v)&&"/"===g.charAt(w),A=null!=b&&(b===v||!i&&b.startsWith(v)&&"/"===b.charAt(v.length)),S={isActive:E,isPending:A,isTransitioning:y},k=E?r:void 0;x="function"==typeof a?a(S):[a,E?"active":null,A?"pending":null,y?"transitioning":null].filter(Boolean).join(" ");let C="function"==typeof l?l(S):l;return t.createElement(Ua,Ia({},f,{"aria-current":k,className:x,ref:n,style:C,to:c,unstable_viewTransition:u}),"function"==typeof s?s(S):s)}));var Wa,Ya;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Wa||(Wa={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Ya||(Ya={}));const Va=function(){return t.createElement("div",{className:"footer"},t.createElement("hr",null),"Walter ©®")};function qa(e,t){return function(){return e.apply(t,arguments)}}const{toString:Ka}=Object.prototype,{getPrototypeOf:Xa}=Object,Qa=(Za=Object.create(null),e=>{const t=Ka.call(e);return Za[t]||(Za[t]=t.slice(8,-1).toLowerCase())});var Za;const Ja=e=>(e=e.toLowerCase(),t=>Qa(t)===e),ei=e=>t=>typeof t===e,{isArray:ti}=Array,ni=ei("undefined"),ri=Ja("ArrayBuffer"),oi=ei("string"),ai=ei("function"),ii=ei("number"),li=e=>null!==e&&"object"==typeof e,ci=e=>{if("object"!==Qa(e))return!1;const t=Xa(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},ui=Ja("Date"),si=Ja("File"),fi=Ja("Blob"),di=Ja("FileList"),pi=Ja("URLSearchParams");function hi(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),ti(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(r=0;r<a;r++)i=o[r],t.call(null,e[i],i,e)}}function mi(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const yi="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,vi=e=>!ni(e)&&e!==yi,gi=(bi="undefined"!=typeof Uint8Array&&Xa(Uint8Array),e=>bi&&e instanceof bi);var bi;const wi=Ja("HTMLFormElement"),xi=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),Ei=Ja("RegExp"),Ai=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};hi(n,((n,o)=>{let a;!1!==(a=t(n,o,e))&&(r[o]=a||n)})),Object.defineProperties(e,r)},Si="abcdefghijklmnopqrstuvwxyz",ki="0123456789",Ci={DIGIT:ki,ALPHA:Si,ALPHA_DIGIT:Si+Si.toUpperCase()+ki},Li=Ja("AsyncFunction"),Oi={isArray:ti,isArrayBuffer:ri,isBuffer:function(e){return null!==e&&!ni(e)&&null!==e.constructor&&!ni(e.constructor)&&ai(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||ai(e.append)&&("formdata"===(t=Qa(e))||"object"===t&&ai(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&ri(e.buffer),t},isString:oi,isNumber:ii,isBoolean:e=>!0===e||!1===e,isObject:li,isPlainObject:ci,isUndefined:ni,isDate:ui,isFile:si,isBlob:fi,isRegExp:Ei,isFunction:ai,isStream:e=>li(e)&&ai(e.pipe),isURLSearchParams:pi,isTypedArray:gi,isFileList:di,forEach:hi,merge:function e(){const{caseless:t}=vi(this)&&this||{},n={},r=(r,o)=>{const a=t&&mi(n,o)||o;ci(n[a])&&ci(r)?n[a]=e(n[a],r):ci(r)?n[a]=e({},r):ti(r)?n[a]=r.slice():n[a]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&hi(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(hi(t,((t,r)=>{n&&ai(t)?e[r]=qa(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,a,i;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),a=o.length;a-- >0;)i=o[a],r&&!r(i,e,t)||l[i]||(t[i]=e[i],l[i]=!0);e=!1!==n&&Xa(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:Qa,kindOfTest:Ja,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(ti(e))return e;let t=e.length;if(!ii(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:wi,hasOwnProperty:xi,hasOwnProp:xi,reduceDescriptors:Ai,freezeMethods:e=>{Ai(e,((t,n)=>{if(ai(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];ai(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return ti(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:mi,global:yi,isContextDefined:vi,ALPHABET:Ci,generateString:(e=16,t=Ci.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&ai(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(li(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=ti(e)?[]:{};return hi(e,((e,t)=>{const a=n(e,r+1);!ni(a)&&(o[t]=a)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:Li,isThenable:e=>e&&(li(e)||ai(e))&&ai(e.then)&&ai(e.catch)};function ji(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}Oi.inherits(ji,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Oi.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Ni=ji.prototype,_i={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{_i[e]={value:e}})),Object.defineProperties(ji,_i),Object.defineProperty(Ni,"isAxiosError",{value:!0}),ji.from=(e,t,n,r,o,a)=>{const i=Object.create(Ni);return Oi.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),ji.call(i,e.message,t,n,r,o),i.cause=e,i.name=e.name,a&&Object.assign(i,a),i};const Ti=ji;function Pi(e){return Oi.isPlainObject(e)||Oi.isArray(e)}function Ii(e){return Oi.endsWith(e,"[]")?e.slice(0,-2):e}function Bi(e,t,n){return e?e.concat(t).map((function(e,t){return e=Ii(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const zi=Oi.toFlatObject(Oi,{},null,(function(e){return/^is[A-Z]/.test(e)})),Mi=function(e,t,n){if(!Oi.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=Oi.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!Oi.isUndefined(t[e])}))).metaTokens,o=n.visitor||u,a=n.dots,i=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&Oi.isSpecCompliantForm(t);if(!Oi.isFunction(o))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(Oi.isDate(e))return e.toISOString();if(!l&&Oi.isBlob(e))throw new Ti("Blob is not supported. Use a Buffer instead.");return Oi.isArrayBuffer(e)||Oi.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function u(e,n,o){let l=e;if(e&&!o&&"object"==typeof e)if(Oi.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(Oi.isArray(e)&&function(e){return Oi.isArray(e)&&!e.some(Pi)}(e)||(Oi.isFileList(e)||Oi.endsWith(n,"[]"))&&(l=Oi.toArray(e)))return n=Ii(n),l.forEach((function(e,r){!Oi.isUndefined(e)&&null!==e&&t.append(!0===i?Bi([n],r,a):null===i?n:n+"[]",c(e))})),!1;return!!Pi(e)||(t.append(Bi(o,n,a),c(e)),!1)}const s=[],f=Object.assign(zi,{defaultVisitor:u,convertValue:c,isVisitable:Pi});if(!Oi.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!Oi.isUndefined(n)){if(-1!==s.indexOf(n))throw Error("Circular reference detected in "+r.join("."));s.push(n),Oi.forEach(n,(function(n,a){!0===(!(Oi.isUndefined(n)||null===n)&&o.call(t,n,Oi.isString(a)?a.trim():a,r,f))&&e(n,r?r.concat(a):[a])})),s.pop()}}(e),t};function Ri(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Fi(e,t){this._pairs=[],e&&Mi(e,this,t)}const $i=Fi.prototype;$i.append=function(e,t){this._pairs.push([e,t])},$i.toString=function(e){const t=e?function(t){return e.call(this,t,Ri)}:Ri;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Di=Fi;function Gi(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ui(e,t,n){if(!t)return e;const r=n&&n.encode||Gi,o=n&&n.serialize;let a;if(a=o?o(t,n):Oi.isURLSearchParams(t)?t.toString():new Di(t,n).toString(r),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}const Hi=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Oi.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Wi={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Yi={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Di,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},Vi="undefined"!=typeof window&&"undefined"!=typeof document,qi=(Ki="undefined"!=typeof navigator&&navigator.product,Vi&&["ReactNative","NativeScript","NS"].indexOf(Ki)<0);var Ki;const Xi="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,Qi={...e,...Yi},Zi=function(e){function t(e,n,r,o){let a=e[o++];const i=Number.isFinite(+a),l=o>=e.length;return a=!a&&Oi.isArray(r)?r.length:a,l?(Oi.hasOwnProp(r,a)?r[a]=[r[a],n]:r[a]=n,!i):(r[a]&&Oi.isObject(r[a])||(r[a]=[]),t(e,n,r[a],o)&&Oi.isArray(r[a])&&(r[a]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let a;for(r=0;r<o;r++)a=n[r],t[a]=e[a];return t}(r[a])),!i)}if(Oi.isFormData(e)&&Oi.isFunction(e.entries)){const n={};return Oi.forEachEntry(e,((e,r)=>{t(function(e){return Oi.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},Ji={transitional:Wi,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=Oi.isObject(e);if(o&&Oi.isHTMLForm(e)&&(e=new FormData(e)),Oi.isFormData(e))return r&&r?JSON.stringify(Zi(e)):e;if(Oi.isArrayBuffer(e)||Oi.isBuffer(e)||Oi.isStream(e)||Oi.isFile(e)||Oi.isBlob(e))return e;if(Oi.isArrayBufferView(e))return e.buffer;if(Oi.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Mi(e,new Qi.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return Qi.isNode&&Oi.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=Oi.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Mi(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(Oi.isString(e))try{return(0,JSON.parse)(e),Oi.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||Ji.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&Oi.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw Ti.from(e,Ti.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Qi.classes.FormData,Blob:Qi.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Oi.forEach(["delete","get","head","post","put","patch"],(e=>{Ji.headers[e]={}}));const el=Ji,tl=Oi.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),nl=Symbol("internals");function rl(e){return e&&String(e).trim().toLowerCase()}function ol(e){return!1===e||null==e?e:Oi.isArray(e)?e.map(ol):String(e)}function al(e,t,n,r,o){return Oi.isFunction(r)?r.call(this,t,n):(o&&(t=n),Oi.isString(t)?Oi.isString(r)?-1!==t.indexOf(r):Oi.isRegExp(r)?r.test(t):void 0:void 0)}class il{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=rl(t);if(!o)throw new Error("header name must be a non-empty string");const a=Oi.findKey(r,o);(!a||void 0===r[a]||!0===n||void 0===n&&!1!==r[a])&&(r[a||t]=ol(e))}const a=(e,t)=>Oi.forEach(e,((e,n)=>o(e,n,t)));return Oi.isPlainObject(e)||e instanceof this.constructor?a(e,t):Oi.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?a((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&tl[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=rl(e)){const n=Oi.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(Oi.isFunction(t))return t.call(this,e,n);if(Oi.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=rl(e)){const n=Oi.findKey(this,e);return!(!n||void 0===this[n]||t&&!al(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=rl(e)){const o=Oi.findKey(n,e);!o||t&&!al(0,n[o],o,t)||(delete n[o],r=!0)}}return Oi.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!al(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return Oi.forEach(this,((r,o)=>{const a=Oi.findKey(n,o);if(a)return t[a]=ol(r),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();i!==o&&delete t[o],t[i]=ol(r),n[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Oi.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&Oi.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[nl]=this[nl]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=rl(e);t[r]||(function(e,t){const n=Oi.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return Oi.isArray(e)?e.forEach(r):r(e),this}}il.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Oi.reduceDescriptors(il.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),Oi.freezeMethods(il);const ll=il;function cl(e,t){const n=this||el,r=t||n,o=ll.from(r.headers);let a=r.data;return Oi.forEach(e,(function(e){a=e.call(n,a,o.normalize(),t?t.status:void 0)})),o.normalize(),a}function ul(e){return!(!e||!e.__CANCEL__)}function sl(e,t,n){Ti.call(this,null==e?"canceled":e,Ti.ERR_CANCELED,t,n),this.name="CanceledError"}Oi.inherits(sl,Ti,{__CANCEL__:!0});const fl=sl,dl=Qi.hasStandardBrowserEnv?{write(e,t,n,r,o,a){const i=[e+"="+encodeURIComponent(t)];Oi.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),Oi.isString(r)&&i.push("path="+r),Oi.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function pl(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const hl=Qi.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=Oi.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function ml(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,a=0,i=0;return t=void 0!==t?t:1e3,function(l){const c=Date.now(),u=r[i];o||(o=c),n[a]=l,r[a]=c;let s=i,f=0;for(;s!==a;)f+=n[s++],s%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),c-o<t)return;const d=u&&c-u;return d?Math.round(1e3*f/d):void 0}}(50,250);return o=>{const a=o.loaded,i=o.lengthComputable?o.total:void 0,l=a-n,c=r(l);n=a;const u={loaded:a,total:i,progress:i?a/i:void 0,bytes:l,rate:c||void 0,estimated:c&&i&&a<=i?(i-a)/c:void 0,event:o};u[t?"download":"upload"]=!0,e(u)}}const yl="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=ll.from(e.headers).normalize();let a,i,{responseType:l,withXSRFToken:c}=e;function u(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}if(Oi.isFormData(r))if(Qi.hasStandardBrowserEnv||Qi.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(i=o.getContentType())){const[e,...t]=i?i.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}let s=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const f=pl(e.baseURL,e.url);function d(){if(!s)return;const r=ll.from("getAllResponseHeaders"in s&&s.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new Ti("Request failed with status code "+n.status,[Ti.ERR_BAD_REQUEST,Ti.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),u()}),(function(e){n(e),u()}),{data:l&&"text"!==l&&"json"!==l?s.response:s.responseText,status:s.status,statusText:s.statusText,headers:r,config:e,request:s}),s=null}if(s.open(e.method.toUpperCase(),Ui(f,e.params,e.paramsSerializer),!0),s.timeout=e.timeout,"onloadend"in s?s.onloadend=d:s.onreadystatechange=function(){s&&4===s.readyState&&(0!==s.status||s.responseURL&&0===s.responseURL.indexOf("file:"))&&setTimeout(d)},s.onabort=function(){s&&(n(new Ti("Request aborted",Ti.ECONNABORTED,e,s)),s=null)},s.onerror=function(){n(new Ti("Network Error",Ti.ERR_NETWORK,e,s)),s=null},s.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||Wi;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new Ti(t,r.clarifyTimeoutError?Ti.ETIMEDOUT:Ti.ECONNABORTED,e,s)),s=null},Qi.hasStandardBrowserEnv&&(c&&Oi.isFunction(c)&&(c=c(e)),c||!1!==c&&hl(f))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&dl.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in s&&Oi.forEach(o.toJSON(),(function(e,t){s.setRequestHeader(t,e)})),Oi.isUndefined(e.withCredentials)||(s.withCredentials=!!e.withCredentials),l&&"json"!==l&&(s.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&s.addEventListener("progress",ml(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&s.upload&&s.upload.addEventListener("progress",ml(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{s&&(n(!t||t.type?new fl(null,e,s):t),s.abort(),s=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const p=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(f);p&&-1===Qi.protocols.indexOf(p)?n(new Ti("Unsupported protocol "+p+":",Ti.ERR_BAD_REQUEST,e)):s.send(r||null)}))},vl={http:null,xhr:yl};Oi.forEach(vl,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const gl=e=>`- ${e}`,bl=e=>Oi.isFunction(e)||null===e||!1===e,wl=e=>{e=Oi.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let a=0;a<t;a++){let t;if(n=e[a],r=n,!bl(n)&&(r=vl[(t=String(n)).toLowerCase()],void 0===r))throw new Ti(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+a]=r}if(!r){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(gl).join("\n"):" "+gl(e[0]):"as no adapter specified";throw new Ti("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function xl(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new fl(null,e)}function El(e){return xl(e),e.headers=ll.from(e.headers),e.data=cl.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),wl(e.adapter||el.adapter)(e).then((function(t){return xl(e),t.data=cl.call(e,e.transformResponse,t),t.headers=ll.from(t.headers),t}),(function(t){return ul(t)||(xl(e),t&&t.response&&(t.response.data=cl.call(e,e.transformResponse,t.response),t.response.headers=ll.from(t.response.headers))),Promise.reject(t)}))}const Al=e=>e instanceof ll?e.toJSON():e;function Sl(e,t){t=t||{};const n={};function r(e,t,n){return Oi.isPlainObject(e)&&Oi.isPlainObject(t)?Oi.merge.call({caseless:n},e,t):Oi.isPlainObject(t)?Oi.merge({},t):Oi.isArray(t)?t.slice():t}function o(e,t,n){return Oi.isUndefined(t)?Oi.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function a(e,t){if(!Oi.isUndefined(t))return r(void 0,t)}function i(e,t){return Oi.isUndefined(t)?Oi.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,a){return a in t?r(n,o):a in e?r(void 0,n):void 0}const c={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t)=>o(Al(e),Al(t),!0)};return Oi.forEach(Object.keys(Object.assign({},e,t)),(function(r){const a=c[r]||o,i=a(e[r],t[r],r);Oi.isUndefined(i)&&a!==l||(n[r]=i)})),n}const kl={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{kl[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Cl={};kl.transitional=function(e,t,n){function r(e,t){return"[Axios v1.6.2] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,a)=>{if(!1===e)throw new Ti(r(o," has been removed"+(t?" in "+t:"")),Ti.ERR_DEPRECATED);return t&&!Cl[o]&&(Cl[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,a)}};const Ll={assertOptions:function(e,t,n){if("object"!=typeof e)throw new Ti("options must be an object",Ti.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const a=r[o],i=t[a];if(i){const t=e[a],n=void 0===t||i(t,a,e);if(!0!==n)throw new Ti("option "+a+" must be "+n,Ti.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new Ti("Unknown option "+a,Ti.ERR_BAD_OPTION)}},validators:kl},Ol=Ll.validators;class jl{constructor(e){this.defaults=e,this.interceptors={request:new Hi,response:new Hi}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Sl(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&Ll.assertOptions(n,{silentJSONParsing:Ol.transitional(Ol.boolean),forcedJSONParsing:Ol.transitional(Ol.boolean),clarifyTimeoutError:Ol.transitional(Ol.boolean)},!1),null!=r&&(Oi.isFunction(r)?t.paramsSerializer={serialize:r}:Ll.assertOptions(r,{encode:Ol.function,serialize:Ol.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let a=o&&Oi.merge(o.common,o[t.method]);o&&Oi.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=ll.concat(a,o);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const c=[];let u;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let s,f=0;if(!l){const e=[El.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,c),s=e.length,u=Promise.resolve(t);f<s;)u=u.then(e[f++],e[f++]);return u}s=i.length;let d=t;for(f=0;f<s;){const e=i[f++],t=i[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{u=El.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,s=c.length;f<s;)u=u.then(c[f++],c[f++]);return u}getUri(e){return Ui(pl((e=Sl(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}Oi.forEach(["delete","get","head","options"],(function(e){jl.prototype[e]=function(t,n){return this.request(Sl(n||{},{method:e,url:t,data:(n||{}).data}))}})),Oi.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(Sl(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}jl.prototype[e]=t(),jl.prototype[e+"Form"]=t(!0)}));const Nl=jl;class _l{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new fl(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new _l((function(t){e=t})),cancel:e}}}const Tl=_l,Pl={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Pl).forEach((([e,t])=>{Pl[t]=e}));const Il=Pl,Bl=function e(t){const n=new Nl(t),r=qa(Nl.prototype.request,n);return Oi.extend(r,Nl.prototype,n,{allOwnKeys:!0}),Oi.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(Sl(t,n))},r}(el);Bl.Axios=Nl,Bl.CanceledError=fl,Bl.CancelToken=Tl,Bl.isCancel=ul,Bl.VERSION="1.6.2",Bl.toFormData=Mi,Bl.AxiosError=Ti,Bl.Cancel=Bl.CanceledError,Bl.all=function(e){return Promise.all(e)},Bl.spread=function(e){return function(t){return e.apply(null,t)}},Bl.isAxiosError=function(e){return Oi.isObject(e)&&!0===e.isAxiosError},Bl.mergeConfig=Sl,Bl.AxiosHeaders=ll,Bl.formToJSON=e=>Zi(Oi.isHTMLForm(e)?new FormData(e):e),Bl.getAdapter=wl,Bl.HttpStatusCode=Il,Bl.default=Bl;const zl=Bl;function Ml(e){return Ml="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ml(e)}function Rl(){Rl=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Ml(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ml(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Fl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function $l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Dl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Dl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Dl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Gl=function(){var e=$l((0,t.useState)(null),2),n=(e[0],e[1]),r=$l((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=Rl().mark((function e(){var t,r;return Rl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/facts?limit=5",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,r=t.data,console.log("rezultat cinjenica",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Fl(a,r,o,i,l,"next",e)}function l(e){Fl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("div",{className:"facts"},t.createElement("table",{className:"table"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement("h2",null,"WELCOME"),t.createElement("h3",null,"Random Facts:")))),o.map((function(e){return t.createElement("tbody",{key:e.fact},t.createElement("tr",null,t.createElement("td",null,e.fact)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))})))))},Ul=function(){return t.createElement(t.Fragment,null,t.createElement("div",{className:"slika"},t.createElement(Gl,null)))},Hl=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function Wl(e){return Vr("MuiPaper",e)}qr("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const Yl=["className","component","elevation","square","variant"],Vl=mr("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>{var n;return x({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&x({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${Pe("#fff",Hl(t.elevation))}, ${Pe("#fff",Hl(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))})),ql=t.forwardRef((function(e,t){const n=gr({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:a=1,square:i=!1,variant:l="elevation"}=n,c=E(n,Yl),u=x({},n,{component:o,elevation:a,square:i,variant:l}),s=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e;return Hn({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},Wl,o)})(u);return(0,st.jsx)(Vl,x({as:o,ownerState:u,className:Gn(s.root,r),ref:t},c))}));function Kl(e){const t=function(e){return e&&e.ownerDocument||document}(e);return t.defaultView||window}const Xl=["onChange","maxRows","minRows","style","value"];function Ql(e){return parseInt(e,10)||0}const Zl={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function Jl(e){return null==e||0===Object.keys(e).length||0===e.outerHeightStyle&&!e.overflow}const ec=t.forwardRef((function(e,n){const{onChange:r,maxRows:o,minRows:a=1,style:i,value:l}=e,c=E(e,Xl),{current:u}=t.useRef(null!=l),s=t.useRef(null),f=br(n,s),d=t.useRef(null),p=t.useRef(0),[h,m]=t.useState({outerHeightStyle:0}),y=t.useCallback((()=>{const t=s.current,n=Kl(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0};const r=d.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const i=n.boxSizing,l=Ql(n.paddingBottom)+Ql(n.paddingTop),c=Ql(n.borderBottomWidth)+Ql(n.borderTopWidth),u=r.scrollHeight;r.value="x";const f=r.scrollHeight;let p=u;return a&&(p=Math.max(Number(a)*f,p)),o&&(p=Math.min(Number(o)*f,p)),p=Math.max(p,f),{outerHeightStyle:p+("border-box"===i?l+c:0),overflow:Math.abs(p-u)<=1}}),[o,a,e.placeholder]),v=(e,t)=>{const{outerHeightStyle:n,overflow:r}=t;return p.current<20&&(n>0&&Math.abs((e.outerHeightStyle||0)-n)>1||e.overflow!==r)?(p.current+=1,{overflow:r,outerHeightStyle:n}):e},g=t.useCallback((()=>{const e=y();Jl(e)||m((t=>v(t,e)))}),[y]);return xr((()=>{const e=()=>{p.current=0,(()=>{const e=y();Jl(e)||Oo.flushSync((()=>{m((t=>v(t,e)))}))})()};const t=function(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}(e),n=s.current,r=Kl(n);let o;return r.addEventListener("resize",t),"undefined"!=typeof ResizeObserver&&(o=new ResizeObserver(e),o.observe(n)),()=>{t.clear(),cancelAnimationFrame(undefined),r.removeEventListener("resize",t),o&&o.disconnect()}}),[y]),xr((()=>{g()})),t.useEffect((()=>{p.current=0}),[l]),(0,st.jsxs)(t.Fragment,{children:[(0,st.jsx)("textarea",x({value:l,onChange:e=>{p.current=0,u||g(),r&&r(e)},ref:f,rows:a,style:x({height:h.outerHeightStyle,overflow:h.overflow?"hidden":void 0},i)},c)),(0,st.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:d,tabIndex:-1,style:x({},Zl,i,{paddingTop:0,paddingBottom:0})})]})}));function tc(e){return"string"==typeof e}const nc=t.createContext(void 0),rc=xr;function oc(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,st.jsx)($r,{styles:r})}const ac=function({styles:e,themeId:t,defaultTheme:n={}}){const r=vr(n),o="function"==typeof e?e(t&&r[t]||r):e;return(0,st.jsx)(oc,{styles:o})},ic=function(e){return(0,st.jsx)(ac,x({},e,{defaultTheme:dr,themeId:Rn}))};function lc(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function cc(e){return Vr("MuiInputBase",e)}const uc=qr("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),sc=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],fc=mr("div",{name:"MuiInputBase",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${yo(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]}})((({theme:e,ownerState:t})=>x({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${uc.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&x({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),dc=mr("input",{name:"MuiInputBase",slot:"Input",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=x({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),o={opacity:"0 !important"},a=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return x({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${uc.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},[`&.${uc.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),pc=(0,st.jsx)(ic,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),hc=t.forwardRef((function(e,n){var r;const o=gr({props:e,name:"MuiInputBase"}),{"aria-describedby":a,autoComplete:i,autoFocus:l,className:c,components:u={},componentsProps:s={},defaultValue:f,disabled:d,disableInjectingGlobalStyles:p,endAdornment:h,fullWidth:m=!1,id:y,inputComponent:v="input",inputProps:g={},inputRef:b,maxRows:w,minRows:S,multiline:k=!1,name:C,onBlur:L,onChange:O,onClick:j,onFocus:N,onKeyDown:_,onKeyUp:T,placeholder:P,readOnly:I,renderSuffix:B,rows:z,slotProps:M={},slots:R={},startAdornment:F,type:$="text",value:D}=o,G=E(o,sc),U=null!=g.value?g.value:D,{current:H}=t.useRef(null!=U),W=t.useRef(),Y=t.useCallback((e=>{}),[]),V=wr(W,b,g.ref,Y),[q,K]=t.useState(!1),X=t.useContext(nc),Q=function({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}({props:o,muiFormControl:X,states:["color","disabled","error","hiddenLabel","size","required","filled"]});Q.focused=X?X.focused:q,t.useEffect((()=>{!X&&d&&q&&(K(!1),L&&L())}),[X,d,q,L]);const Z=X&&X.onFilled,J=X&&X.onEmpty,ee=t.useCallback((e=>{!function(e,t=!1){return e&&(lc(e.value)&&""!==e.value||t&&lc(e.defaultValue)&&""!==e.defaultValue)}(e)?J&&J():Z&&Z()}),[Z,J]);rc((()=>{H&&ee({value:U})}),[U,ee,H]),t.useEffect((()=>{ee(W.current)}),[]);let te=v,ne=g;k&&"input"===te&&(ne=x(z?{type:void 0,minRows:z,maxRows:z}:{type:void 0,maxRows:w,minRows:S},ne),te=ec),t.useEffect((()=>{X&&X.setAdornedStart(Boolean(F))}),[X,F]);const re=x({},o,{color:Q.color||"primary",disabled:Q.disabled,endAdornment:h,error:Q.error,focused:Q.focused,formControl:X,fullWidth:m,hiddenLabel:Q.hiddenLabel,multiline:k,size:Q.size,startAdornment:F,type:$}),oe=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:a,focused:i,formControl:l,fullWidth:c,hiddenLabel:u,multiline:s,readOnly:f,size:d,startAdornment:p,type:h}=e;return Hn({root:["root",`color${yo(n)}`,r&&"disabled",o&&"error",c&&"fullWidth",i&&"focused",l&&"formControl",d&&"medium"!==d&&`size${yo(d)}`,s&&"multiline",p&&"adornedStart",a&&"adornedEnd",u&&"hiddenLabel",f&&"readOnly"],input:["input",r&&"disabled","search"===h&&"inputTypeSearch",s&&"inputMultiline","small"===d&&"inputSizeSmall",u&&"inputHiddenLabel",p&&"inputAdornedStart",a&&"inputAdornedEnd",f&&"readOnly"]},cc,t)})(re),ae=R.root||u.Root||fc,ie=M.root||s.root||{},le=R.input||u.Input||dc;return ne=x({},ne,null!=(r=M.input)?r:s.input),(0,st.jsxs)(t.Fragment,{children:[!p&&pc,(0,st.jsxs)(ae,x({},ie,!tc(ae)&&{ownerState:x({},re,ie.ownerState)},{ref:n,onClick:e=>{W.current&&e.currentTarget===e.target&&W.current.focus(),j&&j(e)}},G,{className:Gn(oe.root,ie.className,c,I&&"MuiInputBase-readOnly"),children:[F,(0,st.jsx)(nc.Provider,{value:null,children:(0,st.jsx)(le,x({ownerState:re,"aria-invalid":Q.error,"aria-describedby":a,autoComplete:i,autoFocus:l,defaultValue:f,disabled:Q.disabled,id:y,onAnimationStart:e=>{ee("mui-auto-fill-cancel"===e.animationName?W.current:{value:"x"})},name:C,placeholder:P,readOnly:I,required:Q.required,rows:z,value:U,onKeyDown:_,onKeyUp:T,type:$},ne,!tc(le)&&{as:te,ownerState:x({},re,ne.ownerState)},{ref:V,className:Gn(oe.input,ne.className,I&&"MuiInputBase-readOnly"),onBlur:e=>{L&&L(e),g.onBlur&&g.onBlur(e),X&&X.onBlur?X.onBlur(e):K(!1)},onChange:(e,...t)=>{if(!H){const t=e.target||W.current;if(null==t)throw new Error(A(1));ee({value:t.value})}g.onChange&&g.onChange(e,...t),O&&O(e,...t)},onFocus:e=>{Q.disabled?e.stopPropagation():(N&&N(e),g.onFocus&&g.onFocus(e),X&&X.onFocus?X.onFocus(e):K(!0))}}))}),h,B?B(x({},Q,{startAdornment:F})):null]}))]})}));function mc(e){return Vr("MuiIconButton",e)}const yc=qr("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),vc=["edge","children","className","color","disabled","disableFocusRipple","size"],gc=mr(mo,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t[`color${yo(n.color)}`],n.edge&&t[`edge${yo(n.edge)}`],t[`size${yo(n.size)}`]]}})((({theme:e,ownerState:t})=>x({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:Pe(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>{var n;const r=null==(n=(e.vars||e).palette)?void 0:n[t.color];return x({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&x({color:null==r?void 0:r.main},!t.disableRipple&&{"&:hover":x({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Pe(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${yc.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),bc=t.forwardRef((function(e,t){const n=gr({props:e,name:"MuiIconButton"}),{edge:r=!1,children:o,className:a,color:i="default",disabled:l=!1,disableFocusRipple:c=!1,size:u="medium"}=n,s=E(n,vc),f=x({},n,{edge:r,color:i,disabled:l,disableFocusRipple:c,size:u}),d=(e=>{const{classes:t,disabled:n,color:r,edge:o,size:a}=e;return Hn({root:["root",n&&"disabled","default"!==r&&`color${yo(r)}`,o&&`edge${yo(o)}`,`size${yo(a)}`]},mc,t)})(f);return(0,st.jsx)(gc,x({className:Gn(d.root,a),centerRipple:!0,focusRipple:!c,disabled:l,ref:t,ownerState:f},s,{children:o}))})),wc=t.createContext({searchStringValue:"",setSearchStringFn:function(){}}),xc={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M824.2 699.9a301.55 301.55 0 00-86.4-60.4C783.1 602.8 812 546.8 812 484c0-110.8-92.4-201.7-203.2-200-109.1 1.7-197 90.6-197 200 0 62.8 29 118.8 74.2 155.5a300.95 300.95 0 00-86.4 60.4C345 754.6 314 826.8 312 903.8a8 8 0 008 8.2h56c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5A226.62 226.62 0 01612 684c60.9 0 118.2 23.7 161.3 66.8C814.5 792 838 846.3 840 904.3c.1 4.3 3.7 7.7 8 7.7h56a8 8 0 008-8.2c-2-77-33-149.2-87.8-203.9zM612 612c-34.2 0-66.4-13.3-90.5-37.5a126.86 126.86 0 01-37.5-91.8c.3-32.8 13.4-64.5 36.3-88 24-24.6 56.1-38.3 90.4-38.7 33.9-.3 66.8 12.9 91 36.6 24.8 24.3 38.4 56.8 38.4 91.4 0 34.2-13.3 66.3-37.5 90.5A127.3 127.3 0 01612 612zM361.5 510.4c-.9-8.7-1.4-17.5-1.4-26.4 0-15.9 1.5-31.4 4.3-46.5.7-3.6-1.2-7.3-4.5-8.8-13.6-6.1-26.1-14.5-36.9-25.1a127.54 127.54 0 01-38.7-95.4c.9-32.1 13.8-62.6 36.3-85.6 24.7-25.3 57.9-39.1 93.2-38.7 31.9.3 62.7 12.6 86 34.4 7.9 7.4 14.7 15.6 20.4 24.4 2 3.1 5.9 4.4 9.3 3.2 17.6-6.1 36.2-10.4 55.3-12.4 5.6-.6 8.8-6.6 6.3-11.6-32.5-64.3-98.9-108.7-175.7-109.9-110.9-1.7-203.3 89.2-203.3 199.9 0 62.8 28.9 118.8 74.2 155.5-31.8 14.7-61.1 35-86.5 60.4-54.8 54.7-85.8 126.9-87.8 204a8 8 0 008 8.2h56.1c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5 29.4-29.4 65.4-49.8 104.7-59.7 3.9-1 6.5-4.7 6-8.7z"}}]},name:"team",theme:"outlined"};function Ec(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ac(e,t){if(e){if("string"==typeof e)return Ec(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ec(e,t):void 0}}function Sc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||Ac(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kc(e){return kc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kc(e)}function Cc(e){var t=function(e,t){if("object"!==kc(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==kc(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===kc(t)?t:String(t)}function Lc(e,t,n){return(t=Cc(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Oc(e,t){if(null==e)return{};var n,r,o=E(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var jc=o(184),Nc=o.n(jc);function _c(e,t){(function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var n=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=360===t?e:Math.min(t,Math.max(0,parseFloat(e))),n&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:e=360===t?(e<0?e%t+t:e%t)/parseFloat(String(t)):e%t/parseFloat(String(t))}function Tc(e){return Math.min(1,Math.max(0,e))}function Pc(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function Ic(e){return e<=1?"".concat(100*Number(e),"%"):e}function Bc(e){return 1===e.length?"0"+e:String(e)}function zc(e,t,n){e=_c(e,255),t=_c(t,255),n=_c(n,255);var r=Math.max(e,t,n),o=Math.min(e,t,n),a=0,i=0,l=(r+o)/2;if(r===o)i=0,a=0;else{var c=r-o;switch(i=l>.5?c/(2-r-o):c/(r+o),r){case e:a=(t-n)/c+(t<n?6:0);break;case t:a=(n-e)/c+2;break;case n:a=(e-t)/c+4}a/=6}return{h:a,s:i,l}}function Mc(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*n*(t-e):n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function Rc(e,t,n){e=_c(e,255),t=_c(t,255),n=_c(n,255);var r=Math.max(e,t,n),o=Math.min(e,t,n),a=0,i=r,l=r-o,c=0===r?0:l/r;if(r===o)a=0;else{switch(r){case e:a=(t-n)/l+(t<n?6:0);break;case t:a=(n-e)/l+2;break;case n:a=(e-t)/l+4}a/=6}return{h:a,s:c,v:i}}function Fc(e,t,n,r){var o=[Bc(Math.round(e).toString(16)),Bc(Math.round(t).toString(16)),Bc(Math.round(n).toString(16))];return r&&o[0].startsWith(o[0].charAt(1))&&o[1].startsWith(o[1].charAt(1))&&o[2].startsWith(o[2].charAt(1))?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0):o.join("")}function $c(e){return Dc(e)/255}function Dc(e){return parseInt(e,16)}var Gc={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function Uc(e){var t={r:0,g:0,b:0},n=1,r=null,o=null,a=null,i=!1,l=!1;return"string"==typeof e&&(e=function(e){if(0===(e=e.trim().toLowerCase()).length)return!1;var t=!1;if(Gc[e])e=Gc[e],t=!0;else if("transparent"===e)return{r:0,g:0,b:0,a:0,format:"name"};var n=Vc.rgb.exec(e);return n?{r:n[1],g:n[2],b:n[3]}:(n=Vc.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=Vc.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=Vc.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=Vc.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=Vc.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=Vc.hex8.exec(e))?{r:Dc(n[1]),g:Dc(n[2]),b:Dc(n[3]),a:$c(n[4]),format:t?"name":"hex8"}:(n=Vc.hex6.exec(e))?{r:Dc(n[1]),g:Dc(n[2]),b:Dc(n[3]),format:t?"name":"hex"}:(n=Vc.hex4.exec(e))?{r:Dc(n[1]+n[1]),g:Dc(n[2]+n[2]),b:Dc(n[3]+n[3]),a:$c(n[4]+n[4]),format:t?"name":"hex8"}:!!(n=Vc.hex3.exec(e))&&{r:Dc(n[1]+n[1]),g:Dc(n[2]+n[2]),b:Dc(n[3]+n[3]),format:t?"name":"hex"}}(e)),"object"==typeof e&&(qc(e.r)&&qc(e.g)&&qc(e.b)?(t=function(e,t,n){return{r:255*_c(e,255),g:255*_c(t,255),b:255*_c(n,255)}}(e.r,e.g,e.b),i=!0,l="%"===String(e.r).substr(-1)?"prgb":"rgb"):qc(e.h)&&qc(e.s)&&qc(e.v)?(r=Ic(e.s),o=Ic(e.v),t=function(e,t,n){e=6*_c(e,360),t=_c(t,100),n=_c(n,100);var r=Math.floor(e),o=e-r,a=n*(1-t),i=n*(1-o*t),l=n*(1-(1-o)*t),c=r%6;return{r:255*[n,i,a,a,l,n][c],g:255*[l,n,n,i,a,a][c],b:255*[a,a,l,n,n,i][c]}}(e.h,r,o),i=!0,l="hsv"):qc(e.h)&&qc(e.s)&&qc(e.l)&&(r=Ic(e.s),a=Ic(e.l),t=function(e,t,n){var r,o,a;if(e=_c(e,360),t=_c(t,100),n=_c(n,100),0===t)o=n,a=n,r=n;else{var i=n<.5?n*(1+t):n+t-n*t,l=2*n-i;r=Mc(l,i,e+1/3),o=Mc(l,i,e),a=Mc(l,i,e-1/3)}return{r:255*r,g:255*o,b:255*a}}(e.h,r,a),i=!0,l="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(n=e.a)),n=Pc(n),{ok:i,format:e.format||l,r:Math.min(255,Math.max(t.r,0)),g:Math.min(255,Math.max(t.g,0)),b:Math.min(255,Math.max(t.b,0)),a:n}}var Hc="(?:".concat("[-\\+]?\\d*\\.\\d+%?",")|(?:").concat("[-\\+]?\\d+%?",")"),Wc="[\\s|\\(]+(".concat(Hc,")[,|\\s]+(").concat(Hc,")[,|\\s]+(").concat(Hc,")\\s*\\)?"),Yc="[\\s|\\(]+(".concat(Hc,")[,|\\s]+(").concat(Hc,")[,|\\s]+(").concat(Hc,")[,|\\s]+(").concat(Hc,")\\s*\\)?"),Vc={CSS_UNIT:new RegExp(Hc),rgb:new RegExp("rgb"+Wc),rgba:new RegExp("rgba"+Yc),hsl:new RegExp("hsl"+Wc),hsla:new RegExp("hsla"+Yc),hsv:new RegExp("hsv"+Wc),hsva:new RegExp("hsva"+Yc),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function qc(e){return Boolean(Vc.CSS_UNIT.exec(String(e)))}var Kc=2,Xc=.16,Qc=.05,Zc=.05,Jc=.15,eu=5,tu=4,nu=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function ru(e){var t=Rc(e.r,e.g,e.b);return{h:360*t.h,s:t.s,v:t.v}}function ou(e){var t=e.r,n=e.g,r=e.b;return"#".concat(Fc(t,n,r,!1))}function au(e,t,n){var r;return(r=Math.round(e.h)>=60&&Math.round(e.h)<=240?n?Math.round(e.h)-Kc*t:Math.round(e.h)+Kc*t:n?Math.round(e.h)+Kc*t:Math.round(e.h)-Kc*t)<0?r+=360:r>=360&&(r-=360),r}function iu(e,t,n){return 0===e.h&&0===e.s?e.s:((r=n?e.s-Xc*t:t===tu?e.s+Xc:e.s+Qc*t)>1&&(r=1),n&&t===eu&&r>.1&&(r=.1),r<.06&&(r=.06),Number(r.toFixed(2)));var r}function lu(e,t,n){var r;return(r=n?e.v+Zc*t:e.v-Jc*t)>1&&(r=1),Number(r.toFixed(2))}function cu(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[],r=Uc(e),o=eu;o>0;o-=1){var a=ru(r),i=ou(Uc({h:au(a,o,!0),s:iu(a,o,!0),v:lu(a,o,!0)}));n.push(i)}n.push(ou(r));for(var l=1;l<=tu;l+=1){var c=ru(r),u=ou(Uc({h:au(c,l),s:iu(c,l),v:lu(c,l)}));n.push(u)}return"dark"===t.theme?nu.map((function(e){var r,o,a,i=e.index,l=e.opacity;return ou((r=Uc(t.backgroundColor||"#141414"),a=100*l/100,{r:((o=Uc(n[i])).r-r.r)*a+r.r,g:(o.g-r.g)*a+r.g,b:(o.b-r.b)*a+r.b}))})):n}var uu={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1677FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},su={},fu={};Object.keys(uu).forEach((function(e){su[e]=cu(uu[e]),su[e].primary=su[e][5],fu[e]=cu(uu[e],{theme:"dark",backgroundColor:"#141414"}),fu[e].primary=fu[e][5]})),su.red,su.volcano,su.gold,su.orange,su.yellow,su.lime,su.green,su.cyan;var du=su.blue;su.geekblue,su.purple,su.magenta,su.grey,su.grey;const pu=(0,t.createContext)({});function hu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hu(Object(n),!0).forEach((function(t){Lc(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function yu(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}var vu="data-rc-order",gu="data-rc-priority",bu="rc-util-key",wu=new Map;function xu(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).mark;return e?e.startsWith("data-")?e:"data-".concat(e):bu}function Eu(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function Au(e){return Array.from((wu.get(e)||e).children).filter((function(e){return"STYLE"===e.tagName}))}function Su(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!yu())return null;var n=t.csp,r=t.prepend,o=t.priority,a=void 0===o?0:o,i=function(e){return"queue"===e?"prependQueue":e?"prepend":"append"}(r),l="prependQueue"===i,c=document.createElement("style");c.setAttribute(vu,i),l&&a&&c.setAttribute(gu,"".concat(a)),null!=n&&n.nonce&&(c.nonce=null==n?void 0:n.nonce),c.innerHTML=e;var u=Eu(t),s=u.firstChild;if(r){if(l){var f=Au(u).filter((function(e){if(!["prepend","prependQueue"].includes(e.getAttribute(vu)))return!1;var t=Number(e.getAttribute(gu)||0);return a>=t}));if(f.length)return u.insertBefore(c,f[f.length-1].nextSibling),c}u.insertBefore(c,s)}else u.appendChild(c);return c}function ku(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Au(Eu(t)).find((function(n){return n.getAttribute(xu(t))===e}))}function Cu(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=ku(e,t);n&&Eu(t).removeChild(n)}function Lu(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){var n=wu.get(e);if(!n||!function(e,t){if(!e)return!1;if(e.contains)return e.contains(t);for(var n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}(document,n)){var r=Su("",t),o=r.parentNode;wu.set(e,o),e.removeChild(r)}}(Eu(n),n);var r,o,a,i=ku(t,n);if(i)return null!==(r=n.csp)&&void 0!==r&&r.nonce&&i.nonce!==(null===(o=n.csp)||void 0===o?void 0:o.nonce)&&(i.nonce=null===(a=n.csp)||void 0===a?void 0:a.nonce),i.innerHTML!==e&&(i.innerHTML=e),i;var l=Su(e,n);return l.setAttribute(xu(n),t),l}function Ou(e){var t;return null==e||null===(t=e.getRootNode)||void 0===t?void 0:t.call(e)}var ju={},Nu=[];function _u(e,t){}function Tu(e,t){}function Pu(e,t,n){t||ju[n]||(e(!1,n),ju[n]=!0)}function Iu(e,t){Pu(_u,e,t)}Iu.preMessage=function(e){Nu.push(e)},Iu.resetWarned=function(){ju={}},Iu.noteOnce=function(e,t){Pu(Tu,e,t)};const Bu=Iu;function zu(e){return"object"===kc(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===kc(e.icon)||"function"==typeof e.icon)}function Mu(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){var r,o=e[n];return"class"===n?(t.className=o,delete t.class):(delete t[n],t[(r=n,r.replace(/-(.)/g,(function(e,t){return t.toUpperCase()})))]=o),t}),{})}function Ru(e,n,r){return r?t.createElement(e.tag,mu(mu({key:n},Mu(e.attrs)),r),(e.children||[]).map((function(t,r){return Ru(t,"".concat(n,"-").concat(e.tag,"-").concat(r))}))):t.createElement(e.tag,mu({key:n},Mu(e.attrs)),(e.children||[]).map((function(t,r){return Ru(t,"".concat(n,"-").concat(e.tag,"-").concat(r))})))}function Fu(e){return cu(e)[0]}function $u(e){return e?Array.isArray(e)?e:[e]:[]}var Du=["icon","className","onClick","style","primaryColor","secondaryColor"],Gu={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1},Uu=function(e){var n,r,o,a,i,l,c,u=e.icon,s=e.className,f=e.onClick,d=e.style,p=e.primaryColor,h=e.secondaryColor,m=Oc(e,Du),y=t.useRef(),v=Gu;if(p&&(v={primaryColor:p,secondaryColor:h||Fu(p)}),n=y,r=(0,t.useContext)(pu),o=r.csp,a=r.prefixCls,i="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",a&&(i=i.replace(/anticon/g,a)),(0,t.useEffect)((function(){var e,t=function(e){return Ou(e)instanceof ShadowRoot}(e=n.current)?Ou(e):null;Lu(i,"@ant-design-icons",{prepend:!0,csp:o,attachTo:t})}),[]),l=zu(u),c="icon should be icon definiton, but got ".concat(u),Bu(l,"[@ant-design/icons] ".concat(c)),!zu(u))return null;var g=u;return g&&"function"==typeof g.icon&&(g=mu(mu({},g),{},{icon:g.icon(v.primaryColor,v.secondaryColor)})),Ru(g.icon,"svg-".concat(g.name),mu(mu({className:s,onClick:f,style:d,"data-icon":g.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},m),{},{ref:y}))};Uu.displayName="IconReact",Uu.getTwoToneColors=function(){return mu({},Gu)},Uu.setTwoToneColors=function(e){var t=e.primaryColor,n=e.secondaryColor;Gu.primaryColor=t,Gu.secondaryColor=n||Fu(t),Gu.calculated=!!n};const Hu=Uu;function Wu(e){var t=Sc($u(e),2),n=t[0],r=t[1];return Hu.setTwoToneColors({primaryColor:n,secondaryColor:r})}var Yu=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];Wu(du.primary);var Vu=t.forwardRef((function(e,n){var r,o=e.className,a=e.icon,i=e.spin,l=e.rotate,c=e.tabIndex,u=e.onClick,s=e.twoToneColor,f=Oc(e,Yu),d=t.useContext(pu),p=d.prefixCls,h=void 0===p?"anticon":p,m=d.rootClassName,y=Nc()(m,h,(Lc(r={},"".concat(h,"-").concat(a.name),!!a.name),Lc(r,"".concat(h,"-spin"),!!i||"loading"===a.name),r),o),v=c;void 0===v&&u&&(v=-1);var g=l?{msTransform:"rotate(".concat(l,"deg)"),transform:"rotate(".concat(l,"deg)")}:void 0,b=Sc($u(s),2),w=b[0],E=b[1];return t.createElement("span",x({role:"img","aria-label":a.name},f,{ref:n,tabIndex:v,onClick:u,className:y}),t.createElement(Hu,{icon:a,primaryColor:w,secondaryColor:E,style:g}))}));Vu.displayName="AntdIcon",Vu.getTwoToneColor=function(){var e=Hu.getTwoToneColors();return e.calculated?[e.primaryColor,e.secondaryColor]:e.primaryColor},Vu.setTwoToneColor=Wu;const qu=Vu;var Ku=function(e,n){return t.createElement(qu,x({},e,{ref:n,icon:xc}))};const Xu=t.forwardRef(Ku),Qu=function(e){var n=(0,t.useContext)(wc),r=ba(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga poznatih",o)};return t.createElement(ql,{className:"paper",component:"form"},t.createElement(hc,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(bc,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Xu,null)))},Zu={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm5.6-532.7c53 0 89 33.8 93 83.4.3 4.2 3.8 7.4 8 7.4h56.7c2.6 0 4.7-2.1 4.7-4.7 0-86.7-68.4-147.4-162.7-147.4C407.4 290 344 364.2 344 486.8v52.3C344 660.8 407.4 734 517.3 734c94 0 162.7-58.8 162.7-141.4 0-2.6-2.1-4.7-4.7-4.7h-56.8c-4.2 0-7.6 3.2-8 7.3-4.2 46.1-40.1 77.8-93 77.8-65.3 0-102.1-47.9-102.1-133.6v-52.6c.1-87 37-135.5 102.2-135.5z"}}]},name:"copyright",theme:"outlined"};var Ju=function(e,n){return t.createElement(qu,x({},e,{ref:n,icon:Zu}))};const es=t.forwardRef(Ju),ts=function(e){var n=(0,t.useContext)(wc),r=ba(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("logo pretraga",o)};return t.createElement(ql,{className:"paper",component:"form"},t.createElement(hc,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(bc,{type:"button",onClick:a,"aria-label":"search"},t.createElement(es,null)))},ns={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"defs",attrs:{},children:[{tag:"style",attrs:{}}]},{tag:"path",attrs:{d:"M140 188h584v164h76V144c0-17.7-14.3-32-32-32H96c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h544v-76H140V188z"}},{tag:"path",attrs:{d:"M414.3 256h-60.6c-3.4 0-6.4 2.2-7.6 5.4L219 629.4c-.3.8-.4 1.7-.4 2.6 0 4.4 3.6 8 8 8h55.1c3.4 0 6.4-2.2 7.6-5.4L322 540h196.2L422 261.4a8.42 8.42 0 00-7.7-5.4zm12.4 228h-85.5L384 360.2 426.7 484zM936 528H800v-93c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v93H592c-13.3 0-24 10.7-24 24v176c0 13.3 10.7 24 24 24h136v152c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V752h136c13.3 0 24-10.7 24-24V552c0-13.3-10.7-24-24-24zM728 680h-88v-80h88v80zm160 0h-88v-80h88v80z"}}]},name:"translation",theme:"outlined"};var rs=function(e,n){return t.createElement(qu,x({},e,{ref:n,icon:ns}))};const os=t.forwardRef(rs),as=function(e){var n=(0,t.useContext)(wc),r=ba(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("dictionary pretraga",o)};return t.createElement(ql,{className:"paper",component:"form"},t.createElement(hc,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(bc,{type:"button",onClick:a,"aria-label":"search"},t.createElement(os,null)))},is={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M536.1 273H488c-4.4 0-8 3.6-8 8v275.3c0 2.6 1.2 5 3.3 6.5l165.3 120.7c3.6 2.6 8.6 1.9 11.2-1.7l28.6-39c2.7-3.7 1.9-8.7-1.7-11.2L544.1 528.5V281c0-4.4-3.6-8-8-8zm219.8 75.2l156.8 38.3c5 1.2 9.9-2.6 9.9-7.7l.8-161.5c0-6.7-7.7-10.5-12.9-6.3L752.9 334.1a8 8 0 003 14.1zm167.7 301.1l-56.7-19.5a8 8 0 00-10.1 4.8c-1.9 5.1-3.9 10.1-6 15.1-17.8 42.1-43.3 80-75.9 112.5a353 353 0 01-112.5 75.9 352.18 352.18 0 01-137.7 27.8c-47.8 0-94.1-9.3-137.7-27.8a353 353 0 01-112.5-75.9c-32.5-32.5-58-70.4-75.9-112.5A353.44 353.44 0 01171 512c0-47.8 9.3-94.2 27.8-137.8 17.8-42.1 43.3-80 75.9-112.5a353 353 0 01112.5-75.9C430.6 167.3 477 158 524.8 158s94.1 9.3 137.7 27.8A353 353 0 01775 261.7c10.2 10.3 19.8 21 28.6 32.3l59.8-46.8C784.7 146.6 662.2 81.9 524.6 82 285 82.1 92.6 276.7 95 516.4 97.4 751.9 288.9 942 524.8 942c185.5 0 343.5-117.6 403.7-282.3 1.5-4.2-.7-8.9-4.9-10.4z"}}]},name:"history",theme:"outlined"};var ls=function(e,n){return t.createElement(qu,x({},e,{ref:n,icon:is}))};const cs=t.forwardRef(ls),us=function(e){var n=(0,t.useContext)(wc),r=ba(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("SearchHistory pretraga",o)};return t.createElement(ql,{className:"paper",component:"form"},t.createElement(hc,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(bc,{type:"button",onClick:a,"aria-label":"search"},t.createElement(cs,null)))},ss={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M928 161H699.2c-49.1 0-97.1 14.1-138.4 40.7L512 233l-48.8-31.3A255.2 255.2 0 00324.8 161H96c-17.7 0-32 14.3-32 32v568c0 17.7 14.3 32 32 32h228.8c49.1 0 97.1 14.1 138.4 40.7l44.4 28.6c1.3.8 2.8 1.3 4.3 1.3s3-.4 4.3-1.3l44.4-28.6C602 807.1 650.1 793 699.2 793H928c17.7 0 32-14.3 32-32V193c0-17.7-14.3-32-32-32zM324.8 721H136V233h188.8c35.4 0 69.8 10.1 99.5 29.2l48.8 31.3 6.9 4.5v462c-47.6-25.6-100.8-39-155.2-39zm563.2 0H699.2c-54.4 0-107.6 13.4-155.2 39V298l6.9-4.5 48.8-31.3c29.7-19.1 64.1-29.2 99.5-29.2H888v488zM396.9 361H211.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5zm223.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c0-4.1-3.2-7.5-7.1-7.5H627.1c-3.9 0-7.1 3.4-7.1 7.5zM396.9 501H211.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5zm416 0H627.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5z"}}]},name:"read",theme:"outlined"};var fs=function(e,n){return t.createElement(qu,x({},e,{ref:n,icon:ss}))};const ds=t.forwardRef(fs),ps=function(e){var n=(0,t.useContext)(wc),r=ba(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("SearchHistoryEvents pretraga",o)};return t.createElement(ql,{className:"paper",component:"form"},t.createElement(hc,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(bc,{type:"button",onClick:a,"aria-label":"search"},t.createElement(ds,null)))},hs={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M858.5 763.6a374 374 0 00-80.6-119.5 375.63 375.63 0 00-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 00-80.6 119.5A371.7 371.7 0 00136 901.8a8 8 0 008 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 008-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z"}}]},name:"user",theme:"outlined"};var ms=function(e,n){return t.createElement(qu,x({},e,{ref:n,icon:hs}))};const ys=t.forwardRef(ms),vs=function(e){var n=(0,t.useContext)(wc),r=ba(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga istoriskih licnosti",o)};return t.createElement(ql,{className:"paper",component:"form"},t.createElement(hc,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(bc,{type:"button",onClick:a,"aria-label":"search"},t.createElement(ys,null)))},gs={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z"}}]},name:"question-circle",theme:"outlined"};var bs=function(e,n){return t.createElement(qu,x({},e,{ref:n,icon:gs}))};const ws=t.forwardRef(bs),xs=function(e){var n=(0,t.useContext)(wc),r=ba(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga saveta",o)};return t.createElement(ql,{className:"paper",component:"form",se:{p:"2px 4px",display:"flex",alignItems:"center",width:"40rem",fontSize:"28px",backgroundColor:"red"}},t.createElement(hc,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(bc,{type:"button",onClick:a,sx:{p:"10px"},"aria-label":"search"},t.createElement(ws,null)))},Es=function(){return t.createElement("div",{className:"place"},t.createElement(Qu,{placeholder:"Search Celebrity",linkTo:"/poznati"}),t.createElement(ts,{placeholder:"Search Logo",linkTo:"/logo"}),t.createElement(as,{placeholder:"Search Word",linkTo:"/dictionary"}),t.createElement(xs,{placeholder:"Search Advice",linkTo:"/advice"}),t.createElement("h2",null,"Search History"),t.createElement(us,{placeholder:"Year",linkTo:"/history"}),t.createElement(ps,{placeholder:"Events",linkTo:"/historyEvents"}),t.createElement(vs,{placeholder:"Persons",linkTo:"/historyPerson"}))};var As={cm:!0,mm:!0,in:!0,px:!0,pt:!0,pc:!0,em:!0,ex:!0,ch:!0,rem:!0,vw:!0,vh:!0,vmin:!0,vmax:!0,"%":!0};function Ss(e){var t=function(e){if("number"==typeof e)return{value:e,unit:"px"};var t,n=(e.match(/^[0-9.]*/)||"").toString();t=n.includes(".")?parseFloat(n):parseInt(n,10);var r=(e.match(/[^0-9]*$/)||"").toString();return As[r]?{value:t,unit:r}:(console.warn("React Spinners: ".concat(e," is not a valid css value. Defaulting to ").concat(t,"px.")),{value:t,unit:"px"})}(e);return"".concat(t.value).concat(t.unit)}var ks=function(e,t,n){var r="react-spinners-".concat(e,"-").concat(n);if("undefined"==typeof window||!window.document)return r;var o=document.createElement("style");document.head.appendChild(o);var a=o.sheet,i="\n    @keyframes ".concat(r," {\n      ").concat(t,"\n    }\n  ");return a&&a.insertRule(i,0),r},Cs=function(){return Cs=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Cs.apply(this,arguments)},Ls=[ks("PuffLoader","0% {transform: scale(0)} 100% {transform: scale(1.0)}","puff-1"),ks("PuffLoader","0% {opacity: 1} 100% {opacity: 0}","puff-2")];const Os=function(e){var n=e.loading,r=void 0===n||n,o=e.color,a=void 0===o?"#000000":o,i=e.speedMultiplier,l=void 0===i?1:i,c=e.cssOverride,u=void 0===c?{}:c,s=e.size,f=void 0===s?60:s,d=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["loading","color","speedMultiplier","cssOverride","size"]),p=Cs({display:"inherit",position:"relative",width:Ss(f),height:Ss(f)},u),h=function(e){return{position:"absolute",height:Ss(f),width:Ss(f),border:"thick solid ".concat(a),borderRadius:"50%",opacity:"1",top:"0",left:"0",animationFillMode:"both",animation:"".concat(Ls[0],", ").concat(Ls[1]),animationDuration:"".concat(2/l,"s"),animationIterationCount:"infinite",animationTimingFunction:"cubic-bezier(0.165, 0.84, 0.44, 1), cubic-bezier(0.3, 0.61, 0.355, 1)",animationDelay:1===e?"-1s":"0s"}};return r?t.createElement("span",Cs({style:p},d),t.createElement("span",{style:h(1)}),t.createElement("span",{style:h(2)})):null},js=function(){return t.createElement("div",{className:"loader"},t.createElement(Os,{size:"170px",color:"dodgerblue",speedMultiplier:"0.3"}))};function Ns(e){return Ns="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ns(e)}function _s(){_s=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Ns(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ns(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Ts(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Ps(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Is(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Is(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Is(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Bs=function(){var e=Ps((0,t.useState)(null),2),n=(e[0],e[1]),r=Ps((0,t.useState)([]),2),o=r[0],a=r[1],i=Ps((0,t.useState)([]),2),l=i[0],c=i[1],u=Ps((0,t.useState)(!0),2),s=u[0],f=u[1],d=(0,t.useContext)(wc).searchStringValue;(0,t.useEffect)((function(){p(d)}),[d]),console.log("iz resultLogo searchStringValue:",d);var p=function(){var e,t=(e=_s().mark((function e(t){var r,o,i;return _s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/logo?name=".concat(t),e.prev=1,e.next=4,zl.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat Logoa",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ts(a,r,o,i,l,"next",e)}function l(e){Ts(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(js,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(Es,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Es,null))),t.createElement("tr",null,t.createElement("th",{className:"history",colSpan:2},"Logo ",d)),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of Logo:",l))),o.map((function(e){return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.ticker)),t.createElement("tr",null,t.createElement("td",null,t.createElement("img",{src:e.image}))),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(Va,null))};function zs(e){return zs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zs(e)}function Ms(){Ms=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==zs(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(zs(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Rs(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Fs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return $s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$s(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ds=function(){var e=Fs((0,t.useState)(null),2),n=(e[0],e[1]),r=Fs((0,t.useState)([]),2),o=r[0],a=r[1],i=Fs((0,t.useState)([]),2),l=i[0],c=i[1],u=Fs((0,t.useState)(!0),2),s=u[0],f=u[1],d=(0,t.useContext)(wc).searchStringValue;(0,t.useEffect)((function(){p(d)}),[d]),console.log("iz resultDictionary searchStringValue:",d);var p=function(){var e,t=(e=Ms().mark((function e(t){var r,o,i;return Ms().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/dictionary?word=".concat(t),e.prev=1,e.next=4,zl.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat recnika",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Rs(a,r,o,i,l,"next",e)}function l(e){Rs(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(js,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(Es,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Es,null))),t.createElement("tr",null,t.createElement("th",{className:"history"},"Word ",d))),t.createElement("tbody",{key:o.word},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},o.word)),t.createElement("tr",null,t.createElement("td",{className:"dictionary"},o.definition)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))))};function Gs(e){return Gs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gs(e)}function Us(){Us=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Gs(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Gs(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Hs(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Ws(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ys(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ys(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ys(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Vs=function(){var e=Ws((0,t.useState)(null),2),n=(e[0],e[1]),r=Ws((0,t.useState)([]),2),o=r[0],a=r[1],i=Ws((0,t.useState)([]),2),l=i[0],c=i[1],u=Ws((0,t.useState)(!0),2),s=u[0],f=u[1],d=(0,t.useContext)(wc).searchStringValue;(0,t.useEffect)((function(){p(d)}),[d]),console.log("iz resultCelebs searchStringValue:",d);var p=function(){var e,t=(e=Us().mark((function e(t){var r,o,i;return Us().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/celebrity?name=".concat(t),e.prev=1,e.next=4,zl.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat poznatih",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Hs(a,r,o,i,l,"next",e)}function l(e){Hs(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(js,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(Es,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Es,null))),t.createElement("tr",null,t.createElement("th",{className:"history",colSpan:2},"Celebrity ",d)),t.createElement("tr",null,t.createElement("th",{className:"results",colSpan:2},"Number of Celebrity: ",l))),o.map((function(e){var n,r,o,a,i,l,c,u,s,f,d,p,h;return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"navod"},"Name:"),t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Gender:"),t.createElement("td",{className:"nameComm"},e.gender)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Age:"),t.createElement("td",{className:"nameComm"},e.age)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Occupation:"),t.createElement("td",{className:"nameComm"},t.createElement("ul",null,t.createElement("li",null,null===(n=e.occupation)||void 0===n?void 0:n[0]),t.createElement("li",null,null===(r=e.occupation)||void 0===r?void 0:r[1]),t.createElement("li",null,null===(o=e.occupation)||void 0===o?void 0:o[2]),t.createElement("li",null,null===(a=e.occupation)||void 0===a?void 0:a[3]),t.createElement("li",null,null===(i=e.occupation)||void 0===i?void 0:i[4]),t.createElement("li",null,null===(l=e.occupation)||void 0===l?void 0:l[5]),t.createElement("li",null,null===(c=e.occupation)||void 0===c?void 0:c[6]),t.createElement("li",null,null===(u=e.occupation)||void 0===u?void 0:u[7]),t.createElement("li",null,null===(s=e.occupation)||void 0===s?void 0:s[8]),t.createElement("li",null,null===(f=e.occupation)||void 0===f?void 0:f[9]),t.createElement("li",null,null===(d=e.occupation)||void 0===d?void 0:d[10]),t.createElement("li",null,null===(p=e.occupation)||void 0===p?void 0:p[11]),t.createElement("li",null,null===(h=e.occupation)||void 0===h?void 0:h[12])))),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Birthday:"),t.createElement("td",{className:"nameComm"},e.birthday)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Death:"),t.createElement("td",{className:"nameComm"},e.death)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Nationality:"),t.createElement("td",{className:"celebrity"},e.nationality)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Height:"),t.createElement("td",{className:"nameComm"},e.height)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Net worth:"),t.createElement("td",{className:"networth"},e.net_worth)),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))))}))))};function qs(e){return qs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},qs(e)}function Ks(){Ks=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==qs(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(qs(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Xs(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Qs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Zs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Zs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Zs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Js=function(){var e=Qs((0,t.useState)(null),2),n=(e[0],e[1]),r=Qs((0,t.useState)([]),2),o=r[0],a=r[1],i=Qs((0,t.useState)([]),2),l=i[0],c=i[1],u=Qs((0,t.useState)(!0),2),s=u[0],f=u[1],d=(0,t.useContext)(wc).searchStringValue;(0,t.useEffect)((function(){p(d)}),[d]),console.log("iz resulthistory searchStringValue:",d);var p=function(){var e,t=(e=Ks().mark((function e(t){var r,o,i;return Ks().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/historicalevents?year=".concat(t),e.prev=1,e.next=4,zl.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat recnika",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Xs(a,r,o,i,l,"next",e)}function l(e){Xs(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(js,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(Es,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement(Es,null))),t.createElement("tr",null,t.createElement("th",{className:"history"},"Historical Year ",d)),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of History Events: ",l))),o.map((function(e){return t.createElement("tbody",{key:o.word},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.day+" "+e.month+" "+e.year)),t.createElement("tr",null,t.createElement("td",{className:"dictionary"},e.event)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(Va,null))};function ef(e){return ef="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ef(e)}function tf(){tf=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==ef(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(ef(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function nf(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function rf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return of(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?of(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function of(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const af=function(){var e=rf((0,t.useState)(null),2),n=(e[0],e[1]),r=rf((0,t.useState)([]),2),o=r[0],a=r[1],i=rf((0,t.useState)([]),2),l=i[0],c=i[1],u=rf((0,t.useState)(!0),2),s=u[0],f=u[1],d=(0,t.useContext)(wc).searchStringValue;(0,t.useEffect)((function(){p(d)}),[d]),console.log("iz resulthistoryEvents searchStringValue:",d);var p=function(){var e,t=(e=tf().mark((function e(t){var r,o,i;return tf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/historicalevents?text=".concat(t),e.prev=1,e.next=4,zl.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat recnika",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){nf(a,r,o,i,l,"next",e)}function l(e){nf(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(js,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(Es,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement(Es,null))),t.createElement("tr",null,t.createElement("th",{className:"history"},"Historical Event ",d)),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of Event:",l))),o.map((function(e){return t.createElement("tbody",{key:o.word},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.day+" "+e.month+" "+e.year)),t.createElement("tr",null,t.createElement("td",{className:"dictionary"},e.event)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(Va,null))};function lf(e){return lf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},lf(e)}function cf(){cf=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==lf(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(lf(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function uf(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function sf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ff(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ff(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ff(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const df=function(){var e=sf((0,t.useState)(null),2),n=(e[0],e[1]),r=sf((0,t.useState)([]),2),o=r[0],a=r[1],i=sf((0,t.useState)([]),2),l=i[0],c=i[1],u=sf((0,t.useState)(!0),2),s=u[0],f=u[1],d=ba(),p=(0,t.useContext)(wc).searchStringValue;(0,t.useEffect)((function(){h(p)}),[p]),console.log("iz resultPerson searchStringValue:",p);var h=function(){var e,t=(e=cf().mark((function e(t){var r,o,i;return cf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/historicalfigures?name=".concat(t),e.prev=1,e.next=4,zl.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat poznatih",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){uf(a,r,o,i,l,"next",e)}function l(e){uf(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),m=function(e){var t="/historyPerson/".concat(e);d(t)};return s?t.createElement(js,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(Es,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Es,null))),t.createElement("tr",null,t.createElement("th",{className:"history",colSpan:2},"Persons ",p)),t.createElement("tr",{className:"results"},t.createElement("th",{colSpan:2},"Number of Historyc persons: ",l))),o.map((function(e){return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"navod"},"Name:"),t.createElement("td",{className:"historyPerson",onClick:function(){return m(e.name)}},e.name)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Title:"),t.createElement("td",{className:"nameComm"},e.title)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Birthday:"),t.createElement("td",{className:"nameComm"},e.info.born)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Death:"),t.createElement("td",{className:"nameComm"},e.info.died)),t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"more",onClick:function(){return m(e.name)}},"more...")),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))))}))),t.createElement(Va,null))};function pf(e){return pf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},pf(e)}function hf(){hf=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==pf(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(pf(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function mf(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function yf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return vf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?vf(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const gf=function(e){var n=yf((0,t.useState)(null),2),r=(n[0],n[1]),o=yf((0,t.useState)([]),2),a=o[0],i=o[1],l=yf((0,t.useState)(!0),2),c=l[0],u=l[1],s=wa().personName;(0,t.useEffect)((function(){f()}),[]),console.log("iz detailsPerson params:",s);var f=function(){var e,t=(e=hf().mark((function e(){var t,n,o;return hf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/historicalfigures?name=".concat(s),e.prev=1,e.next=4,zl.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:n=e.sent,o=n.data,console.log("detalji istorijske persone",o),i(o),u(!1),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),r(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){mf(a,r,o,i,l,"next",e)}function l(e){mf(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return c?t.createElement(js,null):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Es,null)))),a.map((function(e){var n,r,o,a,i,l,c,u,s,f,d,p,h,m,y,v,g,b,w;return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"navod"},"Name:"),t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.native_name)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.nicknames)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.birth_name)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.other_names)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Title:"),t.createElement("td",{className:"nameComm"},e.title)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.other_posts)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Predecessor:"),t.createElement("td",{className:"nameComm"},e.info.predecessor||e.info.preceded_by)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Successor:"),t.createElement("td",{className:"nameComm"},e.info.successor||e.info.succeeded_by)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Fields:"),t.createElement("td",{className:"nameComm"},e.info.fields)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.movement)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Genres:"),t.createElement("td",{className:"nameComm"},t.createElement("ul",null,t.createElement("li",null,(null===(n=e.info.genres)||void 0===n?void 0:n[0])||(null===(r=e.info.genre)||void 0===r?void 0:r[0])),t.createElement("li",null,(null===(o=e.info.genres)||void 0===o?void 0:o[1])||(null===(a=e.info.genre)||void 0===a?void 0:a[1])),t.createElement("li",null,(null===(i=e.info.genres)||void 0===i?void 0:i[2])||(null===(l=e.info.genre)||void 0===l?void 0:l[2])),t.createElement("li",null,(null===(c=e.info.genres)||void 0===c?void 0:c[3])||(null===(u=e.info.genre)||void 0===u?void 0:u[3])),t.createElement("li",null,(null===(s=e.info.genres)||void 0===s?void 0:s[4])||(null===(f=e.info.genre)||void 0===f?void 0:f[4])),t.createElement("li",null,(null===(d=e.info.genres)||void 0===d?void 0:d[5])||(null===(p=e.info.genre)||void 0===p?void 0:p[5])),t.createElement("li",null,(null===(h=e.info.genres)||void 0===h?void 0:h[6])||(null===(m=e.info.genre)||void 0===m?void 0:m[6])),t.createElement("li",null,(null===(y=e.info.genres)||void 0===y?void 0:y[7])||(null===(v=e.info.genre)||void 0===v?void 0:v[7])),t.createElement("li",null,(null===(g=e.info.genres)||void 0===g?void 0:g[8])||(null===(b=e.info.genre)||void 0===b?void 0:b[8]))))),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.discipline)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.attributes)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Profession:"),t.createElement("td",{className:"nameComm"},e.info.profession)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Occupation:"),t.createElement("td",{className:"nameComm"},e.info.occupation)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Known for:"),t.createElement("td",{className:"nameComm"},e.info.known_for)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.notable_work)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Associated Acts:"),t.createElement("td",{className:"nameComm"},e.info.associated_acts)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Nationality:"),t.createElement("td",{className:"nameComm"},e.info.nationality||e.info.allegiance)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Residence:"),t.createElement("td",{className:"nameComm"},e.info.citizenship||e.info.residence||e.info.residences)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Birthday:"),t.createElement("td",{className:"nameComm"},e.info.born)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Death:"),t.createElement("td",{className:"nameComm"},e.info.died)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Buried:"),t.createElement("td",{className:"nameComm"},e.info.resting_place||e.info.burial||e.info.buried)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.cause_of_death)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Height:"),t.createElement("td",{className:"nameComm"},e.info.height)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Weight:"),t.createElement("td",{className:"nameComm"}," ",e.info.weight)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Awards:"),t.createElement("td",{className:"nameComm"},e.info.awards||e.info.notable_awards)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.office)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.notable_works)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Convictions:"),t.createElement("td",{className:"nameCom"},e.info.convictions)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Political Party:"),t.createElement("td",{className:"nameComm"},e.info.political_party)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},null===(w=e.info)||void 0===w?void 0:w.other_politicalaffiliations)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Organization"),t.createElement("td",{className:"nameComm"},e.info.organization)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Religion:"),t.createElement("td",{className:"nameComm"},e.info.religion||e.info.stance)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.church)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Education:"),t.createElement("td",{className:"nameComm"},e.info.education||e.info.alma_mater||e.info.university)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Rank:"),t.createElement("td",{className:"nameComm"},e.info.rank)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Years of Service:"),t.createElement("td",{className:"nameComm"},e.info.years_of_service)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Branch:"),t.createElement("td",{className:"nameComm"},e.info.branch)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Wars:"),t.createElement("td",{className:"nameComm"},e.info.wars)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.conflicts)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.battles)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Spouse:"),t.createElement("td",{className:"nameComm"},e.info.spouse||e.info.spouses)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Parents:"),t.createElement("td",{className:"nameComm"},e.info.parents)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.father)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.mother)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Children:"),t.createElement("td",{className:"nameComm"},e.info.children)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Relatives:"),t.createElement("td",{className:"nameComm"},e.info.relatives||e.info.notable_relatives||e.info.family)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.issue)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Years Active:"),t.createElement("td",{className:"nameComm"},e.info.years_active||e.info.active_years||e.info.reign)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Website:"),t.createElement("td",{className:"nameComm"},e.info.website)),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))))}))))},bf=function(){var e=ba(),n=function(){e("/language")};return t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("div",{onClick:function(){return console.log("klik na ridles"),void e("/ridles")},className:"category"},"Riddles"),t.createElement("div",{onClick:function(){e("/general")},className:"category"},"General"),t.createElement("div",{onClick:function(){return n()},className:"category"},"Language"),t.createElement("div",{onClick:function(){return console.log("klik na Art Literature"),void e("/art")},className:"category"},"Art & Literature"),t.createElement("div",{onClick:function(){return console.log("klik na Science"),void e("/science")},className:"category"},"Science & Nature"),t.createElement("div",{onClick:function(){e("/food")},className:"category"},"Food & Drink"),t.createElement("div",{onClick:function(){e("/people")},className:"category"},"People & Place"),t.createElement("div",{onClick:function(){e("/history")},className:"category"},"History & Holidays"),t.createElement("div",{onClick:function(){e("/geography")},className:"category"},"Geography"),t.createElement("div",{onClick:function(){e("/entertainment")},className:"category"},"Entertainment"),t.createElement("div",{onClick:function(){e("/toys")},className:"category"},"Toys & Games"),t.createElement("div",{onClick:function(){e("/music")},className:"category"},"Music"),t.createElement("div",{onClick:function(){return n()},className:"category"},"Language"),t.createElement("div",{onClick:function(){e("/religion")},className:"category"},"Religion & Mythology"),t.createElement("div",{onClick:function(){e("/sport")},className:"category"},"Sports & Leisure"),t.createElement("div",{onClick:function(){e("/mathematics")},className:"category"},"Mathematicss")))};function wf(e){return wf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wf(e)}function xf(){xf=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==wf(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(wf(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Ef(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Af(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Sf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Sf(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const kf=function(){var e=Af((0,t.useState)(null),2),n=(e[0],e[1]),r=Af((0,t.useState)({}),2),o=r[0],a=r[1],i=Af((0,t.useState)([]),2),l=i[0],c=i[1],u=(0,t.useContext)(wc).searchStringValue;(0,t.useEffect)((function(){s(u)}),[u]),console.log("iz advice searchStringValue:",u);var s=function(){var e,t=(e=xf().mark((function e(t){var r,o,i;return xf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.adviceslip.com/advice/search/".concat(t),e.prev=1,e.next=4,zl.get(r);case 4:o=e.sent,i=o.data.slips,console.log("rezultat advicea",i),a(i),c(i.length),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),n(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ef(a,r,o,i,l,"next",e)}function l(e){Ef(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return 0==l?t.createElement(t.Fragment,null,t.createElement("br",null),t.createElement("br",null),t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement(Es,null))),t.createElement("tr",null,t.createElement("th",null,"Nothing found"))))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Es,null))),t.createElement("tr",null,t.createElement("th",{className:"celebrity",colSpan:2},u," Advice")),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of Advice: ",l)),t.createElement("tr",null,t.createElement("th",null))),o.map((function(e){return t.createElement("tbody",{key:e.id},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.advice)),t.createElement("tr",null,t.createElement("td",{className:"nameComm"},e.date)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(Va,null))},Cf={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z"}}]},name:"right",theme:"outlined"};var Lf=function(e,n){return t.createElement(qu,x({},e,{ref:n,icon:Cf}))};const Of=t.forwardRef(Lf);function jf(e){return function(e){if(Array.isArray(e))return Ec(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Ac(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nf(e){var n=t.useRef();n.current=e;var r=t.useCallback((function(){for(var e,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return null===(e=n.current)||void 0===e?void 0:e.call.apply(e,[n].concat(r))}),[]);return r}var _f=yu()?t.useLayoutEffect:t.useEffect,Tf=function(e,n){var r=t.useRef(!0);_f((function(){return e(r.current)}),n),_f((function(){return r.current=!1,function(){r.current=!0}}),[])},Pf=function(e,t){Tf((function(t){if(!t)return e()}),t)};const If=Tf;function Bf(e){var n=t.useRef(!1),r=Sc(t.useState(e),2),o=r[0],a=r[1];return t.useEffect((function(){return n.current=!1,function(){n.current=!0}}),[]),[o,function(e,t){t&&n.current||a(e)}]}function zf(e){return void 0!==e}var Mf=o(864);function Rf(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[];return t.Children.forEach(e,(function(e){(null!=e||n.keepEmpty)&&(Array.isArray(e)?r=r.concat(Rf(e)):(0,Mf.isFragment)(e)&&e.props?r=r.concat(Rf(e.props.children,n)):r.push(e))})),r}var Ff=t.createContext({});function $f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Df(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Cc(r.key),r)}}function Gf(e,t,n){return t&&Df(e.prototype,t),n&&Df(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function Uf(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Tr(e,t)}function Hf(e){return Hf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Hf(e)}function Wf(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Hf(e);if(t){var o=Hf(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return function(e,t){if(t&&("object"===kc(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _r(e)}(this,n)}}const Yf=function(e){Uf(n,e);var t=Wf(n);function n(){return $f(this,n),t.apply(this,arguments)}return Gf(n,[{key:"render",value:function(){return this.props.children}}]),n}(t.Component);var Vf="none",qf="appear",Kf="enter",Xf="leave",Qf="none",Zf="prepare",Jf="start",ed="active",td="end",nd="prepared";function rd(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit".concat(e)]="webkit".concat(t),n["Moz".concat(e)]="moz".concat(t),n["ms".concat(e)]="MS".concat(t),n["O".concat(e)]="o".concat(t.toLowerCase()),n}var od,ad,id,ld=(od=yu(),ad="undefined"!=typeof window?window:{},id={animationend:rd("Animation","AnimationEnd"),transitionend:rd("Transition","TransitionEnd")},od&&("AnimationEvent"in ad||delete id.animationend.animation,"TransitionEvent"in ad||delete id.transitionend.transition),id),cd={};if(yu()){var ud=document.createElement("div");cd=ud.style}var sd={};function fd(e){if(sd[e])return sd[e];var t=ld[e];if(t)for(var n=Object.keys(t),r=n.length,o=0;o<r;o+=1){var a=n[o];if(Object.prototype.hasOwnProperty.call(t,a)&&a in cd)return sd[e]=t[a],sd[e]}return""}var dd=fd("animationend"),pd=fd("transitionend"),hd=!(!dd||!pd),md=dd||"animationend",yd=pd||"transitionend";function vd(e,t){return e?"object"===kc(e)?e[t.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(t):null}const gd=yu()?t.useLayoutEffect:t.useEffect;var bd=function(e){return+setTimeout(e,16)},wd=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(bd=function(e){return window.requestAnimationFrame(e)},wd=function(e){return window.cancelAnimationFrame(e)});var xd=0,Ed=new Map;function Ad(e){Ed.delete(e)}var Sd=function(e){var t=xd+=1;return function n(r){if(0===r)Ad(t),e();else{var o=bd((function(){n(r-1)}));Ed.set(t,o)}}(arguments.length>1&&void 0!==arguments[1]?arguments[1]:1),t};Sd.cancel=function(e){var t=Ed.get(e);return Ad(e),wd(t)};const kd=Sd;var Cd=[Zf,Jf,ed,td],Ld=[Zf,nd];function Od(e){return e===ed||e===td}const jd=function(e){var n=e;"object"===kc(e)&&(n=e.transitionSupport);var r=t.forwardRef((function(e,r){var o=e.visible,a=void 0===o||o,i=e.removeOnLeave,l=void 0===i||i,c=e.forceRender,u=e.children,s=e.motionName,f=e.leavedClassName,d=e.eventProps,p=function(e,t){return!(!e.motionName||!n||!1===t)}(e,t.useContext(Ff).motion),h=(0,t.useRef)(),m=(0,t.useRef)(),y=function(e,n,r,o){var a=o.motionEnter,i=void 0===a||a,l=o.motionAppear,c=void 0===l||l,u=o.motionLeave,s=void 0===u||u,f=o.motionDeadline,d=o.motionLeaveImmediately,p=o.onAppearPrepare,h=o.onEnterPrepare,m=o.onLeavePrepare,y=o.onAppearStart,v=o.onEnterStart,g=o.onLeaveStart,b=o.onAppearActive,w=o.onEnterActive,x=o.onLeaveActive,E=o.onAppearEnd,A=o.onEnterEnd,S=o.onLeaveEnd,k=o.onVisibleChanged,C=Sc(Bf(),2),L=C[0],O=C[1],j=Sc(Bf(Vf),2),N=j[0],_=j[1],T=Sc(Bf(null),2),P=T[0],I=T[1],B=(0,t.useRef)(!1),z=(0,t.useRef)(null);function M(){return r()}var R=(0,t.useRef)(!1);function F(){_(Vf,!0),I(null,!0)}function $(e){var t=M();if(!e||e.deadline||e.target===t){var n,r=R.current;N===qf&&r?n=null==E?void 0:E(t,e):N===Kf&&r?n=null==A?void 0:A(t,e):N===Xf&&r&&(n=null==S?void 0:S(t,e)),N!==Vf&&r&&!1!==n&&F()}}var D=Sc(function(e){var n=(0,t.useRef)(),r=(0,t.useRef)(e);r.current=e;var o=t.useCallback((function(e){r.current(e)}),[]);function a(e){e&&(e.removeEventListener(yd,o),e.removeEventListener(md,o))}return t.useEffect((function(){return function(){a(n.current)}}),[]),[function(e){n.current&&n.current!==e&&a(n.current),e&&e!==n.current&&(e.addEventListener(yd,o),e.addEventListener(md,o),n.current=e)},a]}($),1)[0],G=function(e){var t,n,r;switch(e){case qf:return Lc(t={},Zf,p),Lc(t,Jf,y),Lc(t,ed,b),t;case Kf:return Lc(n={},Zf,h),Lc(n,Jf,v),Lc(n,ed,w),n;case Xf:return Lc(r={},Zf,m),Lc(r,Jf,g),Lc(r,ed,x),r;default:return{}}},U=t.useMemo((function(){return G(N)}),[N]),H=Sc(function(e,n,r){var o=Sc(Bf(Qf),2),a=o[0],i=o[1],l=function(){var e=t.useRef(null);function n(){kd.cancel(e.current)}return t.useEffect((function(){return function(){n()}}),[]),[function t(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;n();var a=kd((function(){o<=1?r({isCanceled:function(){return a!==e.current}}):t(r,o-1)}));e.current=a},n]}(),c=Sc(l,2),u=c[0],s=c[1],f=n?Ld:Cd;return gd((function(){if(a!==Qf&&a!==td){var e=f.indexOf(a),t=f[e+1],n=r(a);!1===n?i(t,!0):t&&u((function(e){function r(){e.isCanceled()||i(t,!0)}!0===n?r():Promise.resolve(n).then(r)}))}}),[e,a]),t.useEffect((function(){return function(){s()}}),[]),[function(){i(Zf,!0)},a]}(N,!e,(function(e){if(e===Zf){var t=U[Zf];return!!t&&t(M())}var n;return Y in U&&I((null===(n=U[Y])||void 0===n?void 0:n.call(U,M(),null))||null),Y===ed&&(D(M()),f>0&&(clearTimeout(z.current),z.current=setTimeout((function(){$({deadline:!0})}),f))),Y===nd&&F(),true})),2),W=H[0],Y=H[1],V=Od(Y);R.current=V,gd((function(){O(n);var t,r=B.current;B.current=!0,!r&&n&&c&&(t=qf),r&&n&&i&&(t=Kf),(r&&!n&&s||!r&&d&&!n&&s)&&(t=Xf);var o=G(t);t&&(e||o[Zf])?(_(t),W()):_(Vf)}),[n]),(0,t.useEffect)((function(){(N===qf&&!c||N===Kf&&!i||N===Xf&&!s)&&_(Vf)}),[c,i,s]),(0,t.useEffect)((function(){return function(){B.current=!1,clearTimeout(z.current)}}),[]);var q=t.useRef(!1);(0,t.useEffect)((function(){L&&(q.current=!0),void 0!==L&&N===Vf&&((q.current||L)&&(null==k||k(L)),q.current=!0)}),[L,N]);var K=P;return U[Zf]&&Y===Jf&&(K=mu({transition:"none"},K)),[N,Y,K,null!=L?L:n]}(p,a,(function(){try{return h.current instanceof HTMLElement?h.current:function(e){return function(e){return e instanceof HTMLElement||e instanceof SVGElement}(e)?e:e instanceof t.Component?Oo.findDOMNode(e):null}(m.current)}catch(e){return null}}),e),v=Sc(y,4),g=v[0],b=v[1],w=v[2],x=v[3],E=t.useRef(x);x&&(E.current=!0);var A,S,k,C,L,O=t.useCallback((function(e){h.current=e,function(e,t){"function"==typeof e?e(t):"object"===kc(e)&&e&&"current"in e&&(e.current=t)}(r,e)}),[r]),j=mu(mu({},d),{},{visible:a});if(u)if(g===Vf)A=x?u(mu({},j),O):!l&&E.current&&f?u(mu(mu({},j),{},{className:f}),O):c||!l&&!f?u(mu(mu({},j),{},{style:{display:"none"}}),O):null;else{var N,_;b===Zf?_="prepare":Od(b)?_="active":b===Jf&&(_="start");var T=vd(s,"".concat(g,"-").concat(_));A=u(mu(mu({},j),{},{className:Nc()(vd(s,g),(N={},Lc(N,T,T&&_),Lc(N,s,"string"==typeof s),N)),style:w}),O)}else A=null;return t.isValidElement(A)&&(S=A,("function"!=typeof(L=(0,Mf.isMemo)(S)?S.type.type:S.type)||null!==(k=L.prototype)&&void 0!==k&&k.render)&&("function"!=typeof S||null!==(C=S.prototype)&&void 0!==C&&C.render))&&(A.ref||(A=t.cloneElement(A,{ref:O}))),t.createElement(Yf,{ref:m},A)}));return r.displayName="CSSMotion",r}(hd);var Nd="add",_d="keep",Td="remove",Pd="removed";function Id(e){var t;return mu(mu({},t=e&&"object"===kc(e)&&"key"in e?e:{key:e}),{},{key:String(t.key)})}function Bd(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map(Id)}var zd=["component","children","onVisibleChanged","onAllRemoved"],Md=["status"],Rd=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearPrepare","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];!function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:jd,r=function(e){Uf(o,e);var r=Wf(o);function o(){var e;$f(this,o);for(var t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];return Lc(_r(e=r.call.apply(r,[this].concat(n))),"state",{keyEntities:[]}),Lc(_r(e),"removeKey",(function(t){var n=e.state.keyEntities.map((function(e){return e.key!==t?e:mu(mu({},e),{},{status:Pd})}));return e.setState({keyEntities:n}),n.filter((function(e){return e.status!==Pd})).length})),e}return Gf(o,[{key:"render",value:function(){var e=this,r=this.state.keyEntities,o=this.props,a=o.component,i=o.children,l=o.onVisibleChanged,c=o.onAllRemoved,u=Oc(o,zd),s=a||t.Fragment,f={};return Rd.forEach((function(e){f[e]=u[e],delete u[e]})),delete u.keys,t.createElement(s,u,r.map((function(r,o){var a=r.status,u=Oc(r,Md),s=a===Nd||a===_d;return t.createElement(n,x({},f,{key:u.key,visible:s,eventProps:u,onVisibleChanged:function(t){null==l||l(t,{key:u.key}),t||0===e.removeKey(u.key)&&c&&c()}}),(function(e,t){return i(mu(mu({},e),{},{index:o}),t)}))})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.keys,r=t.keyEntities,o=Bd(n),a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=[],r=0,o=t.length,a=Bd(e),i=Bd(t);a.forEach((function(e){for(var t=!1,a=r;a<o;a+=1){var l=i[a];if(l.key===e.key){r<a&&(n=n.concat(i.slice(r,a).map((function(e){return mu(mu({},e),{},{status:Nd})}))),r=a),n.push(mu(mu({},l),{},{status:_d})),r+=1,t=!0;break}}t||n.push(mu(mu({},e),{},{status:Td}))})),r<o&&(n=n.concat(i.slice(r).map((function(e){return mu(mu({},e),{},{status:Nd})}))));var l={};return n.forEach((function(e){var t=e.key;l[t]=(l[t]||0)+1})),Object.keys(l).filter((function(e){return l[e]>1})).forEach((function(e){(n=n.filter((function(t){var n=t.key,r=t.status;return n!==e||r!==Td}))).forEach((function(t){t.key===e&&(t.status=_d)}))})),n}(r,o);return{keyEntities:a.filter((function(e){var t=r.find((function(t){var n=t.key;return e.key===n}));return!t||t.status!==Pd||e.status!==Td}))}}}]),o}(t.Component);Lc(r,"defaultProps",{component:"div"})}(hd);const Fd=jd;var $d={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=$d.F1&&t<=$d.F12)return!1;switch(t){case $d.ALT:case $d.CAPS_LOCK:case $d.CONTEXT_MENU:case $d.CTRL:case $d.DOWN:case $d.END:case $d.ESC:case $d.HOME:case $d.INSERT:case $d.LEFT:case $d.MAC_FF_META:case $d.META:case $d.NUMLOCK:case $d.NUM_CENTER:case $d.PAGE_DOWN:case $d.PAGE_UP:case $d.PAUSE:case $d.PRINT_SCREEN:case $d.RIGHT:case $d.SHIFT:case $d.UP:case $d.WIN_KEY:case $d.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=$d.ZERO&&e<=$d.NINE)return!0;if(e>=$d.NUM_ZERO&&e<=$d.NUM_MULTIPLY)return!0;if(e>=$d.A&&e<=$d.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case $d.SPACE:case $d.QUESTION_MARK:case $d.NUM_PLUS:case $d.NUM_MINUS:case $d.NUM_PERIOD:case $d.NUM_DIVISION:case $d.SEMICOLON:case $d.DASH:case $d.EQUALS:case $d.COMMA:case $d.PERIOD:case $d.SLASH:case $d.APOSTROPHE:case $d.SINGLE_QUOTE:case $d.OPEN_SQUARE_BRACKET:case $d.BACKSLASH:case $d.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};const Dd=$d;var Gd=t.forwardRef((function(e,n){var r,o=e.prefixCls,a=e.forceRender,i=e.className,l=e.style,c=e.children,u=e.isActive,s=e.role,f=Sc(t.useState(u||a),2),d=f[0],p=f[1];return t.useEffect((function(){(a||u)&&p(!0)}),[a,u]),d?t.createElement("div",{ref:n,className:Nc()("".concat(o,"-content"),(r={},Lc(r,"".concat(o,"-content-active"),u),Lc(r,"".concat(o,"-content-inactive"),!u),r),i),style:l,role:s},t.createElement("div",{className:"".concat(o,"-content-box")},c)):null}));Gd.displayName="PanelContent";const Ud=Gd;var Hd=["showArrow","headerClass","isActive","onItemClick","forceRender","className","prefixCls","collapsible","accordion","panelKey","extra","header","expandIcon","openMotion","destroyInactivePanel","children"],Wd=t.forwardRef((function(e,n){var r,o,a=e.showArrow,i=void 0===a||a,l=e.headerClass,c=e.isActive,u=e.onItemClick,s=e.forceRender,f=e.className,d=e.prefixCls,p=e.collapsible,h=e.accordion,m=e.panelKey,y=e.extra,v=e.header,g=e.expandIcon,b=e.openMotion,w=e.destroyInactivePanel,E=e.children,A=Oc(e,Hd),S="disabled"===p,k="header"===p,C="icon"===p,L=null!=y&&"boolean"!=typeof y,O=function(){null==u||u(m)},j="function"==typeof g?g(e):t.createElement("i",{className:"arrow"});j&&(j=t.createElement("div",{className:"".concat(d,"-expand-icon"),onClick:["header","icon"].includes(p)?O:void 0},j));var N=Nc()((Lc(r={},"".concat(d,"-item"),!0),Lc(r,"".concat(d,"-item-active"),c),Lc(r,"".concat(d,"-item-disabled"),S),r),f),_={className:Nc()(l,(Lc(o={},"".concat(d,"-header"),!0),Lc(o,"".concat(d,"-header-collapsible-only"),k),Lc(o,"".concat(d,"-icon-collapsible-only"),C),o)),"aria-expanded":c,"aria-disabled":S,onKeyDown:function(e){"Enter"!==e.key&&e.keyCode!==Dd.ENTER&&e.which!==Dd.ENTER||O()}};return k||C||(_.onClick=O,_.role=h?"tab":"button",_.tabIndex=S?-1:0),t.createElement("div",x({},A,{ref:n,className:N}),t.createElement("div",_,i&&j,t.createElement("span",{className:"".concat(d,"-header-text"),onClick:"header"===p?O:void 0},v),L&&t.createElement("div",{className:"".concat(d,"-extra")},y)),t.createElement(Fd,x({visible:c,leavedClassName:"".concat(d,"-content-hidden")},b,{forceRender:s,removeOnLeave:w}),(function(e,n){var r=e.className,o=e.style;return t.createElement(Ud,{ref:n,prefixCls:d,className:r,style:o,isActive:c,forceRender:s,role:h?"tabpanel":void 0},E)})))}));const Yd=Wd;var Vd=["children","label","key","collapsible","onItemClick","destroyInactivePanel"];function qd(e){var t=e;if(!Array.isArray(t)){var n=kc(t);t="number"===n||"string"===n?[t]:[]}return t.map((function(e){return String(e)}))}var Kd=t.forwardRef((function(e,n){var r,o,a,i,l,c,u,s,f,d,p,h,m,y,v,g=e.prefixCls,b=void 0===g?"rc-collapse":g,w=e.destroyInactivePanel,E=void 0!==w&&w,A=e.style,S=e.accordion,k=e.className,C=e.children,L=e.collapsible,O=e.openMotion,j=e.expandIcon,N=e.activeKey,_=e.defaultActiveKey,T=e.onChange,P=e.items,I=Nc()(b,k),B=(r=[],a=(o={value:N,onChange:function(e){return null==T?void 0:T(e)},defaultValue:_,postState:qd}||{}).defaultValue,i=o.value,l=o.onChange,c=o.postState,u=Sc(Bf((function(){return zf(i)?i:zf(a)?"function"==typeof a?a():a:"function"==typeof r?r():r})),2),s=u[0],f=u[1],d=void 0!==i?i:s,p=c?c(d):d,h=Nf(l),m=Sc(Bf([d]),2),y=m[0],v=m[1],Pf((function(){var e=y[0];s!==e&&h(s,e)}),[y]),Pf((function(){zf(i)||f(i)}),[i]),[p,Nf((function(e,t){f(e,t),v([d],t)}))]),z=Sc(B,2),M=z[0],R=z[1];Bu(!C,"[rc-collapse] `children` will be removed in next major version. Please use `items` instead.");var F=function(e,n,r){return Array.isArray(e)?function(e,n){var r=n.prefixCls,o=n.accordion,a=n.collapsible,i=n.destroyInactivePanel,l=n.onItemClick,c=n.activeKey,u=n.openMotion,s=n.expandIcon;return e.map((function(e,n){var f,d=e.children,p=e.label,h=e.key,m=e.collapsible,y=e.onItemClick,v=e.destroyInactivePanel,g=Oc(e,Vd),b=String(null!=h?h:n),w=null!=m?m:a,E=null!=v?v:i;return f=o?c[0]===b:c.indexOf(b)>-1,t.createElement(Yd,x({},g,{prefixCls:r,key:b,panelKey:b,isActive:f,accordion:o,openMotion:u,expandIcon:s,header:p,collapsible:w,onItemClick:function(e){"disabled"!==w&&(l(e),null==y||y(e))},destroyInactivePanel:E}),d)}))}(e,r):Rf(n).map((function(e,n){return function(e,n,r){if(!e)return null;var o,a=r.prefixCls,i=r.accordion,l=r.collapsible,c=r.destroyInactivePanel,u=r.onItemClick,s=r.activeKey,f=r.openMotion,d=r.expandIcon,p=e.key||String(n),h=e.props,m=h.header,y=h.headerClass,v=h.destroyInactivePanel,g=h.collapsible,b=h.onItemClick;o=i?s[0]===p:s.indexOf(p)>-1;var w=null!=g?g:l,x={key:p,panelKey:p,header:m,headerClass:y,isActive:o,prefixCls:a,destroyInactivePanel:null!=v?v:c,openMotion:f,accordion:i,children:e.props.children,onItemClick:function(e){"disabled"!==w&&(u(e),null==b||b(e))},expandIcon:d,collapsible:w};return"string"==typeof e.type?e:(Object.keys(x).forEach((function(e){void 0===x[e]&&delete x[e]})),t.cloneElement(e,x))}(e,n,r)}))}(P,C,{prefixCls:b,accordion:S,openMotion:O,expandIcon:j,collapsible:L,destroyInactivePanel:E,onItemClick:function(e){return R((function(){return S?M[0]===e?[]:[e]:M.indexOf(e)>-1?M.filter((function(t){return t!==e})):[].concat(jf(M),[e])}))},activeKey:M});return t.createElement("div",{ref:n,className:I,style:A,role:S?"tablist":void 0},F)}));const Xd=Object.assign(Kd,{Panel:Yd}),Qd=Xd;function Zd(e,t){var n=mu({},e);return Array.isArray(t)&&t.forEach((function(e){delete n[e]})),n}Xd.Panel;const Jd=()=>({height:0,opacity:0}),ep=e=>{const{scrollHeight:t}=e;return{height:t,opacity:1}},tp=e=>({height:e?e.offsetHeight:0}),np=(e,t)=>!0===(null==t?void 0:t.deadline)||"height"===t.propertyName,{isValidElement:rp}=n;function op(e,n){return function(e,n,r){return rp(e)?t.cloneElement(e,"function"==typeof r?r(e.props||{}):r):n}(e,e,n)}const ap=t.createContext({getPrefixCls:(e,t)=>t||(e?`ant-${e}`:"ant"),iconPrefixCls:"anticon"}),{Consumer:ip}=ap,lp=t.createContext(void 0),cp=t.forwardRef(((e,n)=>{const{getPrefixCls:r}=t.useContext(ap),{prefixCls:o,className:a,showArrow:i=!0}=e,l=r("collapse",o),c=Nc()({[`${l}-no-arrow`]:!i},a);return t.createElement(Qd.Panel,Object.assign({ref:n},e,{prefixCls:l,className:c}))})),up=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)};const sp=function(){function e(t){$f(this,e),Lc(this,"instanceId",void 0),Lc(this,"cache",new Map),this.instanceId=t}return Gf(e,[{key:"get",value:function(e){return this.cache.get(e.join("%"))||null}},{key:"update",value:function(e,t){var n=e.join("%"),r=t(this.cache.get(n));null===r?this.cache.delete(n):this.cache.set(n,r)}}]),e}();var fp="data-token-hash",dp="data-css-hash",pp="__cssinjs_instance__";var hp=t.createContext({hashPriority:"low",cache:function(){var e=Math.random().toString(12).slice(2);if("undefined"!=typeof document&&document.head&&document.body){var t=document.body.querySelectorAll("style[".concat(dp,"]"))||[],n=document.head.firstChild;Array.from(t).forEach((function(t){t[pp]=t[pp]||e,t[pp]===e&&document.head.insertBefore(t,n)}));var r={};Array.from(document.querySelectorAll("style[".concat(dp,"]"))).forEach((function(t){var n,o=t.getAttribute(dp);r[o]?t[pp]===e&&(null===(n=t.parentNode)||void 0===n||n.removeChild(t)):r[o]=!0}))}return new sp(e)}(),defaultCache:!0});const mp=hp;var yp=function(){function e(){$f(this,e),Lc(this,"cache",void 0),Lc(this,"keys",void 0),Lc(this,"cacheCallTimes",void 0),this.cache=new Map,this.keys=[],this.cacheCallTimes=0}return Gf(e,[{key:"size",value:function(){return this.keys.length}},{key:"internalGet",value:function(e){var t,n,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o={map:this.cache};return e.forEach((function(e){var t;o=o?null===(t=o)||void 0===t||null===(t=t.map)||void 0===t?void 0:t.get(e):void 0})),null!==(t=o)&&void 0!==t&&t.value&&r&&(o.value[1]=this.cacheCallTimes++),null===(n=o)||void 0===n?void 0:n.value}},{key:"get",value:function(e){var t;return null===(t=this.internalGet(e,!0))||void 0===t?void 0:t[0]}},{key:"has",value:function(e){return!!this.internalGet(e)}},{key:"set",value:function(t,n){var r=this;if(!this.has(t)){if(this.size()+1>e.MAX_CACHE_SIZE+e.MAX_CACHE_OFFSET){var o=this.keys.reduce((function(e,t){var n=Sc(e,2)[1];return r.internalGet(t)[1]<n?[t,r.internalGet(t)[1]]:e}),[this.keys[0],this.cacheCallTimes]),a=Sc(o,1)[0];this.delete(a)}this.keys.push(t)}var i=this.cache;t.forEach((function(e,o){if(o===t.length-1)i.set(e,{value:[n,r.cacheCallTimes++]});else{var a=i.get(e);a?a.map||(a.map=new Map):i.set(e,{map:new Map}),i=i.get(e).map}}))}},{key:"deleteByPath",value:function(e,t){var n,r=e.get(t[0]);if(1===t.length)return r.map?e.set(t[0],{map:r.map}):e.delete(t[0]),null===(n=r.value)||void 0===n?void 0:n[0];var o=this.deleteByPath(r.map,t.slice(1));return r.map&&0!==r.map.size||r.value||e.delete(t[0]),o}},{key:"delete",value:function(e){if(this.has(e))return this.keys=this.keys.filter((function(t){return!function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(t,e)})),this.deleteByPath(this.cache,e)}}]),e}();Lc(yp,"MAX_CACHE_SIZE",20),Lc(yp,"MAX_CACHE_OFFSET",5);var vp=0,gp=function(){function e(t){$f(this,e),Lc(this,"derivatives",void 0),Lc(this,"id",void 0),this.derivatives=Array.isArray(t)?t:[t],this.id=vp,0===t.length&&t.length,vp+=1}return Gf(e,[{key:"getDerivativeToken",value:function(e){return this.derivatives.reduce((function(t,n){return n(e,t)}),void 0)}}]),e}(),bp=new yp,wp=new WeakMap,xp={},Ep=new WeakMap;function Ap(e){var t=Ep.get(e)||"";return t||(Object.keys(e).forEach((function(n){var r=e[n];t+=n,r instanceof gp?t+=r.id:r&&"object"===kc(r)?t+=Ap(r):t+=r})),Ep.set(e,t)),t}function Sp(e,t){return up("".concat(t,"_").concat(Ap(e)))}var kp="random-".concat(Date.now(),"-").concat(Math.random()).replace(/\./g,""),Cp="_bAmBoO_";var Lp=void 0,Op=yu();function jp(e){return"number"==typeof e?"".concat(e,"px"):e}function Np(e,t,n){var r;if(arguments.length>4&&void 0!==arguments[4]&&arguments[4])return e;var o=mu(mu({},arguments.length>3&&void 0!==arguments[3]?arguments[3]:{}),{},(Lc(r={},fp,t),Lc(r,dp,n),r)),a=Object.keys(o).map((function(e){var t=o[e];return t?"".concat(e,'="').concat(t,'"'):null})).filter((function(e){return e})).join(" ");return"<style ".concat(a,">").concat(e,"</style>")}var _p=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"--".concat(t?"".concat(t,"-"):"").concat(e).replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z]+)([A-Z][a-z0-9]+)/g,"$1-$2").replace(/([a-z])([A-Z0-9])/g,"$1-$2").toLowerCase()},Tp=function(e,t,n){return Object.keys(e).length?".".concat(t).concat(null!=n&&n.scope?".".concat(n.scope):"","{").concat(Object.entries(e).map((function(e){var t=Sc(e,2),n=t[0],r=t[1];return"".concat(n,":").concat(r,";")})).join(""),"}"):""},Pp=function(e,t,n){var r={},o={};return Object.entries(e).forEach((function(e){var t,a,i=Sc(e,2),l=i[0],c=i[1];if(null!=n&&null!==(t=n.preserve)&&void 0!==t&&t[l])o[l]=c;else if(!("string"!=typeof c&&"number"!=typeof c||null!=n&&null!==(a=n.ignore)&&void 0!==a&&a[l])){var u,s=_p(l,null==n?void 0:n.prefix);r[s]="number"!=typeof c||null!=n&&null!==(u=n.unitless)&&void 0!==u&&u[l]?String(c):"".concat(c,"px"),o[l]="var(".concat(s,")")}})),[o,Tp(r,t,{scope:null==n?void 0:n.scope})]},Ip=mu({},n).useInsertionEffect;const Bp=Ip?function(e,t,n){return Ip((function(){return e(),t()}),n)}:function(e,n,r){t.useMemo(e,r),If((function(){return n(!0)}),r)},zp=void 0!==mu({},n).useInsertionEffect?function(e){var n=[],r=!1;return t.useEffect((function(){return r=!1,function(){r=!0,n.length&&n.forEach((function(e){return e()}))}}),e),function(e){r||n.push(e)}}:function(){return function(e){e()}},Mp=function(){return!1};function Rp(e,n,r,o,a){var i=t.useContext(mp).cache,l=[e].concat(jf(n)),c=l.join("_"),u=zp([c]),s=(Mp(),function(e){i.update(l,(function(t){var n=Sc(t||[void 0,void 0],2),o=n[0],a=[void 0===o?0:o,n[1]||r()];return e?e(a):a}))});t.useMemo((function(){s()}),[c]);var f=i.get(l)[1];return Bp((function(){null==a||a(f)}),(function(e){return s((function(t){var n=Sc(t,2),r=n[0],o=n[1];return e&&0===r&&(null==a||a(f)),[r+1,o]})),function(){i.update(l,(function(t){var n=Sc(t||[],2),r=n[0],a=void 0===r?0:r,c=n[1];return 0==a-1?(u((function(){!e&&i.get(l)||null==o||o(c,!1)})),null):[a-1,c]}))}}),[c]),f}var Fp={},$p="css",Dp=new Map,Gp=0;var Up=function(e,t,n,r){var o=mu(mu({},n.getDerivativeToken(e)),t);return r&&(o=r(o)),o},Hp="token";function Wp(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=(0,t.useContext)(mp),a=o.cache.instanceId,i=o.container,l=r.salt,c=void 0===l?"":l,u=r.override,s=void 0===u?Fp:u,f=r.formatToken,d=r.getComputedToken,p=r.cssVar,h=function(e,t){for(var r=wp,o=0;o<t.length;o+=1){var a=t[o];r.has(a)||r.set(a,new WeakMap),r=r.get(a)}return r.has(xp)||r.set(xp,Object.assign.apply(Object,[{}].concat(jf(n)))),r.get(xp)}(0,n),m=Ap(h),y=Ap(s),v=p?Ap(p):"",g=Rp(Hp,[c,e.id,m,y,v],(function(){var t,n=d?d(h,s,e):Up(h,s,e,f),r=mu({},n),o="";if(p){var a=Sc(Pp(n,p.key,{prefix:p.prefix,ignore:p.ignore,unitless:p.unitless,preserve:p.preserve}),2);n=a[0],o=a[1]}var i=Sp(n,c);n._tokenKey=i,r._tokenKey=Sp(r,c);var l=null!==(t=null==p?void 0:p.key)&&void 0!==t?t:i;n._themeKey=l,function(e){Dp.set(e,(Dp.get(e)||0)+1)}(l);var u="".concat($p,"-").concat(up(i));return n._hashId=u,[n,u,r,o,(null==p?void 0:p.key)||""]}),(function(e){!function(e,t){Dp.set(e,(Dp.get(e)||0)-1);var n=Array.from(Dp.keys()),r=n.filter((function(e){return(Dp.get(e)||0)<=0}));n.length-r.length>Gp&&r.forEach((function(e){!function(e,t){"undefined"!=typeof document&&document.querySelectorAll("style[".concat(fp,'="').concat(e,'"]')).forEach((function(e){var n;e[pp]===t&&(null===(n=e.parentNode)||void 0===n||n.removeChild(e))}))}(e,t),Dp.delete(e)}))}(e[0]._themeKey,a)}),(function(e){var t=Sc(e,4),n=t[0],r=t[3];if(p&&r){var o=Lu(r,up("css-variables-".concat(n._themeKey)),{mark:dp,prepend:"queue",attachTo:i,priority:-999});o[pp]=a,o.setAttribute(fp,n._themeKey)}}));return g}const Yp={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Vp,qp="data-ant-cssinjs-cache-path",Kp="_FILE_STYLE__",Xp=!0;var Qp="_multi_value_";function Zp(e){return tn(rn(e),nn).replace(/\{%%%\:[^;];}/g,";")}var Jp=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{root:!0,parentSelectors:[]},o=r.root,a=r.injectHash,i=r.parentSelectors,l=n.hashId,c=n.layer,u=(n.path,n.hashPriority),s=n.transformers,f=void 0===s?[]:s,d=(n.linters,""),p={};function h(t){var r=t.getName(l);if(!p[r]){var o=Sc(e(t.style,n,{root:!1,parentSelectors:i}),1)[0];p[r]="@keyframes ".concat(t.getName(l)).concat(o)}}var m=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return t.forEach((function(t){Array.isArray(t)?e(t,n):t&&n.push(t)})),n}(Array.isArray(t)?t:[t]);if(m.forEach((function(t){var r="string"!=typeof t||o?t:{};if("string"==typeof r)d+="".concat(r,"\n");else if(r._keyframe)h(r);else{var c=f.reduce((function(e,t){var n;return(null==t||null===(n=t.visit)||void 0===n?void 0:n.call(t,e))||e}),r);Object.keys(c).forEach((function(t){var r=c[t];if("object"!==kc(r)||!r||"animationName"===t&&r._keyframe||function(e){return"object"===kc(e)&&e&&("_skip_check_"in e||Qp in e)}(r)){var s;function x(e,t){var n=e.replace(/[A-Z]/g,(function(e){return"-".concat(e.toLowerCase())})),r=t;Yp[e]||"number"!=typeof r||0===r||(r="".concat(r,"px")),"animationName"===e&&null!=t&&t._keyframe&&(h(t),r=t.getName(l)),d+="".concat(n,":").concat(r,";")}var f=null!==(s=null==r?void 0:r.value)&&void 0!==s?s:r;"object"===kc(r)&&null!=r&&r[Qp]&&Array.isArray(f)?f.forEach((function(e){x(t,e)})):x(t,f)}else{var m=!1,y=t.trim(),v=!1;(o||a)&&l?y.startsWith("@")?m=!0:y=function(e,t,n){if(!t)return e;var r=".".concat(t),o="low"===n?":where(".concat(r,")"):r;return e.split(",").map((function(e){var t,n=e.trim().split(/\s+/),r=n[0]||"",a=(null===(t=r.match(/^\w+/))||void 0===t?void 0:t[0])||"";return[r="".concat(a).concat(o).concat(r.slice(a.length))].concat(jf(n.slice(1))).join(" ")})).join(",")}(t,l,u):!o||l||"&"!==y&&""!==y||(y="",v=!0);var g=Sc(e(r,n,{root:v,injectHash:m,parentSelectors:[].concat(jf(i),[y])}),2),b=g[0],w=g[1];p=mu(mu({},p),w),d+="".concat(y).concat(b)}}))}})),o){if(c&&(void 0===Lp&&(Lp=function(e,t,n){if(yu()){var r,o;Lu(e,kp);var a=document.createElement("div");a.style.position="fixed",a.style.left="0",a.style.top="0",null==t||t(a),document.body.appendChild(a);var i=n?n(a):null===(r=getComputedStyle(a).content)||void 0===r?void 0:r.includes(Cp);return null===(o=a.parentNode)||void 0===o||o.removeChild(a),Cu(kp),i}return!1}("@layer ".concat(kp," { .").concat(kp,' { content: "').concat(Cp,'"!important; } }'),(function(e){e.className=kp}))),Lp)){var y=c.split(","),v=y[y.length-1].trim();d="@layer ".concat(v," {").concat(d,"}"),y.length>1&&(d="@layer ".concat(c,"{%%%:%}").concat(d))}}else d="{".concat(d,"}");return[d,p]};function eh(e,t){return up("".concat(e.join("%")).concat(t))}function th(){return null}var nh="style";function rh(e,n){var r=e.token,o=e.path,a=e.hashId,i=e.layer,l=e.nonce,c=e.clientOnly,u=e.order,s=void 0===u?0:u,f=t.useContext(mp),d=f.autoClear,p=(f.mock,f.defaultCache),h=f.hashPriority,m=f.container,y=f.ssrInline,v=f.transformers,g=f.linters,b=f.cache,w=r._tokenKey,E=[w].concat(jf(o)),A=Op,S=Rp(nh,E,(function(){var e=E.join("|");if(function(e){return function(){if(!Vp&&(Vp={},yu())){var e=document.createElement("div");e.className=qp,e.style.position="fixed",e.style.visibility="hidden",e.style.top="-9999px",document.body.appendChild(e);var t=getComputedStyle(e).content||"";(t=t.replace(/^"/,"").replace(/"$/,"")).split(";").forEach((function(e){var t=Sc(e.split(":"),2),n=t[0],r=t[1];Vp[n]=r}));var n,r=document.querySelector("style[".concat(qp,"]"));r&&(Xp=!1,null===(n=r.parentNode)||void 0===n||n.removeChild(r)),document.body.removeChild(e)}}(),!!Vp[e]}(e)){var t=function(e){var t=Vp[e],n=null;if(t&&yu())if(Xp)n=Kp;else{var r=document.querySelector("style[".concat(dp,'="').concat(Vp[e],'"]'));r?n=r.innerHTML:delete Vp[e]}return[n,t]}(e),r=Sc(t,2),l=r[0],u=r[1];if(l)return[l,w,u,{},c,s]}var f=n(),d=Sc(Jp(f,{hashId:a,hashPriority:h,layer:i,path:o.join("-"),transformers:v,linters:g}),2),p=d[0],m=d[1],y=Zp(p),b=eh(E,y);return[y,w,b,m,c,s]}),(function(e,t){var n=Sc(e,3)[2];(t||d)&&Op&&Cu(n,{mark:dp})}),(function(e){var t=Sc(e,4),n=t[0],r=(t[1],t[2]),o=t[3];if(A&&n!==Kp){var a={mark:dp,prepend:"queue",attachTo:m,priority:s},i="function"==typeof l?l():l;i&&(a.csp={nonce:i});var c=Lu(n,r,a);c[pp]=b.instanceId,c.setAttribute(fp,w),Object.keys(o).forEach((function(e){Lu(Zp(o[e]),"_effect-".concat(e),a)}))}})),k=Sc(S,3),C=k[0],L=k[1],O=k[2];return function(e){var n,r;return n=y&&!A&&p?t.createElement("style",x({},(Lc(r={},fp,L),Lc(r,dp,O),r),{dangerouslySetInnerHTML:{__html:C}})):t.createElement(th,null),t.createElement(t.Fragment,null,n,e)}}var oh="cssVar";var ah;function ih(e){return e.notSplit=!0,e}Lc(ah={},nh,(function(e,t,n){var r=Sc(e,6),o=r[0],a=r[1],i=r[2],l=r[3],c=r[4],u=r[5],s=(n||{}).plain;if(c)return null;var f=o,d={"data-rc-order":"prependQueue","data-rc-priority":"".concat(u)};return f=Np(o,a,i,d,s),l&&Object.keys(l).forEach((function(e){if(!t[e]){t[e]=!0;var n=Zp(l[e]);f+=Np(n,a,"_effect-".concat(e),d,s)}})),[u,i,f]})),Lc(ah,Hp,(function(e,t,n){var r=Sc(e,5),o=r[2],a=r[3],i=r[4],l=(n||{}).plain;if(!a)return null;var c=o._tokenKey;return[-999,c,Np(a,i,c,{"data-rc-order":"prependQueue","data-rc-priority":"".concat(-999)},l)]})),Lc(ah,oh,(function(e,t,n){var r=Sc(e,4),o=r[1],a=r[2],i=r[3],l=(n||{}).plain;return o?[-999,a,Np(o,i,a,{"data-rc-order":"prependQueue","data-rc-priority":"".concat(-999)},l)]:null})),ih(["borderTop","borderBottom"]),ih(["borderTop"]),ih(["borderBottom"]),ih(["borderLeft","borderRight"]),ih(["borderLeft"]),ih(["borderRight"]);const lh=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return{boxSizing:"border-box",margin:0,padding:0,color:e.colorText,fontSize:e.fontSize,lineHeight:e.lineHeight,listStyle:"none",fontFamily:t?"inherit":e.fontFamily}},ch=e=>({a:{color:e.colorLink,textDecoration:e.linkDecoration,backgroundColor:"transparent",outline:"none",cursor:"pointer",transition:`color ${e.motionDurationSlow}`,"-webkit-text-decoration-skip":"objects","&:hover":{color:e.colorLinkHover},"&:active":{color:e.colorLinkActive},"&:active,\n  &:hover":{textDecoration:e.linkHoverDecoration,outline:0},"&:focus":{textDecoration:e.linkFocusDecoration,outline:0},"&[disabled]":{color:e.colorTextDisabled,cursor:"not-allowed"}}}),uh=(e,t)=>{const{fontFamily:n,fontSize:r}=e,o=`[class^="${t}"], [class*=" ${t}"]`;return{[o]:{fontFamily:n,fontSize:r,boxSizing:"border-box","&::before, &::after":{boxSizing:"border-box"},[o]:{boxSizing:"border-box","&::before, &::after":{boxSizing:"border-box"}}}}},sh=e=>({[e.componentCls]:{[`${e.antCls}-motion-collapse-legacy`]:{overflow:"hidden","&-active":{transition:`height ${e.motionDurationMid} ${e.motionEaseInOut},\n        opacity ${e.motionDurationMid} ${e.motionEaseInOut} !important`}},[`${e.antCls}-motion-collapse`]:{overflow:"hidden",transition:`height ${e.motionDurationMid} ${e.motionEaseInOut},\n        opacity ${e.motionDurationMid} ${e.motionEaseInOut} !important`}}});"undefined"==typeof Reflect?Object.keys:Reflect.ownKeys;const fh="5.12.1",dh={blue:"#1677ff",purple:"#722ED1",cyan:"#13C2C2",green:"#52C41A",magenta:"#EB2F96",pink:"#eb2f96",red:"#F5222D",orange:"#FA8C16",yellow:"#FADB14",volcano:"#FA541C",geekblue:"#2F54EB",gold:"#FAAD14",lime:"#A0D911"},ph=Object.assign(Object.assign({},dh),{colorPrimary:"#1677ff",colorSuccess:"#52c41a",colorWarning:"#faad14",colorError:"#ff4d4f",colorInfo:"#1677ff",colorLink:"",colorTextBase:"",colorBgBase:"",fontFamily:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n'Noto Color Emoji'",fontFamilyCode:"'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace",fontSize:14,lineWidth:1,lineType:"solid",motionUnit:.1,motionBase:0,motionEaseOutCirc:"cubic-bezier(0.08, 0.82, 0.17, 1)",motionEaseInOutCirc:"cubic-bezier(0.78, 0.14, 0.15, 0.86)",motionEaseOut:"cubic-bezier(0.215, 0.61, 0.355, 1)",motionEaseInOut:"cubic-bezier(0.645, 0.045, 0.355, 1)",motionEaseOutBack:"cubic-bezier(0.12, 0.4, 0.29, 1.46)",motionEaseInBack:"cubic-bezier(0.71, -0.46, 0.88, 0.6)",motionEaseInQuint:"cubic-bezier(0.755, 0.05, 0.855, 0.06)",motionEaseOutQuint:"cubic-bezier(0.23, 1, 0.32, 1)",borderRadius:6,sizeUnit:4,sizeStep:4,sizePopupArrow:16,controlHeight:32,zIndexBase:0,zIndexPopupBase:1e3,opacityImage:1,wireframe:!1,motion:!0});var hh=function(){function e(t,n){var r;if(void 0===t&&(t=""),void 0===n&&(n={}),t instanceof e)return t;"number"==typeof t&&(t=function(e){return{r:e>>16,g:(65280&e)>>8,b:255&e}}(t)),this.originalInput=t;var o=Uc(t);this.originalInput=t,this.r=o.r,this.g=o.g,this.b=o.b,this.a=o.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(r=n.format)&&void 0!==r?r:o.format,this.gradientType=n.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=o.ok}return e.prototype.isDark=function(){return this.getBrightness()<128},e.prototype.isLight=function(){return!this.isDark()},e.prototype.getBrightness=function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},e.prototype.getLuminance=function(){var e=this.toRgb(),t=e.r/255,n=e.g/255,r=e.b/255;return.2126*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))},e.prototype.getAlpha=function(){return this.a},e.prototype.setAlpha=function(e){return this.a=Pc(e),this.roundA=Math.round(100*this.a)/100,this},e.prototype.isMonochrome=function(){return 0===this.toHsl().s},e.prototype.toHsv=function(){var e=Rc(this.r,this.g,this.b);return{h:360*e.h,s:e.s,v:e.v,a:this.a}},e.prototype.toHsvString=function(){var e=Rc(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.v);return 1===this.a?"hsv(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsva(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHsl=function(){var e=zc(this.r,this.g,this.b);return{h:360*e.h,s:e.s,l:e.l,a:this.a}},e.prototype.toHslString=function(){var e=zc(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.l);return 1===this.a?"hsl(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsla(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHex=function(e){return void 0===e&&(e=!1),Fc(this.r,this.g,this.b,e)},e.prototype.toHexString=function(e){return void 0===e&&(e=!1),"#"+this.toHex(e)},e.prototype.toHex8=function(e){return void 0===e&&(e=!1),function(e,t,n,r,o){var a,i=[Bc(Math.round(e).toString(16)),Bc(Math.round(t).toString(16)),Bc(Math.round(n).toString(16)),Bc((a=r,Math.round(255*parseFloat(a)).toString(16)))];return o&&i[0].startsWith(i[0].charAt(1))&&i[1].startsWith(i[1].charAt(1))&&i[2].startsWith(i[2].charAt(1))&&i[3].startsWith(i[3].charAt(1))?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0)+i[3].charAt(0):i.join("")}(this.r,this.g,this.b,this.a,e)},e.prototype.toHex8String=function(e){return void 0===e&&(e=!1),"#"+this.toHex8(e)},e.prototype.toHexShortString=function(e){return void 0===e&&(e=!1),1===this.a?this.toHexString(e):this.toHex8String(e)},e.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},e.prototype.toRgbString=function(){var e=Math.round(this.r),t=Math.round(this.g),n=Math.round(this.b);return 1===this.a?"rgb(".concat(e,", ").concat(t,", ").concat(n,")"):"rgba(".concat(e,", ").concat(t,", ").concat(n,", ").concat(this.roundA,")")},e.prototype.toPercentageRgb=function(){var e=function(e){return"".concat(Math.round(100*_c(e,255)),"%")};return{r:e(this.r),g:e(this.g),b:e(this.b),a:this.a}},e.prototype.toPercentageRgbString=function(){var e=function(e){return Math.round(100*_c(e,255))};return 1===this.a?"rgb(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%)"):"rgba(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%, ").concat(this.roundA,")")},e.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var e="#"+Fc(this.r,this.g,this.b,!1),t=0,n=Object.entries(Gc);t<n.length;t++){var r=n[t],o=r[0];if(e===r[1])return o}return!1},e.prototype.toString=function(e){var t=Boolean(e);e=null!=e?e:this.format;var n=!1,r=this.a<1&&this.a>=0;return t||!r||!e.startsWith("hex")&&"name"!==e?("rgb"===e&&(n=this.toRgbString()),"prgb"===e&&(n=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(n=this.toHexString()),"hex3"===e&&(n=this.toHexString(!0)),"hex4"===e&&(n=this.toHex8String(!0)),"hex8"===e&&(n=this.toHex8String()),"name"===e&&(n=this.toName()),"hsl"===e&&(n=this.toHslString()),"hsv"===e&&(n=this.toHsvString()),n||this.toHexString()):"name"===e&&0===this.a?this.toName():this.toRgbString()},e.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},e.prototype.clone=function(){return new e(this.toString())},e.prototype.lighten=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l+=t/100,n.l=Tc(n.l),new e(n)},e.prototype.brighten=function(t){void 0===t&&(t=10);var n=this.toRgb();return n.r=Math.max(0,Math.min(255,n.r-Math.round(-t/100*255))),n.g=Math.max(0,Math.min(255,n.g-Math.round(-t/100*255))),n.b=Math.max(0,Math.min(255,n.b-Math.round(-t/100*255))),new e(n)},e.prototype.darken=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l-=t/100,n.l=Tc(n.l),new e(n)},e.prototype.tint=function(e){return void 0===e&&(e=10),this.mix("white",e)},e.prototype.shade=function(e){return void 0===e&&(e=10),this.mix("black",e)},e.prototype.desaturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s-=t/100,n.s=Tc(n.s),new e(n)},e.prototype.saturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s+=t/100,n.s=Tc(n.s),new e(n)},e.prototype.greyscale=function(){return this.desaturate(100)},e.prototype.spin=function(t){var n=this.toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,new e(n)},e.prototype.mix=function(t,n){void 0===n&&(n=50);var r=this.toRgb(),o=new e(t).toRgb(),a=n/100;return new e({r:(o.r-r.r)*a+r.r,g:(o.g-r.g)*a+r.g,b:(o.b-r.b)*a+r.b,a:(o.a-r.a)*a+r.a})},e.prototype.analogous=function(t,n){void 0===t&&(t=6),void 0===n&&(n=30);var r=this.toHsl(),o=360/n,a=[this];for(r.h=(r.h-(o*t>>1)+720)%360;--t;)r.h=(r.h+o)%360,a.push(new e(r));return a},e.prototype.complement=function(){var t=this.toHsl();return t.h=(t.h+180)%360,new e(t)},e.prototype.monochromatic=function(t){void 0===t&&(t=6);for(var n=this.toHsv(),r=n.h,o=n.s,a=n.v,i=[],l=1/t;t--;)i.push(new e({h:r,s:o,v:a})),a=(a+l)%1;return i},e.prototype.splitcomplement=function(){var t=this.toHsl(),n=t.h;return[this,new e({h:(n+72)%360,s:t.s,l:t.l}),new e({h:(n+216)%360,s:t.s,l:t.l})]},e.prototype.onBackground=function(t){var n=this.toRgb(),r=new e(t).toRgb(),o=n.a+r.a*(1-n.a);return new e({r:(n.r*n.a+r.r*r.a*(1-n.a))/o,g:(n.g*n.a+r.g*r.a*(1-n.a))/o,b:(n.b*n.a+r.b*r.a*(1-n.a))/o,a:o})},e.prototype.triad=function(){return this.polyad(3)},e.prototype.tetrad=function(){return this.polyad(4)},e.prototype.polyad=function(t){for(var n=this.toHsl(),r=n.h,o=[this],a=360/t,i=1;i<t;i++)o.push(new e({h:(r+i*a)%360,s:n.s,l:n.l}));return o},e.prototype.equals=function(t){return this.toRgbString()===new e(t).toRgbString()},e}();const mh=(e,t)=>new hh(e).setAlpha(t).toRgbString(),yh=(e,t)=>new hh(e).darken(t).toHexString(),vh=e=>{const t=cu(e);return{1:t[0],2:t[1],3:t[2],4:t[3],5:t[4],6:t[5],7:t[6],8:t[4],9:t[5],10:t[6]}},gh=(e,t)=>{const n=e||"#fff",r=t||"#000";return{colorBgBase:n,colorTextBase:r,colorText:mh(r,.88),colorTextSecondary:mh(r,.65),colorTextTertiary:mh(r,.45),colorTextQuaternary:mh(r,.25),colorFill:mh(r,.15),colorFillSecondary:mh(r,.06),colorFillTertiary:mh(r,.04),colorFillQuaternary:mh(r,.02),colorBgLayout:yh(n,4),colorBgContainer:yh(n,0),colorBgElevated:yh(n,0),colorBgSpotlight:mh(r,.85),colorBgBlur:"transparent",colorBorder:yh(n,15),colorBorderSecondary:yh(n,6)}},bh=(wh=function(e){const t=Object.keys(dh).map((t=>{const n=cu(e[t]);return new Array(10).fill(1).reduce(((e,r,o)=>(e[`${t}-${o+1}`]=n[o],e[`${t}${o+1}`]=n[o],e)),{})})).reduce(((e,t)=>Object.assign(Object.assign({},e),t)),{});return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},e),t),function(e,t){let{generateColorPalettes:n,generateNeutralColorPalettes:r}=t;const{colorSuccess:o,colorWarning:a,colorError:i,colorInfo:l,colorPrimary:c,colorBgBase:u,colorTextBase:s}=e,f=n(c),d=n(o),p=n(a),h=n(i),m=n(l),y=r(u,s),v=n(e.colorLink||e.colorInfo);return Object.assign(Object.assign({},y),{colorPrimaryBg:f[1],colorPrimaryBgHover:f[2],colorPrimaryBorder:f[3],colorPrimaryBorderHover:f[4],colorPrimaryHover:f[5],colorPrimary:f[6],colorPrimaryActive:f[7],colorPrimaryTextHover:f[8],colorPrimaryText:f[9],colorPrimaryTextActive:f[10],colorSuccessBg:d[1],colorSuccessBgHover:d[2],colorSuccessBorder:d[3],colorSuccessBorderHover:d[4],colorSuccessHover:d[4],colorSuccess:d[6],colorSuccessActive:d[7],colorSuccessTextHover:d[8],colorSuccessText:d[9],colorSuccessTextActive:d[10],colorErrorBg:h[1],colorErrorBgHover:h[2],colorErrorBorder:h[3],colorErrorBorderHover:h[4],colorErrorHover:h[5],colorError:h[6],colorErrorActive:h[7],colorErrorTextHover:h[8],colorErrorText:h[9],colorErrorTextActive:h[10],colorWarningBg:p[1],colorWarningBgHover:p[2],colorWarningBorder:p[3],colorWarningBorderHover:p[4],colorWarningHover:p[4],colorWarning:p[6],colorWarningActive:p[7],colorWarningTextHover:p[8],colorWarningText:p[9],colorWarningTextActive:p[10],colorInfoBg:m[1],colorInfoBgHover:m[2],colorInfoBorder:m[3],colorInfoBorderHover:m[4],colorInfoHover:m[4],colorInfo:m[6],colorInfoActive:m[7],colorInfoTextHover:m[8],colorInfoText:m[9],colorInfoTextActive:m[10],colorLinkHover:v[4],colorLink:v[6],colorLinkActive:v[7],colorBgMask:new hh("#000").setAlpha(.45).toRgbString(),colorWhite:"#fff"})}(e,{generateColorPalettes:vh,generateNeutralColorPalettes:gh})),(e=>{const t=function(e){const t=new Array(10).fill(null).map(((t,n)=>{const r=n-1,o=e*Math.pow(2.71828,r/5),a=n>1?Math.floor(o):Math.ceil(o);return 2*Math.floor(a/2)}));return t[1]=e,t.map((e=>({size:e,lineHeight:(e+8)/e})))}(e),n=t.map((e=>e.size)),r=t.map((e=>e.lineHeight)),o=n[1],a=n[0],i=n[2],l=r[1],c=r[0],u=r[2];return{fontSizeSM:a,fontSize:o,fontSizeLG:i,fontSizeXL:n[3],fontSizeHeading1:n[6],fontSizeHeading2:n[5],fontSizeHeading3:n[4],fontSizeHeading4:n[3],fontSizeHeading5:n[2],lineHeight:l,lineHeightLG:u,lineHeightSM:c,fontHeight:Math.round(l*o),fontHeightLG:Math.round(u*i),fontHeightSM:Math.round(c*a),lineHeightHeading1:r[6],lineHeightHeading2:r[5],lineHeightHeading3:r[4],lineHeightHeading4:r[3],lineHeightHeading5:r[2]}})(e.fontSize)),function(e){const{sizeUnit:t,sizeStep:n}=e;return{sizeXXL:t*(n+8),sizeXL:t*(n+4),sizeLG:t*(n+2),sizeMD:t*(n+1),sizeMS:t*n,size:t*n,sizeSM:t*(n-1),sizeXS:t*(n-2),sizeXXS:t*(n-3)}}(e)),(e=>{const{controlHeight:t}=e;return{controlHeightSM:.75*t,controlHeightXS:.5*t,controlHeightLG:1.25*t}})(e)),function(e){const{motionUnit:t,motionBase:n,borderRadius:r,lineWidth:o}=e;return Object.assign({motionDurationFast:`${(n+t).toFixed(1)}s`,motionDurationMid:`${(n+2*t).toFixed(1)}s`,motionDurationSlow:`${(n+3*t).toFixed(1)}s`,lineWidthBold:o+1},(e=>{let t=e,n=e,r=e,o=e;return e<6&&e>=5?t=e+1:e<16&&e>=6?t=e+2:e>=16&&(t=16),e<7&&e>=5?n=4:e<8&&e>=7?n=5:e<14&&e>=8?n=6:e<16&&e>=14?n=7:e>=16&&(n=8),e<6&&e>=2?r=1:e>=6&&(r=2),e>4&&e<8?o=4:e>=8&&(o=6),{borderRadius:e,borderRadiusXS:r,borderRadiusSM:n,borderRadiusLG:t,borderRadiusOuter:o}})(r))}(e))},xh=Array.isArray(wh)?wh:[wh],bp.has(xh)||bp.set(xh,new gp(xh)),bp.get(xh));var wh,xh;const Eh={token:ph,override:{override:ph},hashed:!0},Ah=t.createContext(Eh);function Sh(e){return e>=0&&e<=255}const kh=function(e,t){const{r:n,g:r,b:o,a}=new hh(e).toRgb();if(a<1)return e;const{r:i,g:l,b:c}=new hh(t).toRgb();for(let e=.01;e<=1;e+=.01){const t=Math.round((n-i*(1-e))/e),a=Math.round((r-l*(1-e))/e),u=Math.round((o-c*(1-e))/e);if(Sh(t)&&Sh(a)&&Sh(u))return new hh({r:t,g:a,b:u,a:Math.round(100*e)/100}).toRgbString()}return new hh({r:n,g:r,b:o,a:1}).toRgbString()};var Ch=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};function Lh(e){const{override:t}=e,n=Ch(e,["override"]),r=Object.assign({},t);Object.keys(ph).forEach((e=>{delete r[e]}));const o=Object.assign(Object.assign({},n),r);if(!1===o.motion){const e="0s";o.motionDurationFast=e,o.motionDurationMid=e,o.motionDurationSlow=e}return Object.assign(Object.assign(Object.assign({},o),{colorFillContent:o.colorFillSecondary,colorFillContentHover:o.colorFill,colorFillAlter:o.colorFillQuaternary,colorBgContainerDisabled:o.colorFillTertiary,colorBorderBg:o.colorBgContainer,colorSplit:kh(o.colorBorderSecondary,o.colorBgContainer),colorTextPlaceholder:o.colorTextQuaternary,colorTextDisabled:o.colorTextQuaternary,colorTextHeading:o.colorText,colorTextLabel:o.colorTextSecondary,colorTextDescription:o.colorTextTertiary,colorTextLightSolid:o.colorWhite,colorHighlight:o.colorError,colorBgTextHover:o.colorFillSecondary,colorBgTextActive:o.colorFill,colorIcon:o.colorTextTertiary,colorIconHover:o.colorText,colorErrorOutline:kh(o.colorErrorBg,o.colorBgContainer),colorWarningOutline:kh(o.colorWarningBg,o.colorBgContainer),fontSizeIcon:o.fontSizeSM,lineWidthFocus:4*o.lineWidth,lineWidth:o.lineWidth,controlOutlineWidth:2*o.lineWidth,controlInteractiveSize:o.controlHeight/2,controlItemBgHover:o.colorFillTertiary,controlItemBgActive:o.colorPrimaryBg,controlItemBgActiveHover:o.colorPrimaryBgHover,controlItemBgActiveDisabled:o.colorFill,controlTmpOutline:o.colorFillQuaternary,controlOutline:kh(o.colorPrimaryBg,o.colorBgContainer),lineType:o.lineType,borderRadius:o.borderRadius,borderRadiusXS:o.borderRadiusXS,borderRadiusSM:o.borderRadiusSM,borderRadiusLG:o.borderRadiusLG,fontWeightStrong:600,opacityLoading:.65,linkDecoration:"none",linkHoverDecoration:"none",linkFocusDecoration:"none",controlPaddingHorizontal:12,controlPaddingHorizontalSM:8,paddingXXS:o.sizeXXS,paddingXS:o.sizeXS,paddingSM:o.sizeSM,padding:o.size,paddingMD:o.sizeMD,paddingLG:o.sizeLG,paddingXL:o.sizeXL,paddingContentHorizontalLG:o.sizeLG,paddingContentVerticalLG:o.sizeMS,paddingContentHorizontal:o.sizeMS,paddingContentVertical:o.sizeSM,paddingContentHorizontalSM:o.size,paddingContentVerticalSM:o.sizeXS,marginXXS:o.sizeXXS,marginXS:o.sizeXS,marginSM:o.sizeSM,margin:o.size,marginMD:o.sizeMD,marginLG:o.sizeLG,marginXL:o.sizeXL,marginXXL:o.sizeXXL,boxShadow:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowSecondary:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowTertiary:"\n      0 1px 2px 0 rgba(0, 0, 0, 0.03),\n      0 1px 6px -1px rgba(0, 0, 0, 0.02),\n      0 2px 4px 0 rgba(0, 0, 0, 0.02)\n    ",screenXS:480,screenXSMin:480,screenXSMax:575,screenSM:576,screenSMMin:576,screenSMMax:767,screenMD:768,screenMDMin:768,screenMDMax:991,screenLG:992,screenLGMin:992,screenLGMax:1199,screenXL:1200,screenXLMin:1200,screenXLMax:1599,screenXXL:1600,screenXXLMin:1600,boxShadowPopoverArrow:"2px 2px 5px rgba(0, 0, 0, 0.05)",boxShadowCard:`\n      0 1px 2px -2px ${new hh("rgba(0, 0, 0, 0.16)").toRgbString()},\n      0 3px 6px 0 ${new hh("rgba(0, 0, 0, 0.12)").toRgbString()},\n      0 5px 12px 4px ${new hh("rgba(0, 0, 0, 0.09)").toRgbString()}\n    `,boxShadowDrawerRight:"\n      -6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      -3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      -9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerLeft:"\n      6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerUp:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerDown:"\n      0 -6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 -3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 -9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowTabsOverflowLeft:"inset 10px 0 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowRight:"inset -10px 0 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowTop:"inset 0 10px 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowBottom:"inset 0 -10px 8px -8px rgba(0, 0, 0, 0.08)"}),r)}var Oh=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};const jh={lineHeight:!0,lineHeightSM:!0,lineHeightLG:!0,lineHeightHeading1:!0,lineHeightHeading2:!0,lineHeightHeading3:!0,lineHeightHeading4:!0,lineHeightHeading5:!0,opacityLoading:!0,fontWeightStrong:!0,zIndexPopupBase:!0,zIndexBase:!0},Nh={size:!0,sizeSM:!0,sizeLG:!0,sizeMD:!0,sizeXS:!0,sizeXXS:!0,sizeMS:!0,sizeXL:!0,sizeXXL:!0,sizeUnit:!0,sizeStep:!0,motionBase:!0,motionUnit:!0},_h={screenXS:!0,screenXSMin:!0,screenXSMax:!0,screenSM:!0,screenSMMin:!0,screenSMMax:!0,screenMD:!0,screenMDMin:!0,screenMDMax:!0,screenLG:!0,screenLGMin:!0,screenLGMax:!0,screenXL:!0,screenXLMin:!0,screenXLMax:!0,screenXXL:!0,screenXXLMin:!0},Th=(e,t,n)=>{const r=n.getDerivativeToken(e),{override:o}=t,a=Oh(t,["override"]);let i=Object.assign(Object.assign({},r),{override:o});return i=Lh(i),a&&Object.entries(a).forEach((e=>{let[t,n]=e;const{theme:r}=n,o=Oh(n,["theme"]);let a=o;r&&(a=Th(Object.assign(Object.assign({},i),o),{override:o},r)),i[t]=a})),i};function Ph(){const{token:e,hashed:n,theme:r,override:o,cssVar:a}=t.useContext(Ah),i=`${fh}-${n||""}`,l=r||bh,[c,u,s]=Wp(l,[ph,e],{salt:i,override:o,getComputedToken:Th,formatToken:Lh,cssVar:a&&{prefix:a.prefix,key:a.key,unitless:jh,ignore:Nh,preserve:_h}});return[l,s,n?u:"",c,a]}const Ih=Gf((function e(){$f(this,e)}));let Bh=function(e){Uf(n,e);var t=Wf(n);function n(e){var r;return $f(this,n),(r=t.call(this)).result=0,e instanceof n?r.result=e.result:"number"==typeof e&&(r.result=e),r}return Gf(n,[{key:"add",value:function(e){return e instanceof n?this.result+=e.result:"number"==typeof e&&(this.result+=e),this}},{key:"sub",value:function(e){return e instanceof n?this.result-=e.result:"number"==typeof e&&(this.result-=e),this}},{key:"mul",value:function(e){return e instanceof n?this.result*=e.result:"number"==typeof e&&(this.result*=e),this}},{key:"div",value:function(e){return e instanceof n?this.result/=e.result:"number"==typeof e&&(this.result/=e),this}},{key:"equal",value:function(){return this.result}}]),n}(Ih);const zh="CALC_UNIT";function Mh(e){return"number"==typeof e?`${e}${zh}`:e}let Rh=function(e){Uf(n,e);var t=Wf(n);function n(e){var r;return $f(this,n),(r=t.call(this)).result="",e instanceof n?r.result=`(${e.result})`:"number"==typeof e?r.result=Mh(e):"string"==typeof e&&(r.result=e),r}return Gf(n,[{key:"add",value:function(e){return e instanceof n?this.result=`${this.result} + ${e.getResult()}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} + ${Mh(e)}`),this.lowPriority=!0,this}},{key:"sub",value:function(e){return e instanceof n?this.result=`${this.result} - ${e.getResult()}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} - ${Mh(e)}`),this.lowPriority=!0,this}},{key:"mul",value:function(e){return this.lowPriority&&(this.result=`(${this.result})`),e instanceof n?this.result=`${this.result} * ${e.getResult(!0)}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} * ${e}`),this.lowPriority=!1,this}},{key:"div",value:function(e){return this.lowPriority&&(this.result=`(${this.result})`),e instanceof n?this.result=`${this.result} / ${e.getResult(!0)}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} / ${e}`),this.lowPriority=!1,this}},{key:"getResult",value:function(e){return this.lowPriority||e?`(${this.result})`:this.result}},{key:"equal",value:function(e){const{unit:t=!0}=e||{},n=new RegExp(`${zh}`,"g");return this.result=this.result.replace(n,t?"px":""),void 0!==this.lowPriority?`calc(${this.result})`:this.result}}]),n}(Ih);const Fh="undefined"!=typeof CSSINJS_STATISTIC;let $h=!0;function Dh(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];if(!Fh)return Object.assign.apply(Object,[{}].concat(t));$h=!1;const r={};return t.forEach((e=>{Object.keys(e).forEach((t=>{Object.defineProperty(r,t,{configurable:!0,enumerable:!0,get:()=>e[t]})}))})),$h=!0,r}const Gh={};function Uh(){}const Hh=(e,t,n)=>{var r;return"function"==typeof n?n(Dh(t,null!==(r=t[e])&&void 0!==r?r:{})):null!=n?n:{}},Wh=(e,t,n,r)=>{const o=Object.assign({},t[e]);if(null==r?void 0:r.deprecatedTokens){const{deprecatedTokens:e}=r;e.forEach((e=>{let[t,n]=e;var r;((null==o?void 0:o[t])||(null==o?void 0:o[n]))&&(null!==(r=o[n])&&void 0!==r||(o[n]=null==o?void 0:o[t]))}))}let a=Object.assign(Object.assign({},n),o);return(null==r?void 0:r.format)&&(a=r.format(a)),Object.keys(a).forEach((e=>{a[e]===t[e]&&delete a[e]})),a};function Yh(e,n,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const a=Array.isArray(e)?e:[e,e],[i]=a,l=a.join("-");return e=>{const[a,c,u,s,f]=Ph(),{getPrefixCls:d,iconPrefixCls:p,csp:h}=(0,t.useContext)(ap),m=d(),y=f?"css":"js",v=(e=>{const t="css"===e?Rh:Bh;return e=>new t(e)})(y),{max:g,min:b}=function(e){return"js"===e?{max:Math.max,min:Math.min}:{max:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return`max(${t.map((e=>jp(e))).join(",")})`},min:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return`min(${t.map((e=>jp(e))).join(",")})`}}}(y),w={theme:a,token:s,hashId:u,nonce:()=>null==h?void 0:h.nonce,clientOnly:o.clientOnly,order:o.order||-999};rh(Object.assign(Object.assign({},w),{clientOnly:!1,path:["Shared",m]}),(()=>[{"&":ch(s)}])),((e,t)=>{const[n,r]=Ph();rh({theme:n,token:r,hashId:"",path:["ant-design-icons",e],nonce:()=>null==t?void 0:t.nonce},(()=>[{[`.${e}`]:Object.assign(Object.assign({},{display:"inline-flex",alignItems:"center",color:"inherit",fontStyle:"normal",lineHeight:0,textAlign:"center",textTransform:"none",verticalAlign:"-0.125em",textRendering:"optimizeLegibility","-webkit-font-smoothing":"antialiased","-moz-osx-font-smoothing":"grayscale","> *":{lineHeight:1},svg:{display:"inline-block"}}),{[`.${e} .${e}-icon`]:{display:"block"}})}]))})(p,h);const x=rh(Object.assign(Object.assign({},w),{path:[l,e,p]}),(()=>{if(!1===o.injectStyle)return[];const{token:t,flush:a}=function(e){let t,n=e,r=Uh;return Fh&&"undefined"!=typeof Proxy&&(t=new Set,n=new Proxy(e,{get:(e,n)=>($h&&t.add(n),e[n])}),r=(e,n)=>{var r;Gh[e]={global:Array.from(t),component:Object.assign(Object.assign({},null===(r=Gh[e])||void 0===r?void 0:r.component),n)}}),{token:n,keys:t,flush:r}}(s),l=Hh(i,c,r),d=`.${e}`,h=Wh(i,c,l,{deprecatedTokens:o.deprecatedTokens,format:o.format});f&&Object.keys(l).forEach((e=>{l[e]=`var(${_p(e,((e,t)=>`${[t,e.replace(/([A-Z]+)([A-Z][a-z]+)/g,"$1-$2").replace(/([a-z])([A-Z])/g,"$1-$2")].filter(Boolean).join("-")}`)(i,f.prefix))})`}));const y=Dh(t,{componentCls:d,prefixCls:e,iconCls:`.${p}`,antCls:`.${m}`,calc:v,max:g,min:b},f?l:h),w=n(y,{hashId:u,prefixCls:e,rootPrefixCls:m,iconPrefixCls:p});return a(i,h),[!1===o.resetStyle?null:uh(y,e),w]}));return[x,Nc()(u,null==f?void 0:f.key)]}}const Vh=e=>{const{componentCls:t,contentBg:n,padding:r,headerBg:o,headerPadding:a,collapseHeaderPaddingSM:i,collapseHeaderPaddingLG:l,collapsePanelBorderRadius:c,lineWidth:u,lineType:s,colorBorder:f,colorText:d,colorTextHeading:p,colorTextDisabled:h,fontSizeLG:m,lineHeight:y,lineHeightLG:v,marginSM:g,paddingSM:b,paddingLG:w,paddingXS:x,motionDurationSlow:E,fontSizeIcon:A,contentPadding:S,fontHeight:k,fontHeightLG:C}=e,L=`${jp(u)} ${s} ${f}`;return{[t]:Object.assign(Object.assign({},lh(e)),{backgroundColor:o,border:L,borderBottom:0,borderRadius:c,"&-rtl":{direction:"rtl"},[`& > ${t}-item`]:{borderBottom:L,"&:last-child":{[`\n            &,\n            & > ${t}-header`]:{borderRadius:`0 0 ${jp(c)} ${jp(c)}`}},[`> ${t}-header`]:{position:"relative",display:"flex",flexWrap:"nowrap",alignItems:"flex-start",padding:a,color:p,lineHeight:y,cursor:"pointer",transition:`all ${E}, visibility 0s`,[`> ${t}-header-text`]:{flex:"auto"},"&:focus":{outline:"none"},[`${t}-expand-icon`]:{height:k,display:"flex",alignItems:"center",paddingInlineEnd:g},[`${t}-arrow`]:Object.assign(Object.assign({},{display:"inline-flex",alignItems:"center",color:"inherit",fontStyle:"normal",lineHeight:0,textAlign:"center",textTransform:"none",verticalAlign:"-0.125em",textRendering:"optimizeLegibility","-webkit-font-smoothing":"antialiased","-moz-osx-font-smoothing":"grayscale","> *":{lineHeight:1},svg:{display:"inline-block"}}),{fontSize:A,svg:{transition:`transform ${E}`}}),[`${t}-header-text`]:{marginInlineEnd:"auto"}},[`${t}-icon-collapsible-only`]:{cursor:"unset",[`${t}-expand-icon`]:{cursor:"pointer"}}},[`${t}-content`]:{color:d,backgroundColor:n,borderTop:L,[`& > ${t}-content-box`]:{padding:S},"&-hidden":{display:"none"}},"&-small":{[`> ${t}-item`]:{[`> ${t}-header`]:{padding:i,paddingInlineStart:x,[`> ${t}-expand-icon`]:{marginInlineStart:e.calc(b).sub(x).equal()}},[`> ${t}-content > ${t}-content-box`]:{padding:b}}},"&-large":{[`> ${t}-item`]:{fontSize:m,lineHeight:v,[`> ${t}-header`]:{padding:l,paddingInlineStart:r,[`> ${t}-expand-icon`]:{height:C,marginInlineStart:e.calc(w).sub(r).equal()}},[`> ${t}-content > ${t}-content-box`]:{padding:w}}},[`${t}-item:last-child`]:{[`> ${t}-content`]:{borderRadius:`0 0 ${jp(c)} ${jp(c)}`}},[`& ${t}-item-disabled > ${t}-header`]:{"\n          &,\n          & > .arrow\n        ":{color:h,cursor:"not-allowed"}},[`&${t}-icon-position-end`]:{[`& > ${t}-item`]:{[`> ${t}-header`]:{[`${t}-expand-icon`]:{order:1,paddingInlineEnd:0,paddingInlineStart:g}}}}})}},qh=e=>{const{componentCls:t}=e;return{[`${t}-rtl`]:{[`> ${t}-item > ${t}-header ${t}-arrow svg`]:{transform:"rotate(180deg)"}}}},Kh=e=>{const{componentCls:t,headerBg:n,paddingXXS:r,colorBorder:o}=e;return{[`${t}-borderless`]:{backgroundColor:n,border:0,[`> ${t}-item`]:{borderBottom:`1px solid ${o}`},[`\n        > ${t}-item:last-child,\n        > ${t}-item:last-child ${t}-header\n      `]:{borderRadius:0},[`> ${t}-item:last-child`]:{borderBottom:0},[`> ${t}-item > ${t}-content`]:{backgroundColor:"transparent",borderTop:0},[`> ${t}-item > ${t}-content > ${t}-content-box`]:{paddingTop:r}}}},Xh=e=>{const{componentCls:t,paddingSM:n}=e;return{[`${t}-ghost`]:{backgroundColor:"transparent",border:0,[`> ${t}-item`]:{borderBottom:0,[`> ${t}-content`]:{backgroundColor:"transparent",border:0,[`> ${t}-content-box`]:{paddingBlock:n}}}}}},Qh=((e,n,r,o)=>{const a=Yh(e,(e=>{const t=Dh(e,{collapseHeaderPaddingSM:`${jp(e.paddingXS)} ${jp(e.paddingSM)}`,collapseHeaderPaddingLG:`${jp(e.padding)} ${jp(e.paddingLG)}`,collapsePanelBorderRadius:e.borderRadiusLG});return[Vh(t),Kh(t),Xh(t),qh(t),sh(t)]}),r,o),i=((e,n,r)=>{function o(t){return`${e}${t.slice(0,1).toUpperCase()}${t.slice(1)}`}const{unitless:a={},injectStyle:i=!0}={},l={[o("zIndexPopup")]:!0};Object.keys(a).forEach((e=>{l[o(e)]=a[e]}));const c=r=>{let{rootCls:a,cssVar:i}=r;const[,c]=Ph();return function(e,n){var r=e.key,o=e.prefix,a=e.unitless,i=e.ignore,l=e.token,c=e.scope,u=void 0===c?"":c,s=(0,t.useContext)(mp),f=s.cache.instanceId,d=s.container,p=l._tokenKey,h=[].concat(jf(e.path),[r,u,p]);Rp(oh,h,(function(){var e=n(),t=Sc(Pp(e,r,{prefix:o,unitless:a,ignore:i,scope:u}),2),l=t[0],c=t[1];return[l,c,eh(h,c),r]}),(function(e){var t=Sc(e,3)[2];Op&&Cu(t,{mark:dp})}),(function(e){var t=Sc(e,3),n=t[1],o=t[2];if(n){var a=Lu(n,o,{mark:dp,prepend:"queue",attachTo:d,priority:-999});a[pp]=f,a.setAttribute(fp,r)}}))}({path:[e],prefix:i.prefix,key:null==i?void 0:i.key,unitless:Object.assign(Object.assign({},jh),l),ignore:Nh,token:c,scope:a},(()=>{const t=Hh(e,c,n),r=Wh(e,c,t,{format:void 0,deprecatedTokens:void 0});return Object.keys(t).forEach((e=>{r[o(e)]=r[e],delete r[e]})),r})),null};return n=>{const[,,,,r]=Ph();return o=>i&&r?t.createElement(t.Fragment,null,t.createElement(c,{rootCls:n,cssVar:r,component:e}),o):o}})(e,r);return function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;const[,n]=a(e);return[i(t),n]}})("Collapse",0,(e=>({headerPadding:`${e.paddingSM}px ${e.padding}px`,headerBg:e.colorFillAlter,contentPadding:`${e.padding}px 16px`,contentBg:e.colorBgContainer}))),Zh=t.forwardRef(((e,n)=>{const{getPrefixCls:r,direction:o,collapse:a}=t.useContext(ap),{prefixCls:i,className:l,rootClassName:c,style:u,bordered:s=!0,ghost:f,size:d,expandIconPosition:p="start",children:h,expandIcon:m}=e,y=(e=>{const n=t.useContext(lp);return t.useMemo((()=>e?"string"==typeof e?null!=e?e:n:e instanceof Function?e(n):n:n),[e,n])})((e=>{var t;return null!==(t=null!=d?d:e)&&void 0!==t?t:"middle"})),v=r("collapse",i),g=r(),[b,w]=Qh(v),x=t.useMemo((()=>"left"===p?"start":"right"===p?"end":p),[p]),E=Nc()(`${v}-icon-position-${x}`,{[`${v}-borderless`]:!s,[`${v}-rtl`]:"rtl"===o,[`${v}-ghost`]:!!f,[`${v}-${y}`]:"middle"!==y},null==a?void 0:a.className,l,c,w),A=Object.assign(Object.assign({},function(){return{motionName:`${arguments.length>0&&void 0!==arguments[0]?arguments[0]:"ant"}-motion-collapse`,onAppearStart:Jd,onEnterStart:Jd,onAppearActive:ep,onEnterActive:ep,onLeaveStart:tp,onLeaveActive:Jd,onAppearEnd:np,onEnterEnd:np,onLeaveEnd:np,motionDeadline:500}}(g)),{motionAppear:!1,leavedClassName:`${v}-content-hidden`}),S=t.useMemo((()=>h?Rf(h).map(((e,t)=>{var n,r;if(null===(n=e.props)||void 0===n?void 0:n.disabled){const n=null!==(r=e.key)&&void 0!==r?r:String(t),{disabled:o,collapsible:a}=e.props;return op(e,Object.assign(Object.assign({},Zd(e.props,["disabled"])),{key:n,collapsible:null!=a?a:o?"disabled":void 0}))}return e})):null),[h]);return b(t.createElement(Qd,Object.assign({ref:n,openMotion:A},Zd(e,["rootClassName"]),{expandIcon:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const n=m?m(e):t.createElement(Of,{rotate:e.isActive?90:void 0});return op(n,(()=>({className:Nc()(n.props.className,`${v}-arrow`)})))},prefixCls:v,className:E,style:Object.assign(Object.assign({},null==a?void 0:a.style),u)}),S))})),Jh=Object.assign(Zh,{Panel:cp});function em(e){return em="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},em(e)}function tm(){tm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==em(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(em(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function nm(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function rm(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return om(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?om(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function om(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const am=function(){var e=rm((0,t.useState)([]),2),n=e[0],r=e[1],o=rm((0,t.useState)(null),2),a=(o[0],o[1]);(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=tm().mark((function e(){var t,n;return tm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/riddles",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data,r(n[0]),console.log("podaci iz zagonetki",n),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),a(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){nm(a,r,o,i,l,"next",e)}function l(e){nm(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),l=n.answer;return t.createElement("div",{className:"trivia"},t.createElement("h2",null,"Riddles"),t.createElement("h3",null,n.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},l),showArrow:!1}]}))};function im(e){return im="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},im(e)}function lm(){lm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==im(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(im(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function cm(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function um(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){cm(a,r,o,i,l,"next",e)}function l(e){cm(a,r,o,i,l,"throw",e)}i(void 0)}))}}function sm(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return fm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const dm=function(){var e=sm((0,t.useState)(null),2),n=(e[0],e[1]),r=sm((0,t.useState)([]),2),o=r[0],a=r[1],i=sm((0,t.useState)([]),2),l=i[0],c=i[1];(0,t.useEffect)((function(){u(),s()}),[]);var u=function(){var e=um(lm().mark((function e(){var t,r;return lm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://yesno.wtf/api");case 4:t=e.sent,r=t.data,console.log("randum sala",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}(),s=function(){var e=um(lm().mark((function e(){var t,r;return lm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://www.punapi.rest/api/pun");case 4:t=e.sent,r=t.data,console.log("random punapi",r),c(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"jokesMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Random GIF"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,t.createElement("img",{src:o.image}))),t.createElement("tr",null,t.createElement("td",{className:"borderGif"},o.answer)),t.createElement("tr",null,t.createElement("td",{className:"pun"},"Pun")),t.createElement("tr",null,t.createElement("td",null,l.pun)))))};function pm(e){return pm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},pm(e)}function hm(){hm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==pm(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(pm(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function mm(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function ym(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return vm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?vm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const gm=function(){var e=ym((0,t.useState)(null),2),n=(e[0],e[1]),r=ym((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=hm().mark((function e(){var t,r;return hm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/dadjokes?limit=2",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,r=t.data,console.log("randum tatine sale",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){mm(a,r,o,i,l,"next",e)}function l(e){mm(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"dadJokes"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Dad jokes"))),o.map((function(e){return t.createElement("tbody",{key:e.joke},t.createElement("tr",null,t.createElement("td",{className:"border"},e.joke)))}))))};function bm(e){return bm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},bm(e)}function wm(){wm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==bm(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(bm(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function xm(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Em(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){xm(a,r,o,i,l,"next",e)}function l(e){xm(a,r,o,i,l,"throw",e)}i(void 0)}))}}function Am(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Sm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Sm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const km=function(){var e=Am((0,t.useState)(null),2),n=(e[0],e[1]),r=Am((0,t.useState)([]),2),o=r[0],a=r[1],i=Am((0,t.useState)([]),2),l=i[0],c=i[1];(0,t.useEffect)((function(){u(),f()}),[]);var u=function(){var e=Em(wm().mark((function e(){var t,r;return wm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.chucknorris.io/jokes/random");case 4:t=e.sent,r=t.data,console.log("chuk norris sale",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}(),s=Math.random(),f=function(){var e=Em(wm().mark((function e(){var t;return wm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://robohash.org/set_set2/".concat(s,".png"),e.prev=1,e.next=4,zl.get(t);case 4:e.sent,console.log("robot randum slike",s),c(t),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"dadJokes"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},"Chuk Norris jokes"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,o.value)),t.createElement("tr",null,t.createElement("td",{className:"borderChuk"},"Created: ",o.created_at)),t.createElement("tr",null,t.createElement("td",null,t.createElement("img",{src:l}))))))};function Cm(e){return Cm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Cm(e)}function Lm(){Lm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Cm(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Cm(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Om(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function jm(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Nm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Nm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const _m=function(){var e=jm((0,t.useState)(null),2),n=(e[0],e[1]),r=jm((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=Lm().mark((function e(){var t,r;return Lm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://v2.jokeapi.dev/joke/Any?safe-mode");case 4:t=e.sent,r=t.data,console.log("random jokes",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Om(a,r,o,i,l,"next",e)}function l(e){Om(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),l=o.delivery;return t.createElement(t.Fragment,null,t.createElement("div",{className:"jokeMain"},t.createElement("h3",null,"Joke "),t.createElement("h3",null,"Category: ",o.category),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"jokeAnswer"},o.setup,"  ",o.joke),children:t.createElement("p",{className:"jokeAns"},l),showArrow:!1}]})))};function Tm(e){return Tm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tm(e)}function Pm(){Pm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Tm(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Tm(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Im(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Bm(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return zm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Mm=function(){var e=Bm((0,t.useState)(null),2),n=(e[0],e[1]),r=Bm((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=Pm().mark((function e(){var t,r;return Pm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://official-joke-api.appspot.com/random_joke");case 4:t=e.sent,r=t.data,console.log("oficial jokes",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Im(a,r,o,i,l,"next",e)}function l(e){Im(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),l=o.punchline;return t.createElement(t.Fragment,null,t.createElement("div",{className:"jokeMain"},t.createElement("h3",null,"Random Joke"),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"jokeAnswer"},o.setup),children:t.createElement("p",{className:"jokeAns"},l),showArrow:!1}]})))};function Rm(e){return Rm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Rm(e)}function Fm(){Fm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Rm(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Rm(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function $m(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Dm(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Gm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Gm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Um=function(){var e=Dm((0,t.useState)(null),2),n=(e[0],e[1]),r=Dm((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=Fm().mark((function e(){var t,r;return Fm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/jokes?limit=3",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,r=t.data,console.log("rezultat gradova",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){$m(a,r,o,i,l,"next",e)}function l(e){$m(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"dadJokes"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null)),t.createElement("tr",null,t.createElement("th",null,"Random Jokes"))),o.map((function(e){return t.createElement("tbody",{key:e.joke},t.createElement("tr",null,t.createElement("td",{className:"border"},e.joke)))}))))};function Hm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Wm=function(){var e,n,r=(e=(0,t.useState)(null),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return Hm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hm(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return r[0],r[1],t.createElement(t.Fragment,null,t.createElement("div",{className:"jokesText"},t.createElement("div",null,t.createElement(_m,null),t.createElement(Mm,null)),t.createElement("div",null,t.createElement(dm,null)),t.createElement("div",null,t.createElement(gm,null),t.createElement(Um,null),t.createElement(km,null))))};function Ym(e){return Ym="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ym(e)}function Vm(){Vm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Ym(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ym(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function qm(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Km(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Xm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Xm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Qm=function(e){var n=Km((0,t.useState)([]),2),r=n[0],o=n[1],a=Km((0,t.useState)(null),2),i=(a[0],a[1]),l=Km((0,t.useState)(!0),2),c=l[0],u=l[1];wa().triviaCat,(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=Vm().mark((function e(){var t,n;return Vm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=artliterature",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),console.log("podaci iz  trivia",n),u(!1),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),i(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){qm(a,r,o,i,l,"next",e)}function l(e){qm(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Art & Literature"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]}))};function Zm(e){return Zm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zm(e)}function Jm(){Jm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Zm(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Zm(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ey(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function ty(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ny(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ny(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ny(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ry=function(e){var n=ty((0,t.useState)([]),2),r=n[0],o=n[1],a=ty((0,t.useState)(null),2),i=(a[0],a[1]),l=ty((0,t.useState)(!0),2),c=l[0],u=l[1];wa().triviaCat,(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=Jm().mark((function e(){var t,n;return Jm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=sciencenature",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),console.log("podaci iz  trivia",n),u(!1),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),i(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ey(a,r,o,i,l,"next",e)}function l(e){ey(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Science & Nature"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]}))};function oy(e){return oy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},oy(e)}function ay(){ay=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==oy(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(oy(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function iy(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function ly(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cy(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const uy=function(e){var n=ly((0,t.useState)([]),2),r=n[0],o=n[1],a=ly((0,t.useState)(null),2),i=(a[0],a[1]),l=ly((0,t.useState)(!0),2),c=l[0],u=l[1];wa(),(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=ay().mark((function e(){var t,n;return ay().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=general",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),console.log("podaci iz  trivia general",n),u(!1),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),i(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){iy(a,r,o,i,l,"next",e)}function l(e){iy(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement("div",{className:"trivia"},t.createElement("h3",null,"General"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]}))};function sy(e){return sy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sy(e)}function fy(){fy=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==sy(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(sy(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function dy(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function py(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return hy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?hy(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const my=function(e){var n=py((0,t.useState)([]),2),r=n[0],o=n[1],a=py((0,t.useState)(null),2),i=(a[0],a[1]),l=py((0,t.useState)(!0),2),c=l[0],u=l[1];wa().triviaCat,(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=fy().mark((function e(){var t,n;return fy().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=fooddrink",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),u(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),i(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){dy(a,r,o,i,l,"next",e)}function l(e){dy(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Food & Drink"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]})))};function yy(e){return yy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yy(e)}function vy(){vy=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==yy(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(yy(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function gy(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function by(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return wy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?wy(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const xy=function(e){var n=by((0,t.useState)([]),2),r=n[0],o=n[1],a=by((0,t.useState)(null),2),i=(a[0],a[1]),l=by((0,t.useState)(!0),2),c=l[0],u=l[1];wa().triviaCat,(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=vy().mark((function e(){var t,n;return vy().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=peopleplaces",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),u(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),i(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){gy(a,r,o,i,l,"next",e)}function l(e){gy(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"People & Place"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]})))};function Ey(e){return Ey="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ey(e)}function Ay(){Ay=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Ey(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ey(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Sy(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function ky(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Cy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Cy(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Cy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ly=function(e){var n=ky((0,t.useState)([]),2),r=n[0],o=n[1],a=ky((0,t.useState)(null),2),i=(a[0],a[1]),l=ky((0,t.useState)(!0),2),c=l[0],u=l[1];wa().triviaCat,(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=Ay().mark((function e(){var t,n;return Ay().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=historyholidays",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),u(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),i(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Sy(a,r,o,i,l,"next",e)}function l(e){Sy(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"History & Holidays"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]})))};function Oy(e){return Oy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Oy(e)}function jy(){jy=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Oy(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Oy(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Ny(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function _y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ty(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ty(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ty(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Py=function(e){var n=_y((0,t.useState)([]),2),r=n[0],o=n[1],a=_y((0,t.useState)(null),2),i=(a[0],a[1]),l=_y((0,t.useState)(!0),2),c=l[0],u=l[1];wa().triviaCat,(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=jy().mark((function e(){var t,n;return jy().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=geography",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),u(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),i(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ny(a,r,o,i,l,"next",e)}function l(e){Ny(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Geography"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]})))};function Iy(e){return Iy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Iy(e)}function By(){By=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Iy(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Iy(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function zy(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function My(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ry(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ry(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ry(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Fy=function(e){var n=My((0,t.useState)([]),2),r=n[0],o=n[1],a=My((0,t.useState)(null),2),i=(a[0],a[1]),l=My((0,t.useState)(!0),2),c=l[0],u=l[1];wa().triviaCat,(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=By().mark((function e(){var t,n;return By().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=entertainment",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),u(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),i(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){zy(a,r,o,i,l,"next",e)}function l(e){zy(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Entertainment"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]})))};function $y(e){return $y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$y(e)}function Dy(){Dy=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==$y(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError($y(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Gy(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Uy(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Hy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hy(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Wy=function(e){var n=Uy((0,t.useState)([]),2),r=n[0],o=n[1],a=Uy((0,t.useState)(null),2),i=(a[0],a[1]),l=Uy((0,t.useState)(!0),2),c=l[0],u=l[1];wa().triviaCat,(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=Dy().mark((function e(){var t,n;return Dy().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=toysgames",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),u(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),i(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Gy(a,r,o,i,l,"next",e)}function l(e){Gy(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Toys & Games"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]})))};function Yy(e){return Yy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Yy(e)}function Vy(){Vy=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Yy(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Yy(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function qy(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Ky(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Xy(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Xy(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xy(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Qy=function(e){var n=Ky((0,t.useState)([]),2),r=n[0],o=n[1],a=Ky((0,t.useState)(null),2),i=(a[0],a[1]),l=Ky((0,t.useState)(!0),2),c=l[0],u=l[1];wa().triviaCat,(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=Vy().mark((function e(){var t,n;return Vy().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=music",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),u(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),i(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){qy(a,r,o,i,l,"next",e)}function l(e){qy(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Music"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]})))};function Zy(e){return Zy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zy(e)}function Jy(){Jy=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Zy(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Zy(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ev(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function tv(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return nv(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nv(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nv(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const rv=function(e){var n=tv((0,t.useState)([]),2),r=n[0],o=n[1],a=tv((0,t.useState)(null),2),i=(a[0],a[1]),l=tv((0,t.useState)(!0),2),c=l[0],u=l[1];wa().triviaCat,(0,t.useEffect)((function(){s()}),[]);var s=function(){var e,t=(e=Jy().mark((function e(){var t,n;return Jy().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=language",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],o(n),u(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),i(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ev(a,r,o,i,l,"next",e)}function l(e){ev(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),f=r.answer;return c?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Language"),t.createElement("p",null,r.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},f),showArrow:!1}]})))};function ov(e){return ov="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ov(e)}function av(){av=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==ov(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(ov(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function iv(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function lv(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cv(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cv(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cv(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const uv=function(){var e=lv((0,t.useState)([]),2),n=e[0],r=e[1],o=lv((0,t.useState)(null),2),a=(o[0],o[1]),i=lv((0,t.useState)(!0),2),l=i[0],c=i[1];(0,t.useEffect)((function(){u()}),[]);var u=function(){var e,t=(e=av().mark((function e(){var t,n;return av().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=religionmythology",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],r(n),c(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),a(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){iv(a,r,o,i,l,"next",e)}function l(e){iv(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),s=n.answer;return l?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Religion & Mythology"),t.createElement("p",null,n.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},s),showArrow:!1}]})))};function sv(e){return sv="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sv(e)}function fv(){fv=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==sv(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(sv(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function dv(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function pv(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return hv(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?hv(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hv(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const mv=function(){var e=pv((0,t.useState)([]),2),n=e[0],r=e[1],o=pv((0,t.useState)(null),2),a=(o[0],o[1]),i=pv((0,t.useState)(!0),2),l=i[0],c=i[1];(0,t.useEffect)((function(){u()}),[]);var u=function(){var e,t=(e=fv().mark((function e(){var t,n;return fv().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=sportsleisure",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],r(n),c(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),a(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){dv(a,r,o,i,l,"next",e)}function l(e){dv(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),s=n.answer;return l?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Sports & Leisure"),t.createElement("p",null,n.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},s),showArrow:!1}]})))};function yv(e){return yv="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yv(e)}function vv(){vv=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:C(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==yv(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function C(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(yv(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(k.prototype),u(k.prototype,l,(function(){return this})),t.AsyncIterator=k,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new k(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;j(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function gv(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function bv(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return wv(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?wv(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wv(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const xv=function(){var e=bv((0,t.useState)([]),2),n=e[0],r=e[1],o=bv((0,t.useState)(null),2),a=(o[0],o[1]),i=bv((0,t.useState)(!0),2),l=i[0],c=i[1];(0,t.useEffect)((function(){u()}),[]);var u=function(){var e,t=(e=vv().mark((function e(){var t,n;return vv().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,zl.get("https://api.api-ninjas.com/v1/trivia?category=mathematics",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,n=t.data[0],r(n),c(!1),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),a(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){gv(a,r,o,i,l,"next",e)}function l(e){gv(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),s=n.answer;return l?t.createElement("div",{className:"trivia"},t.createElement(js,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Mathematics"),t.createElement("p",null,n.title),t.createElement(Jh,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},s),showArrow:!1}]})))};var Ev=it({palette:{primary:De,secondary:{50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5"}}});const Av=function(){return t.createElement(t.Fragment,null,t.createElement($a,{basename:"/"},t.createElement("div",null,t.createElement($n,{theme:Ev},t.createElement(Ha,{to:"/"},t.createElement(Co,{variant:"contained"},"Home")),t.createElement(Ha,{to:"/search"},t.createElement(Co,{variant:"contained",color:"secondary",sx:{ml:1}},"Search")),t.createElement(Ha,{to:"/jokes"},t.createElement(Co,{variant:"contained",color:"secondary",sx:{ml:1}},"Jokes")),t.createElement(Ha,{to:"/pickTrivia"},t.createElement(Co,{variant:"contained",color:"secondary",sx:{ml:1}},"Quiz")))),t.createElement(Ta,null,t.createElement(Na,{path:"/",element:t.createElement(Ul,null)}),t.createElement(Na,{path:"/search",element:t.createElement(Es,null)}),t.createElement(Na,{path:"/poznati",element:t.createElement(Vs,null)}),t.createElement(Na,{path:"/jokes",element:t.createElement(Wm,null)}),t.createElement(Na,{path:"/pickTrivia",element:t.createElement(bf,null)}),t.createElement(Na,{path:"/logo",element:t.createElement(Bs,null)}),t.createElement(Na,{path:"/dictionary",element:t.createElement(Ds,null)}),t.createElement(Na,{path:"/history",element:t.createElement(Js,null)}),t.createElement(Na,{path:"/historyEvents",element:t.createElement(af,null)}),t.createElement(Na,{path:"/historyPerson",element:t.createElement(df,null)}),t.createElement(Na,{path:"/historyPerson/:personName",element:t.createElement(gf,null)}),t.createElement(Na,{path:"/trivia/:triviaCat",element:t.createElement(Qm,null)}),t.createElement(Na,{path:"/advice",element:t.createElement(kf,null)}),t.createElement(Na,{path:"/ridles",element:t.createElement(am,null)}),t.createElement(Na,{path:"/art",element:t.createElement(Qm,null)}),t.createElement(Na,{path:"/science",element:t.createElement(ry,null)}),t.createElement(Na,{path:"/general",element:t.createElement(uy,null)}),t.createElement(Na,{path:"/food",element:t.createElement(my,null)}),t.createElement(Na,{path:"/people",element:t.createElement(xy,null)}),t.createElement(Na,{path:"/history",element:t.createElement(Ly,null)}),t.createElement(Na,{path:"/geography",element:t.createElement(Py,null)}),t.createElement(Na,{path:"/entertainment",element:t.createElement(Fy,null)}),t.createElement(Na,{path:"/toys",element:t.createElement(Wy,null)}),t.createElement(Na,{path:"/music",element:t.createElement(Qy,null)}),t.createElement(Na,{path:"/language",element:t.createElement(rv,null)}),t.createElement(Na,{path:"/religion",element:t.createElement(uv,null)}),t.createElement(Na,{path:"/sport",element:t.createElement(mv,null)}),t.createElement(Na,{path:"/mathematics",element:t.createElement(xv,null)}))),t.createElement(Va,null))};function Sv(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const kv=function(){var e,n,r=(e=(0,t.useState)("Enter search criterium!"),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return Sv(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Sv(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];return t.createElement(wc.Provider,{value:{setSearchStringFn:a,searchStringValue:o}},t.createElement(Av,null))};r.createRoot(document.getElementById("app")).render(t.createElement(t.StrictMode,null,t.createElement(kv,{number:10,title:"String from index file",text:"Text from index file"})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsR0FBSSxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsR0FBSSxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsR0FBSSxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxHQUFhLEVBQUcsR0FBSSxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxF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QUFTbnZCLFFBQVM2eEQsRUFBQUEsY0FBQ21wRSxHQUFXLFFBQzFDbnBFLEVBQUFBLGNBQUN0RixHQUFLLENBQUNwOUIsS0FBSyxlQUFlbnZCLFFBQVM2eEQsRUFBQUEsY0FBQ29wRSxHQUFpQixVQVNoRXBwRSxFQUFBQSxjQUFDOCtCLEdBQU8sTUFPUiw2R0UxSUEsU0FkWSxXQUNSLFFBQTJFN2UsTUFBbkMzOEQsRUFBQUEsRUFBQUEsVUFBUyw2QkFBMEIsczVCQUFwRTBnRCxFQUFZaWMsRUFBQSxHQUFFb3BELEVBQWVwcEQsRUFBQSxHQUNyQyxPQUNDamdCLEVBQUFBLGNBQUNxNkIsR0FBY3ZrRSxTQUFRLENBQ3ZCbmxDLE1BQU8sQ0FDSGkzRixrQkFBbUJ5aEQsRUFDbkIxaEQsa0JBQW1CM2pCLElBR25CaEUsRUFBQUEsY0FBQ3NwRSxHQUFVLE1BSW5CLEVDU1dDLEVBQUFBLFdBQW9CaCtJLFNBQVNpK0ksZUFBZSxRQUNsRDlpSixPQUNKczVFLEVBQUFBLGNBQUNBLEVBQUFBLFdBQWdCLEtBQ2xCQSxFQUFBQSxjQUFDeXBFLEdBQUcsQ0FDQzkvSCxPQUFRLEdBQ1I0M0YsTUFBTSx5QkFDTnYzRixLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3Rqcy93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9zY3NzL21haW4uc2NzcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2Nzcy9zdHlsZXMuY3NzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yZWFjdGpzL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3JlYWN0anMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3JlYWN0anMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9yZWFjdGpzL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jc3Mvc3R5bGVzLmNzcz85OWEzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvc2Nzcy9tYWluLnNjc3M/NmQyNSIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZm9ybWF0TXVpRXJyb3JNZXNzYWdlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL3NoYXBlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2JyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY2FwaXRhbGl6ZS9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lcmdlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jb21wb3NlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2JvcmRlcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzR3JpZC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvZGVmYXVsdFN4Q29uZmlnLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlRnVuY3Rpb25TeC9zdHlsZUZ1bmN0aW9uU3guanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlU3BhY2luZy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvZ3JleS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3B1cnBsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL29yYW5nZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2JsdWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9saWdodEJsdWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmVlbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVBhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRyYW5zaXRpb25zLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy91c2VUaGVtZS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvcHJpdmF0ZS10aGVtaW5nL1RoZW1lUHJvdmlkZXIvbmVzdGVkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvVGhlbWVQcm92aWRlci9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2hlZXQvZGlzdC9lbW90aW9uLXNoZWV0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9VdGlsaXR5LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9Ub2tlbml6ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL0VudW0uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1BhcnNlci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2NhY2hlL2Rpc3QvZW1vdGlvbi1jYWNoZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvZW1vdGlvbi11bml0bGVzcy5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvZW1vdGlvbi1tZW1vaXplLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NlcmlhbGl6ZS9kaXN0L2Vtb3Rpb24tc2VyaWFsaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2Vtb3Rpb24taGFzaC5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy9kaXN0L2Vtb3Rpb24tdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tZWxlbWVudC1jMzk2MTdkOC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVdpdGhvdXREZWZhdWx0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL1RoZW1lUHJvdmlkZXIvVGhlbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2lkZW50aWZpZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubWpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vcmVzb2x2ZVByb3BzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY29tcG9zZUNsYXNzZXMvY29tcG9zZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3V0aWxzL2Rpc3QvZW1vdGlvbi11dGlscy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9kaXN0L2Vtb3Rpb24tc3R5bGVkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3Byb3BzVG9DbGFzc0tleS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVTdHlsZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy91c2VUaGVtZVByb3BzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VGb3JrUmVmL3VzZUZvcmtSZWYuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9zZXRSZWYuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUZvcmtSZWYuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VFbmhhbmNlZEVmZmVjdC91c2VFbmhhbmNlZEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUV2ZW50Q2FsbGJhY2svdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VJc0ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvUmlwcGxlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vQ2xhc3NOYW1lR2VuZXJhdG9yL0NsYXNzTmFtZUdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2dlbmVyYXRlVXRpbGl0eUNsYXNzL2dlbmVyYXRlVXRpbGl0eUNsYXNzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL3RvdWNoUmlwcGxlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9Ub3VjaFJpcHBsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9idXR0b25CYXNlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b24vYnV0dG9uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uR3JvdXAvQnV0dG9uR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25Hcm91cC9CdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbi9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AcmVtaXgtcnVuL3JvdXRlci9kaXN0L3JvdXRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9Gb290ZXJzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b0Zvcm1EYXRhLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvQmxvYi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9jb21tb24vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0hlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy9hZGFwdGVycy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy90cml2aWEvUmFuZG9tRmFjdC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvSG9tZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2dldE92ZXJsYXlBbHBoYS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFwZXIvcGFwZXJDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9QYXBlci9QYXBlci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL293bmVyV2luZG93L293bmVyV2luZG93LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb3duZXJEb2N1bWVudC9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1RleHRhcmVhQXV0b3NpemUvVGV4dGFyZWFBdXRvc2l6ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2RlYm91bmNlL2RlYm91bmNlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL2lzSG9zdENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VFbmhhbmNlZEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3R5bGVkLWVuZ2luZS9HbG9iYWxTdHlsZXMvR2xvYmFsU3R5bGVzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL0dsb2JhbFN0eWxlcy9HbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dsb2JhbFN0eWxlcy9HbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0QmFzZS91dGlscy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL2lucHV0QmFzZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0QmFzZS9JbnB1dEJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JY29uQnV0dG9uL2ljb25CdXR0b25DbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JY29uQnV0dG9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL0dsb2JhbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL1RlYW1PdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Qcm9wZXJ0eUtleS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BjdHJsL3Rpbnljb2xvci9kaXN0L21vZHVsZS91dGlsLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL2NvbnZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AY3RybC90aW55Y29sb3IvZGlzdC9tb2R1bGUvY3NzLWNvbG9yLW5hbWVzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL2Zvcm1hdC1pbnB1dC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2NvbG9ycy9lcy9nZW5lcmF0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2NvbG9ycy9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9jYW5Vc2VEb20uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9keW5hbWljQ1NTLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0RvbS9zaGFkb3cuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy91dGlscy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2NvbXBvbmVudHMvSWNvbkJhc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9jb21wb25lbnRzL3R3b1RvbmVQcmltYXJ5Q29sb3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9jb21wb25lbnRzL0FudGRJY29uLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMvZXMvaWNvbnMvVGVhbU91dGxpbmVkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvU2VhcmNoQm94LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9Db3B5cmlnaHRPdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL0NvcHlyaWdodE91dGxpbmVkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvU2VhcmNoTG9nby5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vVHJhbnNsYXRpb25PdXRsaW5lZC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL1RyYW5zbGF0aW9uT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9EaWN0aW9uYXJ5LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9IaXN0b3J5T3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9IaXN0b3J5T3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9zZWFyY2hIaXN0b3J5LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9SZWFkT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9SZWFkT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9zZWFyY2hIaXN0b3J5RXZlbnRzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9Vc2VyT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9Vc2VyT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9TZWFyY2hQZXJzb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL1F1ZXN0aW9uQ2lyY2xlT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9RdWVzdGlvbkNpcmNsZU91dGxpbmVkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvU2VhcmNoQWR2aWNlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvU2VhcmNoUGxhY2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9lc20vaGVscGVycy91bml0Q29udmVydGVyLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZXNtL2hlbHBlcnMvYW5pbWF0aW9uLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZXNtL1B1ZmZMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL0xvYWRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL1Jlc3VsdHNMb2dvLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvUmVzdWx0c0RpY3Rpb25hcnkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9SZXN1bHRzQ2VsZWJzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvUmVzdWx0c0hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9SZXN1bHRzSGlzdG9yeUV2ZW50cy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL1Jlc3VsdHNQZXJzb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9EZXRhaWxzUGVyc29uLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy90cml2aWEvUGlja1RyaXZpYS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL1Jlc3VsdHNBZHZpY2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL1JpZ2h0T3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9pY29ucy9lcy9pY29ucy9SaWdodE91dGxpbmVkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9ob29rcy91c2VFdmVudC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvaG9va3MvdXNlTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9ob29rcy91c2VTdGF0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvaG9va3MvdXNlTWVyZ2VkU3RhdGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL0NoaWxkcmVuL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvY29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL0RvbVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaW50ZXJmYWNlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL3V0aWwvbW90aW9uLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL2hvb2tzL3VzZURvbU1vdGlvbkV2ZW50cy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9ob29rcy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9yYWYuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlU3RlcFF1ZXVlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtbW90aW9uL2VzL0NTU01vdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9ob29rcy91c2VTdGF0dXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvaG9va3MvdXNlTmV4dEZyYW1lLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9Eb20vZmluZERPTU5vZGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy11dGlsL2VzL3JlZi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy91dGlsL2RpZmYuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy1tb3Rpb24vZXMvQ1NTTW90aW9uTGlzdC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLW1vdGlvbi9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvS2V5Q29kZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLWNvbGxhcHNlL2VzL1BhbmVsQ29udGVudC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLWNvbGxhcHNlL2VzL1BhbmVsLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtY29sbGFwc2UvZXMvaG9va3MvdXNlSXRlbXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9yYy1jb2xsYXBzZS9lcy9Db2xsYXBzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLWNvbGxhcHNlL2VzL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvcmMtdXRpbC9lcy9vbWl0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9fdXRpbC9tb3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL191dGlsL3JlYWN0Tm9kZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvY29uZmlnLXByb3ZpZGVyL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2NvbmZpZy1wcm92aWRlci9TaXplQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvY29sbGFwc2UvQ29sbGFwc2VQYW5lbC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2Nzc2luanMvbm9kZV9tb2R1bGVzL0BlbW90aW9uL2hhc2gvZGlzdC9oYXNoLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vY3NzaW5qcy9lcy9DYWNoZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2Nzc2luanMvZXMvU3R5bGVDb250ZXh0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vY3NzaW5qcy9lcy90aGVtZS9UaGVtZUNhY2hlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vY3NzaW5qcy9lcy90aGVtZS9UaGVtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2Nzc2luanMvZXMvdGhlbWUvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9jc3NpbmpzL2VzL3V0aWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9jc3NpbmpzL2VzL3V0aWwvY3NzLXZhcmlhYmxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2Nzc2luanMvZXMvaG9va3MvdXNlQ29tcGF0aWJsZUluc2VydGlvbkVmZmVjdC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2Nzc2luanMvZXMvaG9va3MvdXNlRWZmZWN0Q2xlYW51cFJlZ2lzdGVyLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vY3NzaW5qcy9lcy9ob29rcy91c2VITVIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9jc3NpbmpzL2VzL2hvb2tzL3VzZUdsb2JhbENhY2hlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vY3NzaW5qcy9lcy9ob29rcy91c2VDYWNoZVRva2VuLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vY3NzaW5qcy9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL0BhbnQtZGVzaWduL2Nzc2luanMvZXMvdXRpbC9jYWNoZU1hcFV0aWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9jc3NpbmpzL2VzL2hvb2tzL3VzZVN0eWxlUmVnaXN0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9jc3NpbmpzL2VzL2hvb2tzL3VzZUNTU1ZhclJlZ2lzdGVyLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGFudC1kZXNpZ24vY3NzaW5qcy9lcy9leHRyYWN0U3R5bGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9AYW50LWRlc2lnbi9jc3NpbmpzL2VzL3RyYW5zZm9ybWVycy9sZWdhY3lMb2dpY2FsUHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvc3R5bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3N0eWxlL21vdGlvbi9jb2xsYXBzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL3JjLXV0aWwvZXMvdXRpbHMvc2V0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy92ZXJzaW9uL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3ZlcnNpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RoZW1lL3RoZW1lcy9zZWVkLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQGN0cmwvdGlueWNvbG9yL2Rpc3QvbW9kdWxlL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90aGVtZS90aGVtZXMvc2hhcmVkL2dlblJhZGl1cy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvdGhlbWUvdGhlbWVzL2RlZmF1bHQvY29sb3JBbGdvcml0aG0uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RoZW1lL3RoZW1lcy9kZWZhdWx0L2NvbG9ycy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvdGhlbWUvY29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvdGhlbWUvdGhlbWVzL2RlZmF1bHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RoZW1lL3RoZW1lcy9zaGFyZWQvZ2VuQ29sb3JNYXBUb2tlbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvdGhlbWUvdGhlbWVzL3NoYXJlZC9nZW5Gb250TWFwVG9rZW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RoZW1lL3RoZW1lcy9zaGFyZWQvZ2VuRm9udFNpemVzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90aGVtZS90aGVtZXMvc2hhcmVkL2dlblNpemVNYXBUb2tlbi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvdGhlbWUvdGhlbWVzL3NoYXJlZC9nZW5Db250cm9sSGVpZ2h0LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90aGVtZS90aGVtZXMvc2hhcmVkL2dlbkNvbW1vbk1hcFRva2VuLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90aGVtZS91dGlsL2dldEFscGhhQ29sb3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RoZW1lL3V0aWwvYWxpYXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RoZW1lL3VzZVRva2VuLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90aGVtZS91dGlsL2NhbGMvY2FsY3VsYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvdGhlbWUvdXRpbC9jYWxjL051bUNhbGN1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RoZW1lL3V0aWwvY2FsYy9DU1NDYWxjdWxhdG9yLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90aGVtZS91dGlsL2NhbGMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL3RoZW1lL3V0aWwvc3RhdGlzdGljLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90aGVtZS91dGlsL3VzZVJlc2V0SWNvblN0eWxlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy90aGVtZS91dGlsL2dlbkNvbXBvbmVudFN0eWxlSG9vay5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvdGhlbWUvdXRpbC9tYXhtaW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2NvbGxhcHNlL3N0eWxlL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvYW50ZC9lcy9jb2xsYXBzZS9Db2xsYXBzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vbm9kZV9tb2R1bGVzL2FudGQvZXMvY29uZmlnLXByb3ZpZGVyL2hvb2tzL3VzZVNpemUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL25vZGVfbW9kdWxlcy9hbnRkL2VzL2NvbGxhcHNlL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy90cml2aWEvUmlkbGVzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9qb2tlcy9ZZXNOb0dpZi5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvam9rZXMvRGFkSm9rZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL2pva2VzL0NodWtOb3JyaXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL2pva2VzL0pva2VzUmFuZG9tLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9qb2tlcy9Kb2tlc09mZmljaWFsLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9qb2tlcy9SYW5kb21Kb2tlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9qb2tlcy9Kb2tlUGxhY2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3RyaXZpYS9Ucml2aWEuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3RyaXZpYS9Ucml2aWFTY2llbmNlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy90cml2aWEvVHJpdmlhR2VuZXJhbC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvdHJpdmlhL1RyaXZpYUZvb2QuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3RyaXZpYS9Ucml2aWFQZW9wbGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3RyaXZpYS9Ucml2aWFIaXN0b3J5LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy90cml2aWEvVHJpdmlhR2VvZ3JhcGh5LmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy90cml2aWEvVHJpdmlhRW50ZXJ0YWlubWVudC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvdHJpdmlhL1RyaXZpYVRveXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3RyaXZpYS9Ucml2aWFNdXNpYy5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvdHJpdmlhL1RyaXZpYUxhbmd1YWdlLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy90cml2aWEvVHJpdmlhUmVsaWdpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3Rqcy8uL3NyYy9jb21wb25lbnRzL3RyaXZpYS9Ucml2aWFTcG9ydC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2NvbXBvbmVudHMvdHJpdmlhL1RyaXZpYU1hdGhlbWF0aWNzLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uLmpzIiwid2VicGFjazovL3JlYWN0anMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvdGVhbC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL0FwcC5qcyIsIndlYnBhY2s6Ly9yZWFjdGpzLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsIi8qIVxuXHRDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cblx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcblx0aHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIG5hdGl2ZUNvZGVTdHJpbmcgPSAnW25hdGl2ZSBjb2RlXSc7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nICYmICFhcmcudG9TdHJpbmcudG9TdHJpbmcoKS5pbmNsdWRlcygnW25hdGl2ZSBjb2RlXScpKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgYm9keXtwYWRkaW5nOjBweDttYXJnaW46MHB4fS5mYWN0c3tkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDo5MDBweDtiYWNrZ3JvdW5kLWNvbG9yOiMwMDYwNjQ7Y29sb3I6I2IyZWJmMjtmb250LXNpemU6MzBweDt0ZXh0LXNoYWRvdzozcHggM3B4IDE1cHggYmxhY2s7Zm9udC1mYW1pbHk6J1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJztmb250LXdlaWdodDpib2xkfS5mYWN0cyAudGFibGV7d2lkdGg6NzAwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmZhY3RzIGhye2JvcmRlcjoxcHggc29saWQgIzRkZDBlMX0ubmF2aWdhdGlvbntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2JhY2tncm91bmQtY29sb3I6IzI5MzYyOTt3aWR0aDo4MDBweH0ubG9hZGVye21hcmdpbjphdXRvO3BhZGRpbmctdG9wOjM1MHB4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0uaGlzdG9yeXtmb250LXNpemU6MjhweDt0ZXh0LWFsaWduOmNlbnRlcjtoZWlnaHQ6ODBweDtmb250LWZhbWlseTonVHJlYnVjaGV0IE1TJywgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnLCAnTHVjaWRhIEdyYW5kZScsICdMdWNpZGEgU2FucycsIEFyaWFsLCBzYW5zLXNlcmlmfS5wYXBlcntkaXNwbGF5OmZsZXg7ZmxleC1iYXNpczphdXRvO21hcmdpbi10b3A6OHB4O2hlaWdodDozNXB4O2p1c3RpZnktaXRlbXM6Y2VudGVyO3dpZHRoOjI1MHB4fS5wYXBlciAuYmFzZXtqdXN0aWZ5LWl0ZW1zOmNlbnRlcjtoZWlnaHQ6MzBweDtwYWRkaW5nLXRvcDoxMXB4O3BhZGRpbmctbGVmdDoxNXB4O2ZvbnQtc2l6ZToyMnB4O2NvbG9yOmRvZGdlcmJsdWV9LnBsYWNle2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3dpZHRoOjYwMHB4O2hlaWdodDo0MzBweDttYXJnaW46YXV0bztiYWNrZ3JvdW5kLWNvbG9yOiNiZGQ4ZWU7cGFkZGluZzozMHB4IDE1cHg7Zm9udC1mYW1pbHk6J1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJzttYXJnaW4tdG9wOjEwcHh9LnBsYWNlIC5zZWFyY2h7d2lkdGg6MzAwcHh9LmRyemF2YXtjdXJzb3I6cG9pbnRlcn0uZHJ6YXZhOmhvdmVye2NvbG9yOiNmZmRkNTY7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LXNoYWRvdzoycHggMnB4IDEycHggYmxhY2t9LnRhYmVsYVplbWxqZXttYXJnaW46YXV0bzt3aWR0aDo4MDBweDtmb250LWZhbWlseTonVHJlYnVjaGV0IE1TJywgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnLCAnTHVjaWRhIEdyYW5kZScsICdMdWNpZGEgU2FucycsIEFyaWFsLCBzYW5zLXNlcmlmfS50YWJlbGFaZW1samUgLnJhem1ha3toZWlnaHQ6NzBweH0udGFiZWxhWmVtbGplIC5yZXN1bHRze2JhY2tncm91bmQtY29sb3I6I2JiZGVmYjtmb250LXNpemU6MThweH0udGFiZWxhWmVtbGplIC5uYXZvZHtmb250LXNpemU6MjRweDtkaXNwbGF5OmZsZXg7YWxpZ24tY29udGVudDpmbGV4LXN0YXJ0O3dpZHRoOjEyMHB4O3BhZGRpbmctbGVmdDo1cHh9LnRhYmVsYVplbWxqZSB0cjpudGgtY2hpbGQoZXZlbil7YmFja2dyb3VuZC1jb2xvcjojZTVlNGU3fS50YWJlbGFaZW1samUgLm5hbWVDb21te2ZvbnQtc2l6ZToyOHB4O3dpZHRoOjY1MHB4O3BhZGRpbmctbGVmdDo1cHh9LnRhYmVsYVplbWxqZSAuaGlzdG9yeXtmb250LXNpemU6MjhweDt0ZXh0LWFsaWduOmNlbnRlcjtoZWlnaHQ6NjBweH0udGFiZWxhWmVtbGplIC5jZWxlYnJpdHl7dGV4dC10cmFuc2Zvcm06Y2FwaXRhbGl6ZTt0ZXh0LWFsaWduOmxlZnR9LnRhYmVsYVplbWxqZSAuY2VsZWJyaXR5LC50YWJlbGFaZW1samUgLm5ldHdvcnRoe2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjMwcHh9LnRhYmVsYVplbWxqZSAuaGlzdG9yeVBlcnNvbntmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZTozMHB4O2N1cnNvcjpwb2ludGVyfS50YWJlbGFaZW1samUgLmhpc3RvcnlQZXJzb246aG92ZXJ7dGV4dC1zaGFkb3c6MXB4IDFweCAzcHggIzY0YjVmNn0udGFiZWxhWmVtbGplIC5kaWN0aW9uYXJ5e3dpZHRoOjgwMHB4O2ZvbnQtc2l6ZToyOHB4O3BhZGRpbmctbGVmdDoxMHB4fS50YWJlbGFaZW1samUgLm5hbWVDb21te2ZvbnQtc2l6ZToyNHB4fS50YWJlbGFaZW1samUgLm5hbWVDb21tIHVse3BhZGRpbmc6MH0udGFiZWxhWmVtbGplIC5uYW1lQ29tbSBsaXtsaXN0LXN0eWxlOm5vbmU7cGFkZGluZzowfS50YWJlbGFaZW1samUgLm1vcmV7ZGlzcGxheTpibG9jazthbGlnbi1pdGVtczplbmQ7d2lkdGg6MTIwcHg7Y29sb3I6IzE5NzZkMjtjdXJzb3I6cG9pbnRlcjtmb250LXNpemU6MjRweH0udGFiZWxhWmVtbGplIC5tb3JlOmhvdmVye2NvbG9yOiM2NGI1ZjZ9LnRhYmVsYVplbWxqZSBpbWd7d2lkdGg6NzAwcHh9LnRhYmVsYVplbWxqZSAuaW1nUm9ib3R7d2lkdGg6MzAwcHh9LnRhYmVsYVplbWxqZSBocntib3JkZXI6MnB4IHNvbGlkICM2YTc1N2V9LnRhYmVsYVplbWxqZSB0ZHtmb250LXNpemU6MjRweH0ubWFpbkRpdntiYWNrZ3JvdW5kLWNvbG9yOiNmZmUwYjJ9Lmpva2VzTWFpbntiYWNrZ3JvdW5kLWNvbG9yOiNiMmViZjI7d2lkdGg6NDAwcHg7Zm9udC1mYW1pbHk6J1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZn0uam9rZXNNYWluIHRoe2ZvbnQtc2l6ZTozMnB4fS5qb2tlc01haW4gdGR7cGFkZGluZzoyNXB4O2ZvbnQtc2l6ZTozNHB4O2ZvbnQtZmFtaWx5OidBcmlhbCBOYXJyb3cgQm9sZCcsIHNhbnMtc2VyaWZ9Lmpva2VzTWFpbiB0ZCBpbWd7d2lkdGg6NTAwcHh9Lmpva2VzTWFpbiAuYm9yZGVyR2lme2JvcmRlci1ib3R0b206MnB4IHNvbGlkICM2NzY3YmN9Lmpva2VzTWFpbiAucHVue3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZTozNHB4O2ZvbnQtd2VpZ2h0OmJvbGR9Lmpva2VzVGV4dHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZDt3aWR0aDoxNzAwcHg7Zm9udC1mYW1pbHk6J1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZn0uam9rZXNUZXh0IHRoe2ZvbnQtc2l6ZTozMnB4fS5qb2tlc1RleHQgdGR7cGFkZGluZzoyNXB4O2ZvbnQtc2l6ZTozNHB4O2ZvbnQtZmFtaWx5OidBcmlhbCBOYXJyb3cgQm9sZCcsIHNhbnMtc2VyaWZ9Lmpva2VzVGV4dCAuY3JlYXRlZHtmb250LXNpemU6MThweH0ucG96bmF0aU1haW57bWFyZ2luOmF1dG87ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7Ym9yZGVyOjJweCBzb2xpZCBibGFjazt3aWR0aDoxMjAwcHg7aGVpZ2h0OjE2NTBweH0ucHVuYXBpe3dpZHRoOjUwMHB4O2JvcmRlci1yYWRpdXM6MTBweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY4ZTE7Zm9udC1mYW1pbHk6J1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZn0ucHVuYXBpIHRoe2ZvbnQtc2l6ZToyOHB4O2NvbG9yOiMyYjdmN2Y7dGV4dC1hbGlnbjpjZW50ZXJ9LnB1bmFwaSB0ZHtmb250LXNpemU6MjhweDtwYWRkaW5nOjJweCAyMHB4fS5qb2tlTWFpbntib3JkZXItcmFkaXVzOjEycHg7d2lkdGg6NTAwcHg7bWFyZ2luOmF1dG87YmFja2dyb3VuZC1jb2xvcjojZjlmYmU3O3BhZGRpbmc6MjBweCAxNXB4O2ZvbnQtZmFtaWx5OidUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWZ9Lmpva2VNYWluIC5qb2tlQW5zd2VyLC5qb2tlTWFpbiAuam9rZUFuc3tmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToyOHB4O2NvbG9yOiMxYTIzN2V9Lmpva2VNYWluIC5qb2tlQW5zd2VyOmhvdmVye2NvbG9yOiNmZjhmMDB9LnRyaXZpYXt3aWR0aDo2MDBweDtoZWlnaHQ6OTAwcHg7bWFyZ2luOmF1dG87YmFja2dyb3VuZC1jb2xvcjojYmRkOGVlO3BhZGRpbmc6MzBweCAxNXB4O2ZvbnQtZmFtaWx5OidUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWZ9LnRyaXZpYSAuY2F0ZWdvcnl7d2lkdGg6MzAwcHg7aGVpZ2h0OjQwcHg7bWFyZ2luLXRvcDoxMHB4O2JhY2tncm91bmQtY29sb3I6IzgwZGVlYTtib3JkZXItcmFkaXVzOjdweDtmb250LXNpemU6MjRweDtwYWRkaW5nOjVweCAxNXB4O2N1cnNvcjpwb2ludGVyfS50cml2aWEgLmNhdGVnb3J5OmhvdmVye2JhY2tncm91bmQtY29sb3I6IzI2YzZkYX0udHJpdmlhIC50cml2aWFBbnN3ZXI6aG92ZXJ7Y29sb3I6IzM4OGUzY30udHJpdmlhIC50cml2aWFBbnN3ZXIsLnRyaXZpYSAudHJpdmlhQW5ze2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjI4cHg7Y29sb3I6IzFhMjM3ZX0uZGFkSm9rZXN7YmFja2dyb3VuZC1jb2xvcjojYzhlNmM5O3dpZHRoOjUwMHB4O2ZvbnQtc2l6ZToyNHB4O2ZvbnQtZmFtaWx5OidUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWZ9LmRhZEpva2VzIC5ib3JkZXJ7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgIzRkYjZhY30uZGFkSm9rZXMgLmJvcmRlckNodWt7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgIzRkYjZhYztmb250LXNpemU6MjBweH0uZGFkSm9rZXMgaW1ne3dpZHRoOjcwMHB4O3RleHQtYWxpZ246Y2VudGVyfS5mb290ZXJ7Zm9udC1mYW1pbHk6J1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nLXRvcDo0NTBweDtoZWlnaHQ6NDgwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTAwcHgpey5wbGFjZXttYXJnaW46MDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3dpZHRoOjM1MnB4fS5qb2tlc1RleHR7ZGlzcGxheTpibG9jazt3aWR0aDozNThweDtmb250LWZhbWlseTonVHJlYnVjaGV0IE1TJywgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnLCAnTHVjaWRhIEdyYW5kZScsICdMdWNpZGEgU2FucycsIEFyaWFsLCBzYW5zLXNlcmlmfS5qb2tlc1RleHQgdGh7Zm9udC1zaXplOjIycHh9Lmpva2VzVGV4dCB0ZHtwYWRkaW5nOjhweDtmb250LXNpemU6MjBweH0udHJpdmlhe3dpZHRoOjM1OHB4fS50cml2aWEgLnRyaXZpYUFuc3dlcntmb250LXNpemU6MjJweH0udHJpdmlhIC50cml2aWFBbnN7Zm9udC1zaXplOjIycHh9LnRyaXZpYSAuY2F0ZWdvcnl7Zm9udC1zaXplOjIwcHg7aGVpZ2h0OjM2cHh9LmZhY3Rze2ZvbnQtc2l6ZToxOHB4O3RleHQtc2hhZG93OjFweCAxcHggM3B4IGJsYWNrfS5mYWN0cyAudGFibGV7d2lkdGg6MzQwcHh9LmZhY3RzIC50YWJsZSB0ZHtwYWRkaW5nOjBweCA1cHh9Lmpva2VNYWlue3dpZHRoOjM1OHB4O2JvcmRlci1yYWRpdXM6MH0uam9rZU1haW4gLmpva2VBbnN3ZXJ7Zm9udC1zaXplOjIycHh9Lmpva2VNYWluIC5qb2tlQW5ze2ZvbnQtc2l6ZToyMnB4fS50YWJlbGFaZW1samV7d2lkdGg6MzUwcHh9LnRhYmVsYVplbWxqZSAucmF6bWFre2hlaWdodDoyMHB4fS50YWJlbGFaZW1samUgLmhpc3RvcnksLnRhYmVsYVplbWxqZSAuaGlzdG9yeVBlcnNvbntmb250LXNpemU6MjBweDtoZWlnaHQ6NDBweH0udGFiZWxhWmVtbGplIC5jZWxlYnJpdHl7Zm9udC1zaXplOjIycHg7cGFkZGluZy1sZWZ0OjhweH0udGFiZWxhWmVtbGplIC5kaWN0aW9uYXJ5e3BhZGRpbmctbGVmdDo4cHg7Zm9udC1zaXplOjIwcHh9LnRhYmVsYVplbWxqZSBpbWd7d2lkdGg6MzUwcHh9LnRhYmVsYVplbWxqZSAuaW1nUm9ib3R7d2lkdGg6MjAwcHh9LnRhYmVsYVplbWxqZSAubmF2b2QsLnRhYmVsYVplbWxqZSAubW9yZXtwYWRkaW5nLWxlZnQ6NHB4O2ZvbnQtc2l6ZToxNnB4O3dpZHRoOjk1cHh9LnRhYmVsYVplbWxqZSAubmFtZUNvbW17cGFkZGluZy1sZWZ0OjRweDtmb250LXNpemU6MjBweDt3aWR0aDoyNTVweH0udGFiZWxhWmVtbGplIC5uZXR3b3J0aHtmb250LXNpemU6MjRweH0uZGFkSm9rZXN7d2lkdGg6MzU4cHg7Zm9udC1zaXplOjE4cHh9LmRhZEpva2VzIC5jcmVhdGVke2ZvbnQtc2l6ZToxNHB4fS5kYWRKb2tlcyBocntib3JkZXI6MXB4IHNvbGlkfS5tYWluSm9rZXt3aWR0aDozNThweDtmb250LXNpemU6MjBweH0uam9rZXNNYWlue3dpZHRoOjM1OHB4O2JvcmRlci1yYWRpdXM6MDtmb250LWZhbWlseTonVHJlYnVjaGV0IE1TJywgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnLCAnTHVjaWRhIEdyYW5kZScsICdMdWNpZGEgU2FucycsIEFyaWFsLCBzYW5zLXNlcmlmfS5qb2tlc01haW4gdGh7Zm9udC1zaXplOjIwcHh9Lmpva2VzTWFpbiB0ZHtwYWRkaW5nOjE1cHg7Zm9udC1zaXplOjIwcHh9Lmpva2VzTWFpbiB0ZCBpbWd7d2lkdGg6MzUwcHh9Lmpva2VzTWFpbiAucHVue2ZvbnQtc2l6ZToyMnB4fX1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3Njc3MvbWFpbi5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLEtBQ0ksV0FBWSxDQUNaLFVBQVcsQ0FDZCxPQUdHLFlBQWEsQ0FDYixzQkFBdUIsQ0FJdkIsVUFBVyxDQUNYLFlBQWEsQ0FHYix3QkFBeUIsQ0FFekIsYUFBYyxDQUNkLGNBQWUsQ0FDZiw4QkFBK0IsQ0FFL0IsaURBQWtELENBRWxELGdCQUFpQixDQWxCckIsY0FxQlEsV0FBWSxDQUNaLGlCQUFrQixDQXRCMUIsVUEwQlEsd0JBQXlCLENBQzVCLFlBSUQsWUFBYSxDQUNiLHFCQUFzQixDQUN0Qix3QkFBeUIsQ0FDekIsV0FBWSxDQUNmLFFBR0csV0FBWSxDQUNaLGlCQUFrQixDQUNsQixZQUFhLENBQ2Isc0JBQXVCLENBQ3ZCLGtCQUFtQixDQUV0QixTQUdHLGNBQWUsQ0FDZixpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLG9HQUFxRyxDQUN4RyxP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dkIsYUFVUSxnQkFBaUIsQ0FDcEIsVUFJRCxXQUFZLENBQ1osY0FBZSxDQUNsQixXQUlHLFdBQVksQ0FDWixlQUFnQixDQUNoQixvR0FBcUcsQ0FKekcsY0FPUSxjQUFlLENBUHZCLGNBV1EsWUFBYSxDQUNiLGNBQWUsQ0FadkIsa0JBZ0JZLFdBQVksQ0FoQnhCLGdCQXFCUSxjQUFlLENBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImJvZHkge1xcclxcbiAgICBwYWRkaW5nOiAwcHg7XFxyXFxuICAgIG1hcmdpbjogMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZmFjdHMge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogOTAwcHg7XFxyXFxuXFxyXFxuXFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDYwNjQ7XFxyXFxuXFxyXFxuICAgIGNvbG9yOiAjYjJlYmYyO1xcclxcbiAgICBmb250LXNpemU6IDMwcHg7XFxyXFxuICAgIHRleHQtc2hhZG93OiAzcHggM3B4IDE1cHggYmxhY2s7XFxyXFxuXFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnVHJlYnVjaGV0IE1TJywgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnO1xcclxcbiAgICAvLyBwYWRkaW5nLXRvcDogMTBQWDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuXFxyXFxuICAgIC50YWJsZSB7XFxyXFxuICAgICAgICB3aWR0aDogNzAwcHg7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgaHIge1xcclxcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzRkZDBlMTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4ubmF2aWdhdGlvbiB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyOTM2Mjk7XFxyXFxuICAgIHdpZHRoOiA4MDBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmxvYWRlciB7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgcGFkZGluZy10b3A6IDM1MHB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuLmhpc3Rvcnkge1xcclxcbiAgICBmb250LXNpemU6IDI4cHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgaGVpZ2h0OiA4MHB4O1xcclxcbiAgICBmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG59XFxyXFxuXFxyXFxuLnBhcGVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1iYXNpczogYXV0bztcXHJcXG4gICAgbWFyZ2luLXRvcDogOHB4O1xcclxcblxcclxcbiAgICBoZWlnaHQ6IDM1cHg7XFxyXFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgd2lkdGg6IDI1MHB4O1xcclxcblxcclxcblxcclxcbiAgICAuYmFzZSB7XFxyXFxuICAgICAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XFxyXFxuXFxyXFxuICAgICAgICBoZWlnaHQ6IDMwcHg7XFxyXFxuICAgICAgICBwYWRkaW5nLXRvcDogMTFweDtcXHJcXG4gICAgICAgIHBhZGRpbmctbGVmdDogMTVweDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjJweDtcXHJcXG4gICAgICAgIGNvbG9yOiBkb2RnZXJibHVlO1xcclxcblxcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcblxcclxcblxcclxcbi5wbGFjZSB7XFxyXFxuXFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG5cXHJcXG4gICAgd2lkdGg6IDYwMHB4O1xcclxcbiAgICBoZWlnaHQ6IDQzMHB4O1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiZGQ4ZWU7XFxyXFxuICAgIHBhZGRpbmc6IDMwcHggMTVweDtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZSc7XFxyXFxuXFxyXFxuXFxyXFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxyXFxuXFxyXFxuXFxyXFxuICAgIC5zZWFyY2gge1xcclxcbiAgICAgICAgd2lkdGg6IDMwMHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuXFxyXFxufVxcclxcblxcclxcblxcclxcbi5kcnphdmEge1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAgICY6aG92ZXIge1xcclxcbiAgICAgICAgY29sb3I6IHJnYigyNTUsIDIyMSwgODYpO1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgICAgICB0ZXh0LXNoYWRvdzogMnB4IDJweCAxMnB4IGJsYWNrO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcblxcclxcblxcclxcbi50YWJlbGFaZW1samUge1xcclxcblxcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuICAgIHdpZHRoOiA4MDBweDtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuXFxyXFxuICAgIC5yYXptYWsge1xcclxcbiAgICAgICAgaGVpZ2h0OiA3MHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5yZXN1bHRzIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNiYmRlZmI7XFxyXFxuICAgICAgICBmb250LXNpemU6IDE4cHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm5hdm9kIHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjRweDtcXHJcXG5cXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0O1xcclxcblxcclxcbiAgICAgICAgd2lkdGg6IDEyMHB4O1xcclxcbiAgICAgICAgcGFkZGluZy1sZWZ0OiA1cHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgdHIge1xcclxcbiAgICAgICAgJjpudGgtY2hpbGQoZXZlbikge1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlNWU0ZTc7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm5hbWVDb21tIHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjhweDtcXHJcXG4gICAgICAgIHdpZHRoOiA2NTBweDtcXHJcXG4gICAgICAgIHBhZGRpbmctbGVmdDogNXB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5oaXN0b3J5IHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjhweDtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgIGhlaWdodDogNjBweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuY2VsZWJyaXR5IHtcXHJcXG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuY2VsZWJyaXR5LFxcclxcbiAgICAubmV0d29ydGgge1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgICAgICBmb250LXNpemU6IDMwcHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmhpc3RvcnlQZXJzb24ge1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgICAgICBmb250LXNpemU6IDMwcHg7XFxyXFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAgICAgICAmOmhvdmVyIHtcXHJcXG4gICAgICAgICAgICB0ZXh0LXNoYWRvdzogMXB4IDFweCAzcHggIzY0YjVmNjtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG5cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuZGljdGlvbmFyeSB7XFxyXFxuICAgICAgICB3aWR0aDogODAwcHg7XFxyXFxuICAgICAgICBmb250LXNpemU6IDI4cHg7XFxyXFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm5hbWVDb21tIHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjRweDtcXHJcXG5cXHJcXG4gICAgICAgIHVsIHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgbGkge1xcclxcbiAgICAgICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogMDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAubW9yZSB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBlbmQ7XFxyXFxuICAgICAgICB3aWR0aDogMTIwcHg7XFxyXFxuICAgICAgICAvLyB0ZXh0LWFsaWduOiByaWdodDtcXHJcXG4gICAgICAgIGNvbG9yOiAjMTk3NmQyO1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAyNHB4O1xcclxcblxcclxcbiAgICAgICAgJjpob3ZlciB7XFxyXFxuICAgICAgICAgICAgY29sb3I6ICM2NGI1ZjY7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgaW1nIHtcXHJcXG4gICAgICAgIHdpZHRoOiA3MDBweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuaW1nUm9ib3Qge1xcclxcbiAgICAgICAgd2lkdGg6IDMwMHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGhyIHtcXHJcXG5cXHJcXG5cXHJcXG4gICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICM2YTc1N2U7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgdGQge1xcclxcbiAgICAgICAgZm9udC1zaXplOiAyNHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5tYWluRGl2IHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZTBiMjtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuLmpva2VzTWFpbiB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiMmViZjI7XFxyXFxuICAgIHdpZHRoOiA0MDBweDtcXHJcXG5cXHJcXG4gICAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuXFxyXFxuICAgIHRoIHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMzJweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICB0ZCB7XFxyXFxuICAgICAgICBwYWRkaW5nOiAyNXB4O1xcclxcbiAgICAgICAgZm9udC1zaXplOiAzNHB4O1xcclxcbiAgICAgICAgZm9udC1mYW1pbHk6ICdBcmlhbCBOYXJyb3cgQm9sZCcsIHNhbnMtc2VyaWY7XFxyXFxuXFxyXFxuICAgICAgICBpbWcge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiA1MDBweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuYm9yZGVyR2lmIHtcXHJcXG4gICAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCByZ2IoMTAzLCAxMDMsIDE4OCk7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnB1biB7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgICAgICBmb250LXNpemU6IDM0cHg7XFxyXFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4uam9rZXNUZXh0IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxyXFxuICAgIHdpZHRoOiAxNzAwcHg7XFxyXFxuXFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnVHJlYnVjaGV0IE1TJywgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnLCAnTHVjaWRhIEdyYW5kZScsICdMdWNpZGEgU2FucycsIEFyaWFsLCBzYW5zLXNlcmlmO1xcclxcblxcclxcbiAgICB0aCB7XFxyXFxuICAgICAgICBmb250LXNpemU6IDMycHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgdGQge1xcclxcbiAgICAgICAgcGFkZGluZzogMjVweDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMzRweDtcXHJcXG4gICAgICAgIGZvbnQtZmFtaWx5OiAnQXJpYWwgTmFycm93IEJvbGQnLCBzYW5zLXNlcmlmO1xcclxcblxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5jcmVhdGVkIHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4ucG96bmF0aU1haW4ge1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcXHJcXG4gICAgd2lkdGg6IDEyMDBweDtcXHJcXG4gICAgaGVpZ2h0OiAxNjUwcHg7XFxyXFxufVxcclxcblxcclxcblxcclxcblxcclxcbi5wdW5hcGkge1xcclxcbiAgICB3aWR0aDogNTAwcHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY4ZTE7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnVHJlYnVjaGV0IE1TJywgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnLCAnTHVjaWRhIEdyYW5kZScsICdMdWNpZGEgU2FucycsIEFyaWFsLCBzYW5zLXNlcmlmO1xcclxcblxcclxcbiAgICB0aCB7XFxyXFxuICAgICAgICBmb250LXNpemU6IDI4cHg7XFxyXFxuICAgICAgICBjb2xvcjogcmdiKDQzLCAxMjcsIDEyNyk7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgdGQge1xcclxcbiAgICAgICAgZm9udC1zaXplOiAyOHB4O1xcclxcbiAgICAgICAgcGFkZGluZzogMnB4IDIwcHg7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLmpva2VNYWluIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTJweDtcXHJcXG4gICAgd2lkdGg6IDUwMHB4O1xcclxcbiAgICAvLyBoZWlnaHQ6IDUwMHB4O1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmOWZiZTc7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHggMTVweDtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuXFxyXFxuICAgIC5qb2tlQW5zd2VyLFxcclxcbiAgICAuam9rZUFucyB7XFxyXFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjhweDtcXHJcXG4gICAgICAgIGNvbG9yOiAjMWEyMzdlO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5qb2tlQW5zd2VyIHtcXHJcXG4gICAgICAgICY6aG92ZXIge1xcclxcbiAgICAgICAgICAgIGNvbG9yOiAjZmY4ZjAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi50cml2aWEge1xcclxcbiAgICB3aWR0aDogNjAwcHg7XFxyXFxuICAgIGhlaWdodDogOTAwcHg7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2JkZDhlZTtcXHJcXG4gICAgcGFkZGluZzogMzBweCAxNXB4O1xcclxcbiAgICBmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG5cXHJcXG4gICAgLmNhdGVnb3J5IHtcXHJcXG4gICAgICAgIHdpZHRoOiAzMDBweDtcXHJcXG4gICAgICAgIGhlaWdodDogNDBweDtcXHJcXG4gICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjODBkZWVhO1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogN3B4O1xcclxcbiAgICAgICAgZm9udC1zaXplOiAyNHB4O1xcclxcbiAgICAgICAgcGFkZGluZzogNXB4IDE1cHg7XFxyXFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAgICAgICAmOmhvdmVyIHtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjZjNmRhO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC50cml2aWFBbnN3ZXIge1xcclxcbiAgICAgICAgJjpob3ZlciB7XFxyXFxuICAgICAgICAgICAgY29sb3I6ICMzODhlM2M7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnRyaXZpYUFuc3dlcixcXHJcXG4gICAgLnRyaXZpYUFucyB7XFxyXFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjhweDtcXHJcXG4gICAgICAgIGNvbG9yOiAjMWEyMzdlO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5kYWRKb2tlcyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjOGU2Yzk7XFxyXFxuICAgIHdpZHRoOiA1MDBweDtcXHJcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcclxcbiAgICBmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG5cXHJcXG4gICAgLmJvcmRlciB7XFxyXFxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzRkYjZhYztcXHJcXG5cXHJcXG5cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuYm9yZGVyQ2h1ayB7XFxyXFxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzRkYjZhYztcXHJcXG5cXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgfVxcclxcblxcclxcblxcclxcblxcclxcbiAgICBpbWcge1xcclxcbiAgICAgICAgd2lkdGg6IDcwMHB4O1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcblxcclxcbi5mb290ZXIge1xcclxcbiAgICBmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nLXRvcDogNDUwcHg7XFxyXFxuICAgIGhlaWdodDogNDgwcHg7XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUwMHB4KSB7XFxyXFxuXFxyXFxuICAgIC5wbGFjZSB7XFxyXFxuICAgICAgICBtYXJnaW46IDA7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIHdpZHRoOiAzNTJweDtcXHJcXG5cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuam9rZXNUZXh0IHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICAgICAgd2lkdGg6IDM1OHB4O1xcclxcblxcclxcbiAgICAgICAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuXFxyXFxuICAgICAgICB0aCB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgdGQge1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweDtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxyXFxuXFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnRyaXZpYSB7XFxyXFxuICAgICAgICB3aWR0aDogMzU4cHg7XFxyXFxuXFxyXFxuICAgICAgICAudHJpdmlhQW5zd2VyIHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDIycHg7XFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAudHJpdmlhQW5zIHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDIycHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuY2F0ZWdvcnkge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDM2cHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmZhY3RzIHtcXHJcXG5cXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgICAgIHRleHQtc2hhZG93OiAxcHggMXB4IDNweCBibGFjaztcXHJcXG5cXHJcXG4gICAgICAgIC50YWJsZSB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDM0MHB4O1xcclxcblxcclxcbiAgICAgICAgICAgIHRkIHtcXHJcXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMHB4IDVweDtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmpva2VNYWluIHtcXHJcXG4gICAgICAgIHdpZHRoOiAzNThweDtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDA7XFxyXFxuXFxyXFxuICAgICAgICAuam9rZUFuc3dlciB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xcclxcblxcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgLmpva2VBbnMge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG5cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAudGFiZWxhWmVtbGplIHtcXHJcXG4gICAgICAgIHdpZHRoOiAzNTBweDtcXHJcXG5cXHJcXG4gICAgICAgIC5yYXptYWsge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5oaXN0b3J5LFxcclxcbiAgICAgICAgLmhpc3RvcnlQZXJzb24ge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuXFxyXFxuICAgICAgICAuY2VsZWJyaXR5IHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDIycHg7XFxyXFxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuZGljdGlvbmFyeSB7XFxyXFxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgaW1nIHtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMzUwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuaW1nUm9ib3Qge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAyMDBweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5uYXZvZCxcXHJcXG4gICAgICAgIC5tb3JlIHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDRweDtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDk1cHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAubmFtZUNvbW0ge1xcclxcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNHB4O1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMjU1cHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAubmV0d29ydGgge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuZGFkSm9rZXMge1xcclxcblxcclxcbiAgICAgICAgd2lkdGg6IDM1OHB4O1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxOHB4O1xcclxcblxcclxcbiAgICAgICAgLmNyZWF0ZWQge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIGhyIHtcXHJcXG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAubWFpbkpva2Uge1xcclxcbiAgICAgICAgd2lkdGg6IDM1OHB4O1xcclxcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5qb2tlc01haW4ge1xcclxcblxcclxcbiAgICAgICAgd2lkdGg6IDM1OHB4O1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcXHJcXG4gICAgICAgIGZvbnQtZmFtaWx5OiAnVHJlYnVjaGV0IE1TJywgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnLCAnTHVjaWRhIEdyYW5kZScsICdMdWNpZGEgU2FucycsIEFyaWFsLCBzYW5zLXNlcmlmO1xcclxcblxcclxcbiAgICAgICAgdGgge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIHRkIHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiAxNXB4O1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG5cXHJcXG5cXHJcXG4gICAgICAgICAgICBpbWcge1xcclxcbiAgICAgICAgICAgICAgICB3aWR0aDogMzUwcHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgLnB1biB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAyMnB4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLyogYm9keSB7XHJcbiAgICBtYXJnaW46IDA7XHJcbn1cclxuLnRpdGxlIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgcGFkZGluZzogMjBweDtcclxuICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4uY3VzdG9tLXRhYmxlIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxufVxyXG4uY3VzdG9tLXRhYmxlLFxyXG4uY3VzdG9tLXRkIHtcclxuXHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbn1cclxuXHJcbi5jdXN0b20tdGFibGUgdGgge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogbWVkaXVtYXF1YW1hcmluZTtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG59XHJcbi5jdXN0b20tdGFibGUgdHI6bnRoLWNoaWxkKGV2ZW4pIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XHJcbn1cclxuXHJcbi5tYWluLWhlYWRpbmcge1xyXG4gICAgcGFkZGluZzogMzBweDtcclxuICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgIG1hcmdpbjogMjBweCBhdXRvO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbi5hY3RpdmUge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogY29ybmZsb3dlcmJsdWU7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJlZDtcclxufVxyXG5cclxuLmZvcm0tdGV4dCB7XHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XHJcbn1cclxuXHJcblxyXG4uYnRuIHtcclxuICAgIG1pbi13aWR0aDogMTUwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjcmltc29uO1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgICBmb250LXNpemU6IDE4cHg7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBtYXJnaW46IDIwcHg7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuLmJ0bjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTMwLCAxODksIDI0OCk7XHJcbn1cclxuLmJ0bi5idG4td2FybmluZyB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7XHJcbn1cclxuXHJcbi5idG46ZGlzYWJsZWQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2dyZXk7XHJcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xyXG59XHJcbi50b3BfbmF2IHtcclxuXHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZTtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBsaXN0LXN0eWxlOiBub25lO1xyXG59XHJcbi50b3BfbmF2IC5uYXZpZyB7XHJcblxyXG4gICAgbWFyZ2luOiAxNXB4O1xyXG4gICAgcGFkZGluZzogMjBweDtcclxuICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG59Ki9cclxuLmxvYWRlci1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiAxMDB2aDtcclxuIFxyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3NCwgMTkxLCAxOTEpO1xyXG5cclxuICAgIHdpZHRoOiA4MDBweDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICAgIC8qIGFsaWduLWl0ZW1zOiBjZW50ZXI7ICovXHJcbn1cclxuXHJcbi5jb21tZW50cy1jb250YWluZXIge1xyXG4gICAgbWF4LXdpZHRoOiA0NTBweDtcclxuICAgIG1hcmdpbjogYXV0bztcclxufVxyXG4uY29tbWVudHMge1xyXG4gICAgcGFkZGluZzogMjBweCAwO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogIHNvbGlkIDJweCAgI2NjYztcclxuIFxyXG59IFxyXG4gYm9keSB7XHJcbiAgICBwYWRkaW5nOiA1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NhY2JkYTtcclxuICAgIGNvbG9yOiAjMGQyYTMyO1xyXG59XHJcbi50b2RvLWlucHV0LWNvbnRhaW5lciBpbnB1dHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBib3JkZXI6IDJweCBzb2xsaWQgI2ZmZjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbn1cclxuLnRvZG8taW5wdXQtY29udGFpbmVyIC5idG4ge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgY29sb3I6ICMzMzM7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuLnRvZG8tbGlzdCB7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcclxuICAgIG1heC13aWR0aDogMzUwcHg7XHJcbn1cclxuXHJcbi50b2RvLWxpc3QgbGkge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICBjb2xvcjogIzMzMztcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2MWRhZmI7XHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgbWFyZ2luOiAxNXB4IDA7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG59IFxyXG5cclxuLmxvYWRlci1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiAxMDBodjtcclxuICAgXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTk1LCAyMDQsIDIwNCk7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcblxyXG4uc2luZ2xlLWNvbW1lbnQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzYxZGFmYjtcclxuICAgIHBhZGRpbmc6IDE1cHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgY29sb3I6ICMzMzM7XHJcbn1cclxuLnNpbmdsZS1jb21tZW50XHJcbi5zYW1vSUQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZXZpb2xldDtcclxuICAgIHBhZGRpbmc6IDEycHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEycHg7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuXHJcbi51c2Vycy1jb250YWluZXIge1xyXG4gICAgbWluLXdpZHRoOiA5MDBweDtcclxuICAgIC8qIGJhY2tncm91bmQtY29sb3I6ICM2MWRhZmI7ICovXHJcbn1cclxuXHJcbi51c2Vycy1jb250YWluZXIgdGgsXHJcbi51c2Vycy1jb250YWluZXIgdGQge1xyXG4gICAgcGFkZGluZzogNXB4O1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYigxNTYsIDE2MSwgMTk5KTtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDMwcHg7XHJcbn1cclxuXHJcbi51c2VyczpudGgtY2hpbGQoZXZlbikge1xyXG5cclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYigxNTYsIDE2MSwgMTk5KTtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcblxyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE1NiwgMTYxLCAxOTkpO1xyXG59XHJcblxyXG4udXNlcnMgdGQge1xyXG5cclxuICAgIHBhZGRpbmc6IDVweCAyMHB4O1xyXG5cclxufVxyXG5cclxuXHJcbi5rb3Jpc25payB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG5cclxuICAgIFxyXG5cclxuICAgIC8qIHdpZHRoOiA3NTBweDsgKi9cclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2MWRhZmI7XHJcbn1cclxuLmtvcmlzbmlrIGgxIHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7XHJcbiAgICBwYWRkaW5nOiA1cHggMTBweDtcclxuICAgIGNvbG9yOiBkYXJrc2xhdGVibHVlO1xyXG4gICAgZm9udC1mYW1pbHk6IENhbGlicmksICdUcmVidWNoZXQgTVMnLCBzYW5zLXNlcmlmO1xyXG59XHJcbi5rb3Jpc25payBwIHtcclxuICAgIHBhZGRpbmc6IDEwcHggMTBweDtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuXHJcbn1cclxuXHJcbi5rb3Jpc25payBkaXYge1xyXG4gICAgd2lkdGg6IDI1MHB4O1xyXG4gICAgcGFkZGluZzogMCAxMHB4O1xyXG4gICAgLyogcGFkZGluZzogOHB4OyAqL1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE4NCwgMjA1LCAyMjcpO1xyXG4gICAgY29sb3I6IGRhcmtzbGF0ZWdyZXk7XHJcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzcyNzJhYjtcclxufVxyXG5cclxuLmtvcmlzbmlrIGxpIHtcclxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcblxyXG4ubGlzdGEge1xyXG4gICAgZm9udC1mYW1pbHk6ICdBcmlhbCBOYXJyb3cgQm9sZCcsIHNhbnMtc2VyaWY7XHJcbn1cclxuXHJcbi5nbGF2bmkge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuLmdsYXZuaSBoMSB7XHJcbiAgICBmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYW50aXF1ZXdoaXRlO1xyXG4gICAgY29sb3I6IGRhcmtzbGF0ZWdyZXk7XHJcbn1cclxuXHJcbi8qIC5rYXJ1c2VsIGltZ3tcclxuICAgIGhlaWdodDogNDYwcHg7XHJcbiAgICBjb2xvcjogcmdiKDI1MCwgMTU1LCAzMCk7XHJcbiAgICBcclxuICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2MWRhZmI7XHJcbiAgIH0gKi9cclxuLnZhamFyaSB7XHJcbiAgICB3aWR0aDogNzAwcHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkIHJnYig4MSwgODgsIDEzNyk7XHJcbiAgIFxyXG59XHJcbi52YWphcmkgLnZhamFyLW9waXMgcCwgXHJcbi52YWphcmkgLnZhamFyLW9waXMgaDJ7XHJcbiAgIHdpZHRoOiAzMDBweDtcclxuICAgXHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG59XHJcbi52YWphci1zbGlrYSB7XHJcbnRleHQtYWxpZ246IGNlbnRlcjtcclxucGFkZGluZzogMTVweDtcclxufVxyXG4udXBpcy10b2RvIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGFsaWNlYmx1ZTtcclxufVxyXG5cclxuXHJcbi50YWNrZTIge1xyXG4gICAgbWFyZ2luLXRvcDogNDYwcHg7XHJcbiAgICB0b3A6IDhweDtcclxuICAgIHdpZHRoOiAxOTYwcHg7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJvcmRlci1ib3R0b206IDE2cHggZG90dGVkO1xyXG4gICAgYW5pbWF0aW9uOiBtb3ZlMiA1cyBpbmZpbml0ZSBsaW5lYXI7XHJcbiAgXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbkBrZXlmcmFtZXMgbW92ZTIge1xyXG4gICAgZnJvbSB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDElKTtcclxuICAgIH1cclxuXHJcbiAgICB0byB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xyXG4gICAgfVxyXG59XHJcbi56YURpZ2l0cm9uIHtcclxuICAgbWFyZ2luOiAwcHggMTUwcHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcbi5mb3JtLXRla3N0IHtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGdyZWVuO1xyXG59XHJcbi5mb3JtLXRla3N0OmhvdmVyIHtcclxuICAgIGJvcmRlci1jb2xvcjogIzYxZGFmYjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XHJcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3Mvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBb0ZFO0FBQ0Y7SUFDSSxhQUFhOztJQUViLG9DQUFvQzs7SUFFcEMsWUFBWTtJQUNaLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsWUFBWTtJQUNaLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsK0JBQStCOztBQUVuQztDQUNDO0lBQ0csYUFBYTtJQUNiLHlCQUF5QjtJQUN6QixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsc0JBQXNCO0lBQ3RCLFdBQVc7SUFDWCxlQUFlO0FBQ25CO0FBQ0E7SUFDSSxVQUFVO0lBQ1YsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsOEJBQThCO0lBQzlCLFdBQVc7SUFDWCx5QkFBeUI7SUFDekIsYUFBYTtJQUNiLGNBQWM7SUFDZCxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxhQUFhOztJQUViLG9DQUFvQztJQUNwQyxhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixXQUFXO0FBQ2Y7QUFDQTs7SUFFSSw0QkFBNEI7SUFDNUIsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLCtCQUErQjtBQUNuQzs7QUFFQTs7SUFFSSxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLG9DQUFvQztJQUNwQyxtQkFBbUI7QUFDdkI7O0FBRUE7O0lBRUksb0NBQW9DO0lBQ3BDLGFBQWE7O0lBRWIsb0NBQW9DO0FBQ3hDOztBQUVBOztJQUVJLGlCQUFpQjs7QUFFckI7OztBQUdBO0lBQ0ksYUFBYTtJQUNiLDhCQUE4Qjs7OztJQUk5QixrQkFBa0I7SUFDbEIseUJBQXlCO0FBQzdCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsbUJBQW1CO0lBQ25CLGlCQUFpQjtJQUNqQixvQkFBb0I7SUFDcEIsZ0RBQWdEO0FBQ3BEO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTs7QUFFbkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixvQ0FBb0M7SUFDcEMsb0JBQW9CO0lBQ3BCLGdDQUFnQztBQUNwQzs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksNENBQTRDO0FBQ2hEOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLG1FQUFtRTtJQUNuRSxrQkFBa0I7SUFDbEIsOEJBQThCO0lBQzlCLG9CQUFvQjtBQUN4Qjs7QUFFQTs7Ozs7OztNQU9NO0FBQ047SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLDhCQUE4QjtJQUM5Qix5Q0FBeUM7O0FBRTdDO0FBQ0E7O0dBRUcsWUFBWTs7SUFFWCxhQUFhO0FBQ2pCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIsYUFBYTtBQUNiO0FBQ0E7SUFDSSwyQkFBMkI7QUFDL0I7OztBQUdBO0lBQ0ksaUJBQWlCO0lBQ2pCLFFBQVE7SUFDUixhQUFhO0lBQ2IsY0FBYztJQUNkLGtCQUFrQjtJQUNsQiwwQkFBMEI7SUFDMUIsbUNBQW1DOztBQUV2Qzs7Ozs7QUFLQTtJQUNJO1FBQ0kseUJBQXlCO0lBQzdCOztJQUVBO1FBQ0ksMkJBQTJCO0lBQy9CO0FBQ0o7QUFDQTtHQUNHLGlCQUFpQjtJQUNoQixhQUFhO0dBQ2QsOEJBQThCO0lBQzdCLG1CQUFtQjtBQUN2QjtBQUNBO0lBQ0ksdUJBQXVCO0FBQzNCO0FBQ0E7SUFDSSxxQkFBcUI7SUFDckIsc0JBQXNCO0FBQzFCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIGJvZHkge1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxufVxcclxcbi50aXRsZSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG4uY3VzdG9tLXRhYmxlIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxyXFxufVxcclxcbi5jdXN0b20tdGFibGUsXFxyXFxuLmN1c3RvbS10ZCB7XFxyXFxuXFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5jdXN0b20tdGFibGUgdGgge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBtZWRpdW1hcXVhbWFyaW5lO1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG59XFxyXFxuLmN1c3RvbS10YWJsZSB0cjpudGgtY2hpbGQoZXZlbikge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xcclxcbn1cXHJcXG5cXHJcXG4ubWFpbi1oZWFkaW5nIHtcXHJcXG4gICAgcGFkZGluZzogMzBweDtcXHJcXG4gICAgZm9udC1zaXplOiAyMnB4O1xcclxcbiAgICBtYXJnaW46IDIwcHggYXV0bztcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG4uYWN0aXZlIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogY29ybmZsb3dlcmJsdWU7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLXRleHQge1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XFxyXFxufVxcclxcblxcclxcblxcclxcbi5idG4ge1xcclxcbiAgICBtaW4td2lkdGg6IDE1MHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjcmltc29uO1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG4gICAgbWFyZ2luOiAyMHB4O1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuLmJ0bjpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxMzAsIDE4OSwgMjQ4KTtcXHJcXG59XFxyXFxuLmJ0bi5idG4td2FybmluZyB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IG9yYW5nZTtcXHJcXG59XFxyXFxuXFxyXFxuLmJ0bjpkaXNhYmxlZCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtncmV5O1xcclxcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcclxcbn1cXHJcXG4udG9wX25hdiB7XFxyXFxuXFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXHJcXG59XFxyXFxuLnRvcF9uYXYgLm5hdmlnIHtcXHJcXG5cXHJcXG4gICAgbWFyZ2luOiAxNXB4O1xcclxcbiAgICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICBmb250LXNpemU6IDE4cHg7XFxyXFxuICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxufSovXFxyXFxuLmxvYWRlci1jb250YWluZXIge1xcclxcbiAgICBoZWlnaHQ6IDEwMHZoO1xcclxcbiBcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3NCwgMTkxLCAxOTEpO1xcclxcblxcclxcbiAgICB3aWR0aDogODAwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIC8qIGFsaWduLWl0ZW1zOiBjZW50ZXI7ICovXFxyXFxufVxcclxcblxcclxcbi5jb21tZW50cy1jb250YWluZXIge1xcclxcbiAgICBtYXgtd2lkdGg6IDQ1MHB4O1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxufVxcclxcbi5jb21tZW50cyB7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHggMDtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogIHNvbGlkIDJweCAgI2NjYztcXHJcXG4gXFxyXFxufSBcXHJcXG4gYm9keSB7XFxyXFxuICAgIHBhZGRpbmc6IDUwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjYWNiZGE7XFxyXFxuICAgIGNvbG9yOiAjMGQyYTMyO1xcclxcbn1cXHJcXG4udG9kby1pbnB1dC1jb250YWluZXIgaW5wdXR7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxuICAgIGJvcmRlcjogMnB4IHNvbGxpZCAjZmZmO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICAgIG91dGxpbmU6IG5vbmU7XFxyXFxufVxcclxcbi50b2RvLWlucHV0LWNvbnRhaW5lciAuYnRuIHtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuICAgIGNvbG9yOiAjMzMzO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcbi50b2RvLWxpc3Qge1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbiAgICBtYXgtd2lkdGg6IDM1MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1saXN0IGxpIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICBjb2xvcjogIzMzMztcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzYxZGFmYjtcXHJcXG4gICAgcGFkZGluZzogMTVweDtcXHJcXG4gICAgbWFyZ2luOiAxNXB4IDA7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxufSBcXHJcXG5cXHJcXG4ubG9hZGVyLWNvbnRhaW5lciB7XFxyXFxuICAgIGhlaWdodDogMTAwaHY7XFxyXFxuICAgXFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxOTUsIDIwNCwgMjA0KTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5zaW5nbGUtY29tbWVudCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2MWRhZmI7XFxyXFxuICAgIHBhZGRpbmc6IDE1cHg7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG4gICAgY29sb3I6ICMzMzM7XFxyXFxufVxcclxcbi5zaW5nbGUtY29tbWVudFxcclxcbi5zYW1vSUQge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVldmlvbGV0O1xcclxcbiAgICBwYWRkaW5nOiAxMnB4O1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDEycHg7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnVzZXJzLWNvbnRhaW5lciB7XFxyXFxuICAgIG1pbi13aWR0aDogOTAwcHg7XFxyXFxuICAgIC8qIGJhY2tncm91bmQtY29sb3I6ICM2MWRhZmI7ICovXFxyXFxufVxcclxcblxcclxcbi51c2Vycy1jb250YWluZXIgdGgsXFxyXFxuLnVzZXJzLWNvbnRhaW5lciB0ZCB7XFxyXFxuICAgIHBhZGRpbmc6IDVweDtcXHJcXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiKDE1NiwgMTYxLCAxOTkpO1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4udXNlcnM6bnRoLWNoaWxkKGV2ZW4pIHtcXHJcXG5cXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiKDE1NiwgMTYxLCAxOTkpO1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcblxcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTU2LCAxNjEsIDE5OSk7XFxyXFxufVxcclxcblxcclxcbi51c2VycyB0ZCB7XFxyXFxuXFxyXFxuICAgIHBhZGRpbmc6IDVweCAyMHB4O1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4ua29yaXNuaWsge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFxyXFxuICAgIFxcclxcblxcclxcbiAgICAvKiB3aWR0aDogNzUwcHg7ICovXFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2MWRhZmI7XFxyXFxufVxcclxcbi5rb3Jpc25payBoMSB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcXHJcXG4gICAgcGFkZGluZzogNXB4IDEwcHg7XFxyXFxuICAgIGNvbG9yOiBkYXJrc2xhdGVibHVlO1xcclxcbiAgICBmb250LWZhbWlseTogQ2FsaWJyaSwgJ1RyZWJ1Y2hldCBNUycsIHNhbnMtc2VyaWY7XFxyXFxufVxcclxcbi5rb3Jpc25payBwIHtcXHJcXG4gICAgcGFkZGluZzogMTBweCAxMHB4O1xcclxcbiAgICBmb250LXNpemU6IDEycHg7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5rb3Jpc25payBkaXYge1xcclxcbiAgICB3aWR0aDogMjUwcHg7XFxyXFxuICAgIHBhZGRpbmc6IDAgMTBweDtcXHJcXG4gICAgLyogcGFkZGluZzogOHB4OyAqL1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTg0LCAyMDUsIDIyNyk7XFxyXFxuICAgIGNvbG9yOiBkYXJrc2xhdGVncmV5O1xcclxcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzcyNzJhYjtcXHJcXG59XFxyXFxuXFxyXFxuLmtvcmlzbmlrIGxpIHtcXHJcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmxpc3RhIHtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdBcmlhbCBOYXJyb3cgQm9sZCcsIHNhbnMtc2VyaWY7XFxyXFxufVxcclxcblxcclxcbi5nbGF2bmkge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbn1cXHJcXG5cXHJcXG4uZ2xhdm5pIGgxIHtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJztcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhbnRpcXVld2hpdGU7XFxyXFxuICAgIGNvbG9yOiBkYXJrc2xhdGVncmV5O1xcclxcbn1cXHJcXG5cXHJcXG4vKiAua2FydXNlbCBpbWd7XFxyXFxuICAgIGhlaWdodDogNDYwcHg7XFxyXFxuICAgIGNvbG9yOiByZ2IoMjUwLCAxNTUsIDMwKTtcXHJcXG4gICAgXFxyXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjFkYWZiO1xcclxcbiAgIH0gKi9cXHJcXG4udmFqYXJpIHtcXHJcXG4gICAgd2lkdGg6IDcwMHB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCByZ2IoODEsIDg4LCAxMzcpO1xcclxcbiAgIFxcclxcbn1cXHJcXG4udmFqYXJpIC52YWphci1vcGlzIHAsIFxcclxcbi52YWphcmkgLnZhamFyLW9waXMgaDJ7XFxyXFxuICAgd2lkdGg6IDMwMHB4O1xcclxcbiAgIFxcclxcbiAgICBwYWRkaW5nOiAxNXB4O1xcclxcbn1cXHJcXG4udmFqYXItc2xpa2Ege1xcclxcbnRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG5wYWRkaW5nOiAxNXB4O1xcclxcbn1cXHJcXG4udXBpcy10b2RvIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYWxpY2VibHVlO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4udGFja2UyIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogNDYwcHg7XFxyXFxuICAgIHRvcDogOHB4O1xcclxcbiAgICB3aWR0aDogMTk2MHB4O1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBib3JkZXItYm90dG9tOiAxNnB4IGRvdHRlZDtcXHJcXG4gICAgYW5pbWF0aW9uOiBtb3ZlMiA1cyBpbmZpbml0ZSBsaW5lYXI7XFxyXFxuICBcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuQGtleWZyYW1lcyBtb3ZlMiB7XFxyXFxuICAgIGZyb20ge1xcclxcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDElKTtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICB0byB7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuLnphRGlnaXRyb24ge1xcclxcbiAgIG1hcmdpbjogMHB4IDE1MHB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuLmZvcm0tdGVrc3Qge1xcclxcbiAgICBib3JkZXI6IDJweCBzb2xpZCBncmVlbjtcXHJcXG59XFxyXFxuLmZvcm0tdGVrc3Q6aG92ZXIge1xcclxcbiAgICBib3JkZXItY29sb3I6ICM2MWRhZmI7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBMZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgTWc9VWYobnVsbCksTmc9bnVsbCxPZz1udWxsLFBnPW51bGw7ZnVuY3Rpb24gUWcoKXtQZz1PZz1OZz1udWxsfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPU1nLmN1cnJlbnQ7RShNZyk7YS5fY3VycmVudFZhbHVlPWJ9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIFRnKGEsYil7Tmc9YTtQZz1PZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKFVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIFZnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihQZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1PZyl7aWYobnVsbD09PU5nKXRocm93IEVycm9yKHAoMzA4KSk7T2c9YTtOZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgT2c9T2cubmV4dD1hO3JldHVybiBifXZhciBXZz1udWxsO2Z1bmN0aW9uIFhnKGEpe251bGw9PT1XZz9XZz1bYV06V2cucHVzaChhKX1mdW5jdGlvbiBZZyhhLGIsYyxkKXt2YXIgZT1iLmludGVybGVhdmVkO251bGw9PT1lPyhjLm5leHQ9YyxYZyhiKSk6KGMubmV4dD1lLm5leHQsZS5uZXh0PWMpO2IuaW50ZXJsZWF2ZWQ9YztyZXR1cm4gWmcoYSxkKX1cbmZ1bmN0aW9uIFpnKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgJGc9ITE7ZnVuY3Rpb24gYWgoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGJoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIGNoKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gZGgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIFpnKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixYZyhkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gWmcoYSxjKX1mdW5jdGlvbiBlaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7JGc9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6JGc9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO2hofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBpaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBqaD0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBraChhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgbmg9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1MKCksZD1cbmxoKGEpLGU9Y2goYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPWRoKGEsZSxkKTtudWxsIT09YiYmKG1oKGIsYSxkLGMpLGVoKGIsYSxkKSl9fTtmdW5jdGlvbiBvaChhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIHBoKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPVZnKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1uaDthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHJoKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amg7YWgoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1WZyhmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihraChhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxnaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztiPT09amgmJihiPWUucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIHVoKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiB2aChhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT13aChhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXhoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJnVoKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9c2goYSxiLGMpLGQucmV0dXJuPWEsZDtkPXloKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPXNoKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9emgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPUFoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXhoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPXloKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9c2goYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPXpoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1BaChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjt0aChhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO3RoKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO3RoKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJnVoKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1zaChhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9QWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPXloKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPXNoKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXpoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO3RoKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9eGgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgQmg9dmgoITApLENoPXZoKCExKSxEaD17fSxFaD1VZihEaCksRmg9VWYoRGgpLEdoPVVmKERoKTtmdW5jdGlvbiBIaChhKXtpZihhPT09RGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBJaChhLGIpe0coR2gsYik7RyhGaCxhKTtHKEVoLERoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1sYihiLGEpfUUoRWgpO0coRWgsYil9ZnVuY3Rpb24gSmgoKXtFKEVoKTtFKEZoKTtFKEdoKX1cbmZ1bmN0aW9uIEtoKGEpe0hoKEdoLmN1cnJlbnQpO3ZhciBiPUhoKEVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcoRmgsYSksRyhFaCxjKSl9ZnVuY3Rpb24gTGgoYSl7RmguY3VycmVudD09PWEmJihFKEVoKSxFKEZoKSl9dmFyIE09VWYoMCk7XG5mdW5jdGlvbiBNaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgTmg9W107XG5mdW5jdGlvbiBPaCgpe2Zvcih2YXIgYT0wO2E8TmgubGVuZ3RoO2ErKylOaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO05oLmxlbmd0aD0wfXZhciBQaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFFoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFJoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsU2g9ITEsVGg9ITEsVWg9MCxWaD0wO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBXaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoYSxiLGMsZCxlLGYpe1JoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7UGguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9ZaDpaaDthPWMoZCxlKTtpZihUaCl7Zj0wO2Rve1RoPSExO1VoPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtQaC5jdXJyZW50PSRoO2E9YyhkLGUpfXdoaWxlKFRoKX1QaC5jdXJyZW50PWFpO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7Umg9MDtQPU89Tj1udWxsO1NoPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBiaSgpe3ZhciBhPTAhPT1VaDtVaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gY2koKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gZGkoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIGVpKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gZmkoYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChSaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO04ubGFuZXN8PW07aGh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTi5sYW5lc3w9ZixoaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIGdpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIGhpKCl7fVxuZnVuY3Rpb24gaWkoYSxiKXt2YXIgYz1OLGQ9ZGkoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLFVnPSEwKTtkPWQucXVldWU7amkoa2kuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09UCYmUC5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gbmkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gbWkoYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtvaShiKSYmcGkoYSl9ZnVuY3Rpb24ga2koYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7b2koYikmJnBpKGEpfSl9ZnVuY3Rpb24gb2koYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gcGkoYSl7dmFyIGI9WmcoYSwxKTtudWxsIT09YiYmbWgoYixhLDEsLTEpfVxuZnVuY3Rpb24gcWkoYSl7dmFyIGI9Y2koKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjplaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXJpLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBsaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2koKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHRpKGEsYixjLGQpe3ZhciBlPWNpKCk7Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWRpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmV2goZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9bGkoYixjLGYsZCk7cmV0dXJufX1OLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHZpKGEsYil7cmV0dXJuIHRpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGppKGEsYil7cmV0dXJuIHVpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHdpKGEsYil7cmV0dXJuIHVpKDQsMixhLGIpfWZ1bmN0aW9uIHhpKGEsYil7cmV0dXJuIHVpKDQsNCxhLGIpfVxuZnVuY3Rpb24geWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB6aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHVpKDQsNCx5aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBBaSgpe31mdW5jdGlvbiBCaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIENpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIERpKGEsYixjKXtpZigwPT09KFJoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxVZz0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxOLmxhbmVzfD1jLGhofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBFaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1RaC50cmFuc2l0aW9uO1FoLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxRaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEZpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1saChhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGMpO2Vsc2UgaWYoYz1ZZyhhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9TCgpO21oKGMsYSxkLGUpO0ppKGMsYixkKX19XG5mdW5jdGlvbiByaShhLGIsYyl7dmFyIGQ9bGgoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsWGcoYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1ZZyhhLGIsZSxkKTtudWxsIT09YyYmKGU9TCgpLG1oKGMsYSxkLGUpLEppKGMsYixkKSl9fVxuZnVuY3Rpb24gSGkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1OfHxudWxsIT09YiYmYj09PU59ZnVuY3Rpb24gSWkoYSxiKXtUaD1TaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEppKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgYWk9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VJbnNlcnRpb25FZmZlY3Q6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlEsdXNlTXV0YWJsZVNvdXJjZTpRLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlEsdXNlSWQ6USx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFloPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe2NpKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OnZpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0aSg0MTk0MzA4LFxuNCx5aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1jaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jaSgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUdpLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbmNpKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnFpLHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gY2koKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1xaSghMSksYj1hWzBdO2E9RWkuYmluZChudWxsLGFbMV0pO2NpKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TixlPWNpKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9Zjt2aShraS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1jaSgpLGI9Ui5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1VaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9VmgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFpoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmZpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBmaShlaSl9LFxudXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIERpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9ZmkoZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sJGg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6Z2ksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGdpKGVpKX0sdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIG51bGw9PT1cbk8/Yi5tZW1vaXplZFN0YXRlPWE6RGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1naShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBLaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19ZnVuY3Rpb24gTGkoYSxiLGMpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpudWxsLHN0YWNrOm51bGwhPWM/YzpudWxsLGRpZ2VzdDpudWxsIT1iP2I6bnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gT2koYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UGl8fChQaT0hMCxRaT1kKTtNaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFJpKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVNpP1NpPW5ldyBTZXQoW3RoaXNdKTpTaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBOaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVVpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFZpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9Y2goLTEsMSksYi50YWc9MixkaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgWGk9dWEuUmVhY3RDdXJyZW50T3duZXIsVWc9ITE7ZnVuY3Rpb24gWWkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9DaChiLG51bGwsYyxkKTpCaChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFppKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtUZyhiLGUpO2Q9WGgoYSxiLGMsZCxmLGUpO2M9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFiaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixjaihhLGIsZixkLGUpO2E9eWgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuICRpKGEsYixlKX1iLmZsYWdzfD0xO2E9d2goZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihVZz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoVWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcywkaShhLGIsZSl9cmV0dXJuIGRqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBlaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZmosZ2opLGdqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZmosZ2opLGdqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhmaixnaik7Z2p8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGZqLGdqKSxnanw9ZDtZaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBkaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7VGcoYixlKTtjPVhoKGEsYixjLGQsZixlKTtkPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO1RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWpqKGEsYikscGgoYixjLGQpLHJoKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPVZnKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZxaChiLGcsZCxsKTskZz0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2goYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPSRnfHxvaChiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtiaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkxnKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPVZnKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZxaChiLGcsZCxrKTskZz0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoa2goYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPSRnfHxvaChiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4ga2ooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24ga2ooYSxiLGMsZCxlLGYpe2hqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLCRpKGEsYixmKTtkPWIuc3RhdGVOb2RlO1hpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9QmgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1CaChiLG51bGwsaCxmKSk6WWkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBsaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTtJaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBtaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1lpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBuaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG9qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIHBqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPU0uY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhNLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1xaihnLGQsMCxudWxsKSxhPUFoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGMpLGIubWVtb2l6ZWRTdGF0ZT1uaixhKTpyaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiBzaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9d2goZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj13aChoLGYpOihmPUFoKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/b2ooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPXdoKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHJqKGEsYil7Yj1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gdGooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO0JoKGIsYS5jaGlsZCxudWxsLGMpO2E9cmooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHNqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9TGkoRXJyb3IocCg0MjIpKSksdGooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPUFoKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmQmgoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGcpO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gdGooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1MaShmLGQsdm9pZCAwKTtyZXR1cm4gdGooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihVZ3x8aCl7ZD1SO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsWmcoYSxlKSxtaChkLGEsZSwtMSkpfXVqKCk7ZD1MaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gdGooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dmouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXJqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB3aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO1NnKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB4aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtZaShhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ3aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXdqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhNLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1NaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3hqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09TWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXhqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnhqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGpqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uICRpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtoaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9d2goYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXdoKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB6aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6bGooYik7SWcoKTticmVhaztjYXNlIDU6S2goYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDpJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKE0sTS5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBwaihhLGIsYyk7RyhNLE0uY3VycmVudCYxKTthPSRpKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geWooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTSxNLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxlaihhLGIsYyl9cmV0dXJuICRpKGEsYixjKX12YXIgQWosQmosQ2osRGo7XG5Baj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Qmo9ZnVuY3Rpb24oKXt9O1xuQ2o9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO0hoKEVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtEaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIEVqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBGaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7SmgoKTtFKFdmKTtFKEgpO09oKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihHaih6Zyksemc9bnVsbCkpO0JqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6TGgoYik7dmFyIGU9SGgoR2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQ2ooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT1IaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7QWooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlEaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPUhoKEdoLmN1cnJlbnQpO0hoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShNLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnVqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLFxuQmooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShNKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKUVqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1NaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0VqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkhqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9TWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxFaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+SGomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPU0uY3VycmVudCxHKE0sZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZ2omMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIEpqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiBKaCgpLEUoV2YpLEUoSCksT2goKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBMaChiKSxudWxsO2Nhc2UgMTM6RShNKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShNKSxudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEtqPSExLFU9ITEsTGo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIE1qKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBOaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE9qPSExO1xuZnVuY3Rpb24gUGooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpMZyhiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU9qO09qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUWooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTmooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUmooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBUaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsVGooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBVaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFZqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFVqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBYaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspWGooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWWo9ITE7ZnVuY3Rpb24gWmooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KWFrKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIGFrKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TWooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVlqO1g9bnVsbDtaaihhLGIsYyk7WD1kO1lqPWU7bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1ZajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7XG5aaihhLGIsYyk7WD1kO1lqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9OaihjLGIsZyk6MCE9PShmJjQpJiZOaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTWooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVpqKGEsYixjKTticmVhaztjYXNlIDIxOlpqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWmooYSxiLGMpLFU9ZCk6WmooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WmooYSxiLGMpfX1mdW5jdGlvbiBiayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBMaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWNrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WWo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTthayhmLGcsZSk7WD1udWxsO1lqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZWsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGVrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXt0cnl7UWooMyxhLGEucmV0dXJuKSxSaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UWooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpkayhiLGEpO2ZrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpkayhiLGEpO2ZrKGEpO2JyZWFrO2Nhc2UgMTM6ZGsoYixhKTtmayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGdrPUIoKSkpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGRrKGIsYSksVT1sKTpkayhiLGEpO2ZrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpRaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpNaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1Ok1qKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7aGsocSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6aGsocSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpkayhiLGEpO2ZrKGEpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmRrKGIsXG5hKSxmayhhKX19ZnVuY3Rpb24gZmsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihVaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1WaihhKTtYaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VmooYSk7V2ooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaWsoYSxiLGMpe1Y9YTtqayhhLGIsYyl9XG5mdW5jdGlvbiBqayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8S2o7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Lajt2YXIgbD1VO0tqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9rayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmtrKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixqayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0tqPWg7VT1sfWxrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6bGsoYSxiLGMpfX1cbmZ1bmN0aW9uIGxrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UmooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpMZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZpaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9aWgoYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlNqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGhrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBrayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtSaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBtaz1NYXRoLmNlaWwsbms9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixvaz11YS5SZWFjdEN1cnJlbnRPd25lcixwaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUj1udWxsLFk9bnVsbCxaPTAsZ2o9MCxmaj1VZigwKSxUPTAscWs9bnVsbCxoaD0wLHJrPTAsc2s9MCx0az1udWxsLHVrPW51bGwsZ2s9MCxIaj1JbmZpbml0eSx2az1udWxsLFBpPSExLFFpPW51bGwsU2k9bnVsbCx3az0hMSx4az1udWxsLHlrPTAsems9MCxBaz1udWxsLEJrPS0xLENrPTA7ZnVuY3Rpb24gTCgpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09Qms/Qms6Qms9QigpfVxuZnVuY3Rpb24gbGgoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUNrJiYoQ2s9eWMoKSksQ2s7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIG1oKGEsYixjLGQpe2lmKDUwPHprKXRocm93IHprPTAsQWs9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1SKWE9PT1SJiYoMD09PShLJjIpJiYocmt8PWMpLDQ9PT1UJiZEayhhLFopKSxFayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihIaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIEVrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEZrLmJpbmQobnVsbCxhKSk6aGcoRmsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9R2soYyxIay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gSGsoYSxiKXtCaz0tMTtDaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKElrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUprKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsSGo9QigpKzUwMCxMayhhLGIpO2RvIHRyeXtNaygpO2JyZWFrfWNhdGNoKGgpe05rKGEsaCl9d2hpbGUoMSk7UWcoKTtuay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUj1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1PayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7aWYoNj09PWIpRGsoYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFQayhlKSYmKGI9SmsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1PayhhLGYpKSksMT09PWIpKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSAzOkRrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWdrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe0woKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxiKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDQ6RGsoYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCptayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksZCk7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA1OlFrKGEsdWssdmspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1FayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Iay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE9rKGEsYil7dmFyIGM9dGs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoTGsoYSxiKS5mbGFnc3w9MjU2KTthPUprKGEsYik7MiE9PWEmJihiPXVrLHVrPWMsbnVsbCE9PWImJkdqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBHaihhKXtudWxsPT09dWs/dWs9YTp1ay5wdXNoLmFwcGx5KHVrLGEpfVxuZnVuY3Rpb24gUGsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIERrKGEsYil7YiY9fnNrO2ImPX5yazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBGayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtJaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBFayhhLEIoKSksbnVsbDt2YXIgYz1KayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9T2soYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1xayxMayhhLDApLERrKGEsYiksRWsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1FrKGEsdWssdmspO0VrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBTayhhKXtudWxsIT09eGsmJjA9PT14ay50YWcmJjA9PT0oSyY2KSYmSWsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9cGsudHJhbnNpdGlvbixkPUM7dHJ5e2lmKHBrLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLHBrLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBJaigpe2dqPWZqLmN1cnJlbnQ7RShmail9XG5mdW5jdGlvbiBMayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzpKaCgpO0UoV2YpO0UoSCk7T2goKTticmVhaztjYXNlIDU6TGgoZCk7YnJlYWs7Y2FzZSA0OkpoKCk7YnJlYWs7Y2FzZSAxMzpFKE0pO2JyZWFrO2Nhc2UgMTk6RShNKTticmVhaztjYXNlIDEwOlJnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOklqKCl9Yz1jLnJldHVybn1SPWE7WT1hPXdoKGEuY3VycmVudCxudWxsKTtaPWdqPWI7VD0wO3FrPW51bGw7c2s9cms9aGg9MDt1az10az1udWxsO2lmKG51bGwhPT1XZyl7Zm9yKGI9XG4wO2I8V2cubGVuZ3RoO2IrKylpZihjPVdnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfVdnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBOayhhLGIpe2Rve3ZhciBjPVk7dHJ5e1FnKCk7UGguY3VycmVudD1haTtpZihTaCl7Zm9yKHZhciBkPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9U2g9ITF9Umg9MDtQPU89Tj1udWxsO1RoPSExO1VoPTA7b2suY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtxaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1WaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztXaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZUaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1RpKGYsbCxiKTt1aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1WaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7V2koSixnLGgsZixiKTtKZyhLaShrLGgpKTticmVhayBhfX1mPWs9S2koayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXRrP3RrPVtmXTp0ay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9T2koZixrLGIpO2ZoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1SaShmLGgsYik7ZmgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1UayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEtrKCl7dmFyIGE9bmsuY3VycmVudDtuay5jdXJyZW50PWFpO3JldHVybiBudWxsPT09YT9haTphfVxuZnVuY3Rpb24gdWooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09Unx8MD09PShoaCYyNjg0MzU0NTUpJiYwPT09KHJrJjI2ODQzNTQ1NSl8fERrKFIsWil9ZnVuY3Rpb24gSmsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxMayhhLGIpO2RvIHRyeXtVaygpO2JyZWFrfWNhdGNoKGUpe05rKGEsZSl9d2hpbGUoMSk7UWcoKTtLPWM7bmsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7Uj1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBVaygpe2Zvcig7bnVsbCE9PVk7KVZrKFkpfWZ1bmN0aW9uIE1rKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVZrKFkpfWZ1bmN0aW9uIFZrKGEpe3ZhciBiPVdrKGEuYWx0ZXJuYXRlLGEsZ2opO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9UayhhKTpZPWI7b2suY3VycmVudD1udWxsfVxuZnVuY3Rpb24gVGsoYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RmooYyxiLGdqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUpqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUWsoYSxiLGMpe3ZhciBkPUMsZT1way50cmFuc2l0aW9uO3RyeXtway50cmFuc2l0aW9uPW51bGwsQz0xLFhrKGEsYixjLGQpfWZpbmFsbHl7cGsudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFhrKGEsYixjLGQpe2RvIElrKCk7d2hpbGUobnVsbCE9PXhrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVImJihZPVI9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8d2t8fCh3az0hMCxHayhoYyxmdW5jdGlvbigpe0lrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPXBrLnRyYW5zaXRpb247cGsudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O29rLmN1cnJlbnQ9bnVsbDtQaihhLGMpO2VrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztpayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO3BrLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3drJiYod2s9ITEseGs9YSx5az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoU2k9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RWsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKFBpKXRocm93IFBpPSExLGE9UWksUWk9bnVsbCxhOzAhPT0oeWsmMSkmJjAhPT1hLnRhZyYmSWsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09QWs/emsrKzooems9MCxBaz1hKTp6az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBJaygpe2lmKG51bGwhPT14ayl7dmFyIGE9RGMoeWspLGI9cGsudHJhbnNpdGlvbixjPUM7dHJ5e3BrLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09eGspdmFyIGQ9ITE7ZWxzZXthPXhrO3hrPW51bGw7eWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47VGoobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpSaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxway50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFlrKGEsYixjKXtiPUtpKGMsYik7Yj1PaShhLGIsMSk7YT1kaChhLGIsMSk7Yj1MKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRWsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWWsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WWsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXMoZCkpKXthPUtpKGMsYSk7YT1SaShiLGEsMSk7Yj1kaChiLGEsMSk7YT1MKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRWsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUwoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7Uj09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZ2s/TGsoYSwwKTpza3w9Yyk7RWsoYSxiKX1mdW5jdGlvbiBaayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPUwoKTthPVpnKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRWsoYSxjKSl9ZnVuY3Rpb24gdmooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1prKGEsYyl9XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtaayhhLGMpfXZhciBXaztcbldrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClVZz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIFVnPSExLHpqKGEsYixjKTtVZz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIFVnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7VGcoYixjKTtlPVhoKG51bGwsYixkLGEsZSxjKTt2YXIgZj1iaSgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsYWgoYiksZS51cGRhdGVyPW5oLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixyaChiLGQsYSxjKSxiPWtqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFlpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz0kayhkKTthPUxnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWRqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1paihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVppKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWoobnVsbCxiLGQsTGcoZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGRqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGlqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2xqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtiaChhLGIpO2doKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUtpKEVycm9yKHAoNDIzKSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1LaShFcnJvcihwKDQyNCkpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1DaChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPSRpKGEsYixjKTticmVhayBhfVlpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEtoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuaGooYSxiKSxZaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gcGooYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9QmgoYixudWxsLGQsYyk6WWkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLFppKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPSRpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPWNoKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtTZyhmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtTZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WWkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixUZyhiLGMpLGU9VmcoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWWkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9TGcoZCxiLnBlbmRpbmdQcm9wcyksZT1MZyhkLnR5cGUsZSksYWooYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBjaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksamooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLFRnKGIsYykscGgoYixkLGUpLHJoKGIsZCxlLGMpLGtqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGVqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gR2soYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uIGFsKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgYWwoYSxiLGMsZCl9ZnVuY3Rpb24gYmooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uICRrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB3aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB5aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIEFoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBxaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHFqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24geGgoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gemgoYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBibChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBjbChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYmwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2FoKGYpO3JldHVybiBhfWZ1bmN0aW9uIGRsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBlbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGZsKGEsYixjLGQsZSxmLGcsaCxrKXthPWNsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWVsKG51bGwpO2M9YS5jdXJyZW50O2Q9TCgpO2U9bGgoYyk7Zj1jaChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO2RoKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RWsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBnbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1MKCksZz1saChlKTtjPWVsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9Y2goZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1kaChlLGIsZyk7bnVsbCE9PWEmJihtaChhLGUsZyxmKSxlaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gaGwoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBpbChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gamwoYSxiKXtpbChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaWwoYSxiKX1mdW5jdGlvbiBrbCgpe3JldHVybiBudWxsfXZhciBsbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbWwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUucmVuZGVyPW1sLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7Z2woYSxiLG51bGwsbnVsbCl9O25sLnByb3RvdHlwZS51bm1vdW50PW1sLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87U2soZnVuY3Rpb24oKXtnbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBubChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIHBsKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBxbCgpe31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2YuY2FsbChhKX19dmFyIGc9ZmwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGspO2guY2FsbChhKX19dmFyIGs9Y2woYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKGZ1bmN0aW9uKCl7Z2woYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHNsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2guY2FsbChhKX19Z2woYixnLGEsZSl9ZWxzZSBnPXJsKGMsYixhLGUsZCk7cmV0dXJuIGhsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLEVrKGIsQigpKSwwPT09KEsmNikmJihIaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlNrKGZ1bmN0aW9uKCl7dmFyIGI9WmcoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxLGMpfX0pLGpsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVpnKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxMzQyMTc3MjgsYyl9amwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9bGgoYSksYz1aZyhhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1MKCk7bWgoYyxhLGIsZCl9amwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9Ums7SGI9U2s7XG52YXIgdGw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFJrXX0sdWw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB2bD17YnVuZGxlVHlwZTp1bC5idW5kbGVUeXBlLHZlcnNpb246dWwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnVsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dWwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp1bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5rbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgd2w9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF3bC5pc0Rpc2FibGVkJiZ3bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz13bC5pbmplY3QodmwpLGxjPXdsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD10bDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGRsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1sbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9Y2woYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IG1sKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBTayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1sbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZmwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbmwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcGwoYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFNrKGZ1bmN0aW9uKCl7c2wobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9Ums7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFwbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gc2woYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksYz1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLGQ9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLGU9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLGY9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLGc9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLGg9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksaz1TeW1ib2wuZm9yKFwicmVhY3Quc2VydmVyX2NvbnRleHRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksbT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksbj1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksdD1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpLHU7dT1TeW1ib2wuZm9yKFwicmVhY3QubW9kdWxlLnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIHYoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHI9YS4kJHR5cGVvZjtzd2l0Y2gocil7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIG06Y2FzZSBuOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBoOmNhc2UgbDpjYXNlIHE6Y2FzZSBwOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiByfX1jYXNlIGM6cmV0dXJuIHJ9fX1leHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWc7ZXhwb3J0cy5FbGVtZW50PWI7ZXhwb3J0cy5Gb3J3YXJkUmVmPWw7ZXhwb3J0cy5GcmFnbWVudD1kO2V4cG9ydHMuTGF6eT1xO2V4cG9ydHMuTWVtbz1wO2V4cG9ydHMuUG9ydGFsPWM7ZXhwb3J0cy5Qcm9maWxlcj1mO2V4cG9ydHMuU3RyaWN0TW9kZT1lO2V4cG9ydHMuU3VzcGVuc2U9bTtcbmV4cG9ydHMuU3VzcGVuc2VMaXN0PW47ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1sfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXF9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cH07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1tfTtleHBvcnRzLmlzU3VzcGVuc2VMaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT1lfHxhPT09bXx8YT09PW58fGE9PT10fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1sfHxhLiQkdHlwZW9mPT09dXx8dm9pZCAwIT09YS5nZXRNb2R1bGVJZCk/ITA6ITF9O2V4cG9ydHMudHlwZU9mPXY7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufSIsIi8qKlxuICogV0FSTklORzogRG9uJ3QgaW1wb3J0IHRoaXMgZGlyZWN0bHkuXG4gKiBVc2UgYE11aUVycm9yYCBmcm9tIGBAbXVpL3V0aWxzL21hY3Jvcy9NdWlFcnJvci5tYWNyb2AgaW5zdGVhZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdE11aUVycm9yTWVzc2FnZShjb2RlKSB7XG4gIC8vIEFwcGx5IGJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMgaW4gbG9vc2UgbW9kZVxuICAvLyBsb29zZSBtb2RlIGlzIHNhZmUgaWZmIHdlJ3JlIGNvbmNhdGVuYXRpbmcgcHJpbWl0aXZlc1xuICAvLyBzZWUgaHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyNsb29zZVxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgbGV0IHVybCA9ICdodHRwczovL211aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyByZXN0IHBhcmFtcyBvdmVyLXRyYW5zcGlsZSBmb3IgdGhpcyBjYXNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIHVybCArPSAnJmFyZ3NbXT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuICdNaW5pZmllZCBNVUkgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArIHVybCArICcgZm9yIHRoZSBmdWxsIG1lc3NhZ2UuJztcbiAgLyogZXNsaW50LWVuYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0gIT09IG51bGwgJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmZ1bmN0aW9uIGRlZXBDbG9uZShzb3VyY2UpIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICBvdXRwdXRba2V5XSA9IGRlZXBDbG9uZShzb3VyY2Vba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zID0ge1xuICBjbG9uZTogdHJ1ZVxufSkge1xuICBjb25zdCBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG4gIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAvLyBBdm9pZCBwcm90b3R5cGUgcG9sbHV0aW9uXG4gICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYga2V5IGluIHRhcmdldCAmJiBpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSkge1xuICAgICAgICAvLyBTaW5jZSBgb3V0cHV0YCBpcyBhIGNsb25lIG9mIGB0YXJnZXRgIGFuZCB3ZSBoYXZlIG5hcnJvd2VkIGB0YXJnZXRgIGluIHRoaXMgYmxvY2sgd2UgY2FuIGNhc3QgdG8gdGhlIHNhbWUgdHlwZS5cbiAgICAgICAgb3V0cHV0W2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5jbG9uZSkge1xuICAgICAgICBvdXRwdXRba2V5XSA9IGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pID8gZGVlcENsb25lKHNvdXJjZVtrZXldKSA6IHNvdXJjZVtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXTtcbi8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbi8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbmV4cG9ydCBjb25zdCBicmVha3BvaW50S2V5cyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTtcbmNvbnN0IHNvcnRCcmVha3BvaW50c1ZhbHVlcyA9IHZhbHVlcyA9PiB7XG4gIGNvbnN0IGJyZWFrcG9pbnRzQXNBcnJheSA9IE9iamVjdC5rZXlzKHZhbHVlcykubWFwKGtleSA9PiAoe1xuICAgIGtleSxcbiAgICB2YWw6IHZhbHVlc1trZXldXG4gIH0pKSB8fCBbXTtcbiAgLy8gU29ydCBpbiBhc2NlbmRpbmcgb3JkZXJcbiAgYnJlYWtwb2ludHNBc0FycmF5LnNvcnQoKGJyZWFrcG9pbnQxLCBicmVha3BvaW50MikgPT4gYnJlYWtwb2ludDEudmFsIC0gYnJlYWtwb2ludDIudmFsKTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzQXNBcnJheS5yZWR1Y2UoKGFjYywgb2JqKSA9PiB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhY2MsIHtcbiAgICAgIFtvYmoua2V5XTogb2JqLnZhbFxuICAgIH0pO1xuICB9LCB7fSk7XG59O1xuXG4vLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIGNvbnN0IHtcbiAgICAgIC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuICAgICAgLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc20pLlxuICAgICAgdmFsdWVzID0ge1xuICAgICAgICB4czogMCxcbiAgICAgICAgLy8gcGhvbmVcbiAgICAgICAgc206IDYwMCxcbiAgICAgICAgLy8gdGFibGV0XG4gICAgICAgIG1kOiA5MDAsXG4gICAgICAgIC8vIHNtYWxsIGxhcHRvcFxuICAgICAgICBsZzogMTIwMCxcbiAgICAgICAgLy8gZGVza3RvcFxuICAgICAgICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cbiAgICAgIH0sXG5cbiAgICAgIHVuaXQgPSAncHgnLFxuICAgICAgc3RlcCA9IDVcbiAgICB9ID0gYnJlYWtwb2ludHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShicmVha3BvaW50cywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgc29ydGVkVmFsdWVzID0gc29ydEJyZWFrcG9pbnRzVmFsdWVzKHZhbHVlcyk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3J0ZWRWYWx1ZXMpO1xuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dmFsdWV9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1heC13aWR0aDoke3ZhbHVlIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dHlwZW9mIHZhbHVlc1tzdGFydF0gPT09ICdudW1iZXInID8gdmFsdWVzW3N0YXJ0XSA6IHN0YXJ0fSR7dW5pdH0pIGFuZCBgICsgYChtYXgtd2lkdGg6JHsoZW5kSW5kZXggIT09IC0xICYmIHR5cGVvZiB2YWx1ZXNba2V5c1tlbmRJbmRleF1dID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXlzW2VuZEluZGV4XV0gOiBlbmQpIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgKyAxIDwga2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHVwKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbm90KGtleSkge1xuICAgIC8vIGhhbmRsZSBmaXJzdCBhbmQgbGFzdCBrZXkgc2VwYXJhdGVseSwgZm9yIGJldHRlciByZWFkYWJpbGl0eVxuICAgIGNvbnN0IGtleUluZGV4ID0ga2V5cy5pbmRleE9mKGtleSk7XG4gICAgaWYgKGtleUluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gdXAoa2V5c1sxXSk7XG4gICAgfVxuICAgIGlmIChrZXlJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gZG93bihrZXlzW2tleUluZGV4XSk7XG4gICAgfVxuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKS5yZXBsYWNlKCdAbWVkaWEnLCAnQG1lZGlhIG5vdCBhbGwgYW5kJyk7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBrZXlzLFxuICAgIHZhbHVlczogc29ydGVkVmFsdWVzLFxuICAgIHVwLFxuICAgIGRvd24sXG4gICAgYmV0d2VlbixcbiAgICBvbmx5LFxuICAgIG5vdCxcbiAgICB1bml0XG4gIH0sIG90aGVyKTtcbn0iLCJjb25zdCBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hhcGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbi8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuZXhwb3J0IGNvbnN0IHZhbHVlcyA9IHtcbiAgeHM6IDAsXG4gIC8vIHBob25lXG4gIHNtOiA2MDAsXG4gIC8vIHRhYmxldFxuICBtZDogOTAwLFxuICAvLyBzbWFsbCBsYXB0b3BcbiAgbGc6IDEyMDAsXG4gIC8vIGRlc2t0b3BcbiAgeGw6IDE1MzYgLy8gbGFyZ2Ugc2NyZWVuXG59O1xuXG5jb25zdCBkZWZhdWx0QnJlYWtwb2ludHMgPSB7XG4gIC8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbiAgLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuICBrZXlzOiBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10sXG4gIHVwOiBrZXkgPT4gYEBtZWRpYSAobWluLXdpZHRoOiR7dmFsdWVzW2tleV19cHgpYFxufTtcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpIHtcbiAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZSB8fCB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5yZWR1Y2UoKGFjYywgaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKHRoZW1lQnJlYWtwb2ludHMua2V5c1tpbmRleF0pXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbaW5kZXhdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIC8vIGtleSBpcyBicmVha3BvaW50XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cy52YWx1ZXMgfHwgdmFsdWVzKS5pbmRleE9mKGJyZWFrcG9pbnQpICE9PSAtMSkge1xuICAgICAgICBjb25zdCBtZWRpYUtleSA9IHRoZW1lQnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCk7XG4gICAgICAgIGFjY1ttZWRpYUtleV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdLCBicmVha3BvaW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNzc0tleSA9IGJyZWFrcG9pbnQ7XG4gICAgICAgIGFjY1tjc3NLZXldID0gcHJvcFZhbHVlW2Nzc0tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuICBjb25zdCBvdXRwdXQgPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlKTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgLy8gZmFsc2UgcG9zaXRpdmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG4gIGNvbnN0IG5ld1N0eWxlRnVuY3Rpb24gPSBwcm9wcyA9PiB7XG4gICAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZSB8fCB7fTtcbiAgICBjb25zdCBiYXNlID0gc3R5bGVGdW5jdGlvbihwcm9wcyk7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICBjb25zdCBleHRlbmRlZCA9IHRoZW1lQnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICBpZiAocHJvcHNba2V5XSkge1xuICAgICAgICBhY2MgPSBhY2MgfHwge307XG4gICAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKGtleSldID0gc3R5bGVGdW5jdGlvbihfZXh0ZW5kcyh7XG4gICAgICAgICAgdGhlbWVcbiAgICAgICAgfSwgcHJvcHNba2V5XSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBudWxsKTtcbiAgICByZXR1cm4gbWVyZ2UoYmFzZSwgZXh0ZW5kZWQpO1xuICB9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMsIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIC4uLnN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHNdO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCA9IHt9KSB7XG4gIHZhciBfYnJlYWtwb2ludHNJbnB1dCRrZXk7XG4gIGNvbnN0IGJyZWFrcG9pbnRzSW5PcmRlciA9IChfYnJlYWtwb2ludHNJbnB1dCRrZXkgPSBicmVha3BvaW50c0lucHV0LmtleXMpID09IG51bGwgPyB2b2lkIDAgOiBfYnJlYWtwb2ludHNJbnB1dCRrZXkucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRTdHlsZUtleSA9IGJyZWFrcG9pbnRzSW5wdXQudXAoa2V5KTtcbiAgICBhY2NbYnJlYWtwb2ludFN0eWxlS2V5XSA9IHt9O1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzSW5PcmRlciB8fCB7fTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50S2V5cywgc3R5bGUpIHtcbiAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50T3V0cHV0ID0gYWNjW2tleV07XG4gICAgY29uc3QgaXNCcmVha3BvaW50VW51c2VkID0gIWJyZWFrcG9pbnRPdXRwdXQgfHwgT2JqZWN0LmtleXMoYnJlYWtwb2ludE91dHB1dCkubGVuZ3RoID09PSAwO1xuICAgIGlmIChpc0JyZWFrcG9pbnRVbnVzZWQpIHtcbiAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgc3R5bGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQnJlYWtwb2ludHNJbk9yZGVyKGJyZWFrcG9pbnRzSW5wdXQsIC4uLnN0eWxlcykge1xuICBjb25zdCBlbXB0eUJyZWFrcG9pbnRzID0gY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0KGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBtZXJnZWRPdXRwdXQgPSBbZW1wdHlCcmVha3BvaW50cywgLi4uc3R5bGVzXS5yZWR1Y2UoKHByZXYsIG5leHQpID0+IGRlZXBtZXJnZShwcmV2LCBuZXh0KSwge30pO1xuICByZXR1cm4gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoT2JqZWN0LmtleXMoZW1wdHlCcmVha3BvaW50cyksIG1lcmdlZE91dHB1dCk7XG59XG5cbi8vIGNvbXB1dGUgYmFzZSBmb3IgcmVzcG9uc2l2ZSB2YWx1ZXM7IGUuZy4sXG4vLyBbMSwyLDNdID0+IHt4czogdHJ1ZSwgc206IHRydWUsIG1kOiB0cnVlfVxuLy8ge3hzOiAxLCBzbTogMiwgbWQ6IDN9ID0+IHt4czogdHJ1ZSwgc206IHRydWUsIG1kOiB0cnVlfVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVCcmVha3BvaW50c0Jhc2UoYnJlYWtwb2ludFZhbHVlcywgdGhlbWVCcmVha3BvaW50cykge1xuICAvLyBmaXhlZCB2YWx1ZVxuICBpZiAodHlwZW9mIGJyZWFrcG9pbnRWYWx1ZXMgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IGJhc2UgPSB7fTtcbiAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cyk7XG4gIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgYnJlYWtwb2ludHNLZXlzLmZvckVhY2goKGJyZWFrcG9pbnQsIGkpID0+IHtcbiAgICAgIGlmIChpIDwgYnJlYWtwb2ludFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYnJlYWtwb2ludHNLZXlzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgICBpZiAoYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBiYXNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgdmFsdWVzOiBicmVha3BvaW50VmFsdWVzLFxuICBicmVha3BvaW50czogdGhlbWVCcmVha3BvaW50cyxcbiAgYmFzZTogY3VzdG9tQmFzZVxufSkge1xuICBjb25zdCBiYXNlID0gY3VzdG9tQmFzZSB8fCBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYmFzZSk7XG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBicmVha3BvaW50VmFsdWVzO1xuICB9XG4gIGxldCBwcmV2aW91cztcbiAgcmV0dXJuIGtleXMucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQsIGkpID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShicmVha3BvaW50VmFsdWVzKSkge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlc1tpXSAhPSBudWxsID8gYnJlYWtwb2ludFZhbHVlc1tpXSA6IGJyZWFrcG9pbnRWYWx1ZXNbcHJldmlvdXNdO1xuICAgICAgcHJldmlvdXMgPSBpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJyZWFrcG9pbnRWYWx1ZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGJyZWFrcG9pbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXM7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsImltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCIuLi9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgaW4gdGhlIHNlbnRlbmNlLlxuLy8gV2Ugb25seSBoYW5kbGUgdGhlIGZpcnN0IHdvcmQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogXFxgY2FwaXRhbGl6ZShzdHJpbmcpXFxgIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgsIGNoZWNrVmFycyA9IHRydWUpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgQ1NTIHZhcmlhYmxlcyBhcmUgdXNlZFxuICBpZiAob2JqICYmIG9iai52YXJzICYmIGNoZWNrVmFycykge1xuICAgIGNvbnN0IHZhbCA9IGB2YXJzLiR7cGF0aH1gLnNwbGl0KCcuJykucmVkdWNlKChhY2MsIGl0ZW0pID0+IGFjYyAmJiBhY2NbaXRlbV0gPyBhY2NbaXRlbV0gOiBudWxsLCBvYmopO1xuICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xuICAgIGlmIChhY2MgJiYgYWNjW2l0ZW1dICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2NbaXRlbV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsLCB1c2VyVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCkge1xuICBsZXQgdmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVNYXBwaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmcocHJvcFZhbHVlRmluYWwpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVNYXBwaW5nKSkge1xuICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nW3Byb3BWYWx1ZUZpbmFsXSB8fCB1c2VyVmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBnZXRQYXRoKHRoZW1lTWFwcGluZywgcHJvcFZhbHVlRmluYWwpIHx8IHVzZXJWYWx1ZTtcbiAgfVxuICBpZiAodHJhbnNmb3JtKSB7XG4gICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUsIHVzZXJWYWx1ZSwgdGhlbWVNYXBwaW5nKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBzdHlsZShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBwcm9wLFxuICAgIGNzc1Byb3BlcnR5ID0gb3B0aW9ucy5wcm9wLFxuICAgIHRoZW1lS2V5LFxuICAgIHRyYW5zZm9ybVxuICB9ID0gb3B0aW9ucztcblxuICAvLyBmYWxzZSBwb3NpdGl2ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzW3Byb3BdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIGNvbnN0IHRoZW1lTWFwcGluZyA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5KSB8fCB7fTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRTdHlsZVZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICBpZiAocHJvcFZhbHVlRmluYWwgPT09IHZhbHVlICYmIHR5cGVvZiBwcm9wVmFsdWVGaW5hbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gSGF2ZW4ndCBmb3VuZCB2YWx1ZVxuICAgICAgICB2YWx1ZSA9IGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIGAke3Byb3B9JHtwcm9wVmFsdWVGaW5hbCA9PT0gJ2RlZmF1bHQnID8gJycgOiBjYXBpdGFsaXplKHByb3BWYWx1ZUZpbmFsKX1gLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICB9XG4gICAgICBpZiAoY3NzUHJvcGVydHkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjc3NQcm9wZXJ0eV06IHZhbHVlXG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH07XG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gICAgW3Byb3BdOiByZXNwb25zaXZlUHJvcFR5cGVcbiAgfSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IFtwcm9wXTtcbiAgcmV0dXJuIGZuO1xufVxuZXhwb3J0IGRlZmF1bHQgc3R5bGU7IiwiaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5mdW5jdGlvbiBtZXJnZShhY2MsIGl0ZW0pIHtcbiAgaWYgKCFpdGVtKSB7XG4gICAgcmV0dXJuIGFjYztcbiAgfVxuICByZXR1cm4gZGVlcG1lcmdlKGFjYywgaXRlbSwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXAsIGl0J3Mgd2F5IGZhc3Rlci5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCB7IGdldFBhdGggfSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZSc7XG5jb25zdCBwcm9wZXJ0aWVzID0ge1xuICBtOiAnbWFyZ2luJyxcbiAgcDogJ3BhZGRpbmcnXG59O1xuY29uc3QgZGlyZWN0aW9ucyA9IHtcbiAgdDogJ1RvcCcsXG4gIHI6ICdSaWdodCcsXG4gIGI6ICdCb3R0b20nLFxuICBsOiAnTGVmdCcsXG4gIHg6IFsnTGVmdCcsICdSaWdodCddLFxuICB5OiBbJ1RvcCcsICdCb3R0b20nXVxufTtcbmNvbnN0IGFsaWFzZXMgPSB7XG4gIG1hcmdpblg6ICdteCcsXG4gIG1hcmdpblk6ICdteScsXG4gIHBhZGRpbmdYOiAncHgnLFxuICBwYWRkaW5nWTogJ3B5J1xufTtcblxuLy8gbWVtb2l6ZSgpIGltcGFjdDpcbi8vIEZyb20gMzAwLDAwMCBvcHMvc2VjXG4vLyBUbyAzNTAsMDAwIG9wcy9zZWNcbmNvbnN0IGdldENzc1Byb3BlcnRpZXMgPSBtZW1vaXplKHByb3AgPT4ge1xuICAvLyBJdCdzIG5vdCBhIHNob3J0aGFuZCBub3RhdGlvbi5cbiAgaWYgKHByb3AubGVuZ3RoID4gMikge1xuICAgIGlmIChhbGlhc2VzW3Byb3BdKSB7XG4gICAgICBwcm9wID0gYWxpYXNlc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICB9XG4gIH1cbiAgY29uc3QgW2EsIGJdID0gcHJvcC5zcGxpdCgnJyk7XG4gIGNvbnN0IHByb3BlcnR5ID0gcHJvcGVydGllc1thXTtcbiAgY29uc3QgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tiXSB8fCAnJztcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGlyZWN0aW9uKSA/IGRpcmVjdGlvbi5tYXAoZGlyID0+IHByb3BlcnR5ICsgZGlyKSA6IFtwcm9wZXJ0eSArIGRpcmVjdGlvbl07XG59KTtcbmV4cG9ydCBjb25zdCBtYXJnaW5LZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ21hcmdpbicsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luWCcsICdtYXJnaW5ZJywgJ21hcmdpbklubGluZScsICdtYXJnaW5JbmxpbmVTdGFydCcsICdtYXJnaW5JbmxpbmVFbmQnLCAnbWFyZ2luQmxvY2snLCAnbWFyZ2luQmxvY2tTdGFydCcsICdtYXJnaW5CbG9ja0VuZCddO1xuZXhwb3J0IGNvbnN0IHBhZGRpbmdLZXlzID0gWydwJywgJ3B0JywgJ3ByJywgJ3BiJywgJ3BsJywgJ3B4JywgJ3B5JywgJ3BhZGRpbmcnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ0JvdHRvbScsICdwYWRkaW5nTGVmdCcsICdwYWRkaW5nWCcsICdwYWRkaW5nWScsICdwYWRkaW5nSW5saW5lJywgJ3BhZGRpbmdJbmxpbmVTdGFydCcsICdwYWRkaW5nSW5saW5lRW5kJywgJ3BhZGRpbmdCbG9jaycsICdwYWRkaW5nQmxvY2tTdGFydCcsICdwYWRkaW5nQmxvY2tFbmQnXTtcbmNvbnN0IHNwYWNpbmdLZXlzID0gWy4uLm1hcmdpbktleXMsIC4uLnBhZGRpbmdLZXlzXTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVVuaXQodGhlbWUsIHRoZW1lS2V5LCBkZWZhdWx0VmFsdWUsIHByb3BOYW1lKSB7XG4gIHZhciBfZ2V0UGF0aDtcbiAgY29uc3QgdGhlbWVTcGFjaW5nID0gKF9nZXRQYXRoID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXksIGZhbHNlKSkgIT0gbnVsbCA/IF9nZXRQYXRoIDogZGVmYXVsdFZhbHVlO1xuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gYWJzID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYWJzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYWJzO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhYnMgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBFeHBlY3RlZCAke3Byb3BOYW1lfSBhcmd1bWVudCB0byBiZSBhIG51bWJlciBvciBhIHN0cmluZywgZ290ICR7YWJzfS5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZyAqIGFicztcbiAgICB9O1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lU3BhY2luZykpIHtcbiAgICByZXR1cm4gYWJzID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYWJzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYWJzO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGFicykpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgYXJyYXkgdHlwZSBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBub24gaW50ZWdlciB2YWx1ZXMuYCArIGBZb3Ugc2hvdWxkIGVpdGhlciB1c2UgYW4gaW50ZWdlciB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGluZGV4LCBvciBkZWZpbmUgdGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIGFzIGEgbnVtYmVyLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfSBlbHNlIGlmIChhYnMgPiB0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAoJHthYnN9KSBvdmVyZmxvd3MuYCwgYFRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTogJHtKU09OLnN0cmluZ2lmeSh0aGVtZVNwYWNpbmcpfS5gLCBgJHthYnN9ID4gJHt0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMX0sIHlvdSBuZWVkIHRvIGFkZCB0aGUgbWlzc2luZyB2YWx1ZXMuYF0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nW2Fic107XG4gICAgfTtcbiAgfVxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0aGVtZVNwYWNpbmc7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgdmFsdWUgKCR7dGhlbWVTcGFjaW5nfSkgaXMgaW52YWxpZC5gLCAnSXQgc2hvdWxkIGJlIGEgbnVtYmVyLCBhbiBhcnJheSBvciBhIGZ1bmN0aW9uLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuICByZXR1cm4gKCkgPT4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSkge1xuICByZXR1cm4gY3JlYXRlVW5hcnlVbml0KHRoZW1lLCAnc3BhY2luZycsIDgsICdzcGFjaW5nJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSkge1xuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3N0cmluZycgfHwgcHJvcFZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gcHJvcFZhbHVlO1xuICB9XG4gIGNvbnN0IGFicyA9IE1hdGguYWJzKHByb3BWYWx1ZSk7XG4gIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtZXIoYWJzKTtcbiAgaWYgKHByb3BWYWx1ZSA+PSAwKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkO1xuICB9XG4gIGlmICh0eXBlb2YgdHJhbnNmb3JtZWQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIC10cmFuc2Zvcm1lZDtcbiAgfVxuICByZXR1cm4gYC0ke3RyYW5zZm9ybWVkfWA7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKSB7XG4gIHJldHVybiBwcm9wVmFsdWUgPT4gY3NzUHJvcGVydGllcy5yZWR1Y2UoKGFjYywgY3NzUHJvcGVydHkpID0+IHtcbiAgICBhY2NbY3NzUHJvcGVydHldID0gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNzc1Byb3BlcnR5KHByb3BzLCBrZXlzLCBwcm9wLCB0cmFuc2Zvcm1lcikge1xuICAvLyBVc2luZyBhIGhhc2ggY29tcHV0YXRpb24gb3ZlciBhbiBhcnJheSBpdGVyYXRpb24gY291bGQgYmUgZmFzdGVyLCBidXQgd2l0aCBvbmx5IDI4IGl0ZW1zLFxuICAvLyBpdCdzIGRvZXNuJ3Qgd29ydGggdGhlIGJ1bmRsZSBzaXplLlxuICBpZiAoa2V5cy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGNzc1Byb3BlcnRpZXMgPSBnZXRDc3NQcm9wZXJ0aWVzKHByb3ApO1xuICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpO1xuICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG59XG5mdW5jdGlvbiBzdHlsZShwcm9wcywga2V5cykge1xuICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyhwcm9wcy50aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKHByb3AgPT4gcmVzb2x2ZUNzc1Byb3BlcnR5KHByb3BzLCBrZXlzLCBwcm9wLCB0cmFuc2Zvcm1lcikpLnJlZHVjZShtZXJnZSwge30pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcmdpbihwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIG1hcmdpbktleXMpO1xufVxubWFyZ2luLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBtYXJnaW5LZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbm1hcmdpbi5maWx0ZXJQcm9wcyA9IG1hcmdpbktleXM7XG5leHBvcnQgZnVuY3Rpb24gcGFkZGluZyhwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIHBhZGRpbmdLZXlzKTtcbn1cbnBhZGRpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHBhZGRpbmdLZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnBhZGRpbmcuZmlsdGVyUHJvcHMgPSBwYWRkaW5nS2V5cztcbmZ1bmN0aW9uIHNwYWNpbmcocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBzcGFjaW5nS2V5cyk7XG59XG5zcGFjaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG5leHBvcnQgZGVmYXVsdCBzcGFjaW5nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgY29uc3QgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGFyZyA9PiB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufSIsImltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmZ1bmN0aW9uIGNvbXBvc2UoLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGhhbmRsZXJzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4ge1xuICAgIHN0eWxlLmZpbHRlclByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBhY2NbcHJvcF0gPSBzdHlsZTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgLy8gZmFsc2UgcG9zaXRpdmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG4gIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChhY2MsIHByb3ApID0+IHtcbiAgICAgIGlmIChoYW5kbGVyc1twcm9wXSkge1xuICAgICAgICByZXR1cm4gbWVyZ2UoYWNjLCBoYW5kbGVyc1twcm9wXShwcm9wcykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07XG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBPYmplY3QuYXNzaWduKGFjYywgc3R5bGUucHJvcFR5cGVzKSwge30pIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gYWNjLmNvbmNhdChzdHlsZS5maWx0ZXJQcm9wcyksIFtdKTtcbiAgcmV0dXJuIGZuO1xufVxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZTsiLCJpbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBjcmVhdGVVbmFyeVVuaXQsIGdldFZhbHVlIH0gZnJvbSAnLi9zcGFjaW5nJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gYm9yZGVyVHJhbnNmb3JtKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBgJHt2YWx1ZX1weCBzb2xpZGA7XG59XG5mdW5jdGlvbiBjcmVhdGVCb3JkZXJTdHlsZShwcm9wLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHN0eWxlKHtcbiAgICBwcm9wLFxuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtXG4gIH0pO1xufVxuZXhwb3J0IGNvbnN0IGJvcmRlciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXInLCBib3JkZXJUcmFuc2Zvcm0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcCA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJUb3AnLCBib3JkZXJUcmFuc2Zvcm0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJpZ2h0ID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlclJpZ2h0JywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJCb3R0b20gPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyQm90dG9tJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0ID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlckxlZnQnLCBib3JkZXJUcmFuc2Zvcm0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckNvbG9yID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlckNvbG9yJyk7XG5leHBvcnQgY29uc3QgYm9yZGVyVG9wQ29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyVG9wQ29sb3InKTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodENvbG9yID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlclJpZ2h0Q29sb3InKTtcbmV4cG9ydCBjb25zdCBib3JkZXJCb3R0b21Db2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJCb3R0b21Db2xvcicpO1xuZXhwb3J0IGNvbnN0IGJvcmRlckxlZnRDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJMZWZ0Q29sb3InKTtcbmV4cG9ydCBjb25zdCBvdXRsaW5lID0gY3JlYXRlQm9yZGVyU3R5bGUoJ291dGxpbmUnLCBib3JkZXJUcmFuc2Zvcm0pO1xuZXhwb3J0IGNvbnN0IG91dGxpbmVDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdvdXRsaW5lQ29sb3InKTtcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IGJvcmRlclJhZGl1cyA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmJvcmRlclJhZGl1cyAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmJvcmRlclJhZGl1cyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc2hhcGUuYm9yZGVyUmFkaXVzJywgNCwgJ2JvcmRlclJhZGl1cycpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgYm9yZGVyUmFkaXVzOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuYm9yZGVyUmFkaXVzLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmJvcmRlclJhZGl1cy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBib3JkZXJSYWRpdXM6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuYm9yZGVyUmFkaXVzLmZpbHRlclByb3BzID0gWydib3JkZXJSYWRpdXMnXTtcbmNvbnN0IGJvcmRlcnMgPSBjb21wb3NlKGJvcmRlciwgYm9yZGVyVG9wLCBib3JkZXJSaWdodCwgYm9yZGVyQm90dG9tLCBib3JkZXJMZWZ0LCBib3JkZXJDb2xvciwgYm9yZGVyVG9wQ29sb3IsIGJvcmRlclJpZ2h0Q29sb3IsIGJvcmRlckJvdHRvbUNvbG9yLCBib3JkZXJMZWZ0Q29sb3IsIGJvcmRlclJhZGl1cywgb3V0bGluZSwgb3V0bGluZUNvbG9yKTtcbmV4cG9ydCBkZWZhdWx0IGJvcmRlcnM7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3QgZ2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuZ2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZ2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2dhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgZ2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuZ2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBnYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuZ2FwLmZpbHRlclByb3BzID0gWydnYXAnXTtcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IGNvbHVtbkdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmNvbHVtbkdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmNvbHVtbkdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdjb2x1bW5HYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGNvbHVtbkdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmNvbHVtbkdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb2x1bW5HYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgY29sdW1uR2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmNvbHVtbkdhcC5maWx0ZXJQcm9wcyA9IFsnY29sdW1uR2FwJ107XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCByb3dHYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5yb3dHYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5yb3dHYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAncm93R2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICByb3dHYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5yb3dHYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xucm93R2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIHJvd0dhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5yb3dHYXAuZmlsdGVyUHJvcHMgPSBbJ3Jvd0dhcCddO1xuZXhwb3J0IGNvbnN0IGdyaWRDb2x1bW4gPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQ29sdW1uJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFJvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRSb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0Zsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0Zsb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0NvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0NvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b1Jvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b1Jvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVDb2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZVJvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVSb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQXJlYXMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVBcmVhcydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBcmVhID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEFyZWEnXG59KTtcbmNvbnN0IGdyaWQgPSBjb21wb3NlKGdhcCwgY29sdW1uR2FwLCByb3dHYXAsIGdyaWRDb2x1bW4sIGdyaWRSb3csIGdyaWRBdXRvRmxvdywgZ3JpZEF1dG9Db2x1bW5zLCBncmlkQXV0b1Jvd3MsIGdyaWRUZW1wbGF0ZUNvbHVtbnMsIGdyaWRUZW1wbGF0ZVJvd3MsIGdyaWRUZW1wbGF0ZUFyZWFzLCBncmlkQXJlYSk7XG5leHBvcnQgZGVmYXVsdCBncmlkOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgZnVuY3Rpb24gcGFsZXR0ZVRyYW5zZm9ybSh2YWx1ZSwgdXNlclZhbHVlKSB7XG4gIGlmICh1c2VyVmFsdWUgPT09ICdncmV5Jykge1xuICAgIHJldHVybiB1c2VyVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0IGNvbnN0IGNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnY29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJnY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiZ2NvbG9yJyxcbiAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JhY2tncm91bmRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxufSk7XG5jb25zdCBwYWxldHRlID0gY29tcG9zZShjb2xvciwgYmdjb2xvciwgYmFja2dyb3VuZENvbG9yKTtcbmV4cG9ydCBkZWZhdWx0IHBhbGV0dGU7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCB2YWx1ZXMgYXMgYnJlYWtwb2ludHNWYWx1ZXMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBzaXppbmdUcmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDw9IDEgJiYgdmFsdWUgIT09IDAgPyBgJHt2YWx1ZSAqIDEwMH0lYCA6IHZhbHVlO1xufVxuZXhwb3J0IGNvbnN0IHdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnd2lkdGgnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWF4V2lkdGggPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5tYXhXaWR0aCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLm1heFdpZHRoICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+IHtcbiAgICAgIHZhciBfcHJvcHMkdGhlbWUsIF9wcm9wcyR0aGVtZTI7XG4gICAgICBjb25zdCBicmVha3BvaW50ID0gKChfcHJvcHMkdGhlbWUgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCB8fCAoX3Byb3BzJHRoZW1lID0gX3Byb3BzJHRoZW1lLmJyZWFrcG9pbnRzKSA9PSBudWxsIHx8IChfcHJvcHMkdGhlbWUgPSBfcHJvcHMkdGhlbWUudmFsdWVzKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lW3Byb3BWYWx1ZV0pIHx8IGJyZWFrcG9pbnRzVmFsdWVzW3Byb3BWYWx1ZV07XG4gICAgICBpZiAoIWJyZWFrcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtYXhXaWR0aDogc2l6aW5nVHJhbnNmb3JtKHByb3BWYWx1ZSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICgoKF9wcm9wcyR0aGVtZTIgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCB8fCAoX3Byb3BzJHRoZW1lMiA9IF9wcm9wcyR0aGVtZTIuYnJlYWtwb2ludHMpID09IG51bGwgPyB2b2lkIDAgOiBfcHJvcHMkdGhlbWUyLnVuaXQpICE9PSAncHgnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF4V2lkdGg6IGAke2JyZWFrcG9pbnR9JHtwcm9wcy50aGVtZS5icmVha3BvaW50cy51bml0fWBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1heFdpZHRoOiBicmVha3BvaW50XG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5tYXhXaWR0aCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5tYXhXaWR0aC5maWx0ZXJQcm9wcyA9IFsnbWF4V2lkdGgnXTtcbmV4cG9ydCBjb25zdCBtaW5XaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbldpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhIZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWluSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWluSGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVXaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm94U2l6aW5nID0gc3R5bGUoe1xuICBwcm9wOiAnYm94U2l6aW5nJ1xufSk7XG5jb25zdCBzaXppbmcgPSBjb21wb3NlKHdpZHRoLCBtYXhXaWR0aCwgbWluV2lkdGgsIGhlaWdodCwgbWF4SGVpZ2h0LCBtaW5IZWlnaHQsIGJveFNpemluZyk7XG5leHBvcnQgZGVmYXVsdCBzaXppbmc7IiwiaW1wb3J0IHsgcGFkZGluZywgbWFyZ2luIH0gZnJvbSAnLi4vc3BhY2luZyc7XG5pbXBvcnQgeyBib3JkZXJSYWRpdXMsIGJvcmRlclRyYW5zZm9ybSB9IGZyb20gJy4uL2JvcmRlcnMnO1xuaW1wb3J0IHsgZ2FwLCByb3dHYXAsIGNvbHVtbkdhcCB9IGZyb20gJy4uL2Nzc0dyaWQnO1xuaW1wb3J0IHsgcGFsZXR0ZVRyYW5zZm9ybSB9IGZyb20gJy4uL3BhbGV0dGUnO1xuaW1wb3J0IHsgbWF4V2lkdGgsIHNpemluZ1RyYW5zZm9ybSB9IGZyb20gJy4uL3NpemluZyc7XG5jb25zdCBkZWZhdWx0U3hDb25maWcgPSB7XG4gIC8vIGJvcmRlcnNcbiAgYm9yZGVyOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJUb3A6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlclJpZ2h0OiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJCb3R0b206IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlckxlZnQ6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlckNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJUb3BDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyUmlnaHRDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyQm90dG9tQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlckxlZnRDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgb3V0bGluZToge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgb3V0bGluZUNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJSYWRpdXM6IHtcbiAgICB0aGVtZUtleTogJ3NoYXBlLmJvcmRlclJhZGl1cycsXG4gICAgc3R5bGU6IGJvcmRlclJhZGl1c1xuICB9LFxuICAvLyBwYWxldHRlXG4gIGNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgYmdjb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gICAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxuICB9LFxuICBiYWNrZ3JvdW5kQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICAgIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxuICB9LFxuICAvLyBzcGFjaW5nXG4gIHA6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwdDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHByOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGI6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwbDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHB4OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHk6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ1RvcDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdSaWdodDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCb3R0b206IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nTGVmdDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdYOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ1k6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nSW5saW5lOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZVN0YXJ0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZUVuZDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9jazoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9ja1N0YXJ0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0Jsb2NrRW5kOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgbToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1yOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWw6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG14OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBteToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5Ub3A6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblJpZ2h0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5Cb3R0b206IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkxlZnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblg6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblk6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luSW5saW5lU3RhcnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZUVuZDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQmxvY2s6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrU3RhcnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrRW5kOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICAvLyBkaXNwbGF5XG4gIGRpc3BsYXlQcmludDoge1xuICAgIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgICB0cmFuc2Zvcm06IHZhbHVlID0+ICh7XG4gICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICBkaXNwbGF5OiB2YWx1ZVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG4gIGRpc3BsYXk6IHt9LFxuICBvdmVyZmxvdzoge30sXG4gIHRleHRPdmVyZmxvdzoge30sXG4gIHZpc2liaWxpdHk6IHt9LFxuICB3aGl0ZVNwYWNlOiB7fSxcbiAgLy8gZmxleGJveFxuICBmbGV4QmFzaXM6IHt9LFxuICBmbGV4RGlyZWN0aW9uOiB7fSxcbiAgZmxleFdyYXA6IHt9LFxuICBqdXN0aWZ5Q29udGVudDoge30sXG4gIGFsaWduSXRlbXM6IHt9LFxuICBhbGlnbkNvbnRlbnQ6IHt9LFxuICBvcmRlcjoge30sXG4gIGZsZXg6IHt9LFxuICBmbGV4R3Jvdzoge30sXG4gIGZsZXhTaHJpbms6IHt9LFxuICBhbGlnblNlbGY6IHt9LFxuICBqdXN0aWZ5SXRlbXM6IHt9LFxuICBqdXN0aWZ5U2VsZjoge30sXG4gIC8vIGdyaWRcbiAgZ2FwOiB7XG4gICAgc3R5bGU6IGdhcFxuICB9LFxuICByb3dHYXA6IHtcbiAgICBzdHlsZTogcm93R2FwXG4gIH0sXG4gIGNvbHVtbkdhcDoge1xuICAgIHN0eWxlOiBjb2x1bW5HYXBcbiAgfSxcbiAgZ3JpZENvbHVtbjoge30sXG4gIGdyaWRSb3c6IHt9LFxuICBncmlkQXV0b0Zsb3c6IHt9LFxuICBncmlkQXV0b0NvbHVtbnM6IHt9LFxuICBncmlkQXV0b1Jvd3M6IHt9LFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiB7fSxcbiAgZ3JpZFRlbXBsYXRlUm93czoge30sXG4gIGdyaWRUZW1wbGF0ZUFyZWFzOiB7fSxcbiAgZ3JpZEFyZWE6IHt9LFxuICAvLyBwb3NpdGlvbnNcbiAgcG9zaXRpb246IHt9LFxuICB6SW5kZXg6IHtcbiAgICB0aGVtZUtleTogJ3pJbmRleCdcbiAgfSxcbiAgdG9wOiB7fSxcbiAgcmlnaHQ6IHt9LFxuICBib3R0b206IHt9LFxuICBsZWZ0OiB7fSxcbiAgLy8gc2hhZG93c1xuICBib3hTaGFkb3c6IHtcbiAgICB0aGVtZUtleTogJ3NoYWRvd3MnXG4gIH0sXG4gIC8vIHNpemluZ1xuICB3aWR0aDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1heFdpZHRoOiB7XG4gICAgc3R5bGU6IG1heFdpZHRoXG4gIH0sXG4gIG1pbldpZHRoOiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgaGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgbWF4SGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgbWluSGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgYm94U2l6aW5nOiB7fSxcbiAgLy8gdHlwb2dyYXBoeVxuICBmb250RmFtaWx5OiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBmb250U2l6ZToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFN0eWxlOiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBmb250V2VpZ2h0OiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBsZXR0ZXJTcGFjaW5nOiB7fSxcbiAgdGV4dFRyYW5zZm9ybToge30sXG4gIGxpbmVIZWlnaHQ6IHt9LFxuICB0ZXh0QWxpZ246IHt9LFxuICB0eXBvZ3JhcGh5OiB7XG4gICAgY3NzUHJvcGVydHk6IGZhbHNlLFxuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRTeENvbmZpZzsiLCJpbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuLi9tZXJnZSc7XG5pbXBvcnQgeyBnZXRQYXRoLCBnZXRTdHlsZVZhbHVlIGFzIGdldFZhbHVlIH0gZnJvbSAnLi4vc3R5bGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCwgcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMgfSBmcm9tICcuLi9icmVha3BvaW50cyc7XG5pbXBvcnQgZGVmYXVsdFN4Q29uZmlnIGZyb20gJy4vZGVmYXVsdFN4Q29uZmlnJztcbmZ1bmN0aW9uIG9iamVjdHNIYXZlU2FtZUtleXMoLi4ub2JqZWN0cykge1xuICBjb25zdCBhbGxLZXlzID0gb2JqZWN0cy5yZWR1Y2UoKGtleXMsIG9iamVjdCkgPT4ga2V5cy5jb25jYXQoT2JqZWN0LmtleXMob2JqZWN0KSksIFtdKTtcbiAgY29uc3QgdW5pb24gPSBuZXcgU2V0KGFsbEtleXMpO1xuICByZXR1cm4gb2JqZWN0cy5ldmVyeShvYmplY3QgPT4gdW5pb24uc2l6ZSA9PT0gT2JqZWN0LmtleXMob2JqZWN0KS5sZW5ndGgpO1xufVxuZnVuY3Rpb24gY2FsbElmRm4obWF5YmVGbiwgYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgbWF5YmVGbiA9PT0gJ2Z1bmN0aW9uJyA/IG1heWJlRm4oYXJnKSA6IG1heWJlRm47XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiB1bnN0YWJsZV9jcmVhdGVTdHlsZUZ1bmN0aW9uU3goKSB7XG4gIGZ1bmN0aW9uIGdldFRoZW1lVmFsdWUocHJvcCwgdmFsLCB0aGVtZSwgY29uZmlnKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBbcHJvcF06IHZhbCxcbiAgICAgIHRoZW1lXG4gICAgfTtcbiAgICBjb25zdCBvcHRpb25zID0gY29uZmlnW3Byb3BdO1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW3Byb3BdOiB2YWxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIGNzc1Byb3BlcnR5ID0gcHJvcCxcbiAgICAgIHRoZW1lS2V5LFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgc3R5bGVcbiAgICB9ID0gb3B0aW9ucztcbiAgICBpZiAodmFsID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIFRPRE8gdjY6IHJlbW92ZSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvcHVsbC8zODEyM1xuICAgIGlmICh0aGVtZUtleSA9PT0gJ3R5cG9ncmFwaHknICYmIHZhbCA9PT0gJ2luaGVyaXQnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbcHJvcF06IHZhbFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdGhlbWVNYXBwaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IHt9O1xuICAgIGlmIChzdHlsZSkge1xuICAgICAgcmV0dXJuIHN0eWxlKHByb3BzKTtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlRmluYWwgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gZ2V0VmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIGlmIChwcm9wVmFsdWVGaW5hbCA9PT0gdmFsdWUgJiYgdHlwZW9mIHByb3BWYWx1ZUZpbmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBIYXZlbid0IGZvdW5kIHZhbHVlXG4gICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIGAke3Byb3B9JHtwcm9wVmFsdWVGaW5hbCA9PT0gJ2RlZmF1bHQnID8gJycgOiBjYXBpdGFsaXplKHByb3BWYWx1ZUZpbmFsKX1gLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICB9XG4gICAgICBpZiAoY3NzUHJvcGVydHkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjc3NQcm9wZXJ0eV06IHZhbHVlXG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCB2YWwsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gc3R5bGVGdW5jdGlvblN4KHByb3BzKSB7XG4gICAgdmFyIF90aGVtZSR1bnN0YWJsZV9zeENvbjtcbiAgICBjb25zdCB7XG4gICAgICBzeCxcbiAgICAgIHRoZW1lID0ge31cbiAgICB9ID0gcHJvcHMgfHwge307XG4gICAgaWYgKCFzeCkge1xuICAgICAgcmV0dXJuIG51bGw7IC8vIEVtb3Rpb24gJiBzdHlsZWQtY29tcG9uZW50cyB3aWxsIG5lZ2xlY3QgbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IChfdGhlbWUkdW5zdGFibGVfc3hDb24gPSB0aGVtZS51bnN0YWJsZV9zeENvbmZpZykgIT0gbnVsbCA/IF90aGVtZSR1bnN0YWJsZV9zeENvbiA6IGRlZmF1bHRTeENvbmZpZztcblxuICAgIC8qXG4gICAgICogUmVjZWl2ZSBgc3hJbnB1dGAgYXMgb2JqZWN0IG9yIGNhbGxiYWNrXG4gICAgICogYW5kIHRoZW4gcmVjdXJzaXZlbHkgY2hlY2sga2V5cyAmIHZhbHVlcyB0byBjcmVhdGUgbWVkaWEgcXVlcnkgb2JqZWN0IHN0eWxlcy5cbiAgICAgKiAodGhlIHJlc3VsdCB3aWxsIGJlIHVzZWQgaW4gYHN0eWxlZGApXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhdmVyc2Uoc3hJbnB1dCkge1xuICAgICAgbGV0IHN4T2JqZWN0ID0gc3hJbnB1dDtcbiAgICAgIGlmICh0eXBlb2Ygc3hJbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzeE9iamVjdCA9IHN4SW5wdXQodGhlbWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3hJbnB1dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gdmFsdWVcbiAgICAgICAgcmV0dXJuIHN4SW5wdXQ7XG4gICAgICB9XG4gICAgICBpZiAoIXN4T2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCh0aGVtZS5icmVha3BvaW50cyk7XG4gICAgICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKTtcbiAgICAgIGxldCBjc3MgPSBlbXB0eUJyZWFrcG9pbnRzO1xuICAgICAgT2JqZWN0LmtleXMoc3hPYmplY3QpLmZvckVhY2goc3R5bGVLZXkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGNhbGxJZkZuKHN4T2JqZWN0W3N0eWxlS2V5XSwgdGhlbWUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnW3N0eWxlS2V5XSkge1xuICAgICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSwgY29uZmlnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCBicmVha3BvaW50c1ZhbHVlcyA9IGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9LCB2YWx1ZSwgeCA9PiAoe1xuICAgICAgICAgICAgICAgIFtzdHlsZUtleV06IHhcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBpZiAob2JqZWN0c0hhdmVTYW1lS2V5cyhicmVha3BvaW50c1ZhbHVlcywgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY3NzW3N0eWxlS2V5XSA9IHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICAgICAgICAgICAgICBzeDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgYnJlYWtwb2ludHNWYWx1ZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lLCBjb25maWcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzS2V5cywgY3NzKTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3gpID8gc3gubWFwKHRyYXZlcnNlKSA6IHRyYXZlcnNlKHN4KTtcbiAgfVxuICByZXR1cm4gc3R5bGVGdW5jdGlvblN4O1xufVxuY29uc3Qgc3R5bGVGdW5jdGlvblN4ID0gdW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4KCk7XG5zdHlsZUZ1bmN0aW9uU3guZmlsdGVyUHJvcHMgPSBbJ3N4J107XG5leHBvcnQgZGVmYXVsdCBzdHlsZUZ1bmN0aW9uU3g7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJyZWFrcG9pbnRzXCIsIFwicGFsZXR0ZVwiLCBcInNwYWNpbmdcIiwgXCJzaGFwZVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUJyZWFrcG9pbnRzIGZyb20gJy4vY3JlYXRlQnJlYWtwb2ludHMnO1xuaW1wb3J0IHNoYXBlIGZyb20gJy4vc2hhcGUnO1xuaW1wb3J0IGNyZWF0ZVNwYWNpbmcgZnJvbSAnLi9jcmVhdGVTcGFjaW5nJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3ggZnJvbSAnLi4vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgZGVmYXVsdFN4Q29uZmlnIGZyb20gJy4uL3N0eWxlRnVuY3Rpb25TeC9kZWZhdWx0U3hDb25maWcnO1xuZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50c0lucHV0ID0ge30sXG4gICAgICBwYWxldHRlOiBwYWxldHRlSW5wdXQgPSB7fSxcbiAgICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dCxcbiAgICAgIHNoYXBlOiBzaGFwZUlucHV0ID0ge31cbiAgICB9ID0gb3B0aW9ucyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IHNwYWNpbmcgPSBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCk7XG4gIGxldCBtdWlUaGVtZSA9IGRlZXBtZXJnZSh7XG4gICAgYnJlYWtwb2ludHMsXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBjb21wb25lbnRzOiB7fSxcbiAgICAvLyBJbmplY3QgY29tcG9uZW50IGRlZmluaXRpb25zLlxuICAgIHBhbGV0dGU6IF9leHRlbmRzKHtcbiAgICAgIG1vZGU6ICdsaWdodCdcbiAgICB9LCBwYWxldHRlSW5wdXQpLFxuICAgIHNwYWNpbmcsXG4gICAgc2hhcGU6IF9leHRlbmRzKHt9LCBzaGFwZSwgc2hhcGVJbnB1dClcbiAgfSwgb3RoZXIpO1xuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKChhY2MsIGFyZ3VtZW50KSA9PiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCksIG11aVRoZW1lKTtcbiAgbXVpVGhlbWUudW5zdGFibGVfc3hDb25maWcgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFN4Q29uZmlnLCBvdGhlciA9PSBudWxsID8gdm9pZCAwIDogb3RoZXIudW5zdGFibGVfc3hDb25maWcpO1xuICBtdWlUaGVtZS51bnN0YWJsZV9zeCA9IGZ1bmN0aW9uIHN4KHByb3BzKSB7XG4gICAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICBzeDogcHJvcHMsXG4gICAgICB0aGVtZTogdGhpc1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gbXVpVGhlbWU7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVUaGVtZTsiLCJpbXBvcnQgeyBjcmVhdGVVbmFyeVNwYWNpbmcgfSBmcm9tICcuLi9zcGFjaW5nJztcblxuLy8gVGhlIGRpZmZlcmVudCBzaWduYXR1cmVzIGltcGx5IGRpZmZlcmVudCBtZWFuaW5nIGZvciB0aGVpciBhcmd1bWVudHMgdGhhdCBjYW4ndCBiZSBleHByZXNzZWQgc3RydWN0dXJhbGx5LlxuLy8gV2UgZXhwcmVzcyB0aGUgZGlmZmVyZW5jZSB3aXRoIHZhcmlhYmxlIG5hbWVzLlxuLyogdHNsaW50OmRpc2FibGU6dW5pZmllZC1zaWduYXR1cmVzICovXG4vKiB0c2xpbnQ6ZW5hYmxlOnVuaWZpZWQtc2lnbmF0dXJlcyAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCA9IDgpIHtcbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9XG5cbiAgLy8gTWF0ZXJpYWwgRGVzaWduIGxheW91dHMgYXJlIHZpc3VhbGx5IGJhbGFuY2VkLiBNb3N0IG1lYXN1cmVtZW50cyBhbGlnbiB0byBhbiA4ZHAgZ3JpZCwgd2hpY2ggYWxpZ25zIGJvdGggc3BhY2luZyBhbmQgdGhlIG92ZXJhbGwgbGF5b3V0LlxuICAvLyBTbWFsbGVyIGNvbXBvbmVudHMsIHN1Y2ggYXMgaWNvbnMsIGNhbiBhbGlnbiB0byBhIDRkcCBncmlkLlxuICAvLyBodHRwczovL20yLm1hdGVyaWFsLmlvL2Rlc2lnbi9sYXlvdXQvdW5kZXJzdGFuZGluZy1sYXlvdXQuaHRtbFxuICBjb25zdCB0cmFuc2Zvcm0gPSBjcmVhdGVVbmFyeVNwYWNpbmcoe1xuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dFxuICB9KTtcbiAgY29uc3Qgc3BhY2luZyA9ICguLi5hcmdzSW5wdXQpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoYXJnc0lucHV0Lmxlbmd0aCA8PSA0KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgJHthcmdzSW5wdXQubGVuZ3RofWApO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhcmdzID0gYXJnc0lucHV0Lmxlbmd0aCA9PT0gMCA/IFsxXSA6IGFyZ3NJbnB1dDtcbiAgICByZXR1cm4gYXJncy5tYXAoYXJndW1lbnQgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gdHJhbnNmb3JtKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IGAke291dHB1dH1weGAgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9O1xuICBzcGFjaW5nLm11aSA9IHRydWU7XG4gIHJldHVybiBzcGFjaW5nO1xufSIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgJHt2YWx1ZX0gaXMgb3V0IG9mIHJhbmdlIFske21pbn0sICR7bWF4fV0uYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnNsaWNlKDEpO1xuICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYC57MSwke2NvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDF9fWAsICdnJyk7XG4gIGxldCBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG4gIGlmIChjb2xvcnMgJiYgY29sb3JzWzBdLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAobiA9PiBuICsgbik7XG4gIH1cbiAgcmV0dXJuIGNvbG9ycyA/IGByZ2Ike2NvbG9ycy5sZW5ndGggPT09IDQgPyAnYScgOiAnJ30oJHtjb2xvcnMubWFwKChuLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBpbmRleCA8IDMgPyBwYXJzZUludChuLCAxNikgOiBNYXRoLnJvdW5kKHBhcnNlSW50KG4sIDE2KSAvIDI1NSAqIDEwMDApIC8gMTAwMDtcbiAgfSkuam9pbignLCAnKX0pYCA6ICcnO1xufVxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIGNvbnN0IGhleCA9IGludC50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gYDAke2hleH1gIDogaGV4O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG4gIGNvbnN0IG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgY29uc3QgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvciddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFVuc3VwcG9ydGVkIFxcYCR7Y29sb3J9XFxgIGNvbG9yLlxuVGhlIGZvbGxvd2luZyBmb3JtYXRzIGFyZSBzdXBwb3J0ZWQ6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKCkuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoOSwgY29sb3IpKTtcbiAgfVxuICBsZXQgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpO1xuICBsZXQgY29sb3JTcGFjZTtcbiAgaWYgKHR5cGUgPT09ICdjb2xvcicpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuc3BsaXQoJyAnKTtcbiAgICBjb2xvclNwYWNlID0gdmFsdWVzLnNoaWZ0KCk7XG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDQgJiYgdmFsdWVzWzNdLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICB2YWx1ZXNbM10gPSB2YWx1ZXNbM10uc2xpY2UoMSk7XG4gICAgfVxuICAgIGlmIChbJ3NyZ2InLCAnZGlzcGxheS1wMycsICdhOTgtcmdiJywgJ3Byb3Bob3RvLXJnYicsICdyZWMtMjAyMCddLmluZGV4T2YoY29sb3JTcGFjZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogdW5zdXBwb3J0ZWQgXFxgJHtjb2xvclNwYWNlfVxcYCBjb2xvciBzcGFjZS5cblRoZSBmb2xsb3dpbmcgY29sb3Igc3BhY2VzIGFyZSBzdXBwb3J0ZWQ6IHNyZ2IsIGRpc3BsYXktcDMsIGE5OC1yZ2IsIHByb3Bob3RvLXJnYiwgcmVjLTIwMjAuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTAsIGNvbG9yU3BhY2UpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcsJyk7XG4gIH1cbiAgdmFsdWVzID0gdmFsdWVzLm1hcCh2YWx1ZSA9PiBwYXJzZUZsb2F0KHZhbHVlKSk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXMsXG4gICAgY29sb3JTcGFjZVxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBjaGFubmVsIGNyZWF0ZWQgZnJvbSB0aGUgaW5wdXQgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgY2hhbm5lbCBmb3IgdGhlIGNvbG9yLCB0aGF0IGNhbiBiZSB1c2VkIGluIHJnYmEgb3IgaHNsYSBjb2xvcnNcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbG9yQ2hhbm5lbCA9IGNvbG9yID0+IHtcbiAgY29uc3QgZGVjb21wb3NlZENvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gZGVjb21wb3NlZENvbG9yLnZhbHVlcy5zbGljZSgwLCAzKS5tYXAoKHZhbCwgaWR4KSA9PiBkZWNvbXBvc2VkQ29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEgJiYgaWR4ICE9PSAwID8gYCR7dmFsfSVgIDogdmFsKS5qb2luKCcgJyk7XG59O1xuZXhwb3J0IGNvbnN0IHByaXZhdGVfc2FmZUNvbG9yQ2hhbm5lbCA9IChjb2xvciwgd2FybmluZykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBjb2xvckNoYW5uZWwoY29sb3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvcidcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIGNvbG9yU3BhY2VcbiAgfSA9IGNvbG9yO1xuICBsZXQge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG4gIGlmICh0eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIC8vIE9ubHkgY29udmVydCB0aGUgZmlyc3QgMyB2YWx1ZXMgdG8gaW50IChpLmUuIG5vdCBhbHBoYSlcbiAgICB2YWx1ZXMgPSB2YWx1ZXMubWFwKChuLCBpKSA9PiBpIDwgMyA/IHBhcnNlSW50KG4sIDEwKSA6IG4pO1xuICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgdmFsdWVzWzFdID0gYCR7dmFsdWVzWzFdfSVgO1xuICAgIHZhbHVlc1syXSA9IGAke3ZhbHVlc1syXX0lYDtcbiAgfVxuICBpZiAodHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIHZhbHVlcyA9IGAke2NvbG9yU3BhY2V9ICR7dmFsdWVzLmpvaW4oJyAnKX1gO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IGAke3ZhbHVlcy5qb2luKCcsICcpfWA7XG4gIH1cbiAgcmV0dXJuIGAke3R5cGV9KCR7dmFsdWVzfSlgO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgcmV0dXJuIGAjJHt2YWx1ZXMubWFwKChuLCBpKSA9PiBpbnRUb0hleChpID09PSAzID8gTWF0aC5yb3VuZCgyNTUgKiBuKSA6IG4pKS5qb2luKCcnKX1gO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29uc3Qge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG4gIGNvbnN0IGggPSB2YWx1ZXNbMF07XG4gIGNvbnN0IHMgPSB2YWx1ZXNbMV0gLyAxMDA7XG4gIGNvbnN0IGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIGxldCB0eXBlID0gJ3JnYic7XG4gIGNvbnN0IHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdoc2xhJykge1xuICAgIHR5cGUgKz0gJ2EnO1xuICAgIHJnYi5wdXNoKHZhbHVlc1szXSk7XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgbGV0IHJnYiA9IGNvbG9yLnR5cGUgPT09ICdoc2wnIHx8IGNvbG9yLnR5cGUgPT09ICdoc2xhJyA/IGRlY29tcG9zZUNvbG9yKGhzbFRvUmdiKGNvbG9yKSkudmFsdWVzIDogY29sb3IudmFsdWVzO1xuICByZ2IgPSByZ2IubWFwKHZhbCA9PiB7XG4gICAgaWYgKGNvbG9yLnR5cGUgIT09ICdjb2xvcicpIHtcbiAgICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6ICgodmFsICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNDtcbiAgfSk7XG5cbiAgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgY29uc3QgbHVtQSA9IGdldEx1bWluYW5jZShmb3JlZ3JvdW5kKTtcbiAgY29uc3QgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbHBoYShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXAodmFsdWUpO1xuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IGAvJHt2YWx1ZX1gO1xuICB9IGVsc2Uge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlQWxwaGEoY29sb3IsIHZhbHVlLCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGFscGhhKGNvbG9yLCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xIHx8IGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVEYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKz0gKDEwMCAtIGNvbG9yLnZhbHVlc1syXSkgKiBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDI1NSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDEgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlTGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50PTAuMTUgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQgPSAwLjE1KSB7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlRW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBwcml2YXRlX3NhZmVFbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufSIsImNvbnN0IGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1vbjsiLCJjb25zdCBncmV5ID0ge1xuICA1MDogJyNmYWZhZmEnLFxuICAxMDA6ICcjZjVmNWY1JyxcbiAgMjAwOiAnI2VlZWVlZScsXG4gIDMwMDogJyNlMGUwZTAnLFxuICA0MDA6ICcjYmRiZGJkJyxcbiAgNTAwOiAnIzllOWU5ZScsXG4gIDYwMDogJyM3NTc1NzUnLFxuICA3MDA6ICcjNjE2MTYxJyxcbiAgODAwOiAnIzQyNDI0MicsXG4gIDkwMDogJyMyMTIxMjEnLFxuICBBMTAwOiAnI2Y1ZjVmNScsXG4gIEEyMDA6ICcjZWVlZWVlJyxcbiAgQTQwMDogJyNiZGJkYmQnLFxuICBBNzAwOiAnIzYxNjE2MSdcbn07XG5leHBvcnQgZGVmYXVsdCBncmV5OyIsImNvbnN0IHB1cnBsZSA9IHtcbiAgNTA6ICcjZjNlNWY1JyxcbiAgMTAwOiAnI2UxYmVlNycsXG4gIDIwMDogJyNjZTkzZDgnLFxuICAzMDA6ICcjYmE2OGM4JyxcbiAgNDAwOiAnI2FiNDdiYycsXG4gIDUwMDogJyM5YzI3YjAnLFxuICA2MDA6ICcjOGUyNGFhJyxcbiAgNzAwOiAnIzdiMWZhMicsXG4gIDgwMDogJyM2YTFiOWEnLFxuICA5MDA6ICcjNGExNDhjJyxcbiAgQTEwMDogJyNlYTgwZmMnLFxuICBBMjAwOiAnI2UwNDBmYicsXG4gIEE0MDA6ICcjZDUwMGY5JyxcbiAgQTcwMDogJyNhYTAwZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgcHVycGxlOyIsImNvbnN0IHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsImNvbnN0IG9yYW5nZSA9IHtcbiAgNTA6ICcjZmZmM2UwJyxcbiAgMTAwOiAnI2ZmZTBiMicsXG4gIDIwMDogJyNmZmNjODAnLFxuICAzMDA6ICcjZmZiNzRkJyxcbiAgNDAwOiAnI2ZmYTcyNicsXG4gIDUwMDogJyNmZjk4MDAnLFxuICA2MDA6ICcjZmI4YzAwJyxcbiAgNzAwOiAnI2Y1N2MwMCcsXG4gIDgwMDogJyNlZjZjMDAnLFxuICA5MDA6ICcjZTY1MTAwJyxcbiAgQTEwMDogJyNmZmQxODAnLFxuICBBMjAwOiAnI2ZmYWI0MCcsXG4gIEE0MDA6ICcjZmY5MTAwJyxcbiAgQTcwMDogJyNmZjZkMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgb3JhbmdlOyIsImNvbnN0IGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwiY29uc3QgbGlnaHRCbHVlID0ge1xuICA1MDogJyNlMWY1ZmUnLFxuICAxMDA6ICcjYjNlNWZjJyxcbiAgMjAwOiAnIzgxZDRmYScsXG4gIDMwMDogJyM0ZmMzZjcnLFxuICA0MDA6ICcjMjliNmY2JyxcbiAgNTAwOiAnIzAzYTlmNCcsXG4gIDYwMDogJyMwMzliZTUnLFxuICA3MDA6ICcjMDI4OGQxJyxcbiAgODAwOiAnIzAyNzdiZCcsXG4gIDkwMDogJyMwMTU3OWInLFxuICBBMTAwOiAnIzgwZDhmZicsXG4gIEEyMDA6ICcjNDBjNGZmJyxcbiAgQTQwMDogJyMwMGIwZmYnLFxuICBBNzAwOiAnIzAwOTFlYSdcbn07XG5leHBvcnQgZGVmYXVsdCBsaWdodEJsdWU7IiwiY29uc3QgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbXVpL3V0aWxzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJtb2RlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgZGFya2VuLCBnZXRDb250cmFzdFJhdGlvLCBsaWdodGVuIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNvbW1vbiBmcm9tICcuLi9jb2xvcnMvY29tbW9uJztcbmltcG9ydCBncmV5IGZyb20gJy4uL2NvbG9ycy9ncmV5JztcbmltcG9ydCBwdXJwbGUgZnJvbSAnLi4vY29sb3JzL3B1cnBsZSc7XG5pbXBvcnQgcmVkIGZyb20gJy4uL2NvbG9ycy9yZWQnO1xuaW1wb3J0IG9yYW5nZSBmcm9tICcuLi9jb2xvcnMvb3JhbmdlJztcbmltcG9ydCBibHVlIGZyb20gJy4uL2NvbG9ycy9ibHVlJztcbmltcG9ydCBsaWdodEJsdWUgZnJvbSAnLi4vY29sb3JzL2xpZ2h0Qmx1ZSc7XG5pbXBvcnQgZ3JlZW4gZnJvbSAnLi4vY29sb3JzL2dyZWVuJztcbmV4cG9ydCBjb25zdCBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC42KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGNvbW1vbi53aGl0ZSxcbiAgICBkZWZhdWx0OiBjb21tb24ud2hpdGVcbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA0KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA0LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4wOCknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4wOCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMjYpJyxcbiAgICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4xMlxuICB9XG59O1xuZXhwb3J0IGNvbnN0IGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBjb21tb24ud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6ICcjMTIxMjEyJyxcbiAgICBkZWZhdWx0OiAnIzEyMTIxMidcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTYpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMTYsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjI0XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgY29uc3QgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcbiAgaWYgKCFpbnRlbnRbZGlyZWN0aW9uXSkge1xuICAgIGlmIChpbnRlbnQuaGFzT3duUHJvcGVydHkoc2hhZGUpKSB7XG4gICAgICBpbnRlbnRbZGlyZWN0aW9uXSA9IGludGVudFtzaGFkZV07XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsaWdodCcpIHtcbiAgICAgIGludGVudC5saWdodCA9IGxpZ2h0ZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0TGlnaHQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFByaW1hcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBibHVlWzIwMF0sXG4gICAgICBsaWdodDogYmx1ZVs1MF0sXG4gICAgICBkYXJrOiBibHVlWzQwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogYmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBibHVlWzQwMF0sXG4gICAgZGFyazogYmx1ZVs4MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U2Vjb25kYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcHVycGxlWzIwMF0sXG4gICAgICBsaWdodDogcHVycGxlWzUwXSxcbiAgICAgIGRhcms6IHB1cnBsZVs0MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IHB1cnBsZVs1MDBdLFxuICAgIGxpZ2h0OiBwdXJwbGVbMzAwXSxcbiAgICBkYXJrOiBwdXJwbGVbNzAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEVycm9yKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcmVkWzUwMF0sXG4gICAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgICBkYXJrOiByZWRbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiByZWRbNzAwXSxcbiAgICBsaWdodDogcmVkWzQwMF0sXG4gICAgZGFyazogcmVkWzgwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRJbmZvKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogbGlnaHRCbHVlWzQwMF0sXG4gICAgICBsaWdodDogbGlnaHRCbHVlWzMwMF0sXG4gICAgICBkYXJrOiBsaWdodEJsdWVbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBsaWdodEJsdWVbNzAwXSxcbiAgICBsaWdodDogbGlnaHRCbHVlWzUwMF0sXG4gICAgZGFyazogbGlnaHRCbHVlWzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTdWNjZXNzKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogZ3JlZW5bNDAwXSxcbiAgICAgIGxpZ2h0OiBncmVlblszMDBdLFxuICAgICAgZGFyazogZ3JlZW5bNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBncmVlbls4MDBdLFxuICAgIGxpZ2h0OiBncmVlbls1MDBdLFxuICAgIGRhcms6IGdyZWVuWzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRXYXJuaW5nKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogb3JhbmdlWzQwMF0sXG4gICAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiAnI2VkNmMwMicsXG4gICAgLy8gY2xvc2VzdCB0byBvcmFuZ2VbODAwXSB0aGF0IHBhc3MgMzoxLlxuICAgIGxpZ2h0OiBvcmFuZ2VbNTAwXSxcbiAgICBkYXJrOiBvcmFuZ2VbOTAwXVxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGFsZXR0ZShwYWxldHRlKSB7XG4gIGNvbnN0IHtcbiAgICAgIG1vZGUgPSAnbGlnaHQnLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSAzLFxuICAgICAgdG9uYWxPZmZzZXQgPSAwLjJcbiAgICB9ID0gcGFsZXR0ZSxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHBhbGV0dGUsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnkgfHwgZ2V0RGVmYXVsdFByaW1hcnkobW9kZSk7XG4gIGNvbnN0IHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5IHx8IGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSk7XG4gIGNvbnN0IGVycm9yID0gcGFsZXR0ZS5lcnJvciB8fCBnZXREZWZhdWx0RXJyb3IobW9kZSk7XG4gIGNvbnN0IGluZm8gPSBwYWxldHRlLmluZm8gfHwgZ2V0RGVmYXVsdEluZm8obW9kZSk7XG4gIGNvbnN0IHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MgfHwgZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSk7XG4gIGNvbnN0IHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcgfHwgZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSk7XG5cbiAgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIGNvbnN0IGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGNvbnRyYXN0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgJHtjb250cmFzdH06MSBmb3IgJHtjb250cmFzdFRleHR9IG9uICR7YmFja2dyb3VuZH1gLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuICBjb25zdCBhdWdtZW50Q29sb3IgPSAoe1xuICAgIGNvbG9yLFxuICAgIG5hbWUsXG4gICAgbWFpblNoYWRlID0gNTAwLFxuICAgIGxpZ2h0U2hhZGUgPSAzMDAsXG4gICAgZGFya1NoYWRlID0gNzAwXG4gIH0pID0+IHtcbiAgICBjb2xvciA9IF9leHRlbmRzKHt9LCBjb2xvcik7XG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cbiAgICBpZiAoIWNvbG9yLmhhc093blByb3BlcnR5KCdtYWluJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgXFxgbWFpblxcYCBwcm9wZXJ0eSBvciBhIFxcYCR7bWFpblNoYWRlfVxcYCBwcm9wZXJ0eS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMSwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBtYWluU2hhZGUpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xvci5tYWluICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5cXGBjb2xvci5tYWluXFxgIHNob3VsZCBiZSBhIHN0cmluZywgYnV0IFxcYCR7SlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbil9XFxgIHdhcyBwcm92aWRlZCBpbnN0ZWFkLlxuXG5EaWQgeW91IGludGVuZCB0byB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgYXBwcm9hY2hlcz9cblxuaW1wb3J0IHsgZ3JlZW4gfSBmcm9tIFwiQG11aS9tYXRlcmlhbC9jb2xvcnNcIjtcblxuY29uc3QgdGhlbWUxID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XG4gIHByaW1hcnk6IGdyZWVuLFxufSB9KTtcblxuY29uc3QgdGhlbWUyID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XG4gIHByaW1hcnk6IHsgbWFpbjogZ3JlZW5bNTAwXSB9LFxufSB9KTtgIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMiwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSkpO1xuICAgIH1cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfTtcbiAgY29uc3QgbW9kZXMgPSB7XG4gICAgZGFyayxcbiAgICBsaWdodFxuICB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghbW9kZXNbbW9kZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHBhbGV0dGUgbW9kZSBcXGAke21vZGV9XFxgIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHBhbGV0dGVPdXRwdXQgPSBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogX2V4dGVuZHMoe30sIGNvbW1vbiksXG4gICAgLy8gcHJldmVudCBtdXRhYmxlIG9iamVjdC5cbiAgICAvLyBUaGUgcGFsZXR0ZSBtb2RlLCBjYW4gYmUgbGlnaHQgb3IgZGFyay5cbiAgICBtb2RlLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcHJpbWFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBwcmltYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHByaW1hcnksXG4gICAgICBuYW1lOiAncHJpbWFyeSdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc2Vjb25kYXJ5LFxuICAgICAgbmFtZTogJ3NlY29uZGFyeScsXG4gICAgICBtYWluU2hhZGU6ICdBNDAwJyxcbiAgICAgIGxpZ2h0U2hhZGU6ICdBMjAwJyxcbiAgICAgIGRhcmtTaGFkZTogJ0E3MDAnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBpbnRlcmZhY2UgZWxlbWVudHMgdGhhdCB0aGUgdXNlciBzaG91bGQgYmUgbWFkZSBhd2FyZSBvZi5cbiAgICBlcnJvcjogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBlcnJvcixcbiAgICAgIG5hbWU6ICdlcnJvcidcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHBvdGVudGlhbGx5IGRhbmdlcm91cyBhY3Rpb25zIG9yIGltcG9ydGFudCBtZXNzYWdlcy5cbiAgICB3YXJuaW5nOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHdhcm5pbmcsXG4gICAgICBuYW1lOiAnd2FybmluZydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcHJlc2VudCBpbmZvcm1hdGlvbiB0byB0aGUgdXNlciB0aGF0IGlzIG5ldXRyYWwgYW5kIG5vdCBuZWNlc3NhcmlseSBpbXBvcnRhbnQuXG4gICAgaW5mbzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBpbmZvLFxuICAgICAgbmFtZTogJ2luZm8nXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIGluZGljYXRlIHRoZSBzdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgYW4gYWN0aW9uIHRoYXQgdXNlciB0cmlnZ2VyZWQuXG4gICAgc3VjY2VzczogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzdWNjZXNzLFxuICAgICAgbmFtZTogJ3N1Y2Nlc3MnXG4gICAgfSksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXksXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuXG4gICAgLy8gdGhlIGJhY2tncm91bmQgYW5kIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2VzIGEgYmFja2dyb3VuZCBjb2xvciBhbmQgcmV0dXJucyB0aGUgdGV4dCBjb2xvciB0aGF0IG1heGltaXplcyB0aGUgY29udHJhc3QuXG4gICAgZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldFxuICB9LCBtb2Rlc1ttb2RlXSksIG90aGVyKTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5jb25zdCBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG5jb25zdCBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuXG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIGNvbnN0IF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgIHtcbiAgICAgIGZvbnRGYW1pbHkgPSBkZWZhdWx0Rm9udEZhbWlseSxcbiAgICAgIC8vIFRoZSBkZWZhdWx0IGZvbnQgc2l6ZSBvZiB0aGUgTWF0ZXJpYWwgU3BlY2lmaWNhdGlvbi5cbiAgICAgIGZvbnRTaXplID0gMTQsXG4gICAgICAvLyBweFxuICAgICAgZm9udFdlaWdodExpZ2h0ID0gMzAwLFxuICAgICAgZm9udFdlaWdodFJlZ3VsYXIgPSA0MDAsXG4gICAgICBmb250V2VpZ2h0TWVkaXVtID0gNTAwLFxuICAgICAgZm9udFdlaWdodEJvbGQgPSA3MDAsXG4gICAgICAvLyBUZWxsIE1VSSB3aGF0J3MgdGhlIGZvbnQtc2l6ZSBvbiB0aGUgaHRtbCBlbGVtZW50LlxuICAgICAgLy8gMTZweCBpcyB0aGUgZGVmYXVsdCBmb250LXNpemUgdXNlZCBieSBicm93c2Vycy5cbiAgICAgIGh0bWxGb250U2l6ZSA9IDE2LFxuICAgICAgLy8gQXBwbHkgdGhlIENTUyBwcm9wZXJ0aWVzIHRvIGFsbCB0aGUgdmFyaWFudHMuXG4gICAgICBhbGxWYXJpYW50cyxcbiAgICAgIHB4VG9SZW06IHB4VG9SZW0yXG4gICAgfSA9IF9yZWYsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG4gIGNvbnN0IHB4VG9SZW0gPSBweFRvUmVtMiB8fCAoc2l6ZSA9PiBgJHtzaXplIC8gaHRtbEZvbnRTaXplICogY29lZn1yZW1gKTtcbiAgY29uc3QgYnVpbGRWYXJpYW50ID0gKGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykgPT4gX2V4dGVuZHMoe1xuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFdlaWdodCxcbiAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICBsaW5lSGVpZ2h0XG4gIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgIGxldHRlclNwYWNpbmc6IGAke3JvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKX1lbWBcbiAgfSA6IHt9LCBjYXNpbmcsIGFsbFZhcmlhbnRzKTtcbiAgY29uc3QgdmFyaWFudHMgPSB7XG4gICAgaDE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDk2LCAxLjE2NywgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLjIsIC0wLjUpLFxuICAgIGgzOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDQ4LCAxLjE2NywgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMjM1LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMzQsIDApLFxuICAgIGg2OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMjAsIDEuNiwgMC4xNSksXG4gICAgc3VidGl0bGUxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjc1LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS41NywgMC4xKSxcbiAgICBib2R5MTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5MjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNCwgMS40MywgMC4xNSksXG4gICAgYnV0dG9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNzUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDEuNjYsIDAuNCksXG4gICAgb3ZlcmxpbmU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDIuNjYsIDEsIGNhc2VBbGxDYXBzKSxcbiAgICAvLyBUT0RPIHY2OiBSZW1vdmUgaGFuZGxpbmcgb2YgJ2luaGVyaXQnIHZhcmlhbnQgZnJvbSB0aGUgdGhlbWUgYXMgaXQgaXMgYWxyZWFkeSBoYW5kbGVkIGluIE1hdGVyaWFsIFVJJ3MgVHlwb2dyYXBoeSBjb21wb25lbnQuIEFsc28sIHJlbWVtYmVyIHRvIHJlbW92ZSB0aGUgYXNzb2NpYXRlZCB0eXBlcy5cbiAgICBpbmhlcml0OiB7XG4gICAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgICBmb250V2VpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgbGluZUhlaWdodDogJ2luaGVyaXQnLFxuICAgICAgbGV0dGVyU3BhY2luZzogJ2luaGVyaXQnXG4gICAgfVxuICB9O1xuICByZXR1cm4gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbSxcbiAgICBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodCxcbiAgICBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtLFxuICAgIGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG4gIH0pO1xufSIsImNvbnN0IHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbmNvbnN0IHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG5jb25zdCBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coLi4ucHgpIHtcbiAgcmV0dXJuIFtgJHtweFswXX1weCAke3B4WzFdfXB4ICR7cHhbMl19cHggJHtweFszXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5VW1icmFPcGFjaXR5fSlgLCBgJHtweFs0XX1weCAke3B4WzVdfXB4ICR7cHhbNl19cHggJHtweFs3XX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5UGVudW1icmFPcGFjaXR5fSlgLCBgJHtweFs4XX1weCAke3B4WzldfXB4ICR7cHhbMTBdfXB4ICR7cHhbMTFdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eX0pYF0uam9pbignLCcpO1xufVxuXG4vLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcbmNvbnN0IHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl07XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCBjb25zdCBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59O1xuXG4vLyBGb2xsb3cgaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcbmV4cG9ydCBjb25zdCBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gYCR7TWF0aC5yb3VuZChtaWxsaXNlY29uZHMpfW1zYDtcbn1cbmZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgaWYgKCFoZWlnaHQpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBjb25zdGFudCA9IGhlaWdodCAvIDM2O1xuXG4gIC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogY29uc3RhbnQgKiogMC4yNSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9ucyhpbnB1dFRyYW5zaXRpb25zKSB7XG4gIGNvbnN0IG1lcmdlZEVhc2luZyA9IF9leHRlbmRzKHt9LCBlYXNpbmcsIGlucHV0VHJhbnNpdGlvbnMuZWFzaW5nKTtcbiAgY29uc3QgbWVyZ2VkRHVyYXRpb24gPSBfZXh0ZW5kcyh7fSwgZHVyYXRpb24sIGlucHV0VHJhbnNpdGlvbnMuZHVyYXRpb24pO1xuICBjb25zdCBjcmVhdGUgPSAocHJvcHMgPSBbJ2FsbCddLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbk9wdGlvbiA9IG1lcmdlZER1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgICBlYXNpbmc6IGVhc2luZ09wdGlvbiA9IG1lcmdlZEVhc2luZy5lYXNlSW5PdXQsXG4gICAgICAgIGRlbGF5ID0gMFxuICAgICAgfSA9IG9wdGlvbnMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGlzU3RyaW5nID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgIC8vIElFMTEgc3VwcG9ydCwgcmVwbGFjZSB3aXRoIE51bWJlci5pc05hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgICAgY29uc3QgaXNOdW1iZXIgPSB2YWx1ZSA9PiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogQXJndW1lbnQgXCJkdXJhdGlvblwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kICR7ZHVyYXRpb25PcHRpb259LmApO1xuICAgICAgfVxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBTZWNvbmcgYXJndW1lbnQgb2YgdHJhbnNpdGlvbi5jcmVhdGUgbXVzdCBiZSBhbiBvYmplY3QuJywgXCJBcmd1bWVudHMgc2hvdWxkIGJlIGVpdGhlciBgY3JlYXRlKCdwcm9wMScsIG9wdGlvbnMpYCBvciBgY3JlYXRlKFsncHJvcDEnLCAncHJvcDInXSwgb3B0aW9ucylgXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFske09iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyl9XS5gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGFuaW1hdGVkUHJvcCA9PiBgJHthbmltYXRlZFByb3B9ICR7dHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pfSAke2Vhc2luZ09wdGlvbn0gJHt0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSl9YCkuam9pbignLCcpO1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGdldEF1dG9IZWlnaHREdXJhdGlvbixcbiAgICBjcmVhdGVcbiAgfSwgaW5wdXRUcmFuc2l0aW9ucywge1xuICAgIGVhc2luZzogbWVyZ2VkRWFzaW5nLFxuICAgIGR1cmF0aW9uOiBtZXJnZWREdXJhdGlvblxuICB9KTtcbn0iLCIvLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbmNvbnN0IHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgZmFiOiAxMDUwLFxuICBzcGVlZERpYWw6IDEwNTAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG5leHBvcnQgZGVmYXVsdCB6SW5kZXg7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwic3BhY2luZ1wiLCBcInBhbGV0dGVcIiwgXCJ0cmFuc2l0aW9uc1wiLCBcInR5cG9ncmFwaHlcIiwgXCJzaGFwZVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgYXMgc3lzdGVtQ3JlYXRlVGhlbWUsIHVuc3RhYmxlX2RlZmF1bHRTeENvbmZpZyBhcyBkZWZhdWx0U3hDb25maWcsIHVuc3RhYmxlX3N0eWxlRnVuY3Rpb25TeCBhcyBzdHlsZUZ1bmN0aW9uU3ggfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuaW1wb3J0IGNyZWF0ZU1peGlucyBmcm9tICcuL2NyZWF0ZU1peGlucyc7XG5pbXBvcnQgY3JlYXRlUGFsZXR0ZSBmcm9tICcuL2NyZWF0ZVBhbGV0dGUnO1xuaW1wb3J0IGNyZWF0ZVR5cG9ncmFwaHkgZnJvbSAnLi9jcmVhdGVUeXBvZ3JhcGh5JztcbmltcG9ydCBzaGFkb3dzIGZyb20gJy4vc2hhZG93cyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbnMgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9ucyc7XG5pbXBvcnQgekluZGV4IGZyb20gJy4vekluZGV4JztcbmZ1bmN0aW9uIGNyZWF0ZVRoZW1lKG9wdGlvbnMgPSB7fSwgLi4uYXJncykge1xuICBjb25zdCB7XG4gICAgICBtaXhpbnM6IG1peGluc0lucHV0ID0ge30sXG4gICAgICBwYWxldHRlOiBwYWxldHRlSW5wdXQgPSB7fSxcbiAgICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9uc0lucHV0ID0ge30sXG4gICAgICB0eXBvZ3JhcGh5OiB0eXBvZ3JhcGh5SW5wdXQgPSB7fVxuICAgIH0gPSBvcHRpb25zLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgaWYgKG9wdGlvbnMudmFycykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBcXGB2YXJzXFxgIGlzIGEgcHJpdmF0ZSBmaWVsZCB1c2VkIGZvciBDU1MgdmFyaWFibGVzIHN1cHBvcnQuXG5QbGVhc2UgdXNlIGFub3RoZXIgbmFtZS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxOCkpO1xuICB9XG4gIGNvbnN0IHBhbGV0dGUgPSBjcmVhdGVQYWxldHRlKHBhbGV0dGVJbnB1dCk7XG4gIGNvbnN0IHN5c3RlbVRoZW1lID0gc3lzdGVtQ3JlYXRlVGhlbWUob3B0aW9ucyk7XG4gIGxldCBtdWlUaGVtZSA9IGRlZXBtZXJnZShzeXN0ZW1UaGVtZSwge1xuICAgIG1peGluczogY3JlYXRlTWl4aW5zKHN5c3RlbVRoZW1lLmJyZWFrcG9pbnRzLCBtaXhpbnNJbnB1dCksXG4gICAgcGFsZXR0ZSxcbiAgICAvLyBEb24ndCB1c2UgWy4uLnNoYWRvd3NdIHVudGlsIHlvdSd2ZSB2ZXJpZmllZCBpdHMgdHJhbnNwaWxlZCBjb2RlIGlzIG5vdCBpbnZva2luZyB0aGUgaXRlcmF0b3IgcHJvdG9jb2wuXG4gICAgc2hhZG93czogc2hhZG93cy5zbGljZSgpLFxuICAgIHR5cG9ncmFwaHk6IGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KSxcbiAgICB0cmFuc2l0aW9uczogY3JlYXRlVHJhbnNpdGlvbnModHJhbnNpdGlvbnNJbnB1dCksXG4gICAgekluZGV4OiBfZXh0ZW5kcyh7fSwgekluZGV4KVxuICB9KTtcbiAgbXVpVGhlbWUgPSBkZWVwbWVyZ2UobXVpVGhlbWUsIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVE9ETyB2NjogUmVmYWN0b3IgdG8gdXNlIGdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmcgZnJvbSBAbXVpL3V0aWxzIG9uY2UgYHJlYWRPbmx5YCBzdGF0ZSBjbGFzcyBpcyB1c2VkIGluIFJhdGluZyBjb21wb25lbnQuXG4gICAgY29uc3Qgc3RhdGVDbGFzc2VzID0gWydhY3RpdmUnLCAnY2hlY2tlZCcsICdjb21wbGV0ZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXhwYW5kZWQnLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnc2VsZWN0ZWQnXTtcbiAgICBjb25zdCB0cmF2ZXJzZSA9IChub2RlLCBjb21wb25lbnQpID0+IHtcbiAgICAgIGxldCBrZXk7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICBmb3IgKGtleSBpbiBub2RlKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZVtrZXldO1xuICAgICAgICBpZiAoc3RhdGVDbGFzc2VzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGVDbGFzcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzKCcnLCBrZXkpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYCR7Y29tcG9uZW50fVxcYCBjb21wb25lbnQgaW5jcmVhc2VzIGAgKyBgdGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgXFxgJHtrZXl9XFxgIGludGVybmFsIHN0YXRlLmAsICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgYEluc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJyYuJHtzdGF0ZUNsYXNzfScgc3ludGF4OmAsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgICAgIFtgJi4ke3N0YXRlQ2xhc3N9YF06IGNoaWxkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbXVpLmNvbS9yL3N0YXRlLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuICAgICAgICAgIG5vZGVba2V5XSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBPYmplY3Qua2V5cyhtdWlUaGVtZS5jb21wb25lbnRzKS5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XG4gICAgICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IG11aVRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50XS5zdHlsZU92ZXJyaWRlcztcbiAgICAgIGlmIChzdHlsZU92ZXJyaWRlcyAmJiBjb21wb25lbnQuaW5kZXhPZignTXVpJykgPT09IDApIHtcbiAgICAgICAgdHJhdmVyc2Uoc3R5bGVPdmVycmlkZXMsIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbXVpVGhlbWUudW5zdGFibGVfc3hDb25maWcgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFN4Q29uZmlnLCBvdGhlciA9PSBudWxsID8gdm9pZCAwIDogb3RoZXIudW5zdGFibGVfc3hDb25maWcpO1xuICBtdWlUaGVtZS51bnN0YWJsZV9zeCA9IGZ1bmN0aW9uIHN4KHByb3BzKSB7XG4gICAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICBzeDogcHJvcHMsXG4gICAgICB0aGVtZTogdGhpc1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gbXVpVGhlbWU7XG59XG5sZXQgd2FybmVkT25jZSA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICAgIHdhcm5lZE9uY2UgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogdGhlIGNyZWF0ZU11aVRoZW1lIGZ1bmN0aW9uIHdhcyByZW5hbWVkIHRvIGNyZWF0ZVRoZW1lLicsICcnLCBcIllvdSBzaG91bGQgdXNlIGBpbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvc3R5bGVzJ2BcIl0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlVGhlbWUoLi4uYXJncyk7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVUaGVtZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgbWl4aW5zKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgdG9vbGJhcjoge1xuICAgICAgbWluSGVpZ2h0OiA1NixcbiAgICAgIFticmVha3BvaW50cy51cCgneHMnKV06IHtcbiAgICAgICAgJ0BtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSknOiB7XG4gICAgICAgICAgbWluSGVpZ2h0OiA0OFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2JyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgICB9XG4gICAgfVxuICB9LCBtaXhpbnMpO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IFRoZW1lQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RoZW1lQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgY29uc3QgdGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cbiAgcmV0dXJuIHRoZW1lO1xufSIsImNvbnN0IGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbmV4cG9ydCBkZWZhdWx0IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ211aS5uZXN0ZWQnKSA6ICdfX1RIRU1FX05FU1RFRF9fJzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi4vdXNlVGhlbWUvVGhlbWVDb250ZXh0JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5pbXBvcnQgbmVzdGVkIGZyb20gJy4vbmVzdGVkJztcblxuLy8gVG8gc3VwcG9ydCBjb21wb3NpdGlvbiBvZiB0aGVtZS5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBtZXJnZU91dGVyTG9jYWxUaGVtZShvdXRlclRoZW1lLCBsb2NhbFRoZW1lKSB7XG4gIGlmICh0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IG1lcmdlZFRoZW1lID0gbG9jYWxUaGVtZShvdXRlclRoZW1lKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFtZXJnZWRUaGVtZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBZb3Ugc2hvdWxkIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIHRoZW1lIGZ1bmN0aW9uLCBpLmUuJywgJzxUaGVtZVByb3ZpZGVyIHRoZW1lPXsoKSA9PiAoe30pfSAvPiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgbG9jYWxUaGVtZSk7XG59XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgdGFrZXMgYSBgdGhlbWVgIHByb3AuXG4gKiBJdCBtYWtlcyB0aGUgYHRoZW1lYCBhdmFpbGFibGUgZG93biB0aGUgUmVhY3QgdHJlZSB0aGFua3MgdG8gUmVhY3QgY29udGV4dC5cbiAqIFRoaXMgY29tcG9uZW50IHNob3VsZCBwcmVmZXJhYmx5IGJlIHVzZWQgYXQgKip0aGUgcm9vdCBvZiB5b3VyIGNvbXBvbmVudCB0cmVlKiouXG4gKi9cbmZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIHRoZW1lOiBsb2NhbFRoZW1lXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qgb3V0ZXJUaGVtZSA9IHVzZVRoZW1lKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKG91dGVyVGhlbWUgPT09IG51bGwgJiYgdHlwZW9mIGxvY2FsVGhlbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBhcmUgcHJvdmlkaW5nIGEgdGhlbWUgZnVuY3Rpb24gcHJvcCB0byB0aGUgVGhlbWVQcm92aWRlciBjb21wb25lbnQ6JywgJzxUaGVtZVByb3ZpZGVyIHRoZW1lPXtvdXRlclRoZW1lID0+IG91dGVyVGhlbWV9IC8+JywgJycsICdIb3dldmVyLCBubyBvdXRlciB0aGVtZSBpcyBwcmVzZW50LicsICdNYWtlIHN1cmUgYSB0aGVtZSBpcyBhbHJlYWR5IGluamVjdGVkIGhpZ2hlciBpbiB0aGUgUmVhY3QgdHJlZSAnICsgJ29yIHByb3ZpZGUgYSB0aGVtZSBvYmplY3QuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuICBjb25zdCB0aGVtZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IG91dGVyVGhlbWUgPT09IG51bGwgPyBsb2NhbFRoZW1lIDogbWVyZ2VPdXRlckxvY2FsVGhlbWUob3V0ZXJUaGVtZSwgbG9jYWxUaGVtZSk7XG4gICAgaWYgKG91dHB1dCAhPSBudWxsKSB7XG4gICAgICBvdXRwdXRbbmVzdGVkXSA9IG91dGVyVGhlbWUgIT09IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sIFtsb2NhbFRoZW1lLCBvdXRlclRoZW1lXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGhlbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGhlbWVQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQSB0aGVtZSBvYmplY3QuIFlvdSBjYW4gcHJvdmlkZSBhIGZ1bmN0aW9uIHRvIGV4dGVuZCB0aGUgb3V0ZXIgdGhlbWUuXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGhlbWVQcm92aWRlci5wcm9wVHlwZXMgPSBleGFjdFByb3AoVGhlbWVQcm92aWRlci5wcm9wVHlwZXMpIDogdm9pZCAwO1xufVxuZXhwb3J0IGRlZmF1bHQgVGhlbWVQcm92aWRlcjsiLCIvKlxuXG5CYXNlZCBvZmYgZ2xhbW9yJ3MgU3R5bGVTaGVldCwgdGhhbmtzIFN1bmlsIOKdpO+4j1xuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2VcblxuLy8gdXNhZ2VcblxuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0J1xuXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KHsga2V5OiAnJywgY29udGFpbmVyOiBkb2N1bWVudC5oZWFkIH0pXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuLy8gJEZsb3dGaXhNZVxuZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIGlmICh0YWcuc2hlZXQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdGlvbnMua2V5KTtcblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRpb25zLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gVXNpbmcgTm9kZSBpbnN0ZWFkIG9mIEhUTUxFbGVtZW50IHNpbmNlIGNvbnRhaW5lciBtYXkgYmUgYSBTaGFkb3dSb290XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9pbnNlcnRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgYmVmb3JlO1xuXG4gICAgICBpZiAoX3RoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKF90aGlzLmluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuaW5zZXJ0aW9uUG9pbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJlcGVuZCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gX3RoaXMudGFnc1tfdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhZywgYmVmb3JlKTtcblxuICAgICAgX3RoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NCAmJiBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNTtcblxuICAgICAgaWYgKGlzSW1wb3J0UnVsZSAmJiB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSkge1xuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgY2F1c2UgcHJvYmxlbSBpbiBzcGVlZHkgbW9kZVxuICAgICAgICAvLyBidXQgd2UgZG9uJ3Qgd2FudCBlbmFibGluZyBzcGVlZHkgdG8gYWZmZWN0IHRoZSBvYnNlcnZhYmxlIGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIHJlcG9ydCB0aGlzIGVycm9yIGF0IGFsbCB0aW1lc1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IHRoZSBmb2xsb3dpbmcgcnVsZTpcXG5cIiArIHJ1bGUgKyAnXFxuXFxuYEBpbXBvcnRgIHJ1bGVzIG11c3QgYmUgYmVmb3JlIGFsbCBvdGhlciB0eXBlcyBvZiBydWxlcyBpbiBhIHN0eWxlc2hlZXQgYnV0IG90aGVyIHJ1bGVzIGhhdmUgYWxyZWFkeSBiZWVuIGluc2VydGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgYEBpbXBvcnRgIHJ1bGVzIGFyZSBiZWZvcmUgYWxsIG90aGVyIHJ1bGVzLicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSB8fCAhaXNJbXBvcnRSdWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIS86KC1tb3otcGxhY2Vob2xkZXJ8LW1vei1mb2N1cy1pbm5lcnwtbW96LWZvY3VzcmluZ3wtbXMtaW5wdXQtcGxhY2Vob2xkZXJ8LW1vei1yZWFkLXdyaXRlfC1tb3otcmVhZC1vbmx5fC1tcy1jbGVhcnwtbXMtZXhwYW5kfC1tcy1yZXZlYWwpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUgJiYgdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuIGNoYXJhdCh2YWx1ZSwgMCkgXiA0NSA/ICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpIDogMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbSAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLnRyaW0oKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm5cbiAqIEByZXR1cm4ge3N0cmluZz99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaCAodmFsdWUsIHBhdHRlcm4pIHtcblx0cmV0dXJuICh2YWx1ZSA9IHBhdHRlcm4uZXhlYyh2YWx1ZSkpID8gdmFsdWVbMF0gOiB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZSAodmFsdWUsIHBhdHRlcm4sIHJlcGxhY2VtZW50KSB7XG5cdHJldHVybiB2YWx1ZS5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VtZW50KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCkge1xuXHRyZXR1cm4gdmFsdWUuaW5kZXhPZihzZWFyY2gpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXJhdCAodmFsdWUsIGluZGV4KSB7XG5cdHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSB8IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic3RyICh2YWx1ZSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gdmFsdWUuc2xpY2UoYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmxlbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplb2YgKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQgKHZhbHVlLCBhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSksIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lIChhcnJheSwgY2FsbGJhY2spIHtcblx0cmV0dXJuIGFycmF5Lm1hcChjYWxsYmFjaykuam9pbignJylcbn1cbiIsImltcG9ydCB7ZnJvbSwgdHJpbSwgY2hhcmF0LCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCBhc3NpZ259IGZyb20gJy4vVXRpbGl0eS5qcydcblxuZXhwb3J0IHZhciBsaW5lID0gMVxuZXhwb3J0IHZhciBjb2x1bW4gPSAxXG5leHBvcnQgdmFyIGxlbmd0aCA9IDBcbmV4cG9ydCB2YXIgcG9zaXRpb24gPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlciA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVycyA9ICcnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXSB8IHN0cmluZ30gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0W10gfCBzdHJpbmd9IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub2RlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJyd9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weSAocm9vdCwgcHJvcHMpIHtcblx0cmV0dXJuIGFzc2lnbihub2RlKCcnLCBudWxsLCBudWxsLCAnJywgbnVsbCwgbnVsbCwgMCksIHJvb3QsIHtsZW5ndGg6IC1yb290Lmxlbmd0aH0sIHByb3BzKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXIgKCkge1xuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJldiAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uID4gMCA/IGNoYXJhdChjaGFyYWN0ZXJzLCAtLXBvc2l0aW9uKSA6IDBcblxuXHRpZiAoY29sdW1uLS0sIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZS0tXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5leHQgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA8IGxlbmd0aCA/IGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbisrKSA6IDBcblxuXHRpZiAoY29sdW1uKyssIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZSsrXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlZWsgKCkge1xuXHRyZXR1cm4gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcmV0ICgpIHtcblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gc3Vic3RyKGNoYXJhY3RlcnMsIGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuICh0eXBlKSB7XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdC8vIFxcMCBcXHQgXFxuIFxcciBcXHMgd2hpdGVzcGFjZSB0b2tlblxuXHRcdGNhc2UgMDogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuXHRcdFx0cmV0dXJuIDVcblx0XHQvLyAhICsgLCAvID4gQCB+IGlzb2xhdGUgdG9rZW5cblx0XHRjYXNlIDMzOiBjYXNlIDQzOiBjYXNlIDQ0OiBjYXNlIDQ3OiBjYXNlIDYyOiBjYXNlIDY0OiBjYXNlIDEyNjpcblx0XHQvLyA7IHsgfSBicmVha3BvaW50IHRva2VuXG5cdFx0Y2FzZSA1OTogY2FzZSAxMjM6IGNhc2UgMTI1OlxuXHRcdFx0cmV0dXJuIDRcblx0XHQvLyA6IGFjY29tcGFuaWVkIHRva2VuXG5cdFx0Y2FzZSA1ODpcblx0XHRcdHJldHVybiAzXG5cdFx0Ly8gXCIgJyAoIFsgb3BlbmluZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSAzNDogY2FzZSAzOTogY2FzZSA0MDogY2FzZSA5MTpcblx0XHRcdHJldHVybiAyXG5cdFx0Ly8gKSBdIGNsb3NpbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgNDE6IGNhc2UgOTM6XG5cdFx0XHRyZXR1cm4gMVxuXHR9XG5cblx0cmV0dXJuIDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge2FueVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBsaW5lID0gY29sdW1uID0gMSwgbGVuZ3RoID0gc3RybGVuKGNoYXJhY3RlcnMgPSB2YWx1ZSksIHBvc2l0aW9uID0gMCwgW11cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJzID0gJycsIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXQgKHR5cGUpIHtcblx0cmV0dXJuIHRyaW0oc2xpY2UocG9zaXRpb24gLSAxLCBkZWxpbWl0ZXIodHlwZSA9PT0gOTEgPyB0eXBlICsgMiA6IHR5cGUgPT09IDQwID8gdHlwZSArIDEgOiB0eXBlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyh0b2tlbml6ZXIoYWxsb2ModmFsdWUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSAodHlwZSkge1xuXHR3aGlsZSAoY2hhcmFjdGVyID0gcGVlaygpKVxuXHRcdGlmIChjaGFyYWN0ZXIgPCAzMylcblx0XHRcdG5leHQoKVxuXHRcdGVsc2Vcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHRva2VuKHR5cGUpID4gMiB8fCB0b2tlbihjaGFyYWN0ZXIpID4gMyA/ICcnIDogJyAnXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemVyIChjaGlsZHJlbikge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuXHRcdFx0Y2FzZSAwOiBhcHBlbmQoaWRlbnRpZmllcihwb3NpdGlvbiAtIDEpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjogYXBwZW5kKGRlbGltaXQoY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRkZWZhdWx0OiBhcHBlbmQoZnJvbShjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHR9XG5cblx0cmV0dXJuIGNoaWxkcmVuXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwaW5nIChpbmRleCwgY291bnQpIHtcblx0d2hpbGUgKC0tY291bnQgJiYgbmV4dCgpKVxuXHRcdC8vIG5vdCAwLTkgQS1GIGEtZlxuXHRcdGlmIChjaGFyYWN0ZXIgPCA0OCB8fCBjaGFyYWN0ZXIgPiAxMDIgfHwgKGNoYXJhY3RlciA+IDU3ICYmIGNoYXJhY3RlciA8IDY1KSB8fCAoY2hhcmFjdGVyID4gNzAgJiYgY2hhcmFjdGVyIDwgOTcpKVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIGNhcmV0KCkgKyAoY291bnQgPCA2ICYmIHBlZWsoKSA9PSAzMiAmJiBuZXh0KCkgPT0gMzIpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ZXIgKHR5cGUpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0Ly8gXSApIFwiICdcblx0XHRcdGNhc2UgdHlwZTpcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uXG5cdFx0XHQvLyBcIiAnXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OlxuXHRcdFx0XHRpZiAodHlwZSAhPT0gMzQgJiYgdHlwZSAhPT0gMzkpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKGNoYXJhY3Rlcilcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmICh0eXBlID09PSA0MSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIodHlwZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRuZXh0KClcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudGVyICh0eXBlLCBpbmRleCkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdC8vIC8vXG5cdFx0aWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQ3ICsgMTApXG5cdFx0XHRicmVha1xuXHRcdC8vIC8qXG5cdFx0ZWxzZSBpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDIgKyA0MiAmJiBwZWVrKCkgPT09IDQ3KVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gJy8qJyArIHNsaWNlKGluZGV4LCBwb3NpdGlvbiAtIDEpICsgJyonICsgZnJvbSh0eXBlID09PSA0NyA/IHR5cGUgOiBuZXh0KCkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGlmaWVyIChpbmRleCkge1xuXHR3aGlsZSAoIXRva2VuKHBlZWsoKSkpXG5cdFx0bmV4dCgpXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBwb3NpdGlvbilcbn1cbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbmV4cG9ydCB2YXIgTEFZRVIgPSAnQGxheWVyJ1xuIiwiaW1wb3J0IHtJTVBPUlQsIExBWUVSLCBDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTiwgS0VZRlJBTUVTfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge3N0cmxlbiwgc2l6ZW9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUgKGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHR2YXIgb3V0cHV0ID0gJydcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjaGlsZHJlbilcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdG91dHB1dCArPSBjYWxsYmFjayhjaGlsZHJlbltpXSwgaSwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdHJldHVybiBvdXRwdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgTEFZRVI6IGlmIChlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCkgYnJlYWtcblx0XHRjYXNlIElNUE9SVDogY2FzZSBERUNMQVJBVElPTjogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC5yZXR1cm4gfHwgZWxlbWVudC52YWx1ZVxuXHRcdGNhc2UgQ09NTUVOVDogcmV0dXJuICcnXG5cdFx0Y2FzZSBLRVlGUkFNRVM6IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spICsgJ30nXG5cdFx0Y2FzZSBSVUxFU0VUOiBlbGVtZW50LnZhbHVlID0gZWxlbWVudC5wcm9wcy5qb2luKCcsJylcblx0fVxuXG5cdHJldHVybiBzdHJsZW4oY2hpbGRyZW4gPSBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spKSA/IGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIGNoaWxkcmVuICsgJ30nIDogJydcbn1cbiIsImltcG9ydCB7Q09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7YWJzLCBjaGFyYXQsIHRyaW0sIGZyb20sIHNpemVvZiwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgcmVwbGFjZSwgaW5kZXhvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtub2RlLCBjaGFyLCBwcmV2LCBuZXh0LCBwZWVrLCBjYXJldCwgYWxsb2MsIGRlYWxsb2MsIGRlbGltaXQsIHdoaXRlc3BhY2UsIGVzY2FwaW5nLCBpZGVudGlmaWVyLCBjb21tZW50ZXJ9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7b2JqZWN0W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyhwYXJzZSgnJywgbnVsbCwgbnVsbCwgbnVsbCwgWycnXSwgdmFsdWUgPSBhbGxvYyh2YWx1ZSksIDAsIFswXSwgdmFsdWUpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNldHNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBzZXVkb1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBkZWNsYXJhdGlvbnNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBydWxlLCBydWxlcywgcnVsZXNldHMsIHBzZXVkbywgcG9pbnRzLCBkZWNsYXJhdGlvbnMpIHtcblx0dmFyIGluZGV4ID0gMFxuXHR2YXIgb2Zmc2V0ID0gMFxuXHR2YXIgbGVuZ3RoID0gcHNldWRvXG5cdHZhciBhdHJ1bGUgPSAwXG5cdHZhciBwcm9wZXJ0eSA9IDBcblx0dmFyIHByZXZpb3VzID0gMFxuXHR2YXIgdmFyaWFibGUgPSAxXG5cdHZhciBzY2FubmluZyA9IDFcblx0dmFyIGFtcGVyc2FuZCA9IDFcblx0dmFyIGNoYXJhY3RlciA9IDBcblx0dmFyIHR5cGUgPSAnJ1xuXHR2YXIgcHJvcHMgPSBydWxlc1xuXHR2YXIgY2hpbGRyZW4gPSBydWxlc2V0c1xuXHR2YXIgcmVmZXJlbmNlID0gcnVsZVxuXHR2YXIgY2hhcmFjdGVycyA9IHR5cGVcblxuXHR3aGlsZSAoc2Nhbm5pbmcpXG5cdFx0c3dpdGNoIChwcmV2aW91cyA9IGNoYXJhY3RlciwgY2hhcmFjdGVyID0gbmV4dCgpKSB7XG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAocHJldmlvdXMgIT0gMTA4ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCBsZW5ndGggLSAxKSA9PSA1OCkge1xuXHRcdFx0XHRcdGlmIChpbmRleG9mKGNoYXJhY3RlcnMgKz0gcmVwbGFjZShkZWxpbWl0KGNoYXJhY3RlciksICcmJywgJyZcXGYnKSwgJyZcXGYnKSAhPSAtMSlcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IC0xXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0Ly8gXCIgJyBbXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDkxOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFx0IFxcbiBcXHIgXFxzXG5cdFx0XHRjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gd2hpdGVzcGFjZShwcmV2aW91cylcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGVzY2FwaW5nKGNhcmV0KCkgLSAxLCA3KVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0Ly8gL1xuXHRcdFx0Y2FzZSA0Nzpcblx0XHRcdFx0c3dpdGNoIChwZWVrKCkpIHtcblx0XHRcdFx0XHRjYXNlIDQyOiBjYXNlIDQ3OlxuXHRcdFx0XHRcdFx0YXBwZW5kKGNvbW1lbnQoY29tbWVudGVyKG5leHQoKSwgY2FyZXQoKSksIHJvb3QsIHBhcmVudCksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gJy8nXG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIHtcblx0XHRcdGNhc2UgMTIzICogdmFyaWFibGU6XG5cdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IHN0cmxlbihjaGFyYWN0ZXJzKSAqIGFtcGVyc2FuZFxuXHRcdFx0Ly8gfSA7IFxcMFxuXHRcdFx0Y2FzZSAxMjUgKiB2YXJpYWJsZTogY2FzZSA1OTogY2FzZSAwOlxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0XHRcdC8vIFxcMCB9XG5cdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDEyNTogc2Nhbm5pbmcgPSAwXG5cdFx0XHRcdFx0Ly8gO1xuXHRcdFx0XHRcdGNhc2UgNTkgKyBvZmZzZXQ6IGlmIChhbXBlcnNhbmQgPT0gLTEpIGNoYXJhY3RlcnMgPSByZXBsYWNlKGNoYXJhY3RlcnMsIC9cXGYvZywgJycpXG5cdFx0XHRcdFx0XHRpZiAocHJvcGVydHkgPiAwICYmIChzdHJsZW4oY2hhcmFjdGVycykgLSBsZW5ndGgpKVxuXHRcdFx0XHRcdFx0XHRhcHBlbmQocHJvcGVydHkgPiAzMiA/IGRlY2xhcmF0aW9uKGNoYXJhY3RlcnMgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMSkgOiBkZWNsYXJhdGlvbihyZXBsYWNlKGNoYXJhY3RlcnMsICcgJywgJycpICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDIpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEAgO1xuXHRcdFx0XHRcdGNhc2UgNTk6IGNoYXJhY3RlcnMgKz0gJzsnXG5cdFx0XHRcdFx0Ly8geyBydWxlL2F0LXJ1bGVcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0YXBwZW5kKHJlZmVyZW5jZSA9IHJ1bGVzZXQoY2hhcmFjdGVycywgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcyA9IFtdLCBjaGlsZHJlbiA9IFtdLCBsZW5ndGgpLCBydWxlc2V0cylcblxuXHRcdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PT0gMTIzKVxuXHRcdFx0XHRcdFx0XHRpZiAob2Zmc2V0ID09PSAwKVxuXHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJvb3QsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBwcm9wcywgcnVsZXNldHMsIGxlbmd0aCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoYXRydWxlID09PSA5OSAmJiBjaGFyYXQoY2hhcmFjdGVycywgMykgPT09IDExMCA/IDEwMCA6IGF0cnVsZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZCBsIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA4OiBjYXNlIDEwOTogY2FzZSAxMTU6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcnVsZSAmJiBhcHBlbmQocnVsZXNldCh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIDAsIDAsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHJ1bGVzLCBwcm9wcyA9IFtdLCBsZW5ndGgpLCBjaGlsZHJlbiksIHJ1bGVzLCBjaGlsZHJlbiwgbGVuZ3RoLCBwb2ludHMsIHJ1bGUgPyBwcm9wcyA6IGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgWycnXSwgY2hpbGRyZW4sIDAsIHBvaW50cywgY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5kZXggPSBvZmZzZXQgPSBwcm9wZXJ0eSA9IDAsIHZhcmlhYmxlID0gYW1wZXJzYW5kID0gMSwgdHlwZSA9IGNoYXJhY3RlcnMgPSAnJywgbGVuZ3RoID0gcHNldWRvXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyA6XG5cdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRsZW5ndGggPSAxICsgc3RybGVuKGNoYXJhY3RlcnMpLCBwcm9wZXJ0eSA9IHByZXZpb3VzXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZiAodmFyaWFibGUgPCAxKVxuXHRcdFx0XHRcdGlmIChjaGFyYWN0ZXIgPT0gMTIzKVxuXHRcdFx0XHRcdFx0LS12YXJpYWJsZVxuXHRcdFx0XHRcdGVsc2UgaWYgKGNoYXJhY3RlciA9PSAxMjUgJiYgdmFyaWFibGUrKyA9PSAwICYmIHByZXYoKSA9PSAxMjUpXG5cdFx0XHRcdFx0XHRjb250aW51ZVxuXG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVycyArPSBmcm9tKGNoYXJhY3RlciksIGNoYXJhY3RlciAqIHZhcmlhYmxlKSB7XG5cdFx0XHRcdFx0Ly8gJlxuXHRcdFx0XHRcdGNhc2UgMzg6XG5cdFx0XHRcdFx0XHRhbXBlcnNhbmQgPSBvZmZzZXQgPiAwID8gMSA6IChjaGFyYWN0ZXJzICs9ICdcXGYnLCAtMSlcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLFxuXHRcdFx0XHRcdGNhc2UgNDQ6XG5cdFx0XHRcdFx0XHRwb2ludHNbaW5kZXgrK10gPSAoc3RybGVuKGNoYXJhY3RlcnMpIC0gMSkgKiBhbXBlcnNhbmQsIGFtcGVyc2FuZCA9IDFcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQFxuXHRcdFx0XHRcdGNhc2UgNjQ6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAocGVlaygpID09PSA0NSlcblx0XHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSBkZWxpbWl0KG5leHQoKSlcblxuXHRcdFx0XHRcdFx0YXRydWxlID0gcGVlaygpLCBvZmZzZXQgPSBsZW5ndGggPSBzdHJsZW4odHlwZSA9IGNoYXJhY3RlcnMgKz0gaWRlbnRpZmllcihjYXJldCgpKSksIGNoYXJhY3RlcisrXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRjYXNlIDQ1OlxuXHRcdFx0XHRcdFx0aWYgKHByZXZpb3VzID09PSA0NSAmJiBzdHJsZW4oY2hhcmFjdGVycykgPT0gMilcblx0XHRcdFx0XHRcdFx0dmFyaWFibGUgPSAwXG5cdFx0XHRcdH1cblx0XHR9XG5cblx0cmV0dXJuIHJ1bGVzZXRzXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNldCAodmFsdWUsIHJvb3QsIHBhcmVudCwgaW5kZXgsIG9mZnNldCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0dmFyIHBvc3QgPSBvZmZzZXQgLSAxXG5cdHZhciBydWxlID0gb2Zmc2V0ID09PSAwID8gcnVsZXMgOiBbJyddXG5cdHZhciBzaXplID0gc2l6ZW9mKHJ1bGUpXG5cblx0Zm9yICh2YXIgaSA9IDAsIGogPSAwLCBrID0gMDsgaSA8IGluZGV4OyArK2kpXG5cdFx0Zm9yICh2YXIgeCA9IDAsIHkgPSBzdWJzdHIodmFsdWUsIHBvc3QgKyAxLCBwb3N0ID0gYWJzKGogPSBwb2ludHNbaV0pKSwgeiA9IHZhbHVlOyB4IDwgc2l6ZTsgKyt4KVxuXHRcdFx0aWYgKHogPSB0cmltKGogPiAwID8gcnVsZVt4XSArICcgJyArIHkgOiByZXBsYWNlKHksIC8mXFxmL2csIHJ1bGVbeF0pKSlcblx0XHRcdFx0cHJvcHNbaysrXSA9IHpcblxuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBvZmZzZXQgPT09IDAgPyBSVUxFU0VUIDogdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnQgKHZhbHVlLCByb290LCBwYXJlbnQpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgQ09NTUVOVCwgZnJvbShjaGFyKCkpLCBzdWJzdHIodmFsdWUsIDIsIC0yKSwgMClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyYXRpb24gKHZhbHVlLCByb290LCBwYXJlbnQsIGxlbmd0aCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBERUNMQVJBVElPTiwgc3Vic3RyKHZhbHVlLCAwLCBsZW5ndGgpLCBzdWJzdHIodmFsdWUsIGxlbmd0aCArIDEsIC0xKSwgbGVuZ3RoKVxufVxuIiwiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcbmltcG9ydCB7IGRlYWxsb2MsIGFsbG9jLCBuZXh0LCB0b2tlbiwgZnJvbSwgcGVlaywgZGVsaW1pdCwgc2xpY2UsIHBvc2l0aW9uLCBSVUxFU0VULCBjb21iaW5lLCBtYXRjaCwgc2VyaWFsaXplLCBjb3B5LCByZXBsYWNlLCBXRUJLSVQsIE1PWiwgTVMsIEtFWUZSQU1FUywgREVDTEFSQVRJT04sIGhhc2gsIGNoYXJhdCwgc3RybGVuLCBpbmRleG9mLCBzdHJpbmdpZnksIENPTU1FTlQsIHJ1bGVzaGVldCwgbWlkZGxld2FyZSwgY29tcGlsZSB9IGZyb20gJ3N0eWxpcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nID0gZnVuY3Rpb24gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKGJlZ2luLCBwb2ludHMsIGluZGV4KSB7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSAwO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgcHJldmlvdXMgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gcGVlaygpOyAvLyAmXFxmXG5cbiAgICBpZiAocHJldmlvdXMgPT09IDM4ICYmIGNoYXJhY3RlciA9PT0gMTIpIHtcbiAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgIH1cblxuICAgIGlmICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBuZXh0KCk7XG4gIH1cblxuICByZXR1cm4gc2xpY2UoYmVnaW4sIHBvc2l0aW9uKTtcbn07XG5cbnZhciB0b1J1bGVzID0gZnVuY3Rpb24gdG9SdWxlcyhwYXJzZWQsIHBvaW50cykge1xuICAvLyBwcmV0ZW5kIHdlJ3ZlIHN0YXJ0ZWQgd2l0aCBhIGNvbW1hXG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgY2hhcmFjdGVyID0gNDQ7XG5cbiAgZG8ge1xuICAgIHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAvLyAmXFxmXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDM4ICYmIHBlZWsoKSA9PT0gMTIpIHtcbiAgICAgICAgICAvLyB0aGlzIGlzIG5vdCAxMDAlIGNvcnJlY3QsIHdlIGRvbid0IGFjY291bnQgZm9yIGxpdGVyYWwgc2VxdWVuY2VzIGhlcmUgLSBsaWtlIGZvciBleGFtcGxlIHF1b3RlZCBzdHJpbmdzXG4gICAgICAgICAgLy8gc3R5bGlzIGluc2VydHMgXFxmIGFmdGVyICYgdG8ga25vdyB3aGVuICYgd2hlcmUgaXQgc2hvdWxkIHJlcGxhY2UgdGhpcyBzZXF1ZW5jZSB3aXRoIHRoZSBjb250ZXh0IHNlbGVjdG9yXG4gICAgICAgICAgLy8gYW5kIHdoZW4gaXQgc2hvdWxkIGp1c3QgY29uY2F0ZW5hdGUgdGhlIG91dGVyIGFuZCBpbm5lciBzZWxlY3RvcnNcbiAgICAgICAgICAvLyBpdCdzIHZlcnkgdW5saWtlbHkgZm9yIHRoaXMgc2VxdWVuY2UgdG8gYWN0dWFsbHkgYXBwZWFyIGluIGEgZGlmZmVyZW50IGNvbnRleHQsIHNvIHdlIGp1c3QgbGV2ZXJhZ2UgdGhpcyBmYWN0IGhlcmVcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKHBvc2l0aW9uIC0gMSwgcG9pbnRzLCBpbmRleCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZGVsaW1pdChjaGFyYWN0ZXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA0OlxuICAgICAgICAvLyBjb21tYVxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSA0NCkge1xuICAgICAgICAgIC8vIGNvbG9uXG4gICAgICAgICAgcGFyc2VkWysraW5kZXhdID0gcGVlaygpID09PSA1OCA/ICcmXFxmJyA6ICcnO1xuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSBwYXJzZWRbaW5kZXhdLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxsdGhyb3VnaFxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGZyb20oY2hhcmFjdGVyKTtcbiAgICB9XG4gIH0gd2hpbGUgKGNoYXJhY3RlciA9IG5leHQoKSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbnZhciBnZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpIHtcbiAgcmV0dXJuIGRlYWxsb2ModG9SdWxlcyhhbGxvYyh2YWx1ZSksIHBvaW50cykpO1xufTsgLy8gV2Vha1NldCB3b3VsZCBiZSBtb3JlIGFwcHJvcHJpYXRlLCBidXQgb25seSBXZWFrTWFwIGlzIHN1cHBvcnRlZCBpbiBJRTExXG5cblxudmFyIGZpeGVkRWxlbWVudHMgPSAvKiAjX19QVVJFX18gKi9uZXcgV2Vha01hcCgpO1xudmFyIGNvbXBhdCA9IGZ1bmN0aW9uIGNvbXBhdChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCAhZWxlbWVudC5wYXJlbnQgfHwgLy8gcG9zaXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgY29udGFpbnMgcHNldWRvXG4gIC8vIG5lZ2F0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGhhcyBiZWVuIGFscmVhZHkgcHJlZml4ZWRcbiAgZWxlbWVudC5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZSxcbiAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50O1xuICB2YXIgaXNJbXBsaWNpdFJ1bGUgPSBlbGVtZW50LmNvbHVtbiA9PT0gcGFyZW50LmNvbHVtbiAmJiBlbGVtZW50LmxpbmUgPT09IHBhcmVudC5saW5lO1xuXG4gIHdoaWxlIChwYXJlbnQudHlwZSAhPT0gJ3J1bGUnKSB7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICB9IC8vIHNob3J0LWNpcmN1aXQgZm9yIHRoZSBzaW1wbGVzdCBjYXNlXG5cblxuICBpZiAoZWxlbWVudC5wcm9wcy5sZW5ndGggPT09IDEgJiYgdmFsdWUuY2hhckNvZGVBdCgwKSAhPT0gNThcbiAgLyogY29sb24gKi9cbiAgJiYgIWZpeGVkRWxlbWVudHMuZ2V0KHBhcmVudCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gaWYgdGhpcyBpcyBhbiBpbXBsaWNpdGx5IGluc2VydGVkIHJ1bGUgKHRoZSBvbmUgZWFnZXJseSBpbnNlcnRlZCBhdCB0aGUgZWFjaCBuZXcgbmVzdGVkIGxldmVsKVxuICAvLyB0aGVuIHRoZSBwcm9wcyBoYXMgYWxyZWFkeSBiZWVuIG1hbmlwdWxhdGVkIGJlZm9yZWhhbmQgYXMgdGhleSB0aGF0IGFycmF5IGlzIHNoYXJlZCBiZXR3ZWVuIGl0IGFuZCBpdHMgXCJydWxlIHBhcmVudFwiXG5cblxuICBpZiAoaXNJbXBsaWNpdFJ1bGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaXhlZEVsZW1lbnRzLnNldChlbGVtZW50LCB0cnVlKTtcbiAgdmFyIHBvaW50cyA9IFtdO1xuICB2YXIgcnVsZXMgPSBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKTtcbiAgdmFyIHBhcmVudFJ1bGVzID0gcGFyZW50LnByb3BzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJlbnRSdWxlcy5sZW5ndGg7IGorKywgaysrKSB7XG4gICAgICBlbGVtZW50LnByb3BzW2tdID0gcG9pbnRzW2ldID8gcnVsZXNbaV0ucmVwbGFjZSgvJlxcZi9nLCBwYXJlbnRSdWxlc1tqXSkgOiBwYXJlbnRSdWxlc1tqXSArIFwiIFwiICsgcnVsZXNbaV07XG4gICAgfVxuICB9XG59O1xudmFyIHJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlID09PSAnZGVjbCcpIHtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuXG4gICAgaWYgKCAvLyBjaGFyY29kZSBmb3IgbFxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDEwOCAmJiAvLyBjaGFyY29kZSBmb3IgYlxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMikgPT09IDk4KSB7XG4gICAgICAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgICAgIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgICB9XG4gIH1cbn07XG52YXIgaWdub3JlRmxhZyA9ICdlbW90aW9uLWRpc2FibGUtc2VydmVyLXJlbmRlcmluZy11bnNhZmUtc2VsZWN0b3Itd2FybmluZy1wbGVhc2UtZG8tbm90LXVzZS10aGlzLXRoZS13YXJuaW5nLWV4aXN0cy1mb3ItYS1yZWFzb24nO1xuXG52YXIgaXNJZ25vcmluZ0NvbW1lbnQgPSBmdW5jdGlvbiBpc0lnbm9yaW5nQ29tbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUgPT09ICdjb21tJyAmJiBlbGVtZW50LmNoaWxkcmVuLmluZGV4T2YoaWdub3JlRmxhZykgPiAtMTtcbn07XG5cbnZhciBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSA9IGZ1bmN0aW9uIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKGNhY2hlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gICAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8IGNhY2hlLmNvbXBhdCkgcmV0dXJuO1xuICAgIHZhciB1bnNhZmVQc2V1ZG9DbGFzc2VzID0gZWxlbWVudC52YWx1ZS5tYXRjaCgvKDpmaXJzdHw6bnRofDpudGgtbGFzdCktY2hpbGQvZyk7XG5cbiAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3Nlcykge1xuICAgICAgdmFyIGlzTmVzdGVkID0gISFlbGVtZW50LnBhcmVudDsgLy8gaW4gbmVzdGVkIHJ1bGVzIGNvbW1lbnRzIGJlY29tZSBjaGlsZHJlbiBvZiB0aGUgXCJhdXRvLWluc2VydGVkXCIgcnVsZSBhbmQgdGhhdCdzIGFsd2F5cyB0aGUgYGVsZW1lbnQucGFyZW50YFxuICAgICAgLy9cbiAgICAgIC8vIGNvbnNpZGVyaW5nIHRoaXMgaW5wdXQ6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgIC5iIC8qIGNvbW0gKi8ge31cbiAgICAgIC8vICAgY29sb3I6IGhvdHBpbms7XG4gICAgICAvLyB9XG4gICAgICAvLyB3ZSBnZXQgb3V0cHV0IGNvcnJlc3BvbmRpbmcgdG8gdGhpczpcbiAgICAgIC8vIC5hIHtcbiAgICAgIC8vICAgJiB7XG4gICAgICAvLyAgICAgLyogY29tbSAqL1xuICAgICAgLy8gICAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gICB9XG4gICAgICAvLyAgIC5iIHt9XG4gICAgICAvLyB9XG5cbiAgICAgIHZhciBjb21tZW50Q29udGFpbmVyID0gaXNOZXN0ZWQgPyBlbGVtZW50LnBhcmVudC5jaGlsZHJlbiA6IC8vIGdsb2JhbCBydWxlIGF0IHRoZSByb290IGxldmVsXG4gICAgICBjaGlsZHJlbjtcblxuICAgICAgZm9yICh2YXIgaSA9IGNvbW1lbnRDb250YWluZXIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIG5vZGUgPSBjb21tZW50Q29udGFpbmVyW2ldO1xuXG4gICAgICAgIGlmIChub2RlLmxpbmUgPCBlbGVtZW50LmxpbmUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBpdCBpcyBxdWl0ZSB3ZWlyZCBidXQgY29tbWVudHMgYXJlICp1c3VhbGx5KiBwdXQgYXQgYGNvbHVtbjogZWxlbWVudC5jb2x1bW4gLSAxYFxuICAgICAgICAvLyBzbyB3ZSBzZWVrICpmcm9tIHRoZSBlbmQqIGZvciB0aGUgbm9kZSB0aGF0IGlzIGVhcmxpZXIgdGhhbiB0aGUgcnVsZSdzIGBlbGVtZW50YCBhbmQgY2hlY2sgdGhhdFxuICAgICAgICAvLyB0aGlzIHdpbGwgYWxzbyBtYXRjaCBpbnB1dHMgbGlrZSB0aGlzOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLyogY29tbSAqL1xuICAgICAgICAvLyAgIC5iIHt9XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gYnV0IHRoYXQgaXMgZmluZVxuICAgICAgICAvL1xuICAgICAgICAvLyBpdCB3b3VsZCBiZSB0aGUgZWFzaWVzdCB0byBjaGFuZ2UgdGhlIHBsYWNlbWVudCBvZiB0aGUgY29tbWVudCB0byBiZSB0aGUgZmlyc3QgY2hpbGQgb2YgdGhlIHJ1bGU6XG4gICAgICAgIC8vIC5hIHtcbiAgICAgICAgLy8gICAuYiB7IC8qIGNvbW0gKi8gfVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHdpdGggc3VjaCBpbnB1dHMgd2Ugd291bGRuJ3QgaGF2ZSB0byBzZWFyY2ggZm9yIHRoZSBjb21tZW50IGF0IGFsbFxuICAgICAgICAvLyBUT0RPOiBjb25zaWRlciBjaGFuZ2luZyB0aGlzIGNvbW1lbnQgcGxhY2VtZW50IGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cblxuXG4gICAgICAgIGlmIChub2RlLmNvbHVtbiA8IGVsZW1lbnQuY29sdW1uKSB7XG4gICAgICAgICAgaWYgKGlzSWdub3JpbmdDb21tZW50KG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdW5zYWZlUHNldWRvQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh1bnNhZmVQc2V1ZG9DbGFzcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHBzZXVkbyBjbGFzcyBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcyArIFwiXFxcIiBpcyBwb3RlbnRpYWxseSB1bnNhZmUgd2hlbiBkb2luZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFRyeSBjaGFuZ2luZyBpdCB0byBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcy5zcGxpdCgnLWNoaWxkJylbMF0gKyBcIi1vZi10eXBlXFxcIi5cIik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgaXNJbXBvcnRSdWxlID0gZnVuY3Rpb24gaXNJbXBvcnRSdWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDEpID09PSAxMDUgJiYgZWxlbWVudC50eXBlLmNoYXJDb2RlQXQoMCkgPT09IDY0O1xufTtcblxudmFyIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyA9IGZ1bmN0aW9uIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoIWlzSW1wb3J0UnVsZShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07IC8vIHVzZSB0aGlzIHRvIHJlbW92ZSBpbmNvcnJlY3QgZWxlbWVudHMgZnJvbSBmdXJ0aGVyIHByb2Nlc3Npbmdcbi8vIHNvIHRoZXkgZG9uJ3QgZ2V0IGhhbmRlZCB0byB0aGUgYHNoZWV0YCAob3IgYW55dGhpbmcgZWxzZSlcbi8vIGFzIHRoYXQgY291bGQgcG90ZW50aWFsbHkgbGVhZCB0byBhZGRpdGlvbmFsIGxvZ3Mgd2hpY2ggaW4gdHVybiBjb3VsZCBiZSBvdmVyaGVsbWluZyB0byB0aGUgdXNlclxuXG5cbnZhciBudWxsaWZ5RWxlbWVudCA9IGZ1bmN0aW9uIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpIHtcbiAgZWxlbWVudC50eXBlID0gJyc7XG4gIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICBlbGVtZW50LmNoaWxkcmVuID0gJyc7XG4gIGVsZW1lbnQucHJvcHMgPSAnJztcbn07XG5cbnZhciBpbmNvcnJlY3RJbXBvcnRBbGFybSA9IGZ1bmN0aW9uIGluY29ycmVjdEltcG9ydEFsYXJtKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICBpZiAoIWlzSW1wb3J0UnVsZShlbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbGVtZW50LnBhcmVudCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgbmVzdGVkIGluc2lkZSBvdGhlciBydWxlcy4gUGxlYXNlIG1vdmUgaXQgdG8gdGhlIHRvcCBsZXZlbCBhbmQgcHV0IGl0IGJlZm9yZSByZWd1bGFyIHJ1bGVzLiBLZWVwIGluIG1pbmQgdGhhdCB0aGV5IGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIGdsb2JhbCBzdHlsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9IGVsc2UgaWYgKGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pKSB7XG4gICAgY29uc29sZS5lcnJvcihcImBAaW1wb3J0YCBydWxlcyBjYW4ndCBiZSBhZnRlciBvdGhlciBydWxlcy4gUGxlYXNlIHB1dCB5b3VyIGBAaW1wb3J0YCBydWxlcyBiZWZvcmUgeW91ciBvdGhlciBydWxlcy5cIik7XG4gICAgbnVsbGlmeUVsZW1lbnQoZWxlbWVudCk7XG4gIH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cbmZ1bmN0aW9uIHByZWZpeCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHN3aXRjaCAoaGFzaCh2YWx1ZSwgbGVuZ3RoKSkge1xuICAgIC8vIGNvbG9yLWFkanVzdFxuICAgIGNhc2UgNTEwMzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAncHJpbnQtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYW5pbWF0aW9uLCBhbmltYXRpb24tKGRlbGF5fGRpcmVjdGlvbnxkdXJhdGlvbnxmaWxsLW1vZGV8aXRlcmF0aW9uLWNvdW50fG5hbWV8cGxheS1zdGF0ZXx0aW1pbmctZnVuY3Rpb24pXG5cbiAgICBjYXNlIDU3Mzc6XG4gICAgY2FzZSA0MjAxOlxuICAgIGNhc2UgMzE3NzpcbiAgICBjYXNlIDM0MzM6XG4gICAgY2FzZSAxNjQxOlxuICAgIGNhc2UgNDQ1NzpcbiAgICBjYXNlIDI5MjE6IC8vIHRleHQtZGVjb3JhdGlvbiwgZmlsdGVyLCBjbGlwLXBhdGgsIGJhY2tmYWNlLXZpc2liaWxpdHksIGNvbHVtbiwgYm94LWRlY29yYXRpb24tYnJlYWtcblxuICAgIGNhc2UgNTU3MjpcbiAgICBjYXNlIDYzNTY6XG4gICAgY2FzZSA1ODQ0OlxuICAgIGNhc2UgMzE5MTpcbiAgICBjYXNlIDY2NDU6XG4gICAgY2FzZSAzMDA1OiAvLyBtYXNrLCBtYXNrLWltYWdlLCBtYXNrLShtb2RlfGNsaXB8c2l6ZSksIG1hc2stKHJlcGVhdHxvcmlnaW4pLCBtYXNrLXBvc2l0aW9uLCBtYXNrLWNvbXBvc2l0ZSxcblxuICAgIGNhc2UgNjM5MTpcbiAgICBjYXNlIDU4Nzk6XG4gICAgY2FzZSA1NjIzOlxuICAgIGNhc2UgNjEzNTpcbiAgICBjYXNlIDQ1OTk6XG4gICAgY2FzZSA0ODU1OiAvLyBiYWNrZ3JvdW5kLWNsaXAsIGNvbHVtbnMsIGNvbHVtbi0oY291bnR8ZmlsbHxnYXB8cnVsZXxydWxlLWNvbG9yfHJ1bGUtc3R5bGV8cnVsZS13aWR0aHxzcGFufHdpZHRoKVxuXG4gICAgY2FzZSA0MjE1OlxuICAgIGNhc2UgNjM4OTpcbiAgICBjYXNlIDUxMDk6XG4gICAgY2FzZSA1MzY1OlxuICAgIGNhc2UgNTYyMTpcbiAgICBjYXNlIDM4Mjk6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBhcHBlYXJhbmNlLCB1c2VyLXNlbGVjdCwgdHJhbnNmb3JtLCBoeXBoZW5zLCB0ZXh0LXNpemUtYWRqdXN0XG5cbiAgICBjYXNlIDUzNDk6XG4gICAgY2FzZSA0MjQ2OlxuICAgIGNhc2UgNDgxMDpcbiAgICBjYXNlIDY5Njg6XG4gICAgY2FzZSAyNzU2OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTU9aICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gZmxleCwgZmxleC1kaXJlY3Rpb25cblxuICAgIGNhc2UgNjgyODpcbiAgICBjYXNlIDQyNjg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gb3JkZXJcblxuICAgIGNhc2UgNjE2NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYWxpZ24taXRlbXNcblxuICAgIGNhc2UgNTE4NzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHJlcGxhY2UodmFsdWUsIC8oXFx3KykuKyg6W15dKykvLCBXRUJLSVQgKyAnYm94LSQxJDInICsgTVMgKyAnZmxleC0kMSQyJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1zZWxmXG5cbiAgICBjYXNlIDU0NDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWl0ZW0tJyArIHJlcGxhY2UodmFsdWUsIC9mbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWNvbnRlbnRcblxuICAgIGNhc2UgNDY3NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtbGluZS1wYWNrJyArIHJlcGxhY2UodmFsdWUsIC9hbGlnbi1jb250ZW50fGZsZXgtfC1zZWxmLywgJycpICsgdmFsdWU7XG4gICAgLy8gZmxleC1zaHJpbmtcblxuICAgIGNhc2UgNTU0ODpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ3NocmluaycsICduZWdhdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gZmxleC1iYXNpc1xuXG4gICAgY2FzZSA1MjkyOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtZ3Jvd1xuXG4gICAgY2FzZSA2MDYwOlxuICAgICAgcmV0dXJuIFdFQktJVCArICdib3gtJyArIHJlcGxhY2UodmFsdWUsICctZ3JvdycsICcnKSArIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnZ3JvdycsICdwb3NpdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gdHJhbnNpdGlvblxuXG4gICAgY2FzZSA0NTU0OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHJlcGxhY2UodmFsdWUsIC8oW14tXSkodHJhbnNmb3JtKS9nLCAnJDEnICsgV0VCS0lUICsgJyQyJykgKyB2YWx1ZTtcbiAgICAvLyBjdXJzb3JcblxuICAgIGNhc2UgNjE4NzpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyh6b29tLXxncmFiKS8sIFdFQktJVCArICckMScpLCAvKGltYWdlLXNldCkvLCBXRUJLSVQgKyAnJDEnKSwgdmFsdWUsICcnKSArIHZhbHVlO1xuICAgIC8vIGJhY2tncm91bmQsIGJhY2tncm91bmQtaW1hZ2VcblxuICAgIGNhc2UgNTQ5NTpcbiAgICBjYXNlIDM5NTk6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyhpbWFnZS1zZXRcXChbXl0qKS8sIFdFQktJVCArICckMScgKyAnJGAkMScpO1xuICAgIC8vIGp1c3RpZnktY29udGVudFxuXG4gICAgY2FzZSA0OTY4OlxuICAgICAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyguKzopKGZsZXgtKT8oLiopLywgV0VCS0lUICsgJ2JveC1wYWNrOiQzJyArIE1TICsgJ2ZsZXgtcGFjazokMycpLCAvcy4rLWJbXjtdKy8sICdqdXN0aWZ5JykgKyBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIChtYXJnaW58cGFkZGluZyktaW5saW5lLShzdGFydHxlbmQpXG5cbiAgICBjYXNlIDQwOTU6XG4gICAgY2FzZSAzNTgzOlxuICAgIGNhc2UgNDA2ODpcbiAgICBjYXNlIDI1MzI6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKyktaW5saW5lKC4rKS8sIFdFQktJVCArICckMSQyJykgKyB2YWx1ZTtcbiAgICAvLyAobWlufG1heCk/KHdpZHRofGhlaWdodHxpbmxpbmUtc2l6ZXxibG9jay1zaXplKVxuXG4gICAgY2FzZSA4MTE2OlxuICAgIGNhc2UgNzA1OTpcbiAgICBjYXNlIDU3NTM6XG4gICAgY2FzZSA1NTM1OlxuICAgIGNhc2UgNTQ0NTpcbiAgICBjYXNlIDU3MDE6XG4gICAgY2FzZSA0OTMzOlxuICAgIGNhc2UgNDY3NzpcbiAgICBjYXNlIDU1MzM6XG4gICAgY2FzZSA1Nzg5OlxuICAgIGNhc2UgNTAyMTpcbiAgICBjYXNlIDQ3NjU6XG4gICAgICAvLyBzdHJldGNoLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGZpbGwtYXZhaWxhYmxlXG4gICAgICBpZiAoc3RybGVuKHZhbHVlKSAtIDEgLSBsZW5ndGggPiA2KSBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkpIHtcbiAgICAgICAgLy8gKG0pYXgtY29udGVudCwgKG0paW4tY29udGVudFxuICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAvLyAtXG4gICAgICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgNCkgIT09IDQ1KSBicmVhaztcbiAgICAgICAgLy8gKGYpaWxsLWF2YWlsYWJsZSwgKGYpaXQtY29udGVudFxuXG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoLispLShbXl0rKS8sICckMScgKyBXRUJLSVQgKyAnJDItJDMnICsgJyQxJyArIE1PWiArIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDMpID09IDEwOCA/ICckMycgOiAnJDItJDMnKSkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKHMpdHJldGNoXG5cbiAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgcmV0dXJuIH5pbmRleG9mKHZhbHVlLCAnc3RyZXRjaCcpID8gcHJlZml4KHJlcGxhY2UodmFsdWUsICdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGxlbmd0aCkgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgLy8gcG9zaXRpb246IHN0aWNreVxuXG4gICAgY2FzZSA0OTQ5OlxuICAgICAgLy8gKHMpdGlja3k/XG4gICAgICBpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSAhPT0gMTE1KSBicmVhaztcbiAgICAvLyBkaXNwbGF5OiAoZmxleHxpbmxpbmUtZmxleClcblxuICAgIGNhc2UgNjQ0NDpcbiAgICAgIHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBzdHJsZW4odmFsdWUpIC0gMyAtICh+aW5kZXhvZih2YWx1ZSwgJyFpbXBvcnRhbnQnKSAmJiAxMCkpKSB7XG4gICAgICAgIC8vIHN0aWMoayl5XG4gICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAnOicsICc6JyArIFdFQktJVCkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKGlubGluZS0pP2ZsKGUpeFxuXG4gICAgICAgIGNhc2UgMTAxOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoW147IV0rKSg7fCEuKyk/LywgJyQxJyArIFdFQktJVCArIChjaGFyYXQodmFsdWUsIDE0KSA9PT0gNDUgPyAnaW5saW5lLScgOiAnJykgKyAnYm94JDMnICsgJyQxJyArIFdFQktJVCArICckMiQzJyArICckMScgKyBNUyArICckMmJveCQzJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgLy8gd3JpdGluZy1tb2RlXG5cbiAgICBjYXNlIDU5MzY6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMTEpKSB7XG4gICAgICAgIC8vIHZlcnRpY2FsLWwocilcbiAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0YicpICsgdmFsdWU7XG4gICAgICAgIC8vIHZlcnRpY2FsLXIobClcblxuICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiLXJsJykgKyB2YWx1ZTtcbiAgICAgICAgLy8gaG9yaXpvbnRhbCgtKXRiXG5cbiAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ2xyJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgcHJlZml4ZXIgPSBmdW5jdGlvbiBwcmVmaXhlcihlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG4gIGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKSBpZiAoIWVsZW1lbnRbXCJyZXR1cm5cIl0pIHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG4gICAgY2FzZSBERUNMQVJBVElPTjpcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIEtFWUZSQU1FUzpcbiAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICB2YWx1ZTogcmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVClcbiAgICAgIH0pXSwgY2FsbGJhY2spO1xuXG4gICAgY2FzZSBSVUxFU0VUOlxuICAgICAgaWYgKGVsZW1lbnQubGVuZ3RoKSByZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcbiAgICAgICAgICAvLyA6cmVhZC0ob25seXx3cml0ZSlcbiAgICAgICAgICBjYXNlICc6cmVhZC1vbmx5JzpcbiAgICAgICAgICBjYXNlICc6cmVhZC13cml0ZSc6XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAvLyA6cGxhY2Vob2xkZXJcblxuICAgICAgICAgIGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV1cbiAgICAgICAgICAgIH0pXSwgY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0U3R5bGlzUGx1Z2lucyA9IFtwcmVmaXhlcl07XG5cbnZhciBjcmVhdGVDYWNoZSA9IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKG9wdGlvbnMpIHtcbiAgdmFyIGtleSA9IG9wdGlvbnMua2V5O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFrZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgaGF2ZSB0byBjb25maWd1cmUgYGtleWAgZm9yIHlvdXIgY2FjaGUuIFBsZWFzZSBtYWtlIHN1cmUgaXQncyB1bmlxdWUgKGFuZCBub3QgZXF1YWwgdG8gJ2NzcycpIGFzIGl0J3MgdXNlZCBmb3IgbGlua2luZyBzdHlsZXMgdG8geW91ciBjYWNoZS5cXG5cIiArIFwiSWYgbXVsdGlwbGUgY2FjaGVzIHNoYXJlIHRoZSBzYW1lIGtleSB0aGV5IG1pZ2h0IFxcXCJmaWdodFxcXCIgZm9yIGVhY2ggb3RoZXIncyBzdHlsZSBlbGVtZW50cy5cIik7XG4gIH1cblxuICBpZiAoa2V5ID09PSAnY3NzJykge1xuICAgIHZhciBzc3JTdHlsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXTpub3QoW2RhdGEtc10pXCIpOyAvLyBnZXQgU1NSZWQgc3R5bGVzIG91dCBvZiB0aGUgd2F5IG9mIFJlYWN0J3MgaHlkcmF0aW9uXG4gICAgLy8gZG9jdW1lbnQuaGVhZCBpcyBhIHNhZmUgcGxhY2UgdG8gbW92ZSB0aGVtIHRvKHRob3VnaCBub3RlIGRvY3VtZW50LmhlYWQgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBsYXN0IHBsYWNlIHRoZXkgd2lsbCBiZSlcbiAgICAvLyBub3RlIHRoaXMgdmVyeSB2ZXJ5IGludGVudGlvbmFsbHkgdGFyZ2V0cyBhbGwgc3R5bGUgZWxlbWVudHMgcmVnYXJkbGVzcyBvZiB0aGUga2V5IHRvIGVuc3VyZVxuICAgIC8vIHRoYXQgY3JlYXRpbmcgYSBjYWNoZSB3b3JrcyBpbnNpZGUgb2YgcmVuZGVyIG9mIGEgUmVhY3QgY29tcG9uZW50XG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHNzclN0eWxlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIHdlIHdhbnQgdG8gb25seSBtb3ZlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBzcGFjZSBpbiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgLy8gYmVjYXVzZSB0aGF0IGluZGljYXRlcyB0aGF0IGl0IGlzIGFuIEVtb3Rpb24gMTEgc2VydmVyLXNpZGUgcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICAgIC8vIHdoaWxlIHdlIHdpbGwgYWxyZWFkeSBpZ25vcmUgRW1vdGlvbiAxMSBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgYmVjYXVzZSBvZiB0aGUgOm5vdChbZGF0YS1zXSkgcGFydCBpbiB0aGUgc2VsZWN0b3JcbiAgICAgIC8vIEVtb3Rpb24gMTAgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGRpZCBub3QgaGF2ZSBkYXRhLXMgKGJ1dCBpbXBvcnRhbnRseSBkaWQgbm90IGhhdmUgYSBzcGFjZSBpbiB0aGVpciBkYXRhLWVtb3Rpb24gYXR0cmlidXRlcylcbiAgICAgIC8vIHNvIGNoZWNraW5nIGZvciB0aGUgc3BhY2UgZW5zdXJlcyB0aGF0IGxvYWRpbmcgRW1vdGlvbiAxMSBhZnRlciBFbW90aW9uIDEwIGhhcyBpbnNlcnRlZCBzb21lIHN0eWxlc1xuICAgICAgLy8gd2lsbCBub3QgcmVzdWx0IGluIHRoZSBFbW90aW9uIDEwIHN0eWxlcyBiZWluZyBkZXN0cm95ZWRcbiAgICAgIHZhciBkYXRhRW1vdGlvbkF0dHJpYnV0ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nKTtcblxuICAgICAgaWYgKGRhdGFFbW90aW9uQXR0cmlidXRlLmluZGV4T2YoJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgc3R5bGlzUGx1Z2lucyA9IG9wdGlvbnMuc3R5bGlzUGx1Z2lucyB8fCBkZWZhdWx0U3R5bGlzUGx1Z2lucztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307XG4gIHZhciBjb250YWluZXI7XG4gIHZhciBub2Rlc1RvSHlkcmF0ZSA9IFtdO1xuXG4gIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoIC8vIHRoaXMgbWVhbnMgd2Ugd2lsbCBpZ25vcmUgZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhIHNwYWNlIGluIHRoZW0gd2hpY2hcbiAgICAvLyBtZWFucyB0aGF0IHRoZSBzdHlsZSBlbGVtZW50cyB3ZSdyZSBsb29raW5nIGF0IGFyZSBvbmx5IEVtb3Rpb24gMTEgc2VydmVyLXJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl49XFxcIlwiICsga2V5ICsgXCIgXFxcIl1cIiksIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYXR0cmliID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVtb3Rpb25cIikuc3BsaXQoJyAnKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGF0dHJpYi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnNlcnRlZFthdHRyaWJbaV1dID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZXNUb0h5ZHJhdGUucHVzaChub2RlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfaW5zZXJ0O1xuXG4gIHZhciBvbW5pcHJlc2VudFBsdWdpbnMgPSBbY29tcGF0LCByZW1vdmVMYWJlbF07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBvbW5pcHJlc2VudFBsdWdpbnMucHVzaChjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSh7XG4gICAgICBnZXQgY29tcGF0KCkge1xuICAgICAgICByZXR1cm4gY2FjaGUuY29tcGF0O1xuICAgICAgfVxuXG4gICAgfSksIGluY29ycmVjdEltcG9ydEFsYXJtKTtcbiAgfVxuXG4gIHtcbiAgICB2YXIgY3VycmVudFNoZWV0O1xuICAgIHZhciBmaW5hbGl6aW5nUGx1Z2lucyA9IFtzdHJpbmdpZnksIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKCFlbGVtZW50LnJvb3QpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnRbXCJyZXR1cm5cIl0pO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQudmFsdWUgJiYgZWxlbWVudC50eXBlICE9PSBDT01NRU5UKSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IGVtcHR5IHJ1bGUgaW4gbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnRzXG4gICAgICAgICAgLy8gc28gQGVtb3Rpb24vamVzdCBjYW4gZ3JhYiBga2V5YCBmcm9tIHRoZSAoSlMpRE9NIGZvciBjYWNoZXMgd2l0aG91dCBhbnkgcnVsZXMgaW5zZXJ0ZWQgeWV0XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50LnZhbHVlICsgXCJ7fVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gOiBydWxlc2hlZXQoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQocnVsZSk7XG4gICAgfSldO1xuICAgIHZhciBzZXJpYWxpemVyID0gbWlkZGxld2FyZShvbW5pcHJlc2VudFBsdWdpbnMuY29uY2F0KHN0eWxpc1BsdWdpbnMsIGZpbmFsaXppbmdQbHVnaW5zKSk7XG5cbiAgICB2YXIgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHN0eWxlcykge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZShjb21waWxlKHN0eWxlcyksIHNlcmlhbGl6ZXIpO1xuICAgIH07XG5cbiAgICBfaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHNlbGVjdG9yLCBzZXJpYWxpemVkLCBzaGVldCwgc2hvdWxkQ2FjaGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldCA9IHNoZWV0O1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN1cnJlbnRTaGVldCA9IHtcbiAgICAgICAgICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgICAgICAgICBzaGVldC5pbnNlcnQocnVsZSArIHNlcmlhbGl6ZWQubWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN0eWxpcyhzZWxlY3RvciA/IHNlbGVjdG9yICsgXCJ7XCIgKyBzZXJpYWxpemVkLnN0eWxlcyArIFwifVwiIDogc2VyaWFsaXplZC5zdHlsZXMpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGVldDogbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgc3BlZWR5OiBvcHRpb25zLnNwZWVkeSxcbiAgICAgIHByZXBlbmQ6IG9wdGlvbnMucHJlcGVuZCxcbiAgICAgIGluc2VydGlvblBvaW50OiBvcHRpb25zLmluc2VydGlvblBvaW50XG4gICAgfSksXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgaW5zZXJ0ZWQ6IGluc2VydGVkLFxuICAgIHJlZ2lzdGVyZWQ6IHt9LFxuICAgIGluc2VydDogX2luc2VydFxuICB9O1xuICBjYWNoZS5zaGVldC5oeWRyYXRlKG5vZGVzVG9IeWRyYXRlKTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQ2FjaGUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHtNUywgTU9aLCBXRUJLSVQsIFJVTEVTRVQsIEtFWUZSQU1FUywgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7bWF0Y2gsIGNoYXJhdCwgc3Vic3RyLCBzdHJsZW4sIHNpemVvZiwgcmVwbGFjZSwgY29tYmluZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtjb3B5LCB0b2tlbml6ZX0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5pbXBvcnQge3NlcmlhbGl6ZX0gZnJvbSAnLi9TZXJpYWxpemVyLmpzJ1xuaW1wb3J0IHtwcmVmaXh9IGZyb20gJy4vUHJlZml4ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbltdfSBjb2xsZWN0aW9uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUgKGNvbGxlY3Rpb24pIHtcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjb2xsZWN0aW9uKVxuXG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRcdHZhciBvdXRwdXQgPSAnJ1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRcdG91dHB1dCArPSBjb2xsZWN0aW9uW2ldKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2hlZXQgKGNhbGxiYWNrKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdGlmICghZWxlbWVudC5yb290KVxuXHRcdFx0aWYgKGVsZW1lbnQgPSBlbGVtZW50LnJldHVybilcblx0XHRcdFx0Y2FsbGJhY2soZWxlbWVudClcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ZXIgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0aWYgKGVsZW1lbnQubGVuZ3RoID4gLTEpXG5cdFx0aWYgKCFlbGVtZW50LnJldHVybilcblx0XHRcdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgREVDTEFSQVRJT046IGVsZW1lbnQucmV0dXJuID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoLCBjaGlsZHJlbilcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0Y2FzZSBLRVlGUkFNRVM6XG5cdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7dmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpfSldLCBjYWxsYmFjaylcblx0XHRcdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0XHRcdGlmIChlbGVtZW50Lmxlbmd0aClcblx0XHRcdFx0XHRcdHJldHVybiBjb21iaW5lKGVsZW1lbnQucHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzpyZWFkLW9ubHknOiBjYXNlICc6cmVhZC13cml0ZSc6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHRcdC8vIDpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV19KVxuXHRcdFx0XHRcdFx0XHRcdFx0XSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJydcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVzcGFjZSAoZWxlbWVudCkge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdGVsZW1lbnQucHJvcHMgPSBlbGVtZW50LnByb3BzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIGNvbWJpbmUodG9rZW5pemUodmFsdWUpLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjaGlsZHJlbikge1xuXHRcdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCAwKSkge1xuXHRcdFx0XHRcdFx0Ly8gXFxmXG5cdFx0XHRcdFx0XHRjYXNlIDEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc3Vic3RyKHZhbHVlLCAxLCBzdHJsZW4odmFsdWUpKVxuXHRcdFx0XHRcdFx0Ly8gXFwwICggKyA+IH5cblx0XHRcdFx0XHRcdGNhc2UgMDogY2FzZSA0MDogY2FzZSA0MzogY2FzZSA2MjogY2FzZSAxMjY6XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gOlxuXHRcdFx0XHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0XHRcdFx0aWYgKGNoaWxkcmVuWysraW5kZXhdID09PSAnZ2xvYmFsJylcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbltpbmRleF0gPSAnJywgY2hpbGRyZW5bKytpbmRleF0gPSAnXFxmJyArIHN1YnN0cihjaGlsZHJlbltpbmRleF0sIGluZGV4ID0gMSwgLTEpXG5cdFx0XHRcdFx0XHQvLyBcXHNcblx0XHRcdFx0XHRcdGNhc2UgMzI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6IGVsZW1lbnQgPSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNpemVvZihjaGlsZHJlbikgPiAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgaW5kZXggPSBzaXplb2YoY2hpbGRyZW4pIC0gMTogY2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAyID8gdmFsdWUgKyBlbGVtZW50ICsgZWxlbWVudCA6IHZhbHVlICsgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdH1cbn1cbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBhc3BlY3RSYXRpbzogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgdW5pdGxlc3NLZXlzIGFzIGRlZmF1bHQgfTtcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IHsgbWVtb2l6ZSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgaGFzaFN0cmluZyBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcbnZhciBVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUiA9IFwiWW91IGhhdmUgcGFzc2VkIGluIGZhbHN5IHZhbHVlIGFzIHN0eWxlIG9iamVjdCdzIGtleSAoY2FuIGhhcHBlbiB3aGVuIGluIGV4YW1wbGUgeW91IHBhc3MgdW5leHBvcnRlZCBjb21wb25lbnQgYXMgY29tcHV0ZWQga2V5KS5cIjtcbnZhciBoeXBoZW5hdGVSZWdleCA9IC9bQS1aXXxebXMvZztcbnZhciBhbmltYXRpb25SZWdleCA9IC9fRU1PXyhbXl9dKz8pXyhbXl0qPylfRU1PXy9nO1xuXG52YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IGZ1bmN0aW9uIGlzQ3VzdG9tUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuIHByb3BlcnR5LmNoYXJDb2RlQXQoMSkgPT09IDQ1O1xufTtcblxudmFyIGlzUHJvY2Vzc2FibGVWYWx1ZSA9IGZ1bmN0aW9uIGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJztcbn07XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBpc0N1c3RvbVByb3BlcnR5KHN0eWxlTmFtZSkgPyBzdHlsZU5hbWUgOiBzdHlsZU5hbWUucmVwbGFjZShoeXBoZW5hdGVSZWdleCwgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59KTtcblxudmFyIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IHAxLFxuICAgICAgICAgICAgICBzdHlsZXM6IHAyLFxuICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcDE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfVxuXG4gIGlmICh1bml0bGVzc1trZXldICE9PSAxICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY29udGVudFZhbHVlUGF0dGVybiA9IC8odmFyfGF0dHJ8Y291bnRlcnM/fHVybHxlbGVtZW50fCgoKHJlcGVhdGluZy0pPyhsaW5lYXJ8cmFkaWFsKSl8Y29uaWMpLWdyYWRpZW50KVxcKHwobm8tKT8ob3BlbnxjbG9zZSktcXVvdGUvO1xuICB2YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnaW5pdGlhbCcsICdpbmhlcml0JywgJ3Vuc2V0J107XG4gIHZhciBvbGRQcm9jZXNzU3R5bGVWYWx1ZSA9IHByb2Nlc3NTdHlsZVZhbHVlO1xuICB2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbiAgdmFyIGh5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuICB2YXIgaHlwaGVuYXRlZENhY2hlID0ge307XG5cbiAgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBjb250ZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID09PSAtMSAmJiAhY29udGVudFZhbHVlUGF0dGVybi50ZXN0KHZhbHVlKSAmJiAodmFsdWUuY2hhckF0KDApICE9PSB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgfHwgdmFsdWUuY2hhckF0KDApICE9PSAnXCInICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gXCInXCIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBzZWVtIHRvIGJlIHVzaW5nIGEgdmFsdWUgZm9yICdjb250ZW50JyB3aXRob3V0IHF1b3RlcywgdHJ5IHJlcGxhY2luZyBpdCB3aXRoIGBjb250ZW50OiAnXFxcIlwiICsgdmFsdWUgKyBcIlxcXCInYFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvY2Vzc2VkID0gb2xkUHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSk7XG5cbiAgICBpZiAocHJvY2Vzc2VkICE9PSAnJyAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIGtleS5pbmRleE9mKCctJykgIT09IC0xICYmIGh5cGhlbmF0ZWRDYWNoZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGh5cGhlbmF0ZWRDYWNoZVtrZXldID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVc2luZyBrZWJhYi1jYXNlIGZvciBjc3MgcHJvcGVydGllcyBpbiBvYmplY3RzIGlzIG5vdCBzdXBwb3J0ZWQuIERpZCB5b3UgbWVhbiBcIiArIGtleS5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpLnJlcGxhY2UoaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKHN0ciwgX2NoYXIpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFyLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9KSArIFwiP1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkO1xuICB9O1xufVxuXG52YXIgbm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UgPSAnQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggJyArICdAZW1vdGlvbi9iYWJlbC1wbHVnaW4sIHRoZSBzd2MgRW1vdGlvbiBwbHVnaW4sIG9yIGFub3RoZXIgRW1vdGlvbi1hd2FyZSAnICsgJ2NvbXBpbGVyIHRyYW5zZm9ybS4nO1xuXG5mdW5jdGlvbiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKSB7XG4gIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoaW50ZXJwb2xhdGlvbi5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLnRvU3RyaW5nKCkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3Iobm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlb2YgaW50ZXJwb2xhdGlvbikge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAge1xuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5hbmltID09PSAxKSB7XG4gICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgbmFtZTogaW50ZXJwb2xhdGlvbi5uYW1lLFxuICAgICAgICAgICAgc3R5bGVzOiBpbnRlcnBvbGF0aW9uLnN0eWxlcyxcbiAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGludGVycG9sYXRpb24ubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBpbnRlcnBvbGF0aW9uLm5leHQ7XG5cbiAgICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBub3QgdGhlIG1vc3QgZWZmaWNpZW50IHRoaW5nIGV2ZXIgYnV0IHRoaXMgaXMgYSBwcmV0dHkgcmFyZSBjYXNlXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUgd2lsbCBiZSB2ZXJ5IGZldyBpdGVyYXRpb25zIG9mIHRoaXMgZ2VuZXJhbGx5XG4gICAgICAgICAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXh0Lm5hbWUsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBuZXh0LnN0eWxlcyxcbiAgICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc3R5bGVzID0gaW50ZXJwb2xhdGlvbi5zdHlsZXMgKyBcIjtcIjtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24ubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0eWxlcyArPSBpbnRlcnBvbGF0aW9uLm1hcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICBpZiAobWVyZ2VkUHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBwcmV2aW91c0N1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcyk7XG4gICAgICAgICAgY3Vyc29yID0gcHJldmlvdXNDdXJzb3I7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Z1bmN0aW9ucyB0aGF0IGFyZSBpbnRlcnBvbGF0ZWQgaW4gY3NzIGNhbGxzIHdpbGwgYmUgc3RyaW5naWZpZWQuXFxuJyArICdJZiB5b3Ugd2FudCB0byBoYXZlIGEgY3NzIGNhbGwgYmFzZWQgb24gcHJvcHMsIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNzcyBjYWxsIGxpa2UgdGhpc1xcbicgKyAnbGV0IGR5bmFtaWNTdHlsZSA9IChwcm9wcykgPT4gY3NzYGNvbG9yOiAke3Byb3BzLmNvbG9yfWBcXG4nICsgJ0l0IGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgd2l0aCBwcm9wcyBvciBpbnRlcnBvbGF0ZWQgaW4gYSBzdHlsZWQgY2FsbCBsaWtlIHRoaXNcXG4nICsgXCJsZXQgU29tZUNvbXBvbmVudCA9IHN0eWxlZCgnZGl2JylgJHtkeW5hbWljU3R5bGV9YFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gW107XG4gICAgICAgIHZhciByZXBsYWNlZCA9IGludGVycG9sYXRpb24ucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICB2YXIgZmFrZVZhck5hbWUgPSBcImFuaW1hdGlvblwiICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgICAgbWF0Y2hlZC5wdXNoKFwiY29uc3QgXCIgKyBmYWtlVmFyTmFtZSArIFwiID0ga2V5ZnJhbWVzYFwiICsgcDIucmVwbGFjZSgvXkBrZXlmcmFtZXMgYW5pbWF0aW9uLVxcdysvLCAnJykgKyBcImBcIik7XG4gICAgICAgICAgcmV0dXJuIFwiJHtcIiArIGZha2VWYXJOYW1lICsgXCJ9XCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2BrZXlmcmFtZXNgIG91dHB1dCBnb3QgaW50ZXJwb2xhdGVkIGludG8gcGxhaW4gc3RyaW5nLCBwbGVhc2Ugd3JhcCBpdCB3aXRoIGBjc3NgLlxcblxcbicgKyAnSW5zdGVhZCBvZiBkb2luZyB0aGlzOlxcblxcbicgKyBbXS5jb25jYXQobWF0Y2hlZCwgW1wiYFwiICsgcmVwbGFjZWQgKyBcImBcIl0pLmpvaW4oJ1xcbicpICsgJ1xcblxcbllvdSBzaG91bGQgd3JhcCBpdCB3aXRoIGBjc3NgIGxpa2UgdGhpczpcXG5cXG4nICsgKFwiY3NzYFwiICsgcmVwbGFjZWQgKyBcImBcIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICB9IC8vIGZpbmFsaXplIHN0cmluZyB2YWx1ZXMgKHJlZ3VsYXIgc3RyaW5ncyBhbmQgZnVuY3Rpb25zIGludGVycG9sYXRlZCBpbnRvIGNzcyBjYWxscylcblxuXG4gIGlmIChyZWdpc3RlcmVkID09IG51bGwpIHtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHZhciBjYWNoZWQgPSByZWdpc3RlcmVkW2ludGVycG9sYXRpb25dO1xuICByZXR1cm4gY2FjaGVkICE9PSB1bmRlZmluZWQgPyBjYWNoZWQgOiBpbnRlcnBvbGF0aW9uO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmopIHtcbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9ialtpXSkgKyBcIjtcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtfa2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWQgIT0gbnVsbCAmJiByZWdpc3RlcmVkW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIHJlZ2lzdGVyZWRbdmFsdWVdICsgXCJ9XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9rZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iobm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ3N0cmluZycgJiYgKHJlZ2lzdGVyZWQgPT0gbnVsbCB8fCByZWdpc3RlcmVkW3ZhbHVlWzBdXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2YWx1ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWVbX2ldKSkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWVbX2ldKSArIFwiO1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW50ZXJwb2xhdGVkID0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgdmFsdWUpO1xuXG4gICAgICAgICAgc3dpdGNoIChfa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgaW50ZXJwb2xhdGVkICsgXCI7XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIF9rZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgaW50ZXJwb2xhdGVkICsgXCJ9XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nO1xufVxuXG52YXIgbGFiZWxQYXR0ZXJuID0gL2xhYmVsOlxccyooW15cXHM7XFxue10rKVxccyooO3wkKS9nO1xudmFyIHNvdXJjZU1hcFBhdHRlcm47XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHNvdXJjZU1hcFBhdHRlcm4gPSAvXFwvXFwqI1xcc3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247XFxTK1xccytcXCpcXC8vZztcbn0gLy8gdGhpcyBpcyB0aGUgY3Vyc29yIGZvciBrZXlmcmFtZXNcbi8vIGtleWZyYW1lcyBhcmUgc3RvcmVkIG9uIHRoZSBTZXJpYWxpemVkU3R5bGVzIG9iamVjdCBhcyBhIGxpbmtlZCBsaXN0XG5cblxudmFyIGN1cnNvcjtcbnZhciBzZXJpYWxpemVTdHlsZXMgPSBmdW5jdGlvbiBzZXJpYWxpemVTdHlsZXMoYXJncywgcmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmdzWzBdID09PSAnb2JqZWN0JyAmJiBhcmdzWzBdICE9PSBudWxsICYmIGFyZ3NbMF0uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYXJnc1swXTtcbiAgfVxuXG4gIHZhciBzdHJpbmdNb2RlID0gdHJ1ZTtcbiAgdmFyIHN0eWxlcyA9ICcnO1xuICBjdXJzb3IgPSB1bmRlZmluZWQ7XG4gIHZhciBzdHJpbmdzID0gYXJnc1swXTtcblxuICBpZiAoc3RyaW5ncyA9PSBudWxsIHx8IHN0cmluZ3MucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHJpbmdNb2RlID0gZmFsc2U7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHN0cmluZ3MpO1xuICB9IGVsc2Uge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgfVxuXG4gICAgc3R5bGVzICs9IHN0cmluZ3NbMF07XG4gIH0gLy8gd2Ugc3RhcnQgYXQgMSBzaW5jZSB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIGZpcnN0IGFyZ1xuXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGFyZ3NbaV0pO1xuXG4gICAgaWYgKHN0cmluZ01vZGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzICs9IHN0cmluZ3NbaV07XG4gICAgfVxuICB9XG5cbiAgdmFyIHNvdXJjZU1hcDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHN0eWxlcyA9IHN0eWxlcy5yZXBsYWNlKHNvdXJjZU1hcFBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgc291cmNlTWFwID0gbWF0Y2g7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gIH0gLy8gdXNpbmcgYSBnbG9iYWwgcmVnZXggd2l0aCAuZXhlYyBpcyBzdGF0ZWZ1bCBzbyBsYXN0SW5kZXggaGFzIHRvIGJlIHJlc2V0IGVhY2ggdGltZVxuXG5cbiAgbGFiZWxQYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuICB2YXIgbWF0Y2g7IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWI4MDljMmNmMjk0OTgwMGEwZjYxZmI1XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxhYmVsUGF0dGVybi5leGVjKHN0eWxlcykpICE9PSBudWxsKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gJy0nICsgLy8gJEZsb3dGaXhNZSB3ZSBrbm93IGl0J3Mgbm90IG51bGxcbiAgICBtYXRjaFsxXTtcbiAgfVxuXG4gIHZhciBuYW1lID0gaGFzaFN0cmluZyhzdHlsZXMpICsgaWRlbnRpZmllck5hbWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFNlcmlhbGl6ZWRTdHlsZXMgdHlwZSBkb2Vzbid0IGhhdmUgdG9TdHJpbmcgcHJvcGVydHkgKGFuZCB3ZSBkb24ndCB3YW50IHRvIGFkZCBpdClcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgbWFwOiBzb3VyY2VNYXAsXG4gICAgICBuZXh0OiBjdXJzb3IsXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIllvdSBoYXZlIHRyaWVkIHRvIHN0cmluZ2lmeSBvYmplY3QgcmV0dXJuZWQgZnJvbSBgY3NzYCBmdW5jdGlvbi4gSXQgaXNuJ3Qgc3VwcG9zZWQgdG8gYmUgdXNlZCBkaXJlY3RseSAoZS5nLiBhcyB2YWx1ZSBvZiB0aGUgYGNsYXNzTmFtZWAgcHJvcCksIGJ1dCByYXRoZXIgaGFuZGVkIHRvIGVtb3Rpb24gc28gaXQgY2FuIGhhbmRsZSBpdCAoZS5nLiBhcyB2YWx1ZSBvZiBgY3NzYCBwcm9wKS5cIjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogc3R5bGVzLFxuICAgIG5leHQ6IGN1cnNvclxuICB9O1xufTtcblxuZXhwb3J0IHsgc2VyaWFsaXplU3R5bGVzIH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWFwcGxlYnkvc21oYXNoZXIvYmxvYi82MWEwNTMwZjI4Mjc3ZjJlODUwYmZjMzk2MDBjZTYxZDAyYjUxOGRlL3NyYy9NdXJtdXJIYXNoMi5jcHAjTDM3LUw4NlxuZnVuY3Rpb24gbXVybXVyMihzdHIpIHtcbiAgLy8gJ20nIGFuZCAncicgYXJlIG1peGluZyBjb25zdGFudHMgZ2VuZXJhdGVkIG9mZmxpbmUuXG4gIC8vIFRoZXkncmUgbm90IHJlYWxseSAnbWFnaWMnLCB0aGV5IGp1c3QgaGFwcGVuIHRvIHdvcmsgd2VsbC5cbiAgLy8gY29uc3QgbSA9IDB4NWJkMWU5OTU7XG4gIC8vIGNvbnN0IHIgPSAyNDtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGFzaFxuICB2YXIgaCA9IDA7IC8vIE1peCA0IGJ5dGVzIGF0IGEgdGltZSBpbnRvIHRoZSBoYXNoXG5cbiAgdmFyIGssXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgZm9yICg7IGxlbiA+PSA0OyArK2ksIGxlbiAtPSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICAgIGsgXj1cbiAgICAvKiBrID4+PiByOiAqL1xuICAgIGsgPj4+IDI0O1xuICAgIGggPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpIF5cbiAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBIYW5kbGUgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZSBpbnB1dCBhcnJheVxuXG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPVxuICAgICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBEbyBhIGZldyBmaW5hbCBtaXhlcyBvZiB0aGUgaGFzaCB0byBlbnN1cmUgdGhlIGxhc3QgZmV3XG4gIC8vIGJ5dGVzIGFyZSB3ZWxsLWluY29ycG9yYXRlZC5cblxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPVxuICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIHJldHVybiAoKGggXiBoID4+PiAxNSkgPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IHsgbXVybXVyMiBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnZhciBzeW5jRmFsbGJhY2sgPSBmdW5jdGlvbiBzeW5jRmFsbGJhY2soY3JlYXRlKSB7XG4gIHJldHVybiBjcmVhdGUoKTtcbn07XG5cbnZhciB1c2VJbnNlcnRpb25FZmZlY3QgPSBSZWFjdFsndXNlSW5zZXJ0aW9uJyArICdFZmZlY3QnXSA/IFJlYWN0Wyd1c2VJbnNlcnRpb24nICsgJ0VmZmVjdCddIDogZmFsc2U7XG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayA9IHVzZUluc2VydGlvbkVmZmVjdCB8fCBzeW5jRmFsbGJhY2s7XG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrID0gdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcblxuZXhwb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjaywgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrIH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3ZWFrTWVtb2l6ZSBmcm9tICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJy4uL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCByZWdpc3RlclN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciBpc0Jyb3dzZXIgPSBcIm9iamVjdFwiICE9PSAndW5kZWZpbmVkJztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG52YXIgRW1vdGlvbkNhY2hlQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL1JlYWN0LmNyZWF0ZUNvbnRleHQoIC8vIHdlJ3JlIGRvaW5nIHRoaXMgdG8gYXZvaWQgcHJlY29uc3RydWN0J3MgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGluIHRoaXMgb25lIGNhc2Vcbi8vIGJlY2F1c2UgdGhpcyBtb2R1bGUgaXMgcHJpbWFyaWx5IGludGVuZGVkIGZvciB0aGUgYnJvd3NlciBhbmQgbm9kZVxuLy8gYnV0IGl0J3MgYWxzbyByZXF1aXJlZCBpbiByZWFjdCBuYXRpdmUgYW5kIHNpbWlsYXIgZW52aXJvbm1lbnRzIHNvbWV0aW1lc1xuLy8gYW5kIHdlIGNvdWxkIGhhdmUgYSBzcGVjaWFsIGJ1aWxkIGp1c3QgZm9yIHRoYXRcbi8vIGJ1dCB0aGlzIGlzIG11Y2ggZWFzaWVyIGFuZCB0aGUgbmF0aXZlIHBhY2thZ2VzXG4vLyBtaWdodCB1c2UgYSBkaWZmZXJlbnQgdGhlbWUgY29udGV4dCBpbiB0aGUgZnV0dXJlIGFueXdheVxudHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNhY2hlKHtcbiAga2V5OiAnY3NzJ1xufSkgOiBudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRW1vdGlvbkNhY2hlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ2FjaGVDb250ZXh0Jztcbn1cblxudmFyIENhY2hlUHJvdmlkZXIgPSBFbW90aW9uQ2FjaGVDb250ZXh0LlByb3ZpZGVyO1xudmFyIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHVzZUVtb3Rpb25DYWNoZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoRW1vdGlvbkNhY2hlQ29udGV4dCk7XG59O1xuXG52YXIgd2l0aEVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHdpdGhFbW90aW9uQ2FjaGUoZnVuYykge1xuICAvLyAkRmxvd0ZpeE1lXG4gIHJldHVybiAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIC8vIHRoZSBjYWNoZSB3aWxsIG5ldmVyIGJlIG51bGwgaW4gdGhlIGJyb3dzZXJcbiAgICB2YXIgY2FjaGUgPSB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xuICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSwgcmVmKTtcbiAgfSk7XG59O1xuXG5pZiAoIWlzQnJvd3Nlcikge1xuICB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgdmFyIGNhY2hlID0gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcblxuICAgICAgaWYgKGNhY2hlID09PSBudWxsKSB7XG4gICAgICAgIC8vIHllcywgd2UncmUgcG90ZW50aWFsbHkgY3JlYXRpbmcgdGhpcyBvbiBldmVyeSByZW5kZXJcbiAgICAgICAgLy8gaXQgZG9lc24ndCBhY3R1YWxseSBtYXR0ZXIgdGhvdWdoIHNpbmNlIGl0J3Mgb25seSBvbiB0aGUgc2VydmVyXG4gICAgICAgIC8vIHNvIHRoZXJlIHdpbGwgb25seSBldmVyeSBiZSBhIHNpbmdsZSByZW5kZXJcbiAgICAgICAgLy8gdGhhdCBjb3VsZCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSBiZWNhdXNlIG9mIHN1c3BlbnNlIGFuZCBldGMuIGJ1dCBmb3Igbm93LFxuICAgICAgICAvLyB0aGlzIHdvcmtzIGFuZCBpIGRvbid0IHdhbnQgdG8gb3B0aW1pc2UgZm9yIGEgZnV0dXJlIHRoaW5nIHRoYXQgd2UgYXJlbid0IHN1cmUgYWJvdXRcbiAgICAgICAgY2FjaGUgPSBjcmVhdGVDYWNoZSh7XG4gICAgICAgICAga2V5OiAnY3NzJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgICB2YWx1ZTogY2FjaGVcbiAgICAgICAgfSwgZnVuYyhwcm9wcywgY2FjaGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIFRoZW1lQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvblRoZW1lQ29udGV4dCc7XG59XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gLyogI19fUFVSRV9fICovd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICB0aGVtZSA9IGNyZWF0ZUNhY2hlV2l0aFRoZW1lKHRoZW1lKShwcm9wcy50aGVtZSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihyZW5kZXIpO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGdldExhc3RQYXJ0ID0gZnVuY3Rpb24gZ2V0TGFzdFBhcnQoZnVuY3Rpb25OYW1lKSB7XG4gIC8vIFRoZSBtYXRjaCBtYXkgYmUgc29tZXRoaW5nIGxpa2UgJ09iamVjdC5jcmVhdGVFbW90aW9uUHJvcHMnIG9yXG4gIC8vICdMb2FkZXIucHJvdG90eXBlLnJlbmRlcidcbiAgdmFyIHBhcnRzID0gZnVuY3Rpb25OYW1lLnNwbGl0KCcuJyk7XG4gIHJldHVybiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbn07XG5cbnZhciBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUgPSBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZSkge1xuICAvLyBWOFxuICB2YXIgbWF0Y2ggPSAvXlxccythdFxccysoW0EtWmEtejAtOSQuXSspXFxzLy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2gpIHJldHVybiBnZXRMYXN0UGFydChtYXRjaFsxXSk7IC8vIFNhZmFyaSAvIEZpcmVmb3hcblxuICBtYXRjaCA9IC9eKFtBLVphLXowLTkkLl0rKUAvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIGdldExhc3RQYXJ0KG1hdGNoWzFdKTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciBpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcyA9IC8qICNfX1BVUkVfXyAqL25ldyBTZXQoWydyZW5kZXJXaXRoSG9va3MnLCAncHJvY2Vzc0NoaWxkJywgJ2ZpbmlzaENsYXNzQ29tcG9uZW50JywgJ3JlbmRlclRvU3RyaW5nJ10pOyAvLyBUaGVzZSBpZGVudGlmaWVycyBjb21lIGZyb20gZXJyb3Igc3RhY2tzLCBzbyB0aGV5IGhhdmUgdG8gYmUgdmFsaWQgSlNcbi8vIGlkZW50aWZpZXJzLCB0aHVzIHdlIG9ubHkgbmVlZCB0byByZXBsYWNlIHdoYXQgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgZm9yIEpTLFxuLy8gYnV0IG5vdCBmb3IgQ1NTLlxuXG52YXIgc2FuaXRpemVJZGVudGlmaWVyID0gZnVuY3Rpb24gc2FuaXRpemVJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGlkZW50aWZpZXIucmVwbGFjZSgvXFwkL2csICctJyk7XG59O1xuXG52YXIgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSA9IGZ1bmN0aW9uIGdldExhYmVsRnJvbVN0YWNrVHJhY2Uoc3RhY2tUcmFjZSkge1xuICBpZiAoIXN0YWNrVHJhY2UpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBsaW5lcyA9IHN0YWNrVHJhY2Uuc3BsaXQoJ1xcbicpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lKGxpbmVzW2ldKTsgLy8gVGhlIGZpcnN0IGxpbmUgb2YgVjggc3RhY2sgdHJhY2VzIGlzIGp1c3QgXCJFcnJvclwiXG5cbiAgICBpZiAoIWZ1bmN0aW9uTmFtZSkgY29udGludWU7IC8vIElmIHdlIHJlYWNoIG9uZSBvZiB0aGVzZSwgd2UgaGF2ZSBnb25lIHRvbyBmYXIgYW5kIHNob3VsZCBxdWl0XG5cbiAgICBpZiAoaW50ZXJuYWxSZWFjdEZ1bmN0aW9uTmFtZXMuaGFzKGZ1bmN0aW9uTmFtZSkpIGJyZWFrOyAvLyBUaGUgY29tcG9uZW50IG5hbWUgaXMgdGhlIGZpcnN0IGZ1bmN0aW9uIGluIHRoZSBzdGFjayB0aGF0IHN0YXJ0cyB3aXRoIGFuXG4gICAgLy8gdXBwZXJjYXNlIGxldHRlclxuXG4gICAgaWYgKC9eW0EtWl0vLnRlc3QoZnVuY3Rpb25OYW1lKSkgcmV0dXJuIHNhbml0aXplSWRlbnRpZmllcihmdW5jdGlvbk5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciB0eXBlUHJvcE5hbWUgPSAnX19FTU9USU9OX1RZUEVfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgbGFiZWxQcm9wTmFtZSA9ICdfX0VNT1RJT05fTEFCRUxfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgY3JlYXRlRW1vdGlvblByb3BzID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBwcm9wcy5jc3MgPT09ICdzdHJpbmcnICYmIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgY3NzIGRlY2xhcmF0aW9uXG4gIHByb3BzLmNzcy5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5ncyBhcmUgbm90IGFsbG93ZWQgYXMgY3NzIHByb3AgdmFsdWVzLCBwbGVhc2Ugd3JhcCBpdCBpbiBhIGNzcyB0ZW1wbGF0ZSBsaXRlcmFsIGZyb20gJ0BlbW90aW9uL3JlYWN0JyBsaWtlIHRoaXM6IGNzc2BcIiArIHByb3BzLmNzcyArIFwiYFwiKTtcbiAgfVxuXG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wc1t0eXBlUHJvcE5hbWVdID0gdHlwZTsgLy8gRm9yIHBlcmZvcm1hbmNlLCBvbmx5IGNhbGwgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSBpbiBkZXZlbG9wbWVudCBhbmQgd2hlblxuICAvLyB0aGUgbGFiZWwgaGFzbid0IGFscmVhZHkgYmVlbiBjb21wdXRlZFxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEhcHJvcHMuY3NzICYmICh0eXBlb2YgcHJvcHMuY3NzICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgcHJvcHMuY3NzLm5hbWUgIT09ICdzdHJpbmcnIHx8IHByb3BzLmNzcy5uYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpKSB7XG4gICAgdmFyIGxhYmVsID0gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgaWYgKGxhYmVsKSBuZXdQcm9wc1tsYWJlbFByb3BOYW1lXSA9IGxhYmVsO1xuICB9XG5cbiAgcmV0dXJuIG5ld1Byb3BzO1xufTtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIEVtb3Rpb24gPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHByb3BzLmNzczsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIFdyYXBwZWRDb21wb25lbnQgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgdW5kZWZpbmVkLCBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgdmFyIGxhYmVsRnJvbVN0YWNrID0gcHJvcHNbbGFiZWxQcm9wTmFtZV07XG5cbiAgICBpZiAobGFiZWxGcm9tU3RhY2spIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3NlcmlhbGl6ZWQsICdsYWJlbDonICsgbGFiZWxGcm9tU3RhY2sgKyAnOyddKTtcbiAgICB9XG4gIH1cblxuICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpICYmIGtleSAhPT0gJ2NzcycgJiYga2V5ICE9PSB0eXBlUHJvcE5hbWUgJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgfHwga2V5ICE9PSBsYWJlbFByb3BOYW1lKSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHMucmVmID0gcmVmO1xuICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgY2FjaGU6IGNhY2hlLFxuICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgaXNTdHJpbmdUYWc6IHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09PSAnc3RyaW5nJ1xuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgbmV3UHJvcHMpKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25Dc3NQcm9wSW50ZXJuYWwnO1xufVxuXG52YXIgRW1vdGlvbiQxID0gRW1vdGlvbjtcblxuZXhwb3J0IHsgQ2FjaGVQcm92aWRlciBhcyBDLCBFbW90aW9uJDEgYXMgRSwgVGhlbWVDb250ZXh0IGFzIFQsIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSBhcyBfLCBUaGVtZVByb3ZpZGVyIGFzIGEsIHdpdGhUaGVtZSBhcyBiLCBjcmVhdGVFbW90aW9uUHJvcHMgYXMgYywgaGFzT3duUHJvcGVydHkgYXMgaCwgaXNCcm93c2VyIGFzIGksIHVzZVRoZW1lIGFzIHUsIHdpdGhFbW90aW9uQ2FjaGUgYXMgdyB9O1xuIiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUaGVtZUNvbnRleHQgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gbnVsbCkge1xuICBjb25zdCBjb250ZXh0VGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gIHJldHVybiAhY29udGV4dFRoZW1lIHx8IGlzT2JqZWN0RW1wdHkoY29udGV4dFRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IGNvbnRleHRUaGVtZTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVGhlbWVQcm92aWRlciBhcyBNdWlUaGVtZVByb3ZpZGVyLCB1c2VUaGVtZSBhcyB1c2VQcml2YXRlVGhlbWUgfSBmcm9tICdAbXVpL3ByaXZhdGUtdGhlbWluZyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IFRoZW1lQ29udGV4dCBhcyBTdHlsZWRFbmdpbmVUaGVtZUNvbnRleHQgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHVzZVRoZW1lV2l0aG91dERlZmF1bHQgZnJvbSAnLi4vdXNlVGhlbWVXaXRob3V0RGVmYXVsdCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgRU1QVFlfVEhFTUUgPSB7fTtcbmZ1bmN0aW9uIHVzZVRoZW1lU2NvcGluZyh0aGVtZUlkLCB1cHBlclRoZW1lLCBsb2NhbFRoZW1lLCBpc1ByaXZhdGUgPSBmYWxzZSkge1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZWRUaGVtZSA9IHRoZW1lSWQgPyB1cHBlclRoZW1lW3RoZW1lSWRdIHx8IHVwcGVyVGhlbWUgOiB1cHBlclRoZW1lO1xuICAgIGlmICh0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3QgbWVyZ2VkVGhlbWUgPSBsb2NhbFRoZW1lKHJlc29sdmVkVGhlbWUpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdGhlbWVJZCA/IF9leHRlbmRzKHt9LCB1cHBlclRoZW1lLCB7XG4gICAgICAgIFt0aGVtZUlkXTogbWVyZ2VkVGhlbWVcbiAgICAgIH0pIDogbWVyZ2VkVGhlbWU7XG4gICAgICAvLyBtdXN0IHJldHVybiBhIGZ1bmN0aW9uIGZvciB0aGUgcHJpdmF0ZSB0aGVtZSB0byBOT1QgbWVyZ2Ugd2l0aCB0aGUgdXBwZXIgdGhlbWUuXG4gICAgICAvLyBzZWUgdGhlIHRlc3QgY2FzZSBcInVzZSBwcm92aWRlZCB0aGVtZSBmcm9tIGEgY2FsbGJhY2tcIiBpbiBUaGVtZVByb3ZpZGVyLnRlc3QuanNcbiAgICAgIGlmIChpc1ByaXZhdGUpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiB0aGVtZUlkID8gX2V4dGVuZHMoe30sIHVwcGVyVGhlbWUsIHtcbiAgICAgIFt0aGVtZUlkXTogbG9jYWxUaGVtZVxuICAgIH0pIDogX2V4dGVuZHMoe30sIHVwcGVyVGhlbWUsIGxvY2FsVGhlbWUpO1xuICB9LCBbdGhlbWVJZCwgdXBwZXJUaGVtZSwgbG9jYWxUaGVtZSwgaXNQcml2YXRlXSk7XG59XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgbWFrZXMgdGhlIGB0aGVtZWAgYXZhaWxhYmxlIGRvd24gdGhlIFJlYWN0IHRyZWUuXG4gKiBJdCBzaG91bGQgcHJlZmVyYWJseSBiZSB1c2VkIGF0ICoqdGhlIHJvb3Qgb2YgeW91ciBjb21wb25lbnQgdHJlZSoqLlxuICpcbiAqIDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0+IC8vIGV4aXN0aW5nIHVzZSBjYXNlXG4gKiA8VGhlbWVQcm92aWRlciB0aGVtZT17eyBpZDogdGhlbWUgfX0+IC8vIHRoZW1lIHNjb3BpbmdcbiAqL1xuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgdGhlbWU6IGxvY2FsVGhlbWUsXG4gICAgdGhlbWVJZFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHVwcGVyVGhlbWUgPSB1c2VUaGVtZVdpdGhvdXREZWZhdWx0KEVNUFRZX1RIRU1FKTtcbiAgY29uc3QgdXBwZXJQcml2YXRlVGhlbWUgPSB1c2VQcml2YXRlVGhlbWUoKSB8fCBFTVBUWV9USEVNRTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodXBwZXJUaGVtZSA9PT0gbnVsbCAmJiB0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0aGVtZUlkICYmIHVwcGVyVGhlbWUgJiYgIXVwcGVyVGhlbWVbdGhlbWVJZF0gJiYgdHlwZW9mIGxvY2FsVGhlbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBhcmUgcHJvdmlkaW5nIGEgdGhlbWUgZnVuY3Rpb24gcHJvcCB0byB0aGUgVGhlbWVQcm92aWRlciBjb21wb25lbnQ6JywgJzxUaGVtZVByb3ZpZGVyIHRoZW1lPXtvdXRlclRoZW1lID0+IG91dGVyVGhlbWV9IC8+JywgJycsICdIb3dldmVyLCBubyBvdXRlciB0aGVtZSBpcyBwcmVzZW50LicsICdNYWtlIHN1cmUgYSB0aGVtZSBpcyBhbHJlYWR5IGluamVjdGVkIGhpZ2hlciBpbiB0aGUgUmVhY3QgdHJlZSAnICsgJ29yIHByb3ZpZGUgYSB0aGVtZSBvYmplY3QuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuICBjb25zdCBlbmdpbmVUaGVtZSA9IHVzZVRoZW1lU2NvcGluZyh0aGVtZUlkLCB1cHBlclRoZW1lLCBsb2NhbFRoZW1lKTtcbiAgY29uc3QgcHJpdmF0ZVRoZW1lID0gdXNlVGhlbWVTY29waW5nKHRoZW1lSWQsIHVwcGVyUHJpdmF0ZVRoZW1lLCBsb2NhbFRoZW1lLCB0cnVlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE11aVRoZW1lUHJvdmlkZXIsIHtcbiAgICB0aGVtZTogcHJpdmF0ZVRoZW1lLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChTdHlsZWRFbmdpbmVUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBlbmdpbmVUaGVtZSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGhlbWVQcm92aWRlci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQSB0aGVtZSBvYmplY3QuIFlvdSBjYW4gcHJvdmlkZSBhIGZ1bmN0aW9uIHRvIGV4dGVuZCB0aGUgb3V0ZXIgdGhlbWUuXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIGRlc2lnbiBzeXN0ZW0ncyB1bmlxdWUgaWQgZm9yIGdldHRpbmcgdGhlIGNvcnJlc3BvbmRlZCB0aGVtZSB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBkZXNpZ24gc3lzdGVtcy5cbiAgICovXG4gIHRoZW1lSWQ6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChUaGVtZVByb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0ICckJG1hdGVyaWFsJzsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ0aGVtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIGFzIFN5c3RlbVRoZW1lUHJvdmlkZXIgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgVEhFTUVfSUQgZnJvbSAnLi9pZGVudGlmaWVyJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUaGVtZVByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICAgIHRoZW1lOiB0aGVtZUlucHV0XG4gICAgfSA9IF9yZWYsXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQpO1xuICBjb25zdCBzY29wZWRUaGVtZSA9IHRoZW1lSW5wdXRbVEhFTUVfSURdO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3lzdGVtVGhlbWVQcm92aWRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgdGhlbWVJZDogc2NvcGVkVGhlbWUgPyBUSEVNRV9JRCA6IHVuZGVmaW5lZCxcbiAgICB0aGVtZTogc2NvcGVkVGhlbWUgfHwgdGhlbWVJbnB1dFxuICB9KSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBBIHRoZW1lIG9iamVjdC4gWW91IGNhbiBwcm92aWRlIGEgZnVuY3Rpb24gdG8gZXh0ZW5kIHRoZSBvdXRlciB0aGVtZS5cbiAgICovXG4gIHRoZW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7IiwiZnVuY3Rpb24gcihlKXt2YXIgdCxmLG49XCJcIjtpZihcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGUpbis9ZTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdJiYoZj1yKGVbdF0pKSYmKG4mJihuKz1cIiBcIiksbis9Zik7ZWxzZSBmb3IodCBpbiBlKWVbdF0mJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBmdW5jdGlvbiBjbHN4KCl7Zm9yKHZhciBlLHQsZj0wLG49XCJcIjtmPGFyZ3VtZW50cy5sZW5ndGg7KShlPWFyZ3VtZW50c1tmKytdKSYmKHQ9cihlKSkmJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBkZWZhdWx0IGNsc3g7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG4vKipcbiAqIEFkZCBrZXlzLCB2YWx1ZXMgb2YgYGRlZmF1bHRQcm9wc2AgdGhhdCBkb2VzIG5vdCBleGlzdCBpbiBgcHJvcHNgXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdFByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHJlc29sdmVkIHByb3BzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wcyhkZWZhdWx0UHJvcHMsIHByb3BzKSB7XG4gIGNvbnN0IG91dHB1dCA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gIE9iamVjdC5rZXlzKGRlZmF1bHRQcm9wcykuZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgaWYgKHByb3BOYW1lLnRvU3RyaW5nKCkubWF0Y2goL14oY29tcG9uZW50c3xzbG90cykkLykpIHtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFByb3BzW3Byb3BOYW1lXSwgb3V0cHV0W3Byb3BOYW1lXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wTmFtZS50b1N0cmluZygpLm1hdGNoKC9eKGNvbXBvbmVudHNQcm9wc3xzbG90UHJvcHMpJC8pKSB7XG4gICAgICBjb25zdCBkZWZhdWx0U2xvdFByb3BzID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXSB8fCB7fTtcbiAgICAgIGNvbnN0IHNsb3RQcm9wcyA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSB7fTtcbiAgICAgIGlmICghc2xvdFByb3BzIHx8ICFPYmplY3Qua2V5cyhzbG90UHJvcHMpKSB7XG4gICAgICAgIC8vIFJlZHVjZSB0aGUgaXRlcmF0aW9uIGlmIHRoZSBzbG90IHByb3BzIGlzIGVtcHR5XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0U2xvdFByb3BzO1xuICAgICAgfSBlbHNlIGlmICghZGVmYXVsdFNsb3RQcm9wcyB8fCAhT2JqZWN0LmtleXMoZGVmYXVsdFNsb3RQcm9wcykpIHtcbiAgICAgICAgLy8gUmVkdWNlIHRoZSBpdGVyYXRpb24gaWYgdGhlIGRlZmF1bHQgc2xvdCBwcm9wcyBpcyBlbXB0eVxuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gc2xvdFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IF9leHRlbmRzKHt9LCBzbG90UHJvcHMpO1xuICAgICAgICBPYmplY3Qua2V5cyhkZWZhdWx0U2xvdFByb3BzKS5mb3JFYWNoKHNsb3RQcm9wTmFtZSA9PiB7XG4gICAgICAgICAgb3V0cHV0W3Byb3BOYW1lXVtzbG90UHJvcE5hbWVdID0gcmVzb2x2ZVByb3BzKGRlZmF1bHRTbG90UHJvcHNbc2xvdFByb3BOYW1lXSwgc2xvdFByb3BzW3Nsb3RQcm9wTmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG91dHB1dFtwcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VXRpbGl0eUNsYXNzLCBjbGFzc2VzID0gdW5kZWZpbmVkKSB7XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhzbG90cykuZm9yRWFjaChcbiAgLy8gYE9iamVjdC5rZXlzKHNsb3RzKWAgY2FuJ3QgYmUgd2lkZXIgdGhhbiBgVGAgYmVjYXVzZSB3ZSBpbmZlciBgVGAgZnJvbSBgc2xvdHNgLlxuICAvLyBAdHMtZXhwZWN0LWVycm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzEyMjUzI2lzc3VlY29tbWVudC0yNjMxMzIyMDhcbiAgc2xvdCA9PiB7XG4gICAgb3V0cHV0W3Nsb3RdID0gc2xvdHNbc2xvdF0ucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICBjb25zdCB1dGlsaXR5Q2xhc3MgPSBnZXRVdGlsaXR5Q2xhc3Moa2V5KTtcbiAgICAgICAgaWYgKHV0aWxpdHlDbGFzcyAhPT0gJycpIHtcbiAgICAgICAgICBhY2MucHVzaCh1dGlsaXR5Q2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGFzc2VzICYmIGNsYXNzZXNba2V5XSkge1xuICAgICAgICAgIGFjYy5wdXNoKGNsYXNzZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pLmpvaW4oJyAnKTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhYmJyfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRvd25sb2FkfGRyYWdnYWJsZXxlbmNUeXBlfGVudGVyS2V5SGludHxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHRyYW5zbGF0ZXx0eXBlfHVzZU1hcHx2YWx1ZXx3aWR0aHx3bW9kZXx3cmFwfGFib3V0fGRhdGF0eXBlfGlubGlzdHxwcmVmaXh8cHJvcGVydHl8cmVzb3VyY2V8dHlwZW9mfHZvY2FifGF1dG9DYXBpdGFsaXplfGF1dG9Db3JyZWN0fGF1dG9TYXZlfGNvbG9yfGluY3JlbWVudGFsfGZhbGxiYWNrfGluZXJ0fGl0ZW1Qcm9wfGl0ZW1TY29wZXxpdGVtVHlwZXxpdGVtSUR8aXRlbVJlZnxvbnxvcHRpb258cmVzdWx0c3xzZWN1cml0eXx1bnNlbGVjdGFibGV8YWNjZW50SGVpZ2h0fGFjY3VtdWxhdGV8YWRkaXRpdmV8YWxpZ25tZW50QmFzZWxpbmV8YWxsb3dSZW9yZGVyfGFscGhhYmV0aWN8YW1wbGl0dWRlfGFyYWJpY0Zvcm18YXNjZW50fGF0dHJpYnV0ZU5hbWV8YXR0cmlidXRlVHlwZXxhdXRvUmV2ZXJzZXxhemltdXRofGJhc2VGcmVxdWVuY3l8YmFzZWxpbmVTaGlmdHxiYXNlUHJvZmlsZXxiYm94fGJlZ2lufGJpYXN8Ynl8Y2FsY01vZGV8Y2FwSGVpZ2h0fGNsaXB8Y2xpcFBhdGhVbml0c3xjbGlwUGF0aHxjbGlwUnVsZXxjb2xvckludGVycG9sYXRpb258Y29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc3xjb2xvclByb2ZpbGV8Y29sb3JSZW5kZXJpbmd8Y29udGVudFNjcmlwdFR5cGV8Y29udGVudFN0eWxlVHlwZXxjdXJzb3J8Y3h8Y3l8ZHxkZWNlbGVyYXRlfGRlc2NlbnR8ZGlmZnVzZUNvbnN0YW50fGRpcmVjdGlvbnxkaXNwbGF5fGRpdmlzb3J8ZG9taW5hbnRCYXNlbGluZXxkdXJ8ZHh8ZHl8ZWRnZU1vZGV8ZWxldmF0aW9ufGVuYWJsZUJhY2tncm91bmR8ZW5kfGV4cG9uZW50fGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWR8ZmlsbHxmaWxsT3BhY2l0eXxmaWxsUnVsZXxmaWx0ZXJ8ZmlsdGVyUmVzfGZpbHRlclVuaXRzfGZsb29kQ29sb3J8Zmxvb2RPcGFjaXR5fGZvY3VzYWJsZXxmb250RmFtaWx5fGZvbnRTaXplfGZvbnRTaXplQWRqdXN0fGZvbnRTdHJldGNofGZvbnRTdHlsZXxmb250VmFyaWFudHxmb250V2VpZ2h0fGZvcm1hdHxmcm9tfGZyfGZ4fGZ5fGcxfGcyfGdseXBoTmFtZXxnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbHxnbHlwaE9yaWVudGF0aW9uVmVydGljYWx8Z2x5cGhSZWZ8Z3JhZGllbnRUcmFuc2Zvcm18Z3JhZGllbnRVbml0c3xoYW5naW5nfGhvcml6QWR2WHxob3Jpek9yaWdpblh8aWRlb2dyYXBoaWN8aW1hZ2VSZW5kZXJpbmd8aW58aW4yfGludGVyY2VwdHxrfGsxfGsyfGszfGs0fGtlcm5lbE1hdHJpeHxrZXJuZWxVbml0TGVuZ3RofGtlcm5pbmd8a2V5UG9pbnRzfGtleVNwbGluZXN8a2V5VGltZXN8bGVuZ3RoQWRqdXN0fGxldHRlclNwYWNpbmd8bGlnaHRpbmdDb2xvcnxsaW1pdGluZ0NvbmVBbmdsZXxsb2NhbHxtYXJrZXJFbmR8bWFya2VyTWlkfG1hcmtlclN0YXJ0fG1hcmtlckhlaWdodHxtYXJrZXJVbml0c3xtYXJrZXJXaWR0aHxtYXNrfG1hc2tDb250ZW50VW5pdHN8bWFza1VuaXRzfG1hdGhlbWF0aWNhbHxtb2RlfG51bU9jdGF2ZXN8b2Zmc2V0fG9wYWNpdHl8b3BlcmF0b3J8b3JkZXJ8b3JpZW50fG9yaWVudGF0aW9ufG9yaWdpbnxvdmVyZmxvd3xvdmVybGluZVBvc2l0aW9ufG92ZXJsaW5lVGhpY2tuZXNzfHBhbm9zZTF8cGFpbnRPcmRlcnxwYXRoTGVuZ3RofHBhdHRlcm5Db250ZW50VW5pdHN8cGF0dGVyblRyYW5zZm9ybXxwYXR0ZXJuVW5pdHN8cG9pbnRlckV2ZW50c3xwb2ludHN8cG9pbnRzQXRYfHBvaW50c0F0WXxwb2ludHNBdFp8cHJlc2VydmVBbHBoYXxwcmVzZXJ2ZUFzcGVjdFJhdGlvfHByaW1pdGl2ZVVuaXRzfHJ8cmFkaXVzfHJlZlh8cmVmWXxyZW5kZXJpbmdJbnRlbnR8cmVwZWF0Q291bnR8cmVwZWF0RHVyfHJlcXVpcmVkRXh0ZW5zaW9uc3xyZXF1aXJlZEZlYXR1cmVzfHJlc3RhcnR8cmVzdWx0fHJvdGF0ZXxyeHxyeXxzY2FsZXxzZWVkfHNoYXBlUmVuZGVyaW5nfHNsb3BlfHNwYWNpbmd8c3BlY3VsYXJDb25zdGFudHxzcGVjdWxhckV4cG9uZW50fHNwZWVkfHNwcmVhZE1ldGhvZHxzdGFydE9mZnNldHxzdGREZXZpYXRpb258c3RlbWh8c3RlbXZ8c3RpdGNoVGlsZXN8c3RvcENvbG9yfHN0b3BPcGFjaXR5fHN0cmlrZXRocm91Z2hQb3NpdGlvbnxzdHJpa2V0aHJvdWdoVGhpY2tuZXNzfHN0cmluZ3xzdHJva2V8c3Ryb2tlRGFzaGFycmF5fHN0cm9rZURhc2hvZmZzZXR8c3Ryb2tlTGluZWNhcHxzdHJva2VMaW5lam9pbnxzdHJva2VNaXRlcmxpbWl0fHN0cm9rZU9wYWNpdHl8c3Ryb2tlV2lkdGh8c3VyZmFjZVNjYWxlfHN5c3RlbUxhbmd1YWdlfHRhYmxlVmFsdWVzfHRhcmdldFh8dGFyZ2V0WXx0ZXh0QW5jaG9yfHRleHREZWNvcmF0aW9ufHRleHRSZW5kZXJpbmd8dGV4dExlbmd0aHx0b3x0cmFuc2Zvcm18dTF8dTJ8dW5kZXJsaW5lUG9zaXRpb258dW5kZXJsaW5lVGhpY2tuZXNzfHVuaWNvZGV8dW5pY29kZUJpZGl8dW5pY29kZVJhbmdlfHVuaXRzUGVyRW18dkFscGhhYmV0aWN8dkhhbmdpbmd8dklkZW9ncmFwaGljfHZNYXRoZW1hdGljYWx8dmFsdWVzfHZlY3RvckVmZmVjdHx2ZXJzaW9ufHZlcnRBZHZZfHZlcnRPcmlnaW5YfHZlcnRPcmlnaW5ZfHZpZXdCb3h8dmlld1RhcmdldHx2aXNpYmlsaXR5fHdpZHRoc3x3b3JkU3BhY2luZ3x3cml0aW5nTW9kZXx4fHhIZWlnaHR8eDF8eDJ8eENoYW5uZWxTZWxlY3Rvcnx4bGlua0FjdHVhdGV8eGxpbmtBcmNyb2xlfHhsaW5rSHJlZnx4bGlua1JvbGV8eGxpbmtTaG93fHhsaW5rVGl0bGV8eGxpbmtUeXBlfHhtbEJhc2V8eG1sbnN8eG1sbnNYbGlua3x4bWxMYW5nfHhtbFNwYWNlfHl8eTF8eTJ8eUNoYW5uZWxTZWxlY3Rvcnx6fHpvb21BbmRQYW58Zm9yfGNsYXNzfGF1dG9mb2N1cyl8KChbRGRdW0FhXVtUdF1bQWFdfFtBYV1bUnJdW0lpXVtBYV18eCktLiopKSQvOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViZmVlNjhhNGNkN2U2MDA5ZWY2MWQyM1xuXG52YXIgaXNQcm9wVmFsaWQgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHJldHVybiByZWFjdFByb3BzUmVnZXgudGVzdChwcm9wKSB8fCBwcm9wLmNoYXJDb2RlQXQoMCkgPT09IDExMVxuICAvKiBvICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgxKSA9PT0gMTEwXG4gIC8qIG4gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDIpIDwgOTE7XG59XG4vKiBaKzEgKi9cbik7XG5cbmV4cG9ydCB7IGlzUHJvcFZhbGlkIGFzIGRlZmF1bHQgfTtcbiIsInZhciBpc0Jyb3dzZXIgPSBcIm9iamVjdFwiICE9PSAndW5kZWZpbmVkJztcbmZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gKyBcIjtcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhd0NsYXNzTmFtZSArPSBjbGFzc05hbWUgKyBcIiBcIjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmF3Q2xhc3NOYW1lO1xufVxudmFyIHJlZ2lzdGVyU3R5bGVzID0gZnVuY3Rpb24gcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoIC8vIHdlIG9ubHkgbmVlZCB0byBhZGQgdGhlIHN0eWxlcyB0byB0aGUgcmVnaXN0ZXJlZCBjYWNoZSBpZiB0aGVcbiAgLy8gY2xhc3MgbmFtZSBjb3VsZCBiZSB1c2VkIGZ1cnRoZXIgZG93blxuICAvLyB0aGUgdHJlZSBidXQgaWYgaXQncyBhIHN0cmluZyB0YWcsIHdlIGtub3cgaXQgd29uJ3RcbiAgLy8gc28gd2UgZG9uJ3QgaGF2ZSB0byBhZGQgaXQgdG8gcmVnaXN0ZXJlZCBjYWNoZS5cbiAgLy8gdGhpcyBpbXByb3ZlcyBtZW1vcnkgdXNhZ2Ugc2luY2Ugd2UgY2FuIGF2b2lkIHN0b3JpbmcgdGhlIHdob2xlIHN0eWxlIHN0cmluZ1xuICAoaXNTdHJpbmdUYWcgPT09IGZhbHNlIHx8IC8vIHdlIG5lZWQgdG8gYWx3YXlzIHN0b3JlIGl0IGlmIHdlJ3JlIGluIGNvbXBhdCBtb2RlIGFuZFxuICAvLyBpbiBub2RlIHNpbmNlIGVtb3Rpb24tc2VydmVyIHJlbGllcyBvbiB3aGV0aGVyIGEgc3R5bGUgaXMgaW5cbiAgLy8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8ga25vdyB3aGV0aGVyIGEgc3R5bGUgaXMgZ2xvYmFsIG9yIG5vdFxuICAvLyBhbHNvLCBub3RlIHRoYXQgdGhpcyBjaGVjayB3aWxsIGJlIGRlYWQgY29kZSBlbGltaW5hdGVkIGluIHRoZSBicm93c2VyXG4gIGlzQnJvd3NlciA9PT0gZmFsc2UgKSAmJiBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9IHNlcmlhbGl6ZWQuc3R5bGVzO1xuICB9XG59O1xudmFyIGluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgY3VycmVudCA9IHNlcmlhbGl6ZWQ7XG5cbiAgICBkbyB7XG4gICAgICBjYWNoZS5pbnNlcnQoc2VyaWFsaXplZCA9PT0gY3VycmVudCA/IFwiLlwiICsgY2xhc3NOYW1lIDogJycsIGN1cnJlbnQsIGNhY2hlLnNoZWV0LCB0cnVlKTtcblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9IHdoaWxlIChjdXJyZW50ICE9PSB1bmRlZmluZWQpO1xuICB9XG59O1xuXG5leHBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzIH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaXNQcm9wVmFsaWQgZnJvbSAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgeyB3aXRoRW1vdGlvbkNhY2hlLCBUaGVtZUNvbnRleHQgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCByZWdpc3RlclN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgPSBpc1Byb3BWYWxpZDtcblxudmFyIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCA9IGZ1bmN0aW9uIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudChrZXkpIHtcbiAgcmV0dXJuIGtleSAhPT0gJ3RoZW1lJztcbn07XG5cbnZhciBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBmdW5jdGlvbiBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJiAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2ID8gdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnIDogdGVzdE9taXRQcm9wc09uQ29tcG9uZW50O1xufTtcbnZhciBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzID0gZnVuY3Rpb24gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCkge1xuICB2YXIgc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID0gb3B0aW9ucy5zaG91bGRGb3J3YXJkUHJvcDtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID8gZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICByZXR1cm4gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcChwcm9wTmFtZSkgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wKHByb3BOYW1lKTtcbiAgICB9IDogb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzaG91bGRGb3J3YXJkUHJvcCAhPT0gJ2Z1bmN0aW9uJyAmJiBpc1JlYWwpIHtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3A7XG4gIH1cblxuICByZXR1cm4gc2hvdWxkRm9yd2FyZFByb3A7XG59O1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWQgPSBfcmVmLnNlcmlhbGl6ZWQsXG4gICAgICBpc1N0cmluZ1RhZyA9IF9yZWYuaXNTdHJpbmdUYWc7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgY3JlYXRlU3R5bGVkID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHRyeWluZyB0byBjcmVhdGUgYSBzdHlsZWQgZWxlbWVudCB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuXFxuWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzUmVhbCA9IHRhZy5fX2Vtb3Rpb25fcmVhbCA9PT0gdGFnO1xuICB2YXIgYmFzZVRhZyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX2Jhc2UgfHwgdGFnO1xuICB2YXIgaWRlbnRpZmllck5hbWU7XG4gIHZhciB0YXJnZXRDbGFzc05hbWU7XG5cbiAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlkZW50aWZpZXJOYW1lID0gb3B0aW9ucy5sYWJlbDtcbiAgICB0YXJnZXRDbGFzc05hbWUgPSBvcHRpb25zLnRhcmdldDtcbiAgfVxuXG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcCA9IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpO1xuICB2YXIgZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AgfHwgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKGJhc2VUYWcpO1xuICB2YXIgc2hvdWxkVXNlQXMgPSAhZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKCdhcycpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdHlsZXMgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCA/IHRhZy5fX2Vtb3Rpb25fc3R5bGVzLnNsaWNlKDApIDogW107XG5cbiAgICBpZiAoaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2goXCJsYWJlbDpcIiArIGlkZW50aWZpZXJOYW1lICsgXCI7XCIpO1xuICAgIH1cblxuICAgIGlmIChhcmdzWzBdID09IG51bGwgfHwgYXJnc1swXS5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2guYXBwbHkoc3R5bGVzLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVswXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMucHVzaChhcmdzWzBdWzBdKTtcbiAgICAgIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgICAgIHZhciBpID0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmdzWzBdW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlcy5wdXNoKGFyZ3NbaV0sIGFyZ3NbMF1baV0pO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZTogd2UgbmVlZCB0byBjYXN0IFN0YXRlbGVzc0Z1bmN0aW9uYWxDb21wb25lbnQgdG8gb3VyIFByaXZhdGVTdHlsZWRDb21wb25lbnQgY2xhc3NcblxuXG4gICAgdmFyIFN0eWxlZCA9IHdpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSwgcmVmKSB7XG4gICAgICB2YXIgRmluYWxUYWcgPSBzaG91bGRVc2VBcyAmJiBwcm9wcy5hcyB8fCBiYXNlVGFnO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgICAgdmFyIGNsYXNzSW50ZXJwb2xhdGlvbnMgPSBbXTtcbiAgICAgIHZhciBtZXJnZWRQcm9wcyA9IHByb3BzO1xuXG4gICAgICBpZiAocHJvcHMudGhlbWUgPT0gbnVsbCkge1xuICAgICAgICBtZXJnZWRQcm9wcyA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICAgIG1lcmdlZFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVyZ2VkUHJvcHMudGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIGNsYXNzSW50ZXJwb2xhdGlvbnMsIHByb3BzLmNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhzdHlsZXMuY29uY2F0KGNsYXNzSW50ZXJwb2xhdGlvbnMpLCBjYWNoZS5yZWdpc3RlcmVkLCBtZXJnZWRQcm9wcyk7XG4gICAgICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGFzc05hbWUgKz0gXCIgXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmaW5hbFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkVXNlQXMgJiYgc2hvdWxkRm9yd2FyZFByb3AgPT09IHVuZGVmaW5lZCA/IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChGaW5hbFRhZykgOiBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgX2tleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2hvdWxkVXNlQXMgJiYgX2tleSA9PT0gJ2FzJykgY29udGludWU7XG5cbiAgICAgICAgaWYgKCAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AoX2tleSkpIHtcbiAgICAgICAgICBuZXdQcm9wc1tfa2V5XSA9IHByb3BzW19rZXldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgICAgIGNhY2hlOiBjYWNoZSxcbiAgICAgICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICAgICAgaXNTdHJpbmdUYWc6IHR5cGVvZiBGaW5hbFRhZyA9PT0gJ3N0cmluZydcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGaW5hbFRhZywgbmV3UHJvcHMpKTtcbiAgICB9KTtcbiAgICBTdHlsZWQuZGlzcGxheU5hbWUgPSBpZGVudGlmaWVyTmFtZSAhPT0gdW5kZWZpbmVkID8gaWRlbnRpZmllck5hbWUgOiBcIlN0eWxlZChcIiArICh0eXBlb2YgYmFzZVRhZyA9PT0gJ3N0cmluZycgPyBiYXNlVGFnIDogYmFzZVRhZy5kaXNwbGF5TmFtZSB8fCBiYXNlVGFnLm5hbWUgfHwgJ0NvbXBvbmVudCcpICsgXCIpXCI7XG4gICAgU3R5bGVkLmRlZmF1bHRQcm9wcyA9IHRhZy5kZWZhdWx0UHJvcHM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9yZWFsID0gU3R5bGVkO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fYmFzZSA9IGJhc2VUYWc7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9zdHlsZXMgPSBzdHlsZXM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9mb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHlsZWQsICd0b1N0cmluZycsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSA9PT0gdW5kZWZpbmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUic7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZTogY29lcmNlIHVuZGVmaW5lZCB0byBzdHJpbmdcblxuXG4gICAgICAgIHJldHVybiBcIi5cIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFN0eWxlZC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5leHRUYWcsIG5leHRPcHRpb25zKSB7XG4gICAgICByZXR1cm4gY3JlYXRlU3R5bGVkKG5leHRUYWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBuZXh0T3B0aW9ucywge1xuICAgICAgICBzaG91bGRGb3J3YXJkUHJvcDogY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyhTdHlsZWQsIG5leHRPcHRpb25zLCB0cnVlKVxuICAgICAgfSkpLmFwcGx5KHZvaWQgMCwgc3R5bGVzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN0eWxlZDtcbiAgfTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZVN0eWxlZCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJy4uL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIHRhZ3MgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsIC8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAnc3ZnJywgJ3RleHQnLCAndHNwYW4nXTtcblxudmFyIG5ld1N0eWxlZCA9IGNyZWF0ZVN0eWxlZC5iaW5kKCk7XG50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgLy8gJEZsb3dGaXhNZTogd2UgY2FuIGlnbm9yZSB0aGlzIGJlY2F1c2UgaXRzIGV4cG9zZWQgdHlwZSBpcyBkZWZpbmVkIGJ5IHRoZSBDcmVhdGVTdHlsZWQgdHlwZVxuICBuZXdTdHlsZWRbdGFnTmFtZV0gPSBuZXdTdHlsZWQodGFnTmFtZSk7XG59KTtcblxuZXhwb3J0IHsgbmV3U3R5bGVkIGFzIGRlZmF1bHQgfTtcbiIsIi8qKlxuICogQG11aS9zdHlsZWQtZW5naW5lIHY1LjE0LjIwXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBjbGllbnQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuaW1wb3J0IGVtU3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHlsZWQodGFnLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN0eWxlc0ZhY3RvcnkgPSBlbVN0eWxlZCh0YWcsIG9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoLi4uc3R5bGVzKSA9PiB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyA/IGBcIiR7dGFnfVwiYCA6ICdjb21wb25lbnQnO1xuICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogU2VlbXMgbGlrZSB5b3UgY2FsbGVkIFxcYHN0eWxlZCgke2NvbXBvbmVudH0pKClcXGAgd2l0aG91dCBhIFxcYHN0eWxlXFxgIGFyZ3VtZW50LmAsICdZb3UgbXVzdCBwcm92aWRlIGEgYHN0eWxlc2AgYXJndW1lbnQ6IGBzdHlsZWQoXCJkaXZcIikoc3R5bGVZb3VGb3Jnb3RUb1Bhc3MpYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlcy5zb21lKHN0eWxlID0+IHN0eWxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogdGhlIHN0eWxlZCgke2NvbXBvbmVudH0pKC4uLmFyZ3MpIEFQSSByZXF1aXJlcyBhbGwgaXRzIGFyZ3MgdG8gYmUgZGVmaW5lZC5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXNGYWN0b3J5KC4uLnN0eWxlcyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gc3R5bGVzRmFjdG9yeTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGNvbnN0IGludGVybmFsX3Byb2Nlc3NTdHlsZXMgPSAodGFnLCBwcm9jZXNzb3IpID0+IHtcbiAgLy8gRW1vdGlvbiBhdHRhY2hlcyBhbGwgdGhlIHN0eWxlcyBhcyBgX19lbW90aW9uX3N0eWxlc2AuXG4gIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzE2ZDk3MWQwZGEyMjk1OTZkNmJjYzM5ZDI4MmJhOTc1M2M5ZWU3Y2YvcGFja2FnZXMvc3R5bGVkL3NyYy9iYXNlLmpzI0wxODZcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFnLl9fZW1vdGlvbl9zdHlsZXMpKSB7XG4gICAgdGFnLl9fZW1vdGlvbl9zdHlsZXMgPSBwcm9jZXNzb3IodGFnLl9fZW1vdGlvbl9zdHlsZXMpO1xuICB9XG59O1xuZXhwb3J0IHsgVGhlbWVDb250ZXh0LCBrZXlmcmFtZXMsIGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3R5bGVkRW5naW5lUHJvdmlkZXIgfSBmcm9tICcuL1N0eWxlZEVuZ2luZVByb3ZpZGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi9HbG9iYWxTdHlsZXMnOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFyaWFudFwiXTtcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZnVuY3Rpb24gaXNFbXB0eShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT09IDA7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIHN0cmluZyBjbGFzc0tleSBiYXNlZCBvbiB0aGUgcHJvcGVydGllcyBwcm92aWRlZC4gSXQgc3RhcnRzIHdpdGggdGhlXG4gKiB2YXJpYW50IGlmIGRlZmluZWQsIGFuZCB0aGVuIGl0IGFwcGVuZHMgYWxsIG90aGVyIHByb3BlcnRpZXMgaW4gYWxwaGFiZXRpY2FsIG9yZGVyLlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIC0gdGhlIHByb3BlcnRpZXMgZm9yIHdoaWNoIHRoZSBjbGFzc0tleSBzaG91bGQgYmUgY3JlYXRlZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvcHNUb0NsYXNzS2V5KHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIHZhcmlhbnRcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgbGV0IGNsYXNzS2V5ID0gdmFyaWFudCB8fCAnJztcbiAgT2JqZWN0LmtleXMob3RoZXIpLnNvcnQoKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbG9yJykge1xuICAgICAgY2xhc3NLZXkgKz0gaXNFbXB0eShjbGFzc0tleSkgPyBwcm9wc1trZXldIDogY2FwaXRhbGl6ZShwcm9wc1trZXldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xhc3NLZXkgKz0gYCR7aXNFbXB0eShjbGFzc0tleSkgPyBrZXkgOiBjYXBpdGFsaXplKGtleSl9JHtjYXBpdGFsaXplKHByb3BzW2tleV0udG9TdHJpbmcoKSl9YDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xhc3NLZXk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm5hbWVcIiwgXCJzbG90XCIsIFwic2tpcFZhcmlhbnRzUmVzb2x2ZXJcIiwgXCJza2lwU3hcIiwgXCJvdmVycmlkZXNSZXNvbHZlclwiXTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5pbXBvcnQgc3R5bGVkRW5naW5lU3R5bGVkLCB7IGludGVybmFsX3Byb2Nlc3NTdHlsZXMgYXMgcHJvY2Vzc1N0eWxlcyB9IGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5pbXBvcnQgeyBnZXREaXNwbGF5TmFtZSwgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplLCBpc1BsYWluT2JqZWN0LCBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmltcG9ydCBwcm9wc1RvQ2xhc3NLZXkgZnJvbSAnLi9wcm9wc1RvQ2xhc3NLZXknO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCBmcm9tICcuL3N0eWxlRnVuY3Rpb25TeCc7XG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vYmxvYi8yNmRlZDYxMDlmY2Q4Y2E5ODc1Y2MyY2U0NTY0ZmVlNjc4YTNmM2M1L3BhY2thZ2VzL3N0eWxlZC9zcmMvdXRpbHMuanMjTDQwXG5mdW5jdGlvbiBpc1N0cmluZ1RhZyh0YWcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnICYmXG4gIC8vIDk2IGlzIG9uZSBsZXNzIHRoYW4gdGhlIGNoYXIgY29kZVxuICAvLyBmb3IgXCJhXCIgc28gdGhpcyBpcyBjaGVja2luZyB0aGF0XG4gIC8vIGl0J3MgYSBsb3dlcmNhc2UgY2hhcmFjdGVyXG4gIHRhZy5jaGFyQ29kZUF0KDApID4gOTY7XG59XG5jb25zdCBnZXRTdHlsZU92ZXJyaWRlcyA9IChuYW1lLCB0aGVtZSkgPT4ge1xuICBpZiAodGhlbWUuY29tcG9uZW50cyAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uc3R5bGVPdmVycmlkZXMpIHtcbiAgICByZXR1cm4gdGhlbWUuY29tcG9uZW50c1tuYW1lXS5zdHlsZU92ZXJyaWRlcztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb25zdCB0cmFuc2Zvcm1WYXJpYW50cyA9IHZhcmlhbnRzID0+IHtcbiAgY29uc3QgdmFyaWFudHNTdHlsZXMgPSB7fTtcbiAgaWYgKHZhcmlhbnRzKSB7XG4gICAgdmFyaWFudHMuZm9yRWFjaChkZWZpbml0aW9uID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHByb3BzVG9DbGFzc0tleShkZWZpbml0aW9uLnByb3BzKTtcbiAgICAgIHZhcmlhbnRzU3R5bGVzW2tleV0gPSBkZWZpbml0aW9uLnN0eWxlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB2YXJpYW50c1N0eWxlcztcbn07XG5jb25zdCBnZXRWYXJpYW50U3R5bGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGxldCB2YXJpYW50cyA9IFtdO1xuICBpZiAodGhlbWUgJiYgdGhlbWUuY29tcG9uZW50cyAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHMpIHtcbiAgICB2YXJpYW50cyA9IHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHM7XG4gIH1cbiAgcmV0dXJuIHRyYW5zZm9ybVZhcmlhbnRzKHZhcmlhbnRzKTtcbn07XG5jb25zdCB2YXJpYW50c1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMsIHZhcmlhbnRzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlID0ge31cbiAgfSA9IHByb3BzO1xuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IFtdO1xuICBpZiAodmFyaWFudHMpIHtcbiAgICB2YXJpYW50cy5mb3JFYWNoKHZhcmlhbnQgPT4ge1xuICAgICAgbGV0IGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgT2JqZWN0LmtleXModmFyaWFudC5wcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAob3duZXJTdGF0ZVtrZXldICE9PSB2YXJpYW50LnByb3BzW2tleV0gJiYgcHJvcHNba2V5XSAhPT0gdmFyaWFudC5wcm9wc1trZXldKSB7XG4gICAgICAgICAgaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChpc01hdGNoKSB7XG4gICAgICAgIHZhcmlhbnRzU3R5bGVzLnB1c2goc3R5bGVzW3Byb3BzVG9DbGFzc0tleSh2YXJpYW50LnByb3BzKV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB2YXJpYW50c1N0eWxlcztcbn07XG5jb25zdCB0aGVtZVZhcmlhbnRzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcywgdGhlbWUsIG5hbWUpID0+IHtcbiAgdmFyIF90aGVtZSRjb21wb25lbnRzO1xuICBjb25zdCB0aGVtZVZhcmlhbnRzID0gdGhlbWUgPT0gbnVsbCB8fCAoX3RoZW1lJGNvbXBvbmVudHMgPSB0aGVtZS5jb21wb25lbnRzKSA9PSBudWxsIHx8IChfdGhlbWUkY29tcG9uZW50cyA9IF90aGVtZSRjb21wb25lbnRzW25hbWVdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJGNvbXBvbmVudHMudmFyaWFudHM7XG4gIHJldHVybiB2YXJpYW50c1Jlc29sdmVyKHByb3BzLCBzdHlsZXMsIHRoZW1lVmFyaWFudHMpO1xufTtcblxuLy8gVXBkYXRlIC9zeXN0ZW0vc3R5bGVkLyNhcGkgaW4gY2FzZSBpZiB0aGlzIGNoYW5nZXNcbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSB7XG4gIHJldHVybiBwcm9wICE9PSAnb3duZXJTdGF0ZScgJiYgcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcyc7XG59XG5leHBvcnQgY29uc3Qgc3lzdGVtRGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmNvbnN0IGxvd2VyY2FzZUZpcnN0TGV0dGVyID0gc3RyaW5nID0+IHtcbiAgaWYgKCFzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59O1xuZnVuY3Rpb24gcmVzb2x2ZVRoZW1lKHtcbiAgZGVmYXVsdFRoZW1lLFxuICB0aGVtZSxcbiAgdGhlbWVJZFxufSkge1xuICByZXR1cm4gaXNFbXB0eSh0aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZVt0aGVtZUlkXSB8fCB0aGVtZTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPdmVycmlkZXNSZXNvbHZlcihzbG90KSB7XG4gIGlmICghc2xvdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzW3Nsb3RdO1xufVxuY29uc3QgbXVpU3R5bGVkRnVuY3Rpb25SZXNvbHZlciA9ICh7XG4gIHN0eWxlZEFyZyxcbiAgcHJvcHMsXG4gIGRlZmF1bHRUaGVtZSxcbiAgdGhlbWVJZFxufSkgPT4ge1xuICBjb25zdCByZXNvbHZlZFN0eWxlcyA9IHN0eWxlZEFyZyhfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB0aGVtZTogcmVzb2x2ZVRoZW1lKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgdGhlbWVJZFxuICAgIH0pKVxuICB9KSk7XG4gIGxldCBvcHRpb25hbFZhcmlhbnRzO1xuICBpZiAocmVzb2x2ZWRTdHlsZXMgJiYgcmVzb2x2ZWRTdHlsZXMudmFyaWFudHMpIHtcbiAgICBvcHRpb25hbFZhcmlhbnRzID0gcmVzb2x2ZWRTdHlsZXMudmFyaWFudHM7XG4gICAgZGVsZXRlIHJlc29sdmVkU3R5bGVzLnZhcmlhbnRzO1xuICB9XG4gIGlmIChvcHRpb25hbFZhcmlhbnRzKSB7XG4gICAgY29uc3QgdmFyaWFudHNTdHlsZXMgPSB2YXJpYW50c1Jlc29sdmVyKHByb3BzLCB0cmFuc2Zvcm1WYXJpYW50cyhvcHRpb25hbFZhcmlhbnRzKSwgb3B0aW9uYWxWYXJpYW50cyk7XG4gICAgcmV0dXJuIFtyZXNvbHZlZFN0eWxlcywgLi4udmFyaWFudHNTdHlsZXNdO1xuICB9XG4gIHJldHVybiByZXNvbHZlZFN0eWxlcztcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHlsZWQoaW5wdXQgPSB7fSkge1xuICBjb25zdCB7XG4gICAgdGhlbWVJZCxcbiAgICBkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUsXG4gICAgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AsXG4gICAgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3BcbiAgfSA9IGlucHV0O1xuICBjb25zdCBzeXN0ZW1TeCA9IHByb3BzID0+IHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgdGhlbWU6IHJlc29sdmVUaGVtZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICB0aGVtZUlkXG4gICAgICB9KSlcbiAgICB9KSk7XG4gIH07XG4gIHN5c3RlbVN4Ll9fbXVpX3N5c3RlbVN4ID0gdHJ1ZTtcbiAgcmV0dXJuICh0YWcsIGlucHV0T3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gRmlsdGVyIG91dCB0aGUgYHN4YCBzdHlsZSBmdW5jdGlvbiBmcm9tIHRoZSBwcmV2aW91cyBzdHlsZWQgY29tcG9uZW50IHRvIHByZXZlbnQgdW5uZWNlc3Nhcnkgc3R5bGVzIGdlbmVyYXRlZCBieSB0aGUgY29tcG9zaXRlIGNvbXBvbmVudHMuXG4gICAgcHJvY2Vzc1N0eWxlcyh0YWcsIHN0eWxlcyA9PiBzdHlsZXMuZmlsdGVyKHN0eWxlID0+ICEoc3R5bGUgIT0gbnVsbCAmJiBzdHlsZS5fX211aV9zeXN0ZW1TeCkpKTtcbiAgICBjb25zdCB7XG4gICAgICAgIG5hbWU6IGNvbXBvbmVudE5hbWUsXG4gICAgICAgIHNsb3Q6IGNvbXBvbmVudFNsb3QsXG4gICAgICAgIHNraXBWYXJpYW50c1Jlc29sdmVyOiBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyLFxuICAgICAgICBza2lwU3g6IGlucHV0U2tpcFN4LFxuICAgICAgICAvLyBUT0RPIHY2OiByZW1vdmUgYGxvd2VyY2FzZUZpcnN0TGV0dGVyKClgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAgICAgLy8gRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM3OTA4XG4gICAgICAgIG92ZXJyaWRlc1Jlc29sdmVyID0gZGVmYXVsdE92ZXJyaWRlc1Jlc29sdmVyKGxvd2VyY2FzZUZpcnN0TGV0dGVyKGNvbXBvbmVudFNsb3QpKVxuICAgICAgfSA9IGlucHV0T3B0aW9ucyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShpbnB1dE9wdGlvbnMsIF9leGNsdWRlZCk7XG5cbiAgICAvLyBpZiBza2lwVmFyaWFudHNSZXNvbHZlciBvcHRpb24gaXMgZGVmaW5lZCwgdGFrZSB0aGUgdmFsdWUsIG90aGVyd2lzZSwgdHJ1ZSBmb3Igcm9vdCBhbmQgZmFsc2UgZm9yIG90aGVyIHNsb3RzLlxuICAgIGNvbnN0IHNraXBWYXJpYW50c1Jlc29sdmVyID0gaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciAhPT0gdW5kZWZpbmVkID8gaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciA6XG4gICAgLy8gVE9ETyB2NjogcmVtb3ZlIGBSb290YCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlXG4gICAgLy8gRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM3OTA4XG4gICAgY29tcG9uZW50U2xvdCAmJiBjb21wb25lbnRTbG90ICE9PSAnUm9vdCcgJiYgY29tcG9uZW50U2xvdCAhPT0gJ3Jvb3QnIHx8IGZhbHNlO1xuICAgIGNvbnN0IHNraXBTeCA9IGlucHV0U2tpcFN4IHx8IGZhbHNlO1xuICAgIGxldCBsYWJlbDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgLy8gVE9ETyB2NjogcmVtb3ZlIGBsb3dlcmNhc2VGaXJzdExldHRlcigpYCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlXG4gICAgICAgIC8vIEZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvcHVsbC8zNzkwOFxuICAgICAgICBsYWJlbCA9IGAke2NvbXBvbmVudE5hbWV9LSR7bG93ZXJjYXNlRmlyc3RMZXR0ZXIoY29tcG9uZW50U2xvdCB8fCAnUm9vdCcpfWA7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHNob3VsZEZvcndhcmRQcm9wO1xuXG4gICAgLy8gVE9ETyB2NjogcmVtb3ZlIGBSb290YCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlXG4gICAgLy8gRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM3OTA4XG4gICAgaWYgKGNvbXBvbmVudFNsb3QgPT09ICdSb290JyB8fCBjb21wb25lbnRTbG90ID09PSAncm9vdCcpIHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gcm9vdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoY29tcG9uZW50U2xvdCkge1xuICAgICAgLy8gYW55IG90aGVyIHNsb3Qgc3BlY2lmaWVkXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHNsb3RTaG91bGRGb3J3YXJkUHJvcDtcbiAgICB9IGVsc2UgaWYgKGlzU3RyaW5nVGFnKHRhZykpIHtcbiAgICAgIC8vIGZvciBzdHJpbmcgKGh0bWwpIHRhZywgcHJlc2VydmUgdGhlIGJlaGF2aW9yIGluIGVtb3Rpb24gJiBzdHlsZWQtY29tcG9uZW50cy5cbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIgPSBzdHlsZWRFbmdpbmVTdHlsZWQodGFnLCBfZXh0ZW5kcyh7XG4gICAgICBzaG91bGRGb3J3YXJkUHJvcDogc2hvdWxkRm9yd2FyZFByb3BPcHRpb24sXG4gICAgICBsYWJlbFxuICAgIH0sIG9wdGlvbnMpKTtcbiAgICBjb25zdCBtdWlTdHlsZWRSZXNvbHZlciA9IChzdHlsZUFyZywgLi4uZXhwcmVzc2lvbnMpID0+IHtcbiAgICAgIGNvbnN0IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSA9IGV4cHJlc3Npb25zID8gZXhwcmVzc2lvbnMubWFwKHN0eWxlc0FyZyA9PiB7XG4gICAgICAgIC8vIE9uIHRoZSBzZXJ2ZXIgRW1vdGlvbiBkb2Vzbid0IHVzZSBSZWFjdC5mb3J3YXJkUmVmIGZvciBjcmVhdGluZyBjb21wb25lbnRzLCBzbyB0aGUgY3JlYXRlZFxuICAgICAgICAvLyBjb21wb25lbnQgc3RheXMgYXMgYSBmdW5jdGlvbi4gVGhpcyBjb25kaXRpb24gbWFrZXMgc3VyZSB0aGF0IHdlIGRvIG5vdCBpbnRlcnBvbGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gd2hpY2ggYXJlIGJhc2ljYWxseSBjb21wb25lbnRzIHVzZWQgYXMgYSBzZWxlY3RvcnMuXG4gICAgICAgIGlmICh0eXBlb2Ygc3R5bGVzQXJnID09PSAnZnVuY3Rpb24nICYmIHN0eWxlc0FyZy5fX2Vtb3Rpb25fcmVhbCAhPT0gc3R5bGVzQXJnKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzID0+IG11aVN0eWxlZEZ1bmN0aW9uUmVzb2x2ZXIoe1xuICAgICAgICAgICAgc3R5bGVkQXJnOiBzdHlsZXNBcmcsXG4gICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgICAgIHRoZW1lSWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChzdHlsZXNBcmcpKSB7XG4gICAgICAgICAgbGV0IHRyYW5zZm9ybWVkU3R5bGVzQXJnID0gc3R5bGVzQXJnO1xuICAgICAgICAgIGxldCBzdHlsZWRBcmdWYXJpYW50cztcbiAgICAgICAgICBpZiAoc3R5bGVzQXJnICYmIHN0eWxlc0FyZy52YXJpYW50cykge1xuICAgICAgICAgICAgc3R5bGVkQXJnVmFyaWFudHMgPSBzdHlsZXNBcmcudmFyaWFudHM7XG4gICAgICAgICAgICBkZWxldGUgdHJhbnNmb3JtZWRTdHlsZXNBcmcudmFyaWFudHM7XG4gICAgICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlc0FyZyA9IHByb3BzID0+IHtcbiAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHN0eWxlc0FyZztcbiAgICAgICAgICAgICAgY29uc3QgdmFyaWFudFN0eWxlcyA9IHZhcmlhbnRzUmVzb2x2ZXIocHJvcHMsIHRyYW5zZm9ybVZhcmlhbnRzKHN0eWxlZEFyZ1ZhcmlhbnRzKSwgc3R5bGVkQXJnVmFyaWFudHMpO1xuICAgICAgICAgICAgICB2YXJpYW50U3R5bGVzLmZvckVhY2godmFyaWFudFN0eWxlID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBkZWVwbWVyZ2UocmVzdWx0LCB2YXJpYW50U3R5bGUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZFN0eWxlc0FyZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3R5bGVzQXJnO1xuICAgICAgfSkgOiBbXTtcbiAgICAgIGxldCB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gc3R5bGVBcmc7XG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzdHlsZUFyZykpIHtcbiAgICAgICAgbGV0IHN0eWxlZEFyZ1ZhcmlhbnRzO1xuICAgICAgICBpZiAoc3R5bGVBcmcgJiYgc3R5bGVBcmcudmFyaWFudHMpIHtcbiAgICAgICAgICBzdHlsZWRBcmdWYXJpYW50cyA9IHN0eWxlQXJnLnZhcmlhbnRzO1xuICAgICAgICAgIGRlbGV0ZSB0cmFuc2Zvcm1lZFN0eWxlQXJnLnZhcmlhbnRzO1xuICAgICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBwcm9wcyA9PiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gc3R5bGVBcmc7XG4gICAgICAgICAgICBjb25zdCB2YXJpYW50U3R5bGVzID0gdmFyaWFudHNSZXNvbHZlcihwcm9wcywgdHJhbnNmb3JtVmFyaWFudHMoc3R5bGVkQXJnVmFyaWFudHMpLCBzdHlsZWRBcmdWYXJpYW50cyk7XG4gICAgICAgICAgICB2YXJpYW50U3R5bGVzLmZvckVhY2godmFyaWFudFN0eWxlID0+IHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gZGVlcG1lcmdlKHJlc3VsdCwgdmFyaWFudFN0eWxlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHlsZUFyZyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgLy8gT24gdGhlIHNlcnZlciBFbW90aW9uIGRvZXNuJ3QgdXNlIFJlYWN0LmZvcndhcmRSZWYgZm9yIGNyZWF0aW5nIGNvbXBvbmVudHMsIHNvIHRoZSBjcmVhdGVkXG4gICAgICAvLyBjb21wb25lbnQgc3RheXMgYXMgYSBmdW5jdGlvbi4gVGhpcyBjb25kaXRpb24gbWFrZXMgc3VyZSB0aGF0IHdlIGRvIG5vdCBpbnRlcnBvbGF0ZSBmdW5jdGlvbnNcbiAgICAgIC8vIHdoaWNoIGFyZSBiYXNpY2FsbHkgY29tcG9uZW50cyB1c2VkIGFzIGEgc2VsZWN0b3JzLlxuICAgICAgc3R5bGVBcmcuX19lbW90aW9uX3JlYWwgIT09IHN0eWxlQXJnKSB7XG4gICAgICAgIC8vIElmIHRoZSB0eXBlIGlzIGZ1bmN0aW9uLCB3ZSBuZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCB0aGVtZS5cbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IHByb3BzID0+IG11aVN0eWxlZEZ1bmN0aW9uUmVzb2x2ZXIoe1xuICAgICAgICAgIHN0eWxlZEFyZzogc3R5bGVBcmcsXG4gICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICAgIHRoZW1lSWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiBvdmVycmlkZXNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSByZXNvbHZlVGhlbWUoX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgICBkZWZhdWx0VGhlbWUsXG4gICAgICAgICAgICB0aGVtZUlkXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gZ2V0U3R5bGVPdmVycmlkZXMoY29tcG9uZW50TmFtZSwgdGhlbWUpO1xuICAgICAgICAgIGlmIChzdHlsZU92ZXJyaWRlcykge1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoc3R5bGVPdmVycmlkZXMpLmZvckVhY2goKFtzbG90S2V5LCBzbG90U3R5bGVdKSA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmVkU3R5bGVPdmVycmlkZXNbc2xvdEtleV0gPSB0eXBlb2Ygc2xvdFN0eWxlID09PSAnZnVuY3Rpb24nID8gc2xvdFN0eWxlKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgICAgIHRoZW1lXG4gICAgICAgICAgICAgIH0pKSA6IHNsb3RTdHlsZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG92ZXJyaWRlc1Jlc29sdmVyKHByb3BzLCByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgIXNraXBWYXJpYW50c1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IHJlc29sdmVUaGVtZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgICAgIHRoZW1lSWRcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgcmV0dXJuIHRoZW1lVmFyaWFudHNSZXNvbHZlcihwcm9wcywgZ2V0VmFyaWFudFN0eWxlcyhjb21wb25lbnROYW1lLCB0aGVtZSksIHRoZW1lLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXNraXBTeCkge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChzeXN0ZW1TeCk7XG4gICAgICB9XG4gICAgICBjb25zdCBudW1PZkN1c3RvbUZuc0FwcGxpZWQgPSBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUubGVuZ3RoIC0gZXhwcmVzc2lvbnMubGVuZ3RoO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGVBcmcpICYmIG51bU9mQ3VzdG9tRm5zQXBwbGllZCA+IDApIHtcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXJzID0gbmV3IEFycmF5KG51bU9mQ3VzdG9tRm5zQXBwbGllZCkuZmlsbCgnJyk7XG4gICAgICAgIC8vIElmIHRoZSB0eXBlIGlzIGFycmF5LCB0aGFuIHdlIG5lZWQgdG8gYWRkIHBsYWNlaG9sZGVycyBpbiB0aGUgdGVtcGxhdGUgZm9yIHRoZSBvdmVycmlkZXMsIHZhcmlhbnRzIGFuZCB0aGUgc3ggc3R5bGVzLlxuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gWy4uLnN0eWxlQXJnLCAuLi5wbGFjZWhvbGRlcnNdO1xuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnLnJhdyA9IFsuLi5zdHlsZUFyZy5yYXcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICB9XG4gICAgICBjb25zdCBDb21wb25lbnQgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIodHJhbnNmb3JtZWRTdHlsZUFyZywgLi4uZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGxldCBkaXNwbGF5TmFtZTtcbiAgICAgICAgaWYgKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgICBkaXNwbGF5TmFtZSA9IGAke2NvbXBvbmVudE5hbWV9JHtjYXBpdGFsaXplKGNvbXBvbmVudFNsb3QgfHwgJycpfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkaXNwbGF5TmFtZSA9IGBTdHlsZWQoJHtnZXREaXNwbGF5TmFtZSh0YWcpfSlgO1xuICAgICAgICB9XG4gICAgICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgfVxuICAgICAgaWYgKHRhZy5tdWlOYW1lKSB7XG4gICAgICAgIENvbXBvbmVudC5tdWlOYW1lID0gdGFnLm11aU5hbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgIH07XG4gICAgaWYgKGRlZmF1bHRTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnKSB7XG4gICAgICBtdWlTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnID0gZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWc7XG4gICAgfVxuICAgIHJldHVybiBtdWlTdHlsZWRSZXNvbHZlcjtcbiAgfTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyBjcmVhdGVTdHlsZWQsIHNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgVEhFTUVfSUQgZnJvbSAnLi9pZGVudGlmaWVyJztcbmV4cG9ydCBjb25zdCByb290U2hvdWxkRm9yd2FyZFByb3AgPSBwcm9wID0+IHNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICdjbGFzc2VzJztcbmV4cG9ydCBjb25zdCBzbG90U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbmNvbnN0IHN0eWxlZCA9IGNyZWF0ZVN0eWxlZCh7XG4gIHRoZW1lSWQ6IFRIRU1FX0lELFxuICBkZWZhdWx0VGhlbWUsXG4gIHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSk7XG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgdXNlVGhlbWVXaXRob3V0RGVmYXVsdCBmcm9tICcuL3VzZVRoZW1lV2l0aG91dERlZmF1bHQnO1xuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUpIHtcbiAgcmV0dXJuIHVzZVRoZW1lV2l0aG91dERlZmF1bHQoZGVmYXVsdFRoZW1lKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdXNlVGhlbWVQcm9wcyBhcyBzeXN0ZW1Vc2VUaGVtZVByb3BzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgVEhFTUVfSUQgZnJvbSAnLi9pZGVudGlmaWVyJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZVxufSkge1xuICByZXR1cm4gc3lzdGVtVXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHMsXG4gICAgbmFtZSxcbiAgICBkZWZhdWx0VGhlbWUsXG4gICAgdGhlbWVJZDogVEhFTUVfSURcbiAgfSk7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuL2dldFRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZSxcbiAgZGVmYXVsdFRoZW1lLFxuICB0aGVtZUlkXG59KSB7XG4gIGxldCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gIGlmICh0aGVtZUlkKSB7XG4gICAgdGhlbWUgPSB0aGVtZVt0aGVtZUlkXSB8fCB0aGVtZTtcbiAgfVxuICBjb25zdCBtZXJnZWRQcm9wcyA9IGdldFRoZW1lUHJvcHMoe1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSk7XG4gIHJldHVybiBtZXJnZWRQcm9wcztcbn0iLCJpbXBvcnQgeyBpbnRlcm5hbF9yZXNvbHZlUHJvcHMgYXMgcmVzb2x2ZVByb3BzIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaGVtZVByb3BzKHBhcmFtcykge1xuICBjb25zdCB7XG4gICAgdGhlbWUsXG4gICAgbmFtZSxcbiAgICBwcm9wc1xuICB9ID0gcGFyYW1zO1xuICBpZiAoIXRoZW1lIHx8ICF0aGVtZS5jb21wb25lbnRzIHx8ICF0aGVtZS5jb21wb25lbnRzW25hbWVdIHx8ICF0aGVtZS5jb21wb25lbnRzW25hbWVdLmRlZmF1bHRQcm9wcykge1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuICByZXR1cm4gcmVzb2x2ZVByb3BzKHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uZGVmYXVsdFByb3BzLCBwcm9wcyk7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4uL3NldFJlZic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JrUmVmKC4uLnJlZnMpIHtcbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgdGhlIHJlZnMgcGFzc2VkIHRvIHRoaXMgaG9vayBjaGFuZ2UgYW5kIGFyZSBhbGwgZGVmaW5lZC5cbiAgICogVGhpcyBtZWFucyByZWFjdCB3aWxsIGNhbGwgdGhlIG9sZCBmb3JrUmVmIHdpdGggYG51bGxgIGFuZCB0aGUgbmV3IGZvcmtSZWZcbiAgICogd2l0aCB0aGUgcmVmLiBDbGVhbnVwIG5hdHVyYWxseSBlbWVyZ2VzIGZyb20gdGhpcyBiZWhhdmlvci5cbiAgICovXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBpZiAocmVmcy5ldmVyeShyZWYgPT4gcmVmID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlID0+IHtcbiAgICAgIHJlZnMuZm9yRWFjaChyZWYgPT4ge1xuICAgICAgICBzZXRSZWYocmVmLCBpbnN0YW5jZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgcmVmcyk7XG59IiwiLyoqXG4gKiBUT0RPIHY1OiBjb25zaWRlciBtYWtpbmcgaXQgcHJpdmF0ZVxuICpcbiAqIHBhc3NlcyB7dmFsdWV9IHRvIHtyZWZ9XG4gKlxuICogV0FSTklORzogQmUgc3VyZSB0byBvbmx5IGNhbGwgdGhpcyBpbnNpZGUgYSBjYWxsYmFjayB0aGF0IGlzIHBhc3NlZCBhcyBhIHJlZi5cbiAqIE90aGVyd2lzZSwgbWFrZSBzdXJlIHRvIGNsZWFudXAgdGhlIHByZXZpb3VzIHtyZWZ9IGlmIGl0IGNoYW5nZXMuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMTM1MzlcbiAqXG4gKiBVc2VmdWwgaWYgeW91IHdhbnQgdG8gZXhwb3NlIHRoZSByZWYgb2YgYW4gaW5uZXIgY29tcG9uZW50IHRvIHRoZSBwdWJsaWMgQVBJXG4gKiB3aGlsZSBzdGlsbCB1c2luZyBpdCBpbnNpZGUgdGhlIGNvbXBvbmVudC5cbiAqIEBwYXJhbSByZWYgQSByZWYgY2FsbGJhY2sgb3IgcmVmIG9iamVjdC4gSWYgYW55dGhpbmcgZmFsc3ksIHRoaXMgaXMgYSBuby1vcC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UmVmKHJlZiwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYodmFsdWUpO1xuICB9IGVsc2UgaWYgKHJlZikge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH1cbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRm9ya1JlZjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBBIHZlcnNpb24gb2YgYFJlYWN0LnVzZUxheW91dEVmZmVjdGAgdGhhdCBkb2VzIG5vdCBzaG93IGEgd2FybmluZyB3aGVuIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBlZmZlY3RzIHRoYXQgYXJlIG9ubHkgbmVlZGVkIGZvciBjbGllbnQtc2lkZSByZW5kZXJpbmcgYnV0IG5vdCBmb3IgU1NSLlxuICpcbiAqIEJlZm9yZSB5b3UgdXNlIHRoaXMgaG9vaywgbWFrZSBzdXJlIHRvIHJlYWQgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ2FlYXJvbi9lN2Q5N2NkZjM4YTI5MDc5MjRlYTEyZTRlYmRmM2M4NVxuICogYW5kIGNvbmZpcm0gaXQgZG9lc24ndCBhcHBseSB0byB5b3VyIHVzZS1jYXNlLlxuICovXG5jb25zdCB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgdXNlRW5oYW5jZWRFZmZlY3Q7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1bnN0YWJsZV91c2VFdmVudENhbGxiYWNrIGFzIHVzZUV2ZW50Q2FsbGJhY2sgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUV2ZW50Q2FsbGJhY2s7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXNlRW5oYW5jZWRFZmZlY3QnO1xuXG4vKipcbiAqIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTQwOTkjaXNzdWVjb21tZW50LTQ0MDAxMzg5MlxuICogU2VlIFJGQyBpbiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZmNzL3B1bGwvMjIwXG4gKi9cblxuZnVuY3Rpb24gdXNlRXZlbnRDYWxsYmFjayhmbikge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYoZm4pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VSZWYoKC4uLmFyZ3MpID0+XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgaGlkZSBgdGhpc2BcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmJhbi1jb21tYS1vcGVyYXRvclxuICAoMCwgcmVmLmN1cnJlbnQpKC4uLmFyZ3MpKS5jdXJyZW50O1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlRXZlbnRDYWxsYmFjazsiLCIndXNlIGNsaWVudCc7XG5cbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi92NC4xLjUvc3JjL2ZvY3VzLXZpc2libGUuanNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xubGV0IGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dDtcbmNvbnN0IGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gIHRleHQ6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgd2VlazogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWVcbn07XG5cbi8qKlxuICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICogYGZvY3VzLXZpc2libGVgIGNsYXNzIGJlaW5nIGFkZGVkLCBpLmUuIHdoZXRoZXIgaXQgc2hvdWxkIGFsd2F5cyBtYXRjaFxuICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIHRhZ05hbWVcbiAgfSA9IG5vZGU7XG4gIGlmICh0YWdOYW1lID09PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChub2RlLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG5cbi8qKlxuICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZVBvaW50ZXJEb3duKCkge1xuICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG59XG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICBpZiAodGhpcy52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZShkb2MpIHtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0ZWFyZG93bihkb2MpIHtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGlzRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gIGNvbnN0IHtcbiAgICB0YXJnZXRcbiAgfSA9IGV2ZW50O1xuICB0cnkge1xuICAgIHJldHVybiB0YXJnZXQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBCcm93c2VycyBub3QgaW1wbGVtZW50aW5nIDpmb2N1cy12aXNpYmxlIHdpbGwgdGhyb3cgYSBTeW50YXhFcnJvci5cbiAgICAvLyBXZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzLlxuICAgIC8vIFJldGhyb3cgbWlnaHQgYmUgYmV0dGVyIGlmIGl0J3Mgbm90IHRoZSBleHBlY3RlZCBlcnJvciBidXQgZG8gd2UgcmVhbGx5XG4gICAgLy8gd2FudCB0byBjcmFzaCBpZiBmb2N1cy12aXNpYmxlIG1hbGZ1bmN0aW9uZWQ/XG4gIH1cblxuICAvLyBObyBuZWVkIGZvciB2YWxpZEZvY3VzVGFyZ2V0IGNoZWNrLiBUaGUgdXNlciBkb2VzIHRoYXQgYnkgYXR0YWNoaW5nIGl0IHRvXG4gIC8vIGZvY3VzYWJsZSBldmVudHMgb25seS5cbiAgcmV0dXJuIGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlzRm9jdXNWaXNpYmxlKCkge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICBwcmVwYXJlKG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgfVxuICB9LCBbXSk7XG4gIGNvbnN0IGlzRm9jdXNWaXNpYmxlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGhhbmRsZUJsdXJWaXNpYmxlKCkge1xuICAgIC8vIGNoZWNraW5nIGFnYWluc3QgcG90ZW50aWFsIHN0YXRlIHZhcmlhYmxlIGRvZXMgbm90IHN1ZmZpY2UgaWYgd2UgZm9jdXMgYW5kIGJsdXIgc3luY2hyb25vdXNseS5cbiAgICAvLyBSZWFjdCB3b3VsZG4ndCBoYXZlIHRpbWUgdG8gdHJpZ2dlciBhIHJlLXJlbmRlciBzbyBgZm9jdXNWaXNpYmxlYCB3b3VsZCBiZSBzdGFsZS5cbiAgICAvLyBJZGVhbGx5IHdlIHdvdWxkIGFkanVzdCBgaXNGb2N1c1Zpc2libGUoZXZlbnQpYCB0byBsb29rIGF0IGByZWxhdGVkVGFyZ2V0YCBmb3IgYmx1ciBldmVudHMuXG4gICAgLy8gVGhpcyBkb2Vzbid0IHdvcmsgaW4gSUUxMSBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zNzUxXG4gICAgLy8gVE9ETzogY2hlY2sgYWdhaW4gaWYgUmVhY3QgcmVsZWFzZXMgdGhlaXIgaW50ZXJuYWwgY2hhbmdlcyB0byBmb2N1cyBldmVudCBoYW5kbGluZyAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTkxODYpLlxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50KSB7XG4gICAgICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gICAgICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gICAgICAvLyBJZiB3ZSBkb24ndCBzZWUgYSB2aXNpYmlsaXR5IGNoYW5nZSB3aXRoaW4gMTAwbXMsIGl0J3MgcHJvYmFibHkgYVxuICAgICAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgICB9LCAxMDApO1xuICAgICAgaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZFxuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50KSkge1xuICAgICAgaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmXG4gIH07XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1bnN0YWJsZV91c2VJc0ZvY3VzVmlzaWJsZSBhcyB1c2VJc0ZvY3VzVmlzaWJsZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlSXNGb2N1c1Zpc2libGU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cbiAgcmV0dXJuIHNlbGY7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuLCBtYXBGbikge1xuICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gbWFwcGVyKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hcEZuICYmIGlzVmFsaWRFbGVtZW50KGNoaWxkKSA/IG1hcEZuKGNoaWxkKSA6IGNoaWxkO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoY2hpbGRyZW4pIENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiBuZXh0ID8gbmV4dFtrZXldIDogcHJldltrZXldO1xuICB9IC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuXG5cbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGk7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcblxuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nW25leHRLZXldKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH0gLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG5cblxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcChjaGlsZCwgcHJvcCwgcHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9IG51bGwgPyBwcm9wc1twcm9wXSA6IGNoaWxkLnByb3BzW3Byb3BdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIG9uRXhpdGVkKSB7XG4gIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gIHZhciBjaGlsZHJlbiA9IG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2tleV07XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZCkpIHJldHVybjtcbiAgICB2YXIgaGFzUHJldiA9IChrZXkgaW4gcHJldkNoaWxkTWFwcGluZyk7XG4gICAgdmFyIGhhc05leHQgPSAoa2V5IGluIG5leHRDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9IGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDaGlsZE1hcHBpbmcsIGdldEluaXRpYWxDaGlsZE1hcHBpbmcsIGdldE5leHRDaGlsZE1hcHBpbmcgfSBmcm9tICcuL3V0aWxzL0NoaWxkTWFwcGluZyc7XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufTtcbi8qKlxuICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gKiAoYDxUcmFuc2l0aW9uPmAgYW5kIGA8Q1NTVHJhbnNpdGlvbj5gKSBpbiBhIGxpc3QuIExpa2Ugd2l0aCB0aGUgdHJhbnNpdGlvblxuICogY29tcG9uZW50cywgYDxUcmFuc2l0aW9uR3JvdXA+YCBpcyBhIHN0YXRlIG1hY2hpbmUgZm9yIG1hbmFnaW5nIHRoZSBtb3VudGluZ1xuICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gKlxuICogQ29uc2lkZXIgdGhlIGV4YW1wbGUgYmVsb3cuIEFzIGl0ZW1zIGFyZSByZW1vdmVkIG9yIGFkZGVkIHRvIHRoZSBUb2RvTGlzdCB0aGVcbiAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gKlxuICogTm90ZSB0aGF0IGA8VHJhbnNpdGlvbkdyb3VwPmAgIGRvZXMgbm90IGRlZmluZSBhbnkgYW5pbWF0aW9uIGJlaGF2aW9yIVxuICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnQuIFRoaXMgbWVhbnMgeW91IGNhbiBtaXggYW5kIG1hdGNoIGFuaW1hdGlvbnMgYWNyb3NzIGRpZmZlcmVudCBsaXN0XG4gKiBpdGVtcy5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgaGFuZGxlRXhpdGVkID0gX3JlZi5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGZpcnN0UmVuZGVyID0gX3JlZi5maXJzdFJlbmRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IGZpcnN0UmVuZGVyID8gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH0gLy8gbm9kZSBpcyBgdW5kZWZpbmVkYCB3aGVuIHVzZXIgcHJvdmlkZWQgYG5vZGVSZWZgIHByb3BcbiAgO1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoY2hpbGQsIG5vZGUpIHtcbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGQua2V5IGluIGN1cnJlbnRDaGlsZE1hcHBpbmcpIHJldHVybjtcblxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgY2hpbGQucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX2V4dGVuZHMoe30sIHN0YXRlLmNoaWxkcmVuKTtcblxuICAgICAgICBkZWxldGUgY2hpbGRyZW5bY2hpbGQua2V5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgY2hpbGRGYWN0b3J5ID0gX3RoaXMkcHJvcHMuY2hpbGRGYWN0b3J5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRcIiwgXCJjaGlsZEZhY3RvcnlcIl0pO1xuXG4gICAgdmFyIGNvbnRleHRWYWx1ZSA9IHRoaXMuc3RhdGUuY29udGV4dFZhbHVlO1xuICAgIHZhciBjaGlsZHJlbiA9IHZhbHVlcyh0aGlzLnN0YXRlLmNoaWxkcmVuKS5tYXAoY2hpbGRGYWN0b3J5KTtcbiAgICBkZWxldGUgcHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgcHJvcHMuZXhpdDtcblxuICAgIGlmIChDb21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb25Hcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIGA8VHJhbnNpdGlvbkdyb3VwPmAgcmVuZGVycyBhIGA8ZGl2PmAgYnkgZGVmYXVsdC4gWW91IGNhbiBjaGFuZ2UgdGhpc1xuICAgKiBiZWhhdmlvciBieSBwcm92aWRpbmcgYSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBJZiB5b3UgdXNlIFJlYWN0IHYxNisgYW5kIHdvdWxkIGxpa2UgdG8gYXZvaWQgYSB3cmFwcGluZyBgPGRpdj5gIGVsZW1lbnRcbiAgICogeW91IGNhbiBwYXNzIGluIGBjb21wb25lbnQ9e251bGx9YC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIHdyYXBwaW5nIGRpdlxuICAgKiBib3JrcyB5b3VyIGNzcyBzdHlsZXMuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudHMsIHRoYXQgYXJlIHRvZ2dsZWQgYGluYCBhbmQgb3V0IGFzIHRoZXlcbiAgICogbGVhdmUuIHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIHdpbGwgaW5qZWN0IHNwZWNpZmljIHRyYW5zaXRpb24gcHJvcHMsIHNvXG4gICAqIHJlbWVtYmVyIHRvIHNwcmVhZCB0aGVtIHRocm91Z2ggaWYgeW91IGFyZSB3cmFwcGluZyB0aGUgYDxUcmFuc2l0aW9uPmAgYXNcbiAgICogd2l0aCBvdXIgYDxGYWRlPmAgZXhhbXBsZS5cbiAgICpcbiAgICogV2hpbGUgdGhpcyBjb21wb25lbnQgaXMgbWVhbnQgZm9yIG11bHRpcGxlIGBUcmFuc2l0aW9uYCBvciBgQ1NTVHJhbnNpdGlvbmBcbiAgICogY2hpbGRyZW4sIHNvbWV0aW1lcyB5b3UgbWF5IHdhbnQgdG8gaGF2ZSBhIHNpbmdsZSB0cmFuc2l0aW9uIGNoaWxkIHdpdGhcbiAgICogY29udGVudCB0aGF0IHlvdSB3YW50IHRvIGJlIHRyYW5zaXRpb25lZCBvdXQgYW5kIGluIHdoZW4geW91IGNoYW5nZSBpdFxuICAgKiAoZS5nLiByb3V0ZXMsIGltYWdlcyBldGMuKSBJbiB0aGF0IGNhc2UgeW91IGNhbiBjaGFuZ2UgdGhlIGBrZXlgIHByb3Agb2ZcbiAgICogdGhlIHRyYW5zaXRpb24gY2hpbGQgYXMgeW91IGNoYW5nZSBpdHMgY29udGVudCwgdGhpcyB3aWxsIGNhdXNlXG4gICAqIGBUcmFuc2l0aW9uR3JvdXBgIHRvIHRyYW5zaXRpb24gdGhlIGNoaWxkIG91dCBhbmQgYmFjayBpbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBhcHBlYXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBlbnRlciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZXhpdCBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBleGl0aW5nLlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBkb25lIGJ5IHVzaW5nIGBjbG9uZUVsZW1lbnRgIGhvd2V2ZXIgaW4gdGhlIGNhc2Ugb2YgYW4gZXhpdGluZ1xuICAgKiBjaGlsZCB0aGUgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYW5kIG5vdCBhY2Nlc3NpYmxlIHRvIHRoZSBjb25zdW1lci5cbiAgICpcbiAgICogSWYgeW91IGRvIG5lZWQgdG8gdXBkYXRlIGEgY2hpbGQgYXMgaXQgbGVhdmVzIHlvdSBjYW4gcHJvdmlkZSBhIGBjaGlsZEZhY3RvcnlgXG4gICAqIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmUgbGVhdmluZy5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24oY2hpbGQ6IFJlYWN0RWxlbWVudCkgLT4gUmVhY3RFbGVtZW50XG4gICAqL1xuICBjaGlsZEZhY3Rvcnk6IFByb3BUeXBlcy5mdW5jXG59IDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbkdyb3VwOyIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiaW1wb3J0IHsgaCBhcyBoYXNPd25Qcm9wZXJ0eSwgRSBhcyBFbW90aW9uLCBjIGFzIGNyZWF0ZUVtb3Rpb25Qcm9wcywgdyBhcyB3aXRoRW1vdGlvbkNhY2hlLCBUIGFzIFRoZW1lQ29udGV4dCwgaSBhcyBpc0Jyb3dzZXIkMSB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LWMzOTYxN2Q4LmJyb3dzZXIuZXNtLmpzJztcbmV4cG9ydCB7IEMgYXMgQ2FjaGVQcm92aWRlciwgVCBhcyBUaGVtZUNvbnRleHQsIGEgYXMgVGhlbWVQcm92aWRlciwgXyBhcyBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUsIHUgYXMgdXNlVGhlbWUsIHcgYXMgd2l0aEVtb3Rpb25DYWNoZSwgYiBhcyB3aXRoVGhlbWUgfSBmcm9tICcuL2Vtb3Rpb24tZWxlbWVudC1jMzk2MTdkOC5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbnNlcnRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBnZXRSZWdpc3RlcmVkU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbnZhciBwa2cgPSB7XG5cdG5hbWU6IFwiQGVtb3Rpb24vcmVhY3RcIixcblx0dmVyc2lvbjogXCIxMS4xMS4xXCIsXG5cdG1haW46IFwiZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiLFxuXHRtb2R1bGU6IFwiZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiLFxuXHRicm93c2VyOiB7XG5cdFx0XCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qc1wiXG5cdH0sXG5cdGV4cG9ydHM6IHtcblx0XHRcIi5cIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImltcG9ydFwiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5tanNcIixcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vanN4LXJ1bnRpbWVcIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImltcG9ydFwiOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmNqcy5tanNcIixcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vX2lzb2xhdGVkLWhucnNcIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImltcG9ydFwiOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmNqcy5tanNcIixcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vanN4LWRldi1ydW50aW1lXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJpbXBvcnRcIjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmNqcy5tanNcIixcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9wYWNrYWdlLmpzb25cIjogXCIuL3BhY2thZ2UuanNvblwiLFxuXHRcdFwiLi90eXBlcy9jc3MtcHJvcFwiOiBcIi4vdHlwZXMvY3NzLXByb3AuZC50c1wiLFxuXHRcdFwiLi9tYWNyb1wiOiB7XG5cdFx0XHR0eXBlczoge1xuXHRcdFx0XHRcImltcG9ydFwiOiBcIi4vbWFjcm8uZC5tdHNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9tYWNyby5kLnRzXCJcblx0XHRcdH0sXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL21hY3JvLmpzXCJcblx0XHR9XG5cdH0sXG5cdHR5cGVzOiBcInR5cGVzL2luZGV4LmQudHNcIixcblx0ZmlsZXM6IFtcblx0XHRcInNyY1wiLFxuXHRcdFwiZGlzdFwiLFxuXHRcdFwianN4LXJ1bnRpbWVcIixcblx0XHRcImpzeC1kZXYtcnVudGltZVwiLFxuXHRcdFwiX2lzb2xhdGVkLWhucnNcIixcblx0XHRcInR5cGVzLyouZC50c1wiLFxuXHRcdFwibWFjcm8uKlwiXG5cdF0sXG5cdHNpZGVFZmZlY3RzOiBmYWxzZSxcblx0YXV0aG9yOiBcIkVtb3Rpb24gQ29udHJpYnV0b3JzXCIsXG5cdGxpY2Vuc2U6IFwiTUlUXCIsXG5cdHNjcmlwdHM6IHtcblx0XHRcInRlc3Q6dHlwZXNjcmlwdFwiOiBcImR0c2xpbnQgdHlwZXNcIlxuXHR9LFxuXHRkZXBlbmRlbmNpZXM6IHtcblx0XHRcIkBiYWJlbC9ydW50aW1lXCI6IFwiXjcuMTguM1wiLFxuXHRcdFwiQGVtb3Rpb24vYmFiZWwtcGx1Z2luXCI6IFwiXjExLjExLjBcIixcblx0XHRcIkBlbW90aW9uL2NhY2hlXCI6IFwiXjExLjExLjBcIixcblx0XHRcIkBlbW90aW9uL3NlcmlhbGl6ZVwiOiBcIl4xLjEuMlwiLFxuXHRcdFwiQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3NcIjogXCJeMS4wLjFcIixcblx0XHRcIkBlbW90aW9uL3V0aWxzXCI6IFwiXjEuMi4xXCIsXG5cdFx0XCJAZW1vdGlvbi93ZWFrLW1lbW9pemVcIjogXCJeMC4zLjFcIixcblx0XHRcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI6IFwiXjMuMy4xXCJcblx0fSxcblx0cGVlckRlcGVuZGVuY2llczoge1xuXHRcdHJlYWN0OiBcIj49MTYuOC4wXCJcblx0fSxcblx0cGVlckRlcGVuZGVuY2llc01ldGE6IHtcblx0XHRcIkB0eXBlcy9yZWFjdFwiOiB7XG5cdFx0XHRvcHRpb25hbDogdHJ1ZVxuXHRcdH1cblx0fSxcblx0ZGV2RGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAZGVmaW5pdGVseXR5cGVkL2R0c2xpbnRcIjogXCIwLjAuMTEyXCIsXG5cdFx0XCJAZW1vdGlvbi9jc3NcIjogXCIxMS4xMS4wXCIsXG5cdFx0XCJAZW1vdGlvbi9jc3MtcHJldHRpZmllclwiOiBcIjEuMS4zXCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJ2ZXJcIjogXCIxMS4xMS4wXCIsXG5cdFx0XCJAZW1vdGlvbi9zdHlsZWRcIjogXCIxMS4xMS4wXCIsXG5cdFx0XCJodG1sLXRhZy1uYW1lc1wiOiBcIl4xLjEuMlwiLFxuXHRcdHJlYWN0OiBcIjE2LjE0LjBcIixcblx0XHRcInN2Zy10YWctbmFtZXNcIjogXCJeMS4xLjFcIixcblx0XHR0eXBlc2NyaXB0OiBcIl40LjUuNVwiXG5cdH0sXG5cdHJlcG9zaXRvcnk6IFwiaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi90cmVlL21haW4vcGFja2FnZXMvcmVhY3RcIixcblx0cHVibGlzaENvbmZpZzoge1xuXHRcdGFjY2VzczogXCJwdWJsaWNcIlxuXHR9LFxuXHRcInVtZDptYWluXCI6IFwiZGlzdC9lbW90aW9uLXJlYWN0LnVtZC5taW4uanNcIixcblx0cHJlY29uc3RydWN0OiB7XG5cdFx0ZW50cnlwb2ludHM6IFtcblx0XHRcdFwiLi9pbmRleC5qc1wiLFxuXHRcdFx0XCIuL2pzeC1ydW50aW1lLmpzXCIsXG5cdFx0XHRcIi4vanN4LWRldi1ydW50aW1lLmpzXCIsXG5cdFx0XHRcIi4vX2lzb2xhdGVkLWhucnMuanNcIlxuXHRcdF0sXG5cdFx0dW1kTmFtZTogXCJlbW90aW9uUmVhY3RcIixcblx0XHRleHBvcnRzOiB7XG5cdFx0XHRlbnZDb25kaXRpb25zOiBbXG5cdFx0XHRcdFwiYnJvd3NlclwiLFxuXHRcdFx0XHRcIndvcmtlclwiXG5cdFx0XHRdLFxuXHRcdFx0ZXh0cmE6IHtcblx0XHRcdFx0XCIuL3R5cGVzL2Nzcy1wcm9wXCI6IFwiLi90eXBlcy9jc3MtcHJvcC5kLnRzXCIsXG5cdFx0XHRcdFwiLi9tYWNyb1wiOiB7XG5cdFx0XHRcdFx0dHlwZXM6IHtcblx0XHRcdFx0XHRcdFwiaW1wb3J0XCI6IFwiLi9tYWNyby5kLm10c1wiLFxuXHRcdFx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9tYWNyby5kLnRzXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vbWFjcm8uanNcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG52YXIganN4ID0gZnVuY3Rpb24ganN4KHR5cGUsIHByb3BzKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gIGlmIChwcm9wcyA9PSBudWxsIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCAnY3NzJykpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgfVxuXG4gIHZhciBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gIHZhciBjcmVhdGVFbGVtZW50QXJnQXJyYXkgPSBuZXcgQXJyYXkoYXJnc0xlbmd0aCk7XG4gIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVswXSA9IEVtb3Rpb247XG4gIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVsxXSA9IGNyZWF0ZUVtb3Rpb25Qcm9wcyh0eXBlLCBwcm9wcyk7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIHtcbiAgICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbaV0gPSBhcmdzW2ldO1xuICB9IC8vICRGbG93Rml4TWVcblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KG51bGwsIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSk7XG59O1xuXG52YXIgd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsID0gZmFsc2U7IC8vIG1haW50YWluIHBsYWNlIG92ZXIgcmVyZW5kZXJzLlxuLy8gaW5pdGlhbCByZW5kZXIgZnJvbSBicm93c2VyLCBpbnNlcnRCZWZvcmUgY29udGV4dC5zaGVldC50YWdzWzBdIG9yIGlmIGEgc3R5bGUgaGFzbid0IGJlZW4gaW5zZXJ0ZWQgdGhlcmUgeWV0LCBhcHBlbmRDaGlsZFxuLy8gaW5pdGlhbCBjbGllbnQtc2lkZSByZW5kZXIgZnJvbSBTU1IsIHVzZSBwbGFjZSBvZiBoeWRyYXRpbmcgdGFnXG5cbnZhciBHbG9iYWwgPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCAmJiAoIC8vIGNoZWNrIGZvciBjbGFzc05hbWUgYXMgd2VsbCBzaW5jZSB0aGUgdXNlciBpc1xuICAvLyBwcm9iYWJseSB1c2luZyB0aGUgY3VzdG9tIGNyZWF0ZUVsZW1lbnQgd2hpY2hcbiAgLy8gbWVhbnMgaXQgd2lsbCBiZSB0dXJuZWQgaW50byBhIGNsYXNzTmFtZSBwcm9wXG4gIC8vICRGbG93Rml4TWUgSSBkb24ndCByZWFsbHkgd2FudCB0byBhZGQgaXQgdG8gdGhlIHR5cGUgc2luY2UgaXQgc2hvdWxkbid0IGJlIHVzZWRcbiAgcHJvcHMuY2xhc3NOYW1lIHx8IHByb3BzLmNzcykpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiSXQgbG9va3MgbGlrZSB5b3UncmUgdXNpbmcgdGhlIGNzcyBwcm9wIG9uIEdsb2JhbCwgZGlkIHlvdSBtZWFuIHRvIHVzZSB0aGUgc3R5bGVzIHByb3AgaW5zdGVhZD9cIik7XG4gICAgd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzdHlsZXMgPSBwcm9wcy5zdHlsZXM7XG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzdHlsZXNdLCB1bmRlZmluZWQsIFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KSk7XG5cbiAgaWYgKCFpc0Jyb3dzZXIkMSkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIHNlcmlhbGl6ZWROYW1lcyA9IHNlcmlhbGl6ZWQubmFtZTtcbiAgICB2YXIgc2VyaWFsaXplZFN0eWxlcyA9IHNlcmlhbGl6ZWQuc3R5bGVzO1xuICAgIHZhciBuZXh0ID0gc2VyaWFsaXplZC5uZXh0O1xuXG4gICAgd2hpbGUgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc2VyaWFsaXplZE5hbWVzICs9ICcgJyArIG5leHQubmFtZTtcbiAgICAgIHNlcmlhbGl6ZWRTdHlsZXMgKz0gbmV4dC5zdHlsZXM7XG4gICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgIH1cblxuICAgIHZhciBzaG91bGRDYWNoZSA9IGNhY2hlLmNvbXBhdCA9PT0gdHJ1ZTtcbiAgICB2YXIgcnVsZXMgPSBjYWNoZS5pbnNlcnQoXCJcIiwge1xuICAgICAgbmFtZTogc2VyaWFsaXplZE5hbWVzLFxuICAgICAgc3R5bGVzOiBzZXJpYWxpemVkU3R5bGVzXG4gICAgfSwgY2FjaGUuc2hlZXQsIHNob3VsZENhY2hlKTtcblxuICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiwgKF9yZWYgPSB7fSwgX3JlZltcImRhdGEtZW1vdGlvblwiXSA9IGNhY2hlLmtleSArIFwiLWdsb2JhbCBcIiArIHNlcmlhbGl6ZWROYW1lcywgX3JlZi5kYW5nZXJvdXNseVNldElubmVySFRNTCA9IHtcbiAgICAgIF9faHRtbDogcnVsZXNcbiAgICB9LCBfcmVmLm5vbmNlID0gY2FjaGUuc2hlZXQubm9uY2UsIF9yZWYpKTtcbiAgfSAvLyB5ZXMsIGkga25vdyB0aGVzZSBob29rcyBhcmUgdXNlZCBjb25kaXRpb25hbGx5XG4gIC8vIGJ1dCBpdCBpcyBiYXNlZCBvbiBhIGNvbnN0YW50IHRoYXQgd2lsbCBuZXZlciBjaGFuZ2UgYXQgcnVudGltZVxuICAvLyBpdCdzIGVmZmVjdGl2ZWx5IGxpa2UgaGF2aW5nIHR3byBpbXBsZW1lbnRhdGlvbnMgYW5kIHN3aXRjaGluZyB0aGVtIG91dFxuICAvLyBzbyBpdCdzIG5vdCBhY3R1YWxseSBicmVha2luZyBhbnl0aGluZ1xuXG5cbiAgdmFyIHNoZWV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGtleSA9IGNhY2hlLmtleSArIFwiLWdsb2JhbFwiOyAvLyB1c2UgY2FzZSBvZiBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2lzc3Vlcy8yNjc1XG5cbiAgICB2YXIgc2hlZXQgPSBuZXcgY2FjaGUuc2hlZXQuY29uc3RydWN0b3Ioe1xuICAgICAga2V5OiBrZXksXG4gICAgICBub25jZTogY2FjaGUuc2hlZXQubm9uY2UsXG4gICAgICBjb250YWluZXI6IGNhY2hlLnNoZWV0LmNvbnRhaW5lcixcbiAgICAgIHNwZWVkeTogY2FjaGUuc2hlZXQuaXNTcGVlZHlcbiAgICB9KTtcbiAgICB2YXIgcmVoeWRyYXRpbmcgPSBmYWxzZTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbZGF0YS1lbW90aW9uPVxcXCJcIiArIGtleSArIFwiIFwiICsgc2VyaWFsaXplZC5uYW1lICsgXCJcXFwiXVwiKTtcblxuICAgIGlmIChjYWNoZS5zaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgc2hlZXQuYmVmb3JlID0gY2FjaGUuc2hlZXQudGFnc1swXTtcbiAgICB9XG5cbiAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgcmVoeWRyYXRpbmcgPSB0cnVlOyAvLyBjbGVhciB0aGUgaGFzaCBzbyB0aGlzIG5vZGUgd29uJ3QgYmUgcmVjb2duaXphYmxlIGFzIHJlaHlkcmF0YWJsZSBieSBvdGhlciA8R2xvYmFsLz5zXG5cbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBrZXkpO1xuICAgICAgc2hlZXQuaHlkcmF0ZShbbm9kZV0pO1xuICAgIH1cblxuICAgIHNoZWV0UmVmLmN1cnJlbnQgPSBbc2hlZXQsIHJlaHlkcmF0aW5nXTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICB9O1xuICB9LCBbY2FjaGVdKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hlZXRSZWZDdXJyZW50ID0gc2hlZXRSZWYuY3VycmVudDtcbiAgICB2YXIgc2hlZXQgPSBzaGVldFJlZkN1cnJlbnRbMF0sXG4gICAgICAgIHJlaHlkcmF0aW5nID0gc2hlZXRSZWZDdXJyZW50WzFdO1xuXG4gICAgaWYgKHJlaHlkcmF0aW5nKSB7XG4gICAgICBzaGVldFJlZkN1cnJlbnRbMV0gPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2VyaWFsaXplZC5uZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGluc2VydCBrZXlmcmFtZXNcbiAgICAgIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZC5uZXh0LCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoc2hlZXQudGFncy5sZW5ndGgpIHtcbiAgICAgIC8vIGlmIHRoaXMgZG9lc24ndCBleGlzdCB0aGVuIGl0IHdpbGwgYmUgbnVsbCBzbyB0aGUgc3R5bGUgZWxlbWVudCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICB2YXIgZWxlbWVudCA9IHNoZWV0LnRhZ3Nbc2hlZXQudGFncy5sZW5ndGggLSAxXS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICBzaGVldC5iZWZvcmUgPSBlbGVtZW50O1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICB9XG5cbiAgICBjYWNoZS5pbnNlcnQoXCJcIiwgc2VyaWFsaXplZCwgc2hlZXQsIGZhbHNlKTtcbiAgfSwgW2NhY2hlLCBzZXJpYWxpemVkLm5hbWVdKTtcbiAgcmV0dXJuIG51bGw7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgR2xvYmFsLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25HbG9iYWwnO1xufVxuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplU3R5bGVzKGFyZ3MpO1xufVxuXG52YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24ga2V5ZnJhbWVzKCkge1xuICB2YXIgaW5zZXJ0YWJsZSA9IGNzcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIHZhciBuYW1lID0gXCJhbmltYXRpb24tXCIgKyBpbnNlcnRhYmxlLm5hbWU7IC8vICRGbG93Rml4TWVcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBcIkBrZXlmcmFtZXMgXCIgKyBuYW1lICsgXCJ7XCIgKyBpbnNlcnRhYmxlLnN0eWxlcyArIFwifVwiLFxuICAgIGFuaW06IDEsXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiX0VNT19cIiArIHRoaXMubmFtZSArIFwiX1wiICsgdGhpcy5zdHlsZXMgKyBcIl9FTU9fXCI7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGNsYXNzbmFtZXMgPSBmdW5jdGlvbiBjbGFzc25hbWVzKGFyZ3MpIHtcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3NbaV07XG4gICAgaWYgKGFyZyA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YXIgdG9BZGQgPSB2b2lkIDA7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmcuc3R5bGVzICE9PSB1bmRlZmluZWQgJiYgYXJnLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdZb3UgaGF2ZSBwYXNzZWQgc3R5bGVzIGNyZWF0ZWQgd2l0aCBgY3NzYCBmcm9tIGBAZW1vdGlvbi9yZWFjdGAgcGFja2FnZSB0byB0aGUgYGN4YC5cXG4nICsgJ2BjeGAgaXMgbWVhbnQgdG8gY29tcG9zZSBjbGFzcyBuYW1lcyAoc3RyaW5ncykgc28geW91IHNob3VsZCBjb252ZXJ0IHRob3NlIHN0eWxlcyB0byBhIGNsYXNzIG5hbWUgYnkgcGFzc2luZyB0aGVtIHRvIHRoZSBgY3NzYCByZWNlaXZlZCBmcm9tIDxDbGFzc05hbWVzLz4gY29tcG9uZW50LicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b0FkZCA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGFyZykge1xuICAgICAgICAgICAgICBpZiAoYXJnW2tdICYmIGspIHtcbiAgICAgICAgICAgICAgICB0b0FkZCAmJiAodG9BZGQgKz0gJyAnKTtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSBrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHRvQWRkID0gYXJnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvQWRkKSB7XG4gICAgICBjbHMgJiYgKGNscyArPSAnICcpO1xuICAgICAgY2xzICs9IHRvQWRkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59O1xuXG5mdW5jdGlvbiBtZXJnZShyZWdpc3RlcmVkLCBjc3MsIGNsYXNzTmFtZSkge1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtdO1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWUpO1xuXG4gIGlmIChyZWdpc3RlcmVkU3R5bGVzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgcmV0dXJuIHJhd0NsYXNzTmFtZSArIGNzcyhyZWdpc3RlcmVkU3R5bGVzKTtcbn1cblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkQXJyID0gX3JlZi5zZXJpYWxpemVkQXJyO1xuICB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VyaWFsaXplZEFyci5sZW5ndGg7IGkrKykge1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkQXJyW2ldLCBmYWxzZSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBDbGFzc05hbWVzID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIHZhciBoYXNSZW5kZXJlZCA9IGZhbHNlO1xuICB2YXIgc2VyaWFsaXplZEFyciA9IFtdO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3NzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcbiAgICBzZXJpYWxpemVkQXJyLnB1c2goc2VyaWFsaXplZCk7IC8vIHJlZ2lzdHJhdGlvbiBoYXMgdG8gaGFwcGVuIGhlcmUgYXMgdGhlIHJlc3VsdCBvZiB0aGlzIG1pZ2h0IGdldCBjb25zdW1lZCBieSBgY3hgXG5cbiAgICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgZmFsc2UpO1xuICAgIHJldHVybiBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgfTtcblxuICB2YXIgY3ggPSBmdW5jdGlvbiBjeCgpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjeCBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2UoY2FjaGUucmVnaXN0ZXJlZCwgY3NzLCBjbGFzc25hbWVzKGFyZ3MpKTtcbiAgfTtcblxuICB2YXIgY29udGVudCA9IHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgdGhlbWU6IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KVxuICB9O1xuICB2YXIgZWxlID0gcHJvcHMuY2hpbGRyZW4oY29udGVudCk7XG4gIGhhc1JlbmRlcmVkID0gdHJ1ZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZEFycjogc2VyaWFsaXplZEFyclxuICB9KSwgZWxlKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBDbGFzc05hbWVzLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25DbGFzc05hbWVzJztcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnOyAvLyAjMTcyNywgIzI5MDUgZm9yIHNvbWUgcmVhc29uIEplc3QgYW5kIFZpdGVzdCBldmFsdWF0ZSBtb2R1bGVzIHR3aWNlIGlmIHNvbWUgY29uc3VtaW5nIG1vZHVsZSBnZXRzIG1vY2tlZFxuXG4gIHZhciBpc1Rlc3RFbnYgPSB0eXBlb2YgamVzdCAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHZpICE9PSAndW5kZWZpbmVkJztcblxuICBpZiAoaXNCcm93c2VyICYmICFpc1Rlc3RFbnYpIHtcbiAgICAvLyBnbG9iYWxUaGlzIGhhcyB3aWRlIGJyb3dzZXIgc3VwcG9ydCAtIGh0dHBzOi8vY2FuaXVzZS5jb20vP3NlYXJjaD1nbG9iYWxUaGlzLCBOb2RlLmpzIDEyIGFuZCBsYXRlclxuICAgIHZhciBnbG9iYWxDb250ZXh0ID0gLy8gJEZsb3dJZ25vcmVcbiAgICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICA6IGlzQnJvd3NlciA/IHdpbmRvdyA6IGdsb2JhbDtcbiAgICB2YXIgZ2xvYmFsS2V5ID0gXCJfX0VNT1RJT05fUkVBQ1RfXCIgKyBwa2cudmVyc2lvbi5zcGxpdCgnLicpWzBdICsgXCJfX1wiO1xuXG4gICAgaWYgKGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSkge1xuICAgICAgY29uc29sZS53YXJuKCdZb3UgYXJlIGxvYWRpbmcgQGVtb3Rpb24vcmVhY3Qgd2hlbiBpdCBpcyBhbHJlYWR5IGxvYWRlZC4gUnVubmluZyAnICsgJ211bHRpcGxlIGluc3RhbmNlcyBtYXkgY2F1c2UgcHJvYmxlbXMuIFRoaXMgY2FuIGhhcHBlbiBpZiBtdWx0aXBsZSAnICsgJ3ZlcnNpb25zIGFyZSB1c2VkLCBvciBpZiBtdWx0aXBsZSBidWlsZHMgb2YgdGhlIHNhbWUgdmVyc2lvbiBhcmUgJyArICd1c2VkLicpO1xuICAgIH1cblxuICAgIGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSA9IHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2xhc3NOYW1lcywgR2xvYmFsLCBqc3ggYXMgY3JlYXRlRWxlbWVudCwgY3NzLCBqc3gsIGtleWZyYW1lcyB9O1xuIiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNsYXNzZXMsXG4gICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgIHJpcHBsZVgsXG4gICAgcmlwcGxlWSxcbiAgICByaXBwbGVTaXplLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FeGl0ZWQsXG4gICAgdGltZW91dFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtsZWF2aW5nLCBzZXRMZWF2aW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc05hbWUsIGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgY29uc3QgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgY29uc3QgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuICBpZiAoIWluUHJvcCAmJiAhbGVhdmluZykge1xuICAgIHNldExlYXZpbmcodHJ1ZSk7XG4gIH1cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWluUHJvcCAmJiBvbkV4aXRlZCAhPSBudWxsKSB7XG4gICAgICAvLyByZWFjdC10cmFuc2l0aW9uLWdyb3VwI29uRXhpdGVkXG4gICAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KG9uRXhpdGVkLCB0aW1lb3V0KTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW29uRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgICB9KVxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBwdWxzYXRlcywgdHlwaWNhbGx5IGluZGljYXRpbmcgdGhlIGtleWJvYXJkIGZvY3VzIHN0YXRlIG9mIGFuIGVsZW1lbnQuXG4gICAqL1xuICBwdWxzYXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERpYW1ldGVyIG9mIHRoZSByaXBwbGUuXG4gICAqL1xuICByaXBwbGVTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBWZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVk6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBleGl0IGRlbGF5XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBSaXBwbGU7IiwiY29uc3QgZGVmYXVsdEdlbmVyYXRvciA9IGNvbXBvbmVudE5hbWUgPT4gY29tcG9uZW50TmFtZTtcbmNvbnN0IGNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciA9ICgpID0+IHtcbiAgbGV0IGdlbmVyYXRlID0gZGVmYXVsdEdlbmVyYXRvcjtcbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmUoZ2VuZXJhdG9yKSB7XG4gICAgICBnZW5lcmF0ZSA9IGdlbmVyYXRvcjtcbiAgICB9LFxuICAgIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0ZShjb21wb25lbnROYW1lKTtcbiAgICB9LFxuICAgIHJlc2V0KCkge1xuICAgICAgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICAgIH1cbiAgfTtcbn07XG5jb25zdCBDbGFzc05hbWVHZW5lcmF0b3IgPSBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IoKTtcbmV4cG9ydCBkZWZhdWx0IENsYXNzTmFtZUdlbmVyYXRvcjsiLCJpbXBvcnQgQ2xhc3NOYW1lR2VuZXJhdG9yIGZyb20gJy4uL0NsYXNzTmFtZUdlbmVyYXRvcic7XG5cbi8vIElmIEdsb2JhbFN0YXRlU2xvdCBpcyBjaGFuZ2VkLCBHTE9CQUxfU1RBVEVfQ0xBU1NFUyBpblxuLy8gXFxwYWNrYWdlc1xcYXBpLWRvY3MtYnVpbGRlclxcdXRpbHNcXHBhcnNlU2xvdHNBbmRDbGFzc2VzLnRzIG11c3QgYmUgdXBkYXRlZCBhY2NvcmRpbmdseS5cbmNvbnN0IGdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmcgPSB7XG4gIGFjdGl2ZTogJ2FjdGl2ZScsXG4gIGNoZWNrZWQ6ICdjaGVja2VkJyxcbiAgY29tcGxldGVkOiAnY29tcGxldGVkJyxcbiAgZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG4gIGVycm9yOiAnZXJyb3InLFxuICBleHBhbmRlZDogJ2V4cGFuZGVkJyxcbiAgZm9jdXNlZDogJ2ZvY3VzZWQnLFxuICBmb2N1c1Zpc2libGU6ICdmb2N1c1Zpc2libGUnLFxuICBvcGVuOiAnb3BlbicsXG4gIHJlYWRPbmx5OiAncmVhZE9ubHknLFxuICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcbiAgc2VsZWN0ZWQ6ICdzZWxlY3RlZCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90LCBnbG9iYWxTdGF0ZVByZWZpeCA9ICdNdWknKSB7XG4gIGNvbnN0IGdsb2JhbFN0YXRlQ2xhc3MgPSBnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nW3Nsb3RdO1xuICByZXR1cm4gZ2xvYmFsU3RhdGVDbGFzcyA/IGAke2dsb2JhbFN0YXRlUHJlZml4fS0ke2dsb2JhbFN0YXRlQ2xhc3N9YCA6IGAke0NsYXNzTmFtZUdlbmVyYXRvci5nZW5lcmF0ZShjb21wb25lbnROYW1lKX0tJHtzbG90fWA7XG59IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoY29tcG9uZW50TmFtZSwgc2xvdHMsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIHNsb3RzLmZvckVhY2goc2xvdCA9PiB7XG4gICAgcmVzdWx0W3Nsb3RdID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCwgZ2xvYmFsU3RhdGVQcmVmaXgpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG91Y2hSaXBwbGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvdWNoUmlwcGxlJywgc2xvdCk7XG59XG5jb25zdCB0b3VjaFJpcHBsZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb3VjaFJpcHBsZScsIFsncm9vdCcsICdyaXBwbGUnLCAncmlwcGxlVmlzaWJsZScsICdyaXBwbGVQdWxzYXRlJywgJ2NoaWxkJywgJ2NoaWxkTGVhdmluZycsICdjaGlsZFB1bHNhdGUnXSk7XG5leHBvcnQgZGVmYXVsdCB0b3VjaFJpcHBsZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2VudGVyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXTtcbmxldCBfID0gdCA9PiB0LFxuICBfdCxcbiAgX3QyLFxuICBfdDMsXG4gIF90NDtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBSaXBwbGUgZnJvbSAnLi9SaXBwbGUnO1xuaW1wb3J0IHRvdWNoUmlwcGxlQ2xhc3NlcyBmcm9tICcuL3RvdWNoUmlwcGxlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgRFVSQVRJT04gPSA1NTA7XG5leHBvcnQgY29uc3QgREVMQVlfUklQUExFID0gODA7XG5jb25zdCBlbnRlcktleWZyYW1lID0ga2V5ZnJhbWVzKF90IHx8IChfdCA9IF9gXG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICAgIG9wYWNpdHk6IDAuMTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gICAgb3BhY2l0eTogMC4zO1xuICB9XG5gKSk7XG5jb25zdCBleGl0S2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QyIHx8IChfdDIgPSBfYFxuICAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbmApKTtcbmNvbnN0IHB1bHNhdGVLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDMgfHwgKF90MyA9IF9gXG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICB9XG5cbiAgNTAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTIpO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuYCkpO1xuZXhwb3J0IGNvbnN0IFRvdWNoUmlwcGxlUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVRvdWNoUmlwcGxlJyxcbiAgc2xvdDogJ1Jvb3QnXG59KSh7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgekluZGV4OiAwLFxuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG59KTtcblxuLy8gVGhpcyBgc3R5bGVkKClgIGZ1bmN0aW9uIGludm9rZXMga2V5ZnJhbWVzLiBgc3R5bGVkLWNvbXBvbmVudHNgIG9ubHkgc3VwcG9ydHMga2V5ZnJhbWVzXG4vLyBpbiBzdHJpbmcgdGVtcGxhdGVzLiBEbyBub3QgY29udmVydCB0aGVzZSBzdHlsZXMgaW4gSlMgb2JqZWN0IGFzIGl0IHdpbGwgYnJlYWsuXG5leHBvcnQgY29uc3QgVG91Y2hSaXBwbGVSaXBwbGUgPSBzdHlsZWQoUmlwcGxlLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSaXBwbGUnXG59KShfdDQgfHwgKF90NCA9IF9gXG4gIG9wYWNpdHk6IDA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcblxuICAmLiR7MH0ge1xuICAgIG9wYWNpdHk6IDAuMztcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAkezB9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHswfW1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7MH07XG4gIH1cblxuICAmLiR7MH0ge1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHswfW1zO1xuICB9XG5cbiAgJiAuJHswfSB7XG4gICAgb3BhY2l0eTogMTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbiAgfVxuXG4gICYgLiR7MH0ge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgYW5pbWF0aW9uLW5hbWU6ICR7MH07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAkezB9bXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHswfTtcbiAgfVxuXG4gICYgLiR7MH0ge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAvKiBAbm9mbGlwICovXG4gICAgbGVmdDogMHB4O1xuICAgIHRvcDogMDtcbiAgICBhbmltYXRpb24tbmFtZTogJHswfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246IDI1MDBtcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkezB9O1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuICAgIGFuaW1hdGlvbi1kZWxheTogMjAwbXM7XG4gIH1cbmApLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlVmlzaWJsZSwgZW50ZXJLZXlmcmFtZSwgRFVSQVRJT04sICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlUHVsc2F0ZSwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZCwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkTGVhdmluZywgZXhpdEtleWZyYW1lLCBEVVJBVElPTiwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZFB1bHNhdGUsIHB1bHNhdGVLZXlmcmFtZSwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogVE9ETyB2NTogTWFrZSBwcml2YXRlXG4gKi9cbmNvbnN0IFRvdWNoUmlwcGxlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG91Y2hSaXBwbGUoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRvdWNoUmlwcGxlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2VudGVyOiBjZW50ZXJQcm9wID0gZmFsc2UsXG4gICAgICBjbGFzc2VzID0ge30sXG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgW3JpcHBsZXMsIHNldFJpcHBsZXNdID0gUmVhY3QudXNlU3RhdGUoW10pO1xuICBjb25zdCBuZXh0S2V5ID0gUmVhY3QudXNlUmVmKDApO1xuICBjb25zdCByaXBwbGVDYWxsYmFjayA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmlwcGxlQ2FsbGJhY2suY3VycmVudCkge1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCgpO1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9LCBbcmlwcGxlc10pO1xuXG4gIC8vIFVzZWQgdG8gZmlsdGVyIG91dCBtb3VzZSBlbXVsYXRlZCBldmVudHMgb24gbW9iaWxlLlxuICBjb25zdCBpZ25vcmluZ01vdXNlRG93biA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIC8vIFdlIHVzZSBhIHRpbWVyIGluIG9yZGVyIHRvIG9ubHkgc2hvdyB0aGUgcmlwcGxlcyBmb3IgdG91Y2ggXCJjbGlja1wiIGxpa2UgZXZlbnRzLlxuICAvLyBXZSBkb24ndCB3YW50IHRvIGRpc3BsYXkgdGhlIHJpcHBsZSBmb3IgdG91Y2ggc2Nyb2xsIGV2ZW50cy5cbiAgY29uc3Qgc3RhcnRUaW1lciA9IFJlYWN0LnVzZVJlZigwKTtcblxuICAvLyBUaGlzIGlzIHRoZSBob29rIGNhbGxlZCBvbmNlIHRoZSBwcmV2aW91cyB0aW1lb3V0IGlzIHJlYWR5LlxuICBjb25zdCBzdGFydFRpbWVyQ29tbWl0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBjb250YWluZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChzdGFydFRpbWVyLmN1cnJlbnQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuICBjb25zdCBzdGFydENvbW1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrKHBhcmFtcyA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVgsXG4gICAgICByaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgIGNiXG4gICAgfSA9IHBhcmFtcztcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4gWy4uLm9sZFJpcHBsZXMsIC8qI19fUFVSRV9fKi9fanN4KFRvdWNoUmlwcGxlUmlwcGxlLCB7XG4gICAgICBjbGFzc2VzOiB7XG4gICAgICAgIHJpcHBsZTogY2xzeChjbGFzc2VzLnJpcHBsZSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZSksXG4gICAgICAgIHJpcHBsZVZpc2libGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlVmlzaWJsZSksXG4gICAgICAgIHJpcHBsZVB1bHNhdGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlUHVsc2F0ZSksXG4gICAgICAgIGNoaWxkOiBjbHN4KGNsYXNzZXMuY2hpbGQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZCksXG4gICAgICAgIGNoaWxkTGVhdmluZzogY2xzeChjbGFzc2VzLmNoaWxkTGVhdmluZywgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkTGVhdmluZyksXG4gICAgICAgIGNoaWxkUHVsc2F0ZTogY2xzeChjbGFzc2VzLmNoaWxkUHVsc2F0ZSwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkUHVsc2F0ZSlcbiAgICAgIH0sXG4gICAgICB0aW1lb3V0OiBEVVJBVElPTixcbiAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemVcbiAgICB9LCBuZXh0S2V5LmN1cnJlbnQpXSk7XG4gICAgbmV4dEtleS5jdXJyZW50ICs9IDE7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbY2xhc3Nlc10pO1xuICBjb25zdCBzdGFydCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCA9IHt9LCBvcHRpb25zID0ge30sIGNiID0gKCkgPT4ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlID0gZmFsc2UsXG4gICAgICBjZW50ZXIgPSBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgIGZha2VFbGVtZW50ID0gZmFsc2UgLy8gRm9yIHRlc3QgcHVycG9zZXNcbiAgICB9ID0gb3B0aW9ucztcbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ21vdXNlZG93bicgJiYgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCkge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IGNvbnRhaW5lci5jdXJyZW50O1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMFxuICAgIH07XG5cbiAgICAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuICAgIGxldCByaXBwbGVYO1xuICAgIGxldCByaXBwbGVZO1xuICAgIGxldCByaXBwbGVTaXplO1xuICAgIGlmIChjZW50ZXIgfHwgZXZlbnQgPT09IHVuZGVmaW5lZCB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50WCxcbiAgICAgICAgY2xpZW50WVxuICAgICAgfSA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAwID8gZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50O1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgIH1cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogcmVjdC53aWR0aCAqKiAyICsgcmVjdC5oZWlnaHQgKiogMikgLyAzKTtcblxuICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaXMgZXZlbi5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIGNvbnN0IHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KHNpemVYICoqIDIgKyBzaXplWSAqKiAyKTtcbiAgICB9XG5cbiAgICAvLyBUb3VjaGUgZGV2aWNlc1xuICAgIGlmIChldmVudCAhPSBudWxsICYmIGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIC8vIGNoZWNrIHRoYXQgdGhpcyBpc24ndCBhbm90aGVyIHRvdWNoc3RhcnQgZHVlIHRvIG11bHRpdG91Y2hcbiAgICAgIC8vIG90aGVyd2lzZSB3ZSB3aWxsIG9ubHkgY2xlYXIgYSBzaW5nbGUgdGltZXIgd2hlbiB1bm1vdW50aW5nIHdoaWxlIHR3b1xuICAgICAgLy8gYXJlIHJ1bm5pbmdcbiAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gKCkgPT4ge1xuICAgICAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICAgIHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemUsXG4gICAgICAgICAgICBjYlxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBEZWxheSB0aGUgZXhlY3V0aW9uIG9mIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICBzdGFydFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KSB7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQoKTtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBERUxBWV9SSVBQTEUpOyAvLyBXZSBoYXZlIHRvIG1ha2UgYSB0cmFkZW9mZiB3aXRoIHRoaXMgdmFsdWUuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgICAgY2JcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2NlbnRlclByb3AsIHN0YXJ0Q29tbWl0XSk7XG4gIGNvbnN0IHB1bHNhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc3RhcnQoe30sIHtcbiAgICAgIHB1bHNhdGU6IHRydWVcbiAgICB9KTtcbiAgfSwgW3N0YXJ0XSk7XG4gIGNvbnN0IHN0b3AgPSBSZWFjdC51c2VDYWxsYmFjaygoZXZlbnQsIGNiKSA9PiB7XG4gICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7XG5cbiAgICAvLyBUaGUgdG91Y2ggaW50ZXJhY3Rpb24gb2NjdXJzIHRvbyBxdWlja2x5LlxuICAgIC8vIFdlIHN0aWxsIHdhbnQgdG8gc2hvdyByaXBwbGUgZWZmZWN0LlxuICAgIGlmICgoZXZlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IGV2ZW50LnR5cGUpID09PSAndG91Y2hlbmQnICYmIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN0b3AoZXZlbnQsIGNiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgIHNldFJpcHBsZXMob2xkUmlwcGxlcyA9PiB7XG4gICAgICBpZiAob2xkUmlwcGxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBvbGRSaXBwbGVzLnNsaWNlKDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9sZFJpcHBsZXM7XG4gICAgfSk7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoe1xuICAgIHB1bHNhdGUsXG4gICAgc3RhcnQsXG4gICAgc3RvcFxuICB9KSwgW3B1bHNhdGUsIHN0YXJ0LCBzdG9wXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUb3VjaFJpcHBsZVJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3godG91Y2hSaXBwbGVDbGFzc2VzLnJvb3QsIGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IGNvbnRhaW5lclxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uR3JvdXAsIHtcbiAgICAgIGNvbXBvbmVudDogbnVsbCxcbiAgICAgIGV4aXQ6IHRydWUsXG4gICAgICBjaGlsZHJlbjogcmlwcGxlc1xuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG91Y2hSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHN0YXJ0cyBhdCB0aGUgY2VudGVyIG9mIHRoZSBjb21wb25lbnRcbiAgICogcmF0aGVyIHRoYW4gYXQgdGhlIHBvaW50IG9mIGludGVyYWN0aW9uLlxuICAgKi9cbiAgY2VudGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRvdWNoUmlwcGxlOyIsImltcG9ydCB7IHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMgYXMgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCdXR0b25CYXNlJywgc2xvdCk7XG59XG5jb25zdCBidXR0b25CYXNlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbkJhc2UnLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnZm9jdXNWaXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgYnV0dG9uQmFzZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWN0aW9uXCIsIFwiY2VudGVyUmlwcGxlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVSaXBwbGVcIiwgXCJkaXNhYmxlVG91Y2hSaXBwbGVcIiwgXCJmb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcIkxpbmtDb21wb25lbnRcIiwgXCJvbkJsdXJcIiwgXCJvbkNsaWNrXCIsIFwib25Db250ZXh0TWVudVwiLCBcIm9uRHJhZ0xlYXZlXCIsIFwib25Gb2N1c1wiLCBcIm9uRm9jdXNWaXNpYmxlXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcIm9uTW91c2VEb3duXCIsIFwib25Nb3VzZUxlYXZlXCIsIFwib25Nb3VzZVVwXCIsIFwib25Ub3VjaEVuZFwiLCBcIm9uVG91Y2hNb3ZlXCIsIFwib25Ub3VjaFN0YXJ0XCIsIFwidGFiSW5kZXhcIiwgXCJUb3VjaFJpcHBsZVByb3BzXCIsIFwidG91Y2hSaXBwbGVSZWZcIiwgXCJ0eXBlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsIHJlZlR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHVzZUlzRm9jdXNWaXNpYmxlIGZyb20gJy4uL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlJztcbmltcG9ydCBUb3VjaFJpcHBsZSBmcm9tICcuL1RvdWNoUmlwcGxlJztcbmltcG9ydCBidXR0b25CYXNlQ2xhc3NlcywgeyBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9idXR0b25CYXNlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkLFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZm9jdXNWaXNpYmxlICYmICdmb2N1c1Zpc2libGUnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIGlmIChmb2N1c1Zpc2libGUgJiYgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSB7XG4gICAgY29tcG9zZWRDbGFzc2VzLnJvb3QgKz0gYCAke2ZvY3VzVmlzaWJsZUNsYXNzTmFtZX1gO1xuICB9XG4gIHJldHVybiBjb21wb3NlZENsYXNzZXM7XG59O1xuZXhwb3J0IGNvbnN0IEJ1dHRvbkJhc2VSb290ID0gc3R5bGVkKCdidXR0b24nLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICBvdXRsaW5lOiAwLFxuICBib3JkZXI6IDAsXG4gIG1hcmdpbjogMCxcbiAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gIGJvcmRlclJhZGl1czogMCxcbiAgcGFkZGluZzogMCxcbiAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIE1vekFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnLFxuICAvLyBSZXNldFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAvLyBTbyB3ZSB0YWtlIHByZWNlZGVudCBvdmVyIHRoZSBzdHlsZSBvZiBhIG5hdGl2ZSA8YSAvPiBlbGVtZW50LlxuICBjb2xvcjogJ2luaGVyaXQnLFxuICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuICB9LFxuXG4gIFtgJi4ke2J1dHRvbkJhc2VDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIC8vIERpc2FibGUgbGluayBpbnRlcmFjdGlvbnNcbiAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICB9LFxuICAnQG1lZGlhIHByaW50Jzoge1xuICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gIH1cbn0pO1xuXG4vKipcbiAqIGBCdXR0b25CYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYSBidXR0b24uXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgZm9jdXMvcmlwcGxlIGxvZ2ljLlxuICovXG5jb25zdCBCdXR0b25CYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uQmFzZShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQnV0dG9uQmFzZSdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIGNlbnRlclJpcHBsZSA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAnYnV0dG9uJyxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBkaXNhYmxlUmlwcGxlID0gZmFsc2UsXG4gICAgICBkaXNhYmxlVG91Y2hSaXBwbGUgPSBmYWxzZSxcbiAgICAgIGZvY3VzUmlwcGxlID0gZmFsc2UsXG4gICAgICBMaW5rQ29tcG9uZW50ID0gJ2EnLFxuICAgICAgb25CbHVyLFxuICAgICAgb25DbGljayxcbiAgICAgIG9uQ29udGV4dE1lbnUsXG4gICAgICBvbkRyYWdMZWF2ZSxcbiAgICAgIG9uRm9jdXMsXG4gICAgICBvbkZvY3VzVmlzaWJsZSxcbiAgICAgIG9uS2V5RG93bixcbiAgICAgIG9uS2V5VXAsXG4gICAgICBvbk1vdXNlRG93bixcbiAgICAgIG9uTW91c2VMZWF2ZSxcbiAgICAgIG9uTW91c2VVcCxcbiAgICAgIG9uVG91Y2hFbmQsXG4gICAgICBvblRvdWNoTW92ZSxcbiAgICAgIG9uVG91Y2hTdGFydCxcbiAgICAgIHRhYkluZGV4ID0gMCxcbiAgICAgIFRvdWNoUmlwcGxlUHJvcHMsXG4gICAgICB0b3VjaFJpcHBsZVJlZixcbiAgICAgIHR5cGVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgYnV0dG9uUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCByaXBwbGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJpcHBsZVJlZiA9IHVzZUZvcmtSZWYocmlwcGxlUmVmLCB0b3VjaFJpcHBsZVJlZik7XG4gIGNvbnN0IHtcbiAgICBpc0ZvY3VzVmlzaWJsZVJlZixcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1Zpc2libGUsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyVmlzaWJsZSxcbiAgICByZWY6IGZvY3VzVmlzaWJsZVJlZlxuICB9ID0gdXNlSXNGb2N1c1Zpc2libGUoKTtcbiAgY29uc3QgW2ZvY3VzVmlzaWJsZSwgc2V0Rm9jdXNWaXNpYmxlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzVmlzaWJsZSkge1xuICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gIH1cbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb24sICgpID0+ICh7XG4gICAgZm9jdXNWaXNpYmxlOiAoKSA9PiB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICBidXR0b25SZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSksIFtdKTtcbiAgY29uc3QgW21vdW50ZWRTdGF0ZSwgc2V0TW91bnRlZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRNb3VudGVkU3RhdGUodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgY29uc3QgZW5hYmxlVG91Y2hSaXBwbGUgPSBtb3VudGVkU3RhdGUgJiYgIWRpc2FibGVSaXBwbGUgJiYgIWRpc2FibGVkO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChmb2N1c1Zpc2libGUgJiYgZm9jdXNSaXBwbGUgJiYgIWRpc2FibGVSaXBwbGUgJiYgbW91bnRlZFN0YXRlKSB7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKCk7XG4gICAgfVxuICB9LCBbZGlzYWJsZVJpcHBsZSwgZm9jdXNSaXBwbGUsIGZvY3VzVmlzaWJsZSwgbW91bnRlZFN0YXRlXSk7XG4gIGZ1bmN0aW9uIHVzZVJpcHBsZUhhbmRsZXIocmlwcGxlQWN0aW9uLCBldmVudENhbGxiYWNrLCBza2lwUmlwcGxlQWN0aW9uID0gZGlzYWJsZVRvdWNoUmlwcGxlKSB7XG4gICAgcmV0dXJuIHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50Q2FsbGJhY2spIHtcbiAgICAgICAgZXZlbnRDYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpZ25vcmUgPSBza2lwUmlwcGxlQWN0aW9uO1xuICAgICAgaWYgKCFpZ25vcmUgJiYgcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnRbcmlwcGxlQWN0aW9uXShldmVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuICBjb25zdCBoYW5kbGVNb3VzZURvd24gPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uTW91c2VEb3duKTtcbiAgY29uc3QgaGFuZGxlQ29udGV4dE1lbnUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Db250ZXh0TWVudSk7XG4gIGNvbnN0IGhhbmRsZURyYWdMZWF2ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbkRyYWdMZWF2ZSk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlVXAgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Nb3VzZVVwKTtcbiAgY29uc3QgaGFuZGxlTW91c2VMZWF2ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBldmVudCA9PiB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVUb3VjaFN0YXJ0ID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xuICBjb25zdCBoYW5kbGVUb3VjaEVuZCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoRW5kKTtcbiAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hNb3ZlKTtcbiAgY29uc3QgaGFuZGxlQmx1ciA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBldmVudCA9PiB7XG4gICAgaGFuZGxlQmx1clZpc2libGUoZXZlbnQpO1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSBmYWxzZSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSB1c2VFdmVudENhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICAvLyBGaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzc2OVxuICAgIGlmICghYnV0dG9uUmVmLmN1cnJlbnQpIHtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICB9XG4gICAgaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gdHJ1ZSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgaWYgKG9uRm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIG9uRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGlzTm9uTmF0aXZlQnV0dG9uID0gKCkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGJ1dHRvblJlZi5jdXJyZW50O1xuICAgIHJldHVybiBjb21wb25lbnQgJiYgY29tcG9uZW50ICE9PSAnYnV0dG9uJyAmJiAhKGJ1dHRvbi50YWdOYW1lID09PSAnQScgJiYgYnV0dG9uLmhyZWYpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJRTExIHNoaW0gZm9yIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L3JlcGVhdFxuICAgKi9cbiAgY29uc3Qga2V5ZG93blJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSB1c2VFdmVudENhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICAvLyBDaGVjayBpZiBrZXkgaXMgYWxyZWFkeSBkb3duIHRvIGF2b2lkIHJlcGVhdHMgYmVpbmcgY291bnRlZCBhcyBtdWx0aXBsZSBhY3RpdmF0aW9uc1xuICAgIGlmIChmb2N1c1JpcHBsZSAmJiAha2V5ZG93blJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiByaXBwbGVSZWYuY3VycmVudCAmJiBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0b3AoZXZlbnQsICgpID0+IHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RhcnQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnRW50ZXInICYmICFkaXNhYmxlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUtleVVwID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgLy8gY2FsbGluZyBwcmV2ZW50RGVmYXVsdCBpbiBrZXlVcCBvbiBhIDxidXR0b24+IHdpbGwgbm90IGRpc3BhdGNoIGEgY2xpY2sgZXZlbnQgaWYgU3BhY2UgaXMgcHJlc3NlZFxuICAgIC8vIGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9idXR0b24ta2V5dXAtcHJldmVudGRlZmF1bHQtZG43ZjBcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgZXZlbnQua2V5ID09PSAnICcgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0b3AoZXZlbnQsICgpID0+IHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnQucHVsc2F0ZShldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKG9uS2V5VXApIHtcbiAgICAgIG9uS2V5VXAoZXZlbnQpO1xuICAgIH1cblxuICAgIC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuICAgIGlmIChvbkNsaWNrICYmIGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBsZXQgQ29tcG9uZW50UHJvcCA9IGNvbXBvbmVudDtcbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nICYmIChvdGhlci5ocmVmIHx8IG90aGVyLnRvKSkge1xuICAgIENvbXBvbmVudFByb3AgPSBMaW5rQ29tcG9uZW50O1xuICB9XG4gIGNvbnN0IGJ1dHRvblByb3BzID0ge307XG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlID09PSB1bmRlZmluZWQgPyAnYnV0dG9uJyA6IHR5cGU7XG4gICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIW90aGVyLmhyZWYgJiYgIW90aGVyLnRvKSB7XG4gICAgICBidXR0b25Qcm9wcy5yb2xlID0gJ2J1dHRvbic7XG4gICAgfVxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgYnV0dG9uUHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IGRpc2FibGVkO1xuICAgIH1cbiAgfVxuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgZm9jdXNWaXNpYmxlUmVmLCBidXR0b25SZWYpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoZW5hYmxlVG91Y2hSaXBwbGUgJiYgIXJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRoZSBgY29tcG9uZW50YCBwcm9wIHByb3ZpZGVkIHRvIEJ1dHRvbkJhc2UgaXMgaW52YWxpZC4nLCAnUGxlYXNlIG1ha2Ugc3VyZSB0aGUgY2hpbGRyZW4gcHJvcCBpcyByZW5kZXJlZCBpbiB0aGlzIGN1c3RvbSBjb21wb25lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtlbmFibGVUb3VjaFJpcHBsZV0pO1xuICB9XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjZW50ZXJSaXBwbGUsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVSaXBwbGUsXG4gICAgZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgIGZvY3VzUmlwcGxlLFxuICAgIHRhYkluZGV4LFxuICAgIGZvY3VzVmlzaWJsZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEJ1dHRvbkJhc2VSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IENvbXBvbmVudFByb3AsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIG9uQ29udGV4dE1lbnU6IGhhbmRsZUNvbnRleHRNZW51LFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbktleVVwOiBoYW5kbGVLZXlVcCxcbiAgICBvbk1vdXNlRG93bjogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uTW91c2VMZWF2ZTogaGFuZGxlTW91c2VMZWF2ZSxcbiAgICBvbk1vdXNlVXA6IGhhbmRsZU1vdXNlVXAsXG4gICAgb25EcmFnTGVhdmU6IGhhbmRsZURyYWdMZWF2ZSxcbiAgICBvblRvdWNoRW5kOiBoYW5kbGVUb3VjaEVuZCxcbiAgICBvblRvdWNoTW92ZTogaGFuZGxlVG91Y2hNb3ZlLFxuICAgIG9uVG91Y2hTdGFydDogaGFuZGxlVG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4LFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgYnV0dG9uUHJvcHMsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbiwgZW5hYmxlVG91Y2hSaXBwbGUgP1xuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvKiBUb3VjaFJpcHBsZSBpcyBvbmx5IG5lZWRlZCBjbGllbnQtc2lkZSwgeDIgYm9vc3Qgb24gdGhlIHNlcnZlci4gKi9cbiAgICBfanN4KFRvdWNoUmlwcGxlLCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IGhhbmRsZVJpcHBsZVJlZixcbiAgICAgIGNlbnRlcjogY2VudGVyUmlwcGxlXG4gICAgfSwgVG91Y2hSaXBwbGVQcm9wcykpIDogbnVsbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b25CYXNlLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIGBmb2N1c1Zpc2libGUoKWAgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlcyBhcmUgY2VudGVyZWQuXG4gICAqIFRoZXkgd29uJ3Qgc3RhcnQgYXQgdGhlIGN1cnNvciBpbnRlcmFjdGlvbiBwb3NpdGlvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNlbnRlclJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYC5NdWktZm9jdXNWaXNpYmxlYCBjbGFzcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdG91Y2ggcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLmFueSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byByZW5kZXIgYSBsaW5rIHdoZW4gdGhlIGBocmVmYCBwcm9wIGlzIHByb3ZpZGVkLlxuICAgKiBAZGVmYXVsdCAnYSdcbiAgICovXG4gIExpbmtDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ29udGV4dE1lbnU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25EcmFnTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZCB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIFdlIHRyaWdnZXIgYSBgb25Gb2N1c2AgY2FsbGJhY2sgdG9vLlxuICAgKi9cbiAgb25Gb2N1c1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoRW5kOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hNb3ZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIFRvdWNoUmlwcGxlUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBBIHJlZiB0aGF0IHBvaW50cyB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgdG91Y2hSaXBwbGVSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdWxzYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgc3RhcnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBzdG9wOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSlcbiAgfSldKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkJhc2U7IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBjYXBpdGFsaXplOyIsImltcG9ydCB7IHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMgYXMgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJ1dHRvbicsIHNsb3QpO1xufVxuY29uc3QgYnV0dG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbicsIFsncm9vdCcsICd0ZXh0JywgJ3RleHRJbmhlcml0JywgJ3RleHRQcmltYXJ5JywgJ3RleHRTZWNvbmRhcnknLCAndGV4dFN1Y2Nlc3MnLCAndGV4dEVycm9yJywgJ3RleHRJbmZvJywgJ3RleHRXYXJuaW5nJywgJ291dGxpbmVkJywgJ291dGxpbmVkSW5oZXJpdCcsICdvdXRsaW5lZFByaW1hcnknLCAnb3V0bGluZWRTZWNvbmRhcnknLCAnb3V0bGluZWRTdWNjZXNzJywgJ291dGxpbmVkRXJyb3InLCAnb3V0bGluZWRJbmZvJywgJ291dGxpbmVkV2FybmluZycsICdjb250YWluZWQnLCAnY29udGFpbmVkSW5oZXJpdCcsICdjb250YWluZWRQcmltYXJ5JywgJ2NvbnRhaW5lZFNlY29uZGFyeScsICdjb250YWluZWRTdWNjZXNzJywgJ2NvbnRhaW5lZEVycm9yJywgJ2NvbnRhaW5lZEluZm8nLCAnY29udGFpbmVkV2FybmluZycsICdkaXNhYmxlRWxldmF0aW9uJywgJ2ZvY3VzVmlzaWJsZScsICdkaXNhYmxlZCcsICdjb2xvckluaGVyaXQnLCAndGV4dFNpemVTbWFsbCcsICd0ZXh0U2l6ZU1lZGl1bScsICd0ZXh0U2l6ZUxhcmdlJywgJ291dGxpbmVkU2l6ZVNtYWxsJywgJ291dGxpbmVkU2l6ZU1lZGl1bScsICdvdXRsaW5lZFNpemVMYXJnZScsICdjb250YWluZWRTaXplU21hbGwnLCAnY29udGFpbmVkU2l6ZU1lZGl1bScsICdjb250YWluZWRTaXplTGFyZ2UnLCAnc2l6ZU1lZGl1bScsICdzaXplU21hbGwnLCAnc2l6ZUxhcmdlJywgJ2Z1bGxXaWR0aCcsICdzdGFydEljb24nLCAnZW5kSWNvbicsICdpY29uU2l6ZVNtYWxsJywgJ2ljb25TaXplTWVkaXVtJywgJ2ljb25TaXplTGFyZ2UnXSk7XG5leHBvcnQgZGVmYXVsdCBidXR0b25DbGFzc2VzOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgQnV0dG9uR3JvdXBDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQnV0dG9uR3JvdXBDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0J1dHRvbkdyb3VwQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBCdXR0b25Hcm91cENvbnRleHQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0LmRpc3BsYXlOYW1lID0gJ0J1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUVsZXZhdGlvblwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcImVuZEljb25cIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJmdWxsV2lkdGhcIiwgXCJzaXplXCIsIFwic3RhcnRJY29uXCIsIFwidHlwZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBpbnRlcm5hbF9yZXNvbHZlUHJvcHMgYXMgcmVzb2x2ZVByb3BzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGJ1dHRvbkNsYXNzZXMsIHsgZ2V0QnV0dG9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9idXR0b25DbGFzc2VzJztcbmltcG9ydCBCdXR0b25Hcm91cENvbnRleHQgZnJvbSAnLi4vQnV0dG9uR3JvdXAvQnV0dG9uR3JvdXBDb250ZXh0JztcbmltcG9ydCBCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQgZnJvbSAnLi4vQnV0dG9uR3JvdXAvQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0JztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY29sb3IsXG4gICAgZGlzYWJsZUVsZXZhdGlvbixcbiAgICBmdWxsV2lkdGgsXG4gICAgc2l6ZSxcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnQsIGAke3ZhcmlhbnR9JHtjYXBpdGFsaXplKGNvbG9yKX1gLCBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBgJHt2YXJpYW50fVNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgY29sb3IgPT09ICdpbmhlcml0JyAmJiAnY29sb3JJbmhlcml0JywgZGlzYWJsZUVsZXZhdGlvbiAmJiAnZGlzYWJsZUVsZXZhdGlvbicsIGZ1bGxXaWR0aCAmJiAnZnVsbFdpZHRoJ10sXG4gICAgbGFiZWw6IFsnbGFiZWwnXSxcbiAgICBzdGFydEljb246IFsnc3RhcnRJY29uJywgYGljb25TaXplJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIGVuZEljb246IFsnZW5kSWNvbicsIGBpY29uU2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QnV0dG9uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBjbGFzc2VzLCBjb21wb3NlZENsYXNzZXMpO1xufTtcbmNvbnN0IGNvbW1vbkljb25TdHlsZXMgPSBvd25lclN0YXRlID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAnJiA+ICo6bnRoLW9mLXR5cGUoMSknOiB7XG4gICAgZm9udFNpemU6IDE4XG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ21lZGl1bScgJiYge1xuICAnJiA+ICo6bnRoLW9mLXR5cGUoMSknOiB7XG4gICAgZm9udFNpemU6IDIwXG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xhcmdlJyAmJiB7XG4gICcmID4gKjpudGgtb2YtdHlwZSgxKSc6IHtcbiAgICBmb250U2l6ZTogMjJcbiAgfVxufSk7XG5jb25zdCBCdXR0b25Sb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aUJ1dHRvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2Ake293bmVyU3RhdGUudmFyaWFudH0ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdLCBzdHlsZXNbYCR7b3duZXJTdGF0ZS52YXJpYW50fVNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHN0eWxlcy5jb2xvckluaGVyaXQsIG93bmVyU3RhdGUuZGlzYWJsZUVsZXZhdGlvbiAmJiBzdHlsZXMuZGlzYWJsZUVsZXZhdGlvbiwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYgc3R5bGVzLmZ1bGxXaWR0aF07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfdGhlbWUkcGFsZXR0ZSRnZXRDb24sIF90aGVtZSRwYWxldHRlO1xuICBjb25zdCBpbmhlcml0Q29udGFpbmVkQmFja2dyb3VuZENvbG9yID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbODAwXTtcbiAgY29uc3QgaW5oZXJpdENvbnRhaW5lZEhvdmVyQmFja2dyb3VuZENvbG9yID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5LkExMDAgOiB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbiwge1xuICAgIG1pbldpZHRoOiA2NCxcbiAgICBwYWRkaW5nOiAnNnB4IDE2cHgnLFxuICAgIGJvcmRlclJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnLCAnYm9yZGVyLWNvbG9yJywgJ2NvbG9yJ10sIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgIH0pLFxuICAgICcmOmhvdmVyJzogX2V4dGVuZHMoe1xuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnRleHQucHJpbWFyeUNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAndGV4dCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgIH1cbiAgICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW59YCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgIH1cbiAgICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5CdXR0b24uaW5oZXJpdENvbnRhaW5lZEhvdmVyQmcgOiBpbmhlcml0Q29udGFpbmVkSG92ZXJCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzRdLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1syXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5ncmV5WzMwMF1cbiAgICAgIH1cbiAgICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmRhcmssXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbiAgICAgIH1cbiAgICB9KSxcbiAgICAnJjphY3RpdmUnOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzhdXG4gICAgfSksXG4gICAgW2AmLiR7YnV0dG9uQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIHtcbiAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbNl1cbiAgICB9KSxcbiAgICBbYCYuJHtidXR0b25DbGFzc2VzLmRpc2FibGVkfWBdOiBfZXh0ZW5kcyh7XG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmR9YFxuICAgIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYge1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZCxcbiAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbMF0sXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICB9KVxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICd0ZXh0JyAmJiB7XG4gICAgcGFkZGluZzogJzZweCA4cHgnXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3RleHQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgICBwYWRkaW5nOiAnNXB4IDE1cHgnLFxuICAgIGJvcmRlcjogJzFweCBzb2xpZCBjdXJyZW50Q29sb3InXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLFxuICAgIGJvcmRlcjogdGhlbWUudmFycyA/IGAxcHggc29saWQgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyAwLjUpYCA6IGAxcHggc29saWQgJHthbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIDAuNSl9YFxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIHtcbiAgICBjb2xvcjogdGhlbWUudmFycyA/XG4gICAgLy8gdGhpcyBpcyBzYWZlIGJlY2F1c2UgZ3JleSBkb2VzIG5vdCBjaGFuZ2UgYmV0d2VlbiBkZWZhdWx0IGxpZ2h0L2RhcmsgbW9kZVxuICAgIHRoZW1lLnZhcnMucGFsZXR0ZS50ZXh0LnByaW1hcnkgOiAoX3RoZW1lJHBhbGV0dGUkZ2V0Q29uID0gKF90aGVtZSRwYWxldHRlID0gdGhlbWUucGFsZXR0ZSkuZ2V0Q29udHJhc3RUZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHBhbGV0dGUkZ2V0Q29uLmNhbGwoX3RoZW1lJHBhbGV0dGUsIHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdKSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuQnV0dG9uLmluaGVyaXRDb250YWluZWRCZyA6IGluaGVyaXRDb250YWluZWRCYWNrZ3JvdW5kQ29sb3IsXG4gICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1syXVxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmNvbnRyYXN0VGV4dCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbiAgfSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHtcbiAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgIGJvcmRlckNvbG9yOiAnY3VycmVudENvbG9yJ1xuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAndGV4dCcgJiYge1xuICAgIHBhZGRpbmc6ICc0cHggNXB4JyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAndGV4dCcgJiYge1xuICAgIHBhZGRpbmc6ICc4cHggMTFweCcsXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gICAgcGFkZGluZzogJzNweCA5cHgnLFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xhcmdlJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICAgIHBhZGRpbmc6ICc3cHggMjFweCcsXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYge1xuICAgIHBhZGRpbmc6ICc0cHggMTBweCcsXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMylcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGFyZ2UnICYmIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYge1xuICAgIHBhZGRpbmc6ICc4cHggMjJweCcsXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgfSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYge1xuICAgIHdpZHRoOiAnMTAwJSdcbiAgfSk7XG59LCAoe1xuICBvd25lclN0YXRlXG59KSA9PiBvd25lclN0YXRlLmRpc2FibGVFbGV2YXRpb24gJiYge1xuICBib3hTaGFkb3c6ICdub25lJyxcbiAgJyY6aG92ZXInOiB7XG4gICAgYm94U2hhZG93OiAnbm9uZSdcbiAgfSxcbiAgW2AmLiR7YnV0dG9uQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBib3hTaGFkb3c6ICdub25lJ1xuICB9LFxuICAnJjphY3RpdmUnOiB7XG4gICAgYm94U2hhZG93OiAnbm9uZSdcbiAgfSxcbiAgW2AmLiR7YnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGJveFNoYWRvdzogJ25vbmUnXG4gIH1cbn0pO1xuY29uc3QgQnV0dG9uU3RhcnRJY29uID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQnV0dG9uJyxcbiAgc2xvdDogJ1N0YXJ0SWNvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuc3RhcnRJY29uLCBzdHlsZXNbYGljb25TaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgbWFyZ2luUmlnaHQ6IDgsXG4gIG1hcmdpbkxlZnQ6IC00XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBtYXJnaW5MZWZ0OiAtMlxufSwgY29tbW9uSWNvblN0eWxlcyhvd25lclN0YXRlKSkpO1xuY29uc3QgQnV0dG9uRW5kSWNvbiA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUJ1dHRvbicsXG4gIHNsb3Q6ICdFbmRJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5lbmRJY29uLCBzdHlsZXNbYGljb25TaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgbWFyZ2luUmlnaHQ6IC00LFxuICBtYXJnaW5MZWZ0OiA4XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBtYXJnaW5SaWdodDogLTJcbn0sIGNvbW1vbkljb25TdHlsZXMob3duZXJTdGF0ZSkpKTtcbmNvbnN0IEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbihpblByb3BzLCByZWYpIHtcbiAgLy8gcHJvcHMgcHJpb3JpdHk6IGBpblByb3BzYCA+IGBjb250ZXh0UHJvcHNgID4gYHRoZW1lRGVmYXVsdFByb3BzYFxuICBjb25zdCBjb250ZXh0UHJvcHMgPSBSZWFjdC51c2VDb250ZXh0KEJ1dHRvbkdyb3VwQ29udGV4dCk7XG4gIGNvbnN0IGJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dFBvc2l0aW9uQ2xhc3NOYW1lID0gUmVhY3QudXNlQ29udGV4dChCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQpO1xuICBjb25zdCByZXNvbHZlZFByb3BzID0gcmVzb2x2ZVByb3BzKGNvbnRleHRQcm9wcywgaW5Qcm9wcyk7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IHJlc29sdmVkUHJvcHMsXG4gICAgbmFtZTogJ011aUJ1dHRvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgICBjb21wb25lbnQgPSAnYnV0dG9uJyxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBkaXNhYmxlRWxldmF0aW9uID0gZmFsc2UsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICAgIGVuZEljb246IGVuZEljb25Qcm9wLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICBzdGFydEljb246IHN0YXJ0SWNvblByb3AsXG4gICAgICB0eXBlLFxuICAgICAgdmFyaWFudCA9ICd0ZXh0J1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVFbGV2YXRpb24sXG4gICAgZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBzaXplLFxuICAgIHR5cGUsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBzdGFydEljb24gPSBzdGFydEljb25Qcm9wICYmIC8qI19fUFVSRV9fKi9fanN4KEJ1dHRvblN0YXJ0SWNvbiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdGFydEljb24sXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjaGlsZHJlbjogc3RhcnRJY29uUHJvcFxuICB9KTtcbiAgY29uc3QgZW5kSWNvbiA9IGVuZEljb25Qcm9wICYmIC8qI19fUFVSRV9fKi9fanN4KEJ1dHRvbkVuZEljb24sIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuZW5kSWNvbixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNoaWxkcmVuOiBlbmRJY29uUHJvcFxuICB9KTtcbiAgY29uc3QgcG9zaXRpb25DbGFzc05hbWUgPSBidXR0b25Hcm91cEJ1dHRvbkNvbnRleHRQb3NpdGlvbkNsYXNzTmFtZSB8fCAnJztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhCdXR0b25Sb290LCBfZXh0ZW5kcyh7XG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY29udGV4dFByb3BzLmNsYXNzTmFtZSwgY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHBvc2l0aW9uQ2xhc3NOYW1lKSxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZm9jdXNSaXBwbGU6ICFkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgIGNoaWxkcmVuOiBbc3RhcnRJY29uLCBjaGlsZHJlbiwgZW5kSWNvbl1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnc3VjY2VzcycsICdlcnJvcicsICdpbmZvJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBubyBlbGV2YXRpb24gaXMgdXNlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVFbGV2YXRpb246IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYC5NdWktZm9jdXNWaXNpYmxlYCBjbGFzcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYWZ0ZXIgdGhlIGNoaWxkcmVuLlxuICAgKi9cbiAgZW5kSWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIFVSTCB0byBsaW5rIHRvIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKiBJZiBkZWZpbmVkLCBhbiBgYWAgZWxlbWVudCB3aWxsIGJlIHVzZWQgYXMgdGhlIHJvb3Qgbm9kZS5cbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIEVsZW1lbnQgcGxhY2VkIGJlZm9yZSB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBzdGFydEljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYnV0dG9uJywgJ3Jlc2V0JywgJ3N1Ym1pdCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY29udGFpbmVkJywgJ291dGxpbmVkJywgJ3RleHQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjsiLCIvKipcbiAqIEByZW1peC1ydW4vcm91dGVyIHYxLjEzLjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gVHlwZXMgYW5kIENvbnN0YW50c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbnZhciBBY3Rpb247XG4oZnVuY3Rpb24gKEFjdGlvbikge1xuICAvKipcbiAgICogQSBQT1AgaW5kaWNhdGVzIGEgY2hhbmdlIHRvIGFuIGFyYml0cmFyeSBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaFxuICAgKiBhcyBhIGJhY2sgb3IgZm9yd2FyZCBuYXZpZ2F0aW9uLiBJdCBkb2VzIG5vdCBkZXNjcmliZSB0aGUgZGlyZWN0aW9uIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uLCBvbmx5IHRoYXQgdGhlIGN1cnJlbnQgaW5kZXggY2hhbmdlZC5cbiAgICpcbiAgICogTm90ZTogVGhpcyBpcyB0aGUgZGVmYXVsdCBhY3Rpb24gZm9yIG5ld2x5IGNyZWF0ZWQgaGlzdG9yeSBvYmplY3RzLlxuICAgKi9cbiAgQWN0aW9uW1wiUG9wXCJdID0gXCJQT1BcIjtcbiAgLyoqXG4gICAqIEEgUFVTSCBpbmRpY2F0ZXMgYSBuZXcgZW50cnkgYmVpbmcgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2ggYXMgd2hlblxuICAgKiBhIGxpbmsgaXMgY2xpY2tlZCBhbmQgYSBuZXcgcGFnZSBsb2Fkcy4gV2hlbiB0aGlzIGhhcHBlbnMsIGFsbCBzdWJzZXF1ZW50XG4gICAqIGVudHJpZXMgaW4gdGhlIHN0YWNrIGFyZSBsb3N0LlxuICAgKi9cbiAgQWN0aW9uW1wiUHVzaFwiXSA9IFwiUFVTSFwiO1xuICAvKipcbiAgICogQSBSRVBMQUNFIGluZGljYXRlcyB0aGUgZW50cnkgYXQgdGhlIGN1cnJlbnQgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICogYmVpbmcgcmVwbGFjZWQgYnkgYSBuZXcgb25lLlxuICAgKi9cbiAgQWN0aW9uW1wiUmVwbGFjZVwiXSA9IFwiUkVQTEFDRVwiO1xufSkoQWN0aW9uIHx8IChBY3Rpb24gPSB7fSkpO1xuY29uc3QgUG9wU3RhdGVFdmVudFR5cGUgPSBcInBvcHN0YXRlXCI7XG4vKipcbiAqIE1lbW9yeSBoaXN0b3J5IHN0b3JlcyB0aGUgY3VycmVudCBsb2NhdGlvbiBpbiBtZW1vcnkuIEl0IGlzIGRlc2lnbmVkIGZvciB1c2VcbiAqIGluIHN0YXRlZnVsIG5vbi1icm93c2VyIGVudmlyb25tZW50cyBsaWtlIHRlc3RzIGFuZCBSZWFjdCBOYXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGxldCB7XG4gICAgaW5pdGlhbEVudHJpZXMgPSBbXCIvXCJdLFxuICAgIGluaXRpYWxJbmRleCxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cbiAgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcCgoZW50cnksIGluZGV4KSA9PiBjcmVhdGVNZW1vcnlMb2NhdGlvbihlbnRyeSwgdHlwZW9mIGVudHJ5ID09PSBcInN0cmluZ1wiID8gbnVsbCA6IGVudHJ5LnN0YXRlLCBpbmRleCA9PT0gMCA/IFwiZGVmYXVsdFwiIDogdW5kZWZpbmVkKSk7XG4gIGxldCBpbmRleCA9IGNsYW1wSW5kZXgoaW5pdGlhbEluZGV4ID09IG51bGwgPyBlbnRyaWVzLmxlbmd0aCAtIDEgOiBpbml0aWFsSW5kZXgpO1xuICBsZXQgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgbGV0IGxpc3RlbmVyID0gbnVsbDtcbiAgZnVuY3Rpb24gY2xhbXBJbmRleChuKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIDApLCBlbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB9XG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gZW50cmllc1tpbmRleF07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlLCBrZXkpIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihlbnRyaWVzID8gZ2V0Q3VycmVudExvY2F0aW9uKCkucGF0aG5hbWUgOiBcIi9cIiwgdG8sIHN0YXRlLCBrZXkpO1xuICAgIHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3Rvcnk6IFwiICsgSlNPTi5zdHJpbmdpZnkodG8pKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZih0bykge1xuICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0ge1xuICAgIGdldCBpbmRleCgpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9LFxuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldEN1cnJlbnRMb2NhdGlvbigpO1xuICAgIH0sXG4gICAgY3JlYXRlSHJlZixcbiAgICBjcmVhdGVVUkwodG8pIHtcbiAgICAgIHJldHVybiBuZXcgVVJMKGNyZWF0ZUhyZWYodG8pLCBcImh0dHA6Ly9sb2NhbGhvc3RcIik7XG4gICAgfSxcbiAgICBlbmNvZGVMb2NhdGlvbih0bykge1xuICAgICAgbGV0IHBhdGggPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogcGF0aC5wYXRobmFtZSB8fCBcIlwiLFxuICAgICAgICBzZWFyY2g6IHBhdGguc2VhcmNoIHx8IFwiXCIsXG4gICAgICAgIGhhc2g6IHBhdGguaGFzaCB8fCBcIlwiXG4gICAgICB9O1xuICAgIH0sXG4gICAgcHVzaCh0bywgc3RhdGUpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSk7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgZW50cmllcy5zcGxpY2UoaW5kZXgsIGVudHJpZXMubGVuZ3RoLCBuZXh0TG9jYXRpb24pO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgZW50cmllc1tpbmRleF0gPSBuZXh0TG9jYXRpb247XG4gICAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhOiAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ28oZGVsdGEpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgICBsZXQgbmV4dEluZGV4ID0gY2xhbXBJbmRleChpbmRleCArIGRlbHRhKTtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBlbnRyaWVzW25leHRJbmRleF07XG4gICAgICBpbmRleCA9IG5leHRJbmRleDtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBsaXN0ZW4oZm4pIHtcbiAgICAgIGxpc3RlbmVyID0gZm47XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcbiAqIEJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHJlZ3VsYXIgVVJMcy4gVGhpcyBpcyB0aGUgc3RhbmRhcmQgZm9yXG4gKiBtb3N0IHdlYiBhcHBzLCBidXQgaXQgcmVxdWlyZXMgc29tZSBjb25maWd1cmF0aW9uIG9uIHRoZSBzZXJ2ZXIgdG8gZW5zdXJlIHlvdVxuICogc2VydmUgdGhlIHNhbWUgYXBwIGF0IG11bHRpcGxlIFVSTHMuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVicm93c2VyaGlzdG9yeVxuICovXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQnJvd3NlckxvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9ID0gd2luZG93LmxvY2F0aW9uO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LFxuICAgIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQnJvd3NlckhyZWYod2luZG93LCB0bykge1xuICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlQnJvd3NlckxvY2F0aW9uLCBjcmVhdGVCcm93c2VySHJlZiwgbnVsbCwgb3B0aW9ucyk7XG59XG4vKipcbiAqIEhhc2ggaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHdpbmRvdy5sb2NhdGlvbi5oYXNoLiBUaGlzIG1ha2VzIGl0IGlkZWFsXG4gKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvclxuICogc29tZSByZWFzb24sIGVpdGhlciBiZWNhdXNlIHlvdSBkbyBjYW5ub3QgY29uZmlndXJlIGl0IG9yIHRoZSBVUkwgc3BhY2UgaXNcbiAqIHJlc2VydmVkIGZvciBzb21ldGhpbmcgZWxzZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWhhc2hoaXN0b3J5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIYXNoTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgICBzZWFyY2ggPSBcIlwiLFxuICAgICAgaGFzaCA9IFwiXCJcbiAgICB9ID0gcGFyc2VQYXRoKHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKSk7XG4gICAgLy8gSGFzaCBVUkwgc2hvdWxkIGFsd2F5cyBoYXZlIGEgbGVhZGluZyAvIGp1c3QgbGlrZSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVcbiAgICAvLyBkb2VzLCBzbyBpZiBhbiBhcHAgZW5kcyB1cCBhdCBhIHJvdXRlIGxpa2UgLyNzb21ldGhpbmcgdGhlbiB3ZSBhZGQgYVxuICAgIC8vIGxlYWRpbmcgc2xhc2ggc28gYWxsIG9mIG91ciBwYXRoLW1hdGNoaW5nIGJlaGF2ZXMgdGhlIHNhbWUgYXMgaWYgaXQgd291bGRcbiAgICAvLyBpbiBhIGJyb3dzZXIgcm91dGVyLiAgVGhpcyBpcyBwYXJ0aWN1bGFybHkgaW1wb3J0YW50IHdoZW4gdGhlcmUgZXhpc3RzIGFcbiAgICAvLyByb290IHNwbGF0IHJvdXRlICg8Um91dGUgcGF0aD1cIipcIj4pIHNpbmNlIHRoYXQgbWF0Y2hlcyBpbnRlcm5hbGx5IGFnYWluc3RcbiAgICAvLyBcIi8qXCIgYW5kIHdlJ2QgZXhwZWN0IC8jc29tZXRoaW5nIHRvIDQwNCBpbiBhIGhhc2ggcm91dGVyIGFwcC5cbiAgICBpZiAoIXBhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpICYmICFwYXRobmFtZS5zdGFydHNXaXRoKFwiLlwiKSkge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIiArIHBhdGhuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSxcbiAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hIcmVmKHdpbmRvdywgdG8pIHtcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYmFzZVwiKTtcbiAgICBsZXQgaHJlZiA9IFwiXCI7XG4gICAgaWYgKGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKSB7XG4gICAgICBsZXQgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICBsZXQgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuICAgICAgaHJlZiA9IGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIGhyZWYgKyBcIiNcIiArICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pKTtcbiAgfVxuICBmdW5jdGlvbiB2YWxpZGF0ZUhhc2hMb2NhdGlvbihsb2NhdGlvbiwgdG8pIHtcbiAgICB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsIFwicmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGhhc2ggaGlzdG9yeS5wdXNoKFwiICsgSlNPTi5zdHJpbmdpZnkodG8pICsgXCIpXCIpO1xuICB9XG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlSGFzaExvY2F0aW9uLCBjcmVhdGVIYXNoSHJlZiwgdmFsaWRhdGVIYXNoTG9jYXRpb24sIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaW52YXJpYW50KHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgaGlzdG9yeSFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlLCBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA4KTtcbn1cbi8qKlxuICogRm9yIGJyb3dzZXItYmFzZWQgaGlzdG9yaWVzLCB3ZSBjb21iaW5lIHRoZSBzdGF0ZSBhbmQga2V5IGludG8gYW4gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpIHtcbiAgcmV0dXJuIHtcbiAgICB1c3I6IGxvY2F0aW9uLnN0YXRlLFxuICAgIGtleTogbG9jYXRpb24ua2V5LFxuICAgIGlkeDogaW5kZXhcbiAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIExvY2F0aW9uIG9iamVjdCB3aXRoIGEgdW5pcXVlIGtleSBmcm9tIHRoZSBnaXZlbiBQYXRoXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGN1cnJlbnQsIHRvLCBzdGF0ZSwga2V5KSB7XG4gIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUgPSBudWxsO1xuICB9XG4gIGxldCBsb2NhdGlvbiA9IF9leHRlbmRzKHtcbiAgICBwYXRobmFtZTogdHlwZW9mIGN1cnJlbnQgPT09IFwic3RyaW5nXCIgPyBjdXJyZW50IDogY3VycmVudC5wYXRobmFtZSxcbiAgICBzZWFyY2g6IFwiXCIsXG4gICAgaGFzaDogXCJcIlxuICB9LCB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICBzdGF0ZSxcbiAgICAvLyBUT0RPOiBUaGlzIGNvdWxkIGJlIGNsZWFuZWQgdXAuICBwdXNoL3JlcGxhY2Ugc2hvdWxkIHByb2JhYmx5IGp1c3QgdGFrZVxuICAgIC8vIGZ1bGwgTG9jYXRpb25zIG5vdyBhbmQgYXZvaWQgdGhlIG5lZWQgdG8gcnVuIHRocm91Z2ggdGhpcyBmbG93IGF0IGFsbFxuICAgIC8vIEJ1dCB0aGF0J3MgYSBwcmV0dHkgYmlnIHJlZmFjdG9yIHRvIHRoZSBjdXJyZW50IHRlc3Qgc3VpdGUgc28gZ29pbmcgdG9cbiAgICAvLyBrZWVwIGFzIGlzIGZvciB0aGUgdGltZSBiZWluZyBhbmQganVzdCBsZXQgYW55IGluY29taW5nIGtleXMgdGFrZSBwcmVjZWRlbmNlXG4gICAga2V5OiB0byAmJiB0by5rZXkgfHwga2V5IHx8IGNyZWF0ZUtleSgpXG4gIH0pO1xuICByZXR1cm4gbG9jYXRpb247XG59XG4vKipcbiAqIENyZWF0ZXMgYSBzdHJpbmcgVVJMIHBhdGggZnJvbSB0aGUgZ2l2ZW4gcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSBfcmVmO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gXCI/XCIpIHBhdGhuYW1lICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09IFwiP1wiID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09IFwiI1wiKSBwYXRobmFtZSArPSBoYXNoLmNoYXJBdCgwKSA9PT0gXCIjXCIgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcbiAqIFBhcnNlcyBhIHN0cmluZyBVUkwgcGF0aCBpbnRvIGl0cyBzZXBhcmF0ZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICBsZXQgcGFyc2VkUGF0aCA9IHt9O1xuICBpZiAocGF0aCkge1xuICAgIGxldCBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCIjXCIpO1xuICAgIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5oYXNoID0gcGF0aC5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICBsZXQgc2VhcmNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCI/XCIpO1xuICAgIGlmIChzZWFyY2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IHBhdGguc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gICAgfVxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFBhdGg7XG59XG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoZ2V0TG9jYXRpb24sIGNyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBsZXQge1xuICAgIHdpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LFxuICAgIHY1Q29tcGF0ID0gZmFsc2VcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuICBsZXQgaW5kZXggPSBnZXRJbmRleCgpO1xuICAvLyBJbmRleCBzaG91bGQgb25seSBiZSBudWxsIHdoZW4gd2UgaW5pdGlhbGl6ZS4gSWYgbm90LCBpdCdzIGJlY2F1c2UgdGhlXG4gIC8vIHVzZXIgY2FsbGVkIGhpc3RvcnkucHVzaFN0YXRlIG9yIGhpc3RvcnkucmVwbGFjZVN0YXRlIGRpcmVjdGx5LCBpbiB3aGljaFxuICAvLyBjYXNlIHdlIHNob3VsZCBsb2cgYSB3YXJuaW5nIGFzIGl0IHdpbGwgcmVzdWx0IGluIGJ1Z3MuXG4gIGlmIChpbmRleCA9PSBudWxsKSB7XG4gICAgaW5kZXggPSAwO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKF9leHRlbmRzKHt9LCBnbG9iYWxIaXN0b3J5LnN0YXRlLCB7XG4gICAgICBpZHg6IGluZGV4XG4gICAgfSksIFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGdldEluZGV4KCkge1xuICAgIGxldCBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge1xuICAgICAgaWR4OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gc3RhdGUuaWR4O1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIGxldCBuZXh0SW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBkZWx0YSA9IG5leHRJbmRleCA9PSBudWxsID8gbnVsbCA6IG5leHRJbmRleCAtIGluZGV4O1xuICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHB1c2godG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKSArIDE7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG4gICAgdHJ5IHtcbiAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgdGhlIGV4Y2VwdGlvbiBpcyBiZWNhdXNlIGBzdGF0ZWAgY2FuJ3QgYmUgc2VyaWFsaXplZCwgbGV0IHRoYXQgdGhyb3dcbiAgICAgIC8vIG91dHdhcmRzIGp1c3QgbGlrZSBhIHJlcGxhY2UgY2FsbCB3b3VsZCBzbyB0aGUgZGV2IGtub3dzIHRoZSBjYXVzZVxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbmF2LWhpc3RvcnktYXBpcy5odG1sI3NoYXJlZC1oaXN0b3J5LXB1c2gvcmVwbGFjZS1zdGF0ZS1zdGVwc1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3RydWN0dXJlZC1kYXRhLmh0bWwjc3RydWN0dXJlZHNlcmlhbGl6ZWludGVybmFsXG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBET01FeGNlcHRpb24gJiYgZXJyb3IubmFtZSA9PT0gXCJEYXRhQ2xvbmVFcnJvclwiKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICB9XG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAxXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgaW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAwXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlVVJMKHRvKSB7XG4gICAgLy8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiBpcyBcIm51bGxcIiAodGhlIGxpdGVyYWwgc3RyaW5nIHZhbHVlKSBpbiBGaXJlZm94XG4gICAgLy8gdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLCBub3RhYmx5IHdoZW4gc2VydmluZyBmcm9tIGEgbG9jYWwgSFRNTCBmaWxlXG4gICAgLy8gU2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg3ODI5N1xuICAgIGxldCBiYXNlID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gXCJudWxsXCIgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIDogd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgbGV0IGhyZWYgPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICAgIGludmFyaWFudChiYXNlLCBcIk5vIHdpbmRvdy5sb2NhdGlvbi4ob3JpZ2lufGhyZWYpIGF2YWlsYWJsZSB0byBjcmVhdGUgVVJMIGZvciBocmVmOiBcIiArIGhyZWYpO1xuICAgIHJldHVybiBuZXcgVVJMKGhyZWYsIGJhc2UpO1xuICB9XG4gIGxldCBoaXN0b3J5ID0ge1xuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSk7XG4gICAgfSxcbiAgICBsaXN0ZW4oZm4pIHtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGhpc3Rvcnkgb25seSBhY2NlcHRzIG9uZSBhY3RpdmUgbGlzdGVuZXJcIik7XG4gICAgICB9XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgIGxpc3RlbmVyID0gZm47XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiBjcmVhdGVIcmVmKHdpbmRvdywgdG8pO1xuICAgIH0sXG4gICAgY3JlYXRlVVJMLFxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICAvLyBFbmNvZGUgYSBMb2NhdGlvbiB0aGUgc2FtZSB3YXkgd2luZG93LmxvY2F0aW9uIHdvdWxkXG4gICAgICBsZXQgdXJsID0gY3JlYXRlVVJMKHRvKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaDogdXJsLnNlYXJjaCxcbiAgICAgICAgaGFzaDogdXJsLmhhc2hcbiAgICAgIH07XG4gICAgfSxcbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG4gICAgZ28obikge1xuICAgICAgcmV0dXJuIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8vI2VuZHJlZ2lvblxuXG52YXIgUmVzdWx0VHlwZTtcbihmdW5jdGlvbiAoUmVzdWx0VHlwZSkge1xuICBSZXN1bHRUeXBlW1wiZGF0YVwiXSA9IFwiZGF0YVwiO1xuICBSZXN1bHRUeXBlW1wiZGVmZXJyZWRcIl0gPSBcImRlZmVycmVkXCI7XG4gIFJlc3VsdFR5cGVbXCJyZWRpcmVjdFwiXSA9IFwicmVkaXJlY3RcIjtcbiAgUmVzdWx0VHlwZVtcImVycm9yXCJdID0gXCJlcnJvclwiO1xufSkoUmVzdWx0VHlwZSB8fCAoUmVzdWx0VHlwZSA9IHt9KSk7XG5jb25zdCBpbW11dGFibGVSb3V0ZUtleXMgPSBuZXcgU2V0KFtcImxhenlcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwicGF0aFwiLCBcImlkXCIsIFwiaW5kZXhcIiwgXCJjaGlsZHJlblwiXSk7XG5mdW5jdGlvbiBpc0luZGV4Um91dGUocm91dGUpIHtcbiAgcmV0dXJuIHJvdXRlLmluZGV4ID09PSB0cnVlO1xufVxuLy8gV2FsayB0aGUgcm91dGUgdHJlZSBnZW5lcmF0aW5nIHVuaXF1ZSBJRHMgd2hlcmUgbmVjZXNzYXJ5LCBzbyB3ZSBhcmUgd29ya2luZ1xuLy8gc29sZWx5IHdpdGggQWdub3N0aWNEYXRhUm91dGVPYmplY3QncyB3aXRoaW4gdGhlIFJvdXRlclxuZnVuY3Rpb24gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMsIG1hcFJvdXRlUHJvcGVydGllcywgcGFyZW50UGF0aCwgbWFuaWZlc3QpIHtcbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBbXTtcbiAgfVxuICBpZiAobWFuaWZlc3QgPT09IHZvaWQgMCkge1xuICAgIG1hbmlmZXN0ID0ge307XG4gIH1cbiAgcmV0dXJuIHJvdXRlcy5tYXAoKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgbGV0IGlkID0gdHlwZW9mIHJvdXRlLmlkID09PSBcInN0cmluZ1wiID8gcm91dGUuaWQgOiB0cmVlUGF0aC5qb2luKFwiLVwiKTtcbiAgICBpbnZhcmlhbnQocm91dGUuaW5kZXggIT09IHRydWUgfHwgIXJvdXRlLmNoaWxkcmVuLCBcIkNhbm5vdCBzcGVjaWZ5IGNoaWxkcmVuIG9uIGFuIGluZGV4IHJvdXRlXCIpO1xuICAgIGludmFyaWFudCghbWFuaWZlc3RbaWRdLCBcIkZvdW5kIGEgcm91dGUgaWQgY29sbGlzaW9uIG9uIGlkIFxcXCJcIiArIGlkICsgXCJcXFwiLiAgUm91dGUgXCIgKyBcImlkJ3MgbXVzdCBiZSBnbG9iYWxseSB1bmlxdWUgd2l0aGluIERhdGEgUm91dGVyIHVzYWdlc1wiKTtcbiAgICBpZiAoaXNJbmRleFJvdXRlKHJvdXRlKSkge1xuICAgICAgbGV0IGluZGV4Um91dGUgPSBfZXh0ZW5kcyh7fSwgcm91dGUsIG1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZSksIHtcbiAgICAgICAgaWRcbiAgICAgIH0pO1xuICAgICAgbWFuaWZlc3RbaWRdID0gaW5kZXhSb3V0ZTtcbiAgICAgIHJldHVybiBpbmRleFJvdXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGF0aE9yTGF5b3V0Um91dGUgPSBfZXh0ZW5kcyh7fSwgcm91dGUsIG1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZSksIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGNoaWxkcmVuOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgbWFuaWZlc3RbaWRdID0gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgICBpZiAocm91dGUuY2hpbGRyZW4pIHtcbiAgICAgICAgcGF0aE9yTGF5b3V0Um91dGUuY2hpbGRyZW4gPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlLmNoaWxkcmVuLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHRyZWVQYXRoLCBtYW5pZmVzdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gbWF0Y2hSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZywgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSB2b2lkIDApIHtcbiAgICBiYXNlbmFtZSA9IFwiL1wiO1xuICB9XG4gIGxldCBsb2NhdGlvbiA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgbGV0IHBhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIiwgYmFzZW5hbWUpO1xuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGxldCBicmFuY2hlcyA9IGZsYXR0ZW5Sb3V0ZXMocm91dGVzKTtcbiAgcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpO1xuICBsZXQgbWF0Y2hlcyA9IG51bGw7XG4gIGZvciAobGV0IGkgPSAwOyBtYXRjaGVzID09IG51bGwgJiYgaSA8IGJyYW5jaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgbWF0Y2hlcyA9IG1hdGNoUm91dGVCcmFuY2goYnJhbmNoZXNbaV0sXG4gICAgLy8gSW5jb21pbmcgcGF0aG5hbWVzIGFyZSBnZW5lcmFsbHkgZW5jb2RlZCBmcm9tIGVpdGhlciB3aW5kb3cubG9jYXRpb25cbiAgICAvLyBvciBmcm9tIHJvdXRlci5uYXZpZ2F0ZSwgYnV0IHdlIHdhbnQgdG8gbWF0Y2ggYWdhaW5zdCB0aGUgdW5lbmNvZGVkXG4gICAgLy8gcGF0aHMgaW4gdGhlIHJvdXRlIGRlZmluaXRpb25zLiAgTWVtb3J5IHJvdXRlciBsb2NhdGlvbnMgd29uJ3QgYmVcbiAgICAvLyBlbmNvZGVkIGhlcmUgYnV0IHRoZXJlIGFsc28gc2hvdWxkbid0IGJlIGFueXRoaW5nIHRvIGRlY29kZSBzbyB0aGlzXG4gICAgLy8gc2hvdWxkIGJlIGEgc2FmZSBvcGVyYXRpb24uICBUaGlzIGF2b2lkcyBuZWVkaW5nIG1hdGNoUm91dGVzIHRvIGJlXG4gICAgLy8gaGlzdG9yeS1hd2FyZS5cbiAgICBzYWZlbHlEZWNvZGVVUkkocGF0aG5hbWUpKTtcbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn1cbmZ1bmN0aW9uIGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG1hdGNoLCBsb2FkZXJEYXRhKSB7XG4gIGxldCB7XG4gICAgcm91dGUsXG4gICAgcGF0aG5hbWUsXG4gICAgcGFyYW1zXG4gIH0gPSBtYXRjaDtcbiAgcmV0dXJuIHtcbiAgICBpZDogcm91dGUuaWQsXG4gICAgcGF0aG5hbWUsXG4gICAgcGFyYW1zLFxuICAgIGRhdGE6IGxvYWRlckRhdGFbcm91dGUuaWRdLFxuICAgIGhhbmRsZTogcm91dGUuaGFuZGxlXG4gIH07XG59XG5mdW5jdGlvbiBmbGF0dGVuUm91dGVzKHJvdXRlcywgYnJhbmNoZXMsIHBhcmVudHNNZXRhLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChicmFuY2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgYnJhbmNoZXMgPSBbXTtcbiAgfVxuICBpZiAocGFyZW50c01ldGEgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudHNNZXRhID0gW107XG4gIH1cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG4gIGxldCBmbGF0dGVuUm91dGUgPSAocm91dGUsIGluZGV4LCByZWxhdGl2ZVBhdGgpID0+IHtcbiAgICBsZXQgbWV0YSA9IHtcbiAgICAgIHJlbGF0aXZlUGF0aDogcmVsYXRpdmVQYXRoID09PSB1bmRlZmluZWQgPyByb3V0ZS5wYXRoIHx8IFwiXCIgOiByZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZVxuICAgIH07XG4gICAgaWYgKG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICBpbnZhcmlhbnQobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChwYXJlbnRQYXRoKSwgXCJBYnNvbHV0ZSByb3V0ZSBwYXRoIFxcXCJcIiArIG1ldGEucmVsYXRpdmVQYXRoICsgXCJcXFwiIG5lc3RlZCB1bmRlciBwYXRoIFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIiBpcyBub3QgdmFsaWQuIEFuIGFic29sdXRlIGNoaWxkIHJvdXRlIHBhdGggXCIpICsgXCJtdXN0IHN0YXJ0IHdpdGggdGhlIGNvbWJpbmVkIHBhdGggb2YgYWxsIGl0cyBwYXJlbnQgcm91dGVzLlwiKTtcbiAgICAgIG1ldGEucmVsYXRpdmVQYXRoID0gbWV0YS5yZWxhdGl2ZVBhdGguc2xpY2UocGFyZW50UGF0aC5sZW5ndGgpO1xuICAgIH1cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTtcbiAgICAvLyBBZGQgdGhlIGNoaWxkcmVuIGJlZm9yZSBhZGRpbmcgdGhpcyByb3V0ZSB0byB0aGUgYXJyYXksIHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAvLyBPdXIgdHlwZXMga25vdyBiZXR0ZXIsIGJ1dCBydW50aW1lIEpTIG1heSBub3QhXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICByb3V0ZS5pbmRleCAhPT0gdHJ1ZSwgXCJJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgXCIgKyAoXCJhbGwgY2hpbGQgcm91dGVzIGZyb20gcm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiLlwiKSk7XG4gICAgICBmbGF0dGVuUm91dGVzKHJvdXRlLmNoaWxkcmVuLCBicmFuY2hlcywgcm91dGVzTWV0YSwgcGF0aCk7XG4gICAgfVxuICAgIC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH07XG4gIHJvdXRlcy5mb3JFYWNoKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICB2YXIgX3JvdXRlJHBhdGg7XG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhKChfcm91dGUkcGF0aCA9IHJvdXRlLnBhdGgpICE9IG51bGwgJiYgX3JvdXRlJHBhdGguaW5jbHVkZXMoXCI/XCIpKSkge1xuICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGV4cGxvZGVkIG9mIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJvdXRlLnBhdGgpKSB7XG4gICAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgsIGV4cGxvZGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cbmZ1bmN0aW9uIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHBhdGgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgbGV0IFtmaXJzdCwgLi4ucmVzdF0gPSBzZWdtZW50cztcbiAgLy8gT3B0aW9uYWwgcGF0aCBzZWdtZW50cyBhcmUgZGVub3RlZCBieSBhIHRyYWlsaW5nIGA/YFxuICBsZXQgaXNPcHRpb25hbCA9IGZpcnN0LmVuZHNXaXRoKFwiP1wiKTtcbiAgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2BcbiAgbGV0IHJlcXVpcmVkID0gZmlyc3QucmVwbGFjZSgvXFw/JC8sIFwiXCIpO1xuICBpZiAocmVzdC5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJbnRlcHJldCBlbXB0eSBzdHJpbmcgYXMgb21pdHRpbmcgYW4gb3B0aW9uYWwgc2VnbWVudFxuICAgIC8vIGBbXCJvbmVcIiwgXCJcIiwgXCJ0aHJlZVwiXWAgY29ycmVzcG9uZHMgdG8gb21pdHRpbmcgYDp0d29gIGZyb20gYC9vbmUvOnR3bz8vdGhyZWVgIC0+IGAvb25lL3RocmVlYFxuICAgIHJldHVybiBpc09wdGlvbmFsID8gW3JlcXVpcmVkLCBcIlwiXSA6IFtyZXF1aXJlZF07XG4gIH1cbiAgbGV0IHJlc3RFeHBsb2RlZCA9IGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJlc3Quam9pbihcIi9cIikpO1xuICBsZXQgcmVzdWx0ID0gW107XG4gIC8vIEFsbCBjaGlsZCBwYXRocyB3aXRoIHRoZSBwcmVmaXguICBEbyB0aGlzIGZvciBhbGwgY2hpbGRyZW4gYmVmb3JlIHRoZVxuICAvLyBvcHRpb25hbCB2ZXJzaW9uIGZvciBhbGwgY2hpbGRyZW4sIHNvIHdlIGdldCBjb25zaXN0ZW50IG9yZGVyaW5nIHdoZXJlIHRoZVxuICAvLyBwYXJlbnQgb3B0aW9uYWwgYXNwZWN0IGlzIHByZWZlcnJlZCBhcyByZXF1aXJlZC4gIE90aGVyd2lzZSwgd2UgY2FuIGdldFxuICAvLyBjaGlsZCBzZWN0aW9ucyBpbnRlcnNwZXJzZWQgd2hlcmUgZGVlcGVyIG9wdGlvbmFsIHNlZ21lbnRzIGFyZSBoaWdoZXIgdGhhblxuICAvLyBwYXJlbnQgb3B0aW9uYWwgc2VnbWVudHMsIHdoZXJlIGZvciBleGFtcGxlLCAvOnR3byB3b3VsZCBleHBsb2RlIF9lYXJsaWVyX1xuICAvLyB0aGVuIC86b25lLiAgQnkgYWx3YXlzIGluY2x1ZGluZyB0aGUgcGFyZW50IGFzIHJlcXVpcmVkIF9mb3IgYWxsIGNoaWxkcmVuX1xuICAvLyBmaXJzdCwgd2UgYXZvaWQgdGhpcyBpc3N1ZVxuICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQubWFwKHN1YnBhdGggPT4gc3VicGF0aCA9PT0gXCJcIiA/IHJlcXVpcmVkIDogW3JlcXVpcmVkLCBzdWJwYXRoXS5qb2luKFwiL1wiKSkpO1xuICAvLyBUaGVuLCBpZiB0aGlzIGlzIGFuIG9wdGlvbmFsIHZhbHVlLCBhZGQgYWxsIGNoaWxkIHZlcnNpb25zIHdpdGhvdXRcbiAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQpO1xuICB9XG4gIC8vIGZvciBhYnNvbHV0ZSBwYXRocywgZW5zdXJlIGAvYCBpbnN0ZWFkIG9mIGVtcHR5IHNlZ21lbnRcbiAgcmV0dXJuIHJlc3VsdC5tYXAoZXhwbG9kZWQgPT4gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSAmJiBleHBsb2RlZCA9PT0gXCJcIiA/IFwiL1wiIDogZXhwbG9kZWQpO1xufVxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuY29uc3QgcGFyYW1SZSA9IC9eOlxcdyskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5jb25zdCBpc1NwbGF0ID0gcyA9PiBzID09PSBcIipcIjtcbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG4gIGlmIChpbmRleCkge1xuICAgIGluaXRpYWxTY29yZSArPSBpbmRleFJvdXRlVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID9cbiAgLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDpcbiAgLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cbmZ1bmN0aW9uIG1hdGNoUm91dGVCcmFuY2goYnJhbmNoLCBwYXRobmFtZSkge1xuICBsZXQge1xuICAgIHJvdXRlc01ldGFcbiAgfSA9IGJyYW5jaDtcbiAgbGV0IG1hdGNoZWRQYXJhbXMgPSB7fTtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgbWV0YSA9IHJvdXRlc01ldGFbaV07XG4gICAgbGV0IGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTtcbiAgICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoe1xuICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbmRcbiAgICB9LCByZW1haW5pbmdQYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgT2JqZWN0LmFzc2lnbihtYXRjaGVkUGFyYW1zLCBtYXRjaC5wYXJhbXMpO1xuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIC8vIFRPRE86IENhbiB0aGlzIGFzIGJlIGF2b2lkZWQ/XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMsXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKSksXG4gICAgICByb3V0ZVxuICAgIH0pO1xuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCB3aXRoIHBhcmFtcyBpbnRlcnBvbGF0ZWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9nZW5lcmF0ZS1wYXRoXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChvcmlnaW5hbFBhdGgsIHBhcmFtcykge1xuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuICBsZXQgcGF0aCA9IG9yaWdpbmFsUGF0aDtcbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpICYmIHBhdGggIT09IFwiKlwiICYmICFwYXRoLmVuZHNXaXRoKFwiLypcIikpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIik7XG4gIH1cbiAgLy8gZW5zdXJlIGAvYCBpcyBhZGRlZCBhdCB0aGUgYmVnaW5uaW5nIGlmIHRoZSBwYXRoIGlzIGFic29sdXRlXG4gIGNvbnN0IHByZWZpeCA9IHBhdGguc3RhcnRzV2l0aChcIi9cIikgPyBcIi9cIiA6IFwiXCI7XG4gIGNvbnN0IHN0cmluZ2lmeSA9IHAgPT4gcCA9PSBudWxsID8gXCJcIiA6IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8gcCA6IFN0cmluZyhwKTtcbiAgY29uc3Qgc2VnbWVudHMgPSBwYXRoLnNwbGl0KC9cXC8rLykubWFwKChzZWdtZW50LCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICBjb25zdCBpc0xhc3RTZWdtZW50ID0gaW5kZXggPT09IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgLy8gb25seSBhcHBseSB0aGUgc3BsYXQgaWYgaXQncyB0aGUgbGFzdCBzZWdtZW50XG4gICAgaWYgKGlzTGFzdFNlZ21lbnQgJiYgc2VnbWVudCA9PT0gXCIqXCIpIHtcbiAgICAgIGNvbnN0IHN0YXIgPSBcIipcIjtcbiAgICAgIC8vIEFwcGx5IHRoZSBzcGxhdFxuICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbXNbc3Rhcl0pO1xuICAgIH1cbiAgICBjb25zdCBrZXlNYXRjaCA9IHNlZ21lbnQubWF0Y2goL146KFxcdyspKFxcPz8pJC8pO1xuICAgIGlmIChrZXlNYXRjaCkge1xuICAgICAgY29uc3QgWywga2V5LCBvcHRpb25hbF0gPSBrZXlNYXRjaDtcbiAgICAgIGxldCBwYXJhbSA9IHBhcmFtc1trZXldO1xuICAgICAgaW52YXJpYW50KG9wdGlvbmFsID09PSBcIj9cIiB8fCBwYXJhbSAhPSBudWxsLCBcIk1pc3NpbmcgXFxcIjpcIiArIGtleSArIFwiXFxcIiBwYXJhbVwiKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnkocGFyYW0pO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgYW55IG9wdGlvbmFsIG1hcmtlcnMgZnJvbSBvcHRpb25hbCBzdGF0aWMgc2VnbWVudHNcbiAgICByZXR1cm4gc2VnbWVudC5yZXBsYWNlKC9cXD8kL2csIFwiXCIpO1xuICB9KVxuICAvLyBSZW1vdmUgZW1wdHkgc2VnbWVudHNcbiAgLmZpbHRlcihzZWdtZW50ID0+ICEhc2VnbWVudCk7XG4gIHJldHVybiBwcmVmaXggKyBzZWdtZW50cy5qb2luKFwiL1wiKTtcbn1cbi8qKlxuICogUGVyZm9ybXMgcGF0dGVybiBtYXRjaGluZyBvbiBhIFVSTCBwYXRobmFtZSBhbmQgcmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIG1hdGNoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcGF0aFxuICovXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcInN0cmluZ1wiKSB7XG4gICAgcGF0dGVybiA9IHtcbiAgICAgIHBhdGg6IHBhdHRlcm4sXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgIGVuZDogdHJ1ZVxuICAgIH07XG4gIH1cbiAgbGV0IFttYXRjaGVyLCBjb21waWxlZFBhcmFtc10gPSBjb21waWxlUGF0aChwYXR0ZXJuLnBhdGgsIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSwgcGF0dGVybi5lbmQpO1xuICBsZXQgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChtYXRjaGVyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXMgPSBjb21waWxlZFBhcmFtcy5yZWR1Y2UoKG1lbW8sIF9yZWYsIGluZGV4KSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIHBhcmFtTmFtZSxcbiAgICAgIGlzT3B0aW9uYWxcbiAgICB9ID0gX3JlZjtcbiAgICAvLyBXZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHBhdGhuYW1lQmFzZSBoZXJlIHVzaW5nIHRoZSByYXcgc3BsYXQgdmFsdWVcbiAgICAvLyBpbnN0ZWFkIG9mIHVzaW5nIHBhcmFtc1tcIipcIl0gbGF0ZXIgYmVjYXVzZSBpdCB3aWxsIGJlIGRlY29kZWQgdGhlblxuICAgIGlmIChwYXJhbU5hbWUgPT09IFwiKlwiKSB7XG4gICAgICBsZXQgc3BsYXRWYWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCI7XG4gICAgICBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUuc2xpY2UoMCwgbWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCAtIHNwbGF0VmFsdWUubGVuZ3RoKS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF07XG4gICAgaWYgKGlzT3B0aW9uYWwgJiYgIXZhbHVlKSB7XG4gICAgICBtZW1vW3BhcmFtTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbW9bcGFyYW1OYW1lXSA9IHNhZmVseURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSB8fCBcIlwiLCBwYXJhbU5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoLCBjYXNlU2Vuc2l0aXZlLCBlbmQpIHtcbiAgaWYgKGNhc2VTZW5zaXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZTtcbiAgfVxuICBpZiAoZW5kID09PSB2b2lkIDApIHtcbiAgICBlbmQgPSB0cnVlO1xuICB9XG4gIHdhcm5pbmcocGF0aCA9PT0gXCIqXCIgfHwgIXBhdGguZW5kc1dpdGgoXCIqXCIpIHx8IHBhdGguZW5kc1dpdGgoXCIvKlwiKSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICBsZXQgcGFyYW1zID0gW107XG4gIGxldCByZWdleHBTb3VyY2UgPSBcIl5cIiArIHBhdGgucmVwbGFjZSgvXFwvKlxcKj8kLywgXCJcIikgLy8gSWdub3JlIHRyYWlsaW5nIC8gYW5kIC8qLCB3ZSdsbCBoYW5kbGUgaXQgYmVsb3dcbiAgLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpIC8vIE1ha2Ugc3VyZSBpdCBoYXMgYSBsZWFkaW5nIC9cbiAgLnJlcGxhY2UoL1tcXFxcLiorXiR7fXwoKVtcXF1dL2csIFwiXFxcXCQmXCIpIC8vIEVzY2FwZSBzcGVjaWFsIHJlZ2V4IGNoYXJzXG4gIC5yZXBsYWNlKC9cXC86KFxcdyspKFxcPyk/L2csIChfLCBwYXJhbU5hbWUsIGlzT3B0aW9uYWwpID0+IHtcbiAgICBwYXJhbXMucHVzaCh7XG4gICAgICBwYXJhbU5hbWUsXG4gICAgICBpc09wdGlvbmFsOiBpc09wdGlvbmFsICE9IG51bGxcbiAgICB9KTtcbiAgICByZXR1cm4gaXNPcHRpb25hbCA/IFwiLz8oW15cXFxcL10rKT9cIiA6IFwiLyhbXlxcXFwvXSspXCI7XG4gIH0pO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikpIHtcbiAgICBwYXJhbXMucHVzaCh7XG4gICAgICBwYXJhbU5hbWU6IFwiKlwiXG4gICAgfSk7XG4gICAgcmVnZXhwU291cmNlICs9IHBhdGggPT09IFwiKlwiIHx8IHBhdGggPT09IFwiLypcIiA/IFwiKC4qKSRcIiAvLyBBbHJlYWR5IG1hdGNoZWQgdGhlIGluaXRpYWwgLywganVzdCBtYXRjaCB0aGUgcmVzdFxuICAgIDogXCIoPzpcXFxcLyguKyl8XFxcXC8qKSRcIjsgLy8gRG9uJ3QgaW5jbHVkZSB0aGUgLyBpbiBwYXJhbXNbXCIqXCJdXG4gIH0gZWxzZSBpZiAoZW5kKSB7XG4gICAgLy8gV2hlbiBtYXRjaGluZyB0byB0aGUgZW5kLCBpZ25vcmUgdHJhaWxpbmcgc2xhc2hlc1xuICAgIHJlZ2V4cFNvdXJjZSArPSBcIlxcXFwvKiRcIjtcbiAgfSBlbHNlIGlmIChwYXRoICE9PSBcIlwiICYmIHBhdGggIT09IFwiL1wiKSB7XG4gICAgLy8gSWYgb3VyIHBhdGggaXMgbm9uLWVtcHR5IGFuZCBjb250YWlucyBhbnl0aGluZyBiZXlvbmQgYW4gaW5pdGlhbCBzbGFzaCxcbiAgICAvLyB0aGVuIHdlIGhhdmUgX3NvbWVfIGZvcm0gb2YgcGF0aCBpbiBvdXIgcmVnZXgsIHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSA7XG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1zXTtcbn1cbmZ1bmN0aW9uIHNhZmVseURlY29kZVVSSSh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUkkodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIFVSTCBwYXRoIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGNvdWxkIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2UgaXQgaXMgaXMgYSBcIiArIFwibWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5IGR1ZSB0byBhIGJhZCBwZXJjZW50IFwiICsgKFwiZW5jb2RpbmcgKFwiICsgZXJyb3IgKyBcIikuXCIpKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIHNhZmVseURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSwgcGFyYW1OYW1lKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgdmFsdWUgZm9yIHRoZSBVUkwgcGFyYW0gXFxcIlwiICsgcGFyYW1OYW1lICsgXCJcXFwiIHdpbGwgbm90IGJlIGRlY29kZWQgYmVjYXVzZVwiICsgKFwiIHRoZSBzdHJpbmcgXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgaXMgYSBtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHlcIikgKyAoXCIgZHVlIHRvIGEgYmFkIHBlcmNlbnQgZW5jb2RpbmcgKFwiICsgZXJyb3IgKyBcIikuXCIpKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikgcmV0dXJuIHBhdGhuYW1lO1xuICBpZiAoIXBhdGhuYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChiYXNlbmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIFdlIHdhbnQgdG8gbGVhdmUgdHJhaWxpbmcgc2xhc2ggYmVoYXZpb3IgaW4gdGhlIHVzZXIncyBjb250cm9sLCBzbyBpZiB0aGV5XG4gIC8vIHNwZWNpZnkgYSBiYXNlbmFtZSB3aXRoIGEgdHJhaWxpbmcgc2xhc2gsIHdlIHNob3VsZCBzdXBwb3J0IGl0XG4gIGxldCBzdGFydEluZGV4ID0gYmFzZW5hbWUuZW5kc1dpdGgoXCIvXCIpID8gYmFzZW5hbWUubGVuZ3RoIC0gMSA6IGJhc2VuYW1lLmxlbmd0aDtcbiAgbGV0IG5leHRDaGFyID0gcGF0aG5hbWUuY2hhckF0KHN0YXJ0SW5kZXgpO1xuICBpZiAobmV4dENoYXIgJiYgbmV4dENoYXIgIT09IFwiL1wiKSB7XG4gICAgLy8gcGF0aG5hbWUgZG9lcyBub3Qgc3RhcnQgd2l0aCBiYXNlbmFtZS9cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gcGF0aG5hbWUuc2xpY2Uoc3RhcnRJbmRleCkgfHwgXCIvXCI7XG59XG4vKipcbiAqIFJldHVybnMgYSByZXNvbHZlZCBwYXRoIG9iamVjdCByZWxhdGl2ZSB0byB0aGUgZ2l2ZW4gcGF0aG5hbWUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9yZXNvbHZlLXBhdGhcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVBhdGgodG8sIGZyb21QYXRobmFtZSkge1xuICBpZiAoZnJvbVBhdGhuYW1lID09PSB2b2lkIDApIHtcbiAgICBmcm9tUGF0aG5hbWUgPSBcIi9cIjtcbiAgfVxuICBsZXQge1xuICAgIHBhdGhuYW1lOiB0b1BhdGhuYW1lLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgbGV0IHBhdGhuYW1lID0gdG9QYXRobmFtZSA/IHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi9cIikgPyB0b1BhdGhuYW1lIDogcmVzb2x2ZVBhdGhuYW1lKHRvUGF0aG5hbWUsIGZyb21QYXRobmFtZSkgOiBmcm9tUGF0aG5hbWU7XG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBub3JtYWxpemVTZWFyY2goc2VhcmNoKSxcbiAgICBoYXNoOiBub3JtYWxpemVIYXNoKGhhc2gpXG4gIH07XG59XG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUocmVsYXRpdmVQYXRoLCBmcm9tUGF0aG5hbWUpIHtcbiAgbGV0IHNlZ21lbnRzID0gZnJvbVBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICBsZXQgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIik7XG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbihcIi9cIikgOiBcIi9cIjtcbn1cbmZ1bmN0aW9uIGdldEludmFsaWRQYXRoRXJyb3IoY2hhciwgZmllbGQsIGRlc3QsIHBhdGgpIHtcbiAgcmV0dXJuIFwiQ2Fubm90IGluY2x1ZGUgYSAnXCIgKyBjaGFyICsgXCInIGNoYXJhY3RlciBpbiBhIG1hbnVhbGx5IHNwZWNpZmllZCBcIiArIChcImB0by5cIiArIGZpZWxkICsgXCJgIGZpZWxkIFtcIiArIEpTT04uc3RyaW5naWZ5KHBhdGgpICsgXCJdLiAgUGxlYXNlIHNlcGFyYXRlIGl0IG91dCB0byB0aGUgXCIpICsgKFwiYHRvLlwiICsgZGVzdCArIFwiYCBmaWVsZC4gQWx0ZXJuYXRpdmVseSB5b3UgbWF5IHByb3ZpZGUgdGhlIGZ1bGwgcGF0aCBhcyBcIikgKyBcImEgc3RyaW5nIGluIDxMaW5rIHRvPVxcXCIuLi5cXFwiPiBhbmQgdGhlIHJvdXRlciB3aWxsIHBhcnNlIGl0IGZvciB5b3UuXCI7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogV2hlbiBwcm9jZXNzaW5nIHJlbGF0aXZlIG5hdmlnYXRpb24gd2Ugd2FudCB0byBpZ25vcmUgYW5jZXN0b3Igcm91dGVzIHRoYXRcbiAqIGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBwYXRoLCBzdWNoIHRoYXQgaW5kZXgvcGF0aGxlc3MgbGF5b3V0IHJvdXRlcyBkb24ndFxuICogaW50ZXJmZXJlLlxuICpcbiAqIEZvciBleGFtcGxlLCB3aGVuIG1vdmluZyBhIHJvdXRlIGVsZW1lbnQgaW50byBhbiBpbmRleCByb3V0ZSBhbmQvb3IgYVxuICogcGF0aGxlc3MgbGF5b3V0IHJvdXRlLCByZWxhdGl2ZSBsaW5rIGJlaGF2aW9yIGNvbnRhaW5lZCB3aXRoaW4gc2hvdWxkIHN0YXlcbiAqIHRoZSBzYW1lLiAgQm90aCBvZiB0aGUgZm9sbG93aW5nIGV4YW1wbGVzIHNob3VsZCBsaW5rIGJhY2sgdG8gdGhlIHJvb3Q6XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCIgZWxlbWVudD17PExpbmsgdG89XCIuLlwifT5cbiAqICAgPC9Sb3V0ZT5cbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIj5cbiAqICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8QWNjb3VudHNMYXlvdXQgLz59PiAgICAgICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgICA8Um91dGUgaW5kZXggZWxlbWVudD17PExpbmsgdG89XCIuLlwifSAvPiAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgIDwvUm91dGVcbiAqICAgICA8L1JvdXRlPlxuICogICA8L1JvdXRlPlxuICovXG5mdW5jdGlvbiBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBtYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiBpbmRleCA9PT0gMCB8fCBtYXRjaC5yb3V0ZS5wYXRoICYmIG1hdGNoLnJvdXRlLnBhdGgubGVuZ3RoID4gMCk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVUbyh0b0FyZywgcm91dGVQYXRobmFtZXMsIGxvY2F0aW9uUGF0aG5hbWUsIGlzUGF0aFJlbGF0aXZlKSB7XG4gIGlmIChpc1BhdGhSZWxhdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNQYXRoUmVsYXRpdmUgPSBmYWxzZTtcbiAgfVxuICBsZXQgdG87XG4gIGlmICh0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICB0byA9IHBhcnNlUGF0aCh0b0FyZyk7XG4gIH0gZWxzZSB7XG4gICAgdG8gPSBfZXh0ZW5kcyh7fSwgdG9BcmcpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiP1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIj9cIiwgXCJwYXRobmFtZVwiLCBcInNlYXJjaFwiLCB0bykpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJwYXRobmFtZVwiLCBcImhhc2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnNlYXJjaCB8fCAhdG8uc2VhcmNoLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJzZWFyY2hcIiwgXCJoYXNoXCIsIHRvKSk7XG4gIH1cbiAgbGV0IGlzRW1wdHlQYXRoID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCI7XG4gIGxldCB0b1BhdGhuYW1lID0gaXNFbXB0eVBhdGggPyBcIi9cIiA6IHRvLnBhdGhuYW1lO1xuICBsZXQgZnJvbTtcbiAgLy8gUm91dGluZyBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwYXRobmFtZSBpZiBleHBsaWNpdGx5IHJlcXVlc3RlZC5cbiAgLy9cbiAgLy8gSWYgYSBwYXRobmFtZSBpcyBleHBsaWNpdGx5IHByb3ZpZGVkIGluIGB0b2AsIGl0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGVcbiAgLy8gcm91dGUgY29udGV4dC4gVGhpcyBpcyBleHBsYWluZWQgaW4gYE5vdGUgb24gYDxMaW5rIHRvPmAgdmFsdWVzYCBpbiBvdXJcbiAgLy8gbWlncmF0aW9uIGd1aWRlIGZyb20gdjUgYXMgYSBtZWFucyBvZiBkaXNhbWJpZ3VhdGlvbiBiZXR3ZWVuIGB0b2AgdmFsdWVzXG4gIC8vIHRoYXQgYmVnaW4gd2l0aCBgL2AgYW5kIHRob3NlIHRoYXQgZG8gbm90LiBIb3dldmVyLCB0aGlzIGlzIHByb2JsZW1hdGljIGZvclxuICAvLyBgdG9gIHZhbHVlcyB0aGF0IGRvIG5vdCBwcm92aWRlIGEgcGF0aG5hbWUuIGB0b2AgY2FuIHNpbXBseSBiZSBhIHNlYXJjaCBvclxuICAvLyBoYXNoIHN0cmluZywgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgYXNzdW1lIHRoYXQgdGhlIG5hdmlnYXRpb24gaXMgcmVsYXRpdmVcbiAgLy8gdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24ncyBwYXRobmFtZSBhbmQgKm5vdCogdGhlIHJvdXRlIHBhdGhuYW1lLlxuICBpZiAodG9QYXRobmFtZSA9PSBudWxsKSB7XG4gICAgZnJvbSA9IGxvY2F0aW9uUGF0aG5hbWU7XG4gIH0gZWxzZSBpZiAoaXNQYXRoUmVsYXRpdmUpIHtcbiAgICBsZXQgZnJvbVNlZ21lbnRzID0gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZXMubGVuZ3RoIC0gMV0ucmVwbGFjZSgvXlxcLy8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgICBpZiAodG9QYXRobmFtZS5zdGFydHNXaXRoKFwiLi5cIikpIHtcbiAgICAgIGxldCB0b1NlZ21lbnRzID0gdG9QYXRobmFtZS5zcGxpdChcIi9cIik7XG4gICAgICAvLyBXaXRoIHJlbGF0aXZlPVwicGF0aFwiLCBlYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSBVUkwgc2VnbWVudFwiXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgZnJvbVNlZ21lbnRzLnBvcCgpO1xuICAgICAgfVxuICAgICAgdG8ucGF0aG5hbWUgPSB0b1NlZ21lbnRzLmpvaW4oXCIvXCIpO1xuICAgIH1cbiAgICBmcm9tID0gXCIvXCIgKyBmcm9tU2VnbWVudHMuam9pbihcIi9cIik7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJvdXRlUGF0aG5hbWVJbmRleCA9IHJvdXRlUGF0aG5hbWVzLmxlbmd0aCAtIDE7XG4gICAgaWYgKHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgLy8gV2l0aCByZWxhdGl2ZT1cInJvdXRlXCIgKHRoZSBkZWZhdWx0KSwgZWFjaCBsZWFkaW5nIC4uIHNlZ21lbnQgbWVhbnNcbiAgICAgIC8vIFwiZ28gdXAgb25lIHJvdXRlXCIgaW5zdGVhZCBvZiBcImdvIHVwIG9uZSBVUkwgc2VnbWVudFwiLiAgVGhpcyBpcyBhIGtleVxuICAgICAgLy8gZGlmZmVyZW5jZSBmcm9tIGhvdyA8YSBocmVmPiB3b3JrcyBhbmQgYSBtYWpvciByZWFzb24gd2UgY2FsbCB0aGlzIGFcbiAgICAgIC8vIFwidG9cIiB2YWx1ZSBpbnN0ZWFkIG9mIGEgXCJocmVmXCIuXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfVxuICAgIC8vIElmIHRoZXJlIGFyZSBtb3JlIFwiLi5cIiBzZWdtZW50cyB0aGFuIHBhcmVudCByb3V0ZXMsIHJlc29sdmUgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgcm9vdCAvIFVSTC5cbiAgICBmcm9tID0gcm91dGVQYXRobmFtZUluZGV4ID49IDAgPyByb3V0ZVBhdGhuYW1lc1tyb3V0ZVBhdGhuYW1lSW5kZXhdIDogXCIvXCI7XG4gIH1cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7XG4gIC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIFwidG9cIiBoYWQgb25lXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPSB0b1BhdGhuYW1lICYmIHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICAvLyBPciBpZiB0aGlzIHdhcyBhIGxpbmsgdG8gdGhlIGN1cnJlbnQgcGF0aCB3aGljaCBoYXMgYSB0cmFpbGluZyBzbGFzaFxuICBsZXQgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2ggPSAoaXNFbXB0eVBhdGggfHwgdG9QYXRobmFtZSA9PT0gXCIuXCIpICYmIGxvY2F0aW9uUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICBpZiAoIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpICYmIChoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggfHwgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2gpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bykge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiID8gXCIvXCIgOiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pLnBhdGhuYW1lIDogdG8ucGF0aG5hbWU7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGpvaW5QYXRocyA9IHBhdGhzID0+IHBhdGhzLmpvaW4oXCIvXCIpLnJlcGxhY2UoL1xcL1xcLysvZywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVQYXRobmFtZSA9IHBhdGhuYW1lID0+IHBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZVNlYXJjaCA9IHNlYXJjaCA9PiAhc2VhcmNoIHx8IHNlYXJjaCA9PT0gXCI/XCIgPyBcIlwiIDogc2VhcmNoLnN0YXJ0c1dpdGgoXCI/XCIpID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZUhhc2ggPSBoYXNoID0+ICFoYXNoIHx8IGhhc2ggPT09IFwiI1wiID8gXCJcIiA6IGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuLyoqXG4gKiBUaGlzIGlzIGEgc2hvcnRjdXQgZm9yIGNyZWF0aW5nIGBhcHBsaWNhdGlvbi9qc29uYCByZXNwb25zZXMuIENvbnZlcnRzIGBkYXRhYFxuICogdG8gSlNPTiBhbmQgc2V0cyB0aGUgYENvbnRlbnQtVHlwZWAgaGVhZGVyLlxuICovXG5jb25zdCBqc29uID0gZnVuY3Rpb24ganNvbihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGlmICghaGVhZGVycy5oYXMoXCJDb250ZW50LVR5cGVcIikpIHtcbiAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbmNsYXNzIEFib3J0ZWREZWZlcnJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIERlZmVycmVkRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIHJlc3BvbnNlSW5pdCkge1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRlZmVycmVkS2V5cyA9IFtdO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7XG4gICAgLy8gU2V0IHVwIGFuIEFib3J0Q29udHJvbGxlciArIFByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCB0byBleGl0IGVhcmx5XG4gICAgLy8gY2FuY2VsbGF0aW9uXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IG9uQWJvcnQgPSAoKSA9PiByZWplY3QobmV3IEFib3J0ZWREZWZlcnJlZEVycm9yKFwiRGVmZXJyZWQgZGF0YSBhYm9ydGVkXCIpKTtcbiAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwgPSAoKSA9PiB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZjIpID0+IHtcbiAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmMjtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICBba2V5XTogdGhpcy50cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBBbGwgaW5jb21pbmcgdmFsdWVzIHdlcmUgcmVzb2x2ZWRcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cbiAgICB0aGlzLmluaXQgPSByZXNwb25zZUluaXQ7XG4gIH1cbiAgdHJhY2tQcm9taXNlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHRoaXMuZGVmZXJyZWRLZXlzLnB1c2goa2V5KTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmFkZChrZXkpO1xuICAgIC8vIFdlIHN0b3JlIGEgbGl0dGxlIHdyYXBwZXIgcHJvbWlzZSB0aGF0IHdpbGwgYmUgZXh0ZW5kZWQgd2l0aFxuICAgIC8vIF9kYXRhL19lcnJvciBwcm9wcyB1cG9uIHJlc29sdmUvcmVqZWN0XG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW3ZhbHVlLCB0aGlzLmFib3J0UHJvbWlzZV0pLnRoZW4oZGF0YSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgdW5kZWZpbmVkLCBkYXRhKSwgZXJyb3IgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yKSk7XG4gICAgLy8gUmVnaXN0ZXIgcmVqZWN0aW9uIGxpc3RlbmVycyB0byBhdm9pZCB1bmNhdWdodCBwcm9taXNlIHJlamVjdGlvbnMgb25cbiAgICAvLyBlcnJvcnMgb3IgYWJvcnRlZCBkZWZlcnJlZCB2YWx1ZXNcbiAgICBwcm9taXNlLmNhdGNoKCgpID0+IHt9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuICBvblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoa2V5KTtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBOb3RoaW5nIGxlZnQgdG8gYWJvcnQhXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG4gICAgLy8gSWYgdGhlIHByb21pc2Ugd2FzIHJlc29sdmVkL3JlamVjdGVkIHdpdGggdW5kZWZpbmVkLCB3ZSdsbCB0aHJvdyBhbiBlcnJvciBhcyB5b3VcbiAgICAvLyBzaG91bGQgYWx3YXlzIHJlc29sdmUgd2l0aCBhIHZhbHVlIG9yIG51bGxcbiAgICBpZiAoZXJyb3IgPT09IHVuZGVmaW5lZCAmJiBkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCB1bmRlZmluZWRFcnJvciA9IG5ldyBFcnJvcihcIkRlZmVycmVkIGRhdGEgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmVzb2x2ZWQvcmVqZWN0ZWQgd2l0aCBgdW5kZWZpbmVkYCwgXCIgKyBcInlvdSBtdXN0IHJlc29sdmUvcmVqZWN0IHdpdGggYSB2YWx1ZSBvciBgbnVsbGAuXCIpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB1bmRlZmluZWRFcnJvclxuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodW5kZWZpbmVkRXJyb3IpO1xuICAgIH1cbiAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgIH0pO1xuICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBlbWl0KGFib3J0ZWQsIHNldHRsZWRLZXkpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKGFib3J0ZWQsIHNldHRsZWRLZXkpKTtcbiAgfVxuICBzdWJzY3JpYmUoZm4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5mb3JFYWNoKCh2LCBrKSA9PiB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrKSk7XG4gICAgdGhpcy5lbWl0KHRydWUpO1xuICB9XG4gIGFzeW5jIHJlc29sdmVEYXRhKHNpZ25hbCkge1xuICAgIGxldCBhYm9ydGVkID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGxldCBvbkFib3J0ID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcbiAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICBhYm9ydGVkID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICAgICAgaWYgKGFib3J0ZWQgfHwgdGhpcy5kb25lKSB7XG4gICAgICAgICAgICByZXNvbHZlKGFib3J0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cbiAgZ2V0IGRvbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ0tleXNTZXQuc2l6ZSA9PT0gMDtcbiAgfVxuICBnZXQgdW53cmFwcGVkRGF0YSgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5kYXRhICE9PSBudWxsICYmIHRoaXMuZG9uZSwgXCJDYW4gb25seSB1bndyYXAgZGF0YSBvbiBpbml0aWFsaXplZCBhbmQgc2V0dGxlZCBkZWZlcnJlZHNcIik7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMuZGF0YSkucmVkdWNlKChhY2MsIF9yZWYzKSA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjM7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKVxuICAgICAgfSk7XG4gICAgfSwge30pO1xuICB9XG4gIGdldCBwZW5kaW5nS2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnBlbmRpbmdLZXlzU2V0KTtcbiAgfVxufVxuZnVuY3Rpb24gaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlICYmIHZhbHVlLl90cmFja2VkID09PSB0cnVlO1xufVxuZnVuY3Rpb24gdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgaWYgKCFpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUuX2Vycm9yKSB7XG4gICAgdGhyb3cgdmFsdWUuX2Vycm9yO1xuICB9XG4gIHJldHVybiB2YWx1ZS5fZGF0YTtcbn1cbmNvbnN0IGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBzdGF0dXM6IGluaXRcbiAgfSA6IGluaXQ7XG4gIHJldHVybiBuZXcgRGVmZXJyZWREYXRhKGRhdGEsIHJlc3BvbnNlSW5pdCk7XG59O1xuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlLiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuY29uc3QgcmVkaXJlY3QgPSBmdW5jdGlvbiByZWRpcmVjdCh1cmwsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSAzMDI7XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IGluaXQ7XG4gIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0ID09PSBcIm51bWJlclwiKSB7XG4gICAgcmVzcG9uc2VJbml0ID0ge1xuICAgICAgc3RhdHVzOiByZXNwb25zZUluaXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZXNwb25zZUluaXQuc3RhdHVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmVzcG9uc2VJbml0LnN0YXR1cyA9IDMwMjtcbiAgfVxuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcbiAgaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCB1cmwpO1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIF9leHRlbmRzKHt9LCByZXNwb25zZUluaXQsIHtcbiAgICBoZWFkZXJzXG4gIH0pKTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UgdGhhdCB3aWxsIGZvcmNlIGEgZG9jdW1lbnQgcmVsb2FkIHRvIHRoZSBuZXcgbG9jYXRpb24uXG4gKiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuY29uc3QgcmVkaXJlY3REb2N1bWVudCA9ICh1cmwsIGluaXQpID0+IHtcbiAgbGV0IHJlc3BvbnNlID0gcmVkaXJlY3QodXJsLCBpbml0KTtcbiAgcmVzcG9uc2UuaGVhZGVycy5zZXQoXCJYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFwiLCBcInRydWVcIik7XG4gIHJldHVybiByZXNwb25zZTtcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKiBVdGlsaXR5IGNsYXNzIHdlIHVzZSB0byBob2xkIGF1dG8tdW53cmFwcGVkIDR4eC81eHggUmVzcG9uc2UgYm9kaWVzXG4gKlxuICogV2UgZG9uJ3QgZXhwb3J0IHRoZSBjbGFzcyBmb3IgcHVibGljIHVzZSBzaW5jZSBpdCdzIGFuIGltcGxlbWVudGF0aW9uXG4gKiBkZXRhaWwsIGJ1dCB3ZSBleHBvcnQgdGhlIGludGVyZmFjZSBhYm92ZSBzbyBmb2xrcyBjYW4gYnVpbGQgdGhlaXIgb3duXG4gKiBhYnN0cmFjdGlvbnMgYXJvdW5kIGluc3RhbmNlcyB2aWEgaXNSb3V0ZUVycm9yUmVzcG9uc2UoKVxuICovXG5jbGFzcyBFcnJvclJlc3BvbnNlSW1wbCB7XG4gIGNvbnN0cnVjdG9yKHN0YXR1cywgc3RhdHVzVGV4dCwgZGF0YSwgaW50ZXJuYWwpIHtcbiAgICBpZiAoaW50ZXJuYWwgPT09IHZvaWQgMCkge1xuICAgICAgaW50ZXJuYWwgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuaW50ZXJuYWwgPSBpbnRlcm5hbDtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICB0aGlzLmVycm9yID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVycm9yIGlzIGFuIEVycm9yUmVzcG9uc2UgZ2VuZXJhdGVkIGZyb20gYSA0eHgvNXh4XG4gKiBSZXNwb25zZSB0aHJvd24gZnJvbSBhbiBhY3Rpb24vbG9hZGVyXG4gKi9cbmZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSB7XG4gIHJldHVybiBlcnJvciAhPSBudWxsICYmIHR5cGVvZiBlcnJvci5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVycm9yLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGVycm9yLmludGVybmFsID09PSBcImJvb2xlYW5cIiAmJiBcImRhdGFcIiBpbiBlcnJvcjtcbn1cblxuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIgPSBbXCJwb3N0XCIsIFwicHV0XCIsIFwicGF0Y2hcIiwgXCJkZWxldGVcIl07XG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kcyA9IG5ldyBTZXQodmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIpO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kc0FyciA9IFtcImdldFwiLCAuLi52YWxpZE11dGF0aW9uTWV0aG9kc0Fycl07XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzID0gbmV3IFNldCh2YWxpZFJlcXVlc3RNZXRob2RzQXJyKTtcbmNvbnN0IHJlZGlyZWN0U3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuY29uc3QgcmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzA3LCAzMDhdKTtcbmNvbnN0IElETEVfTkFWSUdBVElPTiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAganNvbjogdW5kZWZpbmVkLFxuICB0ZXh0OiB1bmRlZmluZWRcbn07XG5jb25zdCBJRExFX0ZFVENIRVIgPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgZGF0YTogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAganNvbjogdW5kZWZpbmVkLFxuICB0ZXh0OiB1bmRlZmluZWRcbn07XG5jb25zdCBJRExFX0JMT0NLRVIgPSB7XG4gIHN0YXRlOiBcInVuYmxvY2tlZFwiLFxuICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gIHJlc2V0OiB1bmRlZmluZWQsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWRcbn07XG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG5jb25zdCBkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgaGFzRXJyb3JCb3VuZGFyeTogQm9vbGVhbihyb3V0ZS5oYXNFcnJvckJvdW5kYXJ5KVxufSk7XG5jb25zdCBUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSA9IFwicmVtaXgtcm91dGVyLXRyYW5zaXRpb25zXCI7XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlUm91dGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBDcmVhdGUgYSByb3V0ZXIgYW5kIGxpc3RlbiB0byBoaXN0b3J5IFBPUCBuYXZpZ2F0aW9uc1xuICovXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXIoaW5pdCkge1xuICBjb25zdCByb3V0ZXJXaW5kb3cgPSBpbml0LndpbmRvdyA/IGluaXQud2luZG93IDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbiAgY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHJvdXRlcldpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygcm91dGVyV2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgY29uc3QgaXNTZXJ2ZXIgPSAhaXNCcm93c2VyO1xuICBpbnZhcmlhbnQoaW5pdC5yb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVSb3V0ZXJcIik7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM7XG4gIGlmIChpbml0Lm1hcFJvdXRlUHJvcGVydGllcykge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGluaXQubWFwUm91dGVQcm9wZXJ0aWVzO1xuICB9IGVsc2UgaWYgKGluaXQuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgLy8gUm91dGVzIGtleWVkIGJ5IElEXG4gIGxldCBtYW5pZmVzdCA9IHt9O1xuICAvLyBSb3V0ZXMgaW4gdHJlZSBmb3JtYXQgZm9yIG1hdGNoaW5nXG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhpbml0LnJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgbGV0IGluRmxpZ2h0RGF0YVJvdXRlcztcbiAgbGV0IGJhc2VuYW1lID0gaW5pdC5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlID0gX2V4dGVuZHMoe1xuICAgIHY3X2ZldGNoZXJQZXJzaXN0OiBmYWxzZSxcbiAgICB2N19ub3JtYWxpemVGb3JtTWV0aG9kOiBmYWxzZSxcbiAgICB2N19wcmVwZW5kQmFzZW5hbWU6IGZhbHNlXG4gIH0sIGluaXQuZnV0dXJlKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgaGlzdG9yeVxuICBsZXQgdW5saXN0ZW5IaXN0b3J5ID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbnMgdG8gY2FsbCBvbiBhbGwgc3RhdGUgY2hhbmdlc1xuICBsZXQgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgb2JqZWN0IHRvIGhvbGQgc2Nyb2xsIHJlc3RvcmF0aW9uIGxvY2F0aW9ucyBkdXJpbmcgcm91dGluZ1xuICBsZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcmVzdG9yYXRpb24ga2V5c1xuICBsZXQgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICBsZXQgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAvLyBPbmUtdGltZSBmbGFnIHRvIGNvbnRyb2wgdGhlIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbi4gIEJlY2F1c2VcbiAgLy8gd2UgZG9uJ3QgZ2V0IHRoZSBzYXZlZCBwb3NpdGlvbnMgZnJvbSA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gdW50aWwgX2FmdGVyX1xuICAvLyB0aGUgaW5pdGlhbCByZW5kZXIsIHdlIG5lZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBhIHNlcGFyYXRlIHVwZGF0ZVN0YXRlIHRvXG4gIC8vIHNlbmQgYWxvbmcgdGhlIHJlc3RvcmVTY3JvbGxQb3NpdGlvblxuICAvLyBTZXQgdG8gdHJ1ZSBpZiB3ZSBoYXZlIGBoeWRyYXRpb25EYXRhYCBzaW5jZSB3ZSBhc3N1bWUgd2Ugd2VyZSBTU1InZCBhbmQgdGhhdFxuICAvLyBTU1IgZGlkIHRoZSBpbml0aWFsIHNjcm9sbCByZXN0b3JhdGlvbi5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgbGV0IGluaXRpYWxFcnJvcnMgPSBudWxsO1xuICBpZiAoaW5pdGlhbE1hdGNoZXMgPT0gbnVsbCkge1xuICAgIC8vIElmIHdlIGRvIG5vdCBtYXRjaCBhIHVzZXItcHJvdmlkZWQtcm91dGUsIGZhbGwgYmFjayB0byB0aGUgcm9vdFxuICAgIC8vIHRvIGFsbG93IHRoZSBlcnJvciBib3VuZGFyeSB0byB0YWtlIG92ZXJcbiAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgcGF0aG5hbWU6IGluaXQuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZVxuICAgIH0pO1xuICAgIGxldCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgcm91dGVcbiAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgaW5pdGlhbEVycm9ycyA9IHtcbiAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgfTtcbiAgfVxuICBsZXQgaW5pdGlhbGl6ZWQgPVxuICAvLyBBbGwgaW5pdGlhbE1hdGNoZXMgbmVlZCB0byBiZSBsb2FkZWQgYmVmb3JlIHdlJ3JlIHJlYWR5LiAgSWYgd2UgaGF2ZSBsYXp5XG4gIC8vIGZ1bmN0aW9ucyBhcm91bmQgc3RpbGwgdGhlbiB3ZSdsbCBuZWVkIHRvIHJ1biB0aGVtIGluIGluaXRpYWxpemUoKVxuICAhaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubGF6eSkgJiYgKFxuICAvLyBBbmQgd2UgaGF2ZSB0byBlaXRoZXIgaGF2ZSBubyBsb2FkZXJzIG9yIGhhdmUgYmVlbiBwcm92aWRlZCBoeWRyYXRpb25EYXRhXG4gICFpbml0aWFsTWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5sb2FkZXIpIHx8IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsKTtcbiAgbGV0IHJvdXRlcjtcbiAgbGV0IHN0YXRlID0ge1xuICAgIGhpc3RvcnlBY3Rpb246IGluaXQuaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGluaXQuaGlzdG9yeS5sb2NhdGlvbixcbiAgICBtYXRjaGVzOiBpbml0aWFsTWF0Y2hlcyxcbiAgICBpbml0aWFsaXplZCxcbiAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgLy8gRG9uJ3QgcmVzdG9yZSBvbiBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgaWYgd2Ugd2VyZSBTU1InZFxuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwgPyBmYWxzZSA6IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKSxcbiAgICBibG9ja2VyczogbmV3IE1hcCgpXG4gIH07XG4gIC8vIC0tIFN0YXRlZnVsIGludGVybmFsIHZhcmlhYmxlcyB0byBtYW5hZ2UgbmF2aWdhdGlvbnMgLS1cbiAgLy8gQ3VycmVudCBuYXZpZ2F0aW9uIGluIHByb2dyZXNzICh0byBiZSBjb21taXR0ZWQgaW4gY29tcGxldGVOYXZpZ2F0aW9uKVxuICBsZXQgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIC8vIFNob3VsZCB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHByZXZlbnQgdGhlIHNjcm9sbCByZXNldCBpZiBzY3JvbGwgY2Fubm90XG4gIC8vIGJlIHJlc3RvcmVkP1xuICBsZXQgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAvLyBBYm9ydENvbnRyb2xsZXIgZm9yIHRoZSBhY3RpdmUgbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyO1xuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBlbmFibGUgZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbj9cbiAgbGV0IHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgLy8gU3RvcmUgYXBwbGllZCB2aWV3IHRyYW5zaXRpb25zIHNvIHdlIGNhbiBhcHBseSB0aGVtIG9uIFBPUFxuICBsZXQgYXBwbGllZFZpZXdUcmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgcGVyc2lzdGluZyBhcHBsaWVkIHRyYW5zaXRpb25zIHRvIHNlc3Npb25TdG9yYWdlXG4gIGxldCByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSBudWxsO1xuICAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG4gIGxldCBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgZmxhZyB0byBmb3JjZSByZXZhbGlkYXRpb24gb2YgYWxsIGxvYWRlcnM6XG4gIC8vICAtIHN1Ym1pc3Npb25zIChjb21wbGV0ZWQgb3IgaW50ZXJydXB0ZWQpXG4gIC8vICAtIHVzZVJldmFsaWRhdG9yKClcbiAgLy8gIC0gWC1SZW1peC1SZXZhbGlkYXRlIChmcm9tIHJlZGlyZWN0KVxuICBsZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG4gIGxldCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgLy8gQWJvcnRDb250cm9sbGVycyBmb3IgYW55IGluLWZsaWdodCBmZXRjaGVyc1xuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXAoKTtcbiAgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuICBsZXQgaW5jcmVtZW50aW5nTG9hZElkID0gMDtcbiAgLy8gVHJhY2sgdGhlIG91dHN0YW5kaW5nIHBlbmRpbmcgbmF2aWdhdGlvbiBkYXRhIGxvYWQgdG8gYmUgY29tcGFyZWQgYWdhaW5zdFxuICAvLyB0aGUgZ2xvYmFsbHkgaW5jcmVtZW50aW5nIGxvYWQgd2hlbiBhIGZldGNoZXIgbG9hZCBsYW5kcyBhZnRlciBhIGNvbXBsZXRlZFxuICAvLyBuYXZpZ2F0aW9uXG4gIGxldCBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9IC0xO1xuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCBkYXRhIHJlbG9hZHMgYXMgYSByZXN1bHQgb2YgdGhlaXIgYWN0aW9uc1xuICBsZXQgZmV0Y2hSZWxvYWRJZHMgPSBuZXcgTWFwKCk7XG4gIC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIHJlZGlyZWN0IG5hdmlnYXRpb25zXG4gIGxldCBmZXRjaFJlZGlyZWN0SWRzID0gbmV3IFNldCgpO1xuICAvLyBNb3N0IHJlY2VudCBocmVmL21hdGNoIGZvciBmZXRjaGVyLmxvYWQgY2FsbHMgZm9yIGZldGNoZXJzXG4gIGxldCBmZXRjaExvYWRNYXRjaGVzID0gbmV3IE1hcCgpO1xuICAvLyBSZWYtY291bnQgbW91bnRlZCBmZXRjaGVycyBzbyB3ZSBrbm93IHdoZW4gaXQncyBvayB0byBjbGVhbiB0aGVtIHVwXG4gIGxldCBhY3RpdmVGZXRjaGVycyA9IG5ldyBNYXAoKTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCBoYXZlIHJlcXVlc3RlZCBhIGRlbGV0ZSB3aGVuIHVzaW5nIHY3X2ZldGNoZXJQZXJzaXN0LFxuICAvLyB0aGV5J2xsIGJlIG9mZmljaWFsbHkgcmVtb3ZlZCBhZnRlciB0aGV5IHJldHVybiB0byBpZGxlXG4gIGxldCBkZWxldGVkRmV0Y2hlcnMgPSBuZXcgU2V0KCk7XG4gIC8vIFN0b3JlIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgZm9yIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLiAgV2hlbiBhXG4gIC8vIHJvdXRlIGxvYWRlciByZXR1cm5zIGRlZmVyKCkgd2Ugc3RpY2sgb25lIGluIGhlcmUuICBUaGVuLCB3aGVuIGEgbmVzdGVkXG4gIC8vIHByb21pc2UgcmVzb2x2ZXMgd2UgdXBkYXRlIGxvYWRlckRhdGEuICBJZiBhIG5ldyBuYXZpZ2F0aW9uIHN0YXJ0cyB3ZVxuICAvLyBjYW5jZWwgYWN0aXZlIGRlZmVycmVkcyBmb3IgZWxpbWluYXRlZCByb3V0ZXMuXG4gIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7XG4gIC8vIFN0b3JlIGJsb2NrZXIgZnVuY3Rpb25zIGluIGEgc2VwYXJhdGUgTWFwIG91dHNpZGUgb2Ygcm91dGVyIHN0YXRlIHNpbmNlXG4gIC8vIHdlIGRvbid0IG5lZWQgdG8gdXBkYXRlIFVJIHN0YXRlIGlmIHRoZXkgY2hhbmdlXG4gIGxldCBibG9ja2VyRnVuY3Rpb25zID0gbmV3IE1hcCgpO1xuICAvLyBGbGFnIHRvIGlnbm9yZSB0aGUgbmV4dCBoaXN0b3J5IHVwZGF0ZSwgc28gd2UgY2FuIHJldmVydCB0aGUgVVJMIGNoYW5nZSBvblxuICAvLyBhIFBPUCBuYXZpZ2F0aW9uIHRoYXQgd2FzIGJsb2NrZWQgYnkgdGhlIHVzZXIgd2l0aG91dCB0b3VjaGluZyByb3V0ZXIgc3RhdGVcbiAgbGV0IGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG4gIC8vIEluaXRpYWxpemUgdGhlIHJvdXRlciwgYWxsIHNpZGUgZWZmZWN0cyBzaG91bGQgYmUga2lja2VkIG9mZiBmcm9tIGhlcmUuXG4gIC8vIEltcGxlbWVudGVkIGFzIGEgRmx1ZW50IEFQSSBmb3IgZWFzZSBvZjpcbiAgLy8gICBsZXQgcm91dGVyID0gY3JlYXRlUm91dGVyKGluaXQpLmluaXRpYWxpemUoKTtcbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAvLyBJZiBoaXN0b3J5IGluZm9ybXMgdXMgb2YgYSBQT1AgbmF2aWdhdGlvbiwgc3RhcnQgdGhlIG5hdmlnYXRpb24gYnV0IGRvIG5vdCB1cGRhdGVcbiAgICAvLyBzdGF0ZS4gIFdlJ2xsIHVwZGF0ZSBvdXIgb3duIHN0YXRlIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgdW5saXN0ZW5IaXN0b3J5ID0gaW5pdC5oaXN0b3J5Lmxpc3RlbihfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGFjdGlvbjogaGlzdG9yeUFjdGlvbixcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIGRlbHRhXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIC8vIElnbm9yZSB0aGlzIGV2ZW50IGlmIGl0IHdhcyBqdXN0IHVzIHJlc2V0dGluZyB0aGUgVVJMIGZyb20gYVxuICAgICAgLy8gYmxvY2tlZCBQT1AgbmF2aWdhdGlvblxuICAgICAgaWYgKGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlKSB7XG4gICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdhcm5pbmcoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwIHx8IGRlbHRhICE9IG51bGwsIFwiWW91IGFyZSB0cnlpbmcgdG8gdXNlIGEgYmxvY2tlciBvbiBhIFBPUCBuYXZpZ2F0aW9uIHRvIGEgbG9jYXRpb24gXCIgKyBcInRoYXQgd2FzIG5vdCBjcmVhdGVkIGJ5IEByZW1peC1ydW4vcm91dGVyLiBUaGlzIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbi4gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBhcmUgbmF2aWdhdGluZyBvdXRzaWRlIHRoZSByb3V0ZXIgXCIgKyBcInZpYSBgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlYC9gd2luZG93LmxvY2F0aW9uLmhhc2hgIGluc3RlYWQgb2YgdXNpbmcgXCIgKyBcInJvdXRlciBuYXZpZ2F0aW9uIEFQSXMuICBUaGlzIGNhbiBhbHNvIGhhcHBlbiBpZiB5b3UgYXJlIHVzaW5nIFwiICsgXCJjcmVhdGVIYXNoUm91dGVyIGFuZCB0aGUgdXNlciBtYW51YWxseSBjaGFuZ2VzIHRoZSBVUkwuXCIpO1xuICAgICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBoaXN0b3J5QWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGlmIChibG9ja2VyS2V5ICYmIGRlbHRhICE9IG51bGwpIHtcbiAgICAgICAgLy8gUmVzdG9yZSB0aGUgVVJMIHRvIG1hdGNoIHRoZSBjdXJyZW50IFVJLCBidXQgZG9uJ3QgdXBkYXRlIHJvdXRlciBzdGF0ZVxuICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSAqIC0xKTtcbiAgICAgICAgLy8gUHV0IHRoZSBibG9ja2VyIGludG8gYSBibG9ja2VkIHN0YXRlXG4gICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBsb2NhdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBSZS1kbyB0aGUgc2FtZSBQT1AgbmF2aWdhdGlvbiB3ZSBqdXN0IGJsb2NrZWRcbiAgICAgICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXksIElETEVfQkxPQ0tFUik7XG4gICAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICAgIGJsb2NrZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICB9KTtcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICAvLyBGSVhNRTogVGhpcyBmZWVscyBncm9zcy4gIEhvdyBjYW4gd2UgY2xlYW51cCB0aGUgbGluZXMgYmV0d2VlblxuICAgICAgLy8gc2Nyb2xsUmVzdG9yYXRpb24vYXBwbGllZFRyYW5zaXRpb25zIHBlcnNpc3RhbmNlP1xuICAgICAgcmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgbGV0IF9zYXZlQXBwbGllZFRyYW5zaXRpb25zID0gKCkgPT4gcGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgcm91dGVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyk7XG4gICAgICByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSAoKSA9PiByb3V0ZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9zYXZlQXBwbGllZFRyYW5zaXRpb25zKTtcbiAgICB9XG4gICAgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuICAgIC8vIE5vdGUgd2UgZG9uJ3QgZG8gYW55IGhhbmRsaW5nIG9mIGxhenkgaGVyZS4gIEZvciBTUEEncyBpdCdsbCBnZXQgaGFuZGxlZFxuICAgIC8vIGluIHRoZSBub3JtYWwgbmF2aWdhdGlvbiBmbG93LiAgRm9yIFNTUiBpdCdzIGV4cGVjdGVkIHRoYXQgbGF6eSBtb2R1bGVzIGFyZVxuICAgIC8vIHJlc29sdmVkIHByaW9yIHRvIHJvdXRlciBjcmVhdGlvbiBzaW5jZSB3ZSBjYW4ndCBnbyBpbnRvIGEgZmFsbGJhY2tFbGVtZW50XG4gICAgLy8gVUkgZm9yIFNTUidkIGFwcHNcbiAgICBpZiAoIXN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oQWN0aW9uLlBvcCwgc3RhdGUubG9jYXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG4gIC8vIENsZWFuIHVwIGEgcm91dGVyIGFuZCBpdCdzIHNpZGUgZWZmZWN0c1xuICBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGlmICh1bmxpc3Rlbkhpc3RvcnkpIHtcbiAgICAgIHVubGlzdGVuSGlzdG9yeSgpO1xuICAgIH1cbiAgICBpZiAocmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyKSB7XG4gICAgICByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIoKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVGZXRjaGVyKGtleSkpO1xuICAgIHN0YXRlLmJsb2NrZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlQmxvY2tlcihrZXkpKTtcbiAgfVxuICAvLyBTdWJzY3JpYmUgdG8gc3RhdGUgdXBkYXRlcyBmb3IgdGhlIHJvdXRlclxuICBmdW5jdGlvbiBzdWJzY3JpYmUoZm4pIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9XG4gIC8vIFVwZGF0ZSBvdXIgc3RhdGUgYW5kIG5vdGlmeSB0aGUgY2FsbGluZyBjb250ZXh0IG9mIHRoZSBjaGFuZ2VcbiAgZnVuY3Rpb24gdXBkYXRlU3RhdGUobmV3U3RhdGUsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgLy8gUHJlcCBmZXRjaGVyIGNsZWFudXAgc28gd2UgY2FuIHRlbGwgdGhlIFVJIHdoaWNoIGZldGNoZXIgZGF0YSBlbnRyaWVzXG4gICAgLy8gY2FuIGJlIHJlbW92ZWRcbiAgICBsZXQgY29tcGxldGVkRmV0Y2hlcnMgPSBbXTtcbiAgICBsZXQgZGVsZXRlZEZldGNoZXJzS2V5cyA9IFtdO1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIHN0YXRlLmZldGNoZXJzLmZvckVhY2goKGZldGNoZXIsIGtleSkgPT4ge1xuICAgICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgICAgICBpZiAoZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAvLyBVbm1vdW50ZWQgZnJvbSB0aGUgVUkgYW5kIGNhbiBiZSB0b3RhbGx5IHJlbW92ZWRcbiAgICAgICAgICAgIGRlbGV0ZWRGZXRjaGVyc0tleXMucHVzaChrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBSZXR1cm5lZCB0byBpZGxlIGJ1dCBzdGlsbCBtb3VudGVkIGluIHRoZSBVSSwgc28gc2VtaS1yZW1haW5zIGZvclxuICAgICAgICAgICAgLy8gcmV2YWxpZGF0aW9ucyBhbmQgc3VjaFxuICAgICAgICAgICAgY29tcGxldGVkRmV0Y2hlcnMucHVzaChrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEl0ZXJhdGUgb3ZlciBhIGxvY2FsIGNvcHkgc28gdGhhdCBpZiBmbHVzaFN5bmMgaXMgdXNlZCBhbmQgd2UgZW5kIHVwXG4gICAgLy8gcmVtb3ZpbmcgYW5kIGFkZGluZyBhIG5ldyBzdWJzY3JpYmVyIGR1ZSB0byB0aGUgdXNlQ2FsbGJhY2sgZGVwZW5kZW5jaWVzLFxuICAgIC8vIHdlIGRvbid0IGdldCBvdXJzZWx2ZXMgaW50byBhIGxvb3AgY2FsbGluZyB0aGUgbmV3IHN1YnNjcmliZXIgaW1tZWRpYXRlbHlcbiAgICBbLi4uc3Vic2NyaWJlcnNdLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKHN0YXRlLCB7XG4gICAgICBkZWxldGVkRmV0Y2hlcnM6IGRlbGV0ZWRGZXRjaGVyc0tleXMsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbk9wdHM6IG9wdHMudmlld1RyYW5zaXRpb25PcHRzLFxuICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRzLmZsdXNoU3luYyA9PT0gdHJ1ZVxuICAgIH0pKTtcbiAgICAvLyBSZW1vdmUgaWRsZSBmZXRjaGVycyBmcm9tIHN0YXRlIHNpbmNlIHdlIG9ubHkgY2FyZSBhYm91dCBpbi1mbGlnaHQgZmV0Y2hlcnMuXG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgY29tcGxldGVkRmV0Y2hlcnMuZm9yRWFjaChrZXkgPT4gc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSkpO1xuICAgICAgZGVsZXRlZEZldGNoZXJzS2V5cy5mb3JFYWNoKGtleSA9PiBkZWxldGVGZXRjaGVyKGtleSkpO1xuICAgIH1cbiAgfVxuICAvLyBDb21wbGV0ZSBhIG5hdmlnYXRpb24gcmV0dXJuaW5nIHRoZSBzdGF0ZS5uYXZpZ2F0aW9uIGJhY2sgdG8gdGhlIElETEVfTkFWSUdBVElPTlxuICAvLyBhbmQgc2V0dGluZyBzdGF0ZS5baGlzdG9yeUFjdGlvbi9sb2NhdGlvbi9tYXRjaGVzXSB0byB0aGUgbmV3IHJvdXRlLlxuICAvLyAtIExvY2F0aW9uIGlzIGEgcmVxdWlyZWQgcGFyYW1cbiAgLy8gLSBOYXZpZ2F0aW9uIHdpbGwgYWx3YXlzIGJlIHNldCB0byBJRExFX05BVklHQVRJT05cbiAgLy8gLSBDYW4gcGFzcyBhbnkgb3RoZXIgc3RhdGUgaW4gbmV3U3RhdGVcbiAgZnVuY3Rpb24gY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZSwgX3RlbXApIHtcbiAgICB2YXIgX2xvY2F0aW9uJHN0YXRlLCBfbG9jYXRpb24kc3RhdGUyO1xuICAgIGxldCB7XG4gICAgICBmbHVzaFN5bmNcbiAgICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gICAgLy8gRGVkdWNlIGlmIHdlJ3JlIGluIGEgbG9hZGluZy9hY3Rpb25SZWxvYWQgc3RhdGU6XG4gICAgLy8gLSBXZSBoYXZlIGNvbW1pdHRlZCBhY3Rpb25EYXRhIGluIHRoZSBzdG9yZVxuICAgIC8vIC0gVGhlIGN1cnJlbnQgbmF2aWdhdGlvbiB3YXMgYSBtdXRhdGlvbiBzdWJtaXNzaW9uXG4gICAgLy8gLSBXZSdyZSBwYXN0IHRoZSBzdWJtaXR0aW5nIHN0YXRlIGFuZCBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlXG4gICAgLy8gLSBUaGUgbG9jYXRpb24gYmVpbmcgbG9hZGVkIGlzIG5vdCB0aGUgcmVzdWx0IG9mIGEgcmVkaXJlY3RcbiAgICBsZXQgaXNBY3Rpb25SZWxvYWQgPSBzdGF0ZS5hY3Rpb25EYXRhICE9IG51bGwgJiYgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmICgoX2xvY2F0aW9uJHN0YXRlID0gbG9jYXRpb24uc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfbG9jYXRpb24kc3RhdGUuX2lzUmVkaXJlY3QpICE9PSB0cnVlO1xuICAgIGxldCBhY3Rpb25EYXRhO1xuICAgIGlmIChuZXdTdGF0ZS5hY3Rpb25EYXRhKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMobmV3U3RhdGUuYWN0aW9uRGF0YSkubGVuZ3RoID4gMCkge1xuICAgICAgICBhY3Rpb25EYXRhID0gbmV3U3RhdGUuYWN0aW9uRGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEVtcHR5IGFjdGlvbkRhdGEgLT4gY2xlYXIgcHJpb3IgYWN0aW9uRGF0YSBkdWUgdG8gYW4gYWN0aW9uIGVycm9yXG4gICAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBY3Rpb25SZWxvYWQpIHtcbiAgICAgIC8vIEtlZXAgdGhlIGN1cnJlbnQgZGF0YSBpZiB3ZSdyZSB3cmFwcGluZyB1cCB0aGUgYWN0aW9uIHJlbG9hZFxuICAgICAgYWN0aW9uRGF0YSA9IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENsZWFyIGFjdGlvbkRhdGEgb24gYW55IG90aGVyIGNvbXBsZXRlZCBuYXZpZ2F0aW9uc1xuICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBwcmVzZXJ2ZSBhbnkgZXhpc3RpbmcgbG9hZGVyRGF0YSBmcm9tIHJlLXVzZWQgcm91dGVzXG4gICAgbGV0IGxvYWRlckRhdGEgPSBuZXdTdGF0ZS5sb2FkZXJEYXRhID8gbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLm1hdGNoZXMgfHwgW10sIG5ld1N0YXRlLmVycm9ycykgOiBzdGF0ZS5sb2FkZXJEYXRhO1xuICAgIC8vIE9uIGEgc3VjY2Vzc2Z1bCBuYXZpZ2F0aW9uIHdlIGNhbiBhc3N1bWUgd2UgZ290IHRocm91Z2ggYWxsIGJsb2NrZXJzXG4gICAgLy8gc28gd2UgY2FuIHN0YXJ0IGZyZXNoXG4gICAgbGV0IGJsb2NrZXJzID0gc3RhdGUuYmxvY2tlcnM7XG4gICAgaWYgKGJsb2NrZXJzLnNpemUgPiAwKSB7XG4gICAgICBibG9ja2VycyA9IG5ldyBNYXAoYmxvY2tlcnMpO1xuICAgICAgYmxvY2tlcnMuZm9yRWFjaCgoXywgaykgPT4gYmxvY2tlcnMuc2V0KGssIElETEVfQkxPQ0tFUikpO1xuICAgIH1cbiAgICAvLyBBbHdheXMgcmVzcGVjdCB0aGUgdXNlciBmbGFnLiAgT3RoZXJ3aXNlIGRvbid0IHJlc2V0IG9uIG11dGF0aW9uXG4gICAgLy8gc3VibWlzc2lvbiBuYXZpZ2F0aW9ucyB1bmxlc3MgdGhleSByZWRpcmVjdFxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPSBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIHx8IHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJiAoKF9sb2NhdGlvbiRzdGF0ZTIgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZTIuX2lzUmVkaXJlY3QpICE9PSB0cnVlO1xuICAgIGlmIChpbkZsaWdodERhdGFSb3V0ZXMpIHtcbiAgICAgIGRhdGFSb3V0ZXMgPSBpbkZsaWdodERhdGFSb3V0ZXM7XG4gICAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUHVzaCkge1xuICAgICAgaW5pdC5oaXN0b3J5LnB1c2gobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5SZXBsYWNlKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH1cbiAgICBsZXQgdmlld1RyYW5zaXRpb25PcHRzO1xuICAgIC8vIE9uIFBPUCwgZW5hYmxlIHRyYW5zaXRpb25zIGlmIHRoZXkgd2VyZSBlbmFibGVkIG9uIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uXG4gICAgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIHtcbiAgICAgIC8vIEZvcndhcmQgdGFrZXMgcHJlY2VkZW5jZSBzbyB0aGV5IGJlaGF2ZSBsaWtlIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uXG4gICAgICBsZXQgcHJpb3JQYXRocyA9IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuZ2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIGlmIChwcmlvclBhdGhzICYmIHByaW9yUGF0aHMuaGFzKGxvY2F0aW9uLnBhdGhuYW1lKSkge1xuICAgICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuaGFzKGxvY2F0aW9uLnBhdGhuYW1lKSkge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgcHJldmlvdXMgZm9yd2FyZCBuYXYsIGFzc3VtZSB3ZSdyZSBwb3BwaW5nIGJhY2sgdG9cbiAgICAgICAgLy8gdGhlIG5ldyBsb2NhdGlvbiBhbmQgZW5hYmxlIGlmIHRoYXQgbG9jYXRpb24gcHJldmlvdXNseSBlbmFibGVkXG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogc3RhdGUubG9jYXRpb25cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQpIHtcbiAgICAgIC8vIFN0b3JlIHRoZSBhcHBsaWVkIHRyYW5zaXRpb24gb24gUFVTSC9SRVBMQUNFXG4gICAgICBsZXQgdG9QYXRocyA9IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuZ2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIGlmICh0b1BhdGhzKSB7XG4gICAgICAgIHRvUGF0aHMuYWRkKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvUGF0aHMgPSBuZXcgU2V0KFtsb2NhdGlvbi5wYXRobmFtZV0pO1xuICAgICAgICBhcHBsaWVkVmlld1RyYW5zaXRpb25zLnNldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSwgdG9QYXRocyk7XG4gICAgICB9XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgYWN0aW9uRGF0YSxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG5ld1N0YXRlLm1hdGNoZXMgfHwgc3RhdGUubWF0Y2hlcyksXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBibG9ja2Vyc1xuICAgIH0pLCB7XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICBmbHVzaFN5bmM6IGZsdXNoU3luYyA9PT0gdHJ1ZVxuICAgIH0pO1xuICAgIC8vIFJlc2V0IHN0YXRlZnVsIG5hdmlnYXRpb24gdmFyc1xuICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgICBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkID0gZmFsc2U7XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIH1cbiAgLy8gVHJpZ2dlciBhIG5hdmlnYXRpb24gZXZlbnQsIHdoaWNoIGNhbiBlaXRoZXIgYmUgYSBudW1lcmljYWwgUE9QIG9yIGEgUFVTSFxuICAvLyByZXBsYWNlIHdpdGggYW4gb3B0aW9uYWwgc3VibWlzc2lvblxuICBhc3luYyBmdW5jdGlvbiBuYXZpZ2F0ZSh0bywgb3B0cykge1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVRvKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSwgdG8sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnJvbVJvdXRlSWQsIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucmVsYXRpdmUpO1xuICAgIGxldCB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGVycm9yXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhmdXR1cmUudjdfbm9ybWFsaXplRm9ybU1ldGhvZCwgZmFsc2UsIG5vcm1hbGl6ZWRQYXRoLCBvcHRzKTtcbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0gc3RhdGUubG9jYXRpb247XG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCBwYXRoLCBvcHRzICYmIG9wdHMuc3RhdGUpO1xuICAgIC8vIFdoZW4gdXNpbmcgbmF2aWdhdGUgYXMgYSBQVVNIL1JFUExBQ0Ugd2UgYXJlbid0IHJlYWRpbmcgYW4gYWxyZWFkeS1lbmNvZGVkXG4gICAgLy8gVVJMIGZyb20gd2luZG93LmxvY2F0aW9uLCBzbyB3ZSBuZWVkIHRvIGVuY29kZSBpdCBoZXJlIHNvIHRoZSBiZWhhdmlvclxuICAgIC8vIHJlbWFpbnMgdGhlIHNhbWUgYXMgUE9QIGFuZCBub24tZGF0YS1yb3V0ZXIgdXNhZ2VzLiAgbmV3IFVSTCgpIGRvZXMgYWxsXG4gICAgLy8gdGhlIHNhbWUgZW5jb2Rpbmcgd2UnZCBnZXQgZnJvbSBhIGhpc3RvcnkucHVzaFN0YXRlL3dpbmRvdy5sb2NhdGlvbiByZWFkXG4gICAgLy8gd2l0aG91dCBoYXZpbmcgdG8gdG91Y2ggaGlzdG9yeVxuICAgIG5leHRMb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBuZXh0TG9jYXRpb24sIGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbihuZXh0TG9jYXRpb24pKTtcbiAgICBsZXQgdXNlclJlcGxhY2UgPSBvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsID8gb3B0cy5yZXBsYWNlIDogdW5kZWZpbmVkO1xuICAgIGxldCBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgaWYgKHVzZXJSZXBsYWNlID09PSB0cnVlKSB7XG4gICAgICBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgfSBlbHNlIGlmICh1c2VyUmVwbGFjZSA9PT0gZmFsc2UpIDsgZWxzZSBpZiAoc3VibWlzc2lvbiAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSAmJiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICAvLyBCeSBkZWZhdWx0IG9uIHN1Ym1pc3Npb25zIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uIHdlIFJFUExBQ0Ugc28gdGhhdFxuICAgICAgLy8gdXNlcnMgZG9uJ3QgaGF2ZSB0byBkb3VibGUtY2xpY2sgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCB0byB0aGUgcHJpb3JcbiAgICAgIC8vIGxvY2F0aW9uLiAgSWYgdGhlIHVzZXIgcmVkaXJlY3RzIHRvIGEgZGlmZmVyZW50IGxvY2F0aW9uIGZyb20gdGhlXG4gICAgICAvLyBhY3Rpb24vbG9hZGVyIHRoaXMgd2lsbCBiZSBpZ25vcmVkIGFuZCB0aGUgcmVkaXJlY3Qgd2lsbCBiZSBhIFBVU0hcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9XG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IG9wdHMgJiYgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiBpbiBvcHRzID8gb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgOiB1bmRlZmluZWQ7XG4gICAgbGV0IGZsdXNoU3luYyA9IChvcHRzICYmIG9wdHMudW5zdGFibGVfZmx1c2hTeW5jKSA9PT0gdHJ1ZTtcbiAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG4gICAgaWYgKGJsb2NrZXJLZXkpIHtcbiAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gU2VuZCB0aGUgc2FtZSBuYXZpZ2F0aW9uIHRocm91Z2hcbiAgICAgICAgICBuYXZpZ2F0ZSh0bywgb3B0cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgIGJsb2NrZXJzLnNldChibG9ja2VyS2V5LCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgIGJsb2NrZXJzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIG5leHRMb2NhdGlvbiwge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIC8vIFNlbmQgdGhyb3VnaCB0aGUgZm9ybURhdGEgc2VyaWFsaXphdGlvbiBlcnJvciBpZiB3ZSBoYXZlIG9uZSBzbyB3ZSBjYW5cbiAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzXG4gICAgICBwZW5kaW5nRXJyb3I6IGVycm9yLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVwbGFjZTogb3B0cyAmJiBvcHRzLnJlcGxhY2UsXG4gICAgICBlbmFibGVWaWV3VHJhbnNpdGlvbjogb3B0cyAmJiBvcHRzLnVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgICAgZmx1c2hTeW5jXG4gICAgfSk7XG4gIH1cbiAgLy8gUmV2YWxpZGF0ZSBhbGwgY3VycmVudCBsb2FkZXJzLiAgSWYgYSBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzIG9yIGlmIHRoaXNcbiAgLy8gaXMgaW50ZXJydXB0ZWQgYnkgYSBuYXZpZ2F0aW9uLCBhbGxvdyB0aGlzIHRvIFwic3VjY2VlZFwiIGJ5IGNhbGxpbmcgYWxsXG4gIC8vIGxvYWRlcnMgZHVyaW5nIHRoZSBuZXh0IGxvYWRlciByb3VuZFxuICBmdW5jdGlvbiByZXZhbGlkYXRlKCkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgcmV2YWxpZGF0aW9uOiBcImxvYWRpbmdcIlxuICAgIH0pO1xuICAgIC8vIElmIHdlJ3JlIGN1cnJlbnRseSBzdWJtaXR0aW5nIGFuIGFjdGlvbiwgd2UgZG9uJ3QgbmVlZCB0byBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24sIHdlJ2xsIGp1c3QgbGV0IHRoZSBmb2xsb3cgdXAgbG9hZGVyIGV4ZWN1dGlvbiBjYWxsIGFsbCBsb2FkZXJzXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwic3VibWl0dGluZ1wiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHdlJ3JlIGN1cnJlbnRseSBpbiBhbiBpZGxlIHN0YXRlLCBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uIGZvciB0aGUgY3VycmVudFxuICAgIC8vIGFjdGlvbi9sb2NhdGlvbiBhbmQgbWFyayBpdCBhcyB1bmludGVycnVwdGVkLCB3aGljaCB3aWxsIHNraXAgdGhlIGhpc3RvcnlcbiAgICAvLyB1cGRhdGUgaW4gY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubG9jYXRpb24sIHtcbiAgICAgICAgc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gT3RoZXJ3aXNlLCBpZiB3ZSdyZSBjdXJyZW50bHkgaW4gYSBsb2FkaW5nIHN0YXRlLCBqdXN0IHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiB0byB0aGUgbmF2aWdhdGlvbi5sb2NhdGlvbiBidXQgZG8gbm90IHRyaWdnZXIgYW4gdW5pbnRlcnJ1cHRlZFxuICAgIC8vIHJldmFsaWRhdGlvbiBzbyB0aGF0IGhpc3RvcnkgY29ycmVjdGx5IHVwZGF0ZXMgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICBzdGFydE5hdmlnYXRpb24ocGVuZGluZ0FjdGlvbiB8fCBzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICBvdmVycmlkZU5hdmlnYXRpb246IHN0YXRlLm5hdmlnYXRpb25cbiAgICB9KTtcbiAgfVxuICAvLyBTdGFydCBhIG5hdmlnYXRpb24gdG8gdGhlIGdpdmVuIGFjdGlvbi9sb2NhdGlvbi4gIENhbiBvcHRpb25hbGx5IHByb3ZpZGUgYVxuICAvLyBvdmVycmlkZU5hdmlnYXRpb24gd2hpY2ggd2lsbCBvdmVycmlkZSB0aGUgbm9ybWFsTG9hZCBpbiB0aGUgY2FzZSBvZiBhIHJlZGlyZWN0XG4gIC8vIG5hdmlnYXRpb25cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uLCBvcHRzKSB7XG4gICAgLy8gQWJvcnQgYW55IGluLXByb2dyZXNzIG5hdmlnYXRpb25zIGFuZCBzdGFydCBhIG5ldyBvbmUuIFVuc2V0IGFueSBvbmdvaW5nXG4gICAgLy8gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb25zIHVubGVzcyB0b2xkIG90aGVyd2lzZSwgc2luY2Ugd2Ugd2FudCB0aGlzXG4gICAgLy8gbmV3IG5hdmlnYXRpb24gdG8gdXBkYXRlIGhpc3Rvcnkgbm9ybWFsbHlcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBwZW5kaW5nQWN0aW9uID0gaGlzdG9yeUFjdGlvbjtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSAob3B0cyAmJiBvcHRzLnN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgPT09IHRydWU7XG4gICAgLy8gU2F2ZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gZXZlcnkgdGltZSB3ZSBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uLFxuICAgIC8vIGFuZCB0cmFjayB3aGV0aGVyIHdlIHNob3VsZCByZXNldCBzY3JvbGwgb24gY29tcGxldGlvblxuICAgIHNhdmVTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkID0gKG9wdHMgJiYgb3B0cy5lbmFibGVWaWV3VHJhbnNpdGlvbikgPT09IHRydWU7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID0gb3B0cyAmJiBvcHRzLm92ZXJyaWRlTmF2aWdhdGlvbjtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWU7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCB3aXRoIGEgNDA0IG9uIHRoZSByb290IGVycm9yIGJvdW5kYXJ5IGlmIHdlIG1hdGNoIG5vdGhpbmdcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhyb3V0ZXNUb1VzZSk7XG4gICAgICAvLyBDYW5jZWwgYWxsIHBlbmRpbmcgZGVmZXJyZWQgb24gNDA0cyBzaW5jZSB3ZSBkb24ndCBrZWVwIGFueSByb3V0ZXNcbiAgICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcygpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiBpdCdzIG9ubHkgYSBoYXNoIGNoYW5nZSBhbmQgbm90IGEgcmV2YWxpZGF0aW9uIG9yXG4gICAgLy8gbXV0YXRpb24gc3VibWlzc2lvbi5cbiAgICAvL1xuICAgIC8vIElnbm9yZSBvbiBpbml0aWFsIHBhZ2UgbG9hZHMgYmVjYXVzZSBzaW5jZSB0aGUgaW5pdGlhbCBsb2FkIHdpbGwgYWx3YXlzXG4gICAgLy8gYmUgXCJzYW1lIGhhc2hcIi4gIEZvciBleGFtcGxlLCBvbiAvcGFnZSNoYXNoIGFuZCBzdWJtaXQgYSA8Rm9ybSBtZXRob2Q9XCJwb3N0XCI+XG4gICAgLy8gd2hpY2ggd2lsbCBkZWZhdWx0IHRvIGEgbmF2aWdhdGlvbiB0byAvcGFnZVxuICAgIGlmIChzdGF0ZS5pbml0aWFsaXplZCAmJiAhaXNSZXZhbGlkYXRpb25SZXF1aXJlZCAmJiBpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikgJiYgIShvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkpIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzXG4gICAgICB9LCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCByZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBsb2NhdGlvbiwgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbCwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24pO1xuICAgIGxldCBwZW5kaW5nQWN0aW9uRGF0YTtcbiAgICBsZXQgcGVuZGluZ0Vycm9yO1xuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nRXJyb3IgPSB7XG4gICAgICAgIFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkXTogb3B0cy5wZW5kaW5nRXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25PdXRwdXQgPSBhd2FpdCBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbiwgbWF0Y2hlcywge1xuICAgICAgICByZXBsYWNlOiBvcHRzLnJlcGxhY2UsXG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICBpZiAoYWN0aW9uT3V0cHV0LnNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBlbmRpbmdBY3Rpb25EYXRhID0gYWN0aW9uT3V0cHV0LnBlbmRpbmdBY3Rpb25EYXRhO1xuICAgICAgcGVuZGluZ0Vycm9yID0gYWN0aW9uT3V0cHV0LnBlbmRpbmdBY3Rpb25FcnJvcjtcbiAgICAgIGxvYWRpbmdOYXZpZ2F0aW9uID0gZ2V0TG9hZGluZ05hdmlnYXRpb24obG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbik7XG4gICAgICBmbHVzaFN5bmMgPSBmYWxzZTtcbiAgICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcXVlc3QudXJsLCB7XG4gICAgICAgIHNpZ25hbDogcmVxdWVzdC5zaWduYWxcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDYWxsIGxvYWRlcnNcbiAgICBsZXQge1xuICAgICAgc2hvcnRDaXJjdWl0ZWQsXG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IGF3YWl0IGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIGxvYWRpbmdOYXZpZ2F0aW9uLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLmZldGNoZXJTdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMucmVwbGFjZSwgZmx1c2hTeW5jLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKTtcbiAgICBpZiAoc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQ2xlYW4gdXAgbm93IHRoYXQgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWZcbiAgICAvLyB3ZSBzaG9ydCBjaXJjdWl0ZWQgYmVjYXVzZSBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgd2lsbCBoYXZlIGFscmVhZHlcbiAgICAvLyBiZWVuIGFzc2lnbmVkIHRvIGEgbmV3IGNvbnRyb2xsZXIgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgbWF0Y2hlc1xuICAgIH0sIHBlbmRpbmdBY3Rpb25EYXRhID8ge1xuICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGFcbiAgICB9IDoge30sIHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9KSk7XG4gIH1cbiAgLy8gQ2FsbCB0aGUgYWN0aW9uIG1hdGNoZWQgYnkgdGhlIGxlYWYgcm91dGUgZm9yIHRoaXMgbmF2aWdhdGlvbiBhbmQgaGFuZGxlXG4gIC8vIHJlZGlyZWN0cy9lcnJvcnNcbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBzdWJtaXNzaW9uLCBtYXRjaGVzLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIC8vIFB1dCB1cyBpbiBhIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICBsZXQgbmF2aWdhdGlvbiA9IGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBuYXZpZ2F0aW9uXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiBvcHRzLmZsdXNoU3luYyA9PT0gdHJ1ZVxuICAgIH0pO1xuICAgIC8vIENhbGwgb3VyIGFjdGlvbiBhbmQgZ2V0IHRoZSByZXN1bHRcbiAgICBsZXQgcmVzdWx0O1xuICAgIGxldCBhY3Rpb25NYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKTtcbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhYWN0aW9uTWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIHJlcXVlc3QsIGFjdGlvbk1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSk7XG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCByZXBsYWNlO1xuICAgICAgaWYgKG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwpIHtcbiAgICAgICAgcmVwbGFjZSA9IG9wdHMucmVwbGFjZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGRpZG4ndCBleHBsaWNpdHkgaW5kaWNhdGUgcmVwbGFjZSBiZWhhdmlvciwgcmVwbGFjZSBpZlxuICAgICAgICAvLyB3ZSByZWRpcmVjdGVkIHRvIHRoZSBleGFjdCBzYW1lIGxvY2F0aW9uIHdlJ3JlIGN1cnJlbnRseSBhdCB0byBhdm9pZFxuICAgICAgICAvLyBkb3VibGUgYmFjay1idXR0b25zXG4gICAgICAgIHJlcGxhY2UgPSByZXN1bHQubG9jYXRpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoO1xuICAgICAgfVxuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlc3VsdCwge1xuICAgICAgICBzdWJtaXNzaW9uLFxuICAgICAgICByZXBsYWNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7XG4gICAgICAvLyBCeSBkZWZhdWx0LCBhbGwgc3VibWlzc2lvbnMgYXJlIFJFUExBQ0UgbmF2aWdhdGlvbnMsIGJ1dCBpZiB0aGVcbiAgICAgIC8vIGFjdGlvbiB0aHJldyBhbiBlcnJvciB0aGF0J2xsIGJlIHJlbmRlcmVkIGluIGFuIGVycm9yRWxlbWVudCwgd2UgZmFsbFxuICAgICAgLy8gYmFjayB0byBQVVNIIHNvIHRoYXQgdGhlIHVzZXIgY2FuIHVzZSB0aGUgYmFjayBidXR0b24gdG8gZ2V0IGJhY2sgdG9cbiAgICAgIC8vIHRoZSBwcmUtc3VibWlzc2lvbiBmb3JtIGxvY2F0aW9uIHRvIHRyeSBhZ2FpblxuICAgICAgaWYgKChvcHRzICYmIG9wdHMucmVwbGFjZSkgIT09IHRydWUpIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gU2VuZCBiYWNrIGFuIGVtcHR5IG9iamVjdCB3ZSBjYW4gdXNlIHRvIGNsZWFyIG91dCBhbnkgcHJpb3IgYWN0aW9uRGF0YVxuICAgICAgICBwZW5kaW5nQWN0aW9uRGF0YToge30sXG4gICAgICAgIHBlbmRpbmdBY3Rpb25FcnJvcjoge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8vIENhbGwgYWxsIGFwcGxpY2FibGUgbG9hZGVycyBmb3IgdGhlIGdpdmVuIG1hdGNoZXMsIGhhbmRsaW5nIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIG92ZXJyaWRlTmF2aWdhdGlvbiwgc3VibWlzc2lvbiwgZmV0Y2hlclN1Ym1pc3Npb24sIHJlcGxhY2UsIGZsdXNoU3luYywgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcikge1xuICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHJpZ2h0IG5hdmlnYXRpb24gd2Ugd2FudCB0byB1c2UgZm9yIGRhdGEgbG9hZGluZ1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG92ZXJyaWRlTmF2aWdhdGlvbiB8fCBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgLy8gSWYgdGhpcyB3YXMgYSByZWRpcmVjdCBmcm9tIGFuIGFjdGlvbiB3ZSBkb24ndCBoYXZlIGEgXCJzdWJtaXNzaW9uXCIgYnV0XG4gICAgLy8gd2UgaGF2ZSBpdCBvbiB0aGUgbG9hZGluZyBuYXZpZ2F0aW9uIHNvIHVzZSB0aGF0IGlmIGF2YWlsYWJsZVxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBmZXRjaGVyU3VibWlzc2lvbiB8fCBnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24obG9hZGluZ05hdmlnYXRpb24pO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBhY3RpdmVTdWJtaXNzaW9uLCBsb2NhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgZGVsZXRlZEZldGNoZXJzLCBmZXRjaExvYWRNYXRjaGVzLCBmZXRjaFJlZGlyZWN0SWRzLCByb3V0ZXNUb1VzZSwgYmFzZW5hbWUsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpO1xuICAgIC8vIENhbmNlbCBwZW5kaW5nIGRlZmVycmVkcyBmb3Igbm8tbG9uZ2VyLW1hdGNoZWQgcm91dGVzIG9yIHJvdXRlcyB3ZSdyZVxuICAgIC8vIGFib3V0IHRvIHJlbG9hZC4gIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGFuIGFjdGlvbiByZWxvYWQgd2Ugd291bGQgaGF2ZVxuICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3BcbiAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMocm91dGVJZCA9PiAhKG1hdGNoZXMgJiYgbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpIHx8IG1hdGNoZXNUb0xvYWQgJiYgbWF0Y2hlc1RvTG9hZC5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwICYmIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgLy8gQ29tbWl0IHBlbmRpbmcgZXJyb3IgaWYgd2UncmUgc2hvcnQgY2lyY3VpdGluZ1xuICAgICAgICBlcnJvcnM6IHBlbmRpbmdFcnJvciB8fCBudWxsXG4gICAgICB9LCBwZW5kaW5nQWN0aW9uRGF0YSA/IHtcbiAgICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGFcbiAgICAgIH0gOiB7fSwgdXBkYXRlZEZldGNoZXJzID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSksIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIGlzIGFuIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9uLCB3ZSByZW1haW4gaW4gb3VyIGN1cnJlbnQgaWRsZVxuICAgIC8vIHN0YXRlLiAgSWYgbm90LCB3ZSBuZWVkIHRvIHN3aXRjaCB0byBvdXIgbG9hZGluZyBzdGF0ZSBhbmQgbG9hZCBkYXRhLFxuICAgIC8vIHByZXNlcnZpbmcgYW55IG5ldyBhY3Rpb24gZGF0YSBvciBleGlzdGluZyBhY3Rpb24gZGF0YSAoaW4gdGhlIGNhc2Ugb2ZcbiAgICAvLyBhIHJldmFsaWRhdGlvbiBpbnRlcnJ1cHRpbmcgYW4gYWN0aW9uUmVsb2FkKVxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGZldGNoZXIgPyBmZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQocmYua2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGlvbkRhdGEgPSBwZW5kaW5nQWN0aW9uRGF0YSB8fCBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvblxuICAgICAgfSwgYWN0aW9uRGF0YSA/IE9iamVjdC5rZXlzKGFjdGlvbkRhdGEpLmxlbmd0aCA9PT0gMCA/IHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbFxuICAgICAgfSA6IHtcbiAgICAgICAgYWN0aW9uRGF0YVxuICAgICAgfSA6IHt9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSksIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMocmYua2V5KSkge1xuICAgICAgICBhYm9ydEZldGNoZXIocmYua2V5KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIC8vIEZldGNoZXJzIHVzZSBhbiBpbmRlcGVuZGVudCBBYm9ydENvbnRyb2xsZXIgc28gdGhhdCBhYm9ydGluZyBhIGZldGNoZXJcbiAgICAgICAgLy8gKHZpYSBkZWxldGVGZXRjaGVyKSBkb2VzIG5vdCBhYm9ydCB0aGUgdHJpZ2dlcmluZyBuYXZpZ2F0aW9uIHRoYXRcbiAgICAgICAgLy8gdHJpZ2dlcmVkIHRoZSByZXZhbGlkYXRpb25cbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQocmYua2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBQcm94eSBuYXZpZ2F0aW9uIGFib3J0IHRocm91Z2ggdG8gcmV2YWxpZGF0aW9uIGZldGNoZXJzXG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+IHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goZiA9PiBhYm9ydEZldGNoZXIoZi5rZXkpKTtcbiAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSB7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJlcXVlc3QpO1xuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ2xlYW4gdXAgX2FmdGVyXyBsb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWYgd2Ugc2hvcnRcbiAgICAvLyBjaXJjdWl0ZWQgYmVjYXVzZSBmZXRjaENvbnRyb2xsZXJzIHdvdWxkIGhhdmUgYmVlbiBhYm9ydGVkIGFuZFxuICAgIC8vIHJlYXNzaWduZWQgdG8gbmV3IGNvbnRyb2xsZXJzIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG4gICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikge1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyZi5rZXkpKTtcbiAgICAvLyBJZiBhbnkgbG9hZGVycyByZXR1cm5lZCBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBpZiAocmVkaXJlY3QuaWR4ID49IG1hdGNoZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgICAvLyBsb2FkZXIgZXhlY3V0aW9uc1xuICAgICAgICBsZXQgZmV0Y2hlcktleSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW3JlZGlyZWN0LmlkeCAtIG1hdGNoZXNUb0xvYWQubGVuZ3RoXS5rZXk7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGZldGNoZXJLZXkpO1xuICAgICAgfVxuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LnJlc3VsdCwge1xuICAgICAgICByZXBsYWNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCBwZW5kaW5nRXJyb3IsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBXaXJlIHVwIHN1YnNjcmliZXJzIHRvIHVwZGF0ZSBsb2FkZXJEYXRhIGFzIHByb21pc2VzIHNldHRsZVxuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZWZlcnJlZERhdGEsIHJvdXRlSWQpID0+IHtcbiAgICAgIGRlZmVycmVkRGF0YS5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgIC8vIE5vdGU6IE5vIG5lZWQgdG8gdXBkYXRlU3RhdGUgaGVyZSBzaW5jZSB0aGUgVHJhY2tlZFByb21pc2Ugb25cbiAgICAgICAgLy8gbG9hZGVyRGF0YSBpcyBzdGFibGUgYWNyb3NzIHJlc29sdmUvcmVqZWN0XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIGluc3RhbmNlIGlmIHdlIHdlcmUgYWJvcnRlZCBvciBpZiBwcm9taXNlcyBoYXZlIHNldHRsZWRcbiAgICAgICAgaWYgKGFib3J0ZWQgfHwgZGVmZXJyZWREYXRhLmRvbmUpIHtcbiAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgbGV0IHNob3VsZFVwZGF0ZUZldGNoZXJzID0gdXBkYXRlZEZldGNoZXJzIHx8IGRpZEFib3J0RmV0Y2hMb2FkcyB8fCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSwgc2hvdWxkVXBkYXRlRmV0Y2hlcnMgPyB7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9IDoge30pO1xuICB9XG4gIC8vIFRyaWdnZXIgYSBmZXRjaGVyIGxvYWQvc3VibWl0IGZvciB0aGUgZ2l2ZW4gZmV0Y2hlciBrZXlcbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLnVuc3RhYmxlX2ZsdXNoU3luYykgPT09IHRydWU7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcHJlcGVuZEJhc2VuYW1lLCBocmVmLCByb3V0ZUlkLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnJlbGF0aXZlKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBub3JtYWxpemVkUGF0aCwgYmFzZW5hbWUpO1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IG5vcm1hbGl6ZWRQYXRoXG4gICAgICB9KSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIHRydWUsIG5vcm1hbGl6ZWRQYXRoLCBvcHRzKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBtYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIHBhdGgpO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG4gICAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFN0b3JlIG9mZiB0aGUgbWF0Y2ggc28gd2UgY2FuIGNhbGwgaXQncyBzaG91bGRSZXZhbGlkYXRlIG9uIHN1YnNlcXVlbnRcbiAgICAvLyByZXZhbGlkYXRpb25zXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcGF0aFxuICAgIH0pO1xuICAgIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgZmx1c2hTeW5jLCBzdWJtaXNzaW9uKTtcbiAgfVxuICAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBtYXRjaGVkIGZldGNoZXIuc3VibWl0KCksIGFuZCB0aGVuIGhhbmRsZSByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgYW5kIHJldmFsaWRhdGlvblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCBmbHVzaFN5bmMsIHN1Ym1pc3Npb24pIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG4gICAgaWYgKCFtYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIW1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogcGF0aCxcbiAgICAgICAgcm91dGVJZDogcm91dGVJZFxuICAgICAgfSk7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBzdWJtaXR0aW5nIHN0YXRlXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlciksIHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICAgIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXJcbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwsIHN1Ym1pc3Npb24pO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgb3JpZ2luYXRpbmdMb2FkSWQgPSBpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgbGV0IGFjdGlvblJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCBmZXRjaFJlcXVlc3QsIG1hdGNoLCByZXF1ZXN0TWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUpO1xuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdXIgb3duIGZldGNoZXJcbiAgICAgIC8vIHJlLXN1Ym1pdCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPiBvcmlnaW5hdGluZ0xvYWRJZCkge1xuICAgICAgICAvLyBBIG5ldyBuYXZpZ2F0aW9uIHdhcyBraWNrZWQgb2ZmIGFmdGVyIG91ciBhY3Rpb24gc3RhcnRlZCwgc28gdGhhdFxuICAgICAgICAvLyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhpcyByZWRpcmVjdCBuYXZpZ2F0aW9uLiAgV2UgYWxyZWFkeVxuICAgICAgICAvLyBzZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCBzbyBhbGwgbG9hZGVycyBmb3IgdGhlIG5ldyByb3V0ZSBzaG91bGRcbiAgICAgICAgLy8gZmlyZSB1bmxlc3Mgb3B0ZWQgb3V0IHZpYSBzaG91bGRSZXZhbGlkYXRlXG4gICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChrZXkpO1xuICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uKSk7XG4gICAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgYWN0aW9uUmVzdWx0LCB7XG4gICAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb246IHN1Ym1pc3Npb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgYWN0aW9uUmVzdWx0LmVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFN0YXJ0IHRoZSBkYXRhIGxvYWQgZm9yIGN1cnJlbnQgbWF0Y2hlcywgb3IgdGhlIG5leHQgbG9jYXRpb24gaWYgd2UncmVcbiAgICAvLyBpbiB0aGUgbWlkZGxlIG9mIGEgbmF2aWdhdGlvblxuICAgIGxldCBuZXh0TG9jYXRpb24gPSBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uIHx8IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCByZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID0gc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIgPyBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgYmFzZW5hbWUpIDogc3RhdGUubWF0Y2hlcztcbiAgICBpbnZhcmlhbnQobWF0Y2hlcywgXCJEaWRuJ3QgZmluZCBhbnkgbWF0Y2hlcyBhZnRlciBmZXRjaGVyIGFjdGlvblwiKTtcbiAgICBsZXQgbG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgZmV0Y2hSZWxvYWRJZHMuc2V0KGtleSwgbG9hZElkKTtcbiAgICBsZXQgbG9hZEZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBhY3Rpb25SZXN1bHQuZGF0YSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZEZldGNoZXIpO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCB7XG4gICAgICBbbWF0Y2gucm91dGUuaWRdOiBhY3Rpb25SZXN1bHQuZGF0YVxuICAgIH0sIHVuZGVmaW5lZCAvLyBObyBuZWVkIHRvIHNlbmQgdGhyb3VnaCBlcnJvcnMgc2luY2Ugd2Ugc2hvcnQgY2lyY3VpdCBhYm92ZVxuICAgICk7XG4gICAgLy8gUHV0IGFsbCByZXZhbGlkYXRpbmcgZmV0Y2hlcnMgaW50byB0aGUgbG9hZGluZyBzdGF0ZSwgZXhjZXB0IGZvciB0aGVcbiAgICAvLyBjdXJyZW50IGZldGNoZXIgd2hpY2ggd2Ugd2FudCB0byBrZWVwIGluIGl0J3MgY3VycmVudCBsb2FkaW5nIHN0YXRlIHdoaWNoXG4gICAgLy8gY29udGFpbnMgaXQncyBhY3Rpb24gc3VibWlzc2lvbiBpbmZvICsgYWN0aW9uIGRhdGFcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5maWx0ZXIocmYgPT4gcmYua2V5ICE9PSBrZXkpLmZvckVhY2gocmYgPT4ge1xuICAgICAgbGV0IHN0YWxlS2V5ID0gcmYua2V5O1xuICAgICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChzdGFsZUtleSk7XG4gICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHVuZGVmaW5lZCwgZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KHN0YWxlS2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhzdGFsZUtleSkpIHtcbiAgICAgICAgYWJvcnRGZXRjaGVyKHN0YWxlS2V5KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHN0YWxlS2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zID0gKCkgPT4gcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBhYm9ydEZldGNoZXIocmYua2V5KSk7XG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuICAgIGlmIChhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gociA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyLmtleSkpO1xuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChyZXN1bHRzKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGlmIChyZWRpcmVjdC5pZHggPj0gbWF0Y2hlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhpcyByZWRpcmVjdCBjYW1lIGZyb20gYSBmZXRjaGVyIG1ha2Ugc3VyZSB3ZSBtYXJrIGl0IGluXG4gICAgICAgIC8vIGZldGNoUmVkaXJlY3RJZHMgc28gaXQgZG9lc24ndCBnZXQgcmV2YWxpZGF0ZWQgb24gdGhlIG5leHQgc2V0IG9mXG4gICAgICAgIC8vIGxvYWRlciBleGVjdXRpb25zXG4gICAgICAgIGxldCBmZXRjaGVyS2V5ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbcmVkaXJlY3QuaWR4IC0gbWF0Y2hlc1RvTG9hZC5sZW5ndGhdLmtleTtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoZmV0Y2hlcktleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LnJlc3VsdCk7XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIHN0YXRlLm1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHVuZGVmaW5lZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAgIC8vIFNpbmNlIHdlIGxldCByZXZhbGlkYXRpb25zIGNvbXBsZXRlIGV2ZW4gaWYgdGhlIHN1Ym1pdHRpbmcgZmV0Y2hlciB3YXNcbiAgICAvLyBkZWxldGVkLCBvbmx5IHB1dCBpdCBiYWNrIHRvIGlkbGUgaWYgaXQgaGFzbid0IGJlZW4gZGVsZXRlZFxuICAgIGlmIChzdGF0ZS5mZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgICBhYm9ydFN0YWxlRmV0Y2hMb2Fkcyhsb2FkSWQpO1xuICAgIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgaW4gYSBuYXZpZ2F0aW9uIGxvYWRpbmcgc3RhdGUgYW5kIHRoaXMgZmV0Y2hlciBpc1xuICAgIC8vIG1vcmUgcmVjZW50IHRoYW4gdGhlIG5hdmlnYXRpb24sIHdlIHdhbnQgdGhlIG5ld2VyIGRhdGEgc28gYWJvcnQgdGhlXG4gICAgLy8gbmF2aWdhdGlvbiBhbmQgY29tcGxldGUgaXQgd2l0aCB0aGUgZmV0Y2hlciBkYXRhXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmIGxvYWRJZCA+IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKSB7XG4gICAgICBpbnZhcmlhbnQocGVuZGluZ0FjdGlvbiwgXCJFeHBlY3RlZCBwZW5kaW5nIGFjdGlvblwiKTtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXBkYXRlIHdpdGggdGhlIGZldGNoZXIgZGF0YSwgcHJlc2VydmluZyBhbnkgZXhpc3RpbmdcbiAgICAgIC8vIGxvYWRlckRhdGEgZm9yIGxvYWRlcnMgdGhhdCBkaWQgbm90IG5lZWQgdG8gcmVsb2FkLiAgV2UgaGF2ZSB0b1xuICAgICAgLy8gbWFudWFsbHkgbWVyZ2UgaGVyZSBzaW5jZSB3ZSBhcmVuJ3QgZ29pbmcgdGhyb3VnaCBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBsb2FkZXJEYXRhOiBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbG9hZGVyRGF0YSwgbWF0Y2hlcywgZXJyb3JzKSxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbikge1xuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCksIHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICAgIC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG4gICAgbGV0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBwYXRoLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgbGV0IG9yaWdpbmF0aW5nTG9hZElkID0gaW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGxldCByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgZmV0Y2hSZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUpO1xuICAgIC8vIERlZmVycmVkIGlzbid0IHN1cHBvcnRlZCBmb3IgZmV0Y2hlciBsb2FkcywgYXdhaXQgZXZlcnl0aGluZyBhbmQgdHJlYXQgaXRcbiAgICAvLyBhcyBhIG5vcm1hbCBsb2FkLiAgcmVzb2x2ZURlZmVycmVkRGF0YSB3aWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhpc1xuICAgIC8vIGZldGNoZXIgZ2V0cyBhYm9ydGVkLCBzbyB3ZSBqdXN0IGxlYXZlIHJlc3VsdCB1bnRvdWNoZWQgYW5kIHNob3J0IGNpcmN1aXRcbiAgICAvLyBiZWxvdyBpZiB0aGF0IGhhcHBlbnNcbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXN1bHQgPSAoYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIGZldGNoUmVxdWVzdC5zaWduYWwsIHRydWUpKSB8fCByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdXIgb3VyIG93biBmZXRjaGVyXG4gICAgLy8gcmUtbG9hZCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgbG9hZGVyIHRocmV3IGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA+IG9yaWdpbmF0aW5nTG9hZElkKSB7XG4gICAgICAgIC8vIEEgbmV3IG5hdmlnYXRpb24gd2FzIGtpY2tlZCBvZmYgYWZ0ZXIgb3VyIGxvYWRlciBzdGFydGVkLCBzbyB0aGF0XG4gICAgICAgIC8vIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGlzIHJlZGlyZWN0IG5hdmlnYXRpb25cbiAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgcmVzdWx0LmVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KCFpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCksIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcbiAgICAvLyBQdXQgdGhlIGZldGNoZXIgYmFjayBpbnRvIGFuIGlkbGUgc3RhdGVcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcihyZXN1bHQuZGF0YSkpO1xuICB9XG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGhhbmRsZSByZWRpcmVjdHMgcmV0dXJuZWQgZnJvbSBhbiBhY3Rpb24gb3IgbG9hZGVyLlxuICAgKiBOb3JtYWxseSwgYSByZWRpcmVjdCBcInJlcGxhY2VzXCIgdGhlIG5hdmlnYXRpb24gdGhhdCB0cmlnZ2VyZWQgaXQuICBTbywgZm9yXG4gICAqIGV4YW1wbGU6XG4gICAqXG4gICAqICAtIHVzZXIgaXMgb24gL2FcbiAgICogIC0gdXNlciBjbGlja3MgYSBsaW5rIHRvIC9iXG4gICAqICAtIGxvYWRlciBmb3IgL2IgcmVkaXJlY3RzIHRvIC9jXG4gICAqXG4gICAqIEluIGEgbm9uLUpTIGFwcCB0aGUgYnJvd3NlciB3b3VsZCB0cmFjayB0aGUgaW4tZmxpZ2h0IG5hdmlnYXRpb24gdG8gL2IgYW5kXG4gICAqIHRoZW4gcmVwbGFjZSBpdCB3aXRoIC9jIHdoZW4gaXQgZW5jb3VudGVyZWQgdGhlIHJlZGlyZWN0IHJlc3BvbnNlLiAgSW5cbiAgICogdGhlIGVuZCBpdCB3b3VsZCBvbmx5IGV2ZXIgdXBkYXRlIHRoZSBVUkwgYmFyIHdpdGggL2MuXG4gICAqXG4gICAqIEluIGNsaWVudC1zaWRlIHJvdXRpbmcgdXNpbmcgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSwgd2UgYWltIHRvIGVtdWxhdGVcbiAgICogdGhpcyBiZWhhdmlvciBhbmQgd2UgYWxzbyBkbyBub3QgdXBkYXRlIGhpc3RvcnkgdW50aWwgdGhlIGVuZCBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiAoaW5jbHVkaW5nIHByb2Nlc3NlZCByZWRpcmVjdHMpLiAgVGhpcyBtZWFucyB0aGF0IHdlIG5ldmVyXG4gICAqIGFjdHVhbGx5IHRvdWNoIGhpc3RvcnkgdW50aWwgd2UndmUgcHJvY2Vzc2VkIHJlZGlyZWN0cywgc28gd2UganVzdCB1c2VcbiAgICogdGhlIGhpc3RvcnkgYWN0aW9uIGZyb20gdGhlIG9yaWdpbmFsIG5hdmlnYXRpb24gKFBVU0ggb3IgUkVQTEFDRSkuXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVkaXJlY3QsIF90ZW1wMikge1xuICAgIGxldCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZmV0Y2hlclN1Ym1pc3Npb24sXG4gICAgICByZXBsYWNlXG4gICAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gICAgaWYgKHJlZGlyZWN0LnJldmFsaWRhdGUpIHtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCByZWRpcmVjdC5sb2NhdGlvbiwge1xuICAgICAgX2lzUmVkaXJlY3Q6IHRydWVcbiAgICB9KTtcbiAgICBpbnZhcmlhbnQocmVkaXJlY3RMb2NhdGlvbiwgXCJFeHBlY3RlZCBhIGxvY2F0aW9uIG9uIHRoZSByZWRpcmVjdCBuYXZpZ2F0aW9uXCIpO1xuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIGxldCBpc0RvY3VtZW50UmVsb2FkID0gZmFsc2U7XG4gICAgICBpZiAocmVkaXJlY3QucmVsb2FkRG9jdW1lbnQpIHtcbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgdGhlIHJlc3BvbnNlIGNvbnRhaW5lZCBYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFxuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QocmVkaXJlY3QubG9jYXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGluaXQuaGlzdG9yeS5jcmVhdGVVUkwocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID1cbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgaXQncyBhbiBhYnNvbHV0ZSBVUkwgdG8gYSBuZXcgb3JpZ2luXG4gICAgICAgIHVybC5vcmlnaW4gIT09IHJvdXRlcldpbmRvdy5sb2NhdGlvbi5vcmlnaW4gfHxcbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgaXQncyBhbiBhYnNvbHV0ZSBVUkwgdGhhdCBkb2VzIG5vdCBtYXRjaCBvdXIgYmFzZW5hbWVcbiAgICAgICAgc3RyaXBCYXNlbmFtZSh1cmwucGF0aG5hbWUsIGJhc2VuYW1lKSA9PSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGlzRG9jdW1lbnRSZWxvYWQpIHtcbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICByb3V0ZXJXaW5kb3cubG9jYXRpb24ucmVwbGFjZShyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyV2luZG93LmxvY2F0aW9uLmFzc2lnbihyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gYWJvcnQgb24gcmVkaXJlY3RzLCBzaW5jZSB3ZSBkb24ndCBkZXRlY3QgdGhlXG4gICAgLy8gcmVkaXJlY3QgdW50aWwgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgc2V0dGxlZFxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgbGV0IHJlZGlyZWN0SGlzdG9yeUFjdGlvbiA9IHJlcGxhY2UgPT09IHRydWUgPyBBY3Rpb24uUmVwbGFjZSA6IEFjdGlvbi5QdXNoO1xuICAgIC8vIFVzZSB0aGUgaW5jb21pbmcgc3VibWlzc2lvbiBpZiBwcm92aWRlZCwgZmFsbGJhY2sgb24gdGhlIGFjdGl2ZSBvbmUgaW5cbiAgICAvLyBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgbGV0IHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGVcbiAgICB9ID0gc3RhdGUubmF2aWdhdGlvbjtcbiAgICBpZiAoIXN1Ym1pc3Npb24gJiYgIWZldGNoZXJTdWJtaXNzaW9uICYmIGZvcm1NZXRob2QgJiYgZm9ybUFjdGlvbiAmJiBmb3JtRW5jVHlwZSkge1xuICAgICAgc3VibWlzc2lvbiA9IGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uKTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyB3YXMgYSAzMDcvMzA4IHN1Ym1pc3Npb24gd2Ugd2FudCB0byBwcmVzZXJ2ZSB0aGUgSFRUUCBtZXRob2QgYW5kXG4gICAgLy8gcmUtc3VibWl0IHRoZSBHRVQvUE9TVC9QVVQvUEFUQ0gvREVMRVRFIGFzIGEgc3VibWlzc2lvbiBuYXZpZ2F0aW9uIHRvIHRoZVxuICAgIC8vIHJlZGlyZWN0ZWQgbG9jYXRpb25cbiAgICBsZXQgYWN0aXZlU3VibWlzc2lvbiA9IHN1Ym1pc3Npb24gfHwgZmV0Y2hlclN1Ym1pc3Npb247XG4gICAgaWYgKHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2Rlcy5oYXMocmVkaXJlY3Quc3RhdHVzKSAmJiBhY3RpdmVTdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2QoYWN0aXZlU3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBzdWJtaXNzaW9uOiBfZXh0ZW5kcyh7fSwgYWN0aXZlU3VibWlzc2lvbiwge1xuICAgICAgICAgIGZvcm1BY3Rpb246IHJlZGlyZWN0LmxvY2F0aW9uXG4gICAgICAgIH0pLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgbmF2aWdhdGlvbiBzdWJtaXNzaW9uLCB3ZSB3aWxsIHByZXNlcnZlIGl0IHRocm91Z2ggdGhlXG4gICAgICAvLyByZWRpcmVjdCBuYXZpZ2F0aW9uXG4gICAgICBsZXQgb3ZlcnJpZGVOYXZpZ2F0aW9uID0gZ2V0TG9hZGluZ05hdmlnYXRpb24ocmVkaXJlY3RMb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbixcbiAgICAgICAgLy8gU2VuZCBmZXRjaGVyIHN1Ym1pc3Npb25zIHRocm91Z2ggZm9yIHNob3VsZFJldmFsaWRhdGVcbiAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb24sXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShjdXJyZW50TWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgZmV0Y2hlcnNUb0xvYWQsIHJlcXVlc3QpIHtcbiAgICAvLyBDYWxsIGFsbCBuYXZpZ2F0aW9uIGxvYWRlcnMgYW5kIHJldmFsaWRhdGluZyBmZXRjaGVyIGxvYWRlcnMgaW4gcGFyYWxsZWwsXG4gICAgLy8gdGhlbiBzbGljZSBvZmYgdGhlIHJlc3VsdHMgaW50byBzZXBhcmF0ZSBhcnJheXMgc28gd2UgY2FuIGhhbmRsZSB0aGVtXG4gICAgLy8gYWNjb3JkaW5nbHlcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lKSksIC4uLmZldGNoZXJzVG9Mb2FkLm1hcChmID0+IHtcbiAgICAgIGlmIChmLm1hdGNoZXMgJiYgZi5tYXRjaCAmJiBmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGYucGF0aCwgZi5jb250cm9sbGVyLnNpZ25hbCksIGYubWF0Y2gsIGYubWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGVycm9yID0ge1xuICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgICAgICBwYXRobmFtZTogZi5wYXRoXG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH0pXSk7XG4gICAgbGV0IGxvYWRlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBsZXQgZmV0Y2hlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgbG9hZGVyUmVzdWx0cy5tYXAoKCkgPT4gcmVxdWVzdC5zaWduYWwpLCBmYWxzZSwgc3RhdGUubG9hZGVyRGF0YSksIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIGZldGNoZXJzVG9Mb2FkLm1hcChmID0+IGYubWF0Y2gpLCBmZXRjaGVyUmVzdWx0cywgZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4gZi5jb250cm9sbGVyID8gZi5jb250cm9sbGVyLnNpZ25hbCA6IG51bGwpLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpIHtcbiAgICAvLyBFdmVyeSBpbnRlcnJ1cHRpb24gdHJpZ2dlcnMgYSByZXZhbGlkYXRpb25cbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5wdXNoKC4uLmNhbmNlbEFjdGl2ZURlZmVycmVkcygpKTtcbiAgICAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkge1xuICAgICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMucHVzaChrZXkpO1xuICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBmZXRjaGVyLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBmZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9LCB7XG4gICAgICBmbHVzaFN5bmM6IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yXG4gICAgICB9LFxuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWVcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkge1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGFjdGl2ZUZldGNoZXJzLnNldChrZXksIChhY3RpdmVGZXRjaGVycy5nZXQoa2V5KSB8fCAwKSArIDEpO1xuICAgICAgLy8gSWYgdGhpcyBmZXRjaGVyIHdhcyBwcmV2aW91c2x5IG1hcmtlZCBmb3IgZGVsZXRpb24sIHVubWFyayBpdCBzaW5jZSB3ZVxuICAgICAgLy8gaGF2ZSBhIG5ldyBpbnN0YW5jZVxuICAgICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlcihrZXkpIHtcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIC8vIERvbid0IGFib3J0IHRoZSBjb250cm9sbGVyIGlmIHRoaXMgaXMgYSBkZWxldGlvbiBvZiBhIGZldGNoZXIuc3VibWl0KClcbiAgICAvLyBpbiBpdCdzIGxvYWRpbmcgcGhhc2Ugc2luY2UgLSB3ZSBkb24ndCB3YW50IHRvIGFib3J0IHRoZSBjb3JyZXNwb25kaW5nXG4gICAgLy8gcmV2YWxpZGF0aW9uIGFuZCB3YW50IHRoZW0gdG8gY29tcGxldGUgYW5kIGxhbmRcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSAmJiAhKGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgZmV0Y2hSZWxvYWRJZHMuaGFzKGtleSkpKSB7XG4gICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgIGRlbGV0ZWRGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyQW5kVXBkYXRlU3RhdGUoa2V5KSB7XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgbGV0IGNvdW50ID0gKGFjdGl2ZUZldGNoZXJzLmdldChrZXkpIHx8IDApIC0gMTtcbiAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIGFjdGl2ZUZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMuYWRkKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVGZXRjaGVycy5zZXQoa2V5LCBjb3VudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWJvcnRGZXRjaGVyKGtleSkge1xuICAgIGxldCBjb250cm9sbGVyID0gZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KTtcbiAgICBpbnZhcmlhbnQoY29udHJvbGxlciwgXCJFeHBlY3RlZCBmZXRjaCBjb250cm9sbGVyOiBcIiArIGtleSk7XG4gICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoZXJzRG9uZShrZXlzKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gZ2V0RmV0Y2hlcihrZXkpO1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoZmV0Y2hlci5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpIHtcbiAgICBsZXQgZG9uZUtleXMgPSBbXTtcbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gZmFsc2U7XG4gICAgZm9yIChsZXQga2V5IG9mIGZldGNoUmVkaXJlY3RJZHMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG4gICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgZG9uZUtleXMucHVzaChrZXkpO1xuICAgICAgICB1cGRhdGVkRmV0Y2hlcnMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgICByZXR1cm4gdXBkYXRlZEZldGNoZXJzO1xuICB9XG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkKSB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcbiAgICBmb3IgKGxldCBba2V5LCBpZF0gb2YgZmV0Y2hSZWxvYWRJZHMpIHtcbiAgICAgIGlmIChpZCA8IGxhbmRlZElkKSB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICAgICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgeWVldGVkS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG4gIGZ1bmN0aW9uIGdldEJsb2NrZXIoa2V5LCBmbikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLmdldChrZXkpICE9PSBmbikge1xuICAgICAgYmxvY2tlckZ1bmN0aW9ucy5zZXQoa2V5LCBmbik7XG4gICAgfVxuICAgIHJldHVybiBibG9ja2VyO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUJsb2NrZXIoa2V5KSB7XG4gICAgc3RhdGUuYmxvY2tlcnMuZGVsZXRlKGtleSk7XG4gICAgYmxvY2tlckZ1bmN0aW9ucy5kZWxldGUoa2V5KTtcbiAgfVxuICAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHVwZGF0ZSBibG9ja2VycywgZW5zdXJpbmcgdmFsaWQgc3RhdGUgdHJhbnNpdGlvbnNcbiAgZnVuY3Rpb24gdXBkYXRlQmxvY2tlcihrZXksIG5ld0Jsb2NrZXIpIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcbiAgICAvLyBQb29yIG1hbnMgc3RhdGUgbWFjaGluZSA6KVxuICAgIC8vIGh0dHBzOi8vbWVybWFpZC5saXZlL2VkaXQjcGFrbzplTnFWa2M5T3d6QU14bDhsOG5uakFZckV0RElPSEVCSWd3dktKVFJlR3kzX2xEcElxTzI3azZhd01HMFhjckxsbno4N253ZG9uRVNvZ0tYWEJ1RTc5cnE3NVhaTzMteUhkczBSSlZ1djcwWXJQbFVyQ0VlMkhmck9SUzNydWJxWmZ1aHRwZzVDOXdrNXRaNFZLY1JVcTg4cTlaOFJTMC00OGNFMWlISmtMMHVnYkh1Rkx1czlMNnNwWnk4blg5TVAyQ05kb21WYXBvc3F1M2ZHYXlUOFQ4LWpKUXdoZXBvX1V0cGdCUWFERVVvbTA0ZFpoQU4xYUpCRGxVS0pCeEUxY2VCMlNtajBNbG4tSUJXNUFGVTJkd1Vpa3R0XzJRYXEyZEJmYUtkRXVwODVVVjdZZC1kS2psbmthYmwyUHZyMERUa1RyZU1cbiAgICBpbnZhcmlhbnQoYmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIsIFwiSW52YWxpZCBibG9ja2VyIHN0YXRlIHRyYW5zaXRpb246IFwiICsgYmxvY2tlci5zdGF0ZSArIFwiIC0+IFwiICsgbmV3QmxvY2tlci5zdGF0ZSk7XG4gICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgYmxvY2tlcnMuc2V0KGtleSwgbmV3QmxvY2tlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgYmxvY2tlcnNcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzaG91bGRCbG9ja05hdmlnYXRpb24oX3JlZjIpIHtcbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBfcmVmMjtcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIG9ueSBzdXBwb3J0IGEgc2luZ2xlIGFjdGl2ZSBibG9ja2VyIGF0IHRoZSBtb21lbnQgc2luY2Ugd2UgZG9uJ3QgaGF2ZVxuICAgIC8vIGFueSBjb21wZWxsaW5nIHVzZSBjYXNlcyBmb3IgbXVsdGktYmxvY2tlciB5ZXRcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID4gMSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJBIHJvdXRlciBvbmx5IHN1cHBvcnRzIG9uZSBibG9ja2VyIGF0IGEgdGltZVwiKTtcbiAgICB9XG4gICAgbGV0IGVudHJpZXMgPSBBcnJheS5mcm9tKGJsb2NrZXJGdW5jdGlvbnMuZW50cmllcygpKTtcbiAgICBsZXQgW2Jsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0gPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV07XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSk7XG4gICAgaWYgKGJsb2NrZXIgJiYgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIpIHtcbiAgICAgIC8vIElmIHRoZSBibG9ja2VyIGlzIGN1cnJlbnRseSBwcm9jZWVkaW5nLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrXG4gICAgICAvLyBpdCBhbmQgY2FuIGxldCB0aGlzIG5hdmlnYXRpb24gY29udGludWVcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQXQgdGhpcyBwb2ludCwgd2Uga25vdyB3ZSdyZSB1bmJsb2NrZWQvYmxvY2tlZCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHRoZVxuICAgIC8vIHVzZXItcHJvdmlkZWQgYmxvY2tlciBmdW5jdGlvblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pKSB7XG4gICAgICByZXR1cm4gYmxvY2tlcktleTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHByZWRpY2F0ZSkge1xuICAgIGxldCBjYW5jZWxsZWRSb3V0ZUlkcyA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9XG4gIC8vIE9wdCBpbiB0byBjYXB0dXJpbmcgYW5kIHJlcG9ydGluZyBzY3JvbGwgcG9zaXRpb25zIGR1cmluZyBuYXZpZ2F0aW9ucyxcbiAgLy8gdXNlZCBieSB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcbiAgZnVuY3Rpb24gZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24ocG9zaXRpb25zLCBnZXRQb3NpdGlvbiwgZ2V0S2V5KSB7XG4gICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBnZXRQb3NpdGlvbjtcbiAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IGdldEtleSB8fCBudWxsO1xuICAgIC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uXG4gICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz5cbiAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICAgIGlmICh5ICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChnZXRTY3JvbGxSZXN0b3JhdGlvbktleSkge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCBtYXRjaGVzLm1hcChtID0+IGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKSk7XG4gICAgICByZXR1cm4ga2V5IHx8IGxvY2F0aW9uLmtleTtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2F0aW9uLmtleTtcbiAgfVxuICBmdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMgJiYgZ2V0U2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgbGV0IHkgPSBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiB5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBfaW50ZXJuYWxTZXRSb3V0ZXMobmV3Um91dGVzKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKG5ld1JvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgfVxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGJhc2VuYW1lO1xuICAgIH0sXG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG4gICAgZ2V0IHJvdXRlcygpIHtcbiAgICAgIHJldHVybiBkYXRhUm91dGVzO1xuICAgIH0sXG4gICAgZ2V0IHdpbmRvdygpIHtcbiAgICAgIHJldHVybiByb3V0ZXJXaW5kb3c7XG4gICAgfSxcbiAgICBpbml0aWFsaXplLFxuICAgIHN1YnNjcmliZSxcbiAgICBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbixcbiAgICBuYXZpZ2F0ZSxcbiAgICBmZXRjaCxcbiAgICByZXZhbGlkYXRlLFxuICAgIC8vIFBhc3N0aHJvdWdoIHRvIGhpc3RvcnktYXdhcmUgY3JlYXRlSHJlZiB1c2VkIGJ5IHVzZUhyZWYgc28gd2UgZ2V0IHByb3BlclxuICAgIC8vIGhhc2gtYXdhcmUgVVJMcyBpbiBET00gcGF0aHNcbiAgICBjcmVhdGVIcmVmOiB0byA9PiBpbml0Lmhpc3RvcnkuY3JlYXRlSHJlZih0byksXG4gICAgZW5jb2RlTG9jYXRpb246IHRvID0+IGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbih0byksXG4gICAgZ2V0RmV0Y2hlcixcbiAgICBkZWxldGVGZXRjaGVyOiBkZWxldGVGZXRjaGVyQW5kVXBkYXRlU3RhdGUsXG4gICAgZGlzcG9zZSxcbiAgICBnZXRCbG9ja2VyLFxuICAgIGRlbGV0ZUJsb2NrZXIsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcyxcbiAgICAvLyBUT0RPOiBSZW1vdmUgc2V0Um91dGVzLCBpdCdzIHRlbXBvcmFyeSB0byBhdm9pZCBkZWFsaW5nIHdpdGhcbiAgICAvLyB1cGRhdGluZyB0aGUgdHJlZSB3aGlsZSB2YWxpZGF0aW5nIHRoZSB1cGRhdGUgYWxnb3JpdGhtLlxuICAgIF9pbnRlcm5hbFNldFJvdXRlc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBVTlNBRkVfREVGRVJSRURfU1lNQk9MID0gU3ltYm9sKFwiZGVmZXJyZWRcIik7XG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNIYW5kbGVyKHJvdXRlcywgb3B0cykge1xuICBpbnZhcmlhbnQocm91dGVzLmxlbmd0aCA+IDAsIFwiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlU3RhdGljSGFuZGxlclwiKTtcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIGxldCBiYXNlbmFtZSA9IChvcHRzID8gb3B0cy5iYXNlbmFtZSA6IG51bGwpIHx8IFwiL1wiO1xuICBsZXQgbWFwUm91dGVQcm9wZXJ0aWVzO1xuICBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5KHJlcXVlc3QsIF90ZW1wMykge1xuICAgIGxldCB7XG4gICAgICByZXF1ZXN0Q29udGV4dFxuICAgIH0gPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzO1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcIkhFQURcIikge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtcbiAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBXaGVuIHJldHVybmluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCwgd2UgcGF0Y2ggYmFjayBpbiB0aGUgbG9jYXRpb24gaGVyZVxuICAgIC8vIHNpbmNlIHdlIG5lZWQgaXQgZm9yIFJlYWN0IENvbnRleHQuICBCdXQgdGhpcyBoZWxwcyBrZWVwIG91ciBzdWJtaXQgYW5kXG4gICAgLy8gbG9hZFJvdXRlRGF0YSBvcGVyYXRpbmcgb24gYSBSZXF1ZXN0IGluc3RlYWQgb2YgYSBMb2NhdGlvblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIGJhc2VuYW1lXG4gICAgfSwgcmVzdWx0KTtcbiAgfVxuICAvKipcbiAgICogVGhlIHF1ZXJ5Um91dGUoKSBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIHRhcmdldGVkIHJvdXRlIHJlcXVlc3RzLCBlaXRoZXJcbiAgICogZm9yIGZldGNoID9fZGF0YSByZXF1ZXN0cyBvciByZXNvdXJjZSByb3V0ZSByZXF1ZXN0cy4gIEluIHRoaXMgY2FzZSwgd2VcbiAgICogYXJlIG9ubHkgZXZlciBjYWxsaW5nIGEgc2luZ2xlIGFjdGlvbiBvciBsb2FkZXIsIGFuZCB3ZSBhcmUgcmV0dXJuaW5nIHRoZVxuICAgKiByZXR1cm5lZCB2YWx1ZSBkaXJlY3RseS4gIEluIG1vc3QgY2FzZXMsIHRoaXMgd2lsbCBiZSBhIFJlc3BvbnNlIHJldHVybmVkXG4gICAqIGZyb20gdGhlIGFjdGlvbi9sb2FkZXIsIGJ1dCBpdCBtYXkgYmUgYSBwcmltaXRpdmUgb3Igb3RoZXIgdmFsdWUgYXMgd2VsbCAtXG4gICAqIGFuZCBpbiBzdWNoIGNhc2VzIHRoZSBjYWxsaW5nIGNvbnRleHQgc2hvdWxkIGhhbmRsZSB0aGF0IGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBXZSBkbyByZXNwZWN0IHRoZSB0aHJvdy9yZXR1cm4gZGlmZmVyZW50aWF0aW9uLCBzbyBpZiBhbiBhY3Rpb24vbG9hZGVyXG4gICAqIHRocm93cywgdGhlbiB0aGlzIG1ldGhvZCB3aWxsIHRocm93IHRoZSB2YWx1ZS4gIFRoaXMgaXMgaW1wb3J0YW50IHNvIHdlXG4gICAqIGNhbiBkbyBwcm9wZXIgYm91bmRhcnkgaWRlbnRpZmljYXRpb24gaW4gUmVtaXggd2hlcmUgYSB0aHJvd24gUmVzcG9uc2VcbiAgICogbXVzdCBnbyB0byB0aGUgQ2F0Y2ggQm91bmRhcnkgYnV0IGEgcmV0dXJuZWQgUmVzcG9uc2UgaXMgaGFwcHktcGF0aC5cbiAgICpcbiAgICogT25lIHRoaW5nIHRvIG5vdGUgaXMgdGhhdCBhbnkgUm91dGVyLWluaXRpYXRlZCBFcnJvcnMgdGhhdCBtYWtlIHNlbnNlXG4gICAqIHRvIGFzc29jaWF0ZSB3aXRoIGEgc3RhdHVzIGNvZGUgd2lsbCBiZSB0aHJvd24gYXMgYW4gRXJyb3JSZXNwb25zZVxuICAgKiBpbnN0YW5jZSB3aGljaCBpbmNsdWRlIHRoZSByYXcgRXJyb3IsIHN1Y2ggdGhhdCB0aGUgY2FsbGluZyBjb250ZXh0IGNhblxuICAgKiBzZXJpYWxpemUgdGhlIGVycm9yIGFzIHRoZXkgc2VlIGZpdCB3aGlsZSBpbmNsdWRpbmcgdGhlIHByb3BlciByZXNwb25zZVxuICAgKiBjb2RlLiAgRXhhbXBsZXMgaGVyZSBhcmUgNDA0IGFuZCA0MDUgZXJyb3JzIHRoYXQgb2NjdXIgcHJpb3IgdG8gcmVhY2hpbmdcbiAgICogYW55IHVzZXItZGVmaW5lZCBsb2FkZXJzLlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlSb3V0ZShyZXF1ZXN0LCBfdGVtcDQpIHtcbiAgICBsZXQge1xuICAgICAgcm91dGVJZCxcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiICYmIG1ldGhvZCAhPT0gXCJPUFRJT05TXCIpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmIChyb3V0ZUlkICYmICFtYXRjaCkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDMsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaCkge1xuICAgICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGl0IEkgZG9uJ3QgdGhpbms/XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgbWF0Y2gpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcnMgPyBPYmplY3QudmFsdWVzKHJlc3VsdC5lcnJvcnMpWzBdIDogdW5kZWZpbmVkO1xuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB3ZSBnb3QgYmFjayByZXN1bHQuZXJyb3JzLCB0aGF0IG1lYW5zIHRoZSBsb2FkZXIvYWN0aW9uIHRocmV3XG4gICAgICAvLyBfc29tZXRoaW5nXyB0aGF0IHdhc24ndCBhIFJlc3BvbnNlLCBidXQgaXQncyBub3QgZ3VhcmFudGVlZC9yZXF1aXJlZFxuICAgICAgLy8gdG8gYmUgYW4gYGluc3RhbmNlb2YgRXJyb3JgIGVpdGhlciwgc28gd2UgaGF2ZSB0byB1c2UgdGhyb3cgaGVyZSB0b1xuICAgICAgLy8gcHJlc2VydmUgdGhlIFwiZXJyb3JcIiBzdGF0ZSBvdXRzaWRlIG9mIHF1ZXJ5SW1wbC5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICAvLyBQaWNrIG9mZiB0aGUgcmlnaHQgc3RhdGUgdmFsdWUgdG8gcmV0dXJuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuICAgIGlmIChyZXN1bHQubG9hZGVyRGF0YSkge1xuICAgICAgdmFyIF9yZXN1bHQkYWN0aXZlRGVmZXJyZTtcbiAgICAgIGxldCBkYXRhID0gT2JqZWN0LnZhbHVlcyhyZXN1bHQubG9hZGVyRGF0YSlbMF07XG4gICAgICBpZiAoKF9yZXN1bHQkYWN0aXZlRGVmZXJyZSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHMpICE9IG51bGwgJiYgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlW21hdGNoLnJvdXRlLmlkXSkge1xuICAgICAgICBkYXRhW1VOU0FGRV9ERUZFUlJFRF9TWU1CT0xdID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkc1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNNdXRhdGlvbk1ldGhvZChyZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIHJvdXRlTWF0Y2ggfHwgZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCAhPSBudWxsKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKTtcbiAgICAgIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdCkgPyByZXN1bHQgOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7XG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiwgd2UgdGhyb3dcbiAgICAgIC8vIGl0IHRvIGJhaWwgb3V0IGFuZCB0aGVuIHJldHVybiBvciB0aHJvdyBoZXJlIGJhc2VkIG9uIHdoZXRoZXIgdGhlIHVzZXJcbiAgICAgIC8vIHJldHVybmVkIG9yIHRocmV3XG4gICAgICBpZiAoaXNRdWVyeVJvdXRlUmVzcG9uc2UoZSkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgICAgIHRocm93IGUucmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUucmVzcG9uc2U7XG4gICAgICB9XG4gICAgICAvLyBSZWRpcmVjdHMgYXJlIGFsd2F5cyByZXR1cm5lZCBzaW5jZSB0aGV5IGRvbid0IHByb3BhZ2F0ZSB0byBjYXRjaFxuICAgICAgLy8gYm91bmRhcmllc1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXNwb25zZShlKSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCBhY3Rpb25NYXRjaCwgcmVxdWVzdENvbnRleHQsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhYWN0aW9uTWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCB7XG4gICAgICAgIGlzU3RhdGljUmVxdWVzdDogdHJ1ZSxcbiAgICAgICAgaXNSb3V0ZVJlcXVlc3QsXG4gICAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgICB9KTtcbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIoKSBjYWxsIGFib3J0ZWQ6IFwiICsgcmVxdWVzdC5tZXRob2QgKyBcIiBcIiArIHJlcXVlc3QudXJsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gVWhoaGggLSB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4sIHdlIHNob3VsZCBhbHdheXMgdGhyb3cgdGhlc2UgZnJvbVxuICAgICAgLy8gY2FsbExvYWRlck9yQWN0aW9uLCBidXQgdGhlIHR5cGUgbmFycm93aW5nIGhlcmUga2VlcHMgVFMgaGFwcHkgYW5kIHdlXG4gICAgICAvLyBjYW4gZ2V0IGJhY2sgb24gdGhlIFwidGhyb3cgYWxsIHJlZGlyZWN0IHJlc3BvbnNlc1wiIHRyYWluIGhlcmUgc2hvdWxkXG4gICAgICAvLyB0aGlzIGV2ZXIgaGFwcGVuIDovXG4gICAgICB0aHJvdyBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IHJlc3VsdC5zdGF0dXMsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBMb2NhdGlvbjogcmVzdWx0LmxvY2F0aW9uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3JcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gTm90ZTogVGhpcyBzaG91bGQgb25seSBiZSBub24tUmVzcG9uc2UgdmFsdWVzIGlmIHdlIGdldCBoZXJlLCBzaW5jZVxuICAgICAgLy8gaXNSb3V0ZVJlcXVlc3Qgc2hvdWxkIHRocm93IGFueSBSZXNwb25zZSByZWNlaXZlZCBpbiBjYWxsTG9hZGVyT3JBY3Rpb25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlczogW2FjdGlvbk1hdGNoXSxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcnM6IG51bGwsXG4gICAgICAgIC8vIE5vdGU6IHN0YXR1c0NvZGUgKyBoZWFkZXJzIGFyZSB1bnVzZWQgaGVyZSBzaW5jZSBxdWVyeVJvdXRlIHdpbGxcbiAgICAgICAgLy8gcmV0dXJuIHRoZSByYXcgUmVzcG9uc2Ugb3IgdmFsdWVcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgbGV0IGNvbnRleHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCB1bmRlZmluZWQsIHtcbiAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgIH0pO1xuICAgICAgLy8gYWN0aW9uIHN0YXR1cyBjb2RlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBsb2FkZXIgc3RhdHVzIGNvZGVzXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDAsXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IF9leHRlbmRzKHt9LCByZXN1bHQuaGVhZGVycyA/IHtcbiAgICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgICB9IDoge30pXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG4gICAgbGV0IGxvYWRlclJlcXVlc3QgPSBuZXcgUmVxdWVzdChyZXF1ZXN0LnVybCwge1xuICAgICAgaGVhZGVyczogcmVxdWVzdC5oZWFkZXJzLFxuICAgICAgcmVkaXJlY3Q6IHJlcXVlc3QucmVkaXJlY3QsXG4gICAgICBzaWduYWw6IHJlcXVlc3Quc2lnbmFsXG4gICAgfSk7XG4gICAgbGV0IGNvbnRleHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKGxvYWRlclJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHJlc3VsdC5zdGF0dXNDb2RlID8ge1xuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1c0NvZGVcbiAgICB9IDoge30sIHtcbiAgICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgIH0sXG4gICAgICBhY3Rpb25IZWFkZXJzOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LmhlYWRlcnMgPyB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICB9IDoge30pXG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCwgcGVuZGluZ0FjdGlvbkVycm9yKSB7XG4gICAgbGV0IGlzUm91dGVSZXF1ZXN0ID0gcm91dGVNYXRjaCAhPSBudWxsO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnlSb3V0ZSgpKVxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxvYWRlcikgJiYgIShyb3V0ZU1hdGNoICE9IG51bGwgJiYgcm91dGVNYXRjaC5yb3V0ZS5sYXp5KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZU1hdGNoID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZU1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHJlcXVlc3RNYXRjaGVzID0gcm91dGVNYXRjaCA/IFtyb3V0ZU1hdGNoXSA6IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIE9iamVjdC5rZXlzKHBlbmRpbmdBY3Rpb25FcnJvciB8fCB7fSlbMF0pO1xuICAgIGxldCBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKG0gPT4gbS5yb3V0ZS5sb2FkZXIgfHwgbS5yb3V0ZS5sYXp5KTtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5KCkpXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICAvLyBBZGQgYSBudWxsIGZvciBhbGwgbWF0Y2hlZCByb3V0ZXMgZm9yIHByb3BlciByZXZhbGlkYXRpb24gb24gdGhlIGNsaWVudFxuICAgICAgICBsb2FkZXJEYXRhOiBtYXRjaGVzLnJlZHVjZSgoYWNjLCBtKSA9PiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICAgIFttLnJvdXRlLmlkXTogbnVsbFxuICAgICAgICB9KSwge30pLFxuICAgICAgICBlcnJvcnM6IHBlbmRpbmdBY3Rpb25FcnJvciB8fCBudWxsLFxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoWy4uLm1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIHtcbiAgICAgIGlzU3RhdGljUmVxdWVzdDogdHJ1ZSxcbiAgICAgIGlzUm91dGVSZXF1ZXN0LFxuICAgICAgcmVxdWVzdENvbnRleHRcbiAgICB9KSldKTtcbiAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgbGV0IG1ldGhvZCA9IGlzUm91dGVSZXF1ZXN0ID8gXCJxdWVyeVJvdXRlXCIgOiBcInF1ZXJ5XCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIoKSBjYWxsIGFib3J0ZWQ6IFwiICsgcmVxdWVzdC5tZXRob2QgKyBcIiBcIiArIHJlcXVlc3QudXJsKTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpO1xuICAgIGxldCBjb250ZXh0ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uRXJyb3IsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgLy8gQWRkIGEgbnVsbCBmb3IgYW55IG5vbi1sb2FkZXIgbWF0Y2hlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgbGV0IGV4ZWN1dGVkTG9hZGVycyA9IG5ldyBTZXQobWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gbWF0Y2gucm91dGUuaWQpKTtcbiAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgaWYgKCFleGVjdXRlZExvYWRlcnMuaGFzKG1hdGNoLnJvdXRlLmlkKSkge1xuICAgICAgICBjb250ZXh0LmxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcy5zaXplID4gMCA/IE9iamVjdC5mcm9tRW50cmllcyhhY3RpdmVEZWZlcnJlZHMuZW50cmllcygpKSA6IG51bGxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEdpdmVuIGFuIGV4aXN0aW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0IGFuZCBhbiBlcnJvciB0aHJvd24gYXQgcmVuZGVyIHRpbWUsXG4gKiBwcm92aWRlIGFuIHVwZGF0ZWQgU3RhdGljSGFuZGxlckNvbnRleHQgc3VpdGFibGUgZm9yIGEgc2Vjb25kIFNTUiByZW5kZXJcbiAqL1xuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdDb250ZXh0O1xufVxuZnVuY3Rpb24gaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSB7XG4gIHJldHVybiBvcHRzICE9IG51bGwgJiYgKFwiZm9ybURhdGFcIiBpbiBvcHRzICYmIG9wdHMuZm9ybURhdGEgIT0gbnVsbCB8fCBcImJvZHlcIiBpbiBvcHRzICYmIG9wdHMuYm9keSAhPT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRvKGxvY2F0aW9uLCBtYXRjaGVzLCBiYXNlbmFtZSwgcHJlcGVuZEJhc2VuYW1lLCB0bywgZnJvbVJvdXRlSWQsIHJlbGF0aXZlKSB7XG4gIGxldCBjb250ZXh0dWFsTWF0Y2hlcztcbiAgbGV0IGFjdGl2ZVJvdXRlTWF0Y2g7XG4gIGlmIChmcm9tUm91dGVJZCkge1xuICAgIC8vIEdyYWIgbWF0Y2hlcyB1cCB0byB0aGUgY2FsbGluZyByb3V0ZSBzbyBvdXIgcm91dGUtcmVsYXRpdmUgbG9naWMgaXNcbiAgICAvLyByZWxhdGl2ZSB0byB0aGUgY29ycmVjdCBzb3VyY2Ugcm91dGVcbiAgICBjb250ZXh0dWFsTWF0Y2hlcyA9IFtdO1xuICAgIGZvciAobGV0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICAgIGNvbnRleHR1YWxNYXRjaGVzLnB1c2gobWF0Y2gpO1xuICAgICAgaWYgKG1hdGNoLnJvdXRlLmlkID09PSBmcm9tUm91dGVJZCkge1xuICAgICAgICBhY3RpdmVSb3V0ZU1hdGNoID0gbWF0Y2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0dWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgYWN0aXZlUm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBSZXNvbHZlIHRoZSByZWxhdGl2ZSBwYXRoXG4gIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvID8gdG8gOiBcIi5cIiwgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMoY29udGV4dHVhbE1hdGNoZXMpLm1hcChtID0+IG0ucGF0aG5hbWVCYXNlKSwgc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpO1xuICAvLyBXaGVuIGB0b2AgaXMgbm90IHNwZWNpZmllZCB3ZSBpbmhlcml0IHNlYXJjaC9oYXNoIGZyb20gdGhlIGN1cnJlbnRcbiAgLy8gbG9jYXRpb24sIHVubGlrZSB3aGVuIHRvPVwiLlwiIGFuZCB3ZSBqdXN0IGluaGVyaXQgdGhlIHBhdGguXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgaWYgKHRvID09IG51bGwpIHtcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICBwYXRoLmhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB9XG4gIC8vIEFkZCBhbiA/aW5kZXggcGFyYW0gZm9yIG1hdGNoZWQgaW5kZXggcm91dGVzIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKCh0byA9PSBudWxsIHx8IHRvID09PSBcIlwiIHx8IHRvID09PSBcIi5cIikgJiYgYWN0aXZlUm91dGVNYXRjaCAmJiBhY3RpdmVSb3V0ZU1hdGNoLnJvdXRlLmluZGV4ICYmICFoYXNOYWtlZEluZGV4UXVlcnkocGF0aC5zZWFyY2gpKSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9XG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUuICBJZlxuICAvLyB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzXG4gIC8vIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoXG4gIC8vIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAocHJlcGVuZEJhc2VuYW1lICYmIGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuLy8gTm9ybWFsaXplIG5hdmlnYXRpb24gb3B0aW9ucyBieSBjb252ZXJ0aW5nIGZvcm1NZXRob2Q9R0VUIGZvcm1EYXRhIG9iamVjdHMgdG9cbi8vIFVSTFNlYXJjaFBhcmFtcyBzbyB0aGV5IGJlaGF2ZSBpZGVudGljYWxseSB0byBsaW5rcyB3aXRoIHF1ZXJ5IHBhcmFtc1xuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKG5vcm1hbGl6ZUZvcm1NZXRob2QsIGlzRmV0Y2hlciwgcGF0aCwgb3B0cykge1xuICAvLyBSZXR1cm4gbG9jYXRpb24gdmVyYmF0aW0gb24gbm9uLXN1Ym1pc3Npb24gbmF2aWdhdGlvbnNcbiAgaWYgKCFvcHRzIHx8ICFpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhcbiAgICB9O1xuICB9XG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kXG4gICAgICB9KVxuICAgIH07XG4gIH1cbiAgbGV0IGdldEludmFsaWRCb2R5RXJyb3IgPSAoKSA9PiAoe1xuICAgIHBhdGgsXG4gICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICB0eXBlOiBcImludmFsaWQtYm9keVwiXG4gICAgfSlcbiAgfSk7XG4gIC8vIENyZWF0ZSBhIFN1Ym1pc3Npb24gb24gbm9uLUdFVCBuYXZpZ2F0aW9uc1xuICBsZXQgcmF3Rm9ybU1ldGhvZCA9IG9wdHMuZm9ybU1ldGhvZCB8fCBcImdldFwiO1xuICBsZXQgZm9ybU1ldGhvZCA9IG5vcm1hbGl6ZUZvcm1NZXRob2QgPyByYXdGb3JtTWV0aG9kLnRvVXBwZXJDYXNlKCkgOiByYXdGb3JtTWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIGxldCBmb3JtQWN0aW9uID0gc3RyaXBIYXNoRnJvbVBhdGgocGF0aCk7XG4gIGlmIChvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gdGV4dCBvbmx5IHN1cHBvcnQgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIGxldCB0ZXh0ID0gdHlwZW9mIG9wdHMuYm9keSA9PT0gXCJzdHJpbmdcIiA/IG9wdHMuYm9keSA6IG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhIHx8IG9wdHMuYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNwbGFpbi10ZXh0LWZvcm0tZGF0YVxuICAgICAgQXJyYXkuZnJvbShvcHRzLmJvZHkuZW50cmllcygpKS5yZWR1Y2UoKGFjYywgX3JlZjMpID0+IHtcbiAgICAgICAgbGV0IFtuYW1lLCB2YWx1ZV0gPSBfcmVmMztcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBhY2MgKyBuYW1lICsgXCI9XCIgKyB2YWx1ZSArIFwiXFxuXCI7XG4gICAgICB9LCBcIlwiKSA6IFN0cmluZyhvcHRzLmJvZHkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0cy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgICAgICB0ZXh0XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgLy8ganNvbiBvbmx5IHN1cHBvcnRzIFBPU1QvUFVUL1BBVENIL0RFTEVURSBzdWJtaXNzaW9uc1xuICAgICAgaWYgKCFpc011dGF0aW9uTWV0aG9kKGZvcm1NZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBsZXQganNvbiA9IHR5cGVvZiBvcHRzLmJvZHkgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKG9wdHMuYm9keSkgOiBvcHRzLmJvZHk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgICAgICBmb3JtTWV0aG9kLFxuICAgICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRzLmZvcm1FbmNUeXBlLFxuICAgICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGpzb24sXG4gICAgICAgICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGludmFyaWFudCh0eXBlb2YgRm9ybURhdGEgPT09IFwiZnVuY3Rpb25cIiwgXCJGb3JtRGF0YSBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnRcIik7XG4gIGxldCBzZWFyY2hQYXJhbXM7XG4gIGxldCBmb3JtRGF0YTtcbiAgaWYgKG9wdHMuZm9ybURhdGEpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmZvcm1EYXRhKTtcbiAgICBmb3JtRGF0YSA9IG9wdHMuZm9ybURhdGE7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmJvZHkpO1xuICAgIGZvcm1EYXRhID0gb3B0cy5ib2R5O1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgIHNlYXJjaFBhcmFtcyA9IG9wdHMuYm9keTtcbiAgICBmb3JtRGF0YSA9IGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcyk7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5ID09IG51bGwpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhvcHRzLmJvZHkpO1xuICAgICAgZm9ybURhdGEgPSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgfVxuICB9XG4gIGxldCBzdWJtaXNzaW9uID0ge1xuICAgIGZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogb3B0cyAmJiBvcHRzLmZvcm1FbmNUeXBlIHx8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgZm9ybURhdGEsXG4gICAganNvbjogdW5kZWZpbmVkLFxuICAgIHRleHQ6IHVuZGVmaW5lZFxuICB9O1xuICBpZiAoaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfTtcbiAgfVxuICAvLyBGbGF0dGVuIHN1Ym1pc3Npb24gb250byBVUkxTZWFyY2hQYXJhbXMgZm9yIEdFVCBzdWJtaXNzaW9uc1xuICBsZXQgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChwYXRoKTtcbiAgLy8gT24gR0VUIG5hdmlnYXRpb24gc3VibWlzc2lvbnMgd2UgY2FuIGRyb3AgdGhlID9pbmRleCBwYXJhbSBmcm9tIHRoZVxuICAvLyByZXN1bHRpbmcgbG9jYXRpb24gc2luY2UgYWxsIGxvYWRlcnMgd2lsbCBydW4uICBCdXQgZmV0Y2hlciBHRVQgc3VibWlzc2lvbnNcbiAgLy8gb25seSBydW4gYSBzaW5nbGUgbG9hZGVyIHNvIHdlIG5lZWQgdG8gcHJlc2VydmUgYW55IGluY29taW5nID9pbmRleCBwYXJhbXNcbiAgaWYgKGlzRmV0Y2hlciAmJiBwYXJzZWRQYXRoLnNlYXJjaCAmJiBoYXNOYWtlZEluZGV4UXVlcnkocGFyc2VkUGF0aC5zZWFyY2gpKSB7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChcImluZGV4XCIsIFwiXCIpO1xuICB9XG4gIHBhcnNlZFBhdGguc2VhcmNoID0gXCI/XCIgKyBzZWFyY2hQYXJhbXM7XG4gIHJldHVybiB7XG4gICAgcGF0aDogY3JlYXRlUGF0aChwYXJzZWRQYXRoKSxcbiAgICBzdWJtaXNzaW9uXG4gIH07XG59XG4vLyBGaWx0ZXIgb3V0IGFsbCByb3V0ZXMgYmVsb3cgYW55IGNhdWdodCBlcnJvciBhcyB0aGV5IGFyZW4ndCBnb2luZyB0b1xuLy8gcmVuZGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gbG9hZCB0aGVtXG5mdW5jdGlvbiBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBib3VuZGFyeUlkKSB7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBtYXRjaGVzO1xuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRhcnlNYXRjaGVzO1xufVxuZnVuY3Rpb24gZ2V0TWF0Y2hlc1RvTG9hZChoaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKSB7XG4gIGxldCBhY3Rpb25SZXN1bHQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF0gOiBwZW5kaW5nQWN0aW9uRGF0YSA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0FjdGlvbkRhdGEpWzBdIDogdW5kZWZpbmVkO1xuICBsZXQgY3VycmVudFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0YXRlLmxvY2F0aW9uKTtcbiAgbGV0IG5leHRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG4gIC8vIFBpY2sgbmF2aWdhdGlvbiBtYXRjaGVzIHRoYXQgYXJlIG5ldC1uZXcgb3IgcXVhbGlmeSBmb3IgcmV2YWxpZGF0aW9uXG4gIGxldCBib3VuZGFyeUlkID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IHtcbiAgICBpZiAobWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgLy8gV2UgaGF2ZW4ndCBsb2FkZWQgdGhpcyByb3V0ZSB5ZXQgc28gd2UgZG9uJ3Qga25vdyBpZiBpdCdzIGdvdCBhIGxvYWRlciFcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAobWF0Y2gucm91dGUubG9hZGVyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gQWx3YXlzIGNhbGwgdGhlIGxvYWRlciBvbiBuZXcgcm91dGUgaW5zdGFuY2VzIGFuZCBwZW5kaW5nIGRlZmVyIGNhbmNlbGxhdGlvbnNcbiAgICBpZiAoaXNOZXdMb2FkZXIoc3RhdGUubG9hZGVyRGF0YSwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIG1hdGNoKSB8fCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKGlkID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciB3aGVuIHdlIHJldmFsaWRhdGUuICBJZiB0aGUgcm91dGVcbiAgICAvLyBwcm92aWRlcyBpdCdzIG93biBpbXBsZW1lbnRhdGlvbiwgdGhlbiB3ZSBnaXZlIHRoZW0gZnVsbCBjb250cm9sIGJ1dFxuICAgIC8vIHByb3ZpZGUgdGhpcyB2YWx1ZSBzbyB0aGV5IGNhbiBsZXZlcmFnZSBpdCBpZiBuZWVkZWQgYWZ0ZXIgdGhleSBjaGVja1xuICAgIC8vIHRoZWlyIG93biBzcGVjaWZpYyB1c2UgY2FzZXNcbiAgICBsZXQgY3VycmVudFJvdXRlTWF0Y2ggPSBzdGF0ZS5tYXRjaGVzW2luZGV4XTtcbiAgICBsZXQgbmV4dFJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICByZXR1cm4gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihtYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IGN1cnJlbnRSb3V0ZU1hdGNoLnBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zOiBuZXh0Um91dGVNYXRjaC5wYXJhbXNcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTpcbiAgICAgIC8vIEZvcmNlZCByZXZhbGlkYXRpb24gZHVlIHRvIHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdG9yLCBvciBYLVJlbWl4LVJldmFsaWRhdGVcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgfHxcbiAgICAgIC8vIENsaWNrZWQgdGhlIHNhbWUgbGluaywgcmVzdWJtaXR0ZWQgYSBHRVQgZm9ybVxuICAgICAgY3VycmVudFVybC5wYXRobmFtZSArIGN1cnJlbnRVcmwuc2VhcmNoID09PSBuZXh0VXJsLnBhdGhuYW1lICsgbmV4dFVybC5zZWFyY2ggfHxcbiAgICAgIC8vIFNlYXJjaCBwYXJhbXMgYWZmZWN0IGFsbCBsb2FkZXJzXG4gICAgICBjdXJyZW50VXJsLnNlYXJjaCAhPT0gbmV4dFVybC5zZWFyY2ggfHwgaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRSb3V0ZU1hdGNoLCBuZXh0Um91dGVNYXRjaClcbiAgICB9KSk7XG4gIH0pO1xuICAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG4gIGxldCByZXZhbGlkYXRpbmdGZXRjaGVycyA9IFtdO1xuICBmZXRjaExvYWRNYXRjaGVzLmZvckVhY2goKGYsIGtleSkgPT4ge1xuICAgIC8vIERvbid0IHJldmFsaWRhdGUgaWYgZmV0Y2hlciB3b24ndCBiZSBwcmVzZW50IGluIHRoZSBzdWJzZXF1ZW50IHJlbmRlclxuICAgIGlmICghbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gZi5yb3V0ZUlkKSB8fCBkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGZldGNoZXJNYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGYucGF0aCwgYmFzZW5hbWUpO1xuICAgIC8vIElmIHRoZSBmZXRjaGVyIHBhdGggbm8gbG9uZ2VyIG1hdGNoZXMsIHB1c2ggaXQgaW4gd2l0aCBudWxsIG1hdGNoZXMgc29cbiAgICAvLyB3ZSBjYW4gdHJpZ2dlciBhIDQwNCBpbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEuICBOb3RlIHRoaXMgaXNcbiAgICAvLyBjdXJyZW50bHkgb25seSBhIHVzZS1jYXNlIGZvciBSZW1peCBITVIgd2hlcmUgdGhlIHJvdXRlIHRyZWUgY2FuIGNoYW5nZVxuICAgIC8vIGF0IHJ1bnRpbWUgYW5kIHJlbW92ZSBhIHJvdXRlIHByZXZpb3VzbHkgbG9hZGVkIHZpYSBhIGZldGNoZXJcbiAgICBpZiAoIWZldGNoZXJNYXRjaGVzKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogbnVsbCxcbiAgICAgICAgbWF0Y2g6IG51bGwsXG4gICAgICAgIGNvbnRyb2xsZXI6IG51bGxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZXZhbGlkYXRpbmcgZmV0Y2hlcnMgYXJlIGRlY291cGxlZCBmcm9tIHRoZSByb3V0ZSBtYXRjaGVzIHNpbmNlIHRoZXlcbiAgICAvLyBsb2FkIGZyb20gYSBzdGF0aWMgaHJlZi4gIFRoZXkgcmV2YWxpZGF0ZSBiYXNlZCBvbiBleHBsaWNpdCByZXZhbGlkYXRpb25cbiAgICAvLyAoc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0b3IsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZSlcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIGxldCBmZXRjaGVyTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChmZXRjaGVyTWF0Y2hlcywgZi5wYXRoKTtcbiAgICBsZXQgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIGlmIChmZXRjaFJlZGlyZWN0SWRzLmhhcyhrZXkpKSB7XG4gICAgICAvLyBOZXZlciB0cmlnZ2VyIGEgcmV2YWxpZGF0aW9uIG9mIGFuIGFjdGl2ZWx5IHJlZGlyZWN0aW5nIGZldGNoZXJcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAvLyBBbHdheXMgcmV2YWxpZGF0ZSBpZiB0aGUgZmV0Y2hlciB3YXMgY2FuY2VsbGVkXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSAhPT0gXCJpZGxlXCIgJiYgZmV0Y2hlci5kYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHRoZSBmZXRjaGVyIGhhc24ndCBldmVyIGNvbXBsZXRlZCBsb2FkaW5nIHlldCwgdGhlbiB0aGlzIGlzbid0IGFcbiAgICAgIC8vIHJldmFsaWRhdGlvbiwgaXQgd291bGQganVzdCBiZSBhIGJyYW5kIG5ldyBsb2FkIGlmIGFuIGV4cGxpY2l0XG4gICAgICAvLyByZXZhbGlkYXRpb24gaXMgcmVxdWlyZWRcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBpc1JldmFsaWRhdGlvblJlcXVpcmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UgZmFsbCBiYWNrIG9uIGFueSB1c2VyLWRlZmluZWQgc2hvdWxkUmV2YWxpZGF0ZSwgZGVmYXVsdGluZ1xuICAgICAgLy8gdG8gZXhwbGljaXQgcmV2YWxpZGF0aW9ucyBvbmx5XG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihmZXRjaGVyTWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgICAgY3VycmVudFVybCxcbiAgICAgICAgY3VycmVudFBhcmFtczogc3RhdGUubWF0Y2hlc1tzdGF0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtcyxcbiAgICAgICAgbmV4dFVybCxcbiAgICAgICAgbmV4dFBhcmFtczogbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtc1xuICAgICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBpc1JldmFsaWRhdGlvblJlcXVpcmVkXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogZmV0Y2hlck1hdGNoZXMsXG4gICAgICAgIG1hdGNoOiBmZXRjaGVyTWF0Y2gsXG4gICAgICAgIGNvbnRyb2xsZXI6IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuZnVuY3Rpb24gaXNOZXdMb2FkZXIoY3VycmVudExvYWRlckRhdGEsIGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGlzTmV3ID1cbiAgLy8gW2FdIC0+IFthLCBiXVxuICAhY3VycmVudE1hdGNoIHx8XG4gIC8vIFthLCBiXSAtPiBbYSwgY11cbiAgbWF0Y2gucm91dGUuaWQgIT09IGN1cnJlbnRNYXRjaC5yb3V0ZS5pZDtcbiAgLy8gSGFuZGxlIHRoZSBjYXNlIHRoYXQgd2UgZG9uJ3QgaGF2ZSBkYXRhIGZvciBhIHJlLXVzZWQgcm91dGUsIHBvdGVudGlhbGx5XG4gIC8vIGZyb20gYSBwcmlvciBlcnJvciBvciBmcm9tIGEgY2FuY2VsbGVkIHBlbmRpbmcgZGVmZXJyZWRcbiAgbGV0IGlzTWlzc2luZ0RhdGEgPSBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZDtcbiAgLy8gQWx3YXlzIGxvYWQgaWYgdGhpcyBpcyBhIG5ldC1uZXcgcm91dGUgb3Igd2UgZG9uJ3QgeWV0IGhhdmUgZGF0YVxuICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTtcbn1cbmZ1bmN0aW9uIGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSB7XG4gIGxldCBjdXJyZW50UGF0aCA9IGN1cnJlbnRNYXRjaC5yb3V0ZS5wYXRoO1xuICByZXR1cm4gKFxuICAgIC8vIHBhcmFtIGNoYW5nZSBmb3IgdGhpcyBtYXRjaCwgL3VzZXJzLzEyMyAtPiAvdXNlcnMvNDU2XG4gICAgY3VycmVudE1hdGNoLnBhdGhuYW1lICE9PSBtYXRjaC5wYXRobmFtZSB8fFxuICAgIC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICBjdXJyZW50UGF0aCAhPSBudWxsICYmIGN1cnJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBjdXJyZW50TWF0Y2gucGFyYW1zW1wiKlwiXSAhPT0gbWF0Y2gucGFyYW1zW1wiKlwiXVxuICApO1xufVxuZnVuY3Rpb24gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihsb2FkZXJNYXRjaCwgYXJnKSB7XG4gIGlmIChsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgbGV0IHJvdXRlQ2hvaWNlID0gbG9hZGVyTWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShhcmcpO1xuICAgIGlmICh0eXBlb2Ygcm91dGVDaG9pY2UgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gcm91dGVDaG9pY2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcmcuZGVmYXVsdFNob3VsZFJldmFsaWRhdGU7XG59XG4vKipcbiAqIEV4ZWN1dGUgcm91dGUubGF6eSgpIG1ldGhvZHMgdG8gbGF6aWx5IGxvYWQgcm91dGUgbW9kdWxlcyAobG9hZGVyLCBhY3Rpb24sXG4gKiBzaG91bGRSZXZhbGlkYXRlKSBhbmQgdXBkYXRlIHRoZSByb3V0ZU1hbmlmZXN0IGluIHBsYWNlIHdoaWNoIHNoYXJlcyBvYmplY3RzXG4gKiB3aXRoIGRhdGFSb3V0ZXMgc28gdGhvc2UgZ2V0IHVwZGF0ZWQgYXMgd2VsbC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZExhenlSb3V0ZU1vZHVsZShyb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzLCBtYW5pZmVzdCkge1xuICBpZiAoIXJvdXRlLmxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGxhenlSb3V0ZSA9IGF3YWl0IHJvdXRlLmxhenkoKTtcbiAgLy8gSWYgdGhlIGxhenkgcm91dGUgZnVuY3Rpb24gd2FzIGV4ZWN1dGVkIGFuZCByZW1vdmVkIGJ5IGFub3RoZXIgcGFyYWxsZWxcbiAgLy8gY2FsbCB0aGVuIHdlIGNhbiByZXR1cm4gLSBmaXJzdCBsYXp5KCkgdG8gZmluaXNoIHdpbnMgYmVjYXVzZSB0aGUgcmV0dXJuXG4gIC8vIHZhbHVlIG9mIGxhenkgaXMgZXhwZWN0ZWQgdG8gYmUgc3RhdGljXG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgcm91dGVUb1VwZGF0ZSA9IG1hbmlmZXN0W3JvdXRlLmlkXTtcbiAgaW52YXJpYW50KHJvdXRlVG9VcGRhdGUsIFwiTm8gcm91dGUgZm91bmQgaW4gbWFuaWZlc3RcIik7XG4gIC8vIFVwZGF0ZSB0aGUgcm91dGUgaW4gcGxhY2UuICBUaGlzIHNob3VsZCBiZSBzYWZlIGJlY2F1c2UgdGhlcmUncyBubyB3YXlcbiAgLy8gd2UgY291bGQgeWV0IGJlIHNpdHRpbmcgb24gdGhpcyByb3V0ZSBhcyB3ZSBjYW4ndCBnZXQgdGhlcmUgd2l0aG91dFxuICAvLyByZXNvbHZpbmcgbGF6eSgpIGZpcnN0LlxuICAvL1xuICAvLyBUaGlzIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBITVIgXCJ1cGRhdGVcIiB1c2UtY2FzZSB3aGVyZSB3ZSBtYXkgYWN0aXZlbHkgYmVcbiAgLy8gb24gdGhlIHJvdXRlIGJlaW5nIHVwZGF0ZWQuICBUaGUgbWFpbiBjb25jZXJuIGJvaWxzIGRvd24gdG8gXCJkb2VzIHRoaXNcbiAgLy8gbXV0YXRpb24gYWZmZWN0IGFueSBvbmdvaW5nIG5hdmlnYXRpb25zIG9yIGFueSBjdXJyZW50IHN0YXRlLm1hdGNoZXNcbiAgLy8gdmFsdWVzP1wiLiAgSWYgbm90LCBpdCBzaG91bGQgYmUgc2FmZSB0byB1cGRhdGUgaW4gcGxhY2UuXG4gIGxldCByb3V0ZVVwZGF0ZXMgPSB7fTtcbiAgZm9yIChsZXQgbGF6eVJvdXRlUHJvcGVydHkgaW4gbGF6eVJvdXRlKSB7XG4gICAgbGV0IHN0YXRpY1JvdXRlVmFsdWUgPSByb3V0ZVRvVXBkYXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICBsZXQgaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkID0gc3RhdGljUm91dGVWYWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBpc24ndCBzdGF0aWMgc2luY2UgaXQgc2hvdWxkIGFsd2F5cyBiZSB1cGRhdGVkIGJhc2VkXG4gICAgLy8gb24gdGhlIHJvdXRlIHVwZGF0ZXNcbiAgICBsYXp5Um91dGVQcm9wZXJ0eSAhPT0gXCJoYXNFcnJvckJvdW5kYXJ5XCI7XG4gICAgd2FybmluZyghaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkLCBcIlJvdXRlIFxcXCJcIiArIHJvdXRlVG9VcGRhdGUuaWQgKyBcIlxcXCIgaGFzIGEgc3RhdGljIHByb3BlcnR5IFxcXCJcIiArIGxhenlSb3V0ZVByb3BlcnR5ICsgXCJcXFwiIFwiICsgXCJkZWZpbmVkIGJ1dCBpdHMgbGF6eSBmdW5jdGlvbiBpcyBhbHNvIHJldHVybmluZyBhIHZhbHVlIGZvciB0aGlzIHByb3BlcnR5LiBcIiArIChcIlRoZSBsYXp5IHJvdXRlIHByb3BlcnR5IFxcXCJcIiArIGxhenlSb3V0ZVByb3BlcnR5ICsgXCJcXFwiIHdpbGwgYmUgaWdub3JlZC5cIikpO1xuICAgIGlmICghaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkICYmICFpbW11dGFibGVSb3V0ZUtleXMuaGFzKGxhenlSb3V0ZVByb3BlcnR5KSkge1xuICAgICAgcm91dGVVcGRhdGVzW2xhenlSb3V0ZVByb3BlcnR5XSA9IGxhenlSb3V0ZVtsYXp5Um91dGVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG4gIC8vIE11dGF0ZSB0aGUgcm91dGUgd2l0aCB0aGUgcHJvdmlkZWQgdXBkYXRlcy4gIERvIHRoaXMgZmlyc3Qgc28gd2UgcGFzc1xuICAvLyB0aGUgdXBkYXRlZCB2ZXJzaW9uIHRvIG1hcFJvdXRlUHJvcGVydGllc1xuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIHJvdXRlVXBkYXRlcyk7XG4gIC8vIE11dGF0ZSB0aGUgYGhhc0Vycm9yQm91bmRhcnlgIHByb3BlcnR5IG9uIHRoZSByb3V0ZSBiYXNlZCBvbiB0aGUgcm91dGVcbiAgLy8gdXBkYXRlcyBhbmQgcmVtb3ZlIHRoZSBgbGF6eWAgZnVuY3Rpb24gc28gd2UgZG9uJ3QgcmVzb2x2ZSB0aGUgbGF6eVxuICAvLyByb3V0ZSBhZ2Fpbi5cbiAgT2JqZWN0LmFzc2lnbihyb3V0ZVRvVXBkYXRlLCBfZXh0ZW5kcyh7fSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlVG9VcGRhdGUpLCB7XG4gICAgbGF6eTogdW5kZWZpbmVkXG4gIH0pKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJPckFjdGlvbih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICBsZXQgcmVzdWx0VHlwZTtcbiAgbGV0IHJlc3VsdDtcbiAgbGV0IG9uUmVqZWN0O1xuICBsZXQgcnVuSGFuZGxlciA9IGhhbmRsZXIgPT4ge1xuICAgIC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG4gICAgbGV0IHJlamVjdDtcbiAgICBsZXQgYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHJlamVjdCA9IHIpO1xuICAgIG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG4gICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtoYW5kbGVyKHtcbiAgICAgIHJlcXVlc3QsXG4gICAgICBwYXJhbXM6IG1hdGNoLnBhcmFtcyxcbiAgICAgIGNvbnRleHQ6IG9wdHMucmVxdWVzdENvbnRleHRcbiAgICB9KSwgYWJvcnRQcm9taXNlXSk7XG4gIH07XG4gIHRyeSB7XG4gICAgbGV0IGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICBpZiAobWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgLy8gUnVuIHN0YXRpY2FsbHkgZGVmaW5lZCBoYW5kbGVyIGluIHBhcmFsbGVsIHdpdGggbGF6eSgpXG4gICAgICAgIGxldCBoYW5kbGVyRXJyb3I7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIC8vIElmIHRoZSBoYW5kbGVyIHRocm93cywgZG9uJ3QgbGV0IGl0IGltbWVkaWF0ZWx5IGJ1YmJsZSBvdXQsXG4gICAgICAgIC8vIHNpbmNlIHdlIG5lZWQgdG8gbGV0IHRoZSBsYXp5KCkgZXhlY3V0aW9uIGZpbmlzaCBzbyB3ZSBrbm93IGlmIHRoaXNcbiAgICAgICAgLy8gcm91dGUgaGFzIGEgYm91bmRhcnkgdGhhdCBjYW4gaGFuZGxlIHRoZSBlcnJvclxuICAgICAgICBydW5IYW5kbGVyKGhhbmRsZXIpLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIGhhbmRsZXJFcnJvciA9IGU7XG4gICAgICAgIH0pLCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KV0pO1xuICAgICAgICBpZiAoaGFuZGxlckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgaGFuZGxlckVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIExvYWQgbGF6eSByb3V0ZSBtb2R1bGUsIHRoZW4gcnVuIGFueSByZXR1cm5lZCBoYW5kbGVyXG4gICAgICAgIGF3YWl0IGxvYWRMYXp5Um91dGVNb2R1bGUobWF0Y2gucm91dGUsIG1hcFJvdXRlUHJvcGVydGllcywgbWFuaWZlc3QpO1xuICAgICAgICBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgLy8gSGFuZGxlciBzdGlsbCBydW4gZXZlbiBpZiB3ZSBnb3QgaW50ZXJydXB0ZWQgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3lcbiAgICAgICAgICAvLyB3aXRoIHVuLWFib3J0YWJsZSBiZWhhdmlvciBvZiBoYW5kbGVyIGV4ZWN1dGlvbiBvbiBub24tbGF6eSBvclxuICAgICAgICAgIC8vIHByZXZpb3VzbHktbGF6eS1sb2FkZWQgcm91dGVzXG4gICAgICAgICAgcmVzdWx0ID0gYXdhaXQgcnVuSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcImFjdGlvblwiKSB7XG4gICAgICAgICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIHJvdXRlSWQ6IG1hdGNoLnJvdXRlLmlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbGF6eSgpIHJvdXRlIGhhcyBubyBsb2FkZXIgdG8gcnVuLiAgU2hvcnQgY2lyY3VpdCBoZXJlIHNvIHdlIGRvbid0XG4gICAgICAgICAgLy8gaGl0IHRoZSBpbnZhcmlhbnQgYmVsb3cgdGhhdCBlcnJvcnMgb24gcmV0dXJuaW5nIHVuZGVmaW5lZC5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICAgICAgZGF0YTogdW5kZWZpbmVkXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgfVxuICAgIGludmFyaWFudChyZXN1bHQgIT09IHVuZGVmaW5lZCwgXCJZb3UgZGVmaW5lZCBcIiArICh0eXBlID09PSBcImFjdGlvblwiID8gXCJhbiBhY3Rpb25cIiA6IFwiYSBsb2FkZXJcIikgKyBcIiBmb3Igcm91dGUgXCIgKyAoXCJcXFwiXCIgKyBtYXRjaC5yb3V0ZS5pZCArIFwiXFxcIiBidXQgZGlkbid0IHJldHVybiBhbnl0aGluZyBmcm9tIHlvdXIgYFwiICsgdHlwZSArIFwiYCBcIikgKyBcImZ1bmN0aW9uLiBQbGVhc2UgcmV0dXJuIGEgdmFsdWUgb3IgYG51bGxgLlwiKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlc3VsdFR5cGUgPSBSZXN1bHRUeXBlLmVycm9yO1xuICAgIHJlc3VsdCA9IGU7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKG9uUmVqZWN0KSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gICAgLy8gUHJvY2VzcyByZWRpcmVjdHNcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNDb2Rlcy5oYXMoc3RhdHVzKSkge1xuICAgICAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gICAgICBpbnZhcmlhbnQobG9jYXRpb24sIFwiUmVkaXJlY3RzIHJldHVybmVkL3Rocm93biBmcm9tIGxvYWRlcnMvYWN0aW9ucyBtdXN0IGhhdmUgYSBMb2NhdGlvbiBoZWFkZXJcIik7XG4gICAgICAvLyBTdXBwb3J0IHJlbGF0aXZlIHJvdXRpbmcgaW4gaW50ZXJuYWwgcmVkaXJlY3RzXG4gICAgICBpZiAoIUFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KGxvY2F0aW9uKSkge1xuICAgICAgICBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvKG5ldyBVUkwocmVxdWVzdC51cmwpLCBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuaW5kZXhPZihtYXRjaCkgKyAxKSwgYmFzZW5hbWUsIHRydWUsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAoIW9wdHMuaXNTdGF0aWNSZXF1ZXN0KSB7XG4gICAgICAgIC8vIFN0cmlwIG9mZiB0aGUgcHJvdG9jb2wrb3JpZ2luIGZvciBzYW1lLW9yaWdpbiArIHNhbWUtYmFzZW5hbWUgYWJzb2x1dGVcbiAgICAgICAgLy8gcmVkaXJlY3RzLiBJZiB0aGlzIGlzIGEgc3RhdGljIHJlcXVlc3QsIHdlIGNhbiBsZXQgaXQgZ28gYmFjayB0byB0aGVcbiAgICAgICAgLy8gYnJvd3NlciBhcy1pc1xuICAgICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgICBsZXQgdXJsID0gbG9jYXRpb24uc3RhcnRzV2l0aChcIi8vXCIpID8gbmV3IFVSTChjdXJyZW50VXJsLnByb3RvY29sICsgbG9jYXRpb24pIDogbmV3IFVSTChsb2NhdGlvbik7XG4gICAgICAgIGxldCBpc1NhbWVCYXNlbmFtZSA9IHN0cmlwQmFzZW5hbWUodXJsLnBhdGhuYW1lLCBiYXNlbmFtZSkgIT0gbnVsbDtcbiAgICAgICAgaWYgKHVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luICYmIGlzU2FtZUJhc2VuYW1lKSB7XG4gICAgICAgICAgbG9jYXRpb24gPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoICsgdXJsLmhhc2g7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIERvbid0IHByb2Nlc3MgcmVkaXJlY3RzIGluIHRoZSByb3V0ZXIgZHVyaW5nIHN0YXRpYyByZXF1ZXN0cyByZXF1ZXN0cy5cbiAgICAgIC8vIEluc3RlYWQsIHRocm93IHRoZSBSZXNwb25zZSBhbmQgbGV0IHRoZSBzZXJ2ZXIgaGFuZGxlIGl0IHdpdGggYW4gSFRUUFxuICAgICAgLy8gcmVkaXJlY3QuICBXZSBhbHNvIHVwZGF0ZSB0aGUgTG9jYXRpb24gaGVhZGVyIGluIHBsYWNlIGluIHRoaXMgZmxvdyBzb1xuICAgICAgLy8gYmFzZW5hbWUgYW5kIHJlbGF0aXZlIHJvdXRpbmcgaXMgdGFrZW4gaW50byBhY2NvdW50XG4gICAgICBpZiAob3B0cy5pc1N0YXRpY1JlcXVlc3QpIHtcbiAgICAgICAgcmVzdWx0LmhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgbG9jYXRpb24pO1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLnJlZGlyZWN0LFxuICAgICAgICBzdGF0dXMsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRlOiByZXN1bHQuaGVhZGVycy5nZXQoXCJYLVJlbWl4LVJldmFsaWRhdGVcIikgIT09IG51bGwsXG4gICAgICAgIHJlbG9hZERvY3VtZW50OiByZXN1bHQuaGVhZGVycy5nZXQoXCJYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFwiKSAhPT0gbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gRm9yIFNTUiBzaW5nbGUtcm91dGUgcmVxdWVzdHMsIHdlIHdhbnQgdG8gaGFuZCBSZXNwb25zZXMgYmFjayBkaXJlY3RseVxuICAgIC8vIHdpdGhvdXQgdW53cmFwcGluZy4gIFdlIGRvIHRoaXMgd2l0aCB0aGUgUXVlcnlSb3V0ZVJlc3BvbnNlIHdyYXBwZXJcbiAgICAvLyBpbnRlcmZhY2Ugc28gd2UgY2FuIGtub3cgd2hldGhlciBpdCB3YXMgcmV0dXJuZWQgb3IgdGhyb3duXG4gICAgaWYgKG9wdHMuaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgIGxldCBxdWVyeVJvdXRlUmVzcG9uc2UgPSB7XG4gICAgICAgIHR5cGU6IHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IgPyBSZXN1bHRUeXBlLmVycm9yIDogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICByZXNwb25zZTogcmVzdWx0XG4gICAgICB9O1xuICAgICAgdGhyb3cgcXVlcnlSb3V0ZVJlc3BvbnNlO1xuICAgIH1cbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgY29udGVudFR5cGUgPSByZXN1bHQuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIik7XG4gICAgLy8gQ2hlY2sgYmV0d2VlbiB3b3JkIGJvdW5kYXJpZXMgaW5zdGVhZCBvZiBzdGFydHNXaXRoKCkgZHVlIHRvIHRoZSBsYXN0XG4gICAgLy8gcGFyYWdyYXBoIG9mIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuY29udGVudC10eXBlXG4gICAgaWYgKGNvbnRlbnRUeXBlICYmIC9cXGJhcHBsaWNhdGlvblxcL2pzb25cXGIvLnRlc3QoY29udGVudFR5cGUpKSB7XG4gICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgfVxuICAgIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlLFxuICAgICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2VJbXBsKHN0YXR1cywgcmVzdWx0LnN0YXR1c1RleHQsIGRhdGEpLFxuICAgICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICB9O1xuICB9XG4gIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICBlcnJvcjogcmVzdWx0XG4gICAgfTtcbiAgfVxuICBpZiAoaXNEZWZlcnJlZERhdGEocmVzdWx0KSkge1xuICAgIHZhciBfcmVzdWx0JGluaXQsIF9yZXN1bHQkaW5pdDI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGVmZXJyZWQsXG4gICAgICBkZWZlcnJlZERhdGE6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IChfcmVzdWx0JGluaXQgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiAoKF9yZXN1bHQkaW5pdDIgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDIuaGVhZGVycykgJiYgbmV3IEhlYWRlcnMocmVzdWx0LmluaXQuaGVhZGVycylcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdFxuICB9O1xufVxuLy8gVXRpbGl0eSBtZXRob2QgZm9yIGNyZWF0aW5nIHRoZSBSZXF1ZXN0IGluc3RhbmNlcyBmb3IgbG9hZGVycy9hY3Rpb25zIGR1cmluZ1xuLy8gY2xpZW50LXNpZGUgbmF2aWdhdGlvbnMgYW5kIGZldGNoZXMuICBEdXJpbmcgU1NSIHdlIHdpbGwgYWx3YXlzIGhhdmUgYVxuLy8gUmVxdWVzdCBpbnN0YW5jZSBmcm9tIHRoZSBzdGF0aWMgaGFuZGxlciAocXVlcnkvcXVlcnlSb3V0ZSlcbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGhpc3RvcnksIGxvY2F0aW9uLCBzaWduYWwsIHN1Ym1pc3Npb24pIHtcbiAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0cmlwSGFzaEZyb21QYXRoKGxvY2F0aW9uKSkudG9TdHJpbmcoKTtcbiAgbGV0IGluaXQgPSB7XG4gICAgc2lnbmFsXG4gIH07XG4gIGlmIChzdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgIGxldCB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGVcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICAvLyBEaWRuJ3QgdGhpbmsgd2UgbmVlZGVkIHRoaXMgYnV0IGl0IHR1cm5zIG91dCB1bmxpa2Ugb3RoZXIgbWV0aG9kcywgcGF0Y2hcbiAgICAvLyB3b24ndCBiZSBwcm9wZXJseSBub3JtYWxpemVkIHRvIHVwcGVyY2FzZSBhbmQgcmVzdWx0cyBpbiBhIDQwNSBlcnJvci5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW1ldGhvZFxuICAgIGluaXQubWV0aG9kID0gZm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgIGluaXQuaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogZm9ybUVuY1R5cGVcbiAgICAgIH0pO1xuICAgICAgaW5pdC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoc3VibWlzc2lvbi5qc29uKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBzdWJtaXNzaW9uLnRleHQ7XG4gICAgfSBlbHNlIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiAmJiBzdWJtaXNzaW9uLmZvcm1EYXRhKSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKHN1Ym1pc3Npb24uZm9ybURhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IHN1Ym1pc3Npb24uZm9ybURhdGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xufVxuZnVuY3Rpb24gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGEpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2NvbnZlcnRpbmctYW4tZW50cnktbGlzdC10by1hLWxpc3Qtb2YtbmFtZS12YWx1ZS1wYWlyc1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZSA6IHZhbHVlLm5hbWUpO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5mdW5jdGlvbiBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpIHtcbiAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBzZWFyY2hQYXJhbXMuZW50cmllcygpKSB7XG4gICAgZm9ybURhdGEuYXBwZW5kKGtleSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmb3JtRGF0YTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCBhY3RpdmVEZWZlcnJlZHMpIHtcbiAgLy8gRmlsbCBpbiBsb2FkZXJEYXRhL2Vycm9ycyBmcm9tIG91ciBsb2FkZXJzXG4gIGxldCBsb2FkZXJEYXRhID0ge307XG4gIGxldCBlcnJvcnMgPSBudWxsO1xuICBsZXQgc3RhdHVzQ29kZTtcbiAgbGV0IGZvdW5kRXJyb3IgPSBmYWxzZTtcbiAgbGV0IGxvYWRlckhlYWRlcnMgPSB7fTtcbiAgLy8gUHJvY2VzcyBsb2FkZXIgcmVzdWx0cyBpbnRvIHN0YXRlLmxvYWRlckRhdGEvc3RhdGUuZXJyb3JzXG4gIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0LCBpbmRleCkgPT4ge1xuICAgIGxldCBpZCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdLnJvdXRlLmlkO1xuICAgIGludmFyaWFudCghaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpLCBcIkNhbm5vdCBoYW5kbGUgcmVkaXJlY3QgcmVzdWx0cyBpbiBwcm9jZXNzTG9hZGVyRGF0YVwiKTtcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3JcbiAgICAgIC8vIGVycm9yIGJvdW5kYXJ5LCBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgaWQpO1xuICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yO1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmcgYWN0aW9uIGVycm9yLCB3ZSByZXBvcnQgaXQgYXQgdGhlIGhpZ2hlc3Qtcm91dGVcbiAgICAgIC8vIHRoYXQgdGhyb3dzIGEgbG9hZGVyIGVycm9yLCBhbmQgdGhlbiBjbGVhciBpdCBvdXQgdG8gaW5kaWNhdGUgdGhhdFxuICAgICAgLy8gaXQgd2FzIGNvbnN1bWVkXG4gICAgICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdO1xuICAgICAgICBwZW5kaW5nRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBlcnJvcnMgPSBlcnJvcnMgfHwge307XG4gICAgICAvLyBQcmVmZXIgaGlnaGVyIGVycm9yIHZhbHVlcyBpZiBsb3dlciBlcnJvcnMgYnViYmxlIHRvIHRoZSBzYW1lIGJvdW5kYXJ5XG4gICAgICBpZiAoZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID09IG51bGwpIHtcbiAgICAgICAgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID0gZXJyb3I7XG4gICAgICB9XG4gICAgICAvLyBDbGVhciBvdXIgYW55IHByaW9yIGxvYWRlckRhdGEgZm9yIHRoZSB0aHJvd2luZyByb3V0ZVxuICAgICAgbG9hZGVyRGF0YVtpZF0gPSB1bmRlZmluZWQ7XG4gICAgICAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmRcbiAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmdcbiAgICAgIGlmICghZm91bmRFcnJvcikge1xuICAgICAgICBmb3VuZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgc3RhdHVzQ29kZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogNTAwO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLnNldChpZCwgcmVzdWx0LmRlZmVycmVkRGF0YSk7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cbiAgICAgIGlmIChyZXN1bHQuc3RhdHVzQ29kZSAhPSBudWxsICYmIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgc3RhdHVzQ29kZSA9IHJlc3VsdC5zdGF0dXNDb2RlO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlLiAgQWxzbyBjbGVhciBvdXQgYW55IGxvYWRlckRhdGEgZm9yIHRoZVxuICAvLyB0aHJvd2luZyByb3V0ZVxuICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgZXJyb3JzID0gcGVuZGluZ0Vycm9yO1xuICAgIGxvYWRlckRhdGFbT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXV0gPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9ycyxcbiAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlIHx8IDIwMCxcbiAgICBsb2FkZXJIZWFkZXJzXG4gIH07XG59XG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKTtcbiAgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHtcbiAgICAgIGtleSxcbiAgICAgIG1hdGNoLFxuICAgICAgY29udHJvbGxlclxuICAgIH0gPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tpbmRleF07XG4gICAgaW52YXJpYW50KGZldGNoZXJSZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgZmV0Y2hlclJlc3VsdHNbaW5kZXhdICE9PSB1bmRlZmluZWQsIFwiRGlkIG5vdCBmaW5kIGNvcnJlc3BvbmRpbmcgZmV0Y2hlciByZXN1bHRcIik7XG4gICAgbGV0IHJlc3VsdCA9IGZldGNoZXJSZXN1bHRzW2luZGV4XTtcbiAgICAvLyBQcm9jZXNzIGZldGNoZXIgbm9uLXJlZGlyZWN0IGVycm9yc1xuICAgIGlmIChjb250cm9sbGVyICYmIGNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gZG8gZm9yIGFib3J0ZWQgZmV0Y2hlcnNcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgbWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGlmICghKGVycm9ycyAmJiBlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0pKSB7XG4gICAgICAgIGVycm9ycyA9IF9leHRlbmRzKHt9LCBlcnJvcnMsIHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlXG4gICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZVxuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9yc1xuICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VMb2FkZXJEYXRhKGxvYWRlckRhdGEsIG5ld0xvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycykge1xuICBsZXQgbWVyZ2VkTG9hZGVyRGF0YSA9IF9leHRlbmRzKHt9LCBuZXdMb2FkZXJEYXRhKTtcbiAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgIGxldCBpZCA9IG1hdGNoLnJvdXRlLmlkO1xuICAgIGlmIChuZXdMb2FkZXJEYXRhLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgaWYgKG5ld0xvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBuZXdMb2FkZXJEYXRhW2lkXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQgJiYgbWF0Y2gucm91dGUubG9hZGVyKSB7XG4gICAgICAvLyBQcmVzZXJ2ZSBleGlzdGluZyBrZXlzIG5vdCBpbmNsdWRlZCBpbiBuZXdMb2FkZXJEYXRhIGFuZCB3aGVyZSBhIGxvYWRlclxuICAgICAgLy8gd2Fzbid0IHJlbW92ZWQgYnkgSE1SXG4gICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IGxvYWRlckRhdGFbaWRdO1xuICAgIH1cbiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIC8vIERvbid0IGtlZXAgYW55IGxvYWRlciBkYXRhIGJlbG93IHRoZSBib3VuZGFyeVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhO1xufVxuLy8gRmluZCB0aGUgbmVhcmVzdCBlcnJvciBib3VuZGFyeSwgbG9va2luZyB1cHdhcmRzIGZyb20gdGhlIGxlYWYgcm91dGUgKG9yIHRoZVxuLy8gcm91dGUgc3BlY2lmaWVkIGJ5IHJvdXRlSWQpIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvciBib3VuZGFyeSxcbi8vIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgcm91dGVJZCkge1xuICBsZXQgZWxpZ2libGVNYXRjaGVzID0gcm91dGVJZCA/IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpIDogWy4uLm1hdGNoZXNdO1xuICByZXR1cm4gZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKG0gPT4gbS5yb3V0ZS5oYXNFcnJvckJvdW5kYXJ5ID09PSB0cnVlKSB8fCBtYXRjaGVzWzBdO1xufVxuZnVuY3Rpb24gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhyb3V0ZXMpIHtcbiAgLy8gUHJlZmVyIGEgcm9vdCBsYXlvdXQgcm91dGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHNoaW0gaW4gYSByb3V0ZSBvYmplY3RcbiAgbGV0IHJvdXRlID0gcm91dGVzLmxlbmd0aCA9PT0gMSA/IHJvdXRlc1swXSA6IHJvdXRlcy5maW5kKHIgPT4gci5pbmRleCB8fCAhci5wYXRoIHx8IHIucGF0aCA9PT0gXCIvXCIpIHx8IHtcbiAgICBpZDogXCJfX3NoaW0tZXJyb3Itcm91dGVfX1wiXG4gIH07XG4gIHJldHVybiB7XG4gICAgbWF0Y2hlczogW3tcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBwYXRobmFtZTogXCJcIixcbiAgICAgIHBhdGhuYW1lQmFzZTogXCJcIixcbiAgICAgIHJvdXRlXG4gICAgfV0sXG4gICAgcm91dGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEludGVybmFsUm91dGVyRXJyb3Ioc3RhdHVzLCBfdGVtcDUpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSxcbiAgICByb3V0ZUlkLFxuICAgIG1ldGhvZCxcbiAgICB0eXBlXG4gIH0gPSBfdGVtcDUgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA1O1xuICBsZXQgc3RhdHVzVGV4dCA9IFwiVW5rbm93biBTZXJ2ZXIgRXJyb3JcIjtcbiAgbGV0IGVycm9yTWVzc2FnZSA9IFwiVW5rbm93biBAcmVtaXgtcnVuL3JvdXRlciBlcnJvclwiO1xuICBpZiAoc3RhdHVzID09PSA0MDApIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJCYWQgUmVxdWVzdFwiO1xuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kICsgXCIgcmVxdWVzdCB0byBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIiBidXQgXCIgKyAoXCJkaWQgbm90IHByb3ZpZGUgYSBgbG9hZGVyYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkZWZlci1hY3Rpb25cIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJpbnZhbGlkLWJvZHlcIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJVbmFibGUgdG8gZW5jb2RlIHN1Ym1pc3Npb24gYm9keVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgIHN0YXR1c1RleHQgPSBcIkZvcmJpZGRlblwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiUm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiBkb2VzIG5vdCBtYXRjaCBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgIHN0YXR1c1RleHQgPSBcIk5vdCBGb3VuZFwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiTm8gcm91dGUgbWF0Y2hlcyBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNSkge1xuICAgIHN0YXR1c1RleHQgPSBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiO1xuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhbiBgYWN0aW9uYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgcmVxdWVzdCBtZXRob2QgXFxcIlwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIlxcXCJcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBFcnJvclJlc3BvbnNlSW1wbChzdGF0dXMgfHwgNTAwLCBzdGF0dXNUZXh0LCBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSwgdHJ1ZSk7XG59XG4vLyBGaW5kIGFueSByZXR1cm5lZCByZWRpcmVjdCBlcnJvcnMsIHN0YXJ0aW5nIGZyb20gdGhlIGxvd2VzdCBtYXRjaFxuZnVuY3Rpb24gZmluZFJlZGlyZWN0KHJlc3VsdHMpIHtcbiAgZm9yIChsZXQgaSA9IHJlc3VsdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQsXG4gICAgICAgIGlkeDogaVxuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChwYXRoKSA6IHBhdGg7XG4gIHJldHVybiBjcmVhdGVQYXRoKF9leHRlbmRzKHt9LCBwYXJzZWRQYXRoLCB7XG4gICAgaGFzaDogXCJcIlxuICB9KSk7XG59XG5mdW5jdGlvbiBpc0hhc2hDaGFuZ2VPbmx5KGEsIGIpIHtcbiAgaWYgKGEucGF0aG5hbWUgIT09IGIucGF0aG5hbWUgfHwgYS5zZWFyY2ggIT09IGIuc2VhcmNoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChhLmhhc2ggPT09IFwiXCIpIHtcbiAgICAvLyAvcGFnZSAtPiAvcGFnZSNoYXNoXG4gICAgcmV0dXJuIGIuaGFzaCAhPT0gXCJcIjtcbiAgfSBlbHNlIGlmIChhLmhhc2ggPT09IGIuaGFzaCkge1xuICAgIC8vIC9wYWdlI2hhc2ggLT4gL3BhZ2UjaGFzaFxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGIuaGFzaCAhPT0gXCJcIikge1xuICAgIC8vIC9wYWdlI2hhc2ggLT4gL3BhZ2Ujb3RoZXJcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBJZiB0aGUgaGFzaCBpcyByZW1vdmVkIHRoZSBicm93c2VyIHdpbGwgcmUtcGVyZm9ybSBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlclxuICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlXG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kZWZlcnJlZDtcbn1cbmZ1bmN0aW9uIGlzRXJyb3JSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcjtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiAocmVzdWx0ICYmIHJlc3VsdC50eXBlKSA9PT0gUmVzdWx0VHlwZS5yZWRpcmVjdDtcbn1cbmZ1bmN0aW9uIGlzRGVmZXJyZWREYXRhKHZhbHVlKSB7XG4gIGxldCBkZWZlcnJlZCA9IHZhbHVlO1xuICByZXR1cm4gZGVmZXJyZWQgJiYgdHlwZW9mIGRlZmVycmVkID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBkZWZlcnJlZC5kYXRhID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBkZWZlcnJlZC5zdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZGVmZXJyZWQuY2FuY2VsID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlZmVycmVkLnJlc29sdmVEYXRhID09PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHZhbHVlLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlLmhlYWRlcnMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLmJvZHkgIT09IFwidW5kZWZpbmVkXCI7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzcG9uc2UocmVzdWx0KSB7XG4gIGlmICghaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzO1xuICBsZXQgbG9jYXRpb24gPSByZXN1bHQuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgcmV0dXJuIHN0YXR1cyA+PSAzMDAgJiYgc3RhdHVzIDw9IDM5OSAmJiBsb2NhdGlvbiAhPSBudWxsO1xufVxuZnVuY3Rpb24gaXNRdWVyeVJvdXRlUmVzcG9uc2Uob2JqKSB7XG4gIHJldHVybiBvYmogJiYgaXNSZXNwb25zZShvYmoucmVzcG9uc2UpICYmIChvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IG9iai50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRNZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiB2YWxpZFJlcXVlc3RNZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSk7XG59XG5mdW5jdGlvbiBpc011dGF0aW9uTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRNdXRhdGlvbk1ldGhvZHMuaGFzKG1ldGhvZC50b0xvd2VyQ2FzZSgpKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHNpZ25hbHMsIGlzRmV0Y2hlciwgY3VycmVudExvYWRlckRhdGEpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdO1xuICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBtYXRjaCwgdGhlbiB3ZSBjYW4gaGF2ZSBhIGRlZmVycmVkIHJlc3VsdCB0byBkb1xuICAgIC8vIGFueXRoaW5nIHdpdGguICBUaGlzIGlzIGZvciByZXZhbGlkYXRpbmcgZmV0Y2hlcnMgd2hlcmUgdGhlIHJvdXRlIHdhc1xuICAgIC8vIHJlbW92ZWQgZHVyaW5nIEhNUlxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBsZXQgY3VycmVudE1hdGNoID0gY3VycmVudE1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IG1hdGNoLnJvdXRlLmlkKTtcbiAgICBsZXQgaXNSZXZhbGlkYXRpbmdMb2FkZXIgPSBjdXJyZW50TWF0Y2ggIT0gbnVsbCAmJiAhaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpICYmIChjdXJyZW50TG9hZGVyRGF0YSAmJiBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0pICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSAmJiAoaXNGZXRjaGVyIHx8IGlzUmV2YWxpZGF0aW5nTG9hZGVyKSkge1xuICAgICAgLy8gTm90ZTogd2UgZG8gbm90IGhhdmUgdG8gdG91Y2ggYWN0aXZlRGVmZXJyZWRzIGhlcmUgc2luY2Ugd2UgcmFjZSB0aGVtXG4gICAgICAvLyBhZ2FpbnN0IHRoZSBzaWduYWwgaW4gcmVzb2x2ZURlZmVycmVkRGF0YSBhbmQgdGhleSdsbCBnZXQgYWJvcnRlZFxuICAgICAgLy8gdGhlcmUgaWYgbmVlZGVkXG4gICAgICBsZXQgc2lnbmFsID0gc2lnbmFsc1tpbmRleF07XG4gICAgICBpbnZhcmlhbnQoc2lnbmFsLCBcIkV4cGVjdGVkIGFuIEFib3J0U2lnbmFsIGZvciByZXZhbGlkYXRpbmcgZmV0Y2hlciBkZWZlcnJlZCByZXN1bHRcIik7XG4gICAgICBhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCBpc0ZldGNoZXIpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdHNbaW5kZXhdID0gcmVzdWx0IHx8IHJlc3VsdHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIHVud3JhcCkge1xuICBpZiAodW53cmFwID09PSB2b2lkIDApIHtcbiAgICB1bndyYXAgPSBmYWxzZTtcbiAgfVxuICBsZXQgYWJvcnRlZCA9IGF3YWl0IHJlc3VsdC5kZWZlcnJlZERhdGEucmVzb2x2ZURhdGEoc2lnbmFsKTtcbiAgaWYgKGFib3J0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YVxuICB9O1xufVxuZnVuY3Rpb24gaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaCkge1xuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyhzZWFyY2gpLmdldEFsbChcImluZGV4XCIpLnNvbWUodiA9PiB2ID09PSBcIlwiKTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKSB7XG4gIGxldCBzZWFyY2ggPSB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb24pLnNlYXJjaCA6IGxvY2F0aW9uLnNlYXJjaDtcbiAgaWYgKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoIHx8IFwiXCIpKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH1cbiAgLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcbiAgbGV0IHBhdGhNYXRjaGVzID0gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcyk7XG4gIHJldHVybiBwYXRoTWF0Y2hlc1twYXRoTWF0Y2hlcy5sZW5ndGggLSAxXTtcbn1cbmZ1bmN0aW9uIGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihuYXZpZ2F0aW9uKSB7XG4gIGxldCB7XG4gICAgZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlLFxuICAgIHRleHQsXG4gICAgZm9ybURhdGEsXG4gICAganNvblxuICB9ID0gbmF2aWdhdGlvbjtcbiAgaWYgKCFmb3JtTWV0aG9kIHx8ICFmb3JtQWN0aW9uIHx8ICFmb3JtRW5jVHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodGV4dCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dFxuICAgIH07XG4gIH0gZWxzZSBpZiAoZm9ybURhdGEgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGpzb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb24sXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbikge1xuICBpZiAoc3VibWlzc2lvbikge1xuICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0XG4gICAgfTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdWJtaXR0aW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbikge1xuICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCIsXG4gICAgbG9jYXRpb24sXG4gICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgdGV4dDogc3VibWlzc2lvbi50ZXh0XG4gIH07XG4gIHJldHVybiBuYXZpZ2F0aW9uO1xufVxuZnVuY3Rpb24gZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZGF0YSkge1xuICBpZiAoc3VibWlzc2lvbikge1xuICAgIGxldCBmZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCxcbiAgICAgIGRhdGFcbiAgICB9O1xuICAgIHJldHVybiBmZXRjaGVyO1xuICB9IGVsc2Uge1xuICAgIGxldCBmZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgICBkYXRhXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWRcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiBnZXREb25lRmV0Y2hlcihkYXRhKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIGRhdGFcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiByZXN0b3JlQXBwbGllZFRyYW5zaXRpb25zKF93aW5kb3csIHRyYW5zaXRpb25zKSB7XG4gIHRyeSB7XG4gICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBfd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oVFJBTlNJVElPTlNfU1RPUkFHRV9LRVkpO1xuICAgIGlmIChzZXNzaW9uUG9zaXRpb25zKSB7XG4gICAgICBsZXQganNvbiA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICBmb3IgKGxldCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoanNvbiB8fCB7fSkpIHtcbiAgICAgICAgaWYgKHYgJiYgQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICAgIHRyYW5zaXRpb25zLnNldChrLCBuZXcgU2V0KHYgfHwgW10pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vLW9wLCB1c2UgZGVmYXVsdCBlbXB0eSBvYmplY3RcbiAgfVxufVxuZnVuY3Rpb24gcGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyhfd2luZG93LCB0cmFuc2l0aW9ucykge1xuICBpZiAodHJhbnNpdGlvbnMuc2l6ZSA+IDApIHtcbiAgICBsZXQganNvbiA9IHt9O1xuICAgIGZvciAobGV0IFtrLCB2XSBvZiB0cmFuc2l0aW9ucykge1xuICAgICAganNvbltrXSA9IFsuLi52XTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIF93aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoanNvbikpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIkZhaWxlZCB0byBzYXZlIGFwcGxpZWQgdmlldyB0cmFuc2l0aW9ucyBpbiBzZXNzaW9uU3RvcmFnZSAoXCIgKyBlcnJvciArIFwiKS5cIik7XG4gICAgfVxuICB9XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiwgSURMRV9CTE9DS0VSLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCwgRGVmZXJyZWREYXRhIGFzIFVOU0FGRV9EZWZlcnJlZERhdGEsIEVycm9yUmVzcG9uc2VJbXBsIGFzIFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCwgY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2ggYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoLCBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzIGFzIFVOU0FGRV9jb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzLCBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyBhcyBVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMsIGludmFyaWFudCBhcyBVTlNBRkVfaW52YXJpYW50LCB3YXJuaW5nIGFzIFVOU0FGRV93YXJuaW5nLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlciwgY3JlYXRlU3RhdGljSGFuZGxlciwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvciwgZ2V0VG9QYXRobmFtZSwgaXNEZWZlcnJlZERhdGEsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqb2luUGF0aHMsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIG5vcm1hbGl6ZVBhdGhuYW1lLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZWRpcmVjdERvY3VtZW50LCByZXNvbHZlUGF0aCwgcmVzb2x2ZVRvLCBzdHJpcEJhc2VuYW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXIuanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni4yMC4xXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocywgbWF0Y2hQYXRoLCBVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMsIFVOU0FGRV93YXJuaW5nLCByZXNvbHZlVG8sIHBhcnNlUGF0aCwgbWF0Y2hSb3V0ZXMsIEFjdGlvbiwgVU5TQUZFX2NvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoLCBzdHJpcEJhc2VuYW1lLCBJRExFX0JMT0NLRVIsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLy8gQ3JlYXRlIHJlYWN0LXNwZWNpZmljIHR5cGVzIGZyb20gdGhlIGFnbm9zdGljIHR5cGVzIGluIEByZW1peC1ydW4vcm91dGVyIHRvXG4vLyBleHBvcnQgZnJvbSByZWFjdC1yb3V0ZXJcbmNvbnN0IERhdGFSb3V0ZXJDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5jb25zdCBEYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkRhdGFSb3V0ZXJTdGF0ZVwiO1xufVxuY29uc3QgQXdhaXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEF3YWl0Q29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXdhaXRcIjtcbn1cblxuLyoqXG4gKiBBIE5hdmlnYXRvciBpcyBhIFwibG9jYXRpb24gY2hhbmdlclwiOyBpdCdzIGhvdyB5b3UgZ2V0IHRvIGRpZmZlcmVudCBsb2NhdGlvbnMuXG4gKlxuICogRXZlcnkgaGlzdG9yeSBpbnN0YW5jZSBjb25mb3JtcyB0byB0aGUgTmF2aWdhdG9yIGludGVyZmFjZSwgYnV0IHRoZVxuICogZGlzdGluY3Rpb24gaXMgdXNlZnVsIHByaW1hcmlseSB3aGVuIGl0IGNvbWVzIHRvIHRoZSBsb3ctbGV2ZWwgYDxSb3V0ZXI+YCBBUElcbiAqIHdoZXJlIGJvdGggdGhlIGxvY2F0aW9uIGFuZCBhIG5hdmlnYXRvciBtdXN0IGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgaW4gb3JkZXJcbiAqIHRvIGF2b2lkIFwidGVhcmluZ1wiIHRoYXQgbWF5IG9jY3VyIGluIGEgc3VzcGVuc2UtZW5hYmxlZCBhcHAgaWYgdGhlIGFjdGlvblxuICogYW5kL29yIGxvY2F0aW9uIHdlcmUgdG8gYmUgcmVhZCBkaXJlY3RseSBmcm9tIHRoZSBoaXN0b3J5IGluc3RhbmNlLlxuICovXG5cbmNvbnN0IE5hdmlnYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdLFxuICBpc0RhdGFSb3V0ZTogZmFsc2Vcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5jb25zdCBSb3V0ZUVycm9yQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUVycm9yQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVFcnJvclwiO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZ1bGwgaHJlZiBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgZm9yIGJ1aWxkaW5nXG4gKiBjdXN0b20gbGlua3MgdGhhdCBhcmUgYWxzbyBhY2Nlc3NpYmxlIGFuZCBwcmVzZXJ2ZSByaWdodC1jbGljayBiZWhhdmlvci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1ocmVmXG4gKi9cbmZ1bmN0aW9uIHVzZUhyZWYodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTtcblxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBocmVmLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3XG4gIC8vIGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2VcbiAgLy8gb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgYDxSb3V0ZXI+YC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1pbi1yb3V0ZXItY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VJblJvdXRlckNvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1sb2NhdGlvblxuICovXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0aW9uLXR5cGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGlvblR5cGUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIFBhdGhNYXRjaCBvYmplY3QgaWYgdGhlIGdpdmVuIHBhdHRlcm4gbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiBgPE5hdkxpbms+YC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1tYXRjaFxuICovXG5mdW5jdGlvbiB1c2VNYXRjaChwYXR0ZXJuKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIHBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpLCBbcGF0aG5hbWUsIHBhdHRlcm5dKTtcbn1cblxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cblxuY29uc3QgbmF2aWdhdGVFZmZlY3RXYXJuaW5nID0gXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCI7XG5cbi8vIE11dGUgd2FybmluZ3MgZm9yIGNhbGxzIHRvIHVzZU5hdmlnYXRlIGluIFNTUiBlbnZpcm9ubWVudHNcbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoY2IpIHtcbiAgbGV0IGlzU3RhdGljID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCkuc3RhdGljO1xuICBpZiAoIWlzU3RhdGljKSB7XG4gICAgLy8gV2Ugc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHJpZCBvZiB0aGlzIG9uY2UgcmVhY3QgMTguMyBpcyByZWxlYXNlZFxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjYzOTVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoY2IpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IGA8TGluaz5gcywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gIGxldCB7XG4gICAgaXNEYXRhUm91dGVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgLy8gQ29uZGl0aW9uYWwgdXNhZ2UgaXMgT0sgaGVyZSBiZWNhdXNlIHRoZSB1c2FnZSBvZiBhIGRhdGEgcm91dGVyIGlzIHN0YXRpY1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgcmV0dXJuIGlzRGF0YVJvdXRlID8gdXNlTmF2aWdhdGVTdGFibGUoKSA6IHVzZU5hdmlnYXRlVW5zdGFibGUoKTtcbn1cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlVW5zdGFibGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTmF2aWdhdGUoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpIDogdm9pZCAwO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBoZXJlIHNpbmNlIGlmIHRoaXMgaGFwcGVucyBvbiBmaXJzdCByZW5kZXIgdGhlIG5hdmlnYXRlXG4gICAgLy8gaXMgdXNlbGVzcyBiZWNhdXNlIHdlIGhhdmVuJ3Qgd2lyZWQgdXAgb3VyIGhpc3RvcnkgbGlzdGVuZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTtcblxuICAgIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgICAvLyB0byBoYW5kaW5nIG9mZiB0byBoaXN0b3J5IChidXQgb25seSBpZiB3ZSdyZSBub3QgaW4gYSBkYXRhIHJvdXRlcixcbiAgICAvLyBvdGhlcndpc2UgaXQnbGwgcHJlcGVuZCB0aGUgYmFzZW5hbWUgaW5zaWRlIG9mIHRoZSByb3V0ZXIpLlxuICAgIC8vIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2UgbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZVxuICAgIC8vIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYVxuICAgIC8vIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcbiAgICBpZiAoZGF0YVJvdXRlckNvbnRleHQgPT0gbnVsbCAmJiBiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgZGF0YVJvdXRlckNvbnRleHRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgT3V0bGV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXQtY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChPdXRsZXRDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IGA8T3V0bGV0PmAgdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXRcbiAqL1xuZnVuY3Rpb24gdXNlT3V0bGV0KGNvbnRleHQpIHtcbiAgbGV0IG91dGxldCA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KS5vdXRsZXQ7XG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICB9LCBvdXRsZXQpO1xuICB9XG4gIHJldHVybiBvdXRsZXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcGFyYW1zXG4gKi9cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcmVzb2x2ZWQtcGF0aFxuICovXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiBgPE91dGxldD5gIHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzXG4gKiBlbGVtZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJvdXRlc1xuICovXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIGxvY2F0aW9uQXJnKTtcbn1cblxuLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gd2l0aCBhY2NlcHQgb3B0aW9uYWwgcGFyYW0gZm9yIFJvdXRlclByb3ZpZGVyIHVzYWdlXG5mdW5jdGlvbiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcsIGRhdGFSb3V0ZXJTdGF0ZSkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZVJvdXRlcygpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gcGFyZW50TWF0Y2hlc1twYXJlbnRNYXRjaGVzLmxlbmd0aCAtIDFdO1xuICBsZXQgcGFyZW50UGFyYW1zID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG4gIGxldCBwYXJlbnRQYXRobmFtZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lIDogXCIvXCI7XG4gIGxldCBwYXJlbnRQYXRobmFtZUJhc2UgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZUJhc2UgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFJvdXRlID0gcm91dGVNYXRjaCAmJiByb3V0ZU1hdGNoLnJvdXRlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuICBsZXQgbG9jYXRpb25Gcm9tQ29udGV4dCA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBsb2NhdGlvbjtcbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgdmFyIF9wYXJzZWRMb2NhdGlvbkFyZyRwYTtcbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIldoZW4gb3ZlcnJpZGluZyB0aGUgbG9jYXRpb24gdXNpbmcgYDxSb3V0ZXMgbG9jYXRpb24+YCBvciBgdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pYCwgXCIgKyBcInRoZSBsb2NhdGlvbiBwYXRobmFtZSBtdXN0IGJlZ2luIHdpdGggdGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBcIiArIChcIm1hdGNoZWQgYnkgYWxsIHBhcmVudCByb3V0ZXMuIFRoZSBjdXJyZW50IHBhdGhuYW1lIGJhc2UgaXMgXFxcIlwiICsgcGFyZW50UGF0aG5hbWVCYXNlICsgXCJcXFwiIFwiKSArIChcImJ1dCBwYXRobmFtZSBcXFwiXCIgKyBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSArIFwiXFxcIiB3YXMgZ2l2ZW4gaW4gdGhlIGBsb2NhdGlvbmAgcHJvcC5cIikpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbG9jYXRpb24gPSBwYXJzZWRMb2NhdGlvbkFyZztcbiAgfSBlbHNlIHtcbiAgICBsb2NhdGlvbiA9IGxvY2F0aW9uRnJvbUNvbnRleHQ7XG4gIH1cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKHBhcmVudFJvdXRlIHx8IG1hdGNoZXMgIT0gbnVsbCwgXCJObyByb3V0ZXMgbWF0Y2hlZCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5Db21wb25lbnQgIT09IHVuZGVmaW5lZCwgXCJNYXRjaGVkIGxlYWYgcm91dGUgYXQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiICsgXCJkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQgb3IgQ29tcG9uZW50LiBUaGlzIG1lYW5zIGl0IHdpbGwgcmVuZGVyIGFuIDxPdXRsZXQgLz4gd2l0aCBhIFwiICsgXCJudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMgJiYgbWF0Y2hlcy5tYXAobWF0Y2ggPT4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gsIHtcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudFBhcmFtcywgbWF0Y2gucGFyYW1zKSxcbiAgICBwYXRobmFtZTogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsXG4gICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24obWF0Y2gucGF0aG5hbWUpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUpO1xuXG4gIC8vIFdoZW4gYSB1c2VyIHBhc3NlcyBpbiBhIGBsb2NhdGlvbkFyZ2AsIHRoZSBhc3NvY2lhdGVkIHJvdXRlcyBuZWVkIHRvXG4gIC8vIGJlIHdyYXBwZWQgaW4gYSBuZXcgYExvY2F0aW9uQ29udGV4dC5Qcm92aWRlcmAgaW4gb3JkZXIgZm9yIGB1c2VMb2NhdGlvbmBcbiAgLy8gdG8gdXNlIHRoZSBzY29wZWQgbG9jYXRpb24gaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGxvY2F0aW9uLlxuICBpZiAobG9jYXRpb25BcmcgJiYgcmVuZGVyZWRNYXRjaGVzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgbG9jYXRpb246IF9leHRlbmRzKHtcbiAgICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgICAgc2VhcmNoOiBcIlwiLFxuICAgICAgICAgIGhhc2g6IFwiXCIsXG4gICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAga2V5OiBcImRlZmF1bHRcIlxuICAgICAgICB9LCBsb2NhdGlvbiksXG4gICAgICAgIG5hdmlnYXRpb25UeXBlOiBBY3Rpb24uUG9wXG4gICAgICB9XG4gICAgfSwgcmVuZGVyZWRNYXRjaGVzKTtcbiAgfVxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzO1xufVxuZnVuY3Rpb24gRGVmYXVsdEVycm9yQ29tcG9uZW50KCkge1xuICBsZXQgZXJyb3IgPSB1c2VSb3V0ZUVycm9yKCk7XG4gIGxldCBtZXNzYWdlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0IDogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gIGxldCBzdGFjayA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IG51bGw7XG4gIGxldCBsaWdodGdyZXkgPSBcInJnYmEoMjAwLDIwMCwyMDAsIDAuNSlcIjtcbiAgbGV0IHByZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjAuNXJlbVwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBjb2RlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMnB4IDRweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBkZXZJbmZvID0gbnVsbDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBoYW5kbGVkIGJ5IFJlYWN0IFJvdXRlciBkZWZhdWx0IEVycm9yQm91bmRhcnk6XCIsIGVycm9yKTtcbiAgICBkZXZJbmZvID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIlxcdUQ4M0RcXHVEQ0JGIEhleSBkZXZlbG9wZXIgXFx1RDgzRFxcdURDNEJcIiksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIllvdSBjYW4gcHJvdmlkZSBhIHdheSBiZXR0ZXIgVVggdGhhbiB0aGlzIHdoZW4geW91ciBhcHAgdGhyb3dzIGVycm9ycyBieSBwcm92aWRpbmcgeW91ciBvd24gXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCB7XG4gICAgICBzdHlsZTogY29kZVN0eWxlc1xuICAgIH0sIFwiRXJyb3JCb3VuZGFyeVwiKSwgXCIgb3JcIiwgXCIgXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCB7XG4gICAgICBzdHlsZTogY29kZVN0eWxlc1xuICAgIH0sIFwiZXJyb3JFbGVtZW50XCIpLCBcIiBwcm9wIG9uIHlvdXIgcm91dGUuXCIpKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaDJcIiwgbnVsbCwgXCJVbmV4cGVjdGVkIEFwcGxpY2F0aW9uIEVycm9yIVwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRTdHlsZTogXCJpdGFsaWNcIlxuICAgIH1cbiAgfSwgbWVzc2FnZSksIHN0YWNrID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIiwge1xuICAgIHN0eWxlOiBwcmVTdHlsZXNcbiAgfSwgc3RhY2spIDogbnVsbCwgZGV2SW5mbyk7XG59XG5jb25zdCBkZWZhdWx0RXJyb3JFbGVtZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEVycm9yQ29tcG9uZW50LCBudWxsKTtcbmNsYXNzIFJlbmRlckVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24sXG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3JcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IGVycm9yXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIC8vIFdoZW4gd2UgZ2V0IGludG8gYW4gZXJyb3Igc3RhdGUsIHRoZSB1c2VyIHdpbGwgbGlrZWx5IGNsaWNrIFwiYmFja1wiIHRvIHRoZVxuICAgIC8vIHByZXZpb3VzIHBhZ2UgdGhhdCBkaWRuJ3QgaGF2ZSBhbiBlcnJvci4gQmVjYXVzZSB0aGlzIHdyYXBzIHRoZSBlbnRpcmVcbiAgICAvLyBhcHBsaWNhdGlvbiwgdGhhdCB3aWxsIGhhdmUgbm8gZWZmZWN0LS10aGUgZXJyb3IgcGFnZSBjb250aW51ZXMgdG8gZGlzcGxheS5cbiAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAvL1xuICAgIC8vIFdoZXRoZXIgd2UncmUgaW4gYW4gZXJyb3Igc3RhdGUgb3Igbm90LCB3ZSB1cGRhdGUgdGhlIGxvY2F0aW9uIGluIHN0YXRlXG4gICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uXG4gICAgLy8gY29tZXMgaW4gYW5kIHRoZSB1c2VyIHJlY292ZXJzIGZyb20gdGhlIGVycm9yLlxuICAgIGlmIChzdGF0ZS5sb2NhdGlvbiAhPT0gcHJvcHMubG9jYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uICE9PSBcImlkbGVcIiAmJiBwcm9wcy5yZXZhbGlkYXRpb24gPT09IFwiaWRsZVwiKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogcHJvcHMuZXJyb3IsXG4gICAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb25cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgbm90IGNoYW5naW5nIGxvY2F0aW9ucywgcHJlc2VydmUgdGhlIGxvY2F0aW9uIGJ1dCBzdGlsbCBzdXJmYWNlXG4gICAgLy8gYW55IG5ldyBlcnJvcnMgdGhhdCBtYXkgY29tZSB0aHJvdWdoLiBXZSByZXRhaW4gdGhlIGV4aXN0aW5nIGVycm9yLCB3ZSBkb1xuICAgIC8vIHRoaXMgYmVjYXVzZSB0aGUgZXJyb3IgcHJvdmlkZWQgZnJvbSB0aGUgYXBwIHN0YXRlIG1heSBiZSBjbGVhcmVkIHdpdGhvdXRcbiAgICAvLyB0aGUgbG9jYXRpb24gY2hhbmdpbmcuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvciB8fCBzdGF0ZS5lcnJvcixcbiAgICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uIHx8IHN0YXRlLnJldmFsaWRhdGlvblxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJSZWFjdCBSb3V0ZXIgY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZXJyb3IgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnJvdXRlQ29udGV4dFxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlRXJyb3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgIH0pKSA6IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH1cbn1cbmZ1bmN0aW9uIFJlbmRlcmVkUm91dGUoX3JlZikge1xuICBsZXQge1xuICAgIHJvdXRlQ29udGV4dCxcbiAgICBtYXRjaCxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG5cbiAgLy8gVHJhY2sgaG93IGRlZXAgd2UgZ290IGluIG91ciByZW5kZXIgcGFzcyB0byBlbXVsYXRlIFNTUiBjb21wb25lbnREaWRDYXRjaFxuICAvLyBpbiBhIERhdGFTdGF0aWNSb3V0ZXJcbiAgaWYgKGRhdGFSb3V0ZXJDb250ZXh0ICYmIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpYyAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0ICYmIChtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgbWF0Y2gucm91dGUuRXJyb3JCb3VuZGFyeSkpIHtcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiByb3V0ZUNvbnRleHRcbiAgfSwgY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gX3JlbmRlck1hdGNoZXMobWF0Y2hlcywgcGFyZW50TWF0Y2hlcywgZGF0YVJvdXRlclN0YXRlKSB7XG4gIHZhciBfZGF0YVJvdXRlclN0YXRlMjtcbiAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudE1hdGNoZXMgPSBbXTtcbiAgfVxuICBpZiAoZGF0YVJvdXRlclN0YXRlID09PSB2b2lkIDApIHtcbiAgICBkYXRhUm91dGVyU3RhdGUgPSBudWxsO1xuICB9XG4gIGlmIChtYXRjaGVzID09IG51bGwpIHtcbiAgICB2YXIgX2RhdGFSb3V0ZXJTdGF0ZTtcbiAgICBpZiAoKF9kYXRhUm91dGVyU3RhdGUgPSBkYXRhUm91dGVyU3RhdGUpICE9IG51bGwgJiYgX2RhdGFSb3V0ZXJTdGF0ZS5lcnJvcnMpIHtcbiAgICAgIC8vIERvbid0IGJhaWwgaWYgd2UgaGF2ZSBkYXRhIHJvdXRlciBlcnJvcnMgc28gd2UgY2FuIHJlbmRlciB0aGVtIGluIHRoZVxuICAgICAgLy8gYm91bmRhcnkuICBVc2UgdGhlIHByZS1tYXRjaGVkIChvciBzaGltbWVkKSBtYXRjaGVzXG4gICAgICBtYXRjaGVzID0gZGF0YVJvdXRlclN0YXRlLm1hdGNoZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gbWF0Y2hlcztcblxuICAvLyBJZiB3ZSBoYXZlIGRhdGEgZXJyb3JzLCB0cmltIG1hdGNoZXMgdG8gdGhlIGhpZ2hlc3QgZXJyb3IgYm91bmRhcnlcbiAgbGV0IGVycm9ycyA9IChfZGF0YVJvdXRlclN0YXRlMiA9IGRhdGFSb3V0ZXJTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhUm91dGVyU3RhdGUyLmVycm9ycztcbiAgaWYgKGVycm9ycyAhPSBudWxsKSB7XG4gICAgbGV0IGVycm9ySW5kZXggPSByZW5kZXJlZE1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCAmJiAoZXJyb3JzID09IG51bGwgPyB2b2lkIDAgOiBlcnJvcnNbbS5yb3V0ZS5pZF0pKTtcbiAgICAhKGVycm9ySW5kZXggPj0gMCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkNvdWxkIG5vdCBmaW5kIGEgbWF0Y2hpbmcgcm91dGUgZm9yIGVycm9ycyBvbiByb3V0ZSBJRHM6IFwiICsgT2JqZWN0LmtleXMoZXJyb3JzKS5qb2luKFwiLFwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZW5kZXJlZE1hdGNoZXMgPSByZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgTWF0aC5taW4ocmVuZGVyZWRNYXRjaGVzLmxlbmd0aCwgZXJyb3JJbmRleCArIDEpKTtcbiAgfVxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIGxldCBlcnJvciA9IG1hdGNoLnJvdXRlLmlkID8gZXJyb3JzID09IG51bGwgPyB2b2lkIDAgOiBlcnJvcnNbbWF0Y2gucm91dGUuaWRdIDogbnVsbDtcbiAgICAvLyBPbmx5IGRhdGEgcm91dGVycyBoYW5kbGUgZXJyb3JzXG4gICAgbGV0IGVycm9yRWxlbWVudCA9IG51bGw7XG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSkge1xuICAgICAgZXJyb3JFbGVtZW50ID0gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGRlZmF1bHRFcnJvckVsZW1lbnQ7XG4gICAgfVxuICAgIGxldCBtYXRjaGVzID0gcGFyZW50TWF0Y2hlcy5jb25jYXQocmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIGluZGV4ICsgMSkpO1xuICAgIGxldCBnZXRDaGlsZHJlbiA9ICgpID0+IHtcbiAgICAgIGxldCBjaGlsZHJlbjtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjaGlsZHJlbiA9IGVycm9yRWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gucm91dGUuQ29tcG9uZW50KSB7XG4gICAgICAgIC8vIE5vdGU6IFRoaXMgaXMgYSBkZS1vcHRpbWl6ZWQgcGF0aCBzaW5jZSBSZWFjdCB3b24ndCByZS11c2UgdGhlXG4gICAgICAgIC8vIFJlYWN0RWxlbWVudCBzaW5jZSBpdCdzIGlkZW50aXR5IGNoYW5nZXMgd2l0aCBlYWNoIG5ld1xuICAgICAgICAvLyBSZWFjdC5jcmVhdGVFbGVtZW50IGNhbGwuICBXZSBrZWVwIHRoaXMgc28gZm9sa3MgY2FuIHVzZVxuICAgICAgICAvLyBgPFJvdXRlIENvbXBvbmVudD17Li4ufT5gIGluIGA8Um91dGVzPmAgYnV0IGdlbmVyYWxseSBgQ29tcG9uZW50YFxuICAgICAgICAvLyB1c2FnZSBpcyBvbmx5IGFkdmlzZWQgaW4gYFJvdXRlclByb3ZpZGVyYCB3aGVuIHdlIGNhbiBjb252ZXJ0IGl0IHRvXG4gICAgICAgIC8vIGBlbGVtZW50YCBhaGVhZCBvZiB0aW1lLlxuICAgICAgICBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KG1hdGNoLnJvdXRlLkNvbXBvbmVudCwgbnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoLnJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBtYXRjaC5yb3V0ZS5lbGVtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4gPSBvdXRsZXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVuZGVyZWRSb3V0ZSwge1xuICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICAgIG91dGxldCxcbiAgICAgICAgICBtYXRjaGVzLFxuICAgICAgICAgIGlzRGF0YVJvdXRlOiBkYXRhUm91dGVyU3RhdGUgIT0gbnVsbFxuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gT25seSB3cmFwIGluIGFuIGVycm9yIGJvdW5kYXJ5IHdpdGhpbiBkYXRhIHJvdXRlciB1c2FnZXMgd2hlbiB3ZSBoYXZlIGFuXG4gICAgLy8gRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvXG4gICAgLy8gYW4gYW5jZXN0b3IgRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnRcbiAgICByZXR1cm4gZGF0YVJvdXRlclN0YXRlICYmIChtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5IHx8IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBpbmRleCA9PT0gMCkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJFcnJvckJvdW5kYXJ5LCB7XG4gICAgICBsb2NhdGlvbjogZGF0YVJvdXRlclN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBkYXRhUm91dGVyU3RhdGUucmV2YWxpZGF0aW9uLFxuICAgICAgY29tcG9uZW50OiBlcnJvckVsZW1lbnQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBjaGlsZHJlbjogZ2V0Q2hpbGRyZW4oKSxcbiAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICBvdXRsZXQ6IG51bGwsXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGlzRGF0YVJvdXRlOiB0cnVlXG4gICAgICB9XG4gICAgfSkgOiBnZXRDaGlsZHJlbigpO1xuICB9LCBudWxsKTtcbn1cbnZhciBEYXRhUm91dGVySG9vayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlTmF2aWdhdGVTdGFibGVcIl0gPSBcInVzZU5hdmlnYXRlXCI7XG4gIHJldHVybiBEYXRhUm91dGVySG9vaztcbn0oRGF0YVJvdXRlckhvb2sgfHwge30pO1xudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUJsb2NrZXJcIl0gPSBcInVzZUJsb2NrZXJcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUxvYWRlckRhdGFcIl0gPSBcInVzZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUFjdGlvbkRhdGFcIl0gPSBcInVzZUFjdGlvbkRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlRXJyb3JcIl0gPSBcInVzZVJvdXRlRXJyb3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRpb25cIl0gPSBcInVzZU5hdmlnYXRpb25cIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlTG9hZGVyRGF0YVwiXSA9IFwidXNlUm91dGVMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VNYXRjaGVzXCJdID0gXCJ1c2VNYXRjaGVzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRlU3RhYmxlXCJdID0gXCJ1c2VOYXZpZ2F0ZVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVJZFwiXSA9IFwidXNlUm91dGVJZFwiO1xuICByZXR1cm4gRGF0YVJvdXRlclN0YXRlSG9vaztcbn0oRGF0YVJvdXRlclN0YXRlSG9vayB8fCB7fSk7XG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuZnVuY3Rpb24gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByb3V0ZTtcbn1cblxuLy8gSW50ZXJuYWwgdmVyc2lvbiB3aXRoIGhvb2tOYW1lLWF3YXJlIGRlYnVnZ2luZ1xuZnVuY3Rpb24gdXNlQ3VycmVudFJvdXRlSWQoaG9va05hbWUpIHtcbiAgbGV0IHJvdXRlID0gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lKTtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgIXRoaXNSb3V0ZS5yb3V0ZS5pZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGhvb2tOYW1lICsgXCIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHRoaXNSb3V0ZS5yb3V0ZS5pZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBJRCBmb3IgdGhlIG5lYXJlc3QgY29udGV4dHVhbCByb3V0ZVxuICovXG5mdW5jdGlvbiB1c2VSb3V0ZUlkKCkge1xuICByZXR1cm4gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUlkKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24sIGRlZmF1bHRpbmcgdG8gYW4gXCJpZGxlXCIgbmF2aWdhdGlvbiB3aGVuXG4gKiBubyBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb24oKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pO1xuICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmV2YWxpZGF0ZSBmdW5jdGlvbiBmb3IgbWFudWFsbHkgdHJpZ2dlcmluZyByZXZhbGlkYXRpb24sIGFzIHdlbGxcbiAqIGFzIHRoZSBjdXJyZW50IHN0YXRlIG9mIGFueSBtYW51YWwgcmV2YWxpZGF0aW9uc1xuICovXG5mdW5jdGlvbiB1c2VSZXZhbGlkYXRvcigpIHtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcmV2YWxpZGF0ZTogZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsXG4gICAgc3RhdGU6IHN0YXRlLnJldmFsaWRhdGlvblxuICB9KSwgW2RhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLCBzdGF0ZS5yZXZhbGlkYXRpb25dKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3RpdmUgcm91dGUgbWF0Y2hlcywgdXNlZnVsIGZvciBhY2Nlc3NpbmcgbG9hZGVyRGF0YSBmb3JcbiAqIHBhcmVudC9jaGlsZCByb3V0ZXMgb3IgdGhlIHJvdXRlIFwiaGFuZGxlXCIgcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gdXNlTWF0Y2hlcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzLFxuICAgIGxvYWRlckRhdGFcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU1hdGNoZXMpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaGVzLm1hcChtID0+IFVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaChtLCBsb2FkZXJEYXRhKSksIFttYXRjaGVzLCBsb2FkZXJEYXRhXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGxvYWRlclxuICovXG5mdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICBpZiAoc3RhdGUuZXJyb3JzICYmIHN0YXRlLmVycm9yc1tyb3V0ZUlkXSAhPSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcIllvdSBjYW5ub3QgYHVzZUxvYWRlckRhdGFgIGluIGFuIGVycm9yRWxlbWVudCAocm91dGVJZDogXCIgKyByb3V0ZUlkICsgXCIpXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVMb2FkZXJEYXRhKHJvdXRlSWQpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5mdW5jdGlvbiB1c2VBY3Rpb25EYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VBY3Rpb25EYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUuYWN0aW9uRGF0YSA/IHN0YXRlLmFjdGlvbkRhdGFbcm91dGVJZF0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBlcnJvciwgd2hpY2ggY291bGQgYmUgYSBsb2FkZXIvYWN0aW9uXG4gKiBlcnJvciBvciBhIHJlbmRlciBlcnJvci4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGZyb20geW91clxuICogRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnQgdG8gZGlzcGxheSBhIHByb3BlciBlcnJvciBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiB1c2VSb3V0ZUVycm9yKCkge1xuICB2YXIgX3N0YXRlJGVycm9ycztcbiAgbGV0IGVycm9yID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUVycm9yQ29udGV4dCk7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpO1xuICBsZXQgcm91dGVJZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG5cbiAgLy8gSWYgdGhpcyB3YXMgYSByZW5kZXIgZXJyb3IsIHdlIHB1dCBpdCBpbiBhIFJvdXRlRXJyb3IgY29udGV4dCBpbnNpZGVcbiAgLy8gb2YgUmVuZGVyRXJyb3JCb3VuZGFyeVxuICBpZiAoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG4gIHJldHVybiAoX3N0YXRlJGVycm9ycyA9IHN0YXRlLmVycm9ycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9zdGF0ZSRlcnJvcnNbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaGFwcHktcGF0aCBkYXRhIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNWYWx1ZSgpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9kYXRhO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9lcnJvcjtcbn1cbmxldCBibG9ja2VySWQgPSAwO1xuXG4vKipcbiAqIEFsbG93IHRoZSBhcHBsaWNhdGlvbiB0byBibG9jayBuYXZpZ2F0aW9ucyB3aXRoaW4gdGhlIFNQQSBhbmQgcHJlc2VudCB0aGVcbiAqIHVzZXIgYSBjb25maXJtYXRpb24gZGlhbG9nIHRvIGNvbmZpcm0gdGhlIG5hdmlnYXRpb24uICBNb3N0bHkgdXNlZCB0byBhdm9pZFxuICogdXNpbmcgaGFsZi1maWxsZWQgZm9ybSBkYXRhLiAgVGhpcyBkb2VzIG5vdCBoYW5kbGUgaGFyZC1yZWxvYWRzIG9yXG4gKiBjcm9zcy1vcmlnaW4gbmF2aWdhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHVzZUJsb2NrZXIoc2hvdWxkQmxvY2spIHtcbiAgbGV0IHtcbiAgICByb3V0ZXIsXG4gICAgYmFzZW5hbWVcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUJsb2NrZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IFtibG9ja2VyS2V5LCBzZXRCbG9ja2VyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICBsZXQgYmxvY2tlckZ1bmN0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soYXJnID0+IHtcbiAgICBpZiAodHlwZW9mIHNob3VsZEJsb2NrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiAhIXNob3VsZEJsb2NrO1xuICAgIH1cbiAgICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSB7XG4gICAgICByZXR1cm4gc2hvdWxkQmxvY2soYXJnKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGV5IHByb3ZpZGVkIHVzIGEgZnVuY3Rpb24gYW5kIHdlJ3ZlIGdvdCBhbiBhY3RpdmUgYmFzZW5hbWUsIHN0cmlwXG4gICAgLy8gaXQgZnJvbSB0aGUgbG9jYXRpb25zIHdlIGV4cG9zZSB0byB0aGUgdXNlciB0byBtYXRjaCB0aGUgYmVoYXZpb3Igb2ZcbiAgICAvLyB1c2VMb2NhdGlvblxuICAgIGxldCB7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSA9IGFyZztcbiAgICByZXR1cm4gc2hvdWxkQmxvY2soe1xuICAgICAgY3VycmVudExvY2F0aW9uOiBfZXh0ZW5kcyh7fSwgY3VycmVudExvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksXG4gICAgICBuZXh0TG9jYXRpb246IF9leHRlbmRzKHt9LCBuZXh0TG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUobmV4dExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbmV4dExvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSxcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KTtcbiAgfSwgW2Jhc2VuYW1lLCBzaG91bGRCbG9ja10pO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGlzIGluIGNoYXJnZSBvZiBibG9ja2VyIGtleSBhc3NpZ25tZW50IGFuZCBkZWxldGlvbiAod2hpY2ggaXNcbiAgLy8gdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBrZXkpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGtleSA9IFN0cmluZygrK2Jsb2NrZXJJZCk7XG4gICAgc2V0QmxvY2tlcktleShrZXkpO1xuICAgIHJldHVybiAoKSA9PiByb3V0ZXIuZGVsZXRlQmxvY2tlcihrZXkpO1xuICB9LCBbcm91dGVyXSk7XG5cbiAgLy8gVGhpcyBlZmZlY3QgaGFuZGxlcyBhc3NpZ25pbmcgdGhlIGJsb2NrZXJGdW5jdGlvbi4gIFRoaXMgaXMgdG8gaGFuZGxlXG4gIC8vIHVuc3RhYmxlIGJsb2NrZXIgZnVuY3Rpb24gaWRlbnRpdGllcywgYW5kIGhhcHBlbnMgb25seSBhZnRlciB0aGUgcHJpb3JcbiAgLy8gZWZmZWN0IHNvIHdlIGRvbid0IGdldCBhbiBvcnBoYW5lZCBibG9ja2VyRnVuY3Rpb24gaW4gdGhlIHJvdXRlciB3aXRoIGFcbiAgLy8ga2V5IG9mIFwiXCIuICBVbnRpbCB0aGVuIHdlIGp1c3QgaGF2ZSB0aGUgSURMRV9CTE9DS0VSLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyS2V5ICE9PSBcIlwiKSB7XG4gICAgICByb3V0ZXIuZ2V0QmxvY2tlcihibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb24pO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uXSk7XG5cbiAgLy8gUHJlZmVyIHRoZSBibG9ja2VyIGZyb20gYHN0YXRlYCBub3QgYHJvdXRlci5zdGF0ZWAgc2luY2UgRGF0YVJvdXRlckNvbnRleHRcbiAgLy8gaXMgbWVtb2l6ZWQgc28gdGhpcyBlbnN1cmVzIHdlIHVwZGF0ZSBvbiBibG9ja2VyIHN0YXRlIHVwZGF0ZXNcbiAgcmV0dXJuIGJsb2NrZXJLZXkgJiYgc3RhdGUuYmxvY2tlcnMuaGFzKGJsb2NrZXJLZXkpID8gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpIDogSURMRV9CTE9DS0VSO1xufVxuXG4vKipcbiAqIFN0YWJsZSB2ZXJzaW9uIG9mIHVzZU5hdmlnYXRlIHRoYXQgaXMgdXNlZCB3aGVuIHdlIGFyZSBpbiB0aGUgY29udGV4dCBvZlxuICogYSBSb3V0ZXJQcm92aWRlci5cbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGVTdGFibGUoKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VOYXZpZ2F0ZVN0YWJsZSk7XG4gIGxldCBpZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgbmF2aWdhdGVFZmZlY3RXYXJuaW5nKSA6IHZvaWQgMDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaGVyZSBzaW5jZSBpZiB0aGlzIGhhcHBlbnMgb24gZmlyc3QgcmVuZGVyIHRoZSBuYXZpZ2F0ZVxuICAgIC8vIGlzIHVzZWxlc3MgYmVjYXVzZSB3ZSBoYXZlbid0IHdpcmVkIHVwIG91ciByb3V0ZXIgc3Vic2NyaWJlciB5ZXRcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKHRvLCBfZXh0ZW5kcyh7XG4gICAgICAgIGZyb21Sb3V0ZUlkOiBpZFxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgaWRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgYWxyZWFkeVdhcm5lZCA9IHt9O1xuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgbWVzc2FnZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5cbi8qKlxuICogR2l2ZW4gYSBSZW1peCBSb3V0ZXIgaW5zdGFuY2UsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgVUlcbiAqL1xuZnVuY3Rpb24gUm91dGVyUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgIGZhbGxiYWNrRWxlbWVudCxcbiAgICByb3V0ZXIsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmO1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUocm91dGVyLnN0YXRlKTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIGlmICh2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCkge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgICB9XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuXG4gIC8vIE5lZWQgdG8gdXNlIGEgbGF5b3V0IGVmZmVjdCBoZXJlIHNvIHdlIGFyZSBzdWJzY3JpYmVkIGVhcmx5IGVub3VnaCB0b1xuICAvLyBwaWNrIHVwIG9uIGFueSByZW5kZXItZHJpdmVuIHJlZGlyZWN0cy9uYXZpZ2F0aW9ucyAodXNlRWZmZWN0LzxOYXZpZ2F0ZT4pXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiByb3V0ZXIuc3Vic2NyaWJlKHNldFN0YXRlKSwgW3JvdXRlciwgc2V0U3RhdGVdKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcm91dGVyLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IGZhbHNlLFxuICAgIGJhc2VuYW1lXG4gIH0pLCBbcm91dGVyLCBuYXZpZ2F0b3IsIGJhc2VuYW1lXSk7XG5cbiAgLy8gVGhlIGZyYWdtZW50IGFuZCB7bnVsbH0gaGVyZSBhcmUgaW1wb3J0YW50ISAgV2UgbmVlZCB0aGVtIHRvIGtlZXAgUmVhY3QgMTgnc1xuICAvLyB1c2VJZCBoYXBweSB3aGVuIHdlIGFyZSBzZXJ2ZXItcmVuZGVyaW5nIHNpbmNlIHdlIG1heSBoYXZlIGEgPHNjcmlwdD4gaGVyZVxuICAvLyBjb250YWluaW5nIHRoZSBoeWRyYXRlZCBzZXJ2ZXItc2lkZSBzdGF0aWNDb250ZXh0IChmcm9tIFN0YXRpY1JvdXRlclByb3ZpZGVyKS5cbiAgLy8gdXNlSWQgcmVsaWVzIG9uIHRoZSBjb21wb25lbnQgdHJlZSBzdHJ1Y3R1cmUgdG8gZ2VuZXJhdGUgZGV0ZXJtaW5pc3RpYyBpZCdzXG4gIC8vIHNvIHdlIG5lZWQgdG8gZW5zdXJlIGl0IHJlbWFpbnMgdGhlIHNhbWUgb24gdGhlIGNsaWVudCBldmVuIHRob3VnaFxuICAvLyB3ZSBkb24ndCBuZWVkIHRoZSA8c2NyaXB0PiB0YWdcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBkYXRhUm91dGVyQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmhpc3RvcnlBY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBuYXZpZ2F0b3JcbiAgfSwgc3RhdGUuaW5pdGlhbGl6ZWQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVzLCB7XG4gICAgcm91dGVzOiByb3V0ZXIucm91dGVzLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KSA6IGZhbGxiYWNrRWxlbWVudCkpKSwgbnVsbCk7XG59XG5mdW5jdGlvbiBEYXRhUm91dGVzKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgcm91dGVzLFxuICAgIHN0YXRlXG4gIH0gPSBfcmVmMjtcbiAgcmV0dXJuIHVzZVJvdXRlc0ltcGwocm91dGVzLCB1bmRlZmluZWQsIHN0YXRlKTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjM7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmNDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCI8TmF2aWdhdGU+IG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKCFSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuXG4gIC8vIFJlc29sdmUgdGhlIHBhdGggb3V0c2lkZSBvZiB0aGUgZWZmZWN0IHNvIHRoYXQgd2hlbiBlZmZlY3RzIHJ1biB0d2ljZSBpblxuICAvLyBTdHJpY3RNb2RlIHRoZXkgbmF2aWdhdGUgdG8gdGhlIHNhbWUgcGxhY2VcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKTtcbiAgbGV0IGpzb25QYXRoID0gSlNPTi5zdHJpbmdpZnkocGF0aCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBuYXZpZ2F0ZShKU09OLnBhcnNlKGpzb25QYXRoKSwge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSksIFtuYXZpZ2F0ZSwganNvblBhdGgsIHJlbGF0aXZlLCByZXBsYWNlLCBzdGF0ZV0pO1xuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA7XG59XG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgYDxSb3V0ZXI+YCBkaXJlY3RseS4gSW5zdGVhZCwgeW91J2xsIHJlbmRlciBhXG4gKiByb3V0ZXIgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQgc3VjaCBhcyBhIGA8QnJvd3NlclJvdXRlcj5gXG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSBgPFN0YXRpY1JvdXRlcj5gIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmNSkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlXG4gIH0gPSBfcmVmNTtcbiAgISF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCByZW5kZXIgYSA8Um91dGVyPiBpbnNpZGUgYW5vdGhlciA8Um91dGVyPi5cIiArIFwiIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIFByZXNlcnZlIHRyYWlsaW5nIHNsYXNoZXMgb24gYmFzZW5hbWUsIHNvIHdlIGNhbiBsZXQgdGhlIHVzZXIgY29udHJvbFxuICAvLyB0aGUgZW5mb3JjZW1lbnQgb2YgdHJhaWxpbmcgc2xhc2hlcyB0aHJvdWdob3V0IHRoZSBhcHBcbiAgbGV0IGJhc2VuYW1lID0gYmFzZW5hbWVQcm9wLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcFxuICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIixcbiAgICBzdGF0ZSA9IG51bGwsXG4gICAga2V5ID0gXCJkZWZhdWx0XCJcbiAgfSA9IGxvY2F0aW9uUHJvcDtcbiAgbGV0IGxvY2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgcGF0aG5hbWU6IHRyYWlsaW5nUGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCxcbiAgICAgICAgaGFzaCxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGtleVxuICAgICAgfSxcbiAgICAgIG5hdmlnYXRpb25UeXBlXG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5LCBuYXZpZ2F0aW9uVHlwZV0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhsb2NhdGlvbkNvbnRleHQgIT0gbnVsbCwgXCI8Um91dGVyIGJhc2VuYW1lPVxcXCJcIiArIGJhc2VuYW1lICsgXCJcXFwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIFwiICsgKFwiXFxcIlwiICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoICsgXCJcXFwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgXCIpICsgXCJiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5cIikgOiB2b2lkIDA7XG4gIGlmIChsb2NhdGlvbkNvbnRleHQgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IGxvY2F0aW9uQ29udGV4dFxuICB9KSk7XG59XG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBhIG5lc3RlZCB0cmVlIG9mIGA8Um91dGU+YCBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaFxuICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlc1xuICovXG5mdW5jdGlvbiBSb3V0ZXMoX3JlZjYpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBsb2NhdGlvblxuICB9ID0gX3JlZjY7XG4gIHJldHVybiB1c2VSb3V0ZXMoY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuKSwgbG9jYXRpb24pO1xufVxuLyoqXG4gKiBDb21wb25lbnQgdG8gdXNlIGZvciByZW5kZXJpbmcgbGF6aWx5IGxvYWRlZCBkYXRhIGZyb20gcmV0dXJuaW5nIGRlZmVyKClcbiAqIGluIGEgbG9hZGVyIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIEF3YWl0KF9yZWY3KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgZXJyb3JFbGVtZW50LFxuICAgIHJlc29sdmVcbiAgfSA9IF9yZWY3O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRFcnJvckJvdW5kYXJ5LCB7XG4gICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICBlcnJvckVsZW1lbnQ6IGVycm9yRWxlbWVudFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZXNvbHZlQXdhaXQsIG51bGwsIGNoaWxkcmVuKSk7XG59XG52YXIgQXdhaXRSZW5kZXJTdGF0dXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKEF3YWl0UmVuZGVyU3RhdHVzKSB7XG4gIEF3YWl0UmVuZGVyU3RhdHVzW0F3YWl0UmVuZGVyU3RhdHVzW1wicGVuZGluZ1wiXSA9IDBdID0gXCJwZW5kaW5nXCI7XG4gIEF3YWl0UmVuZGVyU3RhdHVzW0F3YWl0UmVuZGVyU3RhdHVzW1wic3VjY2Vzc1wiXSA9IDFdID0gXCJzdWNjZXNzXCI7XG4gIEF3YWl0UmVuZGVyU3RhdHVzW0F3YWl0UmVuZGVyU3RhdHVzW1wiZXJyb3JcIl0gPSAyXSA9IFwiZXJyb3JcIjtcbiAgcmV0dXJuIEF3YWl0UmVuZGVyU3RhdHVzO1xufShBd2FpdFJlbmRlclN0YXR1cyB8fCB7fSk7XG5jb25zdCBuZXZlclNldHRsZWRQcm9taXNlID0gbmV3IFByb21pc2UoKCkgPT4ge30pO1xuY2xhc3MgQXdhaXRFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yXG4gICAgfTtcbiAgfVxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIjxBd2FpdD4gY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgbGV0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZXJyb3JFbGVtZW50LFxuICAgICAgcmVzb2x2ZVxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCBwcm9taXNlID0gbnVsbDtcbiAgICBsZXQgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICBpZiAoIShyZXNvbHZlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIC8vIERpZG4ndCBnZXQgYSBwcm9taXNlIC0gcHJvdmlkZSBhcyBhIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3M7XG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLmVycm9yKSB7XG4gICAgICAvLyBDYXVnaHQgYSByZW5kZXIgZXJyb3IsIHByb3ZpZGUgaXQgYXMgYSByZWplY3RlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcjtcbiAgICAgIGxldCByZW5kZXJFcnJvciA9IHRoaXMuc3RhdGUuZXJyb3I7XG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QoKS5jYXRjaCgoKSA9PiB7fSk7IC8vIEF2b2lkIHVuaGFuZGxlZCByZWplY3Rpb24gd2FybmluZ3NcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gcmVuZGVyRXJyb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZS5fdHJhY2tlZCkge1xuICAgICAgLy8gQWxyZWFkeSB0cmFja2VkIHByb21pc2UgLSBjaGVjayBjb250ZW50c1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICBzdGF0dXMgPSBwcm9taXNlLl9lcnJvciAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgOiBwcm9taXNlLl9kYXRhICE9PSB1bmRlZmluZWQgPyBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzIDogQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmF3ICh1bnRyYWNrZWQpIHByb21pc2UgLSB0cmFjayBpdFxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSByZXNvbHZlLnRoZW4oZGF0YSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgICAgfSksIGVycm9yID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgcHJvbWlzZS5fZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgLy8gRnJlZXplIHRoZSBVSSBieSB0aHJvd2luZyBhIG5ldmVyIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHRocm93IG5ldmVyU2V0dGxlZFByb21pc2U7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmICFlcnJvckVsZW1lbnQpIHtcbiAgICAgIC8vIE5vIGVycm9yRWxlbWVudCwgdGhyb3cgdG8gdGhlIG5lYXJlc3Qgcm91dGUtbGV2ZWwgZXJyb3IgYm91bmRhcnlcbiAgICAgIHRocm93IHByb21pc2UuX2Vycm9yO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcikge1xuICAgICAgLy8gUmVuZGVyIHZpYSBvdXIgZXJyb3JFbGVtZW50XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogZXJyb3JFbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2Vzcykge1xuICAgICAgLy8gUmVuZGVyIGNoaWxkcmVuIHdpdGggcmVzb2x2ZWQgdmFsdWVcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVGhyb3cgdG8gdGhlIHN1c3BlbnNlIGJvdW5kYXJ5XG4gICAgdGhyb3cgcHJvbWlzZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBJbmRpcmVjdGlvbiB0byBsZXZlcmFnZSB1c2VBc3luY1ZhbHVlIGZvciBhIHJlbmRlci1wcm9wIEFQSSBvbiBgPEF3YWl0PmBcbiAqL1xuZnVuY3Rpb24gUmVzb2x2ZUF3YWl0KF9yZWY4KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY4O1xuICBsZXQgZGF0YSA9IHVzZUFzeW5jVmFsdWUoKTtcbiAgbGV0IHRvUmVuZGVyID0gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbihkYXRhKSA6IGNoaWxkcmVuO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIHRvUmVuZGVyKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvY3JlYXRlLXJvdXRlcy1mcm9tLWNoaWxkcmVuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50UGF0aCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGxldCByb3V0ZXMgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAvLyBJZ25vcmUgbm9uLWVsZW1lbnRzLiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gbW9yZSBlYXNpbHkgaW5saW5lXG4gICAgICAvLyBjb25kaXRpb25hbHMgaW4gdGhlaXIgcm91dGUgY29uZmlnLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFJlYWN0LkZyYWdtZW50KSB7XG4gICAgICAvLyBUcmFuc3BhcmVudGx5IHN1cHBvcnQgUmVhY3QuRnJhZ21lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgIHJvdXRlcy5wdXNoLmFwcGx5KHJvdXRlcywgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICEoZWxlbWVudC50eXBlID09PSBSb3V0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIltcIiArICh0eXBlb2YgZWxlbWVudC50eXBlID09PSBcInN0cmluZ1wiID8gZWxlbWVudC50eXBlIDogZWxlbWVudC50eXBlLm5hbWUpICsgXCJdIGlzIG5vdCBhIDxSb3V0ZT4gY29tcG9uZW50LiBBbGwgY29tcG9uZW50IGNoaWxkcmVuIG9mIDxSb3V0ZXM+IG11c3QgYmUgYSA8Um91dGU+IG9yIDxSZWFjdC5GcmFnbWVudD5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKCFlbGVtZW50LnByb3BzLmluZGV4IHx8ICFlbGVtZW50LnByb3BzLmNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQW4gaW5kZXggcm91dGUgY2Fubm90IGhhdmUgY2hpbGQgcm91dGVzLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGlkOiBlbGVtZW50LnByb3BzLmlkIHx8IHRyZWVQYXRoLmpvaW4oXCItXCIpLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgQ29tcG9uZW50OiBlbGVtZW50LnByb3BzLkNvbXBvbmVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoLFxuICAgICAgbG9hZGVyOiBlbGVtZW50LnByb3BzLmxvYWRlcixcbiAgICAgIGFjdGlvbjogZWxlbWVudC5wcm9wcy5hY3Rpb24sXG4gICAgICBlcnJvckVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50LFxuICAgICAgRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5LFxuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHwgZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQgIT0gbnVsbCxcbiAgICAgIHNob3VsZFJldmFsaWRhdGU6IGVsZW1lbnQucHJvcHMuc2hvdWxkUmV2YWxpZGF0ZSxcbiAgICAgIGhhbmRsZTogZWxlbWVudC5wcm9wcy5oYW5kbGUsXG4gICAgICBsYXp5OiBlbGVtZW50LnByb3BzLmxhenlcbiAgICB9O1xuICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCB0cmVlUGF0aCk7XG4gICAgfVxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IG9mIGBtYXRjaFJvdXRlcygpYCBpbnRvIGEgUmVhY3QgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cblxuZnVuY3Rpb24gbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSB7XG4gIGxldCB1cGRhdGVzID0ge1xuICAgIC8vIE5vdGU6IHRoaXMgY2hlY2sgYWxzbyBvY2N1cnMgaW4gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIHNvIHVwZGF0ZVxuICAgIC8vIHRoZXJlIGlmIHlvdSBjaGFuZ2UgdGhpcyAtLSBwbGVhc2UgYW5kIHRoYW5rIHlvdSFcbiAgICBoYXNFcnJvckJvdW5kYXJ5OiByb3V0ZS5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHwgcm91dGUuZXJyb3JFbGVtZW50ICE9IG51bGxcbiAgfTtcbiAgaWYgKHJvdXRlLkNvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChyb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgQ29tcG9uZW50YCBhbmQgYGVsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArIFwiYENvbXBvbmVudGAgd2lsbCBiZSB1c2VkLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih1cGRhdGVzLCB7XG4gICAgICBlbGVtZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5Db21wb25lbnQpLFxuICAgICAgQ29tcG9uZW50OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICBpZiAocm91dGUuRXJyb3JCb3VuZGFyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChyb3V0ZS5lcnJvckVsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBFcnJvckJvdW5kYXJ5YCBhbmQgYGVycm9yRWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgRXJyb3JCb3VuZGFyeWAgd2lsbCBiZSB1c2VkLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih1cGRhdGVzLCB7XG4gICAgICBlcnJvckVsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkVycm9yQm91bmRhcnkpLFxuICAgICAgRXJyb3JCb3VuZGFyeTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZXM7XG59XG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe30sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLCB7XG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWVcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmluaXRpYWxJbmRleFxuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cblxuZXhwb3J0IHsgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVyUHJvdmlkZXIsIFJvdXRlcywgRGF0YVJvdXRlckNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBEYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBMb2NhdGlvbkNvbnRleHQgYXMgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgTmF2aWdhdGlvbkNvbnRleHQgYXMgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBSb3V0ZUNvbnRleHQgYXMgVU5TQUZFX1JvdXRlQ29udGV4dCwgbWFwUm91dGVQcm9wZXJ0aWVzIGFzIFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsIHVzZVJvdXRlSWQgYXMgVU5TQUZFX3VzZVJvdXRlSWQsIHVzZVJvdXRlc0ltcGwgYXMgVU5TQUZFX3VzZVJvdXRlc0ltcGwsIGNyZWF0ZU1lbW9yeVJvdXRlciwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gYXMgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCByZW5kZXJNYXRjaGVzLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VCbG9ja2VyLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgRE9NIHY2LjIwLjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFJvdXRlciwgVU5TQUZFX3VzZVJvdXRlc0ltcGwsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgdXNlSHJlZiwgdXNlUmVzb2x2ZWRQYXRoLCB1c2VMb2NhdGlvbiwgdXNlTmF2aWdhdGUsIGNyZWF0ZVBhdGgsIFVOU0FGRV91c2VSb3V0ZUlkLCBVTlNBRkVfUm91dGVDb250ZXh0LCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0aW9uLCB1c2VCbG9ja2VyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IEFib3J0ZWREZWZlcnJlZEVycm9yLCBBd2FpdCwgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgTmF2aWdhdGlvblR5cGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIFVOU0FGRV91c2VSb3V0ZUlkLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUJsb2NrZXIsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBzdHJpcEJhc2VuYW1lLCBVTlNBRkVfd2FybmluZywgY3JlYXRlUm91dGVyLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCwgVU5TQUZFX2ludmFyaWFudCwgam9pblBhdGhzLCBJRExFX0ZFVENIRVIsIG1hdGNoUGF0aCB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBkZWZhdWx0TWV0aG9kID0gXCJnZXRcIjtcbmNvbnN0IGRlZmF1bHRFbmNUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJidXR0b25cIjtcbn1cbmZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDAgJiYgKFxuICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiZcbiAgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cbmZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uU2VhcmNoLCBkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb25TZWFyY2gpO1xuICBpZiAoZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICAgIC8vIFVzZSBgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKC4uLilgIGhlcmUgaW5zdGVhZCBvZiBpdGVyYXRpbmcgb2ZcbiAgICAvLyBgZGVmYXVsdFNlYXJjaFBhcmFtcy5rZXlzKClgIHRvIHdvcmstYXJvdW5kIGEgYnVnIGluIEZpcmVmb3ggcmVsYXRlZCB0b1xuICAgIC8vIHdlYiBleHRlbnNpb25zLiBSZWxldmFudCBCdWd6aWxsYSB0aWNrZXRzOlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MTQ2MDJcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDIzOTg0XG4gICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmICghc2VhcmNoUGFyYW1zLmhhcyhrZXkpKSB7XG4gICAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbi8vIE9uZS10aW1lIGNoZWNrIGZvciBzdWJtaXR0ZXIgc3VwcG9ydFxubGV0IF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gbnVsbDtcbmZ1bmN0aW9uIGlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSB7XG4gIGlmIChfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9PT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRm9ybURhdGEoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGlmIEZvcm1EYXRhIHN1cHBvcnRzIHRoZSBzdWJtaXR0ZXIgcGFyYW1ldGVyLCB0aGlzIHdpbGwgdGhyb3dcbiAgICAgIDApO1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlcjtcbn1cbmNvbnN0IHN1cHBvcnRlZEZvcm1FbmNUeXBlcyA9IG5ldyBTZXQoW1wiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLCBcInRleHQvcGxhaW5cIl0pO1xuZnVuY3Rpb24gZ2V0Rm9ybUVuY1R5cGUoZW5jVHlwZSkge1xuICBpZiAoZW5jVHlwZSAhPSBudWxsICYmICFzdXBwb3J0ZWRGb3JtRW5jVHlwZXMuaGFzKGVuY1R5cGUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiXFxcIlwiICsgZW5jVHlwZSArIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBgZW5jVHlwZWAgZm9yIGA8Rm9ybT5gL2A8ZmV0Y2hlci5Gb3JtPmAgXCIgKyAoXCJhbmQgd2lsbCBkZWZhdWx0IHRvIFxcXCJcIiArIGRlZmF1bHRFbmNUeXBlICsgXCJcXFwiXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZW5jVHlwZTtcbn1cbmZ1bmN0aW9uIGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKSB7XG4gIGxldCBtZXRob2Q7XG4gIGxldCBhY3Rpb247XG4gIGxldCBlbmNUeXBlO1xuICBsZXQgZm9ybURhdGE7XG4gIGxldCBib2R5O1xuICBpZiAoaXNGb3JtRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBhY3Rpb24gPSBhdHRyID8gc3RyaXBCYXNlbmFtZShhdHRyLCBiYXNlbmFtZSkgOiBudWxsO1xuICAgIG1ldGhvZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRhcmdldCk7XG4gIH0gZWxzZSBpZiAoaXNCdXR0b25FbGVtZW50KHRhcmdldCkgfHwgaXNJbnB1dEVsZW1lbnQodGFyZ2V0KSAmJiAodGFyZ2V0LnR5cGUgPT09IFwic3VibWl0XCIgfHwgdGFyZ2V0LnR5cGUgPT09IFwiaW1hZ2VcIikpIHtcbiAgICBsZXQgZm9ybSA9IHRhcmdldC5mb3JtO1xuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIj4gd2l0aG91dCBhIDxmb3JtPlwiKTtcbiAgICB9XG4gICAgLy8gPGJ1dHRvbj4vPGlucHV0IHR5cGU9XCJzdWJtaXRcIj4gbWF5IG92ZXJyaWRlIGF0dHJpYnV0ZXMgb2YgPGZvcm0+XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1hY3Rpb25cIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPSBnZXRGb3JtRW5jVHlwZSh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikpIHx8IGdldEZvcm1FbmNUeXBlKGZvcm0uZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSkgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgLy8gQnVpbGQgYSBGb3JtRGF0YSBvYmplY3QgcG9wdWxhdGVkIGZyb20gYSBmb3JtIGFuZCBzdWJtaXR0ZXJcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtLCB0YXJnZXQpO1xuICAgIC8vIElmIHRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIGBGb3JtRGF0YShlbCwgc3VibWl0dGVyKWAgZm9ybWF0LFxuICAgIC8vIHRoZW4gdGFjayBvbiB0aGUgc3VibWl0dGVyIHZhbHVlIGF0IHRoZSBlbmQuICBUaGlzIGlzIGEgbGlnaHR3ZWlnaHRcbiAgICAvLyBzb2x1dGlvbiB0aGF0IGlzIG5vdCAxMDAlIHNwZWMgY29tcGxpYW50LiAgRm9yIGNvbXBsZXRlIHN1cHBvcnQgaW4gb2xkZXJcbiAgICAvLyBicm93c2VycywgY29uc2lkZXIgdXNpbmcgdGhlIGBmb3JtZGF0YS1zdWJtaXR0ZXItcG9seWZpbGxgIHBhY2thZ2VcbiAgICBpZiAoIWlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgbGV0IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH0gPSB0YXJnZXQ7XG4gICAgICBpZiAodHlwZSA9PT0gXCJpbWFnZVwiKSB7XG4gICAgICAgIGxldCBwcmVmaXggPSBuYW1lID8gbmFtZSArIFwiLlwiIDogXCJcIjtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKHByZWZpeCArIFwieFwiLCBcIjBcIik7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInlcIiwgXCIwXCIpO1xuICAgICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgZWxlbWVudCB0aGF0IGlzIG5vdCA8Zm9ybT4sIDxidXR0b24+LCBvciBcIiArIFwiPGlucHV0IHR5cGU9XFxcInN1Ym1pdHxpbWFnZVxcXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gbnVsbDtcbiAgICBlbmNUeXBlID0gZGVmYXVsdEVuY1R5cGU7XG4gICAgYm9keSA9IHRhcmdldDtcbiAgfVxuICAvLyBTZW5kIGJvZHkgZm9yIDxGb3JtIGVuY1R5cGU9XCJ0ZXh0L3BsYWluXCIgc28gd2UgZW5jb2RlIGl0IGludG8gdGV4dFxuICBpZiAoZm9ybURhdGEgJiYgZW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICBib2R5ID0gZm9ybURhdGE7XG4gICAgZm9ybURhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhY3Rpb24sXG4gICAgbWV0aG9kOiBtZXRob2QudG9Mb3dlckNhc2UoKSxcbiAgICBlbmNUeXBlLFxuICAgIGZvcm1EYXRhLFxuICAgIGJvZHlcbiAgfTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbGF0aXZlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiLCBcInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiYXJpYS1jdXJyZW50XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImVuZFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvblwiLCBcImNoaWxkcmVuXCJdLFxuICBfZXhjbHVkZWQzID0gW1wiZmV0Y2hlcktleVwiLCBcIm5hdmlnYXRlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJtZXRob2RcIiwgXCJhY3Rpb25cIiwgXCJvblN1Ym1pdFwiLCBcInJlbGF0aXZlXCIsIFwicHJldmVudFNjcm9sbFJlc2V0XCIsIFwidW5zdGFibGVfdmlld1RyYW5zaXRpb25cIl07XG5mdW5jdGlvbiBjcmVhdGVCcm93c2VyUm91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IF9leHRlbmRzKHt9LCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZ1dHVyZSwge1xuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlXG4gICAgfSksXG4gICAgaGlzdG9yeTogY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEpIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXM6IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICB9KS5pbml0aWFsaXplKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVIYXNoUm91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IF9leHRlbmRzKHt9LCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZ1dHVyZSwge1xuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlXG4gICAgfSksXG4gICAgaGlzdG9yeTogY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEpIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXM6IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICB9KS5pbml0aWFsaXplKCk7XG59XG5mdW5jdGlvbiBwYXJzZUh5ZHJhdGlvbkRhdGEoKSB7XG4gIHZhciBfd2luZG93O1xuICBsZXQgc3RhdGUgPSAoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cuX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhO1xuICBpZiAoc3RhdGUgJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgIGVycm9yczogZGVzZXJpYWxpemVFcnJvcnMoc3RhdGUuZXJyb3JzKVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIGRlc2VyaWFsaXplRXJyb3JzKGVycm9ycykge1xuICBpZiAoIWVycm9ycykgcmV0dXJuIG51bGw7XG4gIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoZXJyb3JzKTtcbiAgbGV0IHNlcmlhbGl6ZWQgPSB7fTtcbiAgZm9yIChsZXQgW2tleSwgdmFsXSBvZiBlbnRyaWVzKSB7XG4gICAgLy8gSGV5IHlvdSEgIElmIHlvdSBjaGFuZ2UgdGhpcywgcGxlYXNlIGNoYW5nZSB0aGUgY29ycmVzcG9uZGluZyBsb2dpYyBpblxuICAgIC8vIHNlcmlhbGl6ZUVycm9ycyBpbiByZWFjdC1yb3V0ZXItZG9tL3NlcnZlci50c3ggOilcbiAgICBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiUm91dGVFcnJvclJlc3BvbnNlXCIpIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IG5ldyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwodmFsLnN0YXR1cywgdmFsLnN0YXR1c1RleHQsIHZhbC5kYXRhLCB2YWwuaW50ZXJuYWwgPT09IHRydWUpO1xuICAgIH0gZWxzZSBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiRXJyb3JcIikge1xuICAgICAgLy8gQXR0ZW1wdCB0byByZWNvbnN0cnVjdCB0aGUgcmlnaHQgdHlwZSBvZiBFcnJvciAoaS5lLiwgUmVmZXJlbmNlRXJyb3IpXG4gICAgICBpZiAodmFsLl9fc3ViVHlwZSkge1xuICAgICAgICBsZXQgRXJyb3JDb25zdHJ1Y3RvciA9IHdpbmRvd1t2YWwuX19zdWJUeXBlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvckNvbnN0cnVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yQ29uc3RydWN0b3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBuby1vcCAtIGZhbGwgdGhyb3VnaCBhbmQgY3JlYXRlIGEgbm9ybWFsIEVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VyaWFsaXplZFtrZXldID09IG51bGwpIHtcbiAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbmNvbnN0IFZpZXdUcmFuc2l0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFZpZXdUcmFuc2l0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiVmlld1RyYW5zaXRpb25cIjtcbn1cbmNvbnN0IEZldGNoZXJzQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG5ldyBNYXAoKSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZldGNoZXJzQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRmV0Y2hlcnNcIjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBDb21wb25lbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5jb25zdCBGTFVTSF9TWU5DID0gXCJmbHVzaFN5bmNcIjtcbmNvbnN0IGZsdXNoU3luY0ltcGwgPSBSZWFjdERPTVtGTFVTSF9TWU5DXTtcbmZ1bmN0aW9uIHN0YXJ0VHJhbnNpdGlvblNhZmUoY2IpIHtcbiAgaWYgKHN0YXJ0VHJhbnNpdGlvbkltcGwpIHtcbiAgICBzdGFydFRyYW5zaXRpb25JbXBsKGNiKTtcbiAgfSBlbHNlIHtcbiAgICBjYigpO1xuICB9XG59XG5mdW5jdGlvbiBmbHVzaFN5bmNTYWZlKGNiKSB7XG4gIGlmIChmbHVzaFN5bmNJbXBsKSB7XG4gICAgZmx1c2hTeW5jSW1wbChjYik7XG4gIH0gZWxzZSB7XG4gICAgY2IoKTtcbiAgfVxufVxuY2xhc3MgRGVmZXJyZWQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucmVzb2x2ZSA9IHZhbHVlID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJyZXNvbHZlZFwiO1xuICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5yZWplY3QgPSByZWFzb24gPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgdGhpcy5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBSZW1peCBSb3V0ZXIgaW5zdGFuY2UsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgVUlcbiAqL1xuZnVuY3Rpb24gUm91dGVyUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgIGZhbGxiYWNrRWxlbWVudCxcbiAgICByb3V0ZXIsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmO1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUocm91dGVyLnN0YXRlKTtcbiAgbGV0IFtwZW5kaW5nU3RhdGUsIHNldFBlbmRpbmdTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW3Z0Q29udGV4dCwgc2V0VnRDb250ZXh0XSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG4gIH0pO1xuICBsZXQgW3JlbmRlckRmZCwgc2V0UmVuZGVyRGZkXSA9IFJlYWN0LnVzZVN0YXRlKCk7XG4gIGxldCBbdHJhbnNpdGlvbiwgc2V0VHJhbnNpdGlvbl0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW2ludGVycnVwdGlvbiwgc2V0SW50ZXJydXB0aW9uXSA9IFJlYWN0LnVzZVN0YXRlKCk7XG4gIGxldCBmZXRjaGVyRGF0YSA9IFJlYWN0LnVzZVJlZihuZXcgTWFwKCkpO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgb3B0SW5TdGFydFRyYW5zaXRpb24gPSBSZWFjdC51c2VDYWxsYmFjayhjYiA9PiB7XG4gICAgaWYgKHY3X3N0YXJ0VHJhbnNpdGlvbikge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uU2FmZShjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9LCBbdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKChuZXdTdGF0ZSwgX3JlZjIpID0+IHtcbiAgICBsZXQge1xuICAgICAgZGVsZXRlZEZldGNoZXJzLFxuICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBmbHVzaFN5bmMsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbk9wdHM6IHZpZXdUcmFuc2l0aW9uT3B0c1xuICAgIH0gPSBfcmVmMjtcbiAgICBkZWxldGVkRmV0Y2hlcnMuZm9yRWFjaChrZXkgPT4gZmV0Y2hlckRhdGEuY3VycmVudC5kZWxldGUoa2V5KSk7XG4gICAgbmV3U3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoZmV0Y2hlciwga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hlci5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZmV0Y2hlckRhdGEuY3VycmVudC5zZXQoa2V5LCBmZXRjaGVyLmRhdGEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBpc1ZpZXdUcmFuc2l0aW9uVW5hdmFpbGFibGUgPSByb3V0ZXIud2luZG93ID09IG51bGwgfHwgdHlwZW9mIHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbiAhPT0gXCJmdW5jdGlvblwiO1xuICAgIC8vIElmIHRoaXMgaXNuJ3QgYSB2aWV3IHRyYW5zaXRpb24gb3IgaXQncyBub3QgYXZhaWxhYmxlIGluIHRoaXMgYnJvd3NlcixcbiAgICAvLyBqdXN0IHVwZGF0ZSBhbmQgYmUgZG9uZSB3aXRoIGl0XG4gICAgaWYgKCF2aWV3VHJhbnNpdGlvbk9wdHMgfHwgaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlKSB7XG4gICAgICBpZiAoZmx1c2hTeW5jKSB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRJblN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZmx1c2hTeW5jICsgc3RhcnRWaWV3VHJhbnNpdGlvblxuICAgIGlmIChmbHVzaFN5bmMpIHtcbiAgICAgIC8vIEZsdXNoIHRocm91Z2ggdGhlIGNvbnRleHQgdG8gbWFyayBET00gZWxlbWVudHMgYXMgdHJhbnNpdGlvbj1pbmdcbiAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4ge1xuICAgICAgICAvLyBDYW5jZWwgYW55IHBlbmRpbmcgdHJhbnNpdGlvbnNcbiAgICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgICByZW5kZXJEZmQgJiYgcmVuZGVyRGZkLnJlc29sdmUoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uLnNraXBUcmFuc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgICAgZmx1c2hTeW5jOiB0cnVlLFxuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5uZXh0TG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC8vIFVwZGF0ZSB0aGUgRE9NXG4gICAgICBsZXQgdCA9IHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbigoKSA9PiB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICB9KTtcbiAgICAgIC8vIENsZWFuIHVwIGFmdGVyIHRoZSBhbmltYXRpb24gY29tcGxldGVzXG4gICAgICB0LmZpbmlzaGVkLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHtcbiAgICAgICAgICBzZXRSZW5kZXJEZmQodW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uKHVuZGVmaW5lZCk7XG4gICAgICAgICAgc2V0UGVuZGluZ1N0YXRlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0VHJhbnNpdGlvbih0KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHN0YXJ0VHJhbnNpdGlvbiArIHN0YXJ0Vmlld1RyYW5zaXRpb25cbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgLy8gSW50ZXJydXB0aW5nIGFuIGluLXByb2dyZXNzIHRyYW5zaXRpb24sIGNhbmNlbCBhbmQgbGV0IGV2ZXJ5dGhpbmcgZmx1c2hcbiAgICAgIC8vIG91dCwgYW5kIHRoZW4ga2ljayBvZmYgYSBuZXcgdHJhbnNpdGlvbiBmcm9tIHRoZSBpbnRlcnJ1cHRpb24gc3RhdGVcbiAgICAgIHJlbmRlckRmZCAmJiByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgICAgdHJhbnNpdGlvbi5za2lwVHJhbnNpdGlvbigpO1xuICAgICAgc2V0SW50ZXJydXB0aW9uKHtcbiAgICAgICAgc3RhdGU6IG5ld1N0YXRlLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbXBsZXRlZCBuYXZpZ2F0aW9uIHVwZGF0ZSB3aXRoIG9wdGVkLWluIHZpZXcgdHJhbnNpdGlvbnMsIGxldCAnZXIgcmlwXG4gICAgICBzZXRQZW5kaW5nU3RhdGUobmV3U3RhdGUpO1xuICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICBmbHVzaFN5bmM6IGZhbHNlLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcm91dGVyLndpbmRvdywgdHJhbnNpdGlvbiwgcmVuZGVyRGZkLCBmZXRjaGVyRGF0YSwgb3B0SW5TdGFydFRyYW5zaXRpb25dKTtcbiAgLy8gTmVlZCB0byB1c2UgYSBsYXlvdXQgZWZmZWN0IGhlcmUgc28gd2UgYXJlIHN1YnNjcmliZWQgZWFybHkgZW5vdWdoIHRvXG4gIC8vIHBpY2sgdXAgb24gYW55IHJlbmRlci1kcml2ZW4gcmVkaXJlY3RzL25hdmlnYXRpb25zICh1c2VFZmZlY3QvPE5hdmlnYXRlPilcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHJvdXRlci5zdWJzY3JpYmUoc2V0U3RhdGUpLCBbcm91dGVyLCBzZXRTdGF0ZV0pO1xuICAvLyBXaGVuIHdlIHN0YXJ0IGEgdmlldyB0cmFuc2l0aW9uLCBjcmVhdGUgYSBEZWZlcnJlZCB3ZSBjYW4gdXNlIGZvciB0aGVcbiAgLy8gZXZlbnR1YWwgXCJjb21wbGV0ZWRcIiByZW5kZXJcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZyAmJiAhdnRDb250ZXh0LmZsdXNoU3luYykge1xuICAgICAgc2V0UmVuZGVyRGZkKG5ldyBEZWZlcnJlZCgpKTtcbiAgICB9XG4gIH0sIFt2dENvbnRleHRdKTtcbiAgLy8gT25jZSB0aGUgZGVmZXJyZWQgaXMgY3JlYXRlZCwga2ljayBvZmYgc3RhcnRWaWV3VHJhbnNpdGlvbigpIHRvIHVwZGF0ZSB0aGVcbiAgLy8gRE9NIGFuZCB0aGVuIHdhaXQgb24gdGhlIERlZmVycmVkIHRvIHJlc29sdmUgKGluZGljYXRpbmcgdGhlIERPTSB1cGRhdGUgaGFzXG4gIC8vIGhhcHBlbmVkKVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZW5kZXJEZmQgJiYgcGVuZGluZ1N0YXRlICYmIHJvdXRlci53aW5kb3cpIHtcbiAgICAgIGxldCBuZXdTdGF0ZSA9IHBlbmRpbmdTdGF0ZTtcbiAgICAgIGxldCByZW5kZXJQcm9taXNlID0gcmVuZGVyRGZkLnByb21pc2U7XG4gICAgICBsZXQgdHJhbnNpdGlvbiA9IHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgIG9wdEluU3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgICBhd2FpdCByZW5kZXJQcm9taXNlO1xuICAgICAgfSk7XG4gICAgICB0cmFuc2l0aW9uLmZpbmlzaGVkLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBzZXRSZW5kZXJEZmQodW5kZWZpbmVkKTtcbiAgICAgICAgc2V0VHJhbnNpdGlvbih1bmRlZmluZWQpO1xuICAgICAgICBzZXRQZW5kaW5nU3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBzZXRUcmFuc2l0aW9uKHRyYW5zaXRpb24pO1xuICAgIH1cbiAgfSwgW29wdEluU3RhcnRUcmFuc2l0aW9uLCBwZW5kaW5nU3RhdGUsIHJlbmRlckRmZCwgcm91dGVyLndpbmRvd10pO1xuICAvLyBXaGVuIHRoZSBuZXcgbG9jYXRpb24gZmluYWxseSByZW5kZXJzIGFuZCBpcyBjb21taXR0ZWQgdG8gdGhlIERPTSwgdGhpc1xuICAvLyBlZmZlY3Qgd2lsbCBydW4gdG8gcmVzb2x2ZSB0aGUgdHJhbnNpdGlvblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZW5kZXJEZmQgJiYgcGVuZGluZ1N0YXRlICYmIHN0YXRlLmxvY2F0aW9uLmtleSA9PT0gcGVuZGluZ1N0YXRlLmxvY2F0aW9uLmtleSkge1xuICAgICAgcmVuZGVyRGZkLnJlc29sdmUoKTtcbiAgICB9XG4gIH0sIFtyZW5kZXJEZmQsIHRyYW5zaXRpb24sIHN0YXRlLmxvY2F0aW9uLCBwZW5kaW5nU3RhdGVdKTtcbiAgLy8gSWYgd2UgZ2V0IGludGVycnVwdGVkIHdpdGggYSBuZXcgbmF2aWdhdGlvbiBkdXJpbmcgYSB0cmFuc2l0aW9uLCB3ZSBza2lwXG4gIC8vIHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgbGV0IGl0IGNsZWFudXAsIHRoZW4ga2ljayBpdCBvZmYgYWdhaW4gaGVyZVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghdnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZyAmJiBpbnRlcnJ1cHRpb24pIHtcbiAgICAgIHNldFBlbmRpbmdTdGF0ZShpbnRlcnJ1cHRpb24uc3RhdGUpO1xuICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICBmbHVzaFN5bmM6IGZhbHNlLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IGludGVycnVwdGlvbi5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogaW50ZXJydXB0aW9uLm5leHRMb2NhdGlvblxuICAgICAgfSk7XG4gICAgICBzZXRJbnRlcnJ1cHRpb24odW5kZWZpbmVkKTtcbiAgICB9XG4gIH0sIFt2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nLCBpbnRlcnJ1cHRpb25dKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcm91dGVyLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IGZhbHNlLFxuICAgIGJhc2VuYW1lXG4gIH0pLCBbcm91dGVyLCBuYXZpZ2F0b3IsIGJhc2VuYW1lXSk7XG4gIC8vIFRoZSBmcmFnbWVudCBhbmQge251bGx9IGhlcmUgYXJlIGltcG9ydGFudCEgIFdlIG5lZWQgdGhlbSB0byBrZWVwIFJlYWN0IDE4J3NcbiAgLy8gdXNlSWQgaGFwcHkgd2hlbiB3ZSBhcmUgc2VydmVyLXJlbmRlcmluZyBzaW5jZSB3ZSBtYXkgaGF2ZSBhIDxzY3JpcHQ+IGhlcmVcbiAgLy8gY29udGFpbmluZyB0aGUgaHlkcmF0ZWQgc2VydmVyLXNpZGUgc3RhdGljQ29udGV4dCAoZnJvbSBTdGF0aWNSb3V0ZXJQcm92aWRlcikuXG4gIC8vIHVzZUlkIHJlbGllcyBvbiB0aGUgY29tcG9uZW50IHRyZWUgc3RydWN0dXJlIHRvIGdlbmVyYXRlIGRldGVybWluaXN0aWMgaWQnc1xuICAvLyBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBpdCByZW1haW5zIHRoZSBzYW1lIG9uIHRoZSBjbGllbnQgZXZlbiB0aG91Z2hcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgPHNjcmlwdD4gdGFnXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRhdGFSb3V0ZXJDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZldGNoZXJzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBmZXRjaGVyRGF0YS5jdXJyZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFZpZXdUcmFuc2l0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB2dENvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvclxuICB9LCBzdGF0ZS5pbml0aWFsaXplZCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgc3RhdGU6IHN0YXRlXG4gIH0pIDogZmFsbGJhY2tFbGVtZW50KSkpKSksIG51bGwpO1xufVxuZnVuY3Rpb24gRGF0YVJvdXRlcyhfcmVmMykge1xuICBsZXQge1xuICAgIHJvdXRlcyxcbiAgICBzdGF0ZVxuICB9ID0gX3JlZjM7XG4gIHJldHVybiBVTlNBRkVfdXNlUm91dGVzSW1wbChyb3V0ZXMsIHVuZGVmaW5lZCwgc3RhdGUpO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5mdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWY0KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjQ7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiBIYXNoUm91dGVyKF9yZWY1KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjU7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmNikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICBoaXN0b3J5XG4gIH0gPSBfcmVmNjtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhpc3RvcnlSb3V0ZXIuZGlzcGxheU5hbWUgPSBcInVuc3RhYmxlX0hpc3RvcnlSb3V0ZXJcIjtcbn1cbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIGA8YT5gLlxuICovXG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlua1dpdGhSZWYoX3JlZjcsIHJlZikge1xuICBsZXQge1xuICAgICAgb25DbGljayxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICB0YXJnZXQsXG4gICAgICB0byxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgfSA9IF9yZWY3LFxuICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNywgX2V4Y2x1ZGVkKTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciBhYnNvbHV0ZSBVUkxzXG4gIGxldCBhYnNvbHV0ZUhyZWY7XG4gIGxldCBpc0V4dGVybmFsID0gZmFsc2U7XG4gIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgJiYgQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QodG8pKSB7XG4gICAgLy8gUmVuZGVyIHRoZSBhYnNvbHV0ZSBocmVmIHNlcnZlci0gYW5kIGNsaWVudC1zaWRlXG4gICAgYWJzb2x1dGVIcmVmID0gdG87XG4gICAgLy8gT25seSBjaGVjayBmb3IgZXh0ZXJuYWwgb3JpZ2lucyBjbGllbnQtc2lkZVxuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBjdXJyZW50VXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgIGxldCB0YXJnZXRVcmwgPSB0by5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyB0bykgOiBuZXcgVVJMKHRvKTtcbiAgICAgICAgbGV0IHBhdGggPSBzdHJpcEJhc2VuYW1lKHRhcmdldFVybC5wYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgICAgICBpZiAodGFyZ2V0VXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4gJiYgcGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gU3RyaXAgdGhlIHByb3RvY29sL29yaWdpbi9iYXNlbmFtZSBmb3Igc2FtZS1vcmlnaW4gYWJzb2x1dGUgVVJMc1xuICAgICAgICAgIHRvID0gcGF0aCArIHRhcmdldFVybC5zZWFyY2ggKyB0YXJnZXRVcmwuaGFzaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc0V4dGVybmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBXZSBjYW4ndCBkbyBleHRlcm5hbCBVUkwgZGV0ZWN0aW9uIHdpdGhvdXQgYSB2YWxpZCBVUkxcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiPExpbmsgdG89XFxcIlwiICsgdG8gKyBcIlxcXCI+IGNvbnRhaW5zIGFuIGludmFsaWQgVVJMIHdoaWNoIHdpbGwgcHJvYmFibHkgYnJlYWsgXCIgKyBcIndoZW4gY2xpY2tlZCAtIHBsZWFzZSB1cGRhdGUgdG8gYSB2YWxpZCBVUkwgcGF0aC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIHJlbGF0aXZlIFVSTHNcbiAgbGV0IGhyZWYgPSB1c2VIcmVmKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7XG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlLFxuICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gIH0pO1xuICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGludGVybmFsT25DbGljayhldmVudCk7XG4gICAgfVxuICB9XG4gIHJldHVybiAoXG4gICAgLyojX19QVVJFX18qL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogYWJzb2x1dGVIcmVmIHx8IGhyZWYsXG4gICAgICBvbkNsaWNrOiBpc0V4dGVybmFsIHx8IHJlbG9hZERvY3VtZW50ID8gb25DbGljayA6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiByZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pKVxuICApO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbn1cbi8qKlxuICogQSBgPExpbms+YCB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdkxpbmtXaXRoUmVmKF9yZWY4LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wID0gXCJcIixcbiAgICAgIGVuZCA9IGZhbHNlLFxuICAgICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICAgIHRvLFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24sXG4gICAgICBjaGlsZHJlblxuICAgIH0gPSBfcmVmOCxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjgsIF9leGNsdWRlZDIpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiByZXN0LnJlbGF0aXZlXG4gIH0pO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVyU3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGlzVHJhbnNpdGlvbmluZyA9IHJvdXRlclN0YXRlICE9IG51bGwgJiZcbiAgLy8gQ29uZGl0aW9uYWwgdXNhZ2UgaXMgT0sgaGVyZSBiZWNhdXNlIHRoZSB1c2FnZSBvZiBhIGRhdGEgcm91dGVyIGlzIHN0YXRpY1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgdXNlVmlld1RyYW5zaXRpb25TdGF0ZShwYXRoKSAmJiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbiA9PT0gdHJ1ZTtcbiAgbGV0IHRvUGF0aG5hbWUgPSBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24ocGF0aCkucGF0aG5hbWUgOiBwYXRoLnBhdGhuYW1lO1xuICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSByb3V0ZXJTdGF0ZSAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gPyByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLnBhdGhuYW1lIDogbnVsbDtcbiAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XG4gICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IG5leHRMb2NhdGlvblBhdGhuYW1lID8gbmV4dExvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKSA6IG51bGw7XG4gICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuICAvLyBJZiB0aGUgYHRvYCBoYXMgYSB0cmFpbGluZyBzbGFzaCwgbG9vayBhdCB0aGF0IGV4YWN0IHNwb3QuICBPdGhlcndpc2UsXG4gIC8vIHdlJ3JlIGxvb2tpbmcgZm9yIGEgc2xhc2ggX2FmdGVyXyB3aGF0J3MgaW4gYHRvYC4gIEZvciBleGFtcGxlOlxuICAvL1xuICAvLyA8TmF2TGluayB0bz1cIi91c2Vyc1wiPiBhbmQgPE5hdkxpbmsgdG89XCIvdXNlcnMvXCI+XG4gIC8vIGJvdGggd2FudCB0byBsb29rIGZvciBhIC8gYXQgaW5kZXggNiB0byBtYXRjaCBVUkwgYC91c2Vycy9tYXR0YFxuICBjb25zdCBlbmRTbGFzaFBvc2l0aW9uID0gdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIikgPyB0b1BhdGhuYW1lLmxlbmd0aCAtIDEgOiB0b1BhdGhuYW1lLmxlbmd0aDtcbiAgbGV0IGlzQWN0aXZlID0gbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIGxvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBsb2NhdGlvblBhdGhuYW1lLmNoYXJBdChlbmRTbGFzaFBvc2l0aW9uKSA9PT0gXCIvXCI7XG4gIGxldCBpc1BlbmRpbmcgPSBuZXh0TG9jYXRpb25QYXRobmFtZSAhPSBudWxsICYmIChuZXh0TG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCIpO1xuICBsZXQgcmVuZGVyUHJvcHMgPSB7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNQZW5kaW5nLFxuICAgIGlzVHJhbnNpdGlvbmluZ1xuICB9O1xuICBsZXQgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDtcbiAgbGV0IGNsYXNzTmFtZTtcbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHJlbmRlclByb3BzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAvLyBjbGFzcyBmb3IgPE5hdkxpbmsgLz5zIHRoYXQgYXJlIGFjdGl2ZS4gSW4gdjUgYGFjdGl2ZWAgd2FzIHRoZSBkZWZhdWx0XG4gICAgLy8gdmFsdWUgZm9yIGBhY3RpdmVDbGFzc05hbWVgLCBidXQgd2UgYXJlIHJlbW92aW5nIHRoYXQgQVBJIGFuZCBjYW4gc3RpbGxcbiAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgIC8vIHNpbXBsZSBzdHlsaW5nIHJ1bGVzIHdvcmtpbmcgYXMgdGhleSBjdXJyZW50bHkgZG8uXG4gICAgY2xhc3NOYW1lID0gW2NsYXNzTmFtZVByb3AsIGlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IG51bGwsIGlzUGVuZGluZyA/IFwicGVuZGluZ1wiIDogbnVsbCwgaXNUcmFuc2l0aW9uaW5nID8gXCJ0cmFuc2l0aW9uaW5nXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHJlbmRlclByb3BzKSA6IHN0eWxlUHJvcDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRvOiB0byxcbiAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbjogdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4ocmVuZGVyUHJvcHMpIDogY2hpbGRyZW4pO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cbi8qKlxuICogQSBgQHJlbWl4LXJ1bi9yb3V0ZXJgLWF3YXJlIGA8Zm9ybT5gLiBJdCBiZWhhdmVzIGxpa2UgYSBub3JtYWwgZm9ybSBleGNlcHRcbiAqIHRoYXQgdGhlIGludGVyYWN0aW9uIHdpdGggdGhlIHNlcnZlciBpcyB3aXRoIGBmZXRjaGAgaW5zdGVhZCBvZiBuZXcgZG9jdW1lbnRcbiAqIHJlcXVlc3RzLCBhbGxvd2luZyBjb21wb25lbnRzIHRvIGFkZCBuaWNlciBVWCB0byB0aGUgcGFnZSBhcyB0aGUgZm9ybSBpc1xuICogc3VibWl0dGVkIGFuZCByZXR1cm5zIHdpdGggZGF0YS5cbiAqL1xuY29uc3QgRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChfcmVmOSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIGxldCB7XG4gICAgICBmZXRjaGVyS2V5LFxuICAgICAgbmF2aWdhdGUsXG4gICAgICByZWxvYWREb2N1bWVudCxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2QsXG4gICAgICBhY3Rpb24sXG4gICAgICBvblN1Ym1pdCxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICB9ID0gX3JlZjksXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmOSwgX2V4Y2x1ZGVkMyk7XG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXQoKTtcbiAgbGV0IGZvcm1BY3Rpb24gPSB1c2VGb3JtQWN0aW9uKGFjdGlvbiwge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgZm9ybU1ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICBsZXQgc3VibWl0SGFuZGxlciA9IGV2ZW50ID0+IHtcbiAgICBvblN1Ym1pdCAmJiBvblN1Ym1pdChldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBzdWJtaXR0ZXIgPSBldmVudC5uYXRpdmVFdmVudC5zdWJtaXR0ZXI7XG4gICAgbGV0IHN1Ym1pdE1ldGhvZCA9IChzdWJtaXR0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIpKSB8fCBtZXRob2Q7XG4gICAgc3VibWl0KHN1Ym1pdHRlciB8fCBldmVudC5jdXJyZW50VGFyZ2V0LCB7XG4gICAgICBmZXRjaGVyS2V5LFxuICAgICAgbWV0aG9kOiBzdWJtaXRNZXRob2QsXG4gICAgICBuYXZpZ2F0ZSxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgbWV0aG9kOiBmb3JtTWV0aG9kLFxuICAgIGFjdGlvbjogZm9ybUFjdGlvbixcbiAgICBvblN1Ym1pdDogcmVsb2FkRG9jdW1lbnQgPyBvblN1Ym1pdCA6IHN1Ym1pdEhhbmRsZXJcbiAgfSwgcHJvcHMpKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGb3JtLmRpc3BsYXlOYW1lID0gXCJGb3JtXCI7XG59XG4vKipcbiAqIFRoaXMgY29tcG9uZW50IHdpbGwgZW11bGF0ZSB0aGUgYnJvd3NlcidzIHNjcm9sbCByZXN0b3JhdGlvbiBvbiBsb2NhdGlvblxuICogY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gU2Nyb2xsUmVzdG9yYXRpb24oX3JlZjEwKSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF9yZWYxMDtcbiAgdXNlU2Nyb2xsUmVzdG9yYXRpb24oe1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU2Nyb2xsUmVzdG9yYXRpb24uZGlzcGxheU5hbWUgPSBcIlNjcm9sbFJlc3RvcmF0aW9uXCI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSG9va3Ncbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgRGF0YVJvdXRlckhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU3VibWl0XCJdID0gXCJ1c2VTdWJtaXRcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRGZXRjaGVyXCJdID0gXCJ1c2VTdWJtaXRGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xuICBEYXRhUm91dGVySG9va1tcInVzZVZpZXdUcmFuc2l0aW9uU3RhdGVcIl0gPSBcInVzZVZpZXdUcmFuc2l0aW9uU3RhdGVcIjtcbn0pKERhdGFSb3V0ZXJIb29rIHx8IChEYXRhUm91dGVySG9vayA9IHt9KSk7XG52YXIgRGF0YVJvdXRlclN0YXRlSG9vaztcbihmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlcnNcIl0gPSBcInVzZUZldGNoZXJzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuLy8gSW50ZXJuYWwgaG9va3NcbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbi8vIEV4dGVybmFsIGhvb2tzXG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5mdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmUsXG4gICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gSWYgdGhlIFVSTCBoYXNuJ3QgY2hhbmdlZCwgYSByZWd1bGFyIDxhPiB3aWxsIGRvIGEgcmVwbGFjZSBpbnN0ZWFkIG9mXG4gICAgICAvLyBhIHB1c2gsIHNvIGRvIHRoZSBzYW1lIGhlcmUgdW5sZXNzIHRoZSByZXBsYWNlIHByb3AgaXMgZXhwbGljaXRseSBzZXRcbiAgICAgIGxldCByZXBsYWNlID0gcmVwbGFjZVByb3AgIT09IHVuZGVmaW5lZCA/IHJlcGxhY2VQcm9wIDogY3JlYXRlUGF0aChsb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgocGF0aCk7XG4gICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHJlbGF0aXZlLCB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbl0pO1xufVxuLyoqXG4gKiBBIGNvbnZlbmllbnQgd3JhcHBlciBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBzZWFyY2ggcGFyYW1ldGVycyB2aWEgdGhlXG4gKiBVUkxTZWFyY2hQYXJhbXMgaW50ZXJmYWNlLlxuICovXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gUmVhY3QudXNlTWVtbygoKSA9PlxuICAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAvLyBPbmNlIHdlIGNhbGwgdGhhdCB3ZSB3YW50IHRob3NlIHRvIHRha2UgcHJlY2VkZW5jZSwgb3RoZXJ3aXNlIHlvdSBjYW4ndFxuICAvLyByZW1vdmUgYSBwYXJhbSB3aXRoIHNldFNlYXJjaFBhcmFtcyh7fSkgaWYgaXQgaGFzIGFuIGluaXRpYWwgdmFsdWVcbiAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb24uc2VhcmNoLCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA/IG51bGwgOiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQpLCBbbG9jYXRpb24uc2VhcmNoXSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBzZXRTZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh0eXBlb2YgbmV4dEluaXQgPT09IFwiZnVuY3Rpb25cIiA/IG5leHRJbml0KHNlYXJjaFBhcmFtcykgOiBuZXh0SW5pdCk7XG4gICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgfVxufVxubGV0IGZldGNoZXJJZCA9IDA7XG5sZXQgZ2V0VW5pcXVlRmV0Y2hlcklkID0gKCkgPT4gXCJfX1wiICsgU3RyaW5nKCsrZmV0Y2hlcklkKSArIFwiX19cIjtcbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gdXNlU3VibWl0KCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0KTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgY3VycmVudFJvdXRlSWQgPSBVTlNBRkVfdXNlUm91dGVJZCgpO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdmFsaWRhdGVDbGllbnRTaWRlU3VibWlzc2lvbigpO1xuICAgIGxldCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBtZXRob2QsXG4gICAgICBlbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBib2R5XG4gICAgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKTtcbiAgICBpZiAob3B0aW9ucy5uYXZpZ2F0ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGxldCBrZXkgPSBvcHRpb25zLmZldGNoZXJLZXkgfHwgZ2V0VW5pcXVlRmV0Y2hlcklkKCk7XG4gICAgICByb3V0ZXIuZmV0Y2goa2V5LCBjdXJyZW50Um91dGVJZCwgb3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIGZvcm1EYXRhLFxuICAgICAgICBib2R5LFxuICAgICAgICBmb3JtTWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCBtZXRob2QsXG4gICAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgZW5jVHlwZSxcbiAgICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRpb25zLnVuc3RhYmxlX2ZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZShvcHRpb25zLmFjdGlvbiB8fCBhY3Rpb24sIHtcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgZm9ybURhdGEsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IG1ldGhvZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IG9wdGlvbnMuZW5jVHlwZSB8fCBlbmNUeXBlLFxuICAgICAgICByZXBsYWNlOiBvcHRpb25zLnJlcGxhY2UsXG4gICAgICAgIHN0YXRlOiBvcHRpb25zLnN0YXRlLFxuICAgICAgICBmcm9tUm91dGVJZDogY3VycmVudFJvdXRlSWQsXG4gICAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogb3B0aW9ucy51bnN0YWJsZV9mbHVzaFN5bmMsXG4gICAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uOiBvcHRpb25zLnVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGJhc2VuYW1lLCBjdXJyZW50Um91dGVJZF0pO1xufVxuLy8gdjc6IEV2ZW50dWFsbHkgd2Ugc2hvdWxkIGRlcHJlY2F0ZSB0aGlzIGVudGlyZWx5IGluIGZhdm9yIG9mIHVzaW5nIHRoZVxuLy8gcm91dGVyIG1ldGhvZCBkaXJlY3RseT9cbmZ1bmN0aW9uIHVzZUZvcm1BY3Rpb24oYWN0aW9uLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgcm91dGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlQ29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRm9ybUFjdGlvbiBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbbWF0Y2hdID0gcm91dGVDb250ZXh0Lm1hdGNoZXMuc2xpY2UoLTEpO1xuICAvLyBTaGFsbG93IGNsb25lIHBhdGggc28gd2UgY2FuIG1vZGlmeSBpdCBiZWxvdywgb3RoZXJ3aXNlIHdlIG1vZGlmeSB0aGVcbiAgLy8gb2JqZWN0IHJlZmVyZW5jZWQgYnkgdXNlTWVtbyBpbnNpZGUgdXNlUmVzb2x2ZWRQYXRoXG4gIGxldCBwYXRoID0gX2V4dGVuZHMoe30sIHVzZVJlc29sdmVkUGF0aChhY3Rpb24gPyBhY3Rpb24gOiBcIi5cIiwge1xuICAgIHJlbGF0aXZlXG4gIH0pKTtcbiAgLy8gUHJldmlvdXNseSB3ZSBzZXQgdGhlIGRlZmF1bHQgYWN0aW9uIHRvIFwiLlwiLiBUaGUgcHJvYmxlbSB3aXRoIHRoaXMgaXMgdGhhdFxuICAvLyBgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKWAgZXhjbHVkZXMgc2VhcmNoIHBhcmFtcyBvZiB0aGUgcmVzb2x2ZWQgVVJMLiBUaGlzIGlzXG4gIC8vIHRoZSBpbnRlbmRlZCBiZWhhdmlvciBvZiB3aGVuIFwiLlwiIGlzIHNwZWNpZmljYWxseSBwcm92aWRlZCBhc1xuICAvLyB0aGUgZm9ybSBhY3Rpb24sIGJ1dCBpbmNvbnNpc3RlbnQgdy8gYnJvd3NlcnMgd2hlbiB0aGUgYWN0aW9uIGlzIG9taXR0ZWQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBpZiAoYWN0aW9uID09IG51bGwpIHtcbiAgICAvLyBTYWZlIHRvIHdyaXRlIHRvIHRoaXMgZGlyZWN0bHkgaGVyZSBzaW5jZSBpZiBhY3Rpb24gd2FzIHVuZGVmaW5lZCwgd2VcbiAgICAvLyB3b3VsZCBoYXZlIGNhbGxlZCB1c2VSZXNvbHZlZFBhdGgoXCIuXCIpIHdoaWNoIHdpbGwgbmV2ZXIgaW5jbHVkZSBhIHNlYXJjaFxuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIC8vIFdoZW4gZ3JhYmJpbmcgc2VhcmNoIHBhcmFtcyBmcm9tIHRoZSBVUkwsIHJlbW92ZSBhbnkgaW5jbHVkZWQgP2luZGV4IHBhcmFtXG4gICAgLy8gc2luY2UgaXQgbWlnaHQgbm90IGFwcGx5IHRvIG91ciBjb250ZXh0dWFsIHJvdXRlLiAgV2UgYWRkIGl0IGJhY2sgYmFzZWRcbiAgICAvLyBvbiBtYXRjaC5yb3V0ZS5pbmRleCBiZWxvd1xuICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhdGguc2VhcmNoKTtcbiAgICBpZiAocGFyYW1zLmhhcyhcImluZGV4XCIpICYmIHBhcmFtcy5nZXQoXCJpbmRleFwiKSA9PT0gXCJcIikge1xuICAgICAgcGFyYW1zLmRlbGV0ZShcImluZGV4XCIpO1xuICAgICAgcGF0aC5zZWFyY2ggPSBwYXJhbXMudG9TdHJpbmcoKSA/IFwiP1wiICsgcGFyYW1zLnRvU3RyaW5nKCkgOiBcIlwiO1xuICAgIH1cbiAgfVxuICBpZiAoKCFhY3Rpb24gfHwgYWN0aW9uID09PSBcIi5cIikgJiYgbWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gIH1cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgZm9ybSBhY3Rpb24uICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlXG4gIC8vIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZVxuICAvLyBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG4vLyBUT0RPOiAodjcpIENoYW5nZSB0aGUgdXNlRmV0Y2hlciBnZW5lcmljIGRlZmF1bHQgZnJvbSBgYW55YCB0byBgdW5rbm93bmBcbi8qKlxuICogSW50ZXJhY3RzIHdpdGggcm91dGUgbG9hZGVycyBhbmQgYWN0aW9ucyB3aXRob3V0IGNhdXNpbmcgYSBuYXZpZ2F0aW9uLiBHcmVhdFxuICogZm9yIGFueSBpbnRlcmFjdGlvbiB0aGF0IHN0YXlzIG9uIHRoZSBzYW1lIHBhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXIoX3RlbXAzKSB7XG4gIHZhciBfcm91dGUkbWF0Y2hlcztcbiAgbGV0IHtcbiAgICBrZXlcbiAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCBmZXRjaGVyRGF0YSA9IFJlYWN0LnVzZUNvbnRleHQoRmV0Y2hlcnNDb250ZXh0KTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlSWQgPSAoX3JvdXRlJG1hdGNoZXMgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0pID09IG51bGwgPyB2b2lkIDAgOiBfcm91dGUkbWF0Y2hlcy5yb3V0ZS5pZDtcbiAgIWZldGNoZXJEYXRhID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBGZXRjaGVyc0NvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIShyb3V0ZUlkICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIC8vIEZldGNoZXIga2V5IGhhbmRsaW5nXG4gIGxldCBbZmV0Y2hlcktleSwgc2V0RmV0Y2hlcktleV0gPSBSZWFjdC51c2VTdGF0ZShrZXkgfHwgXCJcIik7XG4gIGlmIChrZXkgJiYga2V5ICE9PSBmZXRjaGVyS2V5KSB7XG4gICAgc2V0RmV0Y2hlcktleShrZXkpO1xuICB9IGVsc2UgaWYgKCFmZXRjaGVyS2V5KSB7XG4gICAgc2V0RmV0Y2hlcktleShnZXRVbmlxdWVGZXRjaGVySWQoKSk7XG4gIH1cbiAgLy8gUmVnaXN0cmF0aW9uL2NsZWFudXBcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByb3V0ZXIuZ2V0RmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gVGVsbCB0aGUgcm91dGVyIHdlJ3ZlIHVubW91bnRlZCAtIGlmIHY3X2ZldGNoZXJQZXJzaXN0IGlzIGVuYWJsZWQgdGhpc1xuICAgICAgLy8gd2lsbCBub3QgZGVsZXRlIGltbWVkaWF0ZWx5IGJ1dCBpbnN0ZWFkIHF1ZXVlIHVwIGEgZGVsZXRlIGFmdGVyIHRoZVxuICAgICAgLy8gZmV0Y2hlciByZXR1cm5zIHRvIGFuIGBpZGxlYCBzdGF0ZVxuICAgICAgcm91dGVyLmRlbGV0ZUZldGNoZXIoZmV0Y2hlcktleSk7XG4gICAgfTtcbiAgfSwgW3JvdXRlciwgZmV0Y2hlcktleV0pO1xuICAvLyBGZXRjaGVyIGFkZGl0aW9uc1xuICBsZXQgbG9hZCA9IFJlYWN0LnVzZUNhbGxiYWNrKChocmVmLCBvcHRzKSA9PiB7XG4gICAgIXJvdXRlSWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLmxvYWQoKVwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTtcbiAgfSwgW2ZldGNoZXJLZXksIHJvdXRlSWQsIHJvdXRlcl0pO1xuICBsZXQgc3VibWl0SW1wbCA9IHVzZVN1Ym1pdCgpO1xuICBsZXQgc3VibWl0ID0gUmVhY3QudXNlQ2FsbGJhY2soKHRhcmdldCwgb3B0cykgPT4ge1xuICAgIHN1Ym1pdEltcGwodGFyZ2V0LCBfZXh0ZW5kcyh7fSwgb3B0cywge1xuICAgICAgbmF2aWdhdGU6IGZhbHNlLFxuICAgICAgZmV0Y2hlcktleVxuICAgIH0pKTtcbiAgfSwgW2ZldGNoZXJLZXksIHN1Ym1pdEltcGxdKTtcbiAgbGV0IEZldGNoZXJGb3JtID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IEZldGNoZXJGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgbmF2aWdhdGU6IGZhbHNlLFxuICAgICAgICBmZXRjaGVyS2V5OiBmZXRjaGVyS2V5LFxuICAgICAgICByZWY6IHJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgICB9XG4gICAgcmV0dXJuIEZldGNoZXJGb3JtO1xuICB9LCBbZmV0Y2hlcktleV0pO1xuICAvLyBFeHBvc2VkIEZldGNoZXJXaXRoQ29tcG9uZW50c1xuICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChmZXRjaGVyS2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIGxldCBkYXRhID0gZmV0Y2hlckRhdGEuZ2V0KGZldGNoZXJLZXkpO1xuICBsZXQgZmV0Y2hlcldpdGhDb21wb25lbnRzID0gUmVhY3QudXNlTWVtbygoKSA9PiBfZXh0ZW5kcyh7XG4gICAgRm9ybTogRmV0Y2hlckZvcm0sXG4gICAgc3VibWl0LFxuICAgIGxvYWRcbiAgfSwgZmV0Y2hlciwge1xuICAgIGRhdGFcbiAgfSksIFtGZXRjaGVyRm9ybSwgc3VibWl0LCBsb2FkLCBmZXRjaGVyLCBkYXRhXSk7XG4gIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7XG59XG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXJzKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVycyk7XG4gIHJldHVybiBBcnJheS5mcm9tKHN0YXRlLmZldGNoZXJzLmVudHJpZXMoKSkubWFwKF9yZWYxMSA9PiB7XG4gICAgbGV0IFtrZXksIGZldGNoZXJdID0gX3JlZjExO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZmV0Y2hlciwge1xuICAgICAga2V5XG4gICAgfSk7XG4gIH0pO1xufVxuY29uc3QgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZID0gXCJyZWFjdC1yb3V0ZXItc2Nyb2xsLXBvc2l0aW9uc1wiO1xubGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0ge307XG4vKipcbiAqIFdoZW4gcmVuZGVyZWQgaW5zaWRlIGEgUm91dGVyUHJvdmlkZXIsIHdpbGwgcmVzdG9yZSBzY3JvbGwgcG9zaXRpb25zIG9uIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVNjcm9sbFJlc3RvcmF0aW9uKF90ZW1wNCkge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfdGVtcDQgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA0O1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbixcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbWF0Y2hlcyA9IHVzZU1hdGNoZXMoKTtcbiAgbGV0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIC8vIFRyaWdnZXIgbWFudWFsIHNjcm9sbCByZXN0b3JhdGlvbiB3aGlsZSB3ZSdyZSBhY3RpdmVcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCI7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gICAgfTtcbiAgfSwgW10pO1xuICAvLyBTYXZlIHBvc2l0aW9ucyBvbiBwYWdlaGlkZVxuICB1c2VQYWdlSGlkZShSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBsZXQga2V5ID0gKGdldEtleSA/IGdldEtleShsb2NhdGlvbiwgbWF0Y2hlcykgOiBudWxsKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gd2luZG93LnNjcm9sbFk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzYXZlZFNjcm9sbFBvc2l0aW9ucykpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJGYWlsZWQgdG8gc2F2ZSBzY3JvbGwgcG9zaXRpb25zIGluIHNlc3Npb25TdG9yYWdlLCA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gd2lsbCBub3Qgd29yayBwcm9wZXJseSAoXCIgKyBlcnJvciArIFwiKS5cIikgOiB2b2lkIDA7XG4gICAgfVxuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gIH0sIFtzdG9yYWdlS2V5LCBnZXRLZXksIG5hdmlnYXRpb24uc3RhdGUsIGxvY2F0aW9uLCBtYXRjaGVzXSkpO1xuICAvLyBSZWFkIGluIGFueSBzYXZlZCBzY3JvbGwgbG9jYXRpb25zXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZKTtcbiAgICAgICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICAgICAgfVxuICAgIH0sIFtzdG9yYWdlS2V5XSk7XG4gICAgLy8gRW5hYmxlIHNjcm9sbCByZXN0b3JhdGlvbiBpbiB0aGUgcm91dGVyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIGxldCBnZXRLZXlXaXRob3V0QmFzZW5hbWUgPSBnZXRLZXkgJiYgYmFzZW5hbWUgIT09IFwiL1wiID8gKGxvY2F0aW9uLCBtYXRjaGVzKSA9PiBnZXRLZXkoIC8vIFN0cmlwIHRoZSBiYXNlbmFtZSB0byBtYXRjaCB1c2VMb2NhdGlvbigpXG4gICAgICBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksIG1hdGNoZXMpIDogZ2V0S2V5O1xuICAgICAgbGV0IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiA9IHJvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcm91dGVyLmVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHNhdmVkU2Nyb2xsUG9zaXRpb25zLCAoKSA9PiB3aW5kb3cuc2Nyb2xsWSwgZ2V0S2V5V2l0aG91dEJhc2VuYW1lKTtcbiAgICAgIHJldHVybiAoKSA9PiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gJiYgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKCk7XG4gICAgfSwgW3JvdXRlciwgYmFzZW5hbWUsIGdldEtleV0pO1xuICAgIC8vIFJlc3RvcmUgc2Nyb2xsaW5nIHdoZW4gc3RhdGUucmVzdG9yZVNjcm9sbFBvc2l0aW9uIGNoYW5nZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgLy8gRXhwbGljaXQgZmFsc2UgbWVhbnMgZG9uJ3QgZG8gYW55dGhpbmcgKHVzZWQgZm9yIHN1Ym1pc3Npb25zKVxuICAgICAgaWYgKHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYmVlbiBoZXJlIGJlZm9yZSwgc2Nyb2xsIHRvIGl0XG4gICAgICBpZiAodHlwZW9mIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gdHJ5IHRvIHNjcm9sbCB0byB0aGUgaGFzaFxuICAgICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGVjb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLmhhc2guc2xpY2UoMSkpKTtcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgZWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIERvbid0IHJlc2V0IGlmIHRoaXMgbmF2aWdhdGlvbiBvcHRlZCBvdXRcbiAgICAgIGlmIChwcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gb3RoZXJ3aXNlIGdvIHRvIHRoZSB0b3Agb24gbmV3IGxvY2F0aW9uc1xuICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIH0sIFtsb2NhdGlvbiwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLCBwcmV2ZW50U2Nyb2xsUmVzZXRdKTtcbiAgfVxufVxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgYmVmb3JldW5sb2FkYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5mdW5jdGlvbiB1c2VCZWZvcmVVbmxvYWQoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBwYWdlaGlkZWAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy4gIFRoaXMgZXZlbnQgaXMgYmV0dGVyIHN1cHBvcnRlZCB0aGFuIGJlZm9yZXVubG9hZCBhY3Jvc3MgYnJvd3NlcnMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZVBhZ2VIaWRlKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGxldCB7XG4gICAgY2FwdHVyZVxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHtcbiAgICAgIGNhcHR1cmVcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogV3JhcHBlciBhcm91bmQgdXNlQmxvY2tlciB0byBzaG93IGEgd2luZG93LmNvbmZpcm0gcHJvbXB0IHRvIHVzZXJzIGluc3RlYWRcbiAqIG9mIGJ1aWxkaW5nIGEgY3VzdG9tIFVJIHdpdGggdXNlQmxvY2tlci5cbiAqXG4gKiBXYXJuaW5nOiBUaGlzIGhhcyAqYSBsb3Qgb2Ygcm91Z2ggZWRnZXMqIGFuZCBiZWhhdmVzIHZlcnkgZGlmZmVyZW50bHkgKGFuZFxuICogdmVyeSBpbmNvcnJlY3RseSBpbiBzb21lIGNhc2VzKSBhY3Jvc3MgYnJvd3NlcnMgaWYgdXNlciBjbGljayBhZGRpdGlvblxuICogYmFjay9mb3J3YXJkIG5hdmlnYXRpb25zIHdoaWxlIHRoZSBjb25maXJtIGlzIG9wZW4uICBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAqL1xuZnVuY3Rpb24gdXNlUHJvbXB0KF9yZWYxMikge1xuICBsZXQge1xuICAgIHdoZW4sXG4gICAgbWVzc2FnZVxuICB9ID0gX3JlZjEyO1xuICBsZXQgYmxvY2tlciA9IHVzZUJsb2NrZXIod2hlbik7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICBsZXQgcHJvY2VlZCA9IHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpO1xuICAgICAgaWYgKHByb2NlZWQpIHtcbiAgICAgICAgLy8gVGhpcyB0aW1lb3V0IGlzIG5lZWRlZCB0byBhdm9pZCBhIHdlaXJkIFwicmFjZVwiIG9uIFBPUCBuYXZpZ2F0aW9uc1xuICAgICAgICAvLyBiZXR3ZWVuIHRoZSBgd2luZG93Lmhpc3RvcnlgIHJldmVydCBuYXZpZ2F0aW9uIGFuZCB0aGUgcmVzdWx0IG9mXG4gICAgICAgIC8vIGB3aW5kb3cuY29uZmlybWBcbiAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgIXdoZW4pIHtcbiAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICB9XG4gIH0sIFtibG9ja2VyLCB3aGVuXSk7XG59XG4vKipcbiAqIFJldHVybiBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgdmlldyB0cmFuc2l0aW9uIHRvIHRoZVxuICogZ2l2ZW4gaHJlZi4gIFlvdSBjYW4gdXNlIHRoaXMgdmFsdWUgdG8gcmVuZGVyIENTUyBjbGFzc2VzIG9yIHZpZXdUcmFuc2l0aW9uTmFtZVxuICogc3R5bGVzIG9udG8geW91ciBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSBocmVmIFRoZSBkZXN0aW5hdGlvbiBocmVmXG4gKiBAcGFyYW0gW29wdHMucmVsYXRpdmVdIFJlbGF0aXZlIHJvdXRpbmcgdHlwZSAoXCJyb3V0ZVwiIHwgXCJwYXRoXCIpXG4gKi9cbmZ1bmN0aW9uIHVzZVZpZXdUcmFuc2l0aW9uU3RhdGUodG8sIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICBsZXQgdnRDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChWaWV3VHJhbnNpdGlvbkNvbnRleHQpO1xuICAhKHZ0Q29udGV4dCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiYHVuc3RhYmxlX3VzZVZpZXdUcmFuc2l0aW9uU3RhdGVgIG11c3QgYmUgdXNlZCB3aXRoaW4gYHJlYWN0LXJvdXRlci1kb21gJ3MgYFJvdXRlclByb3ZpZGVyYC4gIFwiICsgXCJEaWQgeW91IGFjY2lkZW50YWxseSBpbXBvcnQgYFJvdXRlclByb3ZpZGVyYCBmcm9tIGByZWFjdC1yb3V0ZXJgP1wiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay51c2VWaWV3VHJhbnNpdGlvblN0YXRlKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogb3B0cy5yZWxhdGl2ZVxuICB9KTtcbiAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBjdXJyZW50UGF0aCA9IHN0cmlwQmFzZW5hbWUodnRDb250ZXh0LmN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IHZ0Q29udGV4dC5jdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0UGF0aCA9IHN0cmlwQmFzZW5hbWUodnRDb250ZXh0Lm5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IHZ0Q29udGV4dC5uZXh0TG9jYXRpb24ucGF0aG5hbWU7XG4gIC8vIFRyYW5zaXRpb24gaXMgYWN0aXZlIGlmIHdlJ3JlIGdvaW5nIHRvIG9yIGNvbWluZyBmcm9tIHRoZSBpbmRpY2F0ZWRcbiAgLy8gZGVzdGluYXRpb24uICBUaGlzIGVuc3VyZXMgdGhhdCBvdGhlciBQVVNIIG5hdmlnYXRpb25zIHRoYXQgcmV2ZXJzZVxuICAvLyBhbiBpbmRpY2F0ZWQgdHJhbnNpdGlvbiBhcHBseS4gIEkuZS4sIG9uIHRoZSBsaXN0IHZpZXcgeW91IGhhdmU6XG4gIC8vXG4gIC8vICAgPE5hdkxpbmsgdG89XCIvZGV0YWlscy8xXCIgdW5zdGFibGVfdmlld1RyYW5zaXRpb24+XG4gIC8vXG4gIC8vIElmIHlvdSBjbGljayB0aGUgYnJlYWRjcnVtYiBiYWNrIHRvIHRoZSBsaXN0IHZpZXc6XG4gIC8vXG4gIC8vICAgPE5hdkxpbmsgdG89XCIvbGlzdFwiIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPlxuICAvL1xuICAvLyBXZSBzaG91bGQgYXBwbHkgdGhlIHRyYW5zaXRpb24gYmVjYXVzZSBpdCdzIGluZGljYXRlZCBhcyBhY3RpdmUgZ29pbmdcbiAgLy8gZnJvbSAvbGlzdCAtPiAvZGV0YWlscy8xIGFuZCB0aGVyZWZvcmUgc2hvdWxkIGJlIGFjdGl2ZSBvbiB0aGUgcmV2ZXJzZVxuICAvLyAoZXZlbiB0aG91Z2ggdGhpcyBpc24ndCBzdHJpY3RseSBhIFBPUCByZXZlcnNlKVxuICByZXR1cm4gbWF0Y2hQYXRoKHBhdGgucGF0aG5hbWUsIG5leHRQYXRoKSAhPSBudWxsIHx8IG1hdGNoUGF0aChwYXRoLnBhdGhuYW1lLCBjdXJyZW50UGF0aCkgIT0gbnVsbDtcbn1cbi8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBGb3JtLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBSb3V0ZXJQcm92aWRlciwgU2Nyb2xsUmVzdG9yYXRpb24sIEZldGNoZXJzQ29udGV4dCBhcyBVTlNBRkVfRmV0Y2hlcnNDb250ZXh0LCBWaWV3VHJhbnNpdGlvbkNvbnRleHQgYXMgVU5TQUZFX1ZpZXdUcmFuc2l0aW9uQ29udGV4dCwgdXNlU2Nyb2xsUmVzdG9yYXRpb24gYXMgVU5TQUZFX3VzZVNjcm9sbFJlc3RvcmF0aW9uLCBjcmVhdGVCcm93c2VyUm91dGVyLCBjcmVhdGVIYXNoUm91dGVyLCBjcmVhdGVTZWFyY2hQYXJhbXMsIEhpc3RvcnlSb3V0ZXIgYXMgdW5zdGFibGVfSGlzdG9yeVJvdXRlciwgdXNlUHJvbXB0IGFzIHVuc3RhYmxlX3VzZVByb21wdCwgdXNlVmlld1RyYW5zaXRpb25TdGF0ZSBhcyB1bnN0YWJsZV91c2VWaWV3VHJhbnNpdGlvblN0YXRlLCB1c2VCZWZvcmVVbmxvYWQsIHVzZUZldGNoZXIsIHVzZUZldGNoZXJzLCB1c2VGb3JtQWN0aW9uLCB1c2VMaW5rQ2xpY2tIYW5kbGVyLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVN1Ym1pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5jb25zdCBGb290ZXJzID0gKCkgPT4ge1xyXG5yZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmb290ZXJcIj5cclxuICAgICAgICA8aHI+PC9ocj5cclxuICAgICAgICBXYWx0ZXIgwqnCrlxyXG4gICAgPC9kaXY+XHJcbilcclxufVxyXG5leHBvcnQgZGVmYXVsdCBGb290ZXJzOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJlYW0gPSAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Zvcm1EYXRhID0gKHRoaW5nKSA9PiB7XG4gIGxldCBraW5kO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHwgKFxuICAgICAgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIChcbiAgICAgICAgKGtpbmQgPSBraW5kT2YodGhpbmcpKSA9PT0gJ2Zvcm1kYXRhJyB8fFxuICAgICAgICAvLyBkZXRlY3QgZm9ybS1kYXRhIGluc3RhbmNlXG4gICAgICAgIChraW5kID09PSAnb2JqZWN0JyAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSAnW29iamVjdCBGb3JtRGF0YV0nKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuY29uc3QgdHJpbSA9IChzdHIpID0+IHN0ci50cmltID9cbiAgc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5cyA9IGZhbHNlXVxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuLCB7YWxsT3duS2V5cyA9IGZhbHNlfSA9IHt9KSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGk7XG4gIGxldCBsO1xuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yIChpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBjb25zdCBrZXlzID0gYWxsT3duS2V5cyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikgOiBPYmplY3Qua2V5cyhvYmopO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrZXk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBrZXkpIHtcbiAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICBsZXQgX2tleTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBfa2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ID09PSBfa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBfa2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgX2dsb2JhbCA9ICgoKSA9PiB7XG4gIC8qZXNsaW50IG5vLXVuZGVmOjAqL1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICByZXR1cm4gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKVxufSkoKTtcblxuY29uc3QgaXNDb250ZXh0RGVmaW5lZCA9IChjb250ZXh0KSA9PiAhaXNVbmRlZmluZWQoY29udGV4dCkgJiYgY29udGV4dCAhPT0gX2dsb2JhbDtcblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKlxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICBjb25zdCB7Y2FzZWxlc3N9ID0gaXNDb250ZXh0RGVmaW5lZCh0aGlzKSAmJiB0aGlzIHx8IHt9O1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYXNzaWduVmFsdWUgPSAodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCB0YXJnZXRLZXkgPSBjYXNlbGVzcyAmJiBmaW5kS2V5KHJlc3VsdCwga2V5KSB8fCBrZXk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W3RhcmdldEtleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZShyZXN1bHRbdGFyZ2V0S2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5jb25zdCBzdHJpcEJPTSA9IChjb250ZW50KSA9PiB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBpbmhlcml0cyA9IChjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSA9PiB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3RvciwgJ3N1cGVyJywge1xuICAgIHZhbHVlOiBzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZVxuICB9KTtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgPT4ge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIGNvbnN0IGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdCBvciBudWxsIGlmIGZhaWxlZFxuICpcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICpcbiAqIEByZXR1cm5zIHs/QXJyYXl9XG4gKi9cbmNvbnN0IHRvQXJyYXkgPSAodGhpbmcpID0+IHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIGlmIChpc0FycmF5KHRoaW5nKSkgcmV0dXJuIHRoaW5nO1xuICBsZXQgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKCFpc051bWJlcihpKSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIGNvbnN0IGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICBjb25zdCBwYWlyID0gcmVzdWx0LnZhbHVlO1xuICAgIGZuLmNhbGwob2JqLCBwYWlyWzBdLCBwYWlyWzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcmVndWxhciBleHByZXNzaW9uIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHRoZSBtYXRjaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ0V4cCAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8Ym9vbGVhbj59XG4gKi9cbmNvbnN0IG1hdGNoQWxsID0gKHJlZ0V4cCwgc3RyKSA9PiB7XG4gIGxldCBtYXRjaGVzO1xuICBjb25zdCBhcnIgPSBbXTtcblxuICB3aGlsZSAoKG1hdGNoZXMgPSByZWdFeHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIGFyci5wdXNoKG1hdGNoZXMpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuLyogQ2hlY2tpbmcgaWYgdGhlIGtpbmRPZlRlc3QgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHdoZW4gcGFzc2VkIGFuIEhUTUxGb3JtRWxlbWVudC4gKi9cbmNvbnN0IGlzSFRNTEZvcm0gPSBraW5kT2ZUZXN0KCdIVE1MRm9ybUVsZW1lbnQnKTtcblxuY29uc3QgdG9DYW1lbENhc2UgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXFxzXShbYS16XFxkXSkoXFx3KikvZyxcbiAgICBmdW5jdGlvbiByZXBsYWNlcihtLCBwMSwgcDIpIHtcbiAgICAgIHJldHVybiBwMS50b1VwcGVyQ2FzZSgpICsgcDI7XG4gICAgfVxuICApO1xufTtcblxuLyogQ3JlYXRpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY2hlY2sgaWYgYW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5LiAqL1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSAoKHtoYXNPd25Qcm9wZXJ0eX0pID0+IChvYmosIHByb3ApID0+IGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkoT2JqZWN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1JlZ0V4cCA9IGtpbmRPZlRlc3QoJ1JlZ0V4cCcpO1xuXG5jb25zdCByZWR1Y2VEZXNjcmlwdG9ycyA9IChvYmosIHJlZHVjZXIpID0+IHtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopO1xuICBjb25zdCByZWR1Y2VkRGVzY3JpcHRvcnMgPSB7fTtcblxuICBmb3JFYWNoKGRlc2NyaXB0b3JzLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIGxldCByZXQ7XG4gICAgaWYgKChyZXQgPSByZWR1Y2VyKGRlc2NyaXB0b3IsIG5hbWUsIG9iaikpICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gcmV0IHx8IGRlc2NyaXB0b3I7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHJlZHVjZWREZXNjcmlwdG9ycyk7XG59XG5cbi8qKlxuICogTWFrZXMgYWxsIG1ldGhvZHMgcmVhZC1vbmx5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKi9cblxuY29uc3QgZnJlZXplTWV0aG9kcyA9IChvYmopID0+IHtcbiAgcmVkdWNlRGVzY3JpcHRvcnMob2JqLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIC8vIHNraXAgcmVzdHJpY3RlZCBwcm9wcyBpbiBzdHJpY3QgbW9kZVxuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikgJiYgWydhcmd1bWVudHMnLCAnY2FsbGVyJywgJ2NhbGxlZSddLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG5cbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcblxuICAgIGlmICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBkZXNjcmlwdG9yLnNldCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBub3QgcmV3cml0ZSByZWFkLW9ubHkgbWV0aG9kIFxcJycgKyBuYW1lICsgJ1xcJycpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCB0b09iamVjdFNldCA9IChhcnJheU9yU3RyaW5nLCBkZWxpbWl0ZXIpID0+IHtcbiAgY29uc3Qgb2JqID0ge307XG5cbiAgY29uc3QgZGVmaW5lID0gKGFycikgPT4ge1xuICAgIGFyci5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgIG9ialt2YWx1ZV0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgaXNBcnJheShhcnJheU9yU3RyaW5nKSA/IGRlZmluZShhcnJheU9yU3RyaW5nKSA6IGRlZmluZShTdHJpbmcoYXJyYXlPclN0cmluZykuc3BsaXQoZGVsaW1pdGVyKSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbmNvbnN0IHRvRmluaXRlTnVtYmVyID0gKHZhbHVlLCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgdmFsdWUgPSArdmFsdWU7XG4gIHJldHVybiBOdW1iZXIuaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5cbmNvbnN0IEFMUEhBID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xuXG5jb25zdCBESUdJVCA9ICcwMTIzNDU2Nzg5JztcblxuY29uc3QgQUxQSEFCRVQgPSB7XG4gIERJR0lULFxuICBBTFBIQSxcbiAgQUxQSEFfRElHSVQ6IEFMUEhBICsgQUxQSEEudG9VcHBlckNhc2UoKSArIERJR0lUXG59XG5cbmNvbnN0IGdlbmVyYXRlU3RyaW5nID0gKHNpemUgPSAxNiwgYWxwaGFiZXQgPSBBTFBIQUJFVC5BTFBIQV9ESUdJVCkgPT4ge1xuICBsZXQgc3RyID0gJyc7XG4gIGNvbnN0IHtsZW5ndGh9ID0gYWxwaGFiZXQ7XG4gIHdoaWxlIChzaXplLS0pIHtcbiAgICBzdHIgKz0gYWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIGxlbmd0aHwwXVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0pO1xufVxuXG5jb25zdCB0b0pTT05PYmplY3QgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEFycmF5KDEwKTtcblxuICBjb25zdCB2aXNpdCA9IChzb3VyY2UsIGkpID0+IHtcblxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihzb3VyY2UpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighKCd0b0pTT04nIGluIHNvdXJjZSkpIHtcbiAgICAgICAgc3RhY2tbaV0gPSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG5cbiAgICAgICAgZm9yRWFjaChzb3VyY2UsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gdmlzaXQodmFsdWUsIGkgKyAxKTtcbiAgICAgICAgICAhaXNVbmRlZmluZWQocmVkdWNlZFZhbHVlKSAmJiAodGFyZ2V0W2tleV0gPSByZWR1Y2VkVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFja1tpXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICByZXR1cm4gdmlzaXQob2JqLCAwKTtcbn1cblxuY29uc3QgaXNBc3luY0ZuID0ga2luZE9mVGVzdCgnQXN5bmNGdW5jdGlvbicpO1xuXG5jb25zdCBpc1RoZW5hYmxlID0gKHRoaW5nKSA9PlxuICB0aGluZyAmJiAoaXNPYmplY3QodGhpbmcpIHx8IGlzRnVuY3Rpb24odGhpbmcpKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRoZW4pICYmIGlzRnVuY3Rpb24odGhpbmcuY2F0Y2gpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlLFxuICBpc0ZpbGUsXG4gIGlzQmxvYixcbiAgaXNSZWdFeHAsXG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0LFxuICBmb3JFYWNoLFxuICBtZXJnZSxcbiAgZXh0ZW5kLFxuICB0cmltLFxuICBzdHJpcEJPTSxcbiAgaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdCxcbiAga2luZE9mLFxuICBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aCxcbiAgdG9BcnJheSxcbiAgZm9yRWFjaEVudHJ5LFxuICBtYXRjaEFsbCxcbiAgaXNIVE1MRm9ybSxcbiAgaGFzT3duUHJvcGVydHksXG4gIGhhc093blByb3A6IGhhc093blByb3BlcnR5LCAvLyBhbiBhbGlhcyB0byBhdm9pZCBFU0xpbnQgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIGRldGVjdGlvblxuICByZWR1Y2VEZXNjcmlwdG9ycyxcbiAgZnJlZXplTWV0aG9kcyxcbiAgdG9PYmplY3RTZXQsXG4gIHRvQ2FtZWxDYXNlLFxuICBub29wLFxuICB0b0Zpbml0ZU51bWJlcixcbiAgZmluZEtleSxcbiAgZ2xvYmFsOiBfZ2xvYmFsLFxuICBpc0NvbnRleHREZWZpbmVkLFxuICBBTFBIQUJFVCxcbiAgZ2VuZXJhdGVTdHJpbmcsXG4gIGlzU3BlY0NvbXBsaWFudEZvcm0sXG4gIHRvSlNPTk9iamVjdCxcbiAgaXNBc3luY0ZuLFxuICBpc1RoZW5hYmxlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7P29iamVjdH0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCJpbXBvcnQgVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4vY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMnXG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnLi9jbGFzc2VzL0Zvcm1EYXRhLmpzJ1xuaW1wb3J0IEJsb2IgZnJvbSAnLi9jbGFzc2VzL0Jsb2IuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2JcbiAgfSxcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IG51bGw7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsImNvbnN0IGhhc0Jyb3dzZXJFbnYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyRW52ID0gKFxuICAocHJvZHVjdCkgPT4ge1xuICAgIHJldHVybiBoYXNCcm93c2VyRW52ICYmIFsnUmVhY3ROYXRpdmUnLCAnTmF0aXZlU2NyaXB0JywgJ05TJ10uaW5kZXhPZihwcm9kdWN0KSA8IDBcbiAgfSkodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5leHBvcnQge1xuICBoYXNCcm93c2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlckVudlxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4vbm9kZS9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4vdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgdG9VUkxFbmNvZGVkRm9ybSBmcm9tICcuLi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogWyd4aHInLCAnaHR0cCddLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSB8fCAnJztcbiAgICBjb25zdCBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICBjb25zdCBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMuaXNGb3JtRGF0YShkYXRhKTtcblxuICAgIGlmIChpc0Zvcm1EYXRhKSB7XG4gICAgICBpZiAoIWhhc0pTT05Db250ZW50VHlwZSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCddLCAobWV0aG9kKSA9PiB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Gb3JtRGF0YShkYXRhLCBuZXcgcGxhdGZvcm0uY2xhc3Nlcy5VUkxTZWFyY2hQYXJhbXMoKSwgT2JqZWN0LmFzc2lnbih7XG4gICAgdmlzaXRvcjogZnVuY3Rpb24odmFsdWUsIGtleSwgcGF0aCwgaGVscGVycykge1xuICAgICAgaWYgKHBsYXRmb3JtLmlzTm9kZSAmJiB1dGlscy5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscy50b09iamVjdFNldChbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXSk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByYXdIZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBhcnNlSGVhZGVycyBmcm9tICcuLi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyc7XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICB7XG4gICAgd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBbbmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSldO1xuXG4gICAgICB1dGlscy5pc051bWJlcihleHBpcmVzKSAmJiBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKHBhdGgpICYmIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcoZG9tYWluKSAmJiBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuXG4gICAgICBzZWN1cmUgPT09IHRydWUgJiYgY29va2llLnB1c2goJ3NlY3VyZScpO1xuXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICB9LFxuXG4gICAgcmVhZChuYW1lKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgIH0sXG5cbiAgICByZW1vdmUobmFtZSkge1xuICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICB9XG4gIH1cblxuICA6XG5cbiAgLy8gTm9uLXN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICB7XG4gICAgd3JpdGUoKSB7fSxcbiAgICByZWFkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICByZW1vdmUoKSB7fVxuICB9O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpc0Fic29sdXRlVVJMIGZyb20gJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyc7XG5pbXBvcnQgY29tYmluZVVSTHMgZnJvbSAnLi4vaGVscGVycy9jb21iaW5lVVJMcy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4vLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICBjb25zdCBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICBjb25zdCB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsZXQgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdHMgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgbGV0IGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgY29va2llcyBmcm9tICcuLy4uL2hlbHBlcnMvY29va2llcy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi8uLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBzcGVlZG9tZXRlciBmcm9tICcuLi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzJztcblxuZnVuY3Rpb24gcHJvZ3Jlc3NFdmVudFJlZHVjZXIobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0pIHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZVxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9O1xufVxuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGxldCB7cmVzcG9uc2VUeXBlLCB3aXRoWFNSRlRva2VufSA9IGNvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgY29udGVudFR5cGU7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKGZhbHNlKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgICAgfSBlbHNlIGlmICgoY29udGVudFR5cGUgPSByZXF1ZXN0SGVhZGVycy5nZXRDb250ZW50VHlwZSgpKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy8gZml4IHNlbWljb2xvbiBkdXBsaWNhdGlvbiBpc3N1ZSBmb3IgUmVhY3ROYXRpdmUgRm9ybURhdGEgaW1wbGVtZW50YXRpb25cbiAgICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgY29uc3QgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIGNvbnN0IHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpKTtcbiAgICB9XG5cbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZihwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4oY29uZmlnKSk7XG5cbiAgICAgIGlmICh3aXRoWFNSRlRva2VuIHx8ICh3aXRoWFNSRlRva2VuICE9PSBmYWxzZSAmJiBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSkge1xuICAgICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgICAgY29uc3QgeHNyZlZhbHVlID0gY29uZmlnLnhzcmZIZWFkZXJOYW1lICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKTtcblxuICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KGNvbmZpZy54c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMudG9KU09OKCksIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGNhbmNlbCA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCBjYW5jZWwudHlwZSA/IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZywgcmVxdWVzdCkgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKGZ1bGxQYXRoKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL0F4aW9zRXJyb3IuanMnO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuY29uc3QgcmVuZGVyUmVhc29uID0gKHJlYXNvbikgPT4gYC0gJHtyZWFzb259YDtcblxuY29uc3QgaXNSZXNvbHZlZEhhbmRsZSA9IChhZGFwdGVyKSA9PiB1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRyYW5zZm9ybURhdGEgZnJvbSAnLi90cmFuc2Zvcm1EYXRhLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gXCIuLi9hZGFwdGVycy9hZGFwdGVycy5qc1wiO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgaWYgKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5pbmRleE9mKGNvbmZpZy5tZXRob2QpICE9PSAtMSkge1xuICAgIGNvbmZpZy5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcihjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyKTtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgIHJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZWFzb24ucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9BeGlvc0hlYWRlcnMuanNcIjtcblxuY29uc3QgaGVhZGVyc1RvT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyBpbnN0YW5jZW9mIEF4aW9zSGVhZGVycyA/IHRoaW5nLnRvSlNPTigpIDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIpID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYiksIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBcIjEuNi4yXCI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4uL2hlbHBlcnMvYnVpbGRVUkwuanMnO1xuaW1wb3J0IEludGVyY2VwdG9yTWFuYWdlciBmcm9tICcuL0ludGVyY2VwdG9yTWFuYWdlci5qcyc7XG5pbXBvcnQgZGlzcGF0Y2hSZXF1ZXN0IGZyb20gJy4vZGlzcGF0Y2hSZXF1ZXN0LmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4vYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgdmFsaWRhdG9yIGZyb20gJy4uL2hlbHBlcnMvdmFsaWRhdG9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi9BeGlvc0hlYWRlcnMuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmNsYXNzIEF4aW9zIHtcbiAgY29uc3RydWN0b3IoaW5zdGFuY2VDb25maWcpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgY29uc3Qge3RyYW5zaXRpb25hbCwgcGFyYW1zU2VyaWFsaXplciwgaGVhZGVyc30gPSBjb25maWc7XG5cbiAgICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zU2VyaWFsaXplciAhPSBudWxsKSB7XG4gICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJhbXNTZXJpYWxpemVyKSkge1xuICAgICAgICBjb25maWcucGFyYW1zU2VyaWFsaXplciA9IHtcbiAgICAgICAgICBzZXJpYWxpemU6IHBhcmFtc1NlcmlhbGl6ZXJcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMocGFyYW1zU2VyaWFsaXplciwge1xuICAgICAgICAgIGVuY29kZTogdmFsaWRhdG9ycy5mdW5jdGlvbixcbiAgICAgICAgICBzZXJpYWxpemU6IHZhbGlkYXRvcnMuZnVuY3Rpb25cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBsZXQgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGhlYWRlcnMgJiYgdXRpbHMuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9DYW5jZWxlZEVycm9yLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsVG9rZW59XG4gKi9cbmNsYXNzIENhbmNlbFRva2VuIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVQcm9taXNlO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4oY2FuY2VsID0+IHtcbiAgICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgICBsZXQgaSA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgICB9XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4gPSBvbmZ1bGZpbGxlZCA9PiB7XG4gICAgICBsZXQgX3Jlc29sdmU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqL1xuICB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgdGhyb3cgdGhpcy5yZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxUb2tlbjtcbiIsImNvbnN0IEh0dHBTdGF0dXNDb2RlID0ge1xuICBDb250aW51ZTogMTAwLFxuICBTd2l0Y2hpbmdQcm90b2NvbHM6IDEwMSxcbiAgUHJvY2Vzc2luZzogMTAyLFxuICBFYXJseUhpbnRzOiAxMDMsXG4gIE9rOiAyMDAsXG4gIENyZWF0ZWQ6IDIwMSxcbiAgQWNjZXB0ZWQ6IDIwMixcbiAgTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uOiAyMDMsXG4gIE5vQ29udGVudDogMjA0LFxuICBSZXNldENvbnRlbnQ6IDIwNSxcbiAgUGFydGlhbENvbnRlbnQ6IDIwNixcbiAgTXVsdGlTdGF0dXM6IDIwNyxcbiAgQWxyZWFkeVJlcG9ydGVkOiAyMDgsXG4gIEltVXNlZDogMjI2LFxuICBNdWx0aXBsZUNob2ljZXM6IDMwMCxcbiAgTW92ZWRQZXJtYW5lbnRseTogMzAxLFxuICBGb3VuZDogMzAyLFxuICBTZWVPdGhlcjogMzAzLFxuICBOb3RNb2RpZmllZDogMzA0LFxuICBVc2VQcm94eTogMzA1LFxuICBVbnVzZWQ6IDMwNixcbiAgVGVtcG9yYXJ5UmVkaXJlY3Q6IDMwNyxcbiAgUGVybWFuZW50UmVkaXJlY3Q6IDMwOCxcbiAgQmFkUmVxdWVzdDogNDAwLFxuICBVbmF1dGhvcml6ZWQ6IDQwMSxcbiAgUGF5bWVudFJlcXVpcmVkOiA0MDIsXG4gIEZvcmJpZGRlbjogNDAzLFxuICBOb3RGb3VuZDogNDA0LFxuICBNZXRob2ROb3RBbGxvd2VkOiA0MDUsXG4gIE5vdEFjY2VwdGFibGU6IDQwNixcbiAgUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA0MDcsXG4gIFJlcXVlc3RUaW1lb3V0OiA0MDgsXG4gIENvbmZsaWN0OiA0MDksXG4gIEdvbmU6IDQxMCxcbiAgTGVuZ3RoUmVxdWlyZWQ6IDQxMSxcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiA0MTIsXG4gIFBheWxvYWRUb29MYXJnZTogNDEzLFxuICBVcmlUb29Mb25nOiA0MTQsXG4gIFVuc3VwcG9ydGVkTWVkaWFUeXBlOiA0MTUsXG4gIFJhbmdlTm90U2F0aXNmaWFibGU6IDQxNixcbiAgRXhwZWN0YXRpb25GYWlsZWQ6IDQxNyxcbiAgSW1BVGVhcG90OiA0MTgsXG4gIE1pc2RpcmVjdGVkUmVxdWVzdDogNDIxLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5OiA0MjIsXG4gIExvY2tlZDogNDIzLFxuICBGYWlsZWREZXBlbmRlbmN5OiA0MjQsXG4gIFRvb0Vhcmx5OiA0MjUsXG4gIFVwZ3JhZGVSZXF1aXJlZDogNDI2LFxuICBQcmVjb25kaXRpb25SZXF1aXJlZDogNDI4LFxuICBUb29NYW55UmVxdWVzdHM6IDQyOSxcbiAgUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiA0MzEsXG4gIFVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zOiA0NTEsXG4gIEludGVybmFsU2VydmVyRXJyb3I6IDUwMCxcbiAgTm90SW1wbGVtZW50ZWQ6IDUwMSxcbiAgQmFkR2F0ZXdheTogNTAyLFxuICBTZXJ2aWNlVW5hdmFpbGFibGU6IDUwMyxcbiAgR2F0ZXdheVRpbWVvdXQ6IDUwNCxcbiAgSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IDUwNSxcbiAgVmFyaWFudEFsc29OZWdvdGlhdGVzOiA1MDYsXG4gIEluc3VmZmljaWVudFN0b3JhZ2U6IDUwNyxcbiAgTG9vcERldGVjdGVkOiA1MDgsXG4gIE5vdEV4dGVuZGVkOiA1MTAsXG4gIE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA1MTEsXG59O1xuXG5PYmplY3QuZW50cmllcyhIdHRwU3RhdHVzQ29kZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlW3ZhbHVlXSA9IGtleTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBIdHRwU3RhdHVzQ29kZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzJztcbmltcG9ydCBIdHRwU3RhdHVzQ29kZSBmcm9tICcuL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbjtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnM7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBSYW5kb21GYWN0ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtmYWN0cywgc2V0RmFjdHNdID0gdXNlU3RhdGUoW10pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEZhY3RzKCk7XHJcbiAgICB9LCBbXSk7XHJcbiAgXHJcblxyXG4gICAgY29uc3QgZ2V0RmFjdHMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmFwaS1uaW5qYXMuY29tL3YxL2ZhY3RzP2xpbWl0PTVgO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnWC1BcGktS2V5JzogJ0QrZFlqQ3hEU201ZkVrSXF5b0NJZUE9PWMyR3Z1alhUaUFiTUlIMDUnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmV6dWx0YXQgY2luamVuaWNhXCIsIGRhdGEpXHJcblxyXG4gICAgICAgICAgICBzZXRGYWN0cyhkYXRhKTtcclxuICAgICAgICAgXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD48ZGl2IGNsYXNzTmFtZT1cImZhY3RzXCI+XHJcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0YWJsZVwiPlxyXG4gICAgICAgICAgICAgICAgPHRoZWFkID5cclxuXHJcbiAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPldFTENPTUU8L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlJhbmRvbSBGYWN0czo8L2gzPjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHtmYWN0cy5tYXAoKGRhdGFPYmopID0+IChcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dGJvZHkga2V5PXtkYXRhT2JqLmZhY3R9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgPntkYXRhT2JqLmZhY3R9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj48L2hyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG5cclxuICAgICAgICAgICAgICAgICkpfVxyXG5cclxuICAgICAgICAgICAgPC90YWJsZSA+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICBcclxuICAgICAgICA8Lz5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFJhbmRvbUZhY3Q7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgRm9vdGVycyBmcm9tIFwiLi9Gb290ZXJzXCI7XHJcbmltcG9ydCBSYW5kb21GYWN0IGZyb20gXCIuL3RyaXZpYS9SYW5kb21GYWN0XCI7XHJcblxyXG5jb25zdCBIb21lID0gKCkgPT4ge1xyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzbGlrYVwiPlxyXG4gICAgICAgXHJcblxyXG4gICAgICAgIDxSYW5kb21GYWN0IC8+XHJcbiAgICAgICBcclxuICAgICAgICA8L2Rpdj5cclxuICAgXHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgSG9tZTsiLCIvLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLWlvcy9ibG9iL2JjYTM2MTA3NDA1NTk0ZDViN2IxNjI2NWE1YjBlZDY5OGY4NWE1ZWUvY29tcG9uZW50cy9FbGV2YXRpb24vc3JjL1VJQ29sb3IlMkJNYXRlcmlhbEVsZXZhdGlvbi5tI0w2MVxuY29uc3QgZ2V0T3ZlcmxheUFscGhhID0gZWxldmF0aW9uID0+IHtcbiAgbGV0IGFscGhhVmFsdWU7XG4gIGlmIChlbGV2YXRpb24gPCAxKSB7XG4gICAgYWxwaGFWYWx1ZSA9IDUuMTE5MTYgKiBlbGV2YXRpb24gKiogMjtcbiAgfSBlbHNlIHtcbiAgICBhbHBoYVZhbHVlID0gNC41ICogTWF0aC5sb2coZWxldmF0aW9uICsgMSkgKyAyO1xuICB9XG4gIHJldHVybiAoYWxwaGFWYWx1ZSAvIDEwMCkudG9GaXhlZCgyKTtcbn07XG5leHBvcnQgZGVmYXVsdCBnZXRPdmVybGF5QWxwaGE7IiwiaW1wb3J0IHsgdW5zdGFibGVfZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBhcyBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlQYXBlcicsIHNsb3QpO1xufVxuY29uc3QgcGFwZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUGFwZXInLCBbJ3Jvb3QnLCAncm91bmRlZCcsICdvdXRsaW5lZCcsICdlbGV2YXRpb24nLCAnZWxldmF0aW9uMCcsICdlbGV2YXRpb24xJywgJ2VsZXZhdGlvbjInLCAnZWxldmF0aW9uMycsICdlbGV2YXRpb240JywgJ2VsZXZhdGlvbjUnLCAnZWxldmF0aW9uNicsICdlbGV2YXRpb243JywgJ2VsZXZhdGlvbjgnLCAnZWxldmF0aW9uOScsICdlbGV2YXRpb24xMCcsICdlbGV2YXRpb24xMScsICdlbGV2YXRpb24xMicsICdlbGV2YXRpb24xMycsICdlbGV2YXRpb24xNCcsICdlbGV2YXRpb24xNScsICdlbGV2YXRpb24xNicsICdlbGV2YXRpb24xNycsICdlbGV2YXRpb24xOCcsICdlbGV2YXRpb24xOScsICdlbGV2YXRpb24yMCcsICdlbGV2YXRpb24yMScsICdlbGV2YXRpb24yMicsICdlbGV2YXRpb24yMycsICdlbGV2YXRpb24yNCddKTtcbmV4cG9ydCBkZWZhdWx0IHBhcGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJlbGV2YXRpb25cIiwgXCJzcXVhcmVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGludGVnZXJQcm9wVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGdldE92ZXJsYXlBbHBoYSBmcm9tICcuLi9zdHlsZXMvZ2V0T3ZlcmxheUFscGhhJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgZ2V0UGFwZXJVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3BhcGVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIHNxdWFyZSxcbiAgICBlbGV2YXRpb24sXG4gICAgdmFyaWFudCxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCAhc3F1YXJlICYmICdyb3VuZGVkJywgdmFyaWFudCA9PT0gJ2VsZXZhdGlvbicgJiYgYGVsZXZhdGlvbiR7ZWxldmF0aW9ufWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0UGFwZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFBhcGVyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpUGFwZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sICFvd25lclN0YXRlLnNxdWFyZSAmJiBzdHlsZXMucm91bmRlZCwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZWxldmF0aW9uJyAmJiBzdHlsZXNbYGVsZXZhdGlvbiR7b3duZXJTdGF0ZS5lbGV2YXRpb259YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHZhcnMkb3ZlcmxheXM7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3gtc2hhZG93JylcbiAgfSwgIW93bmVyU3RhdGUuc3F1YXJlICYmIHtcbiAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICAgIGJvcmRlcjogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YFxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIF9leHRlbmRzKHtcbiAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzW293bmVyU3RhdGUuZWxldmF0aW9uXVxuICB9LCAhdGhlbWUudmFycyAmJiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdkYXJrJyAmJiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiBgbGluZWFyLWdyYWRpZW50KCR7YWxwaGEoJyNmZmYnLCBnZXRPdmVybGF5QWxwaGEob3duZXJTdGF0ZS5lbGV2YXRpb24pKX0sICR7YWxwaGEoJyNmZmYnLCBnZXRPdmVybGF5QWxwaGEob3duZXJTdGF0ZS5lbGV2YXRpb24pKX0pYFxuICB9LCB0aGVtZS52YXJzICYmIHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IChfdGhlbWUkdmFycyRvdmVybGF5cyA9IHRoZW1lLnZhcnMub3ZlcmxheXMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFycyRvdmVybGF5c1tvd25lclN0YXRlLmVsZXZhdGlvbl1cbiAgfSkpO1xufSk7XG5jb25zdCBQYXBlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBhcGVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlQYXBlcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgZWxldmF0aW9uID0gMSxcbiAgICAgIHNxdWFyZSA9IGZhbHNlLFxuICAgICAgdmFyaWFudCA9ICdlbGV2YXRpb24nXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgZWxldmF0aW9uLFxuICAgIHNxdWFyZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICAgIGlmICh0aGVtZS5zaGFkb3dzW2VsZXZhdGlvbl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGVsZXZhdGlvbiBwcm92aWRlZCA8UGFwZXIgZWxldmF0aW9uPXske2VsZXZhdGlvbn19PiBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSB0aGVtZS5gLCBgUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IFxcYHRoZW1lLnNoYWRvd3NbJHtlbGV2YXRpb259XVxcYCBpcyBkZWZpbmVkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFBhcGVyUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhcGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBTaGFkb3cgZGVwdGgsIGNvcnJlc3BvbmRzIHRvIGBkcGAgaW4gdGhlIHNwZWMuXG4gICAqIEl0IGFjY2VwdHMgdmFsdWVzIGJldHdlZW4gMCBhbmQgMjQgaW5jbHVzaXZlLlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBlbGV2YXRpb246IGNoYWluUHJvcFR5cGVzKGludGVnZXJQcm9wVHlwZSwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbixcbiAgICAgIHZhcmlhbnRcbiAgICB9ID0gcHJvcHM7XG4gICAgaWYgKGVsZXZhdGlvbiA+IDAgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgTVVJOiBDb21iaW5pbmcgXFxgZWxldmF0aW9uPXske2VsZXZhdGlvbn19XFxgIHdpdGggXFxgdmFyaWFudD1cIiR7dmFyaWFudH1cIlxcYCBoYXMgbm8gZWZmZWN0LiBFaXRoZXIgdXNlIFxcYGVsZXZhdGlvbj17MH1cXGAgb3IgdXNlIGEgZGlmZmVyZW50IFxcYHZhcmlhbnRcXGAuYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNxdWFyZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdlbGV2YXRpb24nXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2VsZXZhdGlvbicsICdvdXRsaW5lZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUGFwZXI7IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vb3duZXJEb2N1bWVudCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lcldpbmRvdyhub2RlKSB7XG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZSk7XG4gIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DaGFuZ2VcIiwgXCJtYXhSb3dzXCIsIFwibWluUm93c1wiLCBcInN0eWxlXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IHVuc3RhYmxlX2RlYm91bmNlIGFzIGRlYm91bmNlLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGdldFN0eWxlVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCkgfHwgMDtcbn1cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2hhZG93OiB7XG4gICAgLy8gVmlzaWJpbGl0eSBuZWVkZWQgdG8gaGlkZSB0aGUgZXh0cmEgdGV4dCBhcmVhIG9uIGlQYWRzXG4gICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgLy8gUmVtb3ZlIGZyb20gdGhlIGNvbnRlbnQgZmxvd1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIC8vIElnbm9yZSB0aGUgc2Nyb2xsYmFyIHdpZHRoXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIGhlaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICAvLyBDcmVhdGUgYSBuZXcgbGF5ZXIsIGluY3JlYXNlIHRoZSBpc29sYXRpb24gb2YgdGhlIGNvbXB1dGVkIHZhbHVlc1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknXG4gIH1cbn07XG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gb2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsIHx8IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwIHx8IG9iai5vdXRlckhlaWdodFN0eWxlID09PSAwICYmICFvYmoub3ZlcmZsb3c7XG59XG5cbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1RleHRhcmVhIEF1dG9zaXplXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pXG4gKiAtIFtUZXh0YXJlYSBBdXRvc2l6ZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbVGV4dGFyZWFBdXRvc2l6ZSBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplL2NvbXBvbmVudHMtYXBpLyN0ZXh0YXJlYS1hdXRvc2l6ZSlcbiAqL1xuY29uc3QgVGV4dGFyZWFBdXRvc2l6ZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRhcmVhQXV0b3NpemUocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICBjb25zdCB7XG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG1heFJvd3MsXG4gICAgICBtaW5Sb3dzID0gMSxcbiAgICAgIHN0eWxlLFxuICAgICAgdmFsdWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICB9ID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihmb3J3YXJkZWRSZWYsIGlucHV0UmVmKTtcbiAgY29uc3Qgc2hhZG93UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCByZW5kZXJzID0gUmVhY3QudXNlUmVmKDApO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBvdXRlckhlaWdodFN0eWxlOiAwXG4gIH0pO1xuICBjb25zdCBnZXRVcGRhdGVkU3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0KTtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gY29udGFpbmVyV2luZG93LmdldENvbXB1dGVkU3R5bGUoaW5wdXQpO1xuXG4gICAgLy8gSWYgaW5wdXQncyB3aWR0aCBpcyBzaHJ1bmsgYW5kIGl0J3Mgbm90IHZpc2libGUsIGRvbid0IHN5bmMgaGVpZ2h0LlxuICAgIGlmIChjb21wdXRlZFN0eWxlLndpZHRoID09PSAnMHB4Jykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3V0ZXJIZWlnaHRTdHlsZTogMFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRTaGFsbG93ID0gc2hhZG93UmVmLmN1cnJlbnQ7XG4gICAgaW5wdXRTaGFsbG93LnN0eWxlLndpZHRoID0gY29tcHV0ZWRTdHlsZS53aWR0aDtcbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSBpbnB1dC52YWx1ZSB8fCBwcm9wcy5wbGFjZWhvbGRlciB8fCAneCc7XG4gICAgaWYgKGlucHV0U2hhbGxvdy52YWx1ZS5zbGljZSgtMSkgPT09ICdcXG4nKSB7XG4gICAgICAvLyBDZXJ0YWluIGZvbnRzIHdoaWNoIG92ZXJmbG93IHRoZSBsaW5lIGhlaWdodCB3aWxsIGNhdXNlIHRoZSB0ZXh0YXJlYVxuICAgICAgLy8gdG8gcmVwb3J0IGEgZGlmZmVyZW50IHNjcm9sbEhlaWdodCBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbGFzdCBsaW5lXG4gICAgICAvLyBpcyBlbXB0eS4gTWFrZSBpdCBub24tZW1wdHkgdG8gYXZvaWQgdGhpcyBpc3N1ZS5cbiAgICAgIGlucHV0U2hhbGxvdy52YWx1ZSArPSAnICc7XG4gICAgfVxuICAgIGNvbnN0IGJveFNpemluZyA9IGNvbXB1dGVkU3R5bGUuYm94U2l6aW5nO1xuICAgIGNvbnN0IHBhZGRpbmcgPSBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUucGFkZGluZ0JvdHRvbSkgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUucGFkZGluZ1RvcCk7XG4gICAgY29uc3QgYm9yZGVyID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCk7XG5cbiAgICAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBpbm5lciBjb250ZW50XG4gICAgY29uc3QgaW5uZXJIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgLy8gTWVhc3VyZSBoZWlnaHQgb2YgYSB0ZXh0YXJlYSB3aXRoIGEgc2luZ2xlIHJvd1xuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9ICd4JztcbiAgICBjb25zdCBzaW5nbGVSb3dIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgLy8gVGhlIGhlaWdodCBvZiB0aGUgb3V0ZXIgY29udGVudFxuICAgIGxldCBvdXRlckhlaWdodCA9IGlubmVySGVpZ2h0O1xuICAgIGlmIChtaW5Sb3dzKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KE51bWJlcihtaW5Sb3dzKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cbiAgICBpZiAobWF4Um93cykge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1pbihOdW1iZXIobWF4Um93cykgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG4gICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChvdXRlckhlaWdodCwgc2luZ2xlUm93SGVpZ2h0KTtcblxuICAgIC8vIFRha2UgdGhlIGJveCBzaXppbmcgaW50byBhY2NvdW50IGZvciBhcHBseWluZyB0aGlzIHZhbHVlIGFzIGEgc3R5bGUuXG4gICAgY29uc3Qgb3V0ZXJIZWlnaHRTdHlsZSA9IG91dGVySGVpZ2h0ICsgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnID8gcGFkZGluZyArIGJvcmRlciA6IDApO1xuICAgIGNvbnN0IG92ZXJmbG93ID0gTWF0aC5hYnMob3V0ZXJIZWlnaHQgLSBpbm5lckhlaWdodCkgPD0gMTtcbiAgICByZXR1cm4ge1xuICAgICAgb3V0ZXJIZWlnaHRTdHlsZSxcbiAgICAgIG92ZXJmbG93XG4gICAgfTtcbiAgfSwgW21heFJvd3MsIG1pblJvd3MsIHByb3BzLnBsYWNlaG9sZGVyXSk7XG4gIGNvbnN0IHVwZGF0ZVN0YXRlID0gKHByZXZTdGF0ZSwgbmV3U3RhdGUpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvdXRlckhlaWdodFN0eWxlLFxuICAgICAgb3ZlcmZsb3dcbiAgICB9ID0gbmV3U3RhdGU7XG4gICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbmNlIHRvIHVwZGF0ZSB0aGUgaGVpZ2h0LlxuICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgaWYgKHJlbmRlcnMuY3VycmVudCA8IDIwICYmIChvdXRlckhlaWdodFN0eWxlID4gMCAmJiBNYXRoLmFicygocHJldlN0YXRlLm91dGVySGVpZ2h0U3R5bGUgfHwgMCkgLSBvdXRlckhlaWdodFN0eWxlKSA+IDEgfHwgcHJldlN0YXRlLm92ZXJmbG93ICE9PSBvdmVyZmxvdykpIHtcbiAgICAgIHJlbmRlcnMuY3VycmVudCArPSAxO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3ZlcmZsb3csXG4gICAgICAgIG91dGVySGVpZ2h0U3R5bGVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocmVuZGVycy5jdXJyZW50ID09PSAyMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUb28gbWFueSByZS1yZW5kZXJzLiBUaGUgbGF5b3V0IGlzIHVuc3RhYmxlLicsICdUZXh0YXJlYUF1dG9zaXplIGxpbWl0cyB0aGUgbnVtYmVyIG9mIHJlbmRlcnMgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgfTtcbiAgY29uc3Qgc3luY0hlaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGdldFVwZGF0ZWRTdGF0ZSgpO1xuICAgIGlmIChpc0VtcHR5KG5ld1N0YXRlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRTdGF0ZShwcmV2U3RhdGUgPT4gdXBkYXRlU3RhdGUocHJldlN0YXRlLCBuZXdTdGF0ZSkpO1xuICB9LCBbZ2V0VXBkYXRlZFN0YXRlXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzeW5jSGVpZ2h0V2l0aEZsdXNoU3luYyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gZ2V0VXBkYXRlZFN0YXRlKCk7XG4gICAgICBpZiAoaXNFbXB0eShuZXdTdGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJbiBSZWFjdCAxOCwgc3RhdGUgdXBkYXRlcyBpbiBhIFJlc2l6ZU9ic2VydmVyJ3MgY2FsbGJhY2sgYXJlIGhhcHBlbmluZyBhZnRlclxuICAgICAgLy8gdGhlIHBhaW50LCB0aGlzIGxlYWRzIHRvIGFuIGluZmluaXRlIHJlbmRlcmluZy5cbiAgICAgIC8vXG4gICAgICAvLyBVc2luZyBmbHVzaFN5bmMgZW5zdXJlcyB0aGF0IHRoZSBzdGF0ZXMgaXMgdXBkYXRlZCBiZWZvcmUgdGhlIG5leHQgcGFpbi5cbiAgICAgIC8vIFJlbGF0ZWQgaXNzdWUgLSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzI0MzMxXG4gICAgICBSZWFjdERPTS5mbHVzaFN5bmMoKCkgPT4ge1xuICAgICAgICBzZXRTdGF0ZShwcmV2U3RhdGUgPT4gdXBkYXRlU3RhdGUocHJldlN0YXRlLCBuZXdTdGF0ZSkpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICAgICAgc3luY0hlaWdodFdpdGhGbHVzaFN5bmMoKTtcbiAgICB9O1xuICAgIC8vIFdvcmthcm91bmQgYSBcIlJlc2l6ZU9ic2VydmVyIGxvb3AgY29tcGxldGVkIHdpdGggdW5kZWxpdmVyZWQgbm90aWZpY2F0aW9uc1wiIGVycm9yXG4gICAgLy8gaW4gdGVzdC5cbiAgICAvLyBOb3RlIHRoYXQgd2UgbWlnaHQgbmVlZCB0byB1c2UgdGhpcyBsb2dpYyBpbiBwcm9kdWN0aW9uIHBlciBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9yZXNpemUtb2JzZXJ2ZXIvaXNzdWVzLzM4XG4gICAgLy8gQWxzbyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tdWkteC9pc3N1ZXMvODczM1xuICAgIGxldCByQUY7XG4gICAgY29uc3QgckFGSGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUockFGKTtcbiAgICAgIHJBRiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGhhbmRsZVJlc2l6ZSgpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBkZWJvdW5jZUhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGhhbmRsZVJlc2l6ZSk7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0KTtcbiAgICBjb250YWluZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VIYW5kbGVSZXNpemUpO1xuICAgIGxldCByZXNpemVPYnNlcnZlcjtcbiAgICBpZiAodHlwZW9mIFJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyA/IHJBRkhhbmRsZVJlc2l6ZSA6IGhhbmRsZVJlc2l6ZSk7XG4gICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGlucHV0KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRlYm91bmNlSGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyQUYpO1xuICAgICAgY29udGFpbmVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlSGFuZGxlUmVzaXplKTtcbiAgICAgIGlmIChyZXNpemVPYnNlcnZlcikge1xuICAgICAgICByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2dldFVwZGF0ZWRTdGF0ZV0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgc3luY0hlaWdodCgpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICB9LCBbdmFsdWVdKTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gZXZlbnQgPT4ge1xuICAgIHJlbmRlcnMuY3VycmVudCA9IDA7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChcInRleHRhcmVhXCIsIF9leHRlbmRzKHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgLy8gQXBwbHkgdGhlIHJvd3MgcHJvcCB0byBnZXQgYSBcImNvcnJlY3RcIiBmaXJzdCBTU1IgcGFpbnRcbiAgICAgICxcbiAgICAgIHJvd3M6IG1pblJvd3MsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBoZWlnaHQ6IHN0YXRlLm91dGVySGVpZ2h0U3R5bGUsXG4gICAgICAgIC8vIE5lZWQgYSBsYXJnZSBlbm91Z2ggZGlmZmVyZW5jZSB0byBhbGxvdyBzY3JvbGxpbmcuXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgICAgIG92ZXJmbG93OiBzdGF0ZS5vdmVyZmxvdyA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICB9LCBzdHlsZSlcbiAgICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovX2pzeChcInRleHRhcmVhXCIsIHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICByZWY6IHNoYWRvd1JlZixcbiAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGVzLnNoYWRvdywgc3R5bGUsIHtcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogMFxuICAgICAgfSlcbiAgICB9KV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRhcmVhQXV0b3NpemUucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBUZXh0YXJlYUF1dG9zaXplIH07IiwiLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuLy8gQSBmZXcgYnl0ZXMgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyB+MyBrQiBhbmQgZGVib3VuY2UgfjMwMCBCLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCA9IDE2Nikge1xuICBsZXQgdGltZW91dDtcbiAgZnVuY3Rpb24gZGVib3VuY2VkKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBsYXRlciA9ICgpID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICB9XG4gIGRlYm91bmNlZC5jbGVhciA9ICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH07XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59IiwiLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBhIERPTSBlbGVtZW50IG5hbWUgKGkuZS4gbm90IGEgUmVhY3QgY29tcG9uZW50KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSG9zdENvbXBvbmVudChlbGVtZW50KSB7XG4gIHJldHVybiB0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZyc7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBGb3JtQ29udHJvbENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRm9ybUNvbnRyb2xDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Zvcm1Db250cm9sQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbENvbnRleHQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRW5oYW5jZWRFZmZlY3Q7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IG51bGwgfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHbG9iYWxTdHlsZXMocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHN0eWxlcyxcbiAgICBkZWZhdWx0VGhlbWUgPSB7fVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGdsb2JhbFN0eWxlcyA9IHR5cGVvZiBzdHlsZXMgPT09ICdmdW5jdGlvbicgPyB0aGVtZUlucHV0ID0+IHN0eWxlcyhpc0VtcHR5KHRoZW1lSW5wdXQpID8gZGVmYXVsdFRoZW1lIDogdGhlbWVJbnB1dCkgOiBzdHlsZXM7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChHbG9iYWwsIHtcbiAgICBzdHlsZXM6IGdsb2JhbFN0eWxlc1xuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdsb2JhbFN0eWxlcy5wcm9wVHlwZXMgPSB7XG4gIGRlZmF1bHRUaGVtZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc3R5bGVzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXksIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSlcbn0gOiB2b2lkIDA7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgR2xvYmFsU3R5bGVzIGFzIE11aUdsb2JhbFN0eWxlcyB9IGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIEdsb2JhbFN0eWxlcyh7XG4gIHN0eWxlcyxcbiAgdGhlbWVJZCxcbiAgZGVmYXVsdFRoZW1lID0ge31cbn0pIHtcbiAgY29uc3QgdXBwZXJUaGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gIGNvbnN0IGdsb2JhbFN0eWxlcyA9IHR5cGVvZiBzdHlsZXMgPT09ICdmdW5jdGlvbicgPyBzdHlsZXModGhlbWVJZCA/IHVwcGVyVGhlbWVbdGhlbWVJZF0gfHwgdXBwZXJUaGVtZSA6IHVwcGVyVGhlbWUpIDogc3R5bGVzO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTXVpR2xvYmFsU3R5bGVzLCB7XG4gICAgc3R5bGVzOiBnbG9iYWxTdHlsZXNcbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHbG9iYWxTdHlsZXMucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGVmYXVsdFRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGVzOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZUlkOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgR2xvYmFsU3R5bGVzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgR2xvYmFsU3R5bGVzIGFzIFN5c3RlbUdsb2JhbFN0eWxlcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi4vc3R5bGVzL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgVEhFTUVfSUQgZnJvbSAnLi4vc3R5bGVzL2lkZW50aWZpZXInO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIEdsb2JhbFN0eWxlcyhwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3lzdGVtR2xvYmFsU3R5bGVzLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZSxcbiAgICB0aGVtZUlkOiBUSEVNRV9JRFxuICB9KSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHbG9iYWxTdHlsZXMucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIHN0eWxlcyB5b3Ugd2FudCB0byBhcHBseSBnbG9iYWxseS5cbiAgICovXG4gIHN0eWxlczogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYm9vbF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgR2xvYmFsU3R5bGVzOyIsIi8vIFN1cHBvcnRzIGRldGVybWluYXRpb24gb2YgaXNDb250cm9sbGVkKCkuXG4vLyBDb250cm9sbGVkIGlucHV0IGFjY2VwdHMgaXRzIGN1cnJlbnQgdmFsdWUgYXMgYSBwcm9wLlxuLy9cbi8vIEBzZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9mb3Jtcy5odG1sI2NvbnRyb2xsZWQtY29tcG9uZW50c1xuLy8gQHBhcmFtIHZhbHVlXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBzdHJpbmcgKGluY2x1ZGluZyAnJykgb3IgbnVtYmVyIChpbmNsdWRpbmcgemVybylcbmV4cG9ydCBmdW5jdGlvbiBoYXNWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAhKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCk7XG59XG5cbi8vIERldGVybWluZSBpZiBmaWVsZCBpcyBlbXB0eSBvciBmaWxsZWQuXG4vLyBSZXNwb25zZSBkZXRlcm1pbmVzIGlmIGxhYmVsIGlzIHByZXNlbnRlZCBhYm92ZSBmaWVsZCBvciBhcyBwbGFjZWhvbGRlci5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcGFyYW0gU1NSXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBub3QgcHJlc2VudCBvciBlbXB0eSBzdHJpbmcuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFueSBudW1iZXIgb3Igc3RyaW5nIHdpdGggbGVuZ3RoLlxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsbGVkKG9iaiwgU1NSID0gZmFsc2UpIHtcbiAgcmV0dXJuIG9iaiAmJiAoaGFzVmFsdWUob2JqLnZhbHVlKSAmJiBvYmoudmFsdWUgIT09ICcnIHx8IFNTUiAmJiBoYXNWYWx1ZShvYmouZGVmYXVsdFZhbHVlKSAmJiBvYmouZGVmYXVsdFZhbHVlICE9PSAnJyk7XG59XG5cbi8vIERldGVybWluZSBpZiBhbiBJbnB1dCBpcyBhZG9ybmVkIG9uIHN0YXJ0LlxuLy8gSXQncyBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IHdpdGggTFRSLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vIGFkb3JubWVudHMuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFkb3JuZWQgYXQgdGhlIHN0YXJ0LlxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRvcm5lZFN0YXJ0KG9iaikge1xuICByZXR1cm4gb2JqLnN0YXJ0QWRvcm5tZW50O1xufSIsImltcG9ydCB7IHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMgYXMgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUlucHV0QmFzZScsIHNsb3QpO1xufVxuY29uc3QgaW5wdXRCYXNlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUlucHV0QmFzZScsIFsncm9vdCcsICdmb3JtQ29udHJvbCcsICdmb2N1c2VkJywgJ2Rpc2FibGVkJywgJ2Fkb3JuZWRTdGFydCcsICdhZG9ybmVkRW5kJywgJ2Vycm9yJywgJ3NpemVTbWFsbCcsICdtdWx0aWxpbmUnLCAnY29sb3JTZWNvbmRhcnknLCAnZnVsbFdpZHRoJywgJ2hpZGRlbkxhYmVsJywgJ3JlYWRPbmx5JywgJ2lucHV0JywgJ2lucHV0U2l6ZVNtYWxsJywgJ2lucHV0TXVsdGlsaW5lJywgJ2lucHV0VHlwZVNlYXJjaCcsICdpbnB1dEFkb3JuZWRTdGFydCcsICdpbnB1dEFkb3JuZWRFbmQnLCAnaW5wdXRIaWRkZW5MYWJlbCddKTtcbmV4cG9ydCBkZWZhdWx0IGlucHV0QmFzZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlc1wiLCBcImVuZEFkb3JubWVudFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWRcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImlucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcIm1hcmdpblwiLCBcIm1heFJvd3NcIiwgXCJtaW5Sb3dzXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclN1ZmZpeFwiLCBcInJvd3NcIiwgXCJzaXplXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIiwgXCJzdGFydEFkb3JubWVudFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUsIGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcywgaXNIb3N0Q29tcG9uZW50LCBUZXh0YXJlYUF1dG9zaXplIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0JztcbmltcG9ydCBHbG9iYWxTdHlsZXMgZnJvbSAnLi4vR2xvYmFsU3R5bGVzJztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgaW5wdXRCYXNlQ2xhc3NlcywgeyBnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2lucHV0QmFzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCByb290T3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuZm9ybUNvbnRyb2wgJiYgc3R5bGVzLmZvcm1Db250cm9sLCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHN0eWxlcy5hZG9ybmVkU3RhcnQsIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHN0eWxlcy5hZG9ybmVkRW5kLCBvd25lclN0YXRlLmVycm9yICYmIHN0eWxlcy5lcnJvciwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHN0eWxlcy5zaXplU21hbGwsIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHN0eWxlcy5tdWx0aWxpbmUsIG93bmVyU3RhdGUuY29sb3IgJiYgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYgc3R5bGVzLmZ1bGxXaWR0aCwgb3duZXJTdGF0ZS5oaWRkZW5MYWJlbCAmJiBzdHlsZXMuaGlkZGVuTGFiZWxdO1xufTtcbmV4cG9ydCBjb25zdCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3N0eWxlcy5pbnB1dCwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHN0eWxlcy5pbnB1dFNpemVTbWFsbCwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgc3R5bGVzLmlucHV0TXVsdGlsaW5lLCBvd25lclN0YXRlLnR5cGUgPT09ICdzZWFyY2gnICYmIHN0eWxlcy5pbnB1dFR5cGVTZWFyY2gsIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYgc3R5bGVzLmlucHV0QWRvcm5lZFN0YXJ0LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiBzdHlsZXMuaW5wdXRBZG9ybmVkRW5kLCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHN0eWxlcy5pbnB1dEhpZGRlbkxhYmVsXTtcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbCxcbiAgICBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHJlYWRPbmx5LFxuICAgIHNpemUsXG4gICAgc3RhcnRBZG9ybm1lbnQsXG4gICAgdHlwZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBlcnJvciAmJiAnZXJyb3InLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCcsIGZvY3VzZWQgJiYgJ2ZvY3VzZWQnLCBmb3JtQ29udHJvbCAmJiAnZm9ybUNvbnRyb2wnLCBzaXplICYmIHNpemUgIT09ICdtZWRpdW0nICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIG11bHRpbGluZSAmJiAnbXVsdGlsaW5lJywgc3RhcnRBZG9ybm1lbnQgJiYgJ2Fkb3JuZWRTdGFydCcsIGVuZEFkb3JubWVudCAmJiAnYWRvcm5lZEVuZCcsIGhpZGRlbkxhYmVsICYmICdoaWRkZW5MYWJlbCcsIHJlYWRPbmx5ICYmICdyZWFkT25seSddLFxuICAgIGlucHV0OiBbJ2lucHV0JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgdHlwZSA9PT0gJ3NlYXJjaCcgJiYgJ2lucHV0VHlwZVNlYXJjaCcsIG11bHRpbGluZSAmJiAnaW5wdXRNdWx0aWxpbmUnLCBzaXplID09PSAnc21hbGwnICYmICdpbnB1dFNpemVTbWFsbCcsIGhpZGRlbkxhYmVsICYmICdpbnB1dEhpZGRlbkxhYmVsJywgc3RhcnRBZG9ybm1lbnQgJiYgJ2lucHV0QWRvcm5lZFN0YXJ0JywgZW5kQWRvcm5tZW50ICYmICdpbnB1dEFkb3JuZWRFbmQnLCByZWFkT25seSAmJiAncmVhZE9ubHknXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldElucHV0QmFzZVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGNvbnN0IElucHV0QmFzZVJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUlucHV0QmFzZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IHJvb3RPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gIGxpbmVIZWlnaHQ6ICcxLjQzNzVlbScsXG4gIC8vIDIzcHhcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIGZ1bGxXaWR0aC5cbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGN1cnNvcjogJ3RleHQnLFxuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgW2AmLiR7aW5wdXRCYXNlQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LmRpc2FibGVkLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH1cbn0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgcGFkZGluZzogJzRweCAwIDVweCdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDFcbn0pLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiB7XG4gIHdpZHRoOiAnMTAwJSdcbn0pKTtcbmV4cG9ydCBjb25zdCBJbnB1dEJhc2VDb21wb25lbnQgPSBzdHlsZWQoJ2lucHV0Jywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJyxcbiAgc2xvdDogJ0lucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnO1xuICBjb25zdCBwbGFjZWhvbGRlciA9IF9leHRlbmRzKHtcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgfSwgdGhlbWUudmFycyA/IHtcbiAgICBvcGFjaXR5OiB0aGVtZS52YXJzLm9wYWNpdHkuaW5wdXRQbGFjZWhvbGRlclxuICB9IDoge1xuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNVxuICB9LCB7XG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICB9KVxuICB9KTtcbiAgY29uc3QgcGxhY2Vob2xkZXJIaWRkZW4gPSB7XG4gICAgb3BhY2l0eTogJzAgIWltcG9ydGFudCdcbiAgfTtcbiAgY29uc3QgcGxhY2Vob2xkZXJWaXNpYmxlID0gdGhlbWUudmFycyA/IHtcbiAgICBvcGFjaXR5OiB0aGVtZS52YXJzLm9wYWNpdHkuaW5wdXRQbGFjZWhvbGRlclxuICB9IDoge1xuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICBsZXR0ZXJTcGFjaW5nOiAnaW5oZXJpdCcsXG4gICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIHBhZGRpbmc6ICc0cHggMCA1cHgnLFxuICAgIGJvcmRlcjogMCxcbiAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgIGhlaWdodDogJzEuNDM3NWVtJyxcbiAgICAvLyBSZXNldCAyM3B4dGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgIG1hcmdpbjogMCxcbiAgICAvLyBSZXNldCBmb3IgU2FmYXJpXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAvLyBNYWtlIHRoZSBmbGV4IGl0ZW0gc2hyaW5rIHdpdGggRmlyZWZveFxuICAgIG1pbldpZHRoOiAwLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgLy8gRml4IElFMTEgd2lkdGggaXNzdWVcbiAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbC1jYW5jZWwnLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMTBtcycsXG4gICAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgJyY6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgLy8gSUUxMVxuICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAvLyBFZGdlXG4gICAgJyY6Zm9jdXMnOiB7XG4gICAgICBvdXRsaW5lOiAwXG4gICAgfSxcbiAgICAvLyBSZXNldCBGaXJlZm94IGludmFsaWQgcmVxdWlyZWQgaW5wdXQgc3R5bGVcbiAgICAnJjppbnZhbGlkJzoge1xuICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICB9LFxuICAgICcmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uJzoge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIHdoZW4gdHlwZT1zZWFyY2guXG4gICAgICBXZWJraXRBcHBlYXJhbmNlOiAnbm9uZSdcbiAgICB9LFxuICAgIC8vIFNob3cgYW5kIGhpZGUgdGhlIHBsYWNlaG9sZGVyIGxvZ2ljXG4gICAgW2BsYWJlbFtkYXRhLXNocmluaz1mYWxzZV0gKyAuJHtpbnB1dEJhc2VDbGFzc2VzLmZvcm1Db250cm9sfSAmYF06IHtcbiAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgLy8gSUUxMVxuICAgICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgLy8gRWRnZVxuICAgICAgJyY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAnJjpmb2N1czo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAnJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAvLyBJRTExXG4gICAgICAnJjpmb2N1czo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlIC8vIEVkZ2VcbiAgICB9LFxuXG4gICAgW2AmLiR7aW5wdXRCYXNlQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIC8vIFJlc2V0IGlPUyBvcGFjaXR5XG4gICAgICBXZWJraXRUZXh0RmlsbENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LmRpc2FibGVkIC8vIEZpeCBvcGFjaXR5IFNhZmFyaSBidWdcbiAgICB9LFxuXG4gICAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnNTAwMHMnLFxuICAgICAgYW5pbWF0aW9uTmFtZTogJ211aS1hdXRvLWZpbGwnXG4gICAgfVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIHBhZGRpbmdUb3A6IDFcbiAgfSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYge1xuICAgIGhlaWdodDogJ2F1dG8nLFxuICAgIHJlc2l6ZTogJ25vbmUnLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgcGFkZGluZ1RvcDogMFxuICB9LCBvd25lclN0YXRlLnR5cGUgPT09ICdzZWFyY2gnICYmIHtcbiAgICAvLyBJbXByb3ZlIHR5cGUgc2VhcmNoIHN0eWxlLlxuICAgIE1vekFwcGVhcmFuY2U6ICd0ZXh0ZmllbGQnXG4gIH0pO1xufSk7XG5jb25zdCBpbnB1dEdsb2JhbFN0eWxlcyA9IC8qI19fUFVSRV9fKi9fanN4KEdsb2JhbFN0eWxlcywge1xuICBzdHlsZXM6IHtcbiAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsJzoge1xuICAgICAgZnJvbToge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsLWNhbmNlbCc6IHtcbiAgICAgIGZyb206IHtcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cbi8qKlxuICogYElucHV0QmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGFuIGlucHV0LlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIHN0YXRlIGxvZ2ljLlxuICovXG5jb25zdCBJbnB1dEJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dEJhc2UoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfc2xvdFByb3BzJGlucHV0O1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJbnB1dEJhc2UnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgIGF1dG9Db21wbGV0ZSxcbiAgICAgIGF1dG9Gb2N1cyxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzLFxuICAgICAgZW5kQWRvcm5tZW50LFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBpZCxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICAgIGlucHV0UHJvcHM6IGlucHV0UHJvcHNQcm9wID0ge30sXG4gICAgICBpbnB1dFJlZjogaW5wdXRSZWZQcm9wLFxuICAgICAgbWF4Um93cyxcbiAgICAgIG1pblJvd3MsXG4gICAgICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgICAgIG5hbWUsXG4gICAgICBvbkJsdXIsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG9uQ2xpY2ssXG4gICAgICBvbkZvY3VzLFxuICAgICAgb25LZXlEb3duLFxuICAgICAgb25LZXlVcCxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgcmVhZE9ubHksXG4gICAgICByZW5kZXJTdWZmaXgsXG4gICAgICByb3dzLFxuICAgICAgc2xvdFByb3BzID0ge30sXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgc3RhcnRBZG9ybm1lbnQsXG4gICAgICB0eXBlID0gJ3RleHQnLFxuICAgICAgdmFsdWU6IHZhbHVlUHJvcFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB2YWx1ZSA9IGlucHV0UHJvcHNQcm9wLnZhbHVlICE9IG51bGwgPyBpbnB1dFByb3BzUHJvcC52YWx1ZSA6IHZhbHVlUHJvcDtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICB9ID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBoYW5kbGVJbnB1dFJlZldhcm5pbmcgPSBSZWFjdC51c2VDYWxsYmFjayhpbnN0YW5jZSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5ub2RlTmFtZSAhPT0gJ0lOUFVUJyAmJiAhaW5zdGFuY2UuZm9jdXMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogWW91IGhhdmUgcHJvdmlkZWQgYSBgaW5wdXRDb21wb25lbnRgIHRvIHRoZSBpbnB1dCBjb21wb25lbnQnLCAndGhhdCBkb2VzIG5vdCBjb3JyZWN0bHkgaGFuZGxlIHRoZSBgcmVmYCBwcm9wLicsICdNYWtlIHN1cmUgdGhlIGByZWZgIHByb3AgaXMgY2FsbGVkIHdpdGggYSBIVE1MSW5wdXRFbGVtZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtdKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRSZWYgPSB1c2VGb3JrUmVmKGlucHV0UmVmLCBpbnB1dFJlZlByb3AsIGlucHV0UHJvcHNQcm9wLnJlZiwgaGFuZGxlSW5wdXRSZWZXYXJuaW5nKTtcbiAgY29uc3QgW2ZvY3VzZWQsIHNldEZvY3VzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgICByZXR1cm4gbXVpRm9ybUNvbnRyb2wucmVnaXN0ZXJFZmZlY3QoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSwgW211aUZvcm1Db250cm9sXSk7XG4gIH1cbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ2NvbG9yJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2hpZGRlbkxhYmVsJywgJ3NpemUnLCAncmVxdWlyZWQnLCAnZmlsbGVkJ11cbiAgfSk7XG4gIGZjcy5mb2N1c2VkID0gbXVpRm9ybUNvbnRyb2wgPyBtdWlGb3JtQ29udHJvbC5mb2N1c2VkIDogZm9jdXNlZDtcblxuICAvLyBUaGUgYmx1ciB3b24ndCBmaXJlIHdoZW4gdGhlIGRpc2FibGVkIHN0YXRlIGlzIHNldCBvbiBhIGZvY3VzZWQgaW5wdXQuXG4gIC8vIFdlIG5lZWQgdG8gYm9vayBrZWVwIHRoZSBmb2N1c2VkIHN0YXRlIG1hbnVhbGx5LlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghbXVpRm9ybUNvbnRyb2wgJiYgZGlzYWJsZWQgJiYgZm9jdXNlZCkge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgICBpZiAob25CbHVyKSB7XG4gICAgICAgIG9uQmx1cigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBkaXNhYmxlZCwgZm9jdXNlZCwgb25CbHVyXSk7XG4gIGNvbnN0IG9uRmlsbGVkID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25GaWxsZWQ7XG4gIGNvbnN0IG9uRW1wdHkgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkVtcHR5O1xuICBjb25zdCBjaGVja0RpcnR5ID0gUmVhY3QudXNlQ2FsbGJhY2sob2JqID0+IHtcbiAgICBpZiAoaXNGaWxsZWQob2JqKSkge1xuICAgICAgaWYgKG9uRmlsbGVkKSB7XG4gICAgICAgIG9uRmlsbGVkKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkVtcHR5KSB7XG4gICAgICBvbkVtcHR5KCk7XG4gICAgfVxuICB9LCBbb25GaWxsZWQsIG9uRW1wdHldKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbdmFsdWUsIGNoZWNrRGlydHksIGlzQ29udHJvbGxlZF0pO1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IGV2ZW50ID0+IHtcbiAgICAvLyBGaXggYSBidWcgd2l0aCBJRTExIHdoZXJlIHRoZSBmb2N1cy9ibHVyIGV2ZW50cyBhcmUgdHJpZ2dlcmVkXG4gICAgLy8gd2hpbGUgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICBpZiAoZmNzLmRpc2FibGVkKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25Gb2N1cykge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25Gb2N1cyhldmVudCk7XG4gICAgfVxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUJsdXIgPSBldmVudCA9PiB7XG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uQmx1cikge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25CbHVyKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uQmx1cikge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25CbHVyKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoZXZlbnQsIC4uLmFyZ3MpID0+IHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldCB8fCBpbnB1dFJlZi5jdXJyZW50O1xuICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogRXhwZWN0ZWQgdmFsaWQgaW5wdXQgdGFyZ2V0LiBEaWQgeW91IHVzZSBhIGN1c3RvbSBcXGBpbnB1dENvbXBvbmVudFxcYCBhbmQgZm9yZ2V0IHRvIGZvcndhcmQgcmVmcz8gU2VlIGh0dHBzOi8vbXVpLmNvbS9yL2lucHV0LWNvbXBvbmVudC1yZWYtaW50ZXJmYWNlIGZvciBtb3JlIGluZm8uYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMSkpO1xuICAgICAgfVxuICAgICAgY2hlY2tEaXJ0eSh7XG4gICAgICAgIHZhbHVlOiBlbGVtZW50LnZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uQ2hhbmdlKSB7XG4gICAgICBpbnB1dFByb3BzUHJvcC5vbkNoYW5nZShldmVudCwgLi4uYXJncyk7XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSBpbiB0aGUgd2lsbFVwZGF0ZVxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfTtcblxuICAvLyBDaGVjayB0aGUgaW5wdXQgc3RhdGUgb24gbW91bnQsIGluIGNhc2UgaXQgd2FzIGZpbGxlZCBieSB0aGUgdXNlclxuICAvLyBvciBhdXRvIGZpbGxlZCBieSB0aGUgYnJvd3NlciBiZWZvcmUgdGhlIGh5ZHJhdGlvbiAoZm9yIFNTUikuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY2hlY2tEaXJ0eShpbnB1dFJlZi5jdXJyZW50KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgaWYgKGlucHV0UmVmLmN1cnJlbnQgJiYgZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGxldCBJbnB1dENvbXBvbmVudCA9IGlucHV0Q29tcG9uZW50O1xuICBsZXQgaW5wdXRQcm9wcyA9IGlucHV0UHJvcHNQcm9wO1xuICBpZiAobXVsdGlsaW5lICYmIElucHV0Q29tcG9uZW50ID09PSAnaW5wdXQnKSB7XG4gICAgaWYgKHJvd3MpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChtaW5Sb3dzIHx8IG1heFJvd3MpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ01VSTogWW91IGNhbiBub3QgdXNlIHRoZSBgbWluUm93c2Agb3IgYG1heFJvd3NgIHByb3BzIHdoZW4gdGhlIGlucHV0IGByb3dzYCBwcm9wIGlzIHNldC4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBtaW5Sb3dzOiByb3dzLFxuICAgICAgICBtYXhSb3dzOiByb3dzXG4gICAgICB9LCBpbnB1dFByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBtYXhSb3dzLFxuICAgICAgICBtaW5Sb3dzXG4gICAgICB9LCBpbnB1dFByb3BzKTtcbiAgICB9XG4gICAgSW5wdXRDb21wb25lbnQgPSBUZXh0YXJlYUF1dG9zaXplO1xuICB9XG4gIGNvbnN0IGhhbmRsZUF1dG9GaWxsID0gZXZlbnQgPT4ge1xuICAgIC8vIFByb3ZpZGUgYSBmYWtlIHZhbHVlIGFzIENocm9tZSBtaWdodCBub3QgbGV0IHlvdSBhY2Nlc3MgaXQgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXG4gICAgY2hlY2tEaXJ0eShldmVudC5hbmltYXRpb25OYW1lID09PSAnbXVpLWF1dG8tZmlsbC1jYW5jZWwnID8gaW5wdXRSZWYuY3VycmVudCA6IHtcbiAgICAgIHZhbHVlOiAneCdcbiAgICB9KTtcbiAgfTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLnNldEFkb3JuZWRTdGFydChCb29sZWFuKHN0YXJ0QWRvcm5tZW50KSk7XG4gICAgfVxuICB9LCBbbXVpRm9ybUNvbnRyb2wsIHN0YXJ0QWRvcm5tZW50XSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcjogZmNzLmNvbG9yIHx8ICdwcmltYXJ5JyxcbiAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgIGVuZEFkb3JubWVudCxcbiAgICBlcnJvcjogZmNzLmVycm9yLFxuICAgIGZvY3VzZWQ6IGZjcy5mb2N1c2VkLFxuICAgIGZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWw6IGZjcy5oaWRkZW5MYWJlbCxcbiAgICBtdWx0aWxpbmUsXG4gICAgc2l6ZTogZmNzLnNpemUsXG4gICAgc3RhcnRBZG9ybm1lbnQsXG4gICAgdHlwZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBSb290ID0gc2xvdHMucm9vdCB8fCBjb21wb25lbnRzLlJvb3QgfHwgSW5wdXRCYXNlUm9vdDtcbiAgY29uc3Qgcm9vdFByb3BzID0gc2xvdFByb3BzLnJvb3QgfHwgY29tcG9uZW50c1Byb3BzLnJvb3QgfHwge307XG4gIGNvbnN0IElucHV0ID0gc2xvdHMuaW5wdXQgfHwgY29tcG9uZW50cy5JbnB1dCB8fCBJbnB1dEJhc2VDb21wb25lbnQ7XG4gIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7fSwgaW5wdXRQcm9wcywgKF9zbG90UHJvcHMkaW5wdXQgPSBzbG90UHJvcHMuaW5wdXQpICE9IG51bGwgPyBfc2xvdFByb3BzJGlucHV0IDogY29tcG9uZW50c1Byb3BzLmlucHV0KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbIWRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXMgJiYgaW5wdXRHbG9iYWxTdHlsZXMsIC8qI19fUFVSRV9fKi9fanN4cyhSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KFJvb3QpICYmIHtcbiAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCByb290UHJvcHMub3duZXJTdGF0ZSlcbiAgICB9LCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIHJvb3RQcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSwgcmVhZE9ubHkgJiYgJ011aUlucHV0QmFzZS1yZWFkT25seScpLFxuICAgICAgY2hpbGRyZW46IFtzdGFydEFkb3JubWVudCwgLyojX19QVVJFX18qL19qc3goRm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goSW5wdXQsIF9leHRlbmRzKHtcbiAgICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IGZjcy5lcnJvcixcbiAgICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZGJ5LFxuICAgICAgICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgICAgICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIG9uQW5pbWF0aW9uU3RhcnQ6IGhhbmRsZUF1dG9GaWxsLFxuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICAgICAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkLFxuICAgICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgICAgICAgIG9uS2V5VXA6IG9uS2V5VXAsXG4gICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICB9LCBpbnB1dFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KElucHV0KSAmJiB7XG4gICAgICAgICAgYXM6IElucHV0Q29tcG9uZW50LFxuICAgICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCBpbnB1dFByb3BzLm93bmVyU3RhdGUpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICByZWY6IGhhbmRsZUlucHV0UmVmLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmlucHV0LCBpbnB1dFByb3BzLmNsYXNzTmFtZSwgcmVhZE9ubHkgJiYgJ011aUlucHV0QmFzZS1yZWFkT25seScpLFxuICAgICAgICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzXG4gICAgICAgIH0pKVxuICAgICAgfSksIGVuZEFkb3JubWVudCwgcmVuZGVyU3VmZml4ID8gcmVuZGVyU3VmZml4KF9leHRlbmRzKHt9LCBmY3MsIHtcbiAgICAgICAgc3RhcnRBZG9ybm1lbnRcbiAgICAgIH0pKSA6IG51bGxdXG4gICAgfSkpXVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXRCYXNlLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gICdhcmlhLWRlc2NyaWJlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAncHJpbWFyeSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdHNgIHByb3AgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RQcm9wc2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90UHJvcHNgIHByb3AgaW5zdGVhZCwgYXMgYGNvbXBvbmVudHNQcm9wc2Agd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBHbG9iYWxTdHlsZXMgZm9yIHRoZSBhdXRvLWZpbGwga2V5ZnJhbWVzIHdpbGwgbm90IGJlIGluamVjdGVkL3JlbW92ZWQgb24gbW91bnQvdW5tb3VudC4gTWFrZSBzdXJlIHRvIGluamVjdCB0aGVtIGF0IHRoZSB0b3Agb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICogVGhpcyBvcHRpb24gaXMgaW50ZW5kZWQgdG8gaGVscCB3aXRoIGJvb3N0aW5nIHRoZSBpbml0aWFsIHJlbmRlcmluZyBwZXJmb3JtYW5jZSBpZiB5b3UgYXJlIGxvYWRpbmcgYSBiaWcgYW1vdW50IG9mIElucHV0IGNvbXBvbmVudHMgYXQgb25jZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2lucHV0J1xuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgW1RleHRhcmVhQXV0b3NpemVdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBgaW5wdXRgIGlzIGJsdXJyZWQuXG4gICAqXG4gICAqIE5vdGljZSB0aGF0IHRoZSBmaXJzdCBhcmd1bWVudCAoZXZlbnQpIG1pZ2h0IGJlIHVuZGVmaW5lZC5cbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYGlucHV0YCBkb2Vzbid0IHNhdGlzZnkgaXRzIGNvbnN0cmFpbnRzLlxuICAgKi9cbiAgb25JbnZhbGlkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgYGlucHV0YCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVuZGVyU3VmZml4OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNQcm9wc2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzYCBwcm9wLCB3aGljaCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgcm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXRCYXNlOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuL0Zvcm1Db250cm9sQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JtQ29udHJvbCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRyb2xDb250ZXh0KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtQ29udHJvbFN0YXRlKHtcbiAgcHJvcHMsXG4gIHN0YXRlcyxcbiAgbXVpRm9ybUNvbnRyb2xcbn0pIHtcbiAgcmV0dXJuIHN0YXRlcy5yZWR1Y2UoKGFjYywgc3RhdGUpID0+IHtcbiAgICBhY2Nbc3RhdGVdID0gcHJvcHNbc3RhdGVdO1xuICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1tzdGF0ZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFjY1tzdGF0ZV0gPSBtdWlGb3JtQ29udHJvbFtzdGF0ZV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSWNvbkJ1dHRvbicsIHNsb3QpO1xufVxuY29uc3QgaWNvbkJ1dHRvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlJY29uQnV0dG9uJywgWydyb290JywgJ2Rpc2FibGVkJywgJ2NvbG9ySW5oZXJpdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JFcnJvcicsICdjb2xvckluZm8nLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdlZGdlU3RhcnQnLCAnZWRnZUVuZCcsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdzaXplTGFyZ2UnXSk7XG5leHBvcnQgZGVmYXVsdCBpY29uQnV0dG9uQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJlZGdlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwic2l6ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGljb25CdXR0b25DbGFzc2VzLCB7IGdldEljb25CdXR0b25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2ljb25CdXR0b25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlZCxcbiAgICBjb2xvcixcbiAgICBlZGdlLFxuICAgIHNpemVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBlZGdlICYmIGBlZGdlJHtjYXBpdGFsaXplKGVkZ2UpfWAsIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgSWNvbkJ1dHRvblJvb3QgPSBzdHlsZWQoQnV0dG9uQmFzZSwge1xuICBuYW1lOiAnTXVpSWNvbkJ1dHRvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5lZGdlICYmIHN0eWxlc1tgZWRnZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmVkZ2UpfWBdLCBzdHlsZXNbYHNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIGZsZXg6ICcwIDAgYXV0bycsXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICBwYWRkaW5nOiA4LFxuICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAvLyBFeHBsaWNpdGx5IHNldCB0aGUgZGVmYXVsdCB2YWx1ZSB0byBzb2x2ZSBhIGJ1ZyBvbiBJRTExLlxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KVxufSwgIW93bmVyU3RhdGUuZGlzYWJsZVJpcHBsZSAmJiB7XG4gICcmOmhvdmVyJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5hY3RpdmVDaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUuZWRnZSA9PT0gJ3N0YXJ0JyAmJiB7XG4gIG1hcmdpbkxlZnQ6IG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyA/IC0zIDogLTEyXG59LCBvd25lclN0YXRlLmVkZ2UgPT09ICdlbmQnICYmIHtcbiAgbWFyZ2luUmlnaHQ6IG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyA/IC0zIDogLTEyXG59KSwgKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF9wYWxldHRlO1xuICBjb25zdCBwYWxldHRlID0gKF9wYWxldHRlID0gKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiBfZXh0ZW5kcyh7XG4gICAgY29sb3I6IHBhbGV0dGUgPT0gbnVsbCA/IHZvaWQgMCA6IHBhbGV0dGUubWFpblxuICB9LCAhb3duZXJTdGF0ZS5kaXNhYmxlUmlwcGxlICYmIHtcbiAgICAnJjpob3Zlcic6IF9leHRlbmRzKHt9LCBwYWxldHRlICYmIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7cGFsZXR0ZS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEocGFsZXR0ZS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gICAgfSwge1xuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSlcbiAgfSksIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZzogNSxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE4KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYge1xuICAgIHBhZGRpbmc6IDEyLFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjgpXG4gIH0sIHtcbiAgICBbYCYuJHtpY29uQnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH1cbiAgfSk7XG59KTtcblxuLyoqXG4gKiBSZWZlciB0byB0aGUgW0ljb25zXSgvbWF0ZXJpYWwtdWkvaWNvbnMvKSBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uXG4gKiByZWdhcmRpbmcgdGhlIGF2YWlsYWJsZSBpY29uIG9wdGlvbnMuXG4gKi9cbmNvbnN0IEljb25CdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJY29uQnV0dG9uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJY29uQnV0dG9uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgZWRnZSA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICAgIHNpemUgPSAnbWVkaXVtJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZWRnZSxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgc2l6ZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSWNvbkJ1dHRvblJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGNlbnRlclJpcHBsZTogdHJ1ZSxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEljb25CdXR0b24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheS5cbiAgICovXG4gIGNoaWxkcmVuOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubm9kZSwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IGZvdW5kID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbikuc29tZShjaGlsZCA9PiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpICYmIGNoaWxkLnByb3BzLm9uQ2xpY2spO1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01VSTogWW91IGFyZSBwcm92aWRpbmcgYW4gb25DbGljayBldmVudCBsaXN0ZW5lciB0byBhIGNoaWxkIG9mIGEgYnV0dG9uIGVsZW1lbnQuJywgJ1ByZWZlciBhcHBseWluZyBpdCB0byB0aGUgSWNvbkJ1dHRvbiBkaXJlY3RseS4nLCAnVGhpcyBndWFyYW50ZWVzIHRoYXQgdGhlIHdob2xlIDxidXR0b24+IHdpbGwgYmUgcmVzcG9uc2l2ZSB0byBjbGljayBldmVudHMuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGdpdmVuLCB1c2VzIGEgbmVnYXRpdmUgbWFyZ2luIHRvIGNvdW50ZXJhY3QgdGhlIHBhZGRpbmcgb24gb25lXG4gICAqIHNpZGUgKHRoaXMgaXMgb2Z0ZW4gaGVscGZ1bCBmb3IgYWxpZ25pbmcgdGhlIGxlZnQgb3IgcmlnaHRcbiAgICogc2lkZSBvZiB0aGUgaWNvbiB3aXRoIGNvbnRlbnQgYWJvdmUgb3IgYmVsb3csIHdpdGhvdXQgcnVpbmluZyB0aGUgYm9yZGVyXG4gICAqIHNpemUgYW5kIHNoYXBlKS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVkZ2U6IFByb3BUeXBlcy5vbmVPZihbJ2VuZCcsICdzdGFydCcsIGZhbHNlXSksXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEljb25CdXR0b247IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuY29uc3QgR2xvYmFsQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xyXG4gICAgc2VhcmNoU3RyaW5nVmFsdWU6ICcnLFxyXG4gICAgc2V0U2VhcmNoU3RyaW5nRm46ICgpID0+IHt9LFxyXG59KVxyXG5leHBvcnQgZGVmYXVsdCBHbG9iYWxDb250ZXh0OyIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIFRlYW1PdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNODI0LjIgNjk5LjlhMzAxLjU1IDMwMS41NSAwIDAwLTg2LjQtNjAuNEM3ODMuMSA2MDIuOCA4MTIgNTQ2LjggODEyIDQ4NGMwLTExMC44LTkyLjQtMjAxLjctMjAzLjItMjAwLTEwOS4xIDEuNy0xOTcgOTAuNi0xOTcgMjAwIDAgNjIuOCAyOSAxMTguOCA3NC4yIDE1NS41YTMwMC45NSAzMDAuOTUgMCAwMC04Ni40IDYwLjRDMzQ1IDc1NC42IDMxNCA4MjYuOCAzMTIgOTAzLjhhOCA4IDAgMDA4IDguMmg1NmM0LjMgMCA3LjktMy40IDgtNy43IDEuOS01OCAyNS40LTExMi4zIDY2LjctMTUzLjVBMjI2LjYyIDIyNi42MiAwIDAxNjEyIDY4NGM2MC45IDAgMTE4LjIgMjMuNyAxNjEuMyA2Ni44QzgxNC41IDc5MiA4MzggODQ2LjMgODQwIDkwNC4zYy4xIDQuMyAzLjcgNy43IDggNy43aDU2YTggOCAwIDAwOC04LjJjLTItNzctMzMtMTQ5LjItODcuOC0yMDMuOXpNNjEyIDYxMmMtMzQuMiAwLTY2LjQtMTMuMy05MC41LTM3LjVhMTI2Ljg2IDEyNi44NiAwIDAxLTM3LjUtOTEuOGMuMy0zMi44IDEzLjQtNjQuNSAzNi4zLTg4IDI0LTI0LjYgNTYuMS0zOC4zIDkwLjQtMzguNyAzMy45LS4zIDY2LjggMTIuOSA5MSAzNi42IDI0LjggMjQuMyAzOC40IDU2LjggMzguNCA5MS40IDAgMzQuMi0xMy4zIDY2LjMtMzcuNSA5MC41QTEyNy4zIDEyNy4zIDAgMDE2MTIgNjEyek0zNjEuNSA1MTAuNGMtLjktOC43LTEuNC0xNy41LTEuNC0yNi40IDAtMTUuOSAxLjUtMzEuNCA0LjMtNDYuNS43LTMuNi0xLjItNy4zLTQuNS04LjgtMTMuNi02LjEtMjYuMS0xNC41LTM2LjktMjUuMWExMjcuNTQgMTI3LjU0IDAgMDEtMzguNy05NS40Yy45LTMyLjEgMTMuOC02Mi42IDM2LjMtODUuNiAyNC43LTI1LjMgNTcuOS0zOS4xIDkzLjItMzguNyAzMS45LjMgNjIuNyAxMi42IDg2IDM0LjQgNy45IDcuNCAxNC43IDE1LjYgMjAuNCAyNC40IDIgMy4xIDUuOSA0LjQgOS4zIDMuMiAxNy42LTYuMSAzNi4yLTEwLjQgNTUuMy0xMi40IDUuNi0uNiA4LjgtNi42IDYuMy0xMS42LTMyLjUtNjQuMy05OC45LTEwOC43LTE3NS43LTEwOS45LTExMC45LTEuNy0yMDMuMyA4OS4yLTIwMy4zIDE5OS45IDAgNjIuOCAyOC45IDExOC44IDc0LjIgMTU1LjUtMzEuOCAxNC43LTYxLjEgMzUtODYuNSA2MC40LTU0LjggNTQuNy04NS44IDEyNi45LTg3LjggMjA0YTggOCAwIDAwOCA4LjJoNTYuMWM0LjMgMCA3LjktMy40IDgtNy43IDEuOS01OCAyNS40LTExMi4zIDY2LjctMTUzLjUgMjkuNC0yOS40IDY1LjQtNDkuOCAxMDQuNy01OS43IDMuOS0xIDYuNS00LjcgNi04Ljd6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJ0ZWFtXCIsIFwidGhlbWVcIjogXCJvdXRsaW5lZFwiIH07XG5leHBvcnQgZGVmYXVsdCBUZWFtT3V0bGluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkge1xuICB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgcltTeW1ib2wuaXRlcmF0b3JdIHx8IHJbXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAobnVsbCAhPSB0KSB7XG4gICAgdmFyIGUsXG4gICAgICBuLFxuICAgICAgaSxcbiAgICAgIHUsXG4gICAgICBhID0gW10sXG4gICAgICBmID0gITAsXG4gICAgICBvID0gITE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHtcbiAgICAgICAgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuO1xuICAgICAgICBmID0gITE7XG4gICAgICB9IGVsc2UgZm9yICg7ICEoZiA9IChlID0gaS5jYWxsKHQpKS5kb25lKSAmJiAoYS5wdXNoKGUudmFsdWUpLCBhLmxlbmd0aCAhPT0gbCk7IGYgPSAhMCk7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgbyA9ICEwLCBuID0gcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFmICYmIG51bGwgIT0gdFtcInJldHVyblwiXSAmJiAodSA9IHRbXCJyZXR1cm5cIl0oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG8pIHRocm93IG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuaW1wb3J0IHRvUHJpbWl0aXZlIGZyb20gXCIuL3RvUHJpbWl0aXZlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7XG4gIHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkge1xuICBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDtcbiAgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdO1xuICBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7XG4gICAgaWYgKF90eXBlb2YocmVzKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7XG59IiwiaW1wb3J0IHRvUHJvcGVydHlLZXkgZnJvbSBcIi4vdG9Qcm9wZXJ0eUtleS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBrZXkgPSB0b1Byb3BlcnR5S2V5KGtleSk7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufSIsIi8qKlxuICogVGFrZSBpbnB1dCBmcm9tIFswLCBuXSBhbmQgcmV0dXJuIGl0IGFzIFswLCAxXVxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYm91bmQwMShuLCBtYXgpIHtcbiAgICBpZiAoaXNPbmVQb2ludFplcm8obikpIHtcbiAgICAgICAgbiA9ICcxMDAlJztcbiAgICB9XG4gICAgdmFyIGlzUGVyY2VudCA9IGlzUGVyY2VudGFnZShuKTtcbiAgICBuID0gbWF4ID09PSAzNjAgPyBuIDogTWF0aC5taW4obWF4LCBNYXRoLm1heCgwLCBwYXJzZUZsb2F0KG4pKSk7XG4gICAgLy8gQXV0b21hdGljYWxseSBjb252ZXJ0IHBlcmNlbnRhZ2UgaW50byBudW1iZXJcbiAgICBpZiAoaXNQZXJjZW50KSB7XG4gICAgICAgIG4gPSBwYXJzZUludChTdHJpbmcobiAqIG1heCksIDEwKSAvIDEwMDtcbiAgICB9XG4gICAgLy8gSGFuZGxlIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9yc1xuICAgIGlmIChNYXRoLmFicyhuIC0gbWF4KSA8IDAuMDAwMDAxKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IGludG8gWzAsIDFdIHJhbmdlIGlmIGl0IGlzbid0IGFscmVhZHlcbiAgICBpZiAobWF4ID09PSAzNjApIHtcbiAgICAgICAgLy8gSWYgbiBpcyBhIGh1ZSBnaXZlbiBpbiBkZWdyZWVzLFxuICAgICAgICAvLyB3cmFwIGFyb3VuZCBvdXQtb2YtcmFuZ2UgdmFsdWVzIGludG8gWzAsIDM2MF0gcmFuZ2VcbiAgICAgICAgLy8gdGhlbiBjb252ZXJ0IGludG8gWzAsIDFdLlxuICAgICAgICBuID0gKG4gPCAwID8gKG4gJSBtYXgpICsgbWF4IDogbiAlIG1heCkgLyBwYXJzZUZsb2F0KFN0cmluZyhtYXgpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIElmIG4gbm90IGEgaHVlIGdpdmVuIGluIGRlZ3JlZXNcbiAgICAgICAgLy8gQ29udmVydCBpbnRvIFswLCAxXSByYW5nZSBpZiBpdCBpc24ndCBhbHJlYWR5LlxuICAgICAgICBuID0gKG4gJSBtYXgpIC8gcGFyc2VGbG9hdChTdHJpbmcobWF4KSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuLyoqXG4gKiBGb3JjZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wMDEodmFsKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHZhbCkpO1xufVxuLyoqXG4gKiBOZWVkIHRvIGhhbmRsZSAxLjAgYXMgMTAwJSwgc2luY2Ugb25jZSBpdCBpcyBhIG51bWJlciwgdGhlcmUgaXMgbm8gZGlmZmVyZW5jZSBiZXR3ZWVuIGl0IGFuZCAxXG4gKiA8aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83NDIyMDcyL2phdmFzY3JpcHQtaG93LXRvLWRldGVjdC1udW1iZXItYXMtYS1kZWNpbWFsLWluY2x1ZGluZy0xLTA+XG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09uZVBvaW50WmVybyhuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnc3RyaW5nJyAmJiBuLmluZGV4T2YoJy4nKSAhPT0gLTEgJiYgcGFyc2VGbG9hdChuKSA9PT0gMTtcbn1cbi8qKlxuICogQ2hlY2sgdG8gc2VlIGlmIHN0cmluZyBwYXNzZWQgaW4gaXMgYSBwZXJjZW50YWdlXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BlcmNlbnRhZ2Uobikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gJ3N0cmluZycgJiYgbi5pbmRleE9mKCclJykgIT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm4gYSB2YWxpZCBhbHBoYSB2YWx1ZSBbMCwxXSB3aXRoIGFsbCBpbnZhbGlkIHZhbHVlcyBiZWluZyBzZXQgdG8gMVxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gYm91bmRBbHBoYShhKSB7XG4gICAgYSA9IHBhcnNlRmxvYXQoYSk7XG4gICAgaWYgKGlzTmFOKGEpIHx8IGEgPCAwIHx8IGEgPiAxKSB7XG4gICAgICAgIGEgPSAxO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn1cbi8qKlxuICogUmVwbGFjZSBhIGRlY2ltYWwgd2l0aCBpdCdzIHBlcmNlbnRhZ2UgdmFsdWVcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb1BlcmNlbnRhZ2Uobikge1xuICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KE51bWJlcihuKSAqIDEwMCwgXCIlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cbi8qKlxuICogRm9yY2UgYSBoZXggdmFsdWUgdG8gaGF2ZSAyIGNoYXJhY3RlcnNcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhZDIoYykge1xuICAgIHJldHVybiBjLmxlbmd0aCA9PT0gMSA/ICcwJyArIGMgOiBTdHJpbmcoYyk7XG59XG4iLCJpbXBvcnQgeyBib3VuZDAxLCBwYWQyIH0gZnJvbSAnLi91dGlsLmpzJztcbi8vIGByZ2JUb0hzbGAsIGByZ2JUb0hzdmAsIGBoc2xUb1JnYmAsIGBoc3ZUb1JnYmAgbW9kaWZpZWQgZnJvbTpcbi8vIDxodHRwOi8vbWppamFja3Nvbi5jb20vMjAwOC8wMi9yZ2ItdG8taHNsLWFuZC1yZ2ItdG8taHN2LWNvbG9yLW1vZGVsLWNvbnZlcnNpb24tYWxnb3JpdGhtcy1pbi1qYXZhc2NyaXB0PlxuLyoqXG4gKiBIYW5kbGUgYm91bmRzIC8gcGVyY2VudGFnZSBjaGVja2luZyB0byBjb25mb3JtIHRvIENTUyBjb2xvciBzcGVjXG4gKiA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8+XG4gKiAqQXNzdW1lczoqIHIsIGcsIGIgaW4gWzAsIDI1NV0gb3IgWzAsIDFdXG4gKiAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIFswLCAyNTVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb1JnYihyLCBnLCBiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcjogYm91bmQwMShyLCAyNTUpICogMjU1LFxuICAgICAgICBnOiBib3VuZDAxKGcsIDI1NSkgKiAyNTUsXG4gICAgICAgIGI6IGJvdW5kMDEoYiwgMjU1KSAqIDI1NSxcbiAgICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBSR0IgY29sb3IgdmFsdWUgdG8gSFNMLlxuICogKkFzc3VtZXM6KiByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIFswLCAyNTVdIG9yIFswLCAxXVxuICogKlJldHVybnM6KiB7IGgsIHMsIGwgfSBpbiBbMCwxXVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9Ic2wociwgZywgYikge1xuICAgIHIgPSBib3VuZDAxKHIsIDI1NSk7XG4gICAgZyA9IGJvdW5kMDEoZywgMjU1KTtcbiAgICBiID0gYm91bmQwMShiLCAyNTUpO1xuICAgIHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICB2YXIgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgdmFyIGggPSAwO1xuICAgIHZhciBzID0gMDtcbiAgICB2YXIgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgICAgcyA9IDA7XG4gICAgICAgIGggPSAwOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgICAgY2FzZSByOlxuICAgICAgICAgICAgICAgIGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZzpcbiAgICAgICAgICAgICAgICBoID0gKGIgLSByKSAvIGQgKyAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBiOlxuICAgICAgICAgICAgICAgIGggPSAociAtIGcpIC8gZCArIDQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGggLz0gNjtcbiAgICB9XG4gICAgcmV0dXJuIHsgaDogaCwgczogcywgbDogbCB9O1xufVxuZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgaWYgKHQgPCAwKSB7XG4gICAgICAgIHQgKz0gMTtcbiAgICB9XG4gICAgaWYgKHQgPiAxKSB7XG4gICAgICAgIHQgLT0gMTtcbiAgICB9XG4gICAgaWYgKHQgPCAxIC8gNikge1xuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiAoNiAqIHQpO1xuICAgIH1cbiAgICBpZiAodCA8IDEgLyAyKSB7XG4gICAgICAgIHJldHVybiBxO1xuICAgIH1cbiAgICBpZiAodCA8IDIgLyAzKSB7XG4gICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIEhTTCBjb2xvciB2YWx1ZSB0byBSR0IuXG4gKlxuICogKkFzc3VtZXM6KiBoIGlzIGNvbnRhaW5lZCBpbiBbMCwgMV0gb3IgWzAsIDM2MF0gYW5kIHMgYW5kIGwgYXJlIGNvbnRhaW5lZCBbMCwgMV0gb3IgWzAsIDEwMF1cbiAqICpSZXR1cm5zOiogeyByLCBnLCBiIH0gaW4gdGhlIHNldCBbMCwgMjU1XVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoaCwgcywgbCkge1xuICAgIHZhciByO1xuICAgIHZhciBnO1xuICAgIHZhciBiO1xuICAgIGggPSBib3VuZDAxKGgsIDM2MCk7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICBsID0gYm91bmQwMShsLCAxMDApO1xuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgIC8vIGFjaHJvbWF0aWNcbiAgICAgICAgZyA9IGw7XG4gICAgICAgIGIgPSBsO1xuICAgICAgICByID0gbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgdmFyIHAgPSAyICogbCAtIHE7XG4gICAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxIC8gMyk7XG4gICAgICAgIGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICAgICAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMSAvIDMpO1xuICAgIH1cbiAgICByZXR1cm4geyByOiByICogMjU1LCBnOiBnICogMjU1LCBiOiBiICogMjU1IH07XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIFJHQiBjb2xvciB2YWx1ZSB0byBIU1ZcbiAqXG4gKiAqQXNzdW1lczoqIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBvciBbMCwgMV1cbiAqICpSZXR1cm5zOiogeyBoLCBzLCB2IH0gaW4gWzAsMV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSHN2KHIsIGcsIGIpIHtcbiAgICByID0gYm91bmQwMShyLCAyNTUpO1xuICAgIGcgPSBib3VuZDAxKGcsIDI1NSk7XG4gICAgYiA9IGJvdW5kMDEoYiwgMjU1KTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIHZhciBoID0gMDtcbiAgICB2YXIgdiA9IG1heDtcbiAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICB2YXIgcyA9IG1heCA9PT0gMCA/IDAgOiBkIC8gbWF4O1xuICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICBoID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgICAgICBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGc6XG4gICAgICAgICAgICAgICAgaCA9IChiIC0gcikgLyBkICsgMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjpcbiAgICAgICAgICAgICAgICBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBoIC89IDY7XG4gICAgfVxuICAgIHJldHVybiB7IGg6IGgsIHM6IHMsIHY6IHYgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gSFNWIGNvbG9yIHZhbHVlIHRvIFJHQi5cbiAqXG4gKiAqQXNzdW1lczoqIGggaXMgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMzYwXSBhbmQgcyBhbmQgdiBhcmUgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMTAwXVxuICogKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiB0aGUgc2V0IFswLCAyNTVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoc3ZUb1JnYihoLCBzLCB2KSB7XG4gICAgaCA9IGJvdW5kMDEoaCwgMzYwKSAqIDY7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICB2ID0gYm91bmQwMSh2LCAxMDApO1xuICAgIHZhciBpID0gTWF0aC5mbG9vcihoKTtcbiAgICB2YXIgZiA9IGggLSBpO1xuICAgIHZhciBwID0gdiAqICgxIC0gcyk7XG4gICAgdmFyIHEgPSB2ICogKDEgLSBmICogcyk7XG4gICAgdmFyIHQgPSB2ICogKDEgLSAoMSAtIGYpICogcyk7XG4gICAgdmFyIG1vZCA9IGkgJSA2O1xuICAgIHZhciByID0gW3YsIHEsIHAsIHAsIHQsIHZdW21vZF07XG4gICAgdmFyIGcgPSBbdCwgdiwgdiwgcSwgcCwgcF1bbW9kXTtcbiAgICB2YXIgYiA9IFtwLCBwLCB0LCB2LCB2LCBxXVttb2RdO1xuICAgIHJldHVybiB7IHI6IHIgKiAyNTUsIGc6IGcgKiAyNTUsIGI6IGIgKiAyNTUgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gUkdCIGNvbG9yIHRvIGhleFxuICpcbiAqIEFzc3VtZXMgciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdXG4gKiBSZXR1cm5zIGEgMyBvciA2IGNoYXJhY3RlciBoZXhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KHIsIGcsIGIsIGFsbG93M0NoYXIpIHtcbiAgICB2YXIgaGV4ID0gW1xuICAgICAgICBwYWQyKE1hdGgucm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChiKS50b1N0cmluZygxNikpLFxuICAgIF07XG4gICAgLy8gUmV0dXJuIGEgMyBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93M0NoYXIgJiZcbiAgICAgICAgaGV4WzBdLnN0YXJ0c1dpdGgoaGV4WzBdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzFdLnN0YXJ0c1dpdGgoaGV4WzFdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzJdLnN0YXJ0c1dpdGgoaGV4WzJdLmNoYXJBdCgxKSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKTtcbiAgICB9XG4gICAgcmV0dXJuIGhleC5qb2luKCcnKTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gUkdCQSBjb2xvciBwbHVzIGFscGhhIHRyYW5zcGFyZW5jeSB0byBoZXhcbiAqXG4gKiBBc3N1bWVzIHIsIGcsIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdIGFuZFxuICogYSBpbiBbMCwgMV0uIFJldHVybnMgYSA0IG9yIDggY2hhcmFjdGVyIHJnYmEgaGV4XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5leHBvcnQgZnVuY3Rpb24gcmdiYVRvSGV4KHIsIGcsIGIsIGEsIGFsbG93NENoYXIpIHtcbiAgICB2YXIgaGV4ID0gW1xuICAgICAgICBwYWQyKE1hdGgucm91bmQocikudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChiKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKGNvbnZlcnREZWNpbWFsVG9IZXgoYSkpLFxuICAgIF07XG4gICAgLy8gUmV0dXJuIGEgNCBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93NENoYXIgJiZcbiAgICAgICAgaGV4WzBdLnN0YXJ0c1dpdGgoaGV4WzBdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzFdLnN0YXJ0c1dpdGgoaGV4WzFdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzJdLnN0YXJ0c1dpdGgoaGV4WzJdLmNoYXJBdCgxKSkgJiZcbiAgICAgICAgaGV4WzNdLnN0YXJ0c1dpdGgoaGV4WzNdLmNoYXJBdCgxKSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKSArIGhleFszXS5jaGFyQXQoMCk7XG4gICAgfVxuICAgIHJldHVybiBoZXguam9pbignJyk7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIFJHQkEgY29sb3IgdG8gYW4gQVJHQiBIZXg4IHN0cmluZ1xuICogUmFyZWx5IHVzZWQsIGJ1dCByZXF1aXJlZCBmb3IgXCJ0b0ZpbHRlcigpXCJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYmFUb0FyZ2JIZXgociwgZywgYiwgYSkge1xuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIoY29udmVydERlY2ltYWxUb0hleChhKSksXG4gICAgICAgIHBhZDIoTWF0aC5yb3VuZChyKS50b1N0cmluZygxNikpLFxuICAgICAgICBwYWQyKE1hdGgucm91bmQoZykudG9TdHJpbmcoMTYpKSxcbiAgICAgICAgcGFkMihNYXRoLnJvdW5kKGIpLnRvU3RyaW5nKDE2KSksXG4gICAgXTtcbiAgICByZXR1cm4gaGV4LmpvaW4oJycpO1xufVxuLyoqIENvbnZlcnRzIGEgZGVjaW1hbCB0byBhIGhleCB2YWx1ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnREZWNpbWFsVG9IZXgoZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZCkgKiAyNTUpLnRvU3RyaW5nKDE2KTtcbn1cbi8qKiBDb252ZXJ0cyBhIGhleCB2YWx1ZSB0byBhIGRlY2ltYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0SGV4VG9EZWNpbWFsKGgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnRGcm9tSGV4KGgpIC8gMjU1O1xufVxuLyoqIFBhcnNlIGEgYmFzZS0xNiBoZXggdmFsdWUgaW50byBhIGJhc2UtMTAgaW50ZWdlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW50RnJvbUhleCh2YWwpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsLCAxNik7XG59XG5leHBvcnQgZnVuY3Rpb24gbnVtYmVySW5wdXRUb09iamVjdChjb2xvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHI6IGNvbG9yID4+IDE2LFxuICAgICAgICBnOiAoY29sb3IgJiAweGZmMDApID4+IDgsXG4gICAgICAgIGI6IGNvbG9yICYgMHhmZixcbiAgICB9O1xufVxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JhaGFtYXMxMC9jc3MtY29sb3ItbmFtZXMvYmxvYi9tYXN0ZXIvY3NzLWNvbG9yLW5hbWVzLmpzb25cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgdmFyIG5hbWVzID0ge1xuICAgIGFsaWNlYmx1ZTogJyNmMGY4ZmYnLFxuICAgIGFudGlxdWV3aGl0ZTogJyNmYWViZDcnLFxuICAgIGFxdWE6ICcjMDBmZmZmJyxcbiAgICBhcXVhbWFyaW5lOiAnIzdmZmZkNCcsXG4gICAgYXp1cmU6ICcjZjBmZmZmJyxcbiAgICBiZWlnZTogJyNmNWY1ZGMnLFxuICAgIGJpc3F1ZTogJyNmZmU0YzQnLFxuICAgIGJsYWNrOiAnIzAwMDAwMCcsXG4gICAgYmxhbmNoZWRhbG1vbmQ6ICcjZmZlYmNkJyxcbiAgICBibHVlOiAnIzAwMDBmZicsXG4gICAgYmx1ZXZpb2xldDogJyM4YTJiZTInLFxuICAgIGJyb3duOiAnI2E1MmEyYScsXG4gICAgYnVybHl3b29kOiAnI2RlYjg4NycsXG4gICAgY2FkZXRibHVlOiAnIzVmOWVhMCcsXG4gICAgY2hhcnRyZXVzZTogJyM3ZmZmMDAnLFxuICAgIGNob2NvbGF0ZTogJyNkMjY5MWUnLFxuICAgIGNvcmFsOiAnI2ZmN2Y1MCcsXG4gICAgY29ybmZsb3dlcmJsdWU6ICcjNjQ5NWVkJyxcbiAgICBjb3Juc2lsazogJyNmZmY4ZGMnLFxuICAgIGNyaW1zb246ICcjZGMxNDNjJyxcbiAgICBjeWFuOiAnIzAwZmZmZicsXG4gICAgZGFya2JsdWU6ICcjMDAwMDhiJyxcbiAgICBkYXJrY3lhbjogJyMwMDhiOGInLFxuICAgIGRhcmtnb2xkZW5yb2Q6ICcjYjg4NjBiJyxcbiAgICBkYXJrZ3JheTogJyNhOWE5YTknLFxuICAgIGRhcmtncmVlbjogJyMwMDY0MDAnLFxuICAgIGRhcmtncmV5OiAnI2E5YTlhOScsXG4gICAgZGFya2toYWtpOiAnI2JkYjc2YicsXG4gICAgZGFya21hZ2VudGE6ICcjOGIwMDhiJyxcbiAgICBkYXJrb2xpdmVncmVlbjogJyM1NTZiMmYnLFxuICAgIGRhcmtvcmFuZ2U6ICcjZmY4YzAwJyxcbiAgICBkYXJrb3JjaGlkOiAnIzk5MzJjYycsXG4gICAgZGFya3JlZDogJyM4YjAwMDAnLFxuICAgIGRhcmtzYWxtb246ICcjZTk5NjdhJyxcbiAgICBkYXJrc2VhZ3JlZW46ICcjOGZiYzhmJyxcbiAgICBkYXJrc2xhdGVibHVlOiAnIzQ4M2Q4YicsXG4gICAgZGFya3NsYXRlZ3JheTogJyMyZjRmNGYnLFxuICAgIGRhcmtzbGF0ZWdyZXk6ICcjMmY0ZjRmJyxcbiAgICBkYXJrdHVycXVvaXNlOiAnIzAwY2VkMScsXG4gICAgZGFya3Zpb2xldDogJyM5NDAwZDMnLFxuICAgIGRlZXBwaW5rOiAnI2ZmMTQ5MycsXG4gICAgZGVlcHNreWJsdWU6ICcjMDBiZmZmJyxcbiAgICBkaW1ncmF5OiAnIzY5Njk2OScsXG4gICAgZGltZ3JleTogJyM2OTY5NjknLFxuICAgIGRvZGdlcmJsdWU6ICcjMWU5MGZmJyxcbiAgICBmaXJlYnJpY2s6ICcjYjIyMjIyJyxcbiAgICBmbG9yYWx3aGl0ZTogJyNmZmZhZjAnLFxuICAgIGZvcmVzdGdyZWVuOiAnIzIyOGIyMicsXG4gICAgZnVjaHNpYTogJyNmZjAwZmYnLFxuICAgIGdhaW5zYm9ybzogJyNkY2RjZGMnLFxuICAgIGdob3N0d2hpdGU6ICcjZjhmOGZmJyxcbiAgICBnb2xkZW5yb2Q6ICcjZGFhNTIwJyxcbiAgICBnb2xkOiAnI2ZmZDcwMCcsXG4gICAgZ3JheTogJyM4MDgwODAnLFxuICAgIGdyZWVuOiAnIzAwODAwMCcsXG4gICAgZ3JlZW55ZWxsb3c6ICcjYWRmZjJmJyxcbiAgICBncmV5OiAnIzgwODA4MCcsXG4gICAgaG9uZXlkZXc6ICcjZjBmZmYwJyxcbiAgICBob3RwaW5rOiAnI2ZmNjliNCcsXG4gICAgaW5kaWFucmVkOiAnI2NkNWM1YycsXG4gICAgaW5kaWdvOiAnIzRiMDA4MicsXG4gICAgaXZvcnk6ICcjZmZmZmYwJyxcbiAgICBraGFraTogJyNmMGU2OGMnLFxuICAgIGxhdmVuZGVyYmx1c2g6ICcjZmZmMGY1JyxcbiAgICBsYXZlbmRlcjogJyNlNmU2ZmEnLFxuICAgIGxhd25ncmVlbjogJyM3Y2ZjMDAnLFxuICAgIGxlbW9uY2hpZmZvbjogJyNmZmZhY2QnLFxuICAgIGxpZ2h0Ymx1ZTogJyNhZGQ4ZTYnLFxuICAgIGxpZ2h0Y29yYWw6ICcjZjA4MDgwJyxcbiAgICBsaWdodGN5YW46ICcjZTBmZmZmJyxcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogJyNmYWZhZDInLFxuICAgIGxpZ2h0Z3JheTogJyNkM2QzZDMnLFxuICAgIGxpZ2h0Z3JlZW46ICcjOTBlZTkwJyxcbiAgICBsaWdodGdyZXk6ICcjZDNkM2QzJyxcbiAgICBsaWdodHBpbms6ICcjZmZiNmMxJyxcbiAgICBsaWdodHNhbG1vbjogJyNmZmEwN2EnLFxuICAgIGxpZ2h0c2VhZ3JlZW46ICcjMjBiMmFhJyxcbiAgICBsaWdodHNreWJsdWU6ICcjODdjZWZhJyxcbiAgICBsaWdodHNsYXRlZ3JheTogJyM3Nzg4OTknLFxuICAgIGxpZ2h0c2xhdGVncmV5OiAnIzc3ODg5OScsXG4gICAgbGlnaHRzdGVlbGJsdWU6ICcjYjBjNGRlJyxcbiAgICBsaWdodHllbGxvdzogJyNmZmZmZTAnLFxuICAgIGxpbWU6ICcjMDBmZjAwJyxcbiAgICBsaW1lZ3JlZW46ICcjMzJjZDMyJyxcbiAgICBsaW5lbjogJyNmYWYwZTYnLFxuICAgIG1hZ2VudGE6ICcjZmYwMGZmJyxcbiAgICBtYXJvb246ICcjODAwMDAwJyxcbiAgICBtZWRpdW1hcXVhbWFyaW5lOiAnIzY2Y2RhYScsXG4gICAgbWVkaXVtYmx1ZTogJyMwMDAwY2QnLFxuICAgIG1lZGl1bW9yY2hpZDogJyNiYTU1ZDMnLFxuICAgIG1lZGl1bXB1cnBsZTogJyM5MzcwZGInLFxuICAgIG1lZGl1bXNlYWdyZWVuOiAnIzNjYjM3MScsXG4gICAgbWVkaXVtc2xhdGVibHVlOiAnIzdiNjhlZScsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46ICcjMDBmYTlhJyxcbiAgICBtZWRpdW10dXJxdW9pc2U6ICcjNDhkMWNjJyxcbiAgICBtZWRpdW12aW9sZXRyZWQ6ICcjYzcxNTg1JyxcbiAgICBtaWRuaWdodGJsdWU6ICcjMTkxOTcwJyxcbiAgICBtaW50Y3JlYW06ICcjZjVmZmZhJyxcbiAgICBtaXN0eXJvc2U6ICcjZmZlNGUxJyxcbiAgICBtb2NjYXNpbjogJyNmZmU0YjUnLFxuICAgIG5hdmFqb3doaXRlOiAnI2ZmZGVhZCcsXG4gICAgbmF2eTogJyMwMDAwODAnLFxuICAgIG9sZGxhY2U6ICcjZmRmNWU2JyxcbiAgICBvbGl2ZTogJyM4MDgwMDAnLFxuICAgIG9saXZlZHJhYjogJyM2YjhlMjMnLFxuICAgIG9yYW5nZTogJyNmZmE1MDAnLFxuICAgIG9yYW5nZXJlZDogJyNmZjQ1MDAnLFxuICAgIG9yY2hpZDogJyNkYTcwZDYnLFxuICAgIHBhbGVnb2xkZW5yb2Q6ICcjZWVlOGFhJyxcbiAgICBwYWxlZ3JlZW46ICcjOThmYjk4JyxcbiAgICBwYWxldHVycXVvaXNlOiAnI2FmZWVlZScsXG4gICAgcGFsZXZpb2xldHJlZDogJyNkYjcwOTMnLFxuICAgIHBhcGF5YXdoaXA6ICcjZmZlZmQ1JyxcbiAgICBwZWFjaHB1ZmY6ICcjZmZkYWI5JyxcbiAgICBwZXJ1OiAnI2NkODUzZicsXG4gICAgcGluazogJyNmZmMwY2InLFxuICAgIHBsdW06ICcjZGRhMGRkJyxcbiAgICBwb3dkZXJibHVlOiAnI2IwZTBlNicsXG4gICAgcHVycGxlOiAnIzgwMDA4MCcsXG4gICAgcmViZWNjYXB1cnBsZTogJyM2NjMzOTknLFxuICAgIHJlZDogJyNmZjAwMDAnLFxuICAgIHJvc3licm93bjogJyNiYzhmOGYnLFxuICAgIHJveWFsYmx1ZTogJyM0MTY5ZTEnLFxuICAgIHNhZGRsZWJyb3duOiAnIzhiNDUxMycsXG4gICAgc2FsbW9uOiAnI2ZhODA3MicsXG4gICAgc2FuZHlicm93bjogJyNmNGE0NjAnLFxuICAgIHNlYWdyZWVuOiAnIzJlOGI1NycsXG4gICAgc2Vhc2hlbGw6ICcjZmZmNWVlJyxcbiAgICBzaWVubmE6ICcjYTA1MjJkJyxcbiAgICBzaWx2ZXI6ICcjYzBjMGMwJyxcbiAgICBza3libHVlOiAnIzg3Y2VlYicsXG4gICAgc2xhdGVibHVlOiAnIzZhNWFjZCcsXG4gICAgc2xhdGVncmF5OiAnIzcwODA5MCcsXG4gICAgc2xhdGVncmV5OiAnIzcwODA5MCcsXG4gICAgc25vdzogJyNmZmZhZmEnLFxuICAgIHNwcmluZ2dyZWVuOiAnIzAwZmY3ZicsXG4gICAgc3RlZWxibHVlOiAnIzQ2ODJiNCcsXG4gICAgdGFuOiAnI2QyYjQ4YycsXG4gICAgdGVhbDogJyMwMDgwODAnLFxuICAgIHRoaXN0bGU6ICcjZDhiZmQ4JyxcbiAgICB0b21hdG86ICcjZmY2MzQ3JyxcbiAgICB0dXJxdW9pc2U6ICcjNDBlMGQwJyxcbiAgICB2aW9sZXQ6ICcjZWU4MmVlJyxcbiAgICB3aGVhdDogJyNmNWRlYjMnLFxuICAgIHdoaXRlOiAnI2ZmZmZmZicsXG4gICAgd2hpdGVzbW9rZTogJyNmNWY1ZjUnLFxuICAgIHllbGxvdzogJyNmZmZmMDAnLFxuICAgIHllbGxvd2dyZWVuOiAnIzlhY2QzMicsXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZHVuZGFudC10eXBlLWNvbnN0aXR1ZW50cyAqL1xuaW1wb3J0IHsgY29udmVydEhleFRvRGVjaW1hbCwgaHNsVG9SZ2IsIGhzdlRvUmdiLCBwYXJzZUludEZyb21IZXgsIHJnYlRvUmdiLCB9IGZyb20gJy4vY29udmVyc2lvbi5qcyc7XG5pbXBvcnQgeyBuYW1lcyB9IGZyb20gJy4vY3NzLWNvbG9yLW5hbWVzLmpzJztcbmltcG9ydCB7IGJvdW5kQWxwaGEsIGNvbnZlcnRUb1BlcmNlbnRhZ2UgfSBmcm9tICcuL3V0aWwuanMnO1xuLyoqXG4gKiBHaXZlbiBhIHN0cmluZyBvciBvYmplY3QsIGNvbnZlcnQgdGhhdCBpbnB1dCB0byBSR0JcbiAqXG4gKiBQb3NzaWJsZSBzdHJpbmcgaW5wdXRzOlxuICogYGBgXG4gKiBcInJlZFwiXG4gKiBcIiNmMDBcIiBvciBcImYwMFwiXG4gKiBcIiNmZjAwMDBcIiBvciBcImZmMDAwMFwiXG4gKiBcIiNmZjAwMDAwMFwiIG9yIFwiZmYwMDAwMDBcIlxuICogXCJyZ2IgMjU1IDAgMFwiIG9yIFwicmdiICgyNTUsIDAsIDApXCJcbiAqIFwicmdiIDEuMCAwIDBcIiBvciBcInJnYiAoMSwgMCwgMClcIlxuICogXCJyZ2JhICgyNTUsIDAsIDAsIDEpXCIgb3IgXCJyZ2JhIDI1NSwgMCwgMCwgMVwiXG4gKiBcInJnYmEgKDEuMCwgMCwgMCwgMSlcIiBvciBcInJnYmEgMS4wLCAwLCAwLCAxXCJcbiAqIFwiaHNsKDAsIDEwMCUsIDUwJSlcIiBvciBcImhzbCAwIDEwMCUgNTAlXCJcbiAqIFwiaHNsYSgwLCAxMDAlLCA1MCUsIDEpXCIgb3IgXCJoc2xhIDAgMTAwJSA1MCUsIDFcIlxuICogXCJoc3YoMCwgMTAwJSwgMTAwJSlcIiBvciBcImhzdiAwIDEwMCUgMTAwJVwiXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlucHV0VG9SR0IoY29sb3IpIHtcbiAgICB2YXIgcmdiID0geyByOiAwLCBnOiAwLCBiOiAwIH07XG4gICAgdmFyIGEgPSAxO1xuICAgIHZhciBzID0gbnVsbDtcbiAgICB2YXIgdiA9IG51bGw7XG4gICAgdmFyIGwgPSBudWxsO1xuICAgIHZhciBvayA9IGZhbHNlO1xuICAgIHZhciBmb3JtYXQgPSBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGNvbG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb2xvciA9IHN0cmluZ0lucHV0VG9PYmplY3QoY29sb3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbG9yID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IucikgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IuZykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IuYikpIHtcbiAgICAgICAgICAgIHJnYiA9IHJnYlRvUmdiKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gU3RyaW5nKGNvbG9yLnIpLnN1YnN0cigtMSkgPT09ICclJyA/ICdwcmdiJyA6ICdyZ2InO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVmFsaWRDU1NVbml0KGNvbG9yLmgpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLnMpICYmIGlzVmFsaWRDU1NVbml0KGNvbG9yLnYpKSB7XG4gICAgICAgICAgICBzID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci5zKTtcbiAgICAgICAgICAgIHYgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnYpO1xuICAgICAgICAgICAgcmdiID0gaHN2VG9SZ2IoY29sb3IuaCwgcywgdik7XG4gICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICBmb3JtYXQgPSAnaHN2JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5oKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5zKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5sKSkge1xuICAgICAgICAgICAgcyA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iucyk7XG4gICAgICAgICAgICBsID0gY29udmVydFRvUGVyY2VudGFnZShjb2xvci5sKTtcbiAgICAgICAgICAgIHJnYiA9IGhzbFRvUmdiKGNvbG9yLmgsIHMsIGwpO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9ybWF0ID0gJ2hzbCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb2xvciwgJ2EnKSkge1xuICAgICAgICAgICAgYSA9IGNvbG9yLmE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYSA9IGJvdW5kQWxwaGEoYSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb2s6IG9rLFxuICAgICAgICBmb3JtYXQ6IGNvbG9yLmZvcm1hdCB8fCBmb3JtYXQsXG4gICAgICAgIHI6IE1hdGgubWluKDI1NSwgTWF0aC5tYXgocmdiLnIsIDApKSxcbiAgICAgICAgZzogTWF0aC5taW4oMjU1LCBNYXRoLm1heChyZ2IuZywgMCkpLFxuICAgICAgICBiOiBNYXRoLm1pbigyNTUsIE1hdGgubWF4KHJnYi5iLCAwKSksXG4gICAgICAgIGE6IGEsXG4gICAgfTtcbn1cbi8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXZhbHVlcy8jaW50ZWdlcnM+XG52YXIgQ1NTX0lOVEVHRVIgPSAnWy1cXFxcK10/XFxcXGQrJT8nO1xuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdmFsdWVzLyNudW1iZXItdmFsdWU+XG52YXIgQ1NTX05VTUJFUiA9ICdbLVxcXFwrXT9cXFxcZCpcXFxcLlxcXFxkKyU/Jztcbi8vIEFsbG93IHBvc2l0aXZlL25lZ2F0aXZlIGludGVnZXIvbnVtYmVyLiAgRG9uJ3QgY2FwdHVyZSB0aGUgZWl0aGVyL29yLCBqdXN0IHRoZSBlbnRpcmUgb3V0Y29tZS5cbnZhciBDU1NfVU5JVCA9IFwiKD86XCIuY29uY2F0KENTU19OVU1CRVIsIFwiKXwoPzpcIikuY29uY2F0KENTU19JTlRFR0VSLCBcIilcIik7XG4vLyBBY3R1YWwgbWF0Y2hpbmcuXG4vLyBQYXJlbnRoZXNlcyBhbmQgY29tbWFzIGFyZSBvcHRpb25hbCwgYnV0IG5vdCByZXF1aXJlZC5cbi8vIFdoaXRlc3BhY2UgY2FuIHRha2UgdGhlIHBsYWNlIG9mIGNvbW1hcyBvciBvcGVuaW5nIHBhcmVuXG52YXIgUEVSTUlTU0lWRV9NQVRDSDMgPSBcIltcXFxcc3xcXFxcKF0rKFwiLmNvbmNhdChDU1NfVU5JVCwgXCIpWyx8XFxcXHNdKyhcIikuY29uY2F0KENTU19VTklULCBcIilbLHxcXFxcc10rKFwiKS5jb25jYXQoQ1NTX1VOSVQsIFwiKVxcXFxzKlxcXFwpP1wiKTtcbnZhciBQRVJNSVNTSVZFX01BVENINCA9IFwiW1xcXFxzfFxcXFwoXSsoXCIuY29uY2F0KENTU19VTklULCBcIilbLHxcXFxcc10rKFwiKS5jb25jYXQoQ1NTX1VOSVQsIFwiKVssfFxcXFxzXSsoXCIpLmNvbmNhdChDU1NfVU5JVCwgXCIpWyx8XFxcXHNdKyhcIikuY29uY2F0KENTU19VTklULCBcIilcXFxccypcXFxcKT9cIik7XG52YXIgbWF0Y2hlcnMgPSB7XG4gICAgQ1NTX1VOSVQ6IG5ldyBSZWdFeHAoQ1NTX1VOSVQpLFxuICAgIHJnYjogbmV3IFJlZ0V4cCgncmdiJyArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICByZ2JhOiBuZXcgUmVnRXhwKCdyZ2JhJyArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICBoc2w6IG5ldyBSZWdFeHAoJ2hzbCcgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgaHNsYTogbmV3IFJlZ0V4cCgnaHNsYScgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgaHN2OiBuZXcgUmVnRXhwKCdoc3YnICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgIGhzdmE6IG5ldyBSZWdFeHAoJ2hzdmEnICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgIGhleDM6IC9eIz8oWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLyxcbiAgICBoZXg2OiAvXiM/KFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pJC8sXG4gICAgaGV4NDogL14jPyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLyxcbiAgICBoZXg4OiAvXiM/KFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KSQvLFxufTtcbi8qKlxuICogUGVybWlzc2l2ZSBzdHJpbmcgcGFyc2luZy4gIFRha2UgaW4gYSBudW1iZXIgb2YgZm9ybWF0cywgYW5kIG91dHB1dCBhbiBvYmplY3RcbiAqIGJhc2VkIG9uIGRldGVjdGVkIGZvcm1hdC4gIFJldHVybnMgYHsgciwgZywgYiB9YCBvciBgeyBoLCBzLCBsIH1gIG9yIGB7IGgsIHMsIHZ9YFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nSW5wdXRUb09iamVjdChjb2xvcikge1xuICAgIGNvbG9yID0gY29sb3IudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGNvbG9yLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBuYW1lZCA9IGZhbHNlO1xuICAgIGlmIChuYW1lc1tjb2xvcl0pIHtcbiAgICAgICAgY29sb3IgPSBuYW1lc1tjb2xvcl07XG4gICAgICAgIG5hbWVkID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29sb3IgPT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogMCwgZzogMCwgYjogMCwgYTogMCwgZm9ybWF0OiAnbmFtZScgfTtcbiAgICB9XG4gICAgLy8gVHJ5IHRvIG1hdGNoIHN0cmluZyBpbnB1dCB1c2luZyByZWd1bGFyIGV4cHJlc3Npb25zLlxuICAgIC8vIEtlZXAgbW9zdCBvZiB0aGUgbnVtYmVyIGJvdW5kaW5nIG91dCBvZiB0aGlzIGZ1bmN0aW9uIC0gZG9uJ3Qgd29ycnkgYWJvdXQgWzAsMV0gb3IgWzAsMTAwXSBvciBbMCwzNjBdXG4gICAgLy8gSnVzdCByZXR1cm4gYW4gb2JqZWN0IGFuZCBsZXQgdGhlIGNvbnZlcnNpb24gZnVuY3Rpb25zIGhhbmRsZSB0aGF0LlxuICAgIC8vIFRoaXMgd2F5IHRoZSByZXN1bHQgd2lsbCBiZSB0aGUgc2FtZSB3aGV0aGVyIHRoZSB0aW55Y29sb3IgaXMgaW5pdGlhbGl6ZWQgd2l0aCBzdHJpbmcgb3Igb2JqZWN0LlxuICAgIHZhciBtYXRjaCA9IG1hdGNoZXJzLnJnYi5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0Y2hbMV0sIGc6IG1hdGNoWzJdLCBiOiBtYXRjaFszXSB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLnJnYmEuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaHNsLmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4geyBoOiBtYXRjaFsxXSwgczogbWF0Y2hbMl0sIGw6IG1hdGNoWzNdIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaHNsYS5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsgaDogbWF0Y2hbMV0sIHM6IG1hdGNoWzJdLCBsOiBtYXRjaFszXSwgYTogbWF0Y2hbNF0gfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oc3YuZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oc3ZhLmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4geyBoOiBtYXRjaFsxXSwgczogbWF0Y2hbMl0sIHY6IG1hdGNoWzNdLCBhOiBtYXRjaFs0XSB9O1xuICAgIH1cbiAgICBtYXRjaCA9IG1hdGNoZXJzLmhleDguZXhlYyhjb2xvcik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSksXG4gICAgICAgICAgICBhOiBjb252ZXJ0SGV4VG9EZWNpbWFsKG1hdGNoWzRdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyAnbmFtZScgOiAnaGV4OCcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaGV4Ni5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyAnbmFtZScgOiAnaGV4JyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbWF0Y2ggPSBtYXRjaGVycy5oZXg0LmV4ZWMoY29sb3IpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdICsgbWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdICsgbWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdICsgbWF0Y2hbM10pLFxuICAgICAgICAgICAgYTogY29udmVydEhleFRvRGVjaW1hbChtYXRjaFs0XSArIG1hdGNoWzRdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyAnbmFtZScgOiAnaGV4OCcsXG4gICAgICAgIH07XG4gICAgfVxuICAgIG1hdGNoID0gbWF0Y2hlcnMuaGV4My5leGVjKGNvbG9yKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSArIG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSArIG1hdGNoWzJdKSxcbiAgICAgICAgICAgIGI6IHBhcnNlSW50RnJvbUhleChtYXRjaFszXSArIG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyAnbmFtZScgOiAnaGV4JyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBDaGVjayB0byBzZWUgaWYgaXQgbG9va3MgbGlrZSBhIENTUyB1bml0XG4gKiAoc2VlIGBtYXRjaGVyc2AgYWJvdmUgZm9yIGRlZmluaXRpb24pLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZENTU1VuaXQoY29sb3IpIHtcbiAgICByZXR1cm4gQm9vbGVhbihtYXRjaGVycy5DU1NfVU5JVC5leGVjKFN0cmluZyhjb2xvcikpKTtcbn1cbiIsImltcG9ydCB7IGlucHV0VG9SR0IsIHJnYlRvSGV4LCByZ2JUb0hzdiB9IGZyb20gJ0BjdHJsL3Rpbnljb2xvcic7XG52YXIgaHVlU3RlcCA9IDI7IC8vIOiJsuebuOmYtuair1xuXG52YXIgc2F0dXJhdGlvblN0ZXAgPSAwLjE2OyAvLyDppbHlkozluqbpmLbmoq/vvIzmtYXoibLpg6jliIZcblxudmFyIHNhdHVyYXRpb25TdGVwMiA9IDAuMDU7IC8vIOmlseWSjOW6pumYtuair++8jOa3seiJsumDqOWIhlxuXG52YXIgYnJpZ2h0bmVzc1N0ZXAxID0gMC4wNTsgLy8g5Lqu5bqm6Zi25qKv77yM5rWF6Imy6YOo5YiGXG5cbnZhciBicmlnaHRuZXNzU3RlcDIgPSAwLjE1OyAvLyDkuq7luqbpmLbmoq/vvIzmt7HoibLpg6jliIZcblxudmFyIGxpZ2h0Q29sb3JDb3VudCA9IDU7IC8vIOa1heiJsuaVsOmHj++8jOS4u+iJsuS4ilxuXG52YXIgZGFya0NvbG9yQ291bnQgPSA0OyAvLyDmt7HoibLmlbDph4/vvIzkuLvoibLkuItcbi8vIOaal+iJsuS4u+mimOminOiJsuaYoOWwhOWFs+ezu+ihqFxuXG52YXIgZGFya0NvbG9yTWFwID0gW3tcbiAgaW5kZXg6IDcsXG4gIG9wYWNpdHk6IDAuMTVcbn0sIHtcbiAgaW5kZXg6IDYsXG4gIG9wYWNpdHk6IDAuMjVcbn0sIHtcbiAgaW5kZXg6IDUsXG4gIG9wYWNpdHk6IDAuM1xufSwge1xuICBpbmRleDogNSxcbiAgb3BhY2l0eTogMC40NVxufSwge1xuICBpbmRleDogNSxcbiAgb3BhY2l0eTogMC42NVxufSwge1xuICBpbmRleDogNSxcbiAgb3BhY2l0eTogMC44NVxufSwge1xuICBpbmRleDogNCxcbiAgb3BhY2l0eTogMC45XG59LCB7XG4gIGluZGV4OiAzLFxuICBvcGFjaXR5OiAwLjk1XG59LCB7XG4gIGluZGV4OiAyLFxuICBvcGFjaXR5OiAwLjk3XG59LCB7XG4gIGluZGV4OiAxLFxuICBvcGFjaXR5OiAwLjk4XG59XTtcblxuLy8gV3JhcHBlciBmdW5jdGlvbiBwb3J0ZWQgZnJvbSBUaW55Q29sb3IucHJvdG90eXBlLnRvSHN2XG4vLyBLZWVwIGl0IGhlcmUgYmVjYXVzZSBvZiBgaHN2LmggKiAzNjBgXG5mdW5jdGlvbiB0b0hzdihfcmVmKSB7XG4gIHZhciByID0gX3JlZi5yLFxuICAgICAgZyA9IF9yZWYuZyxcbiAgICAgIGIgPSBfcmVmLmI7XG4gIHZhciBoc3YgPSByZ2JUb0hzdihyLCBnLCBiKTtcbiAgcmV0dXJuIHtcbiAgICBoOiBoc3YuaCAqIDM2MCxcbiAgICBzOiBoc3YucyxcbiAgICB2OiBoc3YudlxuICB9O1xufSAvLyBXcmFwcGVyIGZ1bmN0aW9uIHBvcnRlZCBmcm9tIFRpbnlDb2xvci5wcm90b3R5cGUudG9IZXhTdHJpbmdcbi8vIEtlZXAgaXQgaGVyZSBiZWNhdXNlIG9mIHRoZSBwcmVmaXggYCNgXG5cblxuZnVuY3Rpb24gdG9IZXgoX3JlZjIpIHtcbiAgdmFyIHIgPSBfcmVmMi5yLFxuICAgICAgZyA9IF9yZWYyLmcsXG4gICAgICBiID0gX3JlZjIuYjtcbiAgcmV0dXJuIFwiI1wiLmNvbmNhdChyZ2JUb0hleChyLCBnLCBiLCBmYWxzZSkpO1xufSAvLyBXcmFwcGVyIGZ1bmN0aW9uIHBvcnRlZCBmcm9tIFRpbnlDb2xvci5wcm90b3R5cGUubWl4LCBub3QgdHJlZXNoYWthYmxlLlxuLy8gQW1vdW50IGluIHJhbmdlIFswLCAxXVxuLy8gQXNzdW1lIGNvbG9yMSAmIGNvbG9yMiBoYXMgbm8gYWxwaGEsIHNpbmNlIHRoZSBmb2xsb3dpbmcgc3JjIGNvZGUgZGlkIHNvLlxuXG5cbmZ1bmN0aW9uIG1peChyZ2IxLCByZ2IyLCBhbW91bnQpIHtcbiAgdmFyIHAgPSBhbW91bnQgLyAxMDA7XG4gIHZhciByZ2IgPSB7XG4gICAgcjogKHJnYjIuciAtIHJnYjEucikgKiBwICsgcmdiMS5yLFxuICAgIGc6IChyZ2IyLmcgLSByZ2IxLmcpICogcCArIHJnYjEuZyxcbiAgICBiOiAocmdiMi5iIC0gcmdiMS5iKSAqIHAgKyByZ2IxLmJcbiAgfTtcbiAgcmV0dXJuIHJnYjtcbn1cblxuZnVuY3Rpb24gZ2V0SHVlKGhzdiwgaSwgbGlnaHQpIHtcbiAgdmFyIGh1ZTsgLy8g5qC55o2u6Imy55u45LiN5ZCM77yM6Imy55u46L2s5ZCR5LiN5ZCMXG5cbiAgaWYgKE1hdGgucm91bmQoaHN2LmgpID49IDYwICYmIE1hdGgucm91bmQoaHN2LmgpIDw9IDI0MCkge1xuICAgIGh1ZSA9IGxpZ2h0ID8gTWF0aC5yb3VuZChoc3YuaCkgLSBodWVTdGVwICogaSA6IE1hdGgucm91bmQoaHN2LmgpICsgaHVlU3RlcCAqIGk7XG4gIH0gZWxzZSB7XG4gICAgaHVlID0gbGlnaHQgPyBNYXRoLnJvdW5kKGhzdi5oKSArIGh1ZVN0ZXAgKiBpIDogTWF0aC5yb3VuZChoc3YuaCkgLSBodWVTdGVwICogaTtcbiAgfVxuXG4gIGlmIChodWUgPCAwKSB7XG4gICAgaHVlICs9IDM2MDtcbiAgfSBlbHNlIGlmIChodWUgPj0gMzYwKSB7XG4gICAgaHVlIC09IDM2MDtcbiAgfVxuXG4gIHJldHVybiBodWU7XG59XG5cbmZ1bmN0aW9uIGdldFNhdHVyYXRpb24oaHN2LCBpLCBsaWdodCkge1xuICAvLyBncmV5IGNvbG9yIGRvbid0IGNoYW5nZSBzYXR1cmF0aW9uXG4gIGlmIChoc3YuaCA9PT0gMCAmJiBoc3YucyA9PT0gMCkge1xuICAgIHJldHVybiBoc3YucztcbiAgfVxuXG4gIHZhciBzYXR1cmF0aW9uO1xuXG4gIGlmIChsaWdodCkge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyAtIHNhdHVyYXRpb25TdGVwICogaTtcbiAgfSBlbHNlIGlmIChpID09PSBkYXJrQ29sb3JDb3VudCkge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyArIHNhdHVyYXRpb25TdGVwO1xuICB9IGVsc2Uge1xuICAgIHNhdHVyYXRpb24gPSBoc3YucyArIHNhdHVyYXRpb25TdGVwMiAqIGk7XG4gIH0gLy8g6L6555WM5YC85L+u5q2jXG5cblxuICBpZiAoc2F0dXJhdGlvbiA+IDEpIHtcbiAgICBzYXR1cmF0aW9uID0gMTtcbiAgfSAvLyDnrKzkuIDmoLznmoQgcyDpmZDliLblnKggMC4wNi0wLjEg5LmL6Ze0XG5cblxuICBpZiAobGlnaHQgJiYgaSA9PT0gbGlnaHRDb2xvckNvdW50ICYmIHNhdHVyYXRpb24gPiAwLjEpIHtcbiAgICBzYXR1cmF0aW9uID0gMC4xO1xuICB9XG5cbiAgaWYgKHNhdHVyYXRpb24gPCAwLjA2KSB7XG4gICAgc2F0dXJhdGlvbiA9IDAuMDY7XG4gIH1cblxuICByZXR1cm4gTnVtYmVyKHNhdHVyYXRpb24udG9GaXhlZCgyKSk7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKGhzdiwgaSwgbGlnaHQpIHtcbiAgdmFyIHZhbHVlO1xuXG4gIGlmIChsaWdodCkge1xuICAgIHZhbHVlID0gaHN2LnYgKyBicmlnaHRuZXNzU3RlcDEgKiBpO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gaHN2LnYgLSBicmlnaHRuZXNzU3RlcDIgKiBpO1xuICB9XG5cbiAgaWYgKHZhbHVlID4gMSkge1xuICAgIHZhbHVlID0gMTtcbiAgfVxuXG4gIHJldHVybiBOdW1iZXIodmFsdWUudG9GaXhlZCgyKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlKGNvbG9yKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHBhdHRlcm5zID0gW107XG4gIHZhciBwQ29sb3IgPSBpbnB1dFRvUkdCKGNvbG9yKTtcblxuICBmb3IgKHZhciBpID0gbGlnaHRDb2xvckNvdW50OyBpID4gMDsgaSAtPSAxKSB7XG4gICAgdmFyIGhzdiA9IHRvSHN2KHBDb2xvcik7XG4gICAgdmFyIGNvbG9yU3RyaW5nID0gdG9IZXgoaW5wdXRUb1JHQih7XG4gICAgICBoOiBnZXRIdWUoaHN2LCBpLCB0cnVlKSxcbiAgICAgIHM6IGdldFNhdHVyYXRpb24oaHN2LCBpLCB0cnVlKSxcbiAgICAgIHY6IGdldFZhbHVlKGhzdiwgaSwgdHJ1ZSlcbiAgICB9KSk7XG4gICAgcGF0dGVybnMucHVzaChjb2xvclN0cmluZyk7XG4gIH1cblxuICBwYXR0ZXJucy5wdXNoKHRvSGV4KHBDb2xvcikpO1xuXG4gIGZvciAodmFyIF9pID0gMTsgX2kgPD0gZGFya0NvbG9yQ291bnQ7IF9pICs9IDEpIHtcbiAgICB2YXIgX2hzdiA9IHRvSHN2KHBDb2xvcik7XG5cbiAgICB2YXIgX2NvbG9yU3RyaW5nID0gdG9IZXgoaW5wdXRUb1JHQih7XG4gICAgICBoOiBnZXRIdWUoX2hzdiwgX2kpLFxuICAgICAgczogZ2V0U2F0dXJhdGlvbihfaHN2LCBfaSksXG4gICAgICB2OiBnZXRWYWx1ZShfaHN2LCBfaSlcbiAgICB9KSk7XG5cbiAgICBwYXR0ZXJucy5wdXNoKF9jb2xvclN0cmluZyk7XG4gIH0gLy8gZGFyayB0aGVtZSBwYXR0ZXJuc1xuXG5cbiAgaWYgKG9wdHMudGhlbWUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiBkYXJrQ29sb3JNYXAubWFwKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIGluZGV4ID0gX3JlZjMuaW5kZXgsXG4gICAgICAgICAgb3BhY2l0eSA9IF9yZWYzLm9wYWNpdHk7XG4gICAgICB2YXIgZGFya0NvbG9yU3RyaW5nID0gdG9IZXgobWl4KGlucHV0VG9SR0Iob3B0cy5iYWNrZ3JvdW5kQ29sb3IgfHwgJyMxNDE0MTQnKSwgaW5wdXRUb1JHQihwYXR0ZXJuc1tpbmRleF0pLCBvcGFjaXR5ICogMTAwKSk7XG4gICAgICByZXR1cm4gZGFya0NvbG9yU3RyaW5nO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBhdHRlcm5zO1xufSIsImltcG9ydCBnZW5lcmF0ZSBmcm9tIFwiLi9nZW5lcmF0ZVwiO1xudmFyIHByZXNldFByaW1hcnlDb2xvcnMgPSB7XG4gIHJlZDogJyNGNTIyMkQnLFxuICB2b2xjYW5vOiAnI0ZBNTQxQycsXG4gIG9yYW5nZTogJyNGQThDMTYnLFxuICBnb2xkOiAnI0ZBQUQxNCcsXG4gIHllbGxvdzogJyNGQURCMTQnLFxuICBsaW1lOiAnI0EwRDkxMScsXG4gIGdyZWVuOiAnIzUyQzQxQScsXG4gIGN5YW46ICcjMTNDMkMyJyxcbiAgYmx1ZTogJyMxNjc3RkYnLFxuICBnZWVrYmx1ZTogJyMyRjU0RUInLFxuICBwdXJwbGU6ICcjNzIyRUQxJyxcbiAgbWFnZW50YTogJyNFQjJGOTYnLFxuICBncmV5OiAnIzY2NjY2Nidcbn07XG52YXIgcHJlc2V0UGFsZXR0ZXMgPSB7fTtcbnZhciBwcmVzZXREYXJrUGFsZXR0ZXMgPSB7fTtcbk9iamVjdC5rZXlzKHByZXNldFByaW1hcnlDb2xvcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBwcmVzZXRQYWxldHRlc1trZXldID0gZ2VuZXJhdGUocHJlc2V0UHJpbWFyeUNvbG9yc1trZXldKTtcbiAgcHJlc2V0UGFsZXR0ZXNba2V5XS5wcmltYXJ5ID0gcHJlc2V0UGFsZXR0ZXNba2V5XVs1XTsgLy8gZGFyayBwcmVzZXRQYWxldHRlc1xuXG4gIHByZXNldERhcmtQYWxldHRlc1trZXldID0gZ2VuZXJhdGUocHJlc2V0UHJpbWFyeUNvbG9yc1trZXldLCB7XG4gICAgdGhlbWU6ICdkYXJrJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMTQxNDE0J1xuICB9KTtcbiAgcHJlc2V0RGFya1BhbGV0dGVzW2tleV0ucHJpbWFyeSA9IHByZXNldERhcmtQYWxldHRlc1trZXldWzVdO1xufSk7XG52YXIgcmVkID0gcHJlc2V0UGFsZXR0ZXMucmVkO1xudmFyIHZvbGNhbm8gPSBwcmVzZXRQYWxldHRlcy52b2xjYW5vO1xudmFyIGdvbGQgPSBwcmVzZXRQYWxldHRlcy5nb2xkO1xudmFyIG9yYW5nZSA9IHByZXNldFBhbGV0dGVzLm9yYW5nZTtcbnZhciB5ZWxsb3cgPSBwcmVzZXRQYWxldHRlcy55ZWxsb3c7XG52YXIgbGltZSA9IHByZXNldFBhbGV0dGVzLmxpbWU7XG52YXIgZ3JlZW4gPSBwcmVzZXRQYWxldHRlcy5ncmVlbjtcbnZhciBjeWFuID0gcHJlc2V0UGFsZXR0ZXMuY3lhbjtcbnZhciBibHVlID0gcHJlc2V0UGFsZXR0ZXMuYmx1ZTtcbnZhciBnZWVrYmx1ZSA9IHByZXNldFBhbGV0dGVzLmdlZWtibHVlO1xudmFyIHB1cnBsZSA9IHByZXNldFBhbGV0dGVzLnB1cnBsZTtcbnZhciBtYWdlbnRhID0gcHJlc2V0UGFsZXR0ZXMubWFnZW50YTtcbnZhciBncmV5ID0gcHJlc2V0UGFsZXR0ZXMuZ3JleTtcbnZhciBncmF5ID0gcHJlc2V0UGFsZXR0ZXMuZ3JleTtcbmV4cG9ydCB7IGdlbmVyYXRlLCBwcmVzZXRQYWxldHRlcywgcHJlc2V0RGFya1BhbGV0dGVzLCBwcmVzZXRQcmltYXJ5Q29sb3JzLCByZWQsIHZvbGNhbm8sIG9yYW5nZSwgZ29sZCwgeWVsbG93LCBsaW1lLCBncmVlbiwgY3lhbiwgYmx1ZSwgZ2Vla2JsdWUsIHB1cnBsZSwgbWFnZW50YSwgZ3JleSwgZ3JheSB9OyIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG52YXIgSWNvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dCh7fSk7XG5leHBvcnQgZGVmYXVsdCBJY29uQ29udGV4dDsiLCJpbXBvcnQgZGVmaW5lUHJvcGVydHkgZnJvbSBcIi4vZGVmaW5lUHJvcGVydHkuanNcIjtcbmZ1bmN0aW9uIG93bktleXMoZSwgcikge1xuICB2YXIgdCA9IE9iamVjdC5rZXlzKGUpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTtcbiAgICByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7XG4gICAgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7XG4gIH1cbiAgcmV0dXJuIHQ7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkMihlKSB7XG4gIGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7XG4gICAgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9O1xuICAgIHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYW5Vc2VEb20oKSB7XG4gIHJldHVybiAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xufSIsImltcG9ydCBjYW5Vc2VEb20gZnJvbSBcIi4vY2FuVXNlRG9tXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4vY29udGFpbnNcIjtcbnZhciBBUFBFTkRfT1JERVIgPSAnZGF0YS1yYy1vcmRlcic7XG52YXIgQVBQRU5EX1BSSU9SSVRZID0gJ2RhdGEtcmMtcHJpb3JpdHknO1xudmFyIE1BUktfS0VZID0gXCJyYy11dGlsLWtleVwiO1xudmFyIGNvbnRhaW5lckNhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWFyaygpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgIG1hcmsgPSBfcmVmLm1hcms7XG4gIGlmIChtYXJrKSB7XG4gICAgcmV0dXJuIG1hcmsuc3RhcnRzV2l0aCgnZGF0YS0nKSA/IG1hcmsgOiBcImRhdGEtXCIuY29uY2F0KG1hcmspO1xuICB9XG4gIHJldHVybiBNQVJLX0tFWTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihvcHRpb24pIHtcbiAgaWYgKG9wdGlvbi5hdHRhY2hUbykge1xuICAgIHJldHVybiBvcHRpb24uYXR0YWNoVG87XG4gIH1cbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG4gIHJldHVybiBoZWFkIHx8IGRvY3VtZW50LmJvZHk7XG59XG5mdW5jdGlvbiBnZXRPcmRlcihwcmVwZW5kKSB7XG4gIGlmIChwcmVwZW5kID09PSAncXVldWUnKSB7XG4gICAgcmV0dXJuICdwcmVwZW5kUXVldWUnO1xuICB9XG4gIHJldHVybiBwcmVwZW5kID8gJ3ByZXBlbmQnIDogJ2FwcGVuZCc7XG59XG5cbi8qKlxuICogRmluZCBzdHlsZSB3aGljaCBpbmplY3QgYnkgcmMtdXRpbFxuICovXG5mdW5jdGlvbiBmaW5kU3R5bGVzKGNvbnRhaW5lcikge1xuICByZXR1cm4gQXJyYXkuZnJvbSgoY29udGFpbmVyQ2FjaGUuZ2V0KGNvbnRhaW5lcikgfHwgY29udGFpbmVyKS5jaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gJ1NUWUxFJztcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0Q1NTKGNzcykge1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgaWYgKCFjYW5Vc2VEb20oKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBjc3AgPSBvcHRpb24uY3NwLFxuICAgIHByZXBlbmQgPSBvcHRpb24ucHJlcGVuZCxcbiAgICBfb3B0aW9uJHByaW9yaXR5ID0gb3B0aW9uLnByaW9yaXR5LFxuICAgIHByaW9yaXR5ID0gX29wdGlvbiRwcmlvcml0eSA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb24kcHJpb3JpdHk7XG4gIHZhciBtZXJnZWRPcmRlciA9IGdldE9yZGVyKHByZXBlbmQpO1xuICB2YXIgaXNQcmVwZW5kUXVldWUgPSBtZXJnZWRPcmRlciA9PT0gJ3ByZXBlbmRRdWV1ZSc7XG4gIHZhciBzdHlsZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZU5vZGUuc2V0QXR0cmlidXRlKEFQUEVORF9PUkRFUiwgbWVyZ2VkT3JkZXIpO1xuICBpZiAoaXNQcmVwZW5kUXVldWUgJiYgcHJpb3JpdHkpIHtcbiAgICBzdHlsZU5vZGUuc2V0QXR0cmlidXRlKEFQUEVORF9QUklPUklUWSwgXCJcIi5jb25jYXQocHJpb3JpdHkpKTtcbiAgfVxuICBpZiAoY3NwICE9PSBudWxsICYmIGNzcCAhPT0gdm9pZCAwICYmIGNzcC5ub25jZSkge1xuICAgIHN0eWxlTm9kZS5ub25jZSA9IGNzcCA9PT0gbnVsbCB8fCBjc3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNzcC5ub25jZTtcbiAgfVxuICBzdHlsZU5vZGUuaW5uZXJIVE1MID0gY3NzO1xuICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKG9wdGlvbik7XG4gIHZhciBmaXJzdENoaWxkID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gIGlmIChwcmVwZW5kKSB7XG4gICAgLy8gSWYgaXMgcXVldWUgYHByZXBlbmRgLCBpdCB3aWxsIHByZXBlbmQgZmlyc3Qgc3R5bGUgYW5kIHRoZW4gYXBwZW5kIHJlc3Qgc3R5bGVcbiAgICBpZiAoaXNQcmVwZW5kUXVldWUpIHtcbiAgICAgIHZhciBleGlzdFN0eWxlID0gZmluZFN0eWxlcyhjb250YWluZXIpLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAvLyBJZ25vcmUgc3R5bGUgd2hpY2ggbm90IGluamVjdGVkIGJ5IHJjLXV0aWwgd2l0aCBwcmVwZW5kXG4gICAgICAgIGlmICghWydwcmVwZW5kJywgJ3ByZXBlbmRRdWV1ZSddLmluY2x1ZGVzKG5vZGUuZ2V0QXR0cmlidXRlKEFQUEVORF9PUkRFUikpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWdub3JlIHN0eWxlIHdoaWNoIHByaW9yaXR5IGxlc3MgdGhlbiBuZXcgc3R5bGVcbiAgICAgICAgdmFyIG5vZGVQcmlvcml0eSA9IE51bWJlcihub2RlLmdldEF0dHJpYnV0ZShBUFBFTkRfUFJJT1JJVFkpIHx8IDApO1xuICAgICAgICByZXR1cm4gcHJpb3JpdHkgPj0gbm9kZVByaW9yaXR5O1xuICAgICAgfSk7XG4gICAgICBpZiAoZXhpc3RTdHlsZS5sZW5ndGgpIHtcbiAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShzdHlsZU5vZGUsIGV4aXN0U3R5bGVbZXhpc3RTdHlsZS5sZW5ndGggLSAxXS5uZXh0U2libGluZyk7XG4gICAgICAgIHJldHVybiBzdHlsZU5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXNlIGBpbnNlcnRCZWZvcmVgIGFzIGBwcmVwZW5kYFxuICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc3R5bGVOb2RlLCBmaXJzdENoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcbiAgfVxuICByZXR1cm4gc3R5bGVOb2RlO1xufVxuZnVuY3Rpb24gZmluZEV4aXN0Tm9kZShrZXkpIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBjb250YWluZXIgPSBnZXRDb250YWluZXIob3B0aW9uKTtcbiAgcmV0dXJuIGZpbmRTdHlsZXMoY29udGFpbmVyKS5maW5kKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKGdldE1hcmsob3B0aW9uKSkgPT09IGtleTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ1NTKGtleSkge1xuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIGV4aXN0Tm9kZSA9IGZpbmRFeGlzdE5vZGUoa2V5LCBvcHRpb24pO1xuICBpZiAoZXhpc3ROb2RlKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcihvcHRpb24pO1xuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChleGlzdE5vZGUpO1xuICB9XG59XG5cbi8qKlxuICogcWlhbmt1biB3aWxsIGluamVjdCBgYXBwZW5kQ2hpbGRgIHRvIGluc2VydCBpbnRvIG90aGVyXG4gKi9cbmZ1bmN0aW9uIHN5bmNSZWFsQ29udGFpbmVyKGNvbnRhaW5lciwgb3B0aW9uKSB7XG4gIHZhciBjYWNoZWRSZWFsQ29udGFpbmVyID0gY29udGFpbmVyQ2FjaGUuZ2V0KGNvbnRhaW5lcik7XG5cbiAgLy8gRmluZCByZWFsIGNvbnRhaW5lciB3aGVuIG5vdCBjYWNoZWQgb3IgY2FjaGVkIGNvbnRhaW5lciByZW1vdmVkXG4gIGlmICghY2FjaGVkUmVhbENvbnRhaW5lciB8fCAhY29udGFpbnMoZG9jdW1lbnQsIGNhY2hlZFJlYWxDb250YWluZXIpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyU3R5bGUgPSBpbmplY3RDU1MoJycsIG9wdGlvbik7XG4gICAgdmFyIHBhcmVudE5vZGUgPSBwbGFjZWhvbGRlclN0eWxlLnBhcmVudE5vZGU7XG4gICAgY29udGFpbmVyQ2FjaGUuc2V0KGNvbnRhaW5lciwgcGFyZW50Tm9kZSk7XG4gICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKHBsYWNlaG9sZGVyU3R5bGUpO1xuICB9XG59XG5cbi8qKlxuICogbWFudWFsbHkgY2xlYXIgY29udGFpbmVyIGNhY2hlIHRvIGF2b2lkIGdsb2JhbCBjYWNoZSBpbiB1bml0IHRlc3Rlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJDb250YWluZXJDYWNoZSgpIHtcbiAgY29udGFpbmVyQ2FjaGUuY2xlYXIoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDU1MoY3NzLCBrZXkpIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBjb250YWluZXIgPSBnZXRDb250YWluZXIob3B0aW9uKTtcblxuICAvLyBTeW5jIHJlYWwgcGFyZW50XG4gIHN5bmNSZWFsQ29udGFpbmVyKGNvbnRhaW5lciwgb3B0aW9uKTtcbiAgdmFyIGV4aXN0Tm9kZSA9IGZpbmRFeGlzdE5vZGUoa2V5LCBvcHRpb24pO1xuICBpZiAoZXhpc3ROb2RlKSB7XG4gICAgdmFyIF9vcHRpb24kY3NwLCBfb3B0aW9uJGNzcDI7XG4gICAgaWYgKChfb3B0aW9uJGNzcCA9IG9wdGlvbi5jc3ApICE9PSBudWxsICYmIF9vcHRpb24kY3NwICE9PSB2b2lkIDAgJiYgX29wdGlvbiRjc3Aubm9uY2UgJiYgZXhpc3ROb2RlLm5vbmNlICE9PSAoKF9vcHRpb24kY3NwMiA9IG9wdGlvbi5jc3ApID09PSBudWxsIHx8IF9vcHRpb24kY3NwMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbiRjc3AyLm5vbmNlKSkge1xuICAgICAgdmFyIF9vcHRpb24kY3NwMztcbiAgICAgIGV4aXN0Tm9kZS5ub25jZSA9IChfb3B0aW9uJGNzcDMgPSBvcHRpb24uY3NwKSA9PT0gbnVsbCB8fCBfb3B0aW9uJGNzcDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb24kY3NwMy5ub25jZTtcbiAgICB9XG4gICAgaWYgKGV4aXN0Tm9kZS5pbm5lckhUTUwgIT09IGNzcykge1xuICAgICAgZXhpc3ROb2RlLmlubmVySFRNTCA9IGNzcztcbiAgICB9XG4gICAgcmV0dXJuIGV4aXN0Tm9kZTtcbiAgfVxuICB2YXIgbmV3Tm9kZSA9IGluamVjdENTUyhjc3MsIG9wdGlvbik7XG4gIG5ld05vZGUuc2V0QXR0cmlidXRlKGdldE1hcmsob3B0aW9uKSwga2V5KTtcbiAgcmV0dXJuIG5ld05vZGU7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocm9vdCwgbikge1xuICBpZiAoIXJvb3QpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBVc2UgbmF0aXZlIGlmIHN1cHBvcnRcbiAgaWYgKHJvb3QuY29udGFpbnMpIHtcbiAgICByZXR1cm4gcm9vdC5jb250YWlucyhuKTtcbiAgfVxuXG4gIC8vIGBkb2N1bWVudC5jb250YWluc2Agbm90IHN1cHBvcnQgd2l0aCBJRTExXG4gIHZhciBub2RlID0gbjtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZSA9PT0gcm9vdCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSIsImZ1bmN0aW9uIGdldFJvb3QoZWxlKSB7XG4gIHZhciBfZWxlJGdldFJvb3ROb2RlO1xuICByZXR1cm4gZWxlID09PSBudWxsIHx8IGVsZSA9PT0gdm9pZCAwIHx8IChfZWxlJGdldFJvb3ROb2RlID0gZWxlLmdldFJvb3ROb2RlKSA9PT0gbnVsbCB8fCBfZWxlJGdldFJvb3ROb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZWxlJGdldFJvb3ROb2RlLmNhbGwoZWxlKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBpcyBpbiBzaGFkb3dSb290XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpblNoYWRvdyhlbGUpIHtcbiAgcmV0dXJuIGdldFJvb3QoZWxlKSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbi8qKlxuICogUmV0dXJuIHNoYWRvd1Jvb3QgaWYgcG9zc2libGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNoYWRvd1Jvb3QoZWxlKSB7XG4gIHJldHVybiBpblNoYWRvdyhlbGUpID8gZ2V0Um9vdChlbGUpIDogbnVsbDtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG52YXIgd2FybmVkID0ge307XG52YXIgcHJlV2FybmluZ0ZucyA9IFtdO1xuXG4vKipcbiAqIFByZSB3YXJuaW5nIGVuYWJsZSB5b3UgdG8gcGFyc2UgY29udGVudCBiZWZvcmUgY29uc29sZS5lcnJvci5cbiAqIE1vZGlmeSB0byBudWxsIHdpbGwgcHJldmVudCB3YXJuaW5nLlxuICovXG5leHBvcnQgdmFyIHByZU1lc3NhZ2UgPSBmdW5jdGlvbiBwcmVNZXNzYWdlKGZuKSB7XG4gIHByZVdhcm5pbmdGbnMucHVzaChmbik7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm5pbmcodmFsaWQsIG1lc3NhZ2UpIHtcbiAgLy8gU3VwcG9ydCB1Z2xpZnlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXZhbGlkICYmIGNvbnNvbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBmaW5hbE1lc3NhZ2UgPSBwcmVXYXJuaW5nRm5zLnJlZHVjZShmdW5jdGlvbiAobXNnLCBwcmVNZXNzYWdlRm4pIHtcbiAgICAgIHJldHVybiBwcmVNZXNzYWdlRm4obXNnICE9PSBudWxsICYmIG1zZyAhPT0gdm9pZCAwID8gbXNnIDogJycsICd3YXJuaW5nJyk7XG4gICAgfSwgbWVzc2FnZSk7XG4gICAgaWYgKGZpbmFsTWVzc2FnZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIldhcm5pbmc6IFwiLmNvbmNhdChmaW5hbE1lc3NhZ2UpKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBub3RlKHZhbGlkLCBtZXNzYWdlKSB7XG4gIC8vIFN1cHBvcnQgdWdsaWZ5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF2YWxpZCAmJiBjb25zb2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZmluYWxNZXNzYWdlID0gcHJlV2FybmluZ0Zucy5yZWR1Y2UoZnVuY3Rpb24gKG1zZywgcHJlTWVzc2FnZUZuKSB7XG4gICAgICByZXR1cm4gcHJlTWVzc2FnZUZuKG1zZyAhPT0gbnVsbCAmJiBtc2cgIT09IHZvaWQgMCA/IG1zZyA6ICcnLCAnbm90ZScpO1xuICAgIH0sIG1lc3NhZ2UpO1xuICAgIGlmIChmaW5hbE1lc3NhZ2UpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIk5vdGU6IFwiLmNvbmNhdChmaW5hbE1lc3NhZ2UpKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNldFdhcm5lZCgpIHtcbiAgd2FybmVkID0ge307XG59XG5leHBvcnQgZnVuY3Rpb24gY2FsbChtZXRob2QsIHZhbGlkLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsaWQgJiYgIXdhcm5lZFttZXNzYWdlXSkge1xuICAgIG1ldGhvZChmYWxzZSwgbWVzc2FnZSk7XG4gICAgd2FybmVkW21lc3NhZ2VdID0gdHJ1ZTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHdhcm5pbmdPbmNlKHZhbGlkLCBtZXNzYWdlKSB7XG4gIGNhbGwod2FybmluZywgdmFsaWQsIG1lc3NhZ2UpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vdGVPbmNlKHZhbGlkLCBtZXNzYWdlKSB7XG4gIGNhbGwobm90ZSwgdmFsaWQsIG1lc3NhZ2UpO1xufVxud2FybmluZ09uY2UucHJlTWVzc2FnZSA9IHByZU1lc3NhZ2U7XG53YXJuaW5nT25jZS5yZXNldFdhcm5lZCA9IHJlc2V0V2FybmVkO1xud2FybmluZ09uY2Uubm90ZU9uY2UgPSBub3RlT25jZTtcbmV4cG9ydCBkZWZhdWx0IHdhcm5pbmdPbmNlO1xuLyogZXNsaW50LWVuYWJsZSAqLyIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZSBhcyBnZW5lcmF0ZUNvbG9yIH0gZnJvbSAnQGFudC1kZXNpZ24vY29sb3JzJztcbmltcG9ydCB7IHVwZGF0ZUNTUyB9IGZyb20gXCJyYy11dGlsL2VzL0RvbS9keW5hbWljQ1NTXCI7XG5pbXBvcnQgeyBnZXRTaGFkb3dSb290IH0gZnJvbSBcInJjLXV0aWwvZXMvRG9tL3NoYWRvd1wiO1xuaW1wb3J0IHdhcm4gZnJvbSBcInJjLXV0aWwvZXMvd2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJY29uQ29udGV4dCBmcm9tIFwiLi9jb21wb25lbnRzL0NvbnRleHRcIjtcbmZ1bmN0aW9uIGNhbWVsQ2FzZShpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvLSguKS9nLCBmdW5jdGlvbiAobWF0Y2gsIGcpIHtcbiAgICByZXR1cm4gZy50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nKHZhbGlkLCBtZXNzYWdlKSB7XG4gIHdhcm4odmFsaWQsIFwiW0BhbnQtZGVzaWduL2ljb25zXSBcIi5jb25jYXQobWVzc2FnZSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSWNvbkRlZmluaXRpb24odGFyZ2V0KSB7XG4gIHJldHVybiBfdHlwZW9mKHRhcmdldCkgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXQubmFtZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHRhcmdldC50aGVtZSA9PT0gJ3N0cmluZycgJiYgKF90eXBlb2YodGFyZ2V0Lmljb24pID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdGFyZ2V0Lmljb24gPT09ICdmdW5jdGlvbicpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUF0dHJzKCkge1xuICB2YXIgYXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cnMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICB2YXIgdmFsID0gYXR0cnNba2V5XTtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSAnY2xhc3MnOlxuICAgICAgICBhY2MuY2xhc3NOYW1lID0gdmFsO1xuICAgICAgICBkZWxldGUgYWNjLmNsYXNzO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICAgICAgYWNjW2NhbWVsQ2FzZShrZXkpXSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlKG5vZGUsIGtleSwgcm9vdFByb3BzKSB7XG4gIGlmICghcm9vdFByb3BzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KG5vZGUudGFnLCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgbm9ybWFsaXplQXR0cnMobm9kZS5hdHRycykpLCAobm9kZS5jaGlsZHJlbiB8fCBbXSkubWFwKGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0ZShjaGlsZCwgXCJcIi5jb25jYXQoa2V5LCBcIi1cIikuY29uY2F0KG5vZGUudGFnLCBcIi1cIikuY29uY2F0KGluZGV4KSk7XG4gICAgfSkpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChub2RlLnRhZywgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgICBrZXk6IGtleVxuICB9LCBub3JtYWxpemVBdHRycyhub2RlLmF0dHJzKSksIHJvb3RQcm9wcyksIChub2RlLmNoaWxkcmVuIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIHJldHVybiBnZW5lcmF0ZShjaGlsZCwgXCJcIi5jb25jYXQoa2V5LCBcIi1cIikuY29uY2F0KG5vZGUudGFnLCBcIi1cIikuY29uY2F0KGluZGV4KSk7XG4gIH0pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWNvbmRhcnlDb2xvcihwcmltYXJ5Q29sb3IpIHtcbiAgLy8gY2hvb3NlIHRoZSBzZWNvbmQgY29sb3JcbiAgcmV0dXJuIGdlbmVyYXRlQ29sb3IocHJpbWFyeUNvbG9yKVswXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVUd29Ub25lQ29sb3JzKHR3b1RvbmVDb2xvcikge1xuICBpZiAoIXR3b1RvbmVDb2xvcikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gQXJyYXkuaXNBcnJheSh0d29Ub25lQ29sb3IpID8gdHdvVG9uZUNvbG9yIDogW3R3b1RvbmVDb2xvcl07XG59XG5cbi8vIFRoZXNlIHByb3BzIG1ha2Ugc3VyZSB0aGF0IHRoZSBTVkcgYmVoYXZpb3VycyBsaWtlIGdlbmVyYWwgdGV4dC5cbi8vIFJlZmVyZW5jZTogaHR0cHM6Ly9ibG9nLnByb3RvdHlwci5pby9hbGlnbi1zdmctaWNvbnMtdG8tdGV4dC1hbmQtc2F5LWdvb2RieWUtdG8tZm9udC1pY29ucy1kNDRiM2Q3YjI2YjRcbmV4cG9ydCB2YXIgc3ZnQmFzZVByb3BzID0ge1xuICB3aWR0aDogJzFlbScsXG4gIGhlaWdodDogJzFlbScsXG4gIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gIGZvY3VzYWJsZTogJ2ZhbHNlJ1xufTtcbmV4cG9ydCB2YXIgaWNvblN0eWxlcyA9IFwiXFxuLmFudGljb24ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgdmVydGljYWwtYWxpZ246IC0wLjEyNWVtO1xcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG59XFxuXFxuLmFudGljb24gPiAqIHtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5cXG4uYW50aWNvbiBzdmcge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4uYW50aWNvbjo6YmVmb3JlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5hbnRpY29uIC5hbnRpY29uLWljb24ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5hbnRpY29uW3RhYmluZGV4XSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5hbnRpY29uLXNwaW46OmJlZm9yZSxcXG4uYW50aWNvbi1zcGluIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBsb2FkaW5nQ2lyY2xlIDFzIGluZmluaXRlIGxpbmVhcjtcXG4gIGFuaW1hdGlvbjogbG9hZGluZ0NpcmNsZSAxcyBpbmZpbml0ZSBsaW5lYXI7XFxufVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyBsb2FkaW5nQ2lyY2xlIHtcXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgbG9hZGluZ0NpcmNsZSB7XFxuICAxMDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgfVxcbn1cXG5cIjtcbmV4cG9ydCB2YXIgdXNlSW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gdXNlSW5zZXJ0U3R5bGVzKGVsZVJlZikge1xuICB2YXIgX3VzZUNvbnRleHQgPSB1c2VDb250ZXh0KEljb25Db250ZXh0KSxcbiAgICBjc3AgPSBfdXNlQ29udGV4dC5jc3AsXG4gICAgcHJlZml4Q2xzID0gX3VzZUNvbnRleHQucHJlZml4Q2xzO1xuICB2YXIgbWVyZ2VkU3R5bGVTdHIgPSBpY29uU3R5bGVzO1xuICBpZiAocHJlZml4Q2xzKSB7XG4gICAgbWVyZ2VkU3R5bGVTdHIgPSBtZXJnZWRTdHlsZVN0ci5yZXBsYWNlKC9hbnRpY29uL2csIHByZWZpeENscyk7XG4gIH1cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWxlID0gZWxlUmVmLmN1cnJlbnQ7XG4gICAgdmFyIHNoYWRvd1Jvb3QgPSBnZXRTaGFkb3dSb290KGVsZSk7XG4gICAgdXBkYXRlQ1NTKG1lcmdlZFN0eWxlU3RyLCAnQGFudC1kZXNpZ24taWNvbnMnLCB7XG4gICAgICBwcmVwZW5kOiB0cnVlLFxuICAgICAgY3NwOiBjc3AsXG4gICAgICBhdHRhY2hUbzogc2hhZG93Um9vdFxuICAgIH0pO1xuICB9LCBbXSk7XG59OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xudmFyIF9leGNsdWRlZCA9IFtcImljb25cIiwgXCJjbGFzc05hbWVcIiwgXCJvbkNsaWNrXCIsIFwic3R5bGVcIiwgXCJwcmltYXJ5Q29sb3JcIiwgXCJzZWNvbmRhcnlDb2xvclwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdlbmVyYXRlLCBnZXRTZWNvbmRhcnlDb2xvciwgaXNJY29uRGVmaW5pdGlvbiwgd2FybmluZywgdXNlSW5zZXJ0U3R5bGVzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG52YXIgdHdvVG9uZUNvbG9yUGFsZXR0ZSA9IHtcbiAgcHJpbWFyeUNvbG9yOiAnIzMzMycsXG4gIHNlY29uZGFyeUNvbG9yOiAnI0U2RTZFNicsXG4gIGNhbGN1bGF0ZWQ6IGZhbHNlXG59O1xuZnVuY3Rpb24gc2V0VHdvVG9uZUNvbG9ycyhfcmVmKSB7XG4gIHZhciBwcmltYXJ5Q29sb3IgPSBfcmVmLnByaW1hcnlDb2xvcixcbiAgICBzZWNvbmRhcnlDb2xvciA9IF9yZWYuc2Vjb25kYXJ5Q29sb3I7XG4gIHR3b1RvbmVDb2xvclBhbGV0dGUucHJpbWFyeUNvbG9yID0gcHJpbWFyeUNvbG9yO1xuICB0d29Ub25lQ29sb3JQYWxldHRlLnNlY29uZGFyeUNvbG9yID0gc2Vjb25kYXJ5Q29sb3IgfHwgZ2V0U2Vjb25kYXJ5Q29sb3IocHJpbWFyeUNvbG9yKTtcbiAgdHdvVG9uZUNvbG9yUGFsZXR0ZS5jYWxjdWxhdGVkID0gISFzZWNvbmRhcnlDb2xvcjtcbn1cbmZ1bmN0aW9uIGdldFR3b1RvbmVDb2xvcnMoKSB7XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCB0d29Ub25lQ29sb3JQYWxldHRlKTtcbn1cbnZhciBJY29uQmFzZSA9IGZ1bmN0aW9uIEljb25CYXNlKHByb3BzKSB7XG4gIHZhciBpY29uID0gcHJvcHMuaWNvbixcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICBwcmltYXJ5Q29sb3IgPSBwcm9wcy5wcmltYXJ5Q29sb3IsXG4gICAgc2Vjb25kYXJ5Q29sb3IgPSBwcm9wcy5zZWNvbmRhcnlDb2xvcixcbiAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIF9leGNsdWRlZCk7XG4gIHZhciBzdmdSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGNvbG9ycyA9IHR3b1RvbmVDb2xvclBhbGV0dGU7XG4gIGlmIChwcmltYXJ5Q29sb3IpIHtcbiAgICBjb2xvcnMgPSB7XG4gICAgICBwcmltYXJ5Q29sb3I6IHByaW1hcnlDb2xvcixcbiAgICAgIHNlY29uZGFyeUNvbG9yOiBzZWNvbmRhcnlDb2xvciB8fCBnZXRTZWNvbmRhcnlDb2xvcihwcmltYXJ5Q29sb3IpXG4gICAgfTtcbiAgfVxuICB1c2VJbnNlcnRTdHlsZXMoc3ZnUmVmKTtcbiAgd2FybmluZyhpc0ljb25EZWZpbml0aW9uKGljb24pLCBcImljb24gc2hvdWxkIGJlIGljb24gZGVmaW5pdG9uLCBidXQgZ290IFwiLmNvbmNhdChpY29uKSk7XG4gIGlmICghaXNJY29uRGVmaW5pdGlvbihpY29uKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciB0YXJnZXQgPSBpY29uO1xuICBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQuaWNvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRhcmdldCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGFyZ2V0KSwge30sIHtcbiAgICAgIGljb246IHRhcmdldC5pY29uKGNvbG9ycy5wcmltYXJ5Q29sb3IsIGNvbG9ycy5zZWNvbmRhcnlDb2xvcilcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZ2VuZXJhdGUodGFyZ2V0Lmljb24sIFwic3ZnLVwiLmNvbmNhdCh0YXJnZXQubmFtZSksIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgJ2RhdGEtaWNvbic6IHRhcmdldC5uYW1lLFxuICAgIHdpZHRoOiAnMWVtJyxcbiAgICBoZWlnaHQ6ICcxZW0nLFxuICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJ1xuICB9LCByZXN0UHJvcHMpLCB7fSwge1xuICAgIHJlZjogc3ZnUmVmXG4gIH0pKTtcbn07XG5JY29uQmFzZS5kaXNwbGF5TmFtZSA9ICdJY29uUmVhY3QnO1xuSWNvbkJhc2UuZ2V0VHdvVG9uZUNvbG9ycyA9IGdldFR3b1RvbmVDb2xvcnM7XG5JY29uQmFzZS5zZXRUd29Ub25lQ29sb3JzID0gc2V0VHdvVG9uZUNvbG9ycztcbmV4cG9ydCBkZWZhdWx0IEljb25CYXNlOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IFJlYWN0SWNvbiBmcm9tIFwiLi9JY29uQmFzZVwiO1xuaW1wb3J0IHsgbm9ybWFsaXplVHdvVG9uZUNvbG9ycyB9IGZyb20gXCIuLi91dGlsc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHNldFR3b1RvbmVDb2xvcih0d29Ub25lQ29sb3IpIHtcbiAgdmFyIF9ub3JtYWxpemVUd29Ub25lQ29sbyA9IG5vcm1hbGl6ZVR3b1RvbmVDb2xvcnModHdvVG9uZUNvbG9yKSxcbiAgICBfbm9ybWFsaXplVHdvVG9uZUNvbG8yID0gX3NsaWNlZFRvQXJyYXkoX25vcm1hbGl6ZVR3b1RvbmVDb2xvLCAyKSxcbiAgICBwcmltYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzBdLFxuICAgIHNlY29uZGFyeUNvbG9yID0gX25vcm1hbGl6ZVR3b1RvbmVDb2xvMlsxXTtcbiAgcmV0dXJuIFJlYWN0SWNvbi5zZXRUd29Ub25lQ29sb3JzKHtcbiAgICBwcmltYXJ5Q29sb3I6IHByaW1hcnlDb2xvcixcbiAgICBzZWNvbmRhcnlDb2xvcjogc2Vjb25kYXJ5Q29sb3JcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHdvVG9uZUNvbG9yKCkge1xuICB2YXIgY29sb3JzID0gUmVhY3RJY29uLmdldFR3b1RvbmVDb2xvcnMoKTtcbiAgaWYgKCFjb2xvcnMuY2FsY3VsYXRlZCkge1xuICAgIHJldHVybiBjb2xvcnMucHJpbWFyeUNvbG9yO1xuICB9XG4gIHJldHVybiBbY29sb3JzLnByaW1hcnlDb2xvciwgY29sb3JzLnNlY29uZGFyeUNvbG9yXTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJpY29uXCIsIFwic3BpblwiLCBcInJvdGF0ZVwiLCBcInRhYkluZGV4XCIsIFwib25DbGlja1wiLCBcInR3b1RvbmVDb2xvclwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgYmx1ZSB9IGZyb20gJ0BhbnQtZGVzaWduL2NvbG9ycyc7XG5pbXBvcnQgQ29udGV4dCBmcm9tIFwiLi9Db250ZXh0XCI7XG5pbXBvcnQgUmVhY3RJY29uIGZyb20gXCIuL0ljb25CYXNlXCI7XG5pbXBvcnQgeyBnZXRUd29Ub25lQ29sb3IsIHNldFR3b1RvbmVDb2xvciB9IGZyb20gXCIuL3R3b1RvbmVQcmltYXJ5Q29sb3JcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZVR3b1RvbmVDb2xvcnMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbi8vIEluaXRpYWwgc2V0dGluZ1xuLy8gc2hvdWxkIG1vdmUgaXQgdG8gYW50ZCBtYWluIHJlcG8/XG5zZXRUd29Ub25lQ29sb3IoYmx1ZS5wcmltYXJ5KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0RlZmluaXRlbHlUeXBlZC9EZWZpbml0ZWx5VHlwZWQvaXNzdWVzLzM0NzU3I2lzc3VlY29tbWVudC00ODg4NDg3MjBcblxudmFyIEljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICB2YXIgX2NsYXNzTmFtZXM7XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgaWNvbiA9IHByb3BzLmljb24sXG4gICAgc3BpbiA9IHByb3BzLnNwaW4sXG4gICAgcm90YXRlID0gcHJvcHMucm90YXRlLFxuICAgIHRhYkluZGV4ID0gcHJvcHMudGFiSW5kZXgsXG4gICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgdHdvVG9uZUNvbG9yID0gcHJvcHMudHdvVG9uZUNvbG9yLFxuICAgIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChDb250ZXh0KSxcbiAgICBfUmVhY3QkdXNlQ29udGV4dCRwcmUgPSBfUmVhY3QkdXNlQ29udGV4dC5wcmVmaXhDbHMsXG4gICAgcHJlZml4Q2xzID0gX1JlYWN0JHVzZUNvbnRleHQkcHJlID09PSB2b2lkIDAgPyAnYW50aWNvbicgOiBfUmVhY3QkdXNlQ29udGV4dCRwcmUsXG4gICAgcm9vdENsYXNzTmFtZSA9IF9SZWFjdCR1c2VDb250ZXh0LnJvb3RDbGFzc05hbWU7XG4gIHZhciBjbGFzc1N0cmluZyA9IGNsYXNzTmFtZXMocm9vdENsYXNzTmFtZSwgcHJlZml4Q2xzLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLVwiKS5jb25jYXQoaWNvbi5uYW1lKSwgISFpY29uLm5hbWUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItc3BpblwiKSwgISFzcGluIHx8IGljb24ubmFtZSA9PT0gJ2xvYWRpbmcnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpO1xuICB2YXIgaWNvblRhYkluZGV4ID0gdGFiSW5kZXg7XG4gIGlmIChpY29uVGFiSW5kZXggPT09IHVuZGVmaW5lZCAmJiBvbkNsaWNrKSB7XG4gICAgaWNvblRhYkluZGV4ID0gLTE7XG4gIH1cbiAgdmFyIHN2Z1N0eWxlID0gcm90YXRlID8ge1xuICAgIG1zVHJhbnNmb3JtOiBcInJvdGF0ZShcIi5jb25jYXQocm90YXRlLCBcImRlZylcIiksXG4gICAgdHJhbnNmb3JtOiBcInJvdGF0ZShcIi5jb25jYXQocm90YXRlLCBcImRlZylcIilcbiAgfSA6IHVuZGVmaW5lZDtcbiAgdmFyIF9ub3JtYWxpemVUd29Ub25lQ29sbyA9IG5vcm1hbGl6ZVR3b1RvbmVDb2xvcnModHdvVG9uZUNvbG9yKSxcbiAgICBfbm9ybWFsaXplVHdvVG9uZUNvbG8yID0gX3NsaWNlZFRvQXJyYXkoX25vcm1hbGl6ZVR3b1RvbmVDb2xvLCAyKSxcbiAgICBwcmltYXJ5Q29sb3IgPSBfbm9ybWFsaXplVHdvVG9uZUNvbG8yWzBdLFxuICAgIHNlY29uZGFyeUNvbG9yID0gX25vcm1hbGl6ZVR3b1RvbmVDb2xvMlsxXTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7XG4gICAgcm9sZTogXCJpbWdcIixcbiAgICBcImFyaWEtbGFiZWxcIjogaWNvbi5uYW1lXG4gIH0sIHJlc3RQcm9wcywge1xuICAgIHJlZjogcmVmLFxuICAgIHRhYkluZGV4OiBpY29uVGFiSW5kZXgsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBjbGFzc05hbWU6IGNsYXNzU3RyaW5nXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdEljb24sIHtcbiAgICBpY29uOiBpY29uLFxuICAgIHByaW1hcnlDb2xvcjogcHJpbWFyeUNvbG9yLFxuICAgIHNlY29uZGFyeUNvbG9yOiBzZWNvbmRhcnlDb2xvcixcbiAgICBzdHlsZTogc3ZnU3R5bGVcbiAgfSkpO1xufSk7XG5JY29uLmRpc3BsYXlOYW1lID0gJ0FudGRJY29uJztcbkljb24uZ2V0VHdvVG9uZUNvbG9yID0gZ2V0VHdvVG9uZUNvbG9yO1xuSWNvbi5zZXRUd29Ub25lQ29sb3IgPSBzZXRUd29Ub25lQ29sb3I7XG5leHBvcnQgZGVmYXVsdCBJY29uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRlYW1PdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9UZWFtT3V0bGluZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9BbnRkSWNvblwiO1xudmFyIFRlYW1PdXRsaW5lZCA9IGZ1bmN0aW9uIFRlYW1PdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogVGVhbU91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUZWFtT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnVGVhbU91dGxpbmVkJztcbn1cbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKFRlYW1PdXRsaW5lZCk7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBQYXBlcixJbnB1dEJhc2UsSWNvbkJ1dHRvbiB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcblxyXG5cclxuaW1wb3J0IHsgdXNlTmF2aWdhdGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tIFwiLi4vR2xvYmFsQ29udGV4dFwiO1xyXG5pbXBvcnQgeyBUZWFtT3V0bGluZWQgfSBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnNcIjtcclxuXHJcbmNvbnN0IFNlYXJjaEJveCA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIGNvbnN0IGdsb2JhbEN0eCA9IHVzZUNvbnRleHQoR2xvYmFsQ29udGV4dCk7XHJcblxyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gICAgY29uc3Qgc2VhcmNoU3RyaW5nID0gdXNlUmVmKCk7XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2xpY2tTZWFyY2ggPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHNlYXJjaFN0cmluZy5jdXJyZW50LnZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2xvYmFsQ3R4LnNldFNlYXJjaFN0cmluZ0ZuKHNlYXJjaFN0cmluZy5jdXJyZW50LnZhbHVlLnRyaW0oKSk7XHJcbiAgICAgICAgbmF2aWdhdGUocHJvcHMubGlua1RvKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyhcInByZXRyYWdhIHBvem5hdGloXCIsIHNlYXJjaFN0cmluZylcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaGFuZGxlQ2xpY2tTZWFyY2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFBhcGVyIGNsYXNzTmFtZT1cInBhcGVyXCJcclxuICAgICAgICBjb21wb25lbnQgPSAnZm9ybSdcclxuIFxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPElucHV0QmFzZSBjbGFzc05hbWU9XCJiYXNlXCJcclxuICAgICAgICBcclxuICAgICAgICAgICAgYXV0b0ZvY3VzXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwcm9wcy5wbGFjZWhvbGRlcn1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICBpbnB1dFJlZj17c2VhcmNoU3RyaW5nfVxyXG4gICAgICAgICAgICBvbktleURvd249e2hhbmRsZUtleURvd259XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxJY29uQnV0dG9uIFxyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrU2VhcmNofVxyXG4gICAgICAgICBcclxuICAgICAgICAgICAgYXJpYS1sYWJlbD0nc2VhcmNoJ1xyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxUZWFtT3V0bGluZWQgLz5cclxuICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxyXG4gICAgICAgIDwvUGFwZXI+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hCb3g7XHJcbiIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIENvcHlyaWdodE91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk01MTIgNjRDMjY0LjYgNjQgNjQgMjY0LjYgNjQgNTEyczIwMC42IDQ0OCA0NDggNDQ4IDQ0OC0yMDAuNiA0NDgtNDQ4Uzc1OS40IDY0IDUxMiA2NHptMCA4MjBjLTIwNS40IDAtMzcyLTE2Ni42LTM3Mi0zNzJzMTY2LjYtMzcyIDM3Mi0zNzIgMzcyIDE2Ni42IDM3MiAzNzItMTY2LjYgMzcyLTM3MiAzNzJ6bTUuNi01MzIuN2M1MyAwIDg5IDMzLjggOTMgODMuNC4zIDQuMiAzLjggNy40IDggNy40aDU2LjdjMi42IDAgNC43LTIuMSA0LjctNC43IDAtODYuNy02OC40LTE0Ny40LTE2Mi43LTE0Ny40QzQwNy40IDI5MCAzNDQgMzY0LjIgMzQ0IDQ4Ni44djUyLjNDMzQ0IDY2MC44IDQwNy40IDczNCA1MTcuMyA3MzRjOTQgMCAxNjIuNy01OC44IDE2Mi43LTE0MS40IDAtMi42LTIuMS00LjctNC43LTQuN2gtNTYuOGMtNC4yIDAtNy42IDMuMi04IDcuMy00LjIgNDYuMS00MC4xIDc3LjgtOTMgNzcuOC02NS4zIDAtMTAyLjEtNDcuOS0xMDIuMS0xMzMuNnYtNTIuNmMuMS04NyAzNy0xMzUuNSAxMDIuMi0xMzUuNXpcIiB9IH1dIH0sIFwibmFtZVwiOiBcImNvcHlyaWdodFwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgQ29weXJpZ2h0T3V0bGluZWQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDb3B5cmlnaHRPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9Db3B5cmlnaHRPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gXCIuLi9jb21wb25lbnRzL0FudGRJY29uXCI7XG52YXIgQ29weXJpZ2h0T3V0bGluZWQgPSBmdW5jdGlvbiBDb3B5cmlnaHRPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogQ29weXJpZ2h0T3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIENvcHlyaWdodE91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ0NvcHlyaWdodE91dGxpbmVkJztcbn1cbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENvcHlyaWdodE91dGxpbmVkKTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFBhcGVyLElucHV0QmFzZSxJY29uQnV0dG9uIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuXHJcblxyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gXCIuLi9HbG9iYWxDb250ZXh0XCI7XHJcbmltcG9ydCB7IENvcHlyaWdodE91dGxpbmVkIH0gZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zXCI7XHJcblxyXG5jb25zdCBTZWFyY2hCb3ggPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBnbG9iYWxDdHggPSB1c2VDb250ZXh0KEdsb2JhbENvbnRleHQpO1xyXG5cclxuICAgIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcclxuICAgIGNvbnN0IHNlYXJjaFN0cmluZyA9IHVzZVJlZigpO1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNsaWNrU2VhcmNoID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChzZWFyY2hTdHJpbmcuY3VycmVudC52YWx1ZS50cmltKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdsb2JhbEN0eC5zZXRTZWFyY2hTdHJpbmdGbihzZWFyY2hTdHJpbmcuY3VycmVudC52YWx1ZS50cmltKCkpO1xyXG4gICAgICAgIG5hdmlnYXRlKHByb3BzLmxpbmtUbyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJsb2dvIHByZXRyYWdhXCIsIHNlYXJjaFN0cmluZylcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaGFuZGxlQ2xpY2tTZWFyY2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFBhcGVyIGNsYXNzTmFtZT1cInBhcGVyXCJcclxuICAgICAgICBjb21wb25lbnQgPSAnZm9ybSdcclxuICBcclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxJbnB1dEJhc2UgY2xhc3NOYW1lPVwiYmFzZVwiXHJcbiAgICAgIFxyXG4gICAgICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3Byb3BzLnBsYWNlaG9sZGVyfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIGlucHV0UmVmPXtzZWFyY2hTdHJpbmd9XHJcbiAgICAgICAgICAgIG9uS2V5RG93bj17aGFuZGxlS2V5RG93bn1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPEljb25CdXR0b24gXHJcbiAgICAgICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2tTZWFyY2h9XHJcbiAgICAgICBcclxuICAgICAgICAgICAgYXJpYS1sYWJlbD0nc2VhcmNoJ1xyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxDb3B5cmlnaHRPdXRsaW5lZCAvPlxyXG4gICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgPC9QYXBlcj5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaEJveDtcclxuIiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgVHJhbnNsYXRpb25PdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJkZWZzXCIsIFwiYXR0cnNcIjoge30sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJzdHlsZVwiLCBcImF0dHJzXCI6IHt9IH1dIH0sIHsgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNMTQwIDE4OGg1ODR2MTY0aDc2VjE0NGMwLTE3LjctMTQuMy0zMi0zMi0zMkg5NmMtMTcuNyAwLTMyIDE0LjMtMzIgMzJ2NzM2YzAgMTcuNyAxNC4zIDMyIDMyIDMyaDU0NHYtNzZIMTQwVjE4OHpcIiB9IH0sIHsgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNDE0LjMgMjU2aC02MC42Yy0zLjQgMC02LjQgMi4yLTcuNiA1LjRMMjE5IDYyOS40Yy0uMy44LS40IDEuNy0uNCAyLjYgMCA0LjQgMy42IDggOCA4aDU1LjFjMy40IDAgNi40LTIuMiA3LjYtNS40TDMyMiA1NDBoMTk2LjJMNDIyIDI2MS40YTguNDIgOC40MiAwIDAwLTcuNy01LjR6bTEyLjQgMjI4aC04NS41TDM4NCAzNjAuMiA0MjYuNyA0ODR6TTkzNiA1MjhIODAwdi05M2MwLTQuNC0zLjYtOC04LThoLTU2Yy00LjQgMC04IDMuNi04IDh2OTNINTkyYy0xMy4zIDAtMjQgMTAuNy0yNCAyNHYxNzZjMCAxMy4zIDEwLjcgMjQgMjQgMjRoMTM2djE1MmMwIDQuNCAzLjYgOCA4IDhoNTZjNC40IDAgOC0zLjYgOC04Vjc1MmgxMzZjMTMuMyAwIDI0LTEwLjcgMjQtMjRWNTUyYzAtMTMuMy0xMC43LTI0LTI0LTI0ek03MjggNjgwaC04OHYtODBoODh2ODB6bTE2MCAwaC04OHYtODBoODh2ODB6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJ0cmFuc2xhdGlvblwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNsYXRpb25PdXRsaW5lZDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zbGF0aW9uT3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vVHJhbnNsYXRpb25PdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gXCIuLi9jb21wb25lbnRzL0FudGRJY29uXCI7XG52YXIgVHJhbnNsYXRpb25PdXRsaW5lZCA9IGZ1bmN0aW9uIFRyYW5zbGF0aW9uT3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IFRyYW5zbGF0aW9uT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRyYW5zbGF0aW9uT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnVHJhbnNsYXRpb25PdXRsaW5lZCc7XG59XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihUcmFuc2xhdGlvbk91dGxpbmVkKTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFBhcGVyLElucHV0QmFzZSxJY29uQnV0dG9uIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuXHJcblxyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gXCIuLi9HbG9iYWxDb250ZXh0XCI7XHJcbmltcG9ydCB7IFRyYW5zbGF0aW9uT3V0bGluZWQgfSBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnNcIjtcclxuXHJcbmNvbnN0IERpY3Rpb25hcnkgPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBnbG9iYWxDdHggPSB1c2VDb250ZXh0KEdsb2JhbENvbnRleHQpO1xyXG5cclxuICAgIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcclxuICAgIGNvbnN0IHNlYXJjaFN0cmluZyA9IHVzZVJlZigpO1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNsaWNrU2VhcmNoID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChzZWFyY2hTdHJpbmcuY3VycmVudC52YWx1ZS50cmltKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdsb2JhbEN0eC5zZXRTZWFyY2hTdHJpbmdGbihzZWFyY2hTdHJpbmcuY3VycmVudC52YWx1ZS50cmltKCkpO1xyXG4gICAgICAgIG5hdmlnYXRlKHByb3BzLmxpbmtUbyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJkaWN0aW9uYXJ5IHByZXRyYWdhXCIsIHNlYXJjaFN0cmluZylcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaGFuZGxlQ2xpY2tTZWFyY2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFBhcGVyIGNsYXNzTmFtZT1cInBhcGVyXCJcclxuICAgICAgICBjb21wb25lbnQgPSAnZm9ybSdcclxuICBcclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxJbnB1dEJhc2UgY2xhc3NOYW1lPVwiYmFzZVwiXHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGF1dG9Gb2N1c1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj17cHJvcHMucGxhY2Vob2xkZXJ9XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlucHV0UmVmPXtzZWFyY2hTdHJpbmd9XHJcbiAgICAgICAgICAgIG9uS2V5RG93bj17aGFuZGxlS2V5RG93bn1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPEljb25CdXR0b24gXHJcbiAgICAgICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2tTZWFyY2h9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgYXJpYS1sYWJlbD0nc2VhcmNoJ1xyXG4gICAgICAgICAgICA+XHJcbiAgICAgICA8VHJhbnNsYXRpb25PdXRsaW5lZCAvPlxyXG4gICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgPC9QYXBlcj5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IERpY3Rpb25hcnk7XHJcbiIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIEhpc3RvcnlPdXRsaW5lZCA9IHsgXCJpY29uXCI6IHsgXCJ0YWdcIjogXCJzdmdcIiwgXCJhdHRyc1wiOiB7IFwidmlld0JveFwiOiBcIjY0IDY0IDg5NiA4OTZcIiwgXCJmb2N1c2FibGVcIjogXCJmYWxzZVwiIH0sIFwiY2hpbGRyZW5cIjogW3sgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNTM2LjEgMjczSDQ4OGMtNC40IDAtOCAzLjYtOCA4djI3NS4zYzAgMi42IDEuMiA1IDMuMyA2LjVsMTY1LjMgMTIwLjdjMy42IDIuNiA4LjYgMS45IDExLjItMS43bDI4LjYtMzljMi43LTMuNyAxLjktOC43LTEuNy0xMS4yTDU0NC4xIDUyOC41VjI4MWMwLTQuNC0zLjYtOC04LTh6bTIxOS44IDc1LjJsMTU2LjggMzguM2M1IDEuMiA5LjktMi42IDkuOS03LjdsLjgtMTYxLjVjMC02LjctNy43LTEwLjUtMTIuOS02LjNMNzUyLjkgMzM0LjFhOCA4IDAgMDAzIDE0LjF6bTE2Ny43IDMwMS4xbC01Ni43LTE5LjVhOCA4IDAgMDAtMTAuMSA0LjhjLTEuOSA1LjEtMy45IDEwLjEtNiAxNS4xLTE3LjggNDIuMS00My4zIDgwLTc1LjkgMTEyLjVhMzUzIDM1MyAwIDAxLTExMi41IDc1LjkgMzUyLjE4IDM1Mi4xOCAwIDAxLTEzNy43IDI3LjhjLTQ3LjggMC05NC4xLTkuMy0xMzcuNy0yNy44YTM1MyAzNTMgMCAwMS0xMTIuNS03NS45Yy0zMi41LTMyLjUtNTgtNzAuNC03NS45LTExMi41QTM1My40NCAzNTMuNDQgMCAwMTE3MSA1MTJjMC00Ny44IDkuMy05NC4yIDI3LjgtMTM3LjggMTcuOC00Mi4xIDQzLjMtODAgNzUuOS0xMTIuNWEzNTMgMzUzIDAgMDExMTIuNS03NS45QzQzMC42IDE2Ny4zIDQ3NyAxNTggNTI0LjggMTU4czk0LjEgOS4zIDEzNy43IDI3LjhBMzUzIDM1MyAwIDAxNzc1IDI2MS43YzEwLjIgMTAuMyAxOS44IDIxIDI4LjYgMzIuM2w1OS44LTQ2LjhDNzg0LjcgMTQ2LjYgNjYyLjIgODEuOSA1MjQuNiA4MiAyODUgODIuMSA5Mi42IDI3Ni43IDk1IDUxNi40IDk3LjQgNzUxLjkgMjg4LjkgOTQyIDUyNC44IDk0MmMxODUuNSAwIDM0My41LTExNy42IDQwMy43LTI4Mi4zIDEuNS00LjItLjctOC45LTQuOS0xMC40elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwiaGlzdG9yeVwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgSGlzdG9yeU91dGxpbmVkO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSGlzdG9yeU91dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL0hpc3RvcnlPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gXCIuLi9jb21wb25lbnRzL0FudGRJY29uXCI7XG52YXIgSGlzdG9yeU91dGxpbmVkID0gZnVuY3Rpb24gSGlzdG9yeU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBIaXN0b3J5T3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEhpc3RvcnlPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdIaXN0b3J5T3V0bGluZWQnO1xufVxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoSGlzdG9yeU91dGxpbmVkKTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFBhcGVyLElucHV0QmFzZSxJY29uQnV0dG9uIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuXHJcblxyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gXCIuLi9HbG9iYWxDb250ZXh0XCI7XHJcbmltcG9ydCB7IEhpc3RvcnlPdXRsaW5lZCB9IGZyb20gXCJAYW50LWRlc2lnbi9pY29uc1wiO1xyXG5cclxuY29uc3QgU2VhcmNoSGlzdG9yeSA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIGNvbnN0IGdsb2JhbEN0eCA9IHVzZUNvbnRleHQoR2xvYmFsQ29udGV4dCk7XHJcblxyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gICAgY29uc3Qgc2VhcmNoU3RyaW5nID0gdXNlUmVmKCk7XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2xpY2tTZWFyY2ggPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHNlYXJjaFN0cmluZy5jdXJyZW50LnZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2xvYmFsQ3R4LnNldFNlYXJjaFN0cmluZ0ZuKHNlYXJjaFN0cmluZy5jdXJyZW50LnZhbHVlLnRyaW0oKSk7XHJcbiAgICAgICAgbmF2aWdhdGUocHJvcHMubGlua1RvKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlNlYXJjaEhpc3RvcnkgcHJldHJhZ2FcIiwgc2VhcmNoU3RyaW5nKVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gKGUpID0+IHtcclxuICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBoYW5kbGVDbGlja1NlYXJjaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UGFwZXIgY2xhc3NOYW1lPVwicGFwZXJcIlxyXG4gICAgICAgIGNvbXBvbmVudCA9ICdmb3JtJ1xyXG4gICBcclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxJbnB1dEJhc2UgY2xhc3NOYW1lPVwiYmFzZVwiXHJcbiAgICAgIFxyXG4gICAgICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3Byb3BzLnBsYWNlaG9sZGVyfVxyXG4gICAgICAgICAgICAvLyBpbnB1dFByb3BzPXt7ICdhcmllbC1sYWJlbCc6ICdzZWFyY2gnIH19XHJcbiAgICAgICAgICAgIGlucHV0UmVmPXtzZWFyY2hTdHJpbmd9XHJcbiAgICAgICAgICAgIG9uS2V5RG93bj17aGFuZGxlS2V5RG93bn1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPEljb25CdXR0b24gXHJcbiAgICAgICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2tTZWFyY2h9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9J3NlYXJjaCdcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgIDxIaXN0b3J5T3V0bGluZWQgLz5cclxuICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxyXG4gICAgICAgIDwvUGFwZXI+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hIaXN0b3J5O1xyXG4iLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBSZWFkT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTkyOCAxNjFINjk5LjJjLTQ5LjEgMC05Ny4xIDE0LjEtMTM4LjQgNDAuN0w1MTIgMjMzbC00OC44LTMxLjNBMjU1LjIgMjU1LjIgMCAwMDMyNC44IDE2MUg5NmMtMTcuNyAwLTMyIDE0LjMtMzIgMzJ2NTY4YzAgMTcuNyAxNC4zIDMyIDMyIDMyaDIyOC44YzQ5LjEgMCA5Ny4xIDE0LjEgMTM4LjQgNDAuN2w0NC40IDI4LjZjMS4zLjggMi44IDEuMyA0LjMgMS4zczMtLjQgNC4zLTEuM2w0NC40LTI4LjZDNjAyIDgwNy4xIDY1MC4xIDc5MyA2OTkuMiA3OTNIOTI4YzE3LjcgMCAzMi0xNC4zIDMyLTMyVjE5M2MwLTE3LjctMTQuMy0zMi0zMi0zMnpNMzI0LjggNzIxSDEzNlYyMzNoMTg4LjhjMzUuNCAwIDY5LjggMTAuMSA5OS41IDI5LjJsNDguOCAzMS4zIDYuOSA0LjV2NDYyYy00Ny42LTI1LjYtMTAwLjgtMzktMTU1LjItMzl6bTU2My4yIDBINjk5LjJjLTU0LjQgMC0xMDcuNiAxMy40LTE1NS4yIDM5VjI5OGw2LjktNC41IDQ4LjgtMzEuM2MyOS43LTE5LjEgNjQuMS0yOS4yIDk5LjUtMjkuMkg4ODh2NDg4ek0zOTYuOSAzNjFIMjExLjFjLTMuOSAwLTcuMSAzLjQtNy4xIDcuNXY0NWMwIDQuMSAzLjIgNy41IDcuMSA3LjVoMTg1LjdjMy45IDAgNy4xLTMuNCA3LjEtNy41di00NWMuMS00LjEtMy4xLTcuNS03LTcuNXptMjIzLjEgNy41djQ1YzAgNC4xIDMuMiA3LjUgNy4xIDcuNWgxODUuN2MzLjkgMCA3LjEtMy40IDcuMS03LjV2LTQ1YzAtNC4xLTMuMi03LjUtNy4xLTcuNUg2MjcuMWMtMy45IDAtNy4xIDMuNC03LjEgNy41ek0zOTYuOSA1MDFIMjExLjFjLTMuOSAwLTcuMSAzLjQtNy4xIDcuNXY0NWMwIDQuMSAzLjIgNy41IDcuMSA3LjVoMTg1LjdjMy45IDAgNy4xLTMuNCA3LjEtNy41di00NWMuMS00LjEtMy4xLTcuNS03LTcuNXptNDE2IDBINjI3LjFjLTMuOSAwLTcuMSAzLjQtNy4xIDcuNXY0NWMwIDQuMSAzLjIgNy41IDcuMSA3LjVoMTg1LjdjMy45IDAgNy4xLTMuNCA3LjEtNy41di00NWMuMS00LjEtMy4xLTcuNS03LTcuNXpcIiB9IH1dIH0sIFwibmFtZVwiOiBcInJlYWRcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IFJlYWRPdXRsaW5lZDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWRPdXRsaW5lZFN2ZyBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnMtc3ZnL2VzL2Fzbi9SZWFkT3V0bGluZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9BbnRkSWNvblwiO1xudmFyIFJlYWRPdXRsaW5lZCA9IGZ1bmN0aW9uIFJlYWRPdXRsaW5lZChwcm9wcywgcmVmKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBbnRkSWNvbiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgaWNvbjogUmVhZE91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFkT3V0bGluZWQuZGlzcGxheU5hbWUgPSAnUmVhZE91dGxpbmVkJztcbn1cbmV4cG9ydCBkZWZhdWx0IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKFJlYWRPdXRsaW5lZCk7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBQYXBlcixJbnB1dEJhc2UsSWNvbkJ1dHRvbiB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcblxyXG5cclxuaW1wb3J0IHsgdXNlTmF2aWdhdGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tIFwiLi4vR2xvYmFsQ29udGV4dFwiO1xyXG5pbXBvcnQgeyBSZWFkT3V0bGluZWQgfSBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnNcIjtcclxuXHJcbmNvbnN0IFNlYXJjaEhpc3RvcnlFdmVudHMgPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBnbG9iYWxDdHggPSB1c2VDb250ZXh0KEdsb2JhbENvbnRleHQpO1xyXG5cclxuICAgIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcclxuICAgIGNvbnN0IHNlYXJjaFN0cmluZyA9IHVzZVJlZigpO1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNsaWNrU2VhcmNoID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChzZWFyY2hTdHJpbmcuY3VycmVudC52YWx1ZS50cmltKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdsb2JhbEN0eC5zZXRTZWFyY2hTdHJpbmdGbihzZWFyY2hTdHJpbmcuY3VycmVudC52YWx1ZS50cmltKCkpO1xyXG4gICAgICAgIG5hdmlnYXRlKHByb3BzLmxpbmtUbyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTZWFyY2hIaXN0b3J5RXZlbnRzIHByZXRyYWdhXCIsIHNlYXJjaFN0cmluZylcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaGFuZGxlQ2xpY2tTZWFyY2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFBhcGVyIGNsYXNzTmFtZT1cInBhcGVyXCJcclxuICAgICAgICBjb21wb25lbnQgPSAnZm9ybSdcclxuXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICA8SW5wdXRCYXNlIGNsYXNzTmFtZT1cImJhc2VcIlxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3Byb3BzLnBsYWNlaG9sZGVyfVxyXG4gICAgICAgICAgICAvLyBpbnB1dFByb3BzPXt7ICdhcmllbC1sYWJlbCc6ICdzZWFyY2gnIH19XHJcbiAgICAgICAgICAgIGlucHV0UmVmPXtzZWFyY2hTdHJpbmd9XHJcbiAgICAgICAgICAgIG9uS2V5RG93bj17aGFuZGxlS2V5RG93bn1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPEljb25CdXR0b24gXHJcbiAgICAgICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2tTZWFyY2h9XHJcbiAgICAgICAgICAgIC8vIHN4PXt7IHA6ICcxMHB4J319XHJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9J3NlYXJjaCdcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICA8UmVhZE91dGxpbmVkIC8+XHJcbiAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICA8L1BhcGVyPlxyXG4gICAgKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoSGlzdG9yeUV2ZW50cztcclxuIiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuXG52YXIgVXNlck91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk04NTguNSA3NjMuNmEzNzQgMzc0IDAgMDAtODAuNi0xMTkuNSAzNzUuNjMgMzc1LjYzIDAgMDAtMTE5LjUtODAuNmMtLjQtLjItLjgtLjMtMS4yLS41QzcxOS41IDUxOCA3NjAgNDQ0LjcgNzYwIDM2MmMwLTEzNy0xMTEtMjQ4LTI0OC0yNDhTMjY0IDIyNSAyNjQgMzYyYzAgODIuNyA0MC41IDE1NiAxMDIuOCAyMDEuMS0uNC4yLS44LjMtMS4yLjUtNDQuOCAxOC45LTg1IDQ2LTExOS41IDgwLjZhMzc1LjYzIDM3NS42MyAwIDAwLTgwLjYgMTE5LjVBMzcxLjcgMzcxLjcgMCAwMDEzNiA5MDEuOGE4IDggMCAwMDggOC4yaDYwYzQuNCAwIDcuOS0zLjUgOC03LjggMi03Ny4yIDMzLTE0OS41IDg3LjgtMjA0LjMgNTYuNy01Ni43IDEzMi04Ny45IDIxMi4yLTg3LjlzMTU1LjUgMzEuMiAyMTIuMiA4Ny45Qzc3OSA3NTIuNyA4MTAgODI1IDgxMiA5MDIuMmMuMSA0LjQgMy42IDcuOCA4IDcuOGg2MGE4IDggMCAwMDgtOC4yYy0xLTQ3LjgtMTAuOS05NC4zLTI5LjUtMTM4LjJ6TTUxMiA1MzRjLTQ1LjkgMC04OS4xLTE3LjktMTIxLjYtNTAuNFMzNDAgNDA3LjkgMzQwIDM2MmMwLTQ1LjkgMTcuOS04OS4xIDUwLjQtMTIxLjZTNDY2LjEgMTkwIDUxMiAxOTBzODkuMSAxNy45IDEyMS42IDUwLjRTNjg0IDMxNi4xIDY4NCAzNjJjMCA0NS45LTE3LjkgODkuMS01MC40IDEyMS42UzU1Ny45IDUzNCA1MTIgNTM0elwiIH0gfV0gfSwgXCJuYW1lXCI6IFwidXNlclwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgVXNlck91dGxpbmVkO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG4vLyBHRU5FUkFURSBCWSAuL3NjcmlwdHMvZ2VuZXJhdGUudHNcbi8vIERPTiBOT1QgRURJVCBJVCBNQU5VQUxMWVxuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVXNlck91dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL1VzZXJPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gXCIuLi9jb21wb25lbnRzL0FudGRJY29uXCI7XG52YXIgVXNlck91dGxpbmVkID0gZnVuY3Rpb24gVXNlck91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBVc2VyT3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFVzZXJPdXRsaW5lZC5kaXNwbGF5TmFtZSA9ICdVc2VyT3V0bGluZWQnO1xufVxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoVXNlck91dGxpbmVkKTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFBhcGVyLElucHV0QmFzZSxJY29uQnV0dG9uIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuXHJcblxyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gXCIuLi9HbG9iYWxDb250ZXh0XCI7XHJcbmltcG9ydCB7IFVzZXJPdXRsaW5lZCAgfSBmcm9tIFwiQGFudC1kZXNpZ24vaWNvbnNcIjtcclxuXHJcbmNvbnN0IFNlYXJjaFBlcnNvbiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIGNvbnN0IGdsb2JhbEN0eCA9IHVzZUNvbnRleHQoR2xvYmFsQ29udGV4dCk7XHJcblxyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gICAgY29uc3Qgc2VhcmNoU3RyaW5nID0gdXNlUmVmKCk7XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2xpY2tTZWFyY2ggPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHNlYXJjaFN0cmluZy5jdXJyZW50LnZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2xvYmFsQ3R4LnNldFNlYXJjaFN0cmluZ0ZuKHNlYXJjaFN0cmluZy5jdXJyZW50LnZhbHVlLnRyaW0oKSk7XHJcbiAgICAgICAgbmF2aWdhdGUocHJvcHMubGlua1RvKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyhcInByZXRyYWdhIGlzdG9yaXNraWggbGljbm9zdGlcIiwgc2VhcmNoU3RyaW5nKVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gKGUpID0+IHtcclxuICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBoYW5kbGVDbGlja1NlYXJjaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UGFwZXIgY2xhc3NOYW1lPVwicGFwZXJcIlxyXG4gICAgICAgIGNvbXBvbmVudCA9ICdmb3JtJ1xyXG4gXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICA8SW5wdXRCYXNlIGNsYXNzTmFtZT1cImJhc2VcIlxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3Byb3BzLnBsYWNlaG9sZGVyfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIGlucHV0UmVmPXtzZWFyY2hTdHJpbmd9XHJcbiAgICAgICAgICAgIG9uS2V5RG93bj17aGFuZGxlS2V5RG93bn1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPEljb25CdXR0b24gXHJcbiAgICAgICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2tTZWFyY2h9XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICBhcmlhLWxhYmVsPSdzZWFyY2gnXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgIDxVc2VyT3V0bGluZWQgLz5cclxuICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxyXG4gICAgICAgIDwvUGFwZXI+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hQZXJzb247XHJcbiIsIi8vIFRoaXMgaWNvbiBmaWxlIGlzIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LlxudmFyIFF1ZXN0aW9uQ2lyY2xlT3V0bGluZWQgPSB7IFwiaWNvblwiOiB7IFwidGFnXCI6IFwic3ZnXCIsIFwiYXR0cnNcIjogeyBcInZpZXdCb3hcIjogXCI2NCA2NCA4OTYgODk2XCIsIFwiZm9jdXNhYmxlXCI6IFwiZmFsc2VcIiB9LCBcImNoaWxkcmVuXCI6IFt7IFwidGFnXCI6IFwicGF0aFwiLCBcImF0dHJzXCI6IHsgXCJkXCI6IFwiTTUxMiA2NEMyNjQuNiA2NCA2NCAyNjQuNiA2NCA1MTJzMjAwLjYgNDQ4IDQ0OCA0NDggNDQ4LTIwMC42IDQ0OC00NDhTNzU5LjQgNjQgNTEyIDY0em0wIDgyMGMtMjA1LjQgMC0zNzItMTY2LjYtMzcyLTM3MnMxNjYuNi0zNzIgMzcyLTM3MiAzNzIgMTY2LjYgMzcyIDM3Mi0xNjYuNiAzNzItMzcyIDM3MnpcIiB9IH0sIHsgXCJ0YWdcIjogXCJwYXRoXCIsIFwiYXR0cnNcIjogeyBcImRcIjogXCJNNjIzLjYgMzE2LjdDNTkzLjYgMjkwLjQgNTU0IDI3NiA1MTIgMjc2cy04MS42IDE0LjUtMTExLjYgNDAuN0MzNjkuMiAzNDQgMzUyIDM4MC43IDM1MiA0MjB2Ny42YzAgNC40IDMuNiA4IDggOGg0OGM0LjQgMCA4LTMuNiA4LThWNDIwYzAtNDQuMSA0My4xLTgwIDk2LTgwczk2IDM1LjkgOTYgODBjMCAzMS4xLTIyIDU5LjYtNTYuMSA3Mi43LTIxLjIgOC4xLTM5LjIgMjIuMy01Mi4xIDQwLjktMTMuMSAxOS0xOS45IDQxLjgtMTkuOSA2NC45VjYyMGMwIDQuNCAzLjYgOCA4IDhoNDhjNC40IDAgOC0zLjYgOC04di0yMi43YTQ4LjMgNDguMyAwIDAxMzAuOS00NC44YzU5LTIyLjcgOTcuMS03NC43IDk3LjEtMTMyLjUuMS0zOS4zLTE3LjEtNzYtNDguMy0xMDMuM3pNNDcyIDczMmE0MCA0MCAwIDEwODAgMCA0MCA0MCAwIDEwLTgwIDB6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJxdWVzdGlvbi1jaXJjbGVcIiwgXCJ0aGVtZVwiOiBcIm91dGxpbmVkXCIgfTtcbmV4cG9ydCBkZWZhdWx0IFF1ZXN0aW9uQ2lyY2xlT3V0bGluZWQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8vIEdFTkVSQVRFIEJZIC4vc2NyaXB0cy9nZW5lcmF0ZS50c1xuLy8gRE9OIE5PVCBFRElUIElUIE1BTlVBTExZXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBRdWVzdGlvbkNpcmNsZU91dGxpbmVkU3ZnIGZyb20gXCJAYW50LWRlc2lnbi9pY29ucy1zdmcvZXMvYXNuL1F1ZXN0aW9uQ2lyY2xlT3V0bGluZWRcIjtcbmltcG9ydCBBbnRkSWNvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9BbnRkSWNvblwiO1xudmFyIFF1ZXN0aW9uQ2lyY2xlT3V0bGluZWQgPSBmdW5jdGlvbiBRdWVzdGlvbkNpcmNsZU91dGxpbmVkKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEFudGRJY29uLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IHJlZixcbiAgICBpY29uOiBRdWVzdGlvbkNpcmNsZU91dGxpbmVkU3ZnXG4gIH0pKTtcbn07XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBRdWVzdGlvbkNpcmNsZU91dGxpbmVkLmRpc3BsYXlOYW1lID0gJ1F1ZXN0aW9uQ2lyY2xlT3V0bGluZWQnO1xufVxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoUXVlc3Rpb25DaXJjbGVPdXRsaW5lZCk7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBQYXBlcixJbnB1dEJhc2UsSWNvbkJ1dHRvbiB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcblxyXG5cclxuaW1wb3J0IHsgdXNlTmF2aWdhdGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tIFwiLi4vR2xvYmFsQ29udGV4dFwiO1xyXG5pbXBvcnQgeyBRdWVzdGlvbkNpcmNsZU91dGxpbmVkIH0gZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zXCI7XHJcblxyXG5jb25zdCBTZWFyY2hBZHZpY2UgPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBnbG9iYWxDdHggPSB1c2VDb250ZXh0KEdsb2JhbENvbnRleHQpO1xyXG5cclxuICAgIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcclxuICAgIGNvbnN0IHNlYXJjaFN0cmluZyA9IHVzZVJlZigpO1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNsaWNrU2VhcmNoID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChzZWFyY2hTdHJpbmcuY3VycmVudC52YWx1ZS50cmltKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdsb2JhbEN0eC5zZXRTZWFyY2hTdHJpbmdGbihzZWFyY2hTdHJpbmcuY3VycmVudC52YWx1ZS50cmltKCkpO1xyXG4gICAgICAgIG5hdmlnYXRlKHByb3BzLmxpbmtUbyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJwcmV0cmFnYSBzYXZldGFcIiwgc2VhcmNoU3RyaW5nKVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gKGUpID0+IHtcclxuICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBoYW5kbGVDbGlja1NlYXJjaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UGFwZXIgY2xhc3NOYW1lPVwicGFwZXJcIlxyXG4gICAgICAgIGNvbXBvbmVudCA9ICdmb3JtJ1xyXG4gICAgICAgIHNlPXt7XHJcbiAgICAgICAgICAgIHA6ICcycHggNHB4JyxcclxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuICAgICAgICAgICAgd2lkdGg6ICc0MHJlbScsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMjhweCcsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JlZCcsXHJcbiAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxJbnB1dEJhc2UgY2xhc3NOYW1lPVwiYmFzZVwiXHJcbiAgICAgICAgICAgIC8vIHN4PXt7IG1sOjEsIGZsZXg6IDEgfX1cclxuICAgICAgICAgICAgYXV0b0ZvY3VzXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwcm9wcy5wbGFjZWhvbGRlcn1cclxuICAgICAgICAgICAgLy8gaW5wdXRQcm9wcz17eyAnYXJpZWwtbGFiZWwnOiAnc2VhcmNoJyB9fVxyXG4gICAgICAgICAgICBpbnB1dFJlZj17c2VhcmNoU3RyaW5nfVxyXG4gICAgICAgICAgICBvbktleURvd249e2hhbmRsZUtleURvd259XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxJY29uQnV0dG9uIFxyXG4gICAgICAgICAgICB0eXBlPSdidXR0b24nXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrU2VhcmNofVxyXG4gICAgICAgICAgICBzeD17eyBwOiAnMTBweCd9fVxyXG4gICAgICAgICAgICBhcmlhLWxhYmVsPSdzZWFyY2gnXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICA8UXVlc3Rpb25DaXJjbGVPdXRsaW5lZCAvPlxyXG4gICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgPC9QYXBlcj5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaEFkdmljZTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgU2VhcmNoQm94IGZyb20gXCIuL1NlYXJjaEJveFwiO1xyXG5pbXBvcnQgU2VhcmNoTG9nbyBmcm9tIFwiLi9TZWFyY2hMb2dvXCI7XHJcbmltcG9ydCBEaWN0aW9uYXJ5IGZyb20gXCIuL0RpY3Rpb25hcnlcIjtcclxuaW1wb3J0IFNlYXJjaEhpc3RvcnkgZnJvbSBcIi4vc2VhcmNoSGlzdG9yeVwiO1xyXG5pbXBvcnQgU2VhcmNoSGlzdG9yeUV2ZW50cyBmcm9tIFwiLi9zZWFyY2hIaXN0b3J5RXZlbnRzXCI7XHJcbmltcG9ydCBTZWFyY2hQZXJzb24gZnJvbSBcIi4vU2VhcmNoUGVyc29uXCI7XHJcbmltcG9ydCBTZWFyY2hBZHZpY2UgZnJvbSBcIi4vU2VhcmNoQWR2aWNlXCI7XHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBTZWFyY2hQbGFjZSA9ICgpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYWNlXCI+XHJcbiAgICAgICAgICAgIDxTZWFyY2hCb3ggcGxhY2Vob2xkZXI9eydTZWFyY2ggQ2VsZWJyaXR5J30gbGlua1RvPXsnL3Bvem5hdGknfSAvPlxyXG4gICAgICAgICAgICA8U2VhcmNoTG9nbyBwbGFjZWhvbGRlcj17J1NlYXJjaCBMb2dvJ30gbGlua1RvPXsnL2xvZ28nfSAgLz5cclxuICAgICAgICAgICAgPERpY3Rpb25hcnkgcGxhY2Vob2xkZXI9eydTZWFyY2ggV29yZCd9IGxpbmtUbz17Jy9kaWN0aW9uYXJ5J30gIC8+XHJcbiAgICAgICAgICAgIDxTZWFyY2hBZHZpY2UgcGxhY2Vob2xkZXI9eydTZWFyY2ggQWR2aWNlJ30gbGlua1RvPXsnL2FkdmljZSd9IC8+XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICA8aDI+U2VhcmNoIEhpc3Rvcnk8L2gyPlxyXG5cclxuICAgICAgICAgICAgPFNlYXJjaEhpc3RvcnkgcGxhY2Vob2xkZXI9eydZZWFyJ30gbGlua1RvPXsnL2hpc3RvcnknfSAgLz5cclxuICAgICAgICAgICAgPFNlYXJjaEhpc3RvcnlFdmVudHMgcGxhY2Vob2xkZXI9eydFdmVudHMnfSBsaW5rVG89eycvaGlzdG9yeUV2ZW50cyd9ICAvPiBcclxuICAgICAgICAgICAgPFNlYXJjaFBlcnNvbiBwbGFjZWhvbGRlcj17J1BlcnNvbnMnfSBsaW5rVG89eycvaGlzdG9yeVBlcnNvbid9ICAvPiBcclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxuXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoUGxhY2U7IiwidmFyIGNzc1VuaXQgPSB7XG4gICAgY206IHRydWUsXG4gICAgbW06IHRydWUsXG4gICAgaW46IHRydWUsXG4gICAgcHg6IHRydWUsXG4gICAgcHQ6IHRydWUsXG4gICAgcGM6IHRydWUsXG4gICAgZW06IHRydWUsXG4gICAgZXg6IHRydWUsXG4gICAgY2g6IHRydWUsXG4gICAgcmVtOiB0cnVlLFxuICAgIHZ3OiB0cnVlLFxuICAgIHZoOiB0cnVlLFxuICAgIHZtaW46IHRydWUsXG4gICAgdm1heDogdHJ1ZSxcbiAgICBcIiVcIjogdHJ1ZSxcbn07XG4vKipcbiAqIElmIHNpemUgaXMgYSBudW1iZXIsIGFwcGVuZCBweCB0byB0aGUgdmFsdWUgYXMgZGVmYXVsdCB1bml0LlxuICogSWYgc2l6ZSBpcyBhIHN0cmluZywgdmFsaWRhdGUgYWdhaW5zdCBsaXN0IG9mIHZhbGlkIHVuaXRzLlxuICogSWYgdW5pdCBpcyB2YWxpZCwgcmV0dXJuIHNpemUgYXMgaXMuXG4gKiBJZiB1bml0IGlzIGludmFsaWQsIGNvbnNvbGUgd2FybiBpc3N1ZSwgcmVwbGFjZSB3aXRoIHB4IGFzIHRoZSB1bml0LlxuICpcbiAqIEBwYXJhbSB7KG51bWJlciB8IHN0cmluZyl9IHNpemVcbiAqIEByZXR1cm4ge0xlbmd0aE9iamVjdH0gTGVuZ3RoT2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUxlbmd0aEFuZFVuaXQoc2l6ZSkge1xuICAgIGlmICh0eXBlb2Ygc2l6ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHNpemUsXG4gICAgICAgICAgICB1bml0OiBcInB4XCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciB2YWx1ZTtcbiAgICB2YXIgdmFsdWVTdHJpbmcgPSAoc2l6ZS5tYXRjaCgvXlswLTkuXSovKSB8fCBcIlwiKS50b1N0cmluZygpO1xuICAgIGlmICh2YWx1ZVN0cmluZy5pbmNsdWRlcyhcIi5cIikpIHtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlU3RyaW5nKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWVTdHJpbmcsIDEwKTtcbiAgICB9XG4gICAgdmFyIHVuaXQgPSAoc2l6ZS5tYXRjaCgvW14wLTldKiQvKSB8fCBcIlwiKS50b1N0cmluZygpO1xuICAgIGlmIChjc3NVbml0W3VuaXRdKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICB1bml0OiB1bml0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zb2xlLndhcm4oXCJSZWFjdCBTcGlubmVyczogXCIuY29uY2F0KHNpemUsIFwiIGlzIG5vdCBhIHZhbGlkIGNzcyB2YWx1ZS4gRGVmYXVsdGluZyB0byBcIikuY29uY2F0KHZhbHVlLCBcInB4LlwiKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICB1bml0OiBcInB4XCIsXG4gICAgfTtcbn1cbi8qKlxuICogVGFrZSB2YWx1ZSBhcyBhbiBpbnB1dCBhbmQgcmV0dXJuIHZhbGlkIGNzcyB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7KG51bWJlciB8IHN0cmluZyl9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHZhbGlkIGNzcyB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3NzVmFsdWUodmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoV2l0aHVuaXQgPSBwYXJzZUxlbmd0aEFuZFVuaXQodmFsdWUpO1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChsZW5ndGhXaXRodW5pdC52YWx1ZSkuY29uY2F0KGxlbmd0aFdpdGh1bml0LnVuaXQpO1xufVxuIiwiZXhwb3J0IHZhciBjcmVhdGVBbmltYXRpb24gPSBmdW5jdGlvbiAobG9hZGVyTmFtZSwgZnJhbWVzLCBzdWZmaXgpIHtcbiAgICB2YXIgYW5pbWF0aW9uTmFtZSA9IFwicmVhY3Qtc3Bpbm5lcnMtXCIuY29uY2F0KGxvYWRlck5hbWUsIFwiLVwiKS5jb25jYXQoc3VmZml4KTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PSBcInVuZGVmaW5lZFwiIHx8ICF3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbk5hbWU7XG4gICAgfVxuICAgIHZhciBzdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbCk7XG4gICAgdmFyIHN0eWxlU2hlZXQgPSBzdHlsZUVsLnNoZWV0O1xuICAgIHZhciBrZXlGcmFtZXMgPSBcIlxcbiAgICBAa2V5ZnJhbWVzIFwiLmNvbmNhdChhbmltYXRpb25OYW1lLCBcIiB7XFxuICAgICAgXCIpLmNvbmNhdChmcmFtZXMsIFwiXFxuICAgIH1cXG4gIFwiKTtcbiAgICBpZiAoc3R5bGVTaGVldCkge1xuICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGUoa2V5RnJhbWVzLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbk5hbWU7XG59O1xuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3NzVmFsdWUgfSBmcm9tIFwiLi9oZWxwZXJzL3VuaXRDb252ZXJ0ZXJcIjtcbmltcG9ydCB7IGNyZWF0ZUFuaW1hdGlvbiB9IGZyb20gXCIuL2hlbHBlcnMvYW5pbWF0aW9uXCI7XG52YXIgcHVmZiA9IFtcbiAgICBjcmVhdGVBbmltYXRpb24oXCJQdWZmTG9hZGVyXCIsIFwiMCUge3RyYW5zZm9ybTogc2NhbGUoMCl9IDEwMCUge3RyYW5zZm9ybTogc2NhbGUoMS4wKX1cIiwgXCJwdWZmLTFcIiksXG4gICAgY3JlYXRlQW5pbWF0aW9uKFwiUHVmZkxvYWRlclwiLCBcIjAlIHtvcGFjaXR5OiAxfSAxMDAlIHtvcGFjaXR5OiAwfVwiLCBcInB1ZmYtMlwiKSxcbl07XG5mdW5jdGlvbiBQdWZmTG9hZGVyKF9hKSB7XG4gICAgdmFyIF9iID0gX2EubG9hZGluZywgbG9hZGluZyA9IF9iID09PSB2b2lkIDAgPyB0cnVlIDogX2IsIF9jID0gX2EuY29sb3IsIGNvbG9yID0gX2MgPT09IHZvaWQgMCA/IFwiIzAwMDAwMFwiIDogX2MsIF9kID0gX2Euc3BlZWRNdWx0aXBsaWVyLCBzcGVlZE11bHRpcGxpZXIgPSBfZCA9PT0gdm9pZCAwID8gMSA6IF9kLCBfZSA9IF9hLmNzc092ZXJyaWRlLCBjc3NPdmVycmlkZSA9IF9lID09PSB2b2lkIDAgPyB7fSA6IF9lLCBfZiA9IF9hLnNpemUsIHNpemUgPSBfZiA9PT0gdm9pZCAwID8gNjAgOiBfZiwgYWRkaXRpb25hbHByb3BzID0gX19yZXN0KF9hLCBbXCJsb2FkaW5nXCIsIFwiY29sb3JcIiwgXCJzcGVlZE11bHRpcGxpZXJcIiwgXCJjc3NPdmVycmlkZVwiLCBcInNpemVcIl0pO1xuICAgIHZhciB3cmFwcGVyID0gX19hc3NpZ24oeyBkaXNwbGF5OiBcImluaGVyaXRcIiwgcG9zaXRpb246IFwicmVsYXRpdmVcIiwgd2lkdGg6IGNzc1ZhbHVlKHNpemUpLCBoZWlnaHQ6IGNzc1ZhbHVlKHNpemUpIH0sIGNzc092ZXJyaWRlKTtcbiAgICB2YXIgc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIGhlaWdodDogY3NzVmFsdWUoc2l6ZSksXG4gICAgICAgICAgICB3aWR0aDogY3NzVmFsdWUoc2l6ZSksXG4gICAgICAgICAgICBib3JkZXI6IFwidGhpY2sgc29saWQgXCIuY29uY2F0KGNvbG9yKSxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgIG9wYWNpdHk6IFwiMVwiLFxuICAgICAgICAgICAgdG9wOiBcIjBcIixcbiAgICAgICAgICAgIGxlZnQ6IFwiMFwiLFxuICAgICAgICAgICAgYW5pbWF0aW9uRmlsbE1vZGU6IFwiYm90aFwiLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiBcIlwiLmNvbmNhdChwdWZmWzBdLCBcIiwgXCIpLmNvbmNhdChwdWZmWzFdKSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBcIlwiLmNvbmNhdCgyIC8gc3BlZWRNdWx0aXBsaWVyLCBcInNcIiksXG4gICAgICAgICAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogXCJpbmZpbml0ZVwiLFxuICAgICAgICAgICAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246IFwiY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKSwgY3ViaWMtYmV6aWVyKDAuMywgMC42MSwgMC4zNTUsIDEpXCIsXG4gICAgICAgICAgICBhbmltYXRpb25EZWxheTogaSA9PT0gMSA/IFwiLTFzXCIgOiBcIjBzXCIsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBpZiAoIWxvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX19hc3NpZ24oeyBzdHlsZTogd3JhcHBlciB9LCBhZGRpdGlvbmFscHJvcHMpLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IHN0eWxlOiBzdHlsZSgxKSB9KSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBzdHlsZTogc3R5bGUoMikgfSkpKTtcbn1cbmV4cG9ydCBkZWZhdWx0IFB1ZmZMb2FkZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgeyBQdWZmTG9hZGVyIH0gZnJvbSAncmVhY3Qtc3Bpbm5lcnMnO1xyXG5cclxuY29uc3QgTG9hZGVyID0gKCkgPT4ge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICBcclxuICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvYWRlclwiPlxyXG4gICAgICAgICAgICA8UHVmZkxvYWRlciBzaXplPScxNzBweCdcclxuICAgICAgICAgICAgY29sb3I9J2RvZGdlcmJsdWUnXHJcbiAgICAgICAgICAgICBzcGVlZE11bHRpcGxpZXI9ICcwLjMnICAgICAgICAgXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICBcclxuICAgIClcclxuXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgTG9hZGVyOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCBTZWFyY2hQbGFjZSBmcm9tIFwiLi9TZWFyY2hQbGFjZVwiO1xyXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tIFwiLi4vR2xvYmFsQ29udGV4dFwiO1xyXG5pbXBvcnQgRm9vdGVycyBmcm9tIFwiLi4vRm9vdGVyc1wiO1xyXG5pbXBvcnQgTG9hZGVyIGZyb20gXCIuLi9Mb2FkZXJcIjtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBSZXN1bHRzQ2VsZWJzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtsb2dvLCBzZXRMb2dvXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtyZXN1bHRzLCBzZXRSZXN1bHRzXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcblxyXG5cclxuICAgIGNvbnN0IGdsb2JhbEN0eCA9IHVzZUNvbnRleHQoR2xvYmFsQ29udGV4dCk7XHJcbiAgICBjb25zdCBzZWFyY2hTdHJpbmdWYWx1ZSA9IGdsb2JhbEN0eC5zZWFyY2hTdHJpbmdWYWx1ZTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldExvZ29zKHNlYXJjaFN0cmluZ1ZhbHVlKTtcclxuICAgIH0sIFtzZWFyY2hTdHJpbmdWYWx1ZV0pO1xyXG4gICAgY29uc29sZS5sb2coXCJpeiByZXN1bHRMb2dvIHNlYXJjaFN0cmluZ1ZhbHVlOlwiLCBzZWFyY2hTdHJpbmdWYWx1ZSlcclxuXHJcbiAgICBjb25zdCBnZXRMb2dvcyA9IGFzeW5jIChzZWFyY2hTdHJpbmdWYWx1ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5hcGktbmluamFzLmNvbS92MS9sb2dvP25hbWU9JHtzZWFyY2hTdHJpbmdWYWx1ZX1gO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnWC1BcGktS2V5JzogJ0QrZFlqQ3hEU201ZkVrSXF5b0NJZUE9PWMyR3Z1alhUaUFiTUlIMDUnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXp1bHRhdCBMb2dvYVwiLCBkYXRhKVxyXG4gICAgICAgICAgICBzZXRMb2dvKGRhdGEpO1xyXG4gICAgICAgICAgICBzZXRSZXN1bHRzKGRhdGEubGVuZ3RoKTtcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgc2V0RXJyb3IoZXJyKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICBpZiAoaXNMb2FkaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIDxMb2FkZXIgLz5cclxuICAgIH0gZWxzZSBpZiAocmVzdWx0cyA9PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFBsYWNlIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cImhpc3RvcnlcIj5Ob3RoaW5nIGZvdW5kPC9oMj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8Lz5cclxuICAgICAgICApXHJcbiAgICB9XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0YWJlbGFaZW1samVcIj5cclxuICAgICAgICAgICAgICAgIDx0aGVhZCA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNvbFNwYW49ezJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFBsYWNlIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJoaXN0b3J5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbFNwYW49ezJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5Mb2dvIHtzZWFyY2hTdHJpbmdWYWx1ZX08L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInJlc3VsdHNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk51bWJlciBvZiBMb2dvOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cmVzdWx0c308L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cclxuXHJcbiAgICAgICAgICAgICAgICB7bG9nby5tYXAoKGRhdGFPYmopID0+IChcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dGJvZHkga2V5PXtkYXRhT2JqLm5hbWV9ID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJjZWxlYnJpdHlcIj57ZGF0YU9iai5uYW1lfTwvdGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbGVicml0eVwiPntkYXRhT2JqLnRpY2tlcn08L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2RhdGFPYmouaW1hZ2V9IC8+PC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj48L2hyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgPC90YWJsZSA+XHJcbiAgICAgICAgICAgIDxGb290ZXJzIC8+XHJcblxyXG4gICAgICAgIDwvPlxyXG4gICAgKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgUmVzdWx0c0NlbGViczsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgU2VhcmNoUGxhY2UgZnJvbSBcIi4vU2VhcmNoUGxhY2VcIjtcclxuaW1wb3J0IEdsb2JhbENvbnRleHQgZnJvbSBcIi4uL0dsb2JhbENvbnRleHRcIjtcclxuXHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIi4uL0xvYWRlclwiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBSZXN1bHRzRGljdGlvbmFyeSA9ICgpID0+IHtcclxuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbZGljdGlvbmFyeSwgc2V0RGljdGlvbmFyeV0gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbcmVzdWx0cywgc2V0UmVzdWx0c10gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XHJcbiAgICBcclxuXHJcblxyXG4gICAgY29uc3QgZ2xvYmFsQ3R4ID0gdXNlQ29udGV4dChHbG9iYWxDb250ZXh0KTtcclxuICAgIGNvbnN0IHNlYXJjaFN0cmluZ1ZhbHVlID0gZ2xvYmFsQ3R4LnNlYXJjaFN0cmluZ1ZhbHVlO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0RGljdGlvbmFyeShzZWFyY2hTdHJpbmdWYWx1ZSk7XHJcbiAgICAgIFxyXG4gICAgfSwgW3NlYXJjaFN0cmluZ1ZhbHVlXSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIml6IHJlc3VsdERpY3Rpb25hcnkgc2VhcmNoU3RyaW5nVmFsdWU6XCIsIHNlYXJjaFN0cmluZ1ZhbHVlKVxyXG4gXHJcbiAgICBjb25zdCBnZXREaWN0aW9uYXJ5ID0gYXN5bmMgKHNlYXJjaFN0cmluZ1ZhbHVlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmFwaS1uaW5qYXMuY29tL3YxL2RpY3Rpb25hcnk/d29yZD0ke3NlYXJjaFN0cmluZ1ZhbHVlfWA7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdYLUFwaS1LZXknOiAnRCtkWWpDeERTbTVmRWtJcXlvQ0llQT09YzJHdnVqWFRpQWJNSUgwNSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlenVsdGF0IHJlY25pa2FcIiwgZGF0YSlcclxuICAgICAgICAgICAgc2V0RGljdGlvbmFyeShkYXRhKTtcclxuICAgICAgICAgICAgc2V0UmVzdWx0cyhkYXRhLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICBpZiAoaXNMb2FkaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIDxMb2FkZXIgLz5cclxuICAgIH0gZWxzZSBpZiAocmVzdWx0cyA9PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPFNlYXJjaFBsYWNlIC8+XHJcbiAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwiaGlzdG9yeVwiPk5vdGhpbmcgZm91bmQ8L2gyPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgIDwvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInRhYmVsYVplbWxqZVwiPlxyXG4gICAgICAgICAgICAgICAgPHRoZWFkID5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggY29sU3Bhbj17Mn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VhcmNoUGxhY2UgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImhpc3RvcnlcIj5Xb3JkIHtzZWFyY2hTdHJpbmdWYWx1ZX08L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cclxuXHJcbiAgICAgICAgICAgICAgXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHRib2R5IGtleT17ZGljdGlvbmFyeS53b3JkfSBcclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiY2VsZWJyaXR5XCI+e2RpY3Rpb25hcnkud29yZH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZGljdGlvbmFyeVwiPntkaWN0aW9uYXJ5LmRlZmluaXRpb259PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+PC9ocj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cclxuXHJcblxyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICA8L3RhYmxlID5cclxuXHJcbiAgICAgICAgPC8+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBSZXN1bHRzRGljdGlvbmFyeTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgU2VhcmNoUGxhY2UgZnJvbSBcIi4vU2VhcmNoUGxhY2VcIjtcclxuaW1wb3J0IEdsb2JhbENvbnRleHQgZnJvbSBcIi4uL0dsb2JhbENvbnRleHRcIjtcclxuXHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIi4uL0xvYWRlclwiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgUmVzdWx0c0NlbGVicyA9ICgpID0+IHtcclxuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbY2VsZWJyaXR5LCBzZXRDZWxlYnJpdHldID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW3Jlc3VsdHMsIHNldFJlc3VsdHNdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG4gICAgXHJcblxyXG4gIFxyXG5cclxuXHJcblxyXG4gICAgY29uc3QgZ2xvYmFsQ3R4ID0gdXNlQ29udGV4dChHbG9iYWxDb250ZXh0KTtcclxuICAgIGNvbnN0IHNlYXJjaFN0cmluZ1ZhbHVlID0gZ2xvYmFsQ3R4LnNlYXJjaFN0cmluZ1ZhbHVlO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0Q2VsZWJzKHNlYXJjaFN0cmluZ1ZhbHVlKTtcclxuICAgICAgIFxyXG4gICAgIFxyXG4gICAgfSwgW3NlYXJjaFN0cmluZ1ZhbHVlXSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIml6IHJlc3VsdENlbGVicyBzZWFyY2hTdHJpbmdWYWx1ZTpcIiwgc2VhcmNoU3RyaW5nVmFsdWUpXHJcbiAgXHJcbiAgICBjb25zdCBnZXRDZWxlYnMgPSBhc3luYyAoc2VhcmNoU3RyaW5nVmFsdWUpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuYXBpLW5pbmphcy5jb20vdjEvY2VsZWJyaXR5P25hbWU9JHtzZWFyY2hTdHJpbmdWYWx1ZX1gO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnWC1BcGktS2V5JzogJ0QrZFlqQ3hEU201ZkVrSXF5b0NJZUE9PWMyR3Z1alhUaUFiTUlIMDUnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXp1bHRhdCBwb3puYXRpaFwiLCBkYXRhKVxyXG4gICAgICAgICAgICBzZXRDZWxlYnJpdHkoZGF0YSk7XHJcbiAgICAgICAgICAgIHNldFJlc3VsdHMoZGF0YS5sZW5ndGgpO1xyXG4gICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgc2V0RXJyb3IoZXJyKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgICByZXR1cm4gPExvYWRlciAvPlxyXG4gICAgfSBlbHNlIGlmIChyZXN1bHRzID09IDApIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICA8U2VhcmNoUGxhY2UgLz5cclxuICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwiaGlzdG9yeVwiPk5vdGhpbmcgZm91bmQ8L2gyPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInRhYmVsYVplbWxqZVwiPlxyXG4gICAgICAgICAgICAgICAgPHRoZWFkID5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggY29sU3Bhbj17Mn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VhcmNoUGxhY2UgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImhpc3RvcnlcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sU3Bhbj17Mn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDZWxlYnJpdHkge3NlYXJjaFN0cmluZ1ZhbHVlfTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlc3VsdHNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuPXsyfT5OdW1iZXIgb2YgQ2VsZWJyaXR5OiB7cmVzdWx0c31cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG5cclxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcblxyXG4gICAgICAgICAgICAgICAge2NlbGVicml0eS5tYXAoKGRhdGFPYmopID0+IChcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dGJvZHkga2V5PXtkYXRhT2JqLm5hbWV9ID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+TmFtZTo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbGVicml0eVwiPntkYXRhT2JqLm5hbWV9PC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPkdlbmRlcjo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2RhdGFPYmouZ2VuZGVyfTwvdGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5BZ2U6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmFnZX08L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+T2NjdXBhdGlvbjo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2RhdGFPYmoub2NjdXBhdGlvbj8uWzBdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5vY2N1cGF0aW9uPy5bMV19PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPntkYXRhT2JqLm9jY3VwYXRpb24/LlsyXX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2RhdGFPYmoub2NjdXBhdGlvbj8uWzNdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5vY2N1cGF0aW9uPy5bNF19PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPntkYXRhT2JqLm9jY3VwYXRpb24/Lls1XX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2RhdGFPYmoub2NjdXBhdGlvbj8uWzZdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5vY2N1cGF0aW9uPy5bN119PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPntkYXRhT2JqLm9jY3VwYXRpb24/Lls4XX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2RhdGFPYmoub2NjdXBhdGlvbj8uWzldfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5vY2N1cGF0aW9uPy5bMTBdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5vY2N1cGF0aW9uPy5bMTFdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5vY2N1cGF0aW9uPy5bMTJdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPkJpcnRoZGF5OjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57ZGF0YU9iai5iaXJ0aGRheX08L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+RGVhdGg6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmRlYXRofTwvdGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5OYXRpb25hbGl0eTo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbGVicml0eVwiPntkYXRhT2JqLm5hdGlvbmFsaXR5fTwvdGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5IZWlnaHQ6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmhlaWdodH08L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+TmV0IHdvcnRoOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmV0d29ydGhcIj57ZGF0YU9iai5uZXRfd29ydGh9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbFNwYW49ezJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj48L2hyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgPC90YWJsZSA+XHJcbiAgICAgXHJcbiAgICAgICAgICBcclxuXHJcbiAgICAgICAgPC8+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBSZXN1bHRzQ2VsZWJzOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCBTZWFyY2hQbGFjZSBmcm9tIFwiLi9TZWFyY2hQbGFjZVwiO1xyXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tIFwiLi4vR2xvYmFsQ29udGV4dFwiO1xyXG5pbXBvcnQgRm9vdGVycyBmcm9tIFwiLi4vRm9vdGVyc1wiO1xyXG5pbXBvcnQgTG9hZGVyIGZyb20gXCIuLi9Mb2FkZXJcIjtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IFJlc3VsdHNIaXN0b3J5ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtoaXN0b3J5LCBzZXRIaXN0b3J5XSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtyZXN1bHRzLCBzZXRSZXN1bHRzXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcblxyXG5cclxuICAgIGNvbnN0IGdsb2JhbEN0eCA9IHVzZUNvbnRleHQoR2xvYmFsQ29udGV4dCk7XHJcbiAgICBjb25zdCBzZWFyY2hTdHJpbmdWYWx1ZSA9IGdsb2JhbEN0eC5zZWFyY2hTdHJpbmdWYWx1ZTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEhpc3Rvcnkoc2VhcmNoU3RyaW5nVmFsdWUpO1xyXG4gICAgfSwgW3NlYXJjaFN0cmluZ1ZhbHVlXSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIml6IHJlc3VsdGhpc3Rvcnkgc2VhcmNoU3RyaW5nVmFsdWU6XCIsIHNlYXJjaFN0cmluZ1ZhbHVlKVxyXG5cclxuICAgIGNvbnN0IGdldEhpc3RvcnkgPSBhc3luYyAoc2VhcmNoU3RyaW5nVmFsdWUpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuYXBpLW5pbmphcy5jb20vdjEvaGlzdG9yaWNhbGV2ZW50cz95ZWFyPSR7c2VhcmNoU3RyaW5nVmFsdWV9YDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmV6dWx0YXQgcmVjbmlrYVwiLCBkYXRhKVxyXG4gICAgICAgICAgICBzZXRIaXN0b3J5KGRhdGEpO1xyXG4gICAgICAgICAgICBzZXRSZXN1bHRzKGRhdGEubGVuZ3RoKTtcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgIHJldHVybiA8TG9hZGVyIC8+XHJcbiAgICB9IGVsc2UgaWYgKHJlc3VsdHMgPT0gMCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWFyY2hQbGFjZSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJoaXN0b3J5XCI+Tm90aGluZyBmb3VuZDwvaDI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwidGFiZWxhWmVtbGplXCI+XHJcbiAgICAgICAgICAgICAgICA8dGhlYWQgPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VhcmNoUGxhY2UgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImhpc3RvcnlcIj5IaXN0b3JpY2FsIFllYXIge3NlYXJjaFN0cmluZ1ZhbHVlfTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwicmVzdWx0c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+TnVtYmVyIG9mIEhpc3RvcnkgRXZlbnRzOiB7cmVzdWx0c308L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB7aGlzdG9yeS5tYXAoKGRhdGFPYmopID0+IChcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dGJvZHkga2V5PXtoaXN0b3J5LndvcmR9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbGVicml0eVwiPntkYXRhT2JqLmRheSArIFwiIFwiICsgZGF0YU9iai5tb250aCArIFwiIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhT2JqLnllYXJ9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJkaWN0aW9uYXJ5XCI+e2RhdGFPYmouZXZlbnR9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyPjwvaHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcblxyXG4gICAgICAgICAgICAgICAgKSl9XHJcblxyXG4gICAgICAgICAgICA8L3RhYmxlID5cclxuICAgICAgICAgICAgPEZvb3RlcnMgLz5cclxuICAgICAgICA8Lz5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFJlc3VsdHNIaXN0b3J5OyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCBTZWFyY2hQbGFjZSBmcm9tIFwiLi9TZWFyY2hQbGFjZVwiO1xyXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tIFwiLi4vR2xvYmFsQ29udGV4dFwiO1xyXG5pbXBvcnQgRm9vdGVycyBmcm9tIFwiLi4vRm9vdGVyc1wiO1xyXG5pbXBvcnQgTG9hZGVyIGZyb20gXCIuLi9Mb2FkZXJcIjtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IFJlc3VsdHNIaXN0b3J5RXZlbnRzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtoaXN0b3J5RXZlbnRzLCBzZXRIaXN0b3J5RXZlbnRzXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtyZXN1bHRzLCBzZXRSZXN1bHRzXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcblxyXG5cclxuICAgIGNvbnN0IGdsb2JhbEN0eCA9IHVzZUNvbnRleHQoR2xvYmFsQ29udGV4dCk7XHJcbiAgICBjb25zdCBzZWFyY2hTdHJpbmdWYWx1ZSA9IGdsb2JhbEN0eC5zZWFyY2hTdHJpbmdWYWx1ZTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEhpc3RvcnlFdmVudHMoc2VhcmNoU3RyaW5nVmFsdWUpO1xyXG4gICAgfSwgW3NlYXJjaFN0cmluZ1ZhbHVlXSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIml6IHJlc3VsdGhpc3RvcnlFdmVudHMgc2VhcmNoU3RyaW5nVmFsdWU6XCIsIHNlYXJjaFN0cmluZ1ZhbHVlKVxyXG5cclxuICAgIGNvbnN0IGdldEhpc3RvcnlFdmVudHMgPSBhc3luYyAoc2VhcmNoU3RyaW5nVmFsdWUpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuYXBpLW5pbmphcy5jb20vdjEvaGlzdG9yaWNhbGV2ZW50cz90ZXh0PSR7c2VhcmNoU3RyaW5nVmFsdWV9YDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmV6dWx0YXQgcmVjbmlrYVwiLCBkYXRhKVxyXG4gICAgICAgICAgICBzZXRIaXN0b3J5RXZlbnRzKGRhdGEpO1xyXG4gICAgICAgICAgICBzZXRSZXN1bHRzKGRhdGEubGVuZ3RoKTtcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgIHJldHVybiA8TG9hZGVyIC8+XHJcbiAgICB9IGVsc2UgaWYgKHJlc3VsdHMgPT0gMCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcblxyXG4gICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICA8U2VhcmNoUGxhY2UgLz5cclxuICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwiaGlzdG9yeVwiPk5vdGhpbmcgZm91bmQ8L2gyPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInRhYmVsYVplbWxqZVwiPlxyXG4gICAgICAgICAgICAgICAgPHRoZWFkID5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFBsYWNlIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJoaXN0b3J5XCI+SGlzdG9yaWNhbCBFdmVudCB7c2VhcmNoU3RyaW5nVmFsdWV9PC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJyZXN1bHRzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5OdW1iZXIgb2YgRXZlbnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZXN1bHRzfTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHtoaXN0b3J5RXZlbnRzLm1hcCgoZGF0YU9iaikgPT4gKFxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keSBrZXk9e2hpc3RvcnlFdmVudHMud29yZH1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiY2VsZWJyaXR5XCI+e2RhdGFPYmouZGF5ICsgXCIgXCIgKyBkYXRhT2JqLm1vbnRoICsgXCIgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFPYmoueWVhcn08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImRpY3Rpb25hcnlcIj57ZGF0YU9iai5ldmVudH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+PC9ocj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cclxuXHJcbiAgICAgICAgICAgICAgICApKX1cclxuXHJcbiAgICAgICAgICAgIDwvdGFibGUgPlxyXG4gICAgICAgICAgICA8Rm9vdGVycyAvPlxyXG4gICAgICAgIDwvPlxyXG4gICAgKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgUmVzdWx0c0hpc3RvcnlFdmVudHM7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IFNlYXJjaFBsYWNlIGZyb20gXCIuL1NlYXJjaFBsYWNlXCI7XHJcbmltcG9ydCBHbG9iYWxDb250ZXh0IGZyb20gXCIuLi9HbG9iYWxDb250ZXh0XCI7XHJcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmltcG9ydCBGb290ZXJzIGZyb20gXCIuLi9Gb290ZXJzXCI7XHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIi4uL0xvYWRlclwiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IFJlc3VsdHNQZXJzb24gPSAoKSA9PiB7XHJcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW3BlcnNvbnMsIHNldFBlcnNvbnNdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW3Jlc3VsdHMsIHNldFJlc3VsdHNdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG5cclxuICAgIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcclxuXHJcblxyXG5cclxuXHJcbiAgICBjb25zdCBnbG9iYWxDdHggPSB1c2VDb250ZXh0KEdsb2JhbENvbnRleHQpO1xyXG4gICAgY29uc3Qgc2VhcmNoU3RyaW5nVmFsdWUgPSBnbG9iYWxDdHguc2VhcmNoU3RyaW5nVmFsdWU7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnZXRQZXJzb24oc2VhcmNoU3RyaW5nVmFsdWUpO1xyXG4gICAgfSwgW3NlYXJjaFN0cmluZ1ZhbHVlXSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIml6IHJlc3VsdFBlcnNvbiBzZWFyY2hTdHJpbmdWYWx1ZTpcIiwgc2VhcmNoU3RyaW5nVmFsdWUpXHJcblxyXG4gICAgY29uc3QgZ2V0UGVyc29uID0gYXN5bmMgKHNlYXJjaFN0cmluZ1ZhbHVlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmFwaS1uaW5qYXMuY29tL3YxL2hpc3RvcmljYWxmaWd1cmVzP25hbWU9JHtzZWFyY2hTdHJpbmdWYWx1ZX1gO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnWC1BcGktS2V5JzogJ0QrZFlqQ3hEU201ZkVrSXF5b0NJZUE9PWMyR3Z1alhUaUFiTUlIMDUnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXp1bHRhdCBwb3puYXRpaFwiLCBkYXRhKVxyXG4gICAgICAgICAgICBzZXRQZXJzb25zKGRhdGEpO1xyXG4gICAgICAgICAgICBzZXRSZXN1bHRzKGRhdGEubGVuZ3RoKTtcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBjb25zdCBoYW5kbGVDbGljayA9IChwZXJzb25OYW1lKSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IExpbmtUbyA9IGAvaGlzdG9yeVBlcnNvbi8ke3BlcnNvbk5hbWV9YDtcclxuICAgICAgICBuYXZpZ2F0ZShMaW5rVG8pO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxTZWFyY2hQbGFjZSAvPixcclxuICAgICAgICAgICAgPExvYWRlciAvPilcclxuICAgIH0gZWxzZSBpZiAocmVzdWx0cyA9PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFBsYWNlIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cImhpc3RvcnlcIj5Ob3RoaW5nIGZvdW5kPC9oMj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8Lz5cclxuICAgICAgICApXHJcbiAgICB9XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0YWJlbGFaZW1samVcIj5cclxuICAgICAgICAgICAgICAgIDx0aGVhZCA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNvbFNwYW49ezJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFBsYWNlIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJoaXN0b3J5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbFNwYW49ezJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGVyc29ucyB7c2VhcmNoU3RyaW5nVmFsdWV9PC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJyZXN1bHRzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjb2xTcGFuPXsyfT5OdW1iZXIgb2YgSGlzdG9yeWMgcGVyc29uczoge3Jlc3VsdHN9PC90aD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG5cclxuICAgICAgICAgICAgICAgIHtwZXJzb25zLm1hcCgoZGF0YU9iaikgPT4gKFxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keSBrZXk9e2RhdGFPYmoubmFtZX0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5OYW1lOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiaGlzdG9yeVBlcnNvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlQ2xpY2soZGF0YU9iai5uYW1lKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGFPYmoubmFtZX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5UaXRsZTo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2RhdGFPYmoudGl0bGV9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+QmlydGhkYXk6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmluZm8uYm9ybn08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5EZWF0aDo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2RhdGFPYmouaW5mby5kaWVkfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xTcGFuPXsyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1vcmVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNsaWNrKGRhdGFPYmoubmFtZSl9PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JlLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbFNwYW49ezJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj48L2hyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgPC90YWJsZSA+XHJcbiAgICAgICAgICAgIDxGb290ZXJzIC8+XHJcblxyXG4gICAgICAgIDwvPlxyXG4gICAgKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgUmVzdWx0c1BlcnNvbjsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgU2VhcmNoUGxhY2UgZnJvbSBcIi4vU2VhcmNoUGxhY2VcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiLi4vTG9hZGVyXCI7XHJcbmltcG9ydCB7IHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgRGV0YWlsc1BlcnNvbiA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtwZXJzb25zLCBzZXRQZXJzb25zXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuIFxyXG5cclxuICAgIGNvbnN0IHBhcmFtcyA9IHVzZVBhcmFtcygpXHJcbiAgICBjb25zdCBwZXJzb25OYW1lID0gcGFyYW1zLnBlcnNvbk5hbWU7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnZXRQZXJzb24oKTtcclxuICAgICAgXHJcbiAgICB9LCBbXSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIml6IGRldGFpbHNQZXJzb24gcGFyYW1zOlwiLCBwZXJzb25OYW1lKTtcclxuXHJcbiAgICBjb25zdCBnZXRQZXJzb24gPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmFwaS1uaW5qYXMuY29tL3YxL2hpc3RvcmljYWxmaWd1cmVzP25hbWU9JHtwZXJzb25OYW1lfWA7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdYLUFwaS1LZXknOiAnRCtkWWpDeERTbTVmRWtJcXlvQ0llQT09YzJHdnVqWFRpQWJNSUgwNSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRldGFsamkgaXN0b3JpanNrZSBwZXJzb25lXCIsIGRhdGEpXHJcbiAgICAgICAgICAgIHNldFBlcnNvbnMoZGF0YSk7XHJcblxyXG4gICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgc2V0RXJyb3IoZXJyKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG5cclxuXHJcblxyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgIHJldHVybiA8TG9hZGVyIC8+XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0YWJlbGFaZW1samVcIj5cclxuICAgICAgICAgICAgICAgIDx0aGVhZCA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNvbFNwYW49ezJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFBsYWNlIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICBcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cclxuXHJcbiAgICAgICAgICAgICAgICB7cGVyc29ucy5tYXAoKGRhdGFPYmopID0+IChcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dGJvZHkga2V5PXtkYXRhT2JqLm5hbWV9ID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+TmFtZTo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbGVicml0eVwiPntkYXRhT2JqLm5hbWV9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmluZm8ubmF0aXZlX25hbWV9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmluZm8ubmlja25hbWVzfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57ZGF0YU9iai5pbmZvLmJpcnRoX25hbWV9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmluZm8ub3RoZXJfbmFtZXN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+VGl0bGU6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLnRpdGxlfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57ZGF0YU9iai5pbmZvLm90aGVyX3Bvc3RzfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+UHJlZGVjZXNzb3I6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmluZm8ucHJlZGVjZXNzb3IgfHwgZGF0YU9iai5pbmZvLnByZWNlZGVkX2J5fTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPlN1Y2Nlc3Nvcjo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2RhdGFPYmouaW5mby5zdWNjZXNzb3IgfHwgZGF0YU9iai5pbmZvLnN1Y2NlZWRlZF9ieX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+RmllbGRzOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai5pbmZvLmZpZWxkc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2RhdGFPYmouaW5mby5maWVsZHM/LlswXX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2RhdGFPYmouaW5mby5maWVsZHM/LlsxXX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2RhdGFPYmouaW5mby5maWVsZHM/LlsyXX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2RhdGFPYmouaW5mby5maWVsZHM/LlszXX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+ICovfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmluZm8ubW92ZW1lbnR9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+R2VucmVzOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLmdlbnJlcz8uWzBdIHx8IGRhdGFPYmouaW5mby5nZW5yZT8uWzBdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLmdlbnJlcz8uWzFdIHx8IGRhdGFPYmouaW5mby5nZW5yZT8uWzFdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLmdlbnJlcz8uWzJdIHx8IGRhdGFPYmouaW5mby5nZW5yZT8uWzJdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLmdlbnJlcz8uWzNdIHx8IGRhdGFPYmouaW5mby5nZW5yZT8uWzNdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLmdlbnJlcz8uWzRdIHx8IGRhdGFPYmouaW5mby5nZW5yZT8uWzRdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLmdlbnJlcz8uWzVdIHx8IGRhdGFPYmouaW5mby5nZW5yZT8uWzVdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLmdlbnJlcz8uWzZdIHx8IGRhdGFPYmouaW5mby5nZW5yZT8uWzZdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLmdlbnJlcz8uWzddIHx8IGRhdGFPYmouaW5mby5nZW5yZT8uWzddfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLmdlbnJlcz8uWzhdIHx8IGRhdGFPYmouaW5mby5nZW5yZT8uWzhdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57ZGF0YU9iai5pbmZvLmRpc2NpcGxpbmV9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57ZGF0YU9iai5pbmZvLmF0dHJpYnV0ZXN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPlByb2Zlc3Npb246PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmluZm8ucHJvZmVzc2lvbn08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5PY2N1cGF0aW9uOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai5pbmZvLm9jY3VwYXRpb259XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLm9jY3VwYXRpb24/LlswXX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2RhdGFPYmouaW5mby5vY2N1cGF0aW9uPy5bMV19PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPntkYXRhT2JqLmluZm8ub2NjdXBhdGlvbj8uWzJdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57ZGF0YU9iai5pbmZvLm9jY3VwYXRpb24/LlszXX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e2RhdGFPYmouaW5mby5vY2N1cGF0aW9uPy5bNF19PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPntkYXRhT2JqLmluZm8ub2NjdXBhdGlvbj8uWzVdfTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4gKi99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5Lbm93biBmb3I6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8ua25vd25fZm9yfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8ubm90YWJsZV93b3JrfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5Bc3NvY2lhdGVkIEFjdHM6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8uYXNzb2NpYXRlZF9hY3RzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPk5hdGlvbmFsaXR5OjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57ZGF0YU9iai5pbmZvLm5hdGlvbmFsaXR5IHx8IGRhdGFPYmouaW5mby5hbGxlZ2lhbmNlfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5SZXNpZGVuY2U6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmluZm8uY2l0aXplbnNoaXAgfHwgZGF0YU9iai5pbmZvLnJlc2lkZW5jZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGRhdGFPYmouaW5mby5yZXNpZGVuY2VzfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5CaXJ0aGRheTo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2RhdGFPYmouaW5mby5ib3JufTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPkRlYXRoOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57ZGF0YU9iai5pbmZvLmRpZWR9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPkJ1cmllZDo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2RhdGFPYmouaW5mby5yZXN0aW5nX3BsYWNlIHx8IGRhdGFPYmouaW5mby5idXJpYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBkYXRhT2JqLmluZm8uYnVyaWVkfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57ZGF0YU9iai5pbmZvLmNhdXNlX29mX2RlYXRofTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPkhlaWdodDo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2RhdGFPYmouaW5mby5oZWlnaHR9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+V2VpZ2h0OjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj4ge2RhdGFPYmouaW5mby53ZWlnaHR9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+QXdhcmRzOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai5pbmZvLmF3YXJkcyB8fCBkYXRhT2JqLmluZm8ubm90YWJsZV9hd2FyZHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj48L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGFPYmouaW5mby5vZmZpY2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8ubm90YWJsZV93b3Jrc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPkNvbnZpY3Rpb25zOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbVwiPntkYXRhT2JqLmluZm8uY29udmljdGlvbnN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+UG9saXRpY2FsIFBhcnR5OjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai5pbmZvLnBvbGl0aWNhbF9wYXJ0eX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai5pbmZvPy5vdGhlcl9wb2xpdGljYWxhZmZpbGlhdGlvbnN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5Pcmdhbml6YXRpb248L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGFPYmouaW5mby5vcmdhbml6YXRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5SZWxpZ2lvbjo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGFPYmouaW5mby5yZWxpZ2lvbiB8fCBkYXRhT2JqLmluZm8uc3RhbmNlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8uY2h1cmNofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+RWR1Y2F0aW9uOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai5pbmZvLmVkdWNhdGlvbiB8fCBkYXRhT2JqLmluZm8uYWxtYV9tYXRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBkYXRhT2JqLmluZm8udW5pdmVyc2l0eX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPlJhbms6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhT2JqLmluZm8ucmFua308L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+WWVhcnMgb2YgU2VydmljZTo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2RhdGFPYmouaW5mby55ZWFyc19vZl9zZXJ2aWNlfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPkJyYW5jaDo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2RhdGFPYmouaW5mby5icmFuY2h9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKiA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57ZGF0YU9iai5pbmZvLnNlcnZpY2UvYnJhbmNofTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICovfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+V2Fyczo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGFPYmouaW5mby53YXJzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8uY29uZmxpY3RzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai5pbmZvLmJhdHRsZXN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5TcG91c2U6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8uc3BvdXNlIHx8IGRhdGFPYmouaW5mby5zcG91c2VzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+UGFyZW50czo8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGFPYmouaW5mby5wYXJlbnRzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8uZmF0aGVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8ubW90aGVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPkNoaWxkcmVuOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai5pbmZvLmNoaWxkcmVufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hdm9kXCI+UmVsYXRpdmVzOjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai5pbmZvLnJlbGF0aXZlcyB8fCBkYXRhT2JqLmluZm8ubm90YWJsZV9yZWxhdGl2ZXMgfHwgZGF0YU9iai5pbmZvLmZhbWlseX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57ZGF0YU9iai5pbmZvLmlzc3VlfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmF2b2RcIj5ZZWFycyBBY3RpdmU6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8ueWVhcnNfYWN0aXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGRhdGFPYmouaW5mby5hY3RpdmVfeWVhcnMgfHwgZGF0YU9iai5pbmZvLnJlaWdufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYXZvZFwiPldlYnNpdGU6PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhT2JqLmluZm8ud2Vic2l0ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xTcGFuPXsyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aHI+PC9ocj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvdGFibGUgPlxyXG4gICAgICAgICAgXHJcblxyXG4gICAgICAgIDwvPlxyXG4gICAgKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgRGV0YWlsc1BlcnNvbjsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcblxyXG5cclxuY29uc3QgUGlja1RyaXZpYSA9ICgpID0+IHtcclxuXHJcbiAgIFxyXG5cclxuXHJcblxyXG4gICAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG5cclxuXHJcbiAgIFxyXG5cclxuXHJcblxyXG4gXHJcblxyXG4gICAgY29uc3QgaGFuZGxlUmlkbGUgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJrbGlrIG5hIHJpZGxlc1wiKTtcclxuICAgICAgICBjb25zdCBMaW5rVG8gPSAnL3JpZGxlcyc7XHJcbiAgICAgICAgbmF2aWdhdGUoTGlua1RvKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBoYW5kbGVHZW5lcmFsID0gKCkgPT4ge1xyXG4gICAgICBcclxuICAgICAgICBjb25zdCBMaW5rVG8gPSAnL2dlbmVyYWwnO1xyXG4gICAgICAgIG5hdmlnYXRlKExpbmtUbyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVBcnQgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJrbGlrIG5hIEFydCBMaXRlcmF0dXJlXCIpO1xyXG4gICAgICAgIGNvbnN0IExpbmtUbyA9ICcvYXJ0JztcclxuICAgICAgICBuYXZpZ2F0ZShMaW5rVG8pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlRm9vZCA9ICgpID0+IHtcclxuICAgICAgXHJcbiAgICAgICAgY29uc3QgTGlua1RvID0gJy9mb29kJztcclxuICAgICAgICBuYXZpZ2F0ZShMaW5rVG8pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlU2NpZW5jZSA9ICgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImtsaWsgbmEgU2NpZW5jZVwiKTtcclxuICAgICAgICBjb25zdCBMaW5rVG8gPSAnL3NjaWVuY2UnO1xyXG4gICAgICAgIG5hdmlnYXRlKExpbmtUbyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVQZW9wbGUgPSAoKSA9PiB7XHJcbiAgICAgIFxyXG4gICAgICAgIGNvbnN0IExpbmtUbyA9ICcvcGVvcGxlJztcclxuICAgICAgICBuYXZpZ2F0ZShMaW5rVG8pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlSGlzdG9yeSA9ICgpID0+IHtcclxuICAgICAgXHJcbiAgICAgICAgY29uc3QgTGlua1RvID0gJy9oaXN0b3J5JztcclxuICAgICAgICBuYXZpZ2F0ZShMaW5rVG8pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlR2VvZ3JhcGh5ID0gKCkgPT4ge1xyXG4gICAgICBcclxuICAgICAgICBjb25zdCBMaW5rVG8gPSAnL2dlb2dyYXBoeSc7XHJcbiAgICAgICAgbmF2aWdhdGUoTGlua1RvKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUVudGVydGFpbm1lbnQgPSAoKSA9PiB7XHJcbiAgICAgIFxyXG4gICAgICAgIGNvbnN0IExpbmtUbyA9ICcvZW50ZXJ0YWlubWVudCc7XHJcbiAgICAgICAgbmF2aWdhdGUoTGlua1RvKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZVRveXMgPSAoKSA9PiB7XHJcbiAgICAgIFxyXG4gICAgICAgIGNvbnN0IExpbmtUbyA9ICcvdG95cyc7XHJcbiAgICAgICAgbmF2aWdhdGUoTGlua1RvKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZU11c2ljID0gKCkgPT4ge1xyXG4gICAgICBcclxuICAgICAgICBjb25zdCBMaW5rVG8gPSAnL211c2ljJztcclxuICAgICAgICBuYXZpZ2F0ZShMaW5rVG8pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlTGFuZ3VhZ2UgPSAoKSA9PiB7XHJcbiAgICAgIFxyXG4gICAgICAgIGNvbnN0IExpbmtUbyA9ICcvbGFuZ3VhZ2UnO1xyXG4gICAgICAgIG5hdmlnYXRlKExpbmtUbyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVSZWxpZ2lvbiA9ICgpID0+IHtcclxuICAgICAgXHJcbiAgICAgICAgY29uc3QgTGlua1RvID0gJy9yZWxpZ2lvbic7XHJcbiAgICAgICAgbmF2aWdhdGUoTGlua1RvKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZVNwb3J0ID0gKCkgPT4ge1xyXG4gICAgICBcclxuICAgICAgICBjb25zdCBMaW5rVG8gPSAnL3Nwb3J0JztcclxuICAgICAgICBuYXZpZ2F0ZShMaW5rVG8pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCBoYW5kbGVNYXRoZW1hdGljcyA9ICgpID0+IHtcclxuICAgICAgXHJcbiAgICAgICAgY29uc3QgTGlua1RvID0gJy9tYXRoZW1hdGljcyc7XHJcbiAgICAgICAgbmF2aWdhdGUoTGlua1RvKTtcclxuICAgIH1cclxuIFxyXG4gICAgXHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cml2aWFcIj5cclxuICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBoYW5kbGVSaWRsZSgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhdGVnb3J5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgUmlkZGxlc1xyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17KCkgPT4gaGFuZGxlR2VuZXJhbCgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhdGVnb3J5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgR2VuZXJhbFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IGhhbmRsZUxhbmd1YWdlKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2F0ZWdvcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICBMYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IGhhbmRsZUFydCgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhdGVnb3J5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgQXJ0ICYgTGl0ZXJhdHVyZVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IGhhbmRsZVNjaWVuY2UoKX1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYXRlZ29yeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIFNjaWVuY2UgJiBOYXR1cmVcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBoYW5kbGVGb29kKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2F0ZWdvcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICBGb29kICYgRHJpbmtcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBoYW5kbGVQZW9wbGUoKX1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYXRlZ29yeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIFBlb3BsZSAmIFBsYWNlXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17KCkgPT4gaGFuZGxlSGlzdG9yeSgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhdGVnb3J5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgSGlzdG9yeSAmIEhvbGlkYXlzXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17KCkgPT4gaGFuZGxlR2VvZ3JhcGh5KCl9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2F0ZWdvcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICBHZW9ncmFwaHlcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IGhhbmRsZUVudGVydGFpbm1lbnQoKX1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYXRlZ29yeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIEVudGVydGFpbm1lbnRcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBoYW5kbGVUb3lzKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2F0ZWdvcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIFRveXMgJiBHYW1lc1xyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IGhhbmRsZU11c2ljKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2F0ZWdvcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIE11c2ljXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXsoKSA9PiBoYW5kbGVMYW5ndWFnZSgpfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhdGVnb3J5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICBMYW5ndWFnZVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IGhhbmRsZVJlbGlnaW9uKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2F0ZWdvcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIFJlbGlnaW9uICYgTXl0aG9sb2d5XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgb25DbGljaz17KCkgPT4gaGFuZGxlU3BvcnQoKX1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYXRlZ29yeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgU3BvcnRzICYgTGVpc3VyZVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9eygpID0+IGhhbmRsZU1hdGhlbWF0aWNzKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2F0ZWdvcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIE1hdGhlbWF0aWNzc1xyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICBcclxuXHJcblxyXG4gICAgICAgICAgICA8L2Rpdj48Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBQaWNrVHJpdmlhOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCBTZWFyY2hQbGFjZSBmcm9tIFwiLi9TZWFyY2hQbGFjZVwiO1xyXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tIFwiLi4vR2xvYmFsQ29udGV4dFwiO1xyXG5pbXBvcnQgRm9vdGVycyBmcm9tIFwiLi4vRm9vdGVyc1wiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBSZXN1bHRzQWR2aWNlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFthZHZpY2UsIHNldEFkdmljZV0gPSB1c2VTdGF0ZSh7fSk7XHJcbiAgICBjb25zdCBbcmVzdWx0cywgc2V0UmVzdWx0c10gPSB1c2VTdGF0ZShbXSk7XHJcblxyXG5cclxuICAgIGNvbnN0IGdsb2JhbEN0eCA9IHVzZUNvbnRleHQoR2xvYmFsQ29udGV4dCk7XHJcbiAgICBjb25zdCBzZWFyY2hTdHJpbmdWYWx1ZSA9IGdsb2JhbEN0eC5zZWFyY2hTdHJpbmdWYWx1ZTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEFkdmljZXMoc2VhcmNoU3RyaW5nVmFsdWUpO1xyXG4gICAgfSwgW3NlYXJjaFN0cmluZ1ZhbHVlXSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIml6IGFkdmljZSBzZWFyY2hTdHJpbmdWYWx1ZTpcIiwgc2VhcmNoU3RyaW5nVmFsdWUpXHJcblxyXG4gICAgY29uc3QgZ2V0QWR2aWNlcyA9IGFzeW5jIChzZWFyY2hTdHJpbmdWYWx1ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5hZHZpY2VzbGlwLmNvbS9hZHZpY2Uvc2VhcmNoLyR7c2VhcmNoU3RyaW5nVmFsdWV9YDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGEuc2xpcHM7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmV6dWx0YXQgYWR2aWNlYVwiLCBkYXRhKVxyXG4gICAgICAgICAgICBzZXRBZHZpY2UoZGF0YSk7XHJcbiAgICAgICAgICAgIHNldFJlc3VsdHMoZGF0YS5sZW5ndGgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcblxyXG5cclxuICAgIGlmIChyZXN1bHRzID09IDApIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgPGJyPjwvYnI+XHJcbiAgICAgICAgICAgICAgICA8YnI+PC9icj5cclxuICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0YWJlbGFaZW1samVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48U2VhcmNoUGxhY2UgLz48L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Tm90aGluZyBmb3VuZDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgIDwvdGFibGU+PC8+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwidGFiZWxhWmVtbGplXCI+XHJcbiAgICAgICAgICAgICAgICA8dGhlYWQgPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjb2xTcGFuPXsyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWFyY2hQbGFjZSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwiY2VsZWJyaXR5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbFNwYW49ezJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzZWFyY2hTdHJpbmdWYWx1ZX0gQWR2aWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cInJlc3VsdHNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk51bWJlciBvZiBBZHZpY2U6IHtyZXN1bHRzfTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD48L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG5cclxuXHJcblxyXG57YWR2aWNlLm1hcCgoZGF0YUFkdikgPT4gKFxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgPHRib2R5IGtleT17ZGF0YUFkdi5pZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbGVicml0eVwiPntkYXRhQWR2LmFkdmljZX08L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPntkYXRhQWR2LmRhdGV9PC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICB7LyogPHRyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbGVicml0eVwiPnthZHZpY2Uuc2xpcHM/LlsxXS5hZHZpY2V9PC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57YWR2aWNlLnNsaXBzPy5bMV0uZGF0ZX08L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJjZWxlYnJpdHlcIj57YWR2aWNlLnNsaXBzPy5bMl0uYWR2aWNlfTwvdGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2FkdmljZS5zbGlwcz8uWzJdLmRhdGV9PC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiY2VsZWJyaXR5XCI+e2FkdmljZS5zbGlwcz8uWzNdLmFkdmljZX08L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lQ29tbVwiPnthZHZpY2Uuc2xpcHM/LlszXS5kYXRlfTwvdGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbGVicml0eVwiPnthZHZpY2Uuc2xpcHM/Lls0XS5hZHZpY2V9PC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibmFtZUNvbW1cIj57YWR2aWNlLnNsaXBzPy5bNF0uZGF0ZX08L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJjZWxlYnJpdHlcIj57YWR2aWNlLnNsaXBzPy5bNV0uYWR2aWNlfTwvdGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm5hbWVDb21tXCI+e2FkdmljZS5zbGlwcz8uWzVdLmRhdGV9PC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj4gKi99XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxocj48L2hyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICBcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgPC90YWJsZSA+XHJcbiAgICAgICAgICAgIDxGb290ZXJzIC8+XHJcblxyXG4gICAgICAgIDwvPlxyXG4gICAgKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgUmVzdWx0c0FkdmljZTsiLCIvLyBUaGlzIGljb24gZmlsZSBpcyBnZW5lcmF0ZWQgYXV0b21hdGljYWxseS5cbnZhciBSaWdodE91dGxpbmVkID0geyBcImljb25cIjogeyBcInRhZ1wiOiBcInN2Z1wiLCBcImF0dHJzXCI6IHsgXCJ2aWV3Qm94XCI6IFwiNjQgNjQgODk2IDg5NlwiLCBcImZvY3VzYWJsZVwiOiBcImZhbHNlXCIgfSwgXCJjaGlsZHJlblwiOiBbeyBcInRhZ1wiOiBcInBhdGhcIiwgXCJhdHRyc1wiOiB7IFwiZFwiOiBcIk03NjUuNyA0ODYuOEwzMTQuOSAxMzQuN0E3Ljk3IDcuOTcgMCAwMDMwMiAxNDF2NzcuM2MwIDQuOSAyLjMgOS42IDYuMSAxMi42bDM2MCAyODEuMS0zNjAgMjgxLjFjLTMuOSAzLTYuMSA3LjctNi4xIDEyLjZWODgzYzAgNi43IDcuNyAxMC40IDEyLjkgNi4zbDQ1MC44LTM1Mi4xYTMxLjk2IDMxLjk2IDAgMDAwLTUwLjR6XCIgfSB9XSB9LCBcIm5hbWVcIjogXCJyaWdodFwiLCBcInRoZW1lXCI6IFwib3V0bGluZWRcIiB9O1xuZXhwb3J0IGRlZmF1bHQgUmlnaHRPdXRsaW5lZDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLy8gR0VORVJBVEUgQlkgLi9zY3JpcHRzL2dlbmVyYXRlLnRzXG4vLyBET04gTk9UIEVESVQgSVQgTUFOVUFMTFlcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJpZ2h0T3V0bGluZWRTdmcgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zLXN2Zy9lcy9hc24vUmlnaHRPdXRsaW5lZFwiO1xuaW1wb3J0IEFudGRJY29uIGZyb20gXCIuLi9jb21wb25lbnRzL0FudGRJY29uXCI7XG52YXIgUmlnaHRPdXRsaW5lZCA9IGZ1bmN0aW9uIFJpZ2h0T3V0bGluZWQocHJvcHMsIHJlZikge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQW50ZEljb24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmLFxuICAgIGljb246IFJpZ2h0T3V0bGluZWRTdmdcbiAgfSkpO1xufTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJpZ2h0T3V0bGluZWQuZGlzcGxheU5hbWUgPSAnUmlnaHRPdXRsaW5lZCc7XG59XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihSaWdodE91dGxpbmVkKTsiLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50KGNhbGxiYWNrKSB7XG4gIHZhciBmblJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBmblJlZi5jdXJyZW50ID0gY2FsbGJhY2s7XG4gIHZhciBtZW1vRm4gPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9mblJlZiRjdXJyZW50O1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIChfZm5SZWYkY3VycmVudCA9IGZuUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9mblJlZiRjdXJyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZm5SZWYkY3VycmVudC5jYWxsLmFwcGx5KF9mblJlZiRjdXJyZW50LCBbZm5SZWZdLmNvbmNhdChhcmdzKSk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIG1lbW9Gbjtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2FuVXNlRG9tIGZyb20gXCIuLi9Eb20vY2FuVXNlRG9tXCI7XG5cbi8qKlxuICogV3JhcCBgUmVhY3QudXNlTGF5b3V0RWZmZWN0YCB3aGljaCB3aWxsIG5vdCB0aHJvdyB3YXJuaW5nIG1lc3NhZ2UgaW4gdGVzdCBlbnZcbiAqL1xudmFyIHVzZUludGVybmFsTGF5b3V0RWZmZWN0ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBjYW5Vc2VEb20oKSA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbnZhciB1c2VMYXlvdXRFZmZlY3QgPSBmdW5jdGlvbiB1c2VMYXlvdXRFZmZlY3QoY2FsbGJhY2ssIGRlcHMpIHtcbiAgdmFyIGZpcnN0TW91bnRSZWYgPSBSZWFjdC51c2VSZWYodHJ1ZSk7XG4gIHVzZUludGVybmFsTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soZmlyc3RNb3VudFJlZi5jdXJyZW50KTtcbiAgfSwgZGVwcyk7XG5cbiAgLy8gV2UgdGVsbCByZWFjdCB0aGF0IGZpcnN0IG1vdW50IGhhcyBwYXNzZWRcbiAgdXNlSW50ZXJuYWxMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZpcnN0TW91bnRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmaXJzdE1vdW50UmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH07XG4gIH0sIFtdKTtcbn07XG5leHBvcnQgdmFyIHVzZUxheW91dFVwZGF0ZUVmZmVjdCA9IGZ1bmN0aW9uIHVzZUxheW91dFVwZGF0ZUVmZmVjdChjYWxsYmFjaywgZGVwcykge1xuICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKGZpcnN0TW91bnQpIHtcbiAgICBpZiAoIWZpcnN0TW91bnQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgfSwgZGVwcyk7XG59O1xuZXhwb3J0IGRlZmF1bHQgdXNlTGF5b3V0RWZmZWN0OyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBTYW1lIGFzIFJlYWN0LnVzZVN0YXRlIGJ1dCBgc2V0U3RhdGVgIGFjY2VwdCBgaWdub3JlRGVzdHJveWAgcGFyYW0gdG8gbm90IHRvIHNldFN0YXRlIGFmdGVyIGRlc3Ryb3llZC5cbiAqIFdlIGRvIG5vdCBtYWtlIHRoaXMgYXV0byBpcyB0byBhdm9pZCByZWFsIG1lbW9yeSBsZWFrLlxuICogRGV2ZWxvcGVyIHNob3VsZCBjb25maXJtIGl0J3Mgc2FmZSB0byBpZ25vcmUgdGhlbXNlbHZlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlU2FmZVN0YXRlKGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgZGVzdHJveVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShkZWZhdWx0VmFsdWUpLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgIHZhbHVlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRWYWx1ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZGVzdHJveVJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlc3Ryb3lSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfTtcbiAgfSwgW10pO1xuICBmdW5jdGlvbiBzYWZlU2V0U3RhdGUodXBkYXRlciwgaWdub3JlRGVzdHJveSkge1xuICAgIGlmIChpZ25vcmVEZXN0cm95ICYmIGRlc3Ryb3lSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh1cGRhdGVyKTtcbiAgfVxuICByZXR1cm4gW3ZhbHVlLCBzYWZlU2V0U3RhdGVdO1xufSIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHVzZUV2ZW50IGZyb20gXCIuL3VzZUV2ZW50XCI7XG5pbXBvcnQgeyB1c2VMYXlvdXRVcGRhdGVFZmZlY3QgfSBmcm9tIFwiLi91c2VMYXlvdXRFZmZlY3RcIjtcbmltcG9ydCB1c2VTdGF0ZSBmcm9tIFwiLi91c2VTdGF0ZVwiO1xuLyoqIFdlIG9ubHkgdGhpbmsgYHVuZGVmaW5lZGAgaXMgZW1wdHkgKi9cbmZ1bmN0aW9uIGhhc1ZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFNpbWlsYXIgdG8gYHVzZVN0YXRlYCBidXQgd2lsbCB1c2UgcHJvcHMgdmFsdWUgaWYgcHJvdmlkZWQuXG4gKiBOb3RlIHRoYXQgaW50ZXJuYWwgdXNlIHJjLXV0aWwgYHVzZVN0YXRlYCBob29rLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VNZXJnZWRTdGF0ZShkZWZhdWx0U3RhdGVWYWx1ZSwgb3B0aW9uKSB7XG4gIHZhciBfcmVmID0gb3B0aW9uIHx8IHt9LFxuICAgIGRlZmF1bHRWYWx1ZSA9IF9yZWYuZGVmYXVsdFZhbHVlLFxuICAgIHZhbHVlID0gX3JlZi52YWx1ZSxcbiAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgcG9zdFN0YXRlID0gX3JlZi5wb3N0U3RhdGU7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT0gSW5pdCA9PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGhhc1ZhbHVlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKGhhc1ZhbHVlKGRlZmF1bHRWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBkZWZhdWx0VmFsdWUgPT09ICdmdW5jdGlvbicgPyBkZWZhdWx0VmFsdWUoKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZGVmYXVsdFN0YXRlVmFsdWUgPT09ICdmdW5jdGlvbicgPyBkZWZhdWx0U3RhdGVWYWx1ZSgpIDogZGVmYXVsdFN0YXRlVmFsdWU7XG4gICAgICB9XG4gICAgfSksXG4gICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgaW5uZXJWYWx1ZSA9IF91c2VTdGF0ZTJbMF0sXG4gICAgc2V0SW5uZXJWYWx1ZSA9IF91c2VTdGF0ZTJbMV07XG4gIHZhciBtZXJnZWRWYWx1ZSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGlubmVyVmFsdWU7XG4gIHZhciBwb3N0TWVyZ2VkVmFsdWUgPSBwb3N0U3RhdGUgPyBwb3N0U3RhdGUobWVyZ2VkVmFsdWUpIDogbWVyZ2VkVmFsdWU7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PSBDaGFuZ2UgPT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgb25DaGFuZ2VGbiA9IHVzZUV2ZW50KG9uQ2hhbmdlKTtcbiAgdmFyIF91c2VTdGF0ZTMgPSB1c2VTdGF0ZShbbWVyZ2VkVmFsdWVdKSxcbiAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksXG4gICAgcHJldlZhbHVlID0gX3VzZVN0YXRlNFswXSxcbiAgICBzZXRQcmV2VmFsdWUgPSBfdXNlU3RhdGU0WzFdO1xuICB1c2VMYXlvdXRVcGRhdGVFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcmV2ID0gcHJldlZhbHVlWzBdO1xuICAgIGlmIChpbm5lclZhbHVlICE9PSBwcmV2KSB7XG4gICAgICBvbkNoYW5nZUZuKGlubmVyVmFsdWUsIHByZXYpO1xuICAgIH1cbiAgfSwgW3ByZXZWYWx1ZV0pO1xuXG4gIC8vIFN5bmMgdmFsdWUgYmFjayB0byBgdW5kZWZpbmVkYCB3aGVuIGl0IGZyb20gY29udHJvbCB0byB1bi1jb250cm9sXG4gIHVzZUxheW91dFVwZGF0ZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFoYXNWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIHNldElubmVyVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfSwgW3ZhbHVlXSk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PSBVcGRhdGUgPT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgdHJpZ2dlckNoYW5nZSA9IHVzZUV2ZW50KGZ1bmN0aW9uICh1cGRhdGVyLCBpZ25vcmVEZXN0cm95KSB7XG4gICAgc2V0SW5uZXJWYWx1ZSh1cGRhdGVyLCBpZ25vcmVEZXN0cm95KTtcbiAgICBzZXRQcmV2VmFsdWUoW21lcmdlZFZhbHVlXSwgaWdub3JlRGVzdHJveSk7XG4gIH0pO1xuICByZXR1cm4gW3Bvc3RNZXJnZWRWYWx1ZSwgdHJpZ2dlckNoYW5nZV07XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgcmV0ID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmICgoY2hpbGQgPT09IHVuZGVmaW5lZCB8fCBjaGlsZCA9PT0gbnVsbCkgJiYgIW9wdGlvbi5rZWVwRW1wdHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICByZXQgPSByZXQuY29uY2F0KHRvQXJyYXkoY2hpbGQpKTtcbiAgICB9IGVsc2UgaWYgKGlzRnJhZ21lbnQoY2hpbGQpICYmIGNoaWxkLnByb3BzKSB7XG4gICAgICByZXQgPSByZXQuY29uY2F0KHRvQXJyYXkoY2hpbGQucHJvcHMuY2hpbGRyZW4sIG9wdGlvbikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXQucHVzaChjaGlsZCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xudmFyIF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW90aW9uUHJvdmlkZXIoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHByb3BzXG4gIH0sIGNoaWxkcmVuKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHRvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufSIsImltcG9ydCBnZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9nZXRQcm90b3R5cGVPZi5qc1wiO1xuaW1wb3J0IGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCBmcm9tIFwiLi9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QuanNcIjtcbmltcG9ydCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gXCIuL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7XG4gIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7XG4gIHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHtcbiAgICB2YXIgU3VwZXIgPSBnZXRQcm90b3R5cGVPZihEZXJpdmVkKSxcbiAgICAgIHJlc3VsdDtcbiAgICBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkge1xuICAgICAgdmFyIE5ld1RhcmdldCA9IGdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuICAgICAgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG4gIHRyeSB7XG4gICAgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5pbXBvcnQgYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufSIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgRG9tV3JhcHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRG9tV3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRG9tV3JhcHBlcik7XG4gIGZ1bmN0aW9uIERvbVdyYXBwZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvbVdyYXBwZXIpO1xuICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuICBfY3JlYXRlQ2xhc3MoRG9tV3JhcHBlciwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRG9tV3JhcHBlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcbmV4cG9ydCBkZWZhdWx0IERvbVdyYXBwZXI7IiwiZXhwb3J0IHZhciBTVEFUVVNfTk9ORSA9ICdub25lJztcbmV4cG9ydCB2YXIgU1RBVFVTX0FQUEVBUiA9ICdhcHBlYXInO1xuZXhwb3J0IHZhciBTVEFUVVNfRU5URVIgPSAnZW50ZXInO1xuZXhwb3J0IHZhciBTVEFUVVNfTEVBVkUgPSAnbGVhdmUnO1xuZXhwb3J0IHZhciBTVEVQX05PTkUgPSAnbm9uZSc7XG5leHBvcnQgdmFyIFNURVBfUFJFUEFSRSA9ICdwcmVwYXJlJztcbmV4cG9ydCB2YXIgU1RFUF9TVEFSVCA9ICdzdGFydCc7XG5leHBvcnQgdmFyIFNURVBfQUNUSVZFID0gJ2FjdGl2ZSc7XG5leHBvcnQgdmFyIFNURVBfQUNUSVZBVEVEID0gJ2VuZCc7XG4vKipcbiAqIFVzZWQgZm9yIGRpc2FibGVkIG1vdGlvbiBjYXNlLlxuICogUHJlcGFyZSBzdGFnZSB3aWxsIHN0aWxsIHdvcmsgYnV0IHN0YXJ0ICYgYWN0aXZlIHdpbGwgYmUgc2tpcHBlZC5cbiAqL1xuZXhwb3J0IHZhciBTVEVQX1BSRVBBUkVEID0gJ3ByZXBhcmVkJzsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgY2FuVXNlRE9NIGZyb20gXCJyYy11dGlsL2VzL0RvbS9jYW5Vc2VEb21cIjtcbi8vID09PT09PT09PT09PT09PT09IFRyYW5zaXRpb24gPT09PT09PT09PT09PT09PT1cbi8vIEV2ZW50IHdyYXBwZXIuIENvcHkgZnJvbSByZWFjdCBzb3VyY2UgY29kZVxuZnVuY3Rpb24gbWFrZVByZWZpeE1hcChzdHlsZVByb3AsIGV2ZW50TmFtZSkge1xuICB2YXIgcHJlZml4ZXMgPSB7fTtcbiAgcHJlZml4ZXNbc3R5bGVQcm9wLnRvTG93ZXJDYXNlKCldID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHByZWZpeGVzW1wiV2Via2l0XCIuY29uY2F0KHN0eWxlUHJvcCldID0gXCJ3ZWJraXRcIi5jb25jYXQoZXZlbnROYW1lKTtcbiAgcHJlZml4ZXNbXCJNb3pcIi5jb25jYXQoc3R5bGVQcm9wKV0gPSBcIm1velwiLmNvbmNhdChldmVudE5hbWUpO1xuICBwcmVmaXhlc1tcIm1zXCIuY29uY2F0KHN0eWxlUHJvcCldID0gXCJNU1wiLmNvbmNhdChldmVudE5hbWUpO1xuICBwcmVmaXhlc1tcIk9cIi5jb25jYXQoc3R5bGVQcm9wKV0gPSBcIm9cIi5jb25jYXQoZXZlbnROYW1lLnRvTG93ZXJDYXNlKCkpO1xuICByZXR1cm4gcHJlZml4ZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4ZXMoZG9tU3VwcG9ydCwgd2luKSB7XG4gIHZhciBwcmVmaXhlcyA9IHtcbiAgICBhbmltYXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ0FuaW1hdGlvbicsICdBbmltYXRpb25FbmQnKSxcbiAgICB0cmFuc2l0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdUcmFuc2l0aW9uJywgJ1RyYW5zaXRpb25FbmQnKVxuICB9O1xuICBpZiAoZG9tU3VwcG9ydCkge1xuICAgIGlmICghKCdBbmltYXRpb25FdmVudCcgaW4gd2luKSkge1xuICAgICAgZGVsZXRlIHByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb247XG4gICAgfVxuICAgIGlmICghKCdUcmFuc2l0aW9uRXZlbnQnIGluIHdpbikpIHtcbiAgICAgIGRlbGV0ZSBwcmVmaXhlcy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb247XG4gICAgfVxuICB9XG4gIHJldHVybiBwcmVmaXhlcztcbn1cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IGdldFZlbmRvclByZWZpeGVzKGNhblVzZURPTSgpLCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9KTtcbnZhciBzdHlsZSA9IHt9O1xuaWYgKGNhblVzZURPTSgpKSB7XG4gIHZhciBfZG9jdW1lbnQkY3JlYXRlRWxlbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc3R5bGUgPSBfZG9jdW1lbnQkY3JlYXRlRWxlbWUuc3R5bGU7XG59XG52YXIgcHJlZml4ZWRFdmVudE5hbWVzID0ge307XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoZXZlbnROYW1lKSB7XG4gIGlmIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSkge1xuICAgIHJldHVybiBwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXTtcbiAgfVxuICB2YXIgcHJlZml4TWFwID0gdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXTtcbiAgaWYgKHByZWZpeE1hcCkge1xuICAgIHZhciBzdHlsZVByb3BMaXN0ID0gT2JqZWN0LmtleXMocHJlZml4TWFwKTtcbiAgICB2YXIgbGVuID0gc3R5bGVQcm9wTGlzdC5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdmFyIHN0eWxlUHJvcCA9IHN0eWxlUHJvcExpc3RbaV07XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByZWZpeE1hcCwgc3R5bGVQcm9wKSAmJiBzdHlsZVByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXTtcbiAgICAgICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG52YXIgaW50ZXJuYWxBbmltYXRpb25FbmROYW1lID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbmVuZCcpO1xudmFyIGludGVybmFsVHJhbnNpdGlvbkVuZE5hbWUgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgndHJhbnNpdGlvbmVuZCcpO1xuZXhwb3J0IHZhciBzdXBwb3J0VHJhbnNpdGlvbiA9ICEhKGludGVybmFsQW5pbWF0aW9uRW5kTmFtZSAmJiBpbnRlcm5hbFRyYW5zaXRpb25FbmROYW1lKTtcbmV4cG9ydCB2YXIgYW5pbWF0aW9uRW5kTmFtZSA9IGludGVybmFsQW5pbWF0aW9uRW5kTmFtZSB8fCAnYW5pbWF0aW9uZW5kJztcbmV4cG9ydCB2YXIgdHJhbnNpdGlvbkVuZE5hbWUgPSBpbnRlcm5hbFRyYW5zaXRpb25FbmROYW1lIHx8ICd0cmFuc2l0aW9uZW5kJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uTmFtZSh0cmFuc2l0aW9uTmFtZSwgdHJhbnNpdGlvblR5cGUpIHtcbiAgaWYgKCF0cmFuc2l0aW9uTmFtZSkgcmV0dXJuIG51bGw7XG4gIGlmIChfdHlwZW9mKHRyYW5zaXRpb25OYW1lKSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgdHlwZSA9IHRyYW5zaXRpb25UeXBlLnJlcGxhY2UoLy1cXHcvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWF0Y2hbMV0udG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk5hbWVbdHlwZV07XG4gIH1cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHRyYW5zaXRpb25OYW1lLCBcIi1cIikuY29uY2F0KHRyYW5zaXRpb25UeXBlKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBhbmltYXRpb25FbmROYW1lLCB0cmFuc2l0aW9uRW5kTmFtZSB9IGZyb20gXCIuLi91dGlsL21vdGlvblwiO1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgY2FjaGVFbGVtZW50UmVmID0gdXNlUmVmKCk7XG5cbiAgLy8gQ2FjaGUgY2FsbGJhY2tcbiAgdmFyIGNhbGxiYWNrUmVmID0gdXNlUmVmKGNhbGxiYWNrKTtcbiAgY2FsbGJhY2tSZWYuY3VycmVudCA9IGNhbGxiYWNrO1xuXG4gIC8vIEludGVybmFsIG1vdGlvbiBldmVudCBoYW5kbGVyXG4gIHZhciBvbkludGVybmFsTW90aW9uRW5kID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY2FsbGJhY2tSZWYuY3VycmVudChldmVudCk7XG4gIH0sIFtdKTtcblxuICAvLyBSZW1vdmUgZXZlbnRzXG4gIGZ1bmN0aW9uIHJlbW92ZU1vdGlvbkV2ZW50cyhlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kTmFtZSwgb25JbnRlcm5hbE1vdGlvbkVuZCk7XG4gICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoYW5pbWF0aW9uRW5kTmFtZSwgb25JbnRlcm5hbE1vdGlvbkVuZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUGF0Y2ggZXZlbnRzXG4gIGZ1bmN0aW9uIHBhdGNoTW90aW9uRXZlbnRzKGVsZW1lbnQpIHtcbiAgICBpZiAoY2FjaGVFbGVtZW50UmVmLmN1cnJlbnQgJiYgY2FjaGVFbGVtZW50UmVmLmN1cnJlbnQgIT09IGVsZW1lbnQpIHtcbiAgICAgIHJlbW92ZU1vdGlvbkV2ZW50cyhjYWNoZUVsZW1lbnRSZWYuY3VycmVudCk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IGNhY2hlRWxlbWVudFJlZi5jdXJyZW50KSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZE5hbWUsIG9uSW50ZXJuYWxNb3Rpb25FbmQpO1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGFuaW1hdGlvbkVuZE5hbWUsIG9uSW50ZXJuYWxNb3Rpb25FbmQpO1xuXG4gICAgICAvLyBTYXZlIGFzIGNhY2hlIGluIGNhc2UgZG9tIHJlbW92ZWQgdHJpZ2dlciBieSBgbW90aW9uRGVhZGxpbmVgXG4gICAgICBjYWNoZUVsZW1lbnRSZWYuY3VycmVudCA9IGVsZW1lbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2xlYW4gdXAgd2hlbiByZW1vdmVkXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZU1vdGlvbkV2ZW50cyhjYWNoZUVsZW1lbnRSZWYuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gW3BhdGNoTW90aW9uRXZlbnRzLCByZW1vdmVNb3Rpb25FdmVudHNdO1xufSk7IiwiaW1wb3J0IGNhblVzZURvbSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vY2FuVXNlRG9tXCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLy8gSXQncyBzYWZlIHRvIHVzZSBgdXNlTGF5b3V0RWZmZWN0YCBidXQgdGhlIHdhcm5pbmcgaXMgYW5ub3lpbmdcbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gY2FuVXNlRG9tKCkgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5leHBvcnQgZGVmYXVsdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0OyIsInZhciByYWYgPSBmdW5jdGlvbiByYWYoY2FsbGJhY2spIHtcbiAgcmV0dXJuICtzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNik7XG59O1xudmFyIGNhZiA9IGZ1bmN0aW9uIGNhZihudW0pIHtcbiAgcmV0dXJuIGNsZWFyVGltZW91dChudW0pO1xufTtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAncmVxdWVzdEFuaW1hdGlvbkZyYW1lJyBpbiB3aW5kb3cpIHtcbiAgcmFmID0gZnVuY3Rpb24gcmFmKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spO1xuICB9O1xuICBjYWYgPSBmdW5jdGlvbiBjYWYoaGFuZGxlKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShoYW5kbGUpO1xuICB9O1xufVxudmFyIHJhZlVVSUQgPSAwO1xudmFyIHJhZklkcyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGNsZWFudXAoaWQpIHtcbiAgcmFmSWRzLmRlbGV0ZShpZCk7XG59XG52YXIgd3JhcHBlclJhZiA9IGZ1bmN0aW9uIHdyYXBwZXJSYWYoY2FsbGJhY2spIHtcbiAgdmFyIHRpbWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICByYWZVVUlEICs9IDE7XG4gIHZhciBpZCA9IHJhZlVVSUQ7XG4gIGZ1bmN0aW9uIGNhbGxSZWYobGVmdFRpbWVzKSB7XG4gICAgaWYgKGxlZnRUaW1lcyA9PT0gMCkge1xuICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgIGNsZWFudXAoaWQpO1xuXG4gICAgICAvLyBUcmlnZ2VyXG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOZXh0IHJhZlxuICAgICAgdmFyIHJlYWxJZCA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxSZWYobGVmdFRpbWVzIC0gMSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQmluZCByZWFsIHJhZiBpZFxuICAgICAgcmFmSWRzLnNldChpZCwgcmVhbElkKTtcbiAgICB9XG4gIH1cbiAgY2FsbFJlZih0aW1lcyk7XG4gIHJldHVybiBpZDtcbn07XG53cmFwcGVyUmFmLmNhbmNlbCA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgcmVhbElkID0gcmFmSWRzLmdldChpZCk7XG4gIGNsZWFudXAoaWQpO1xuICByZXR1cm4gY2FmKHJlYWxJZCk7XG59O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd3JhcHBlclJhZi5pZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJhZklkcztcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IHdyYXBwZXJSYWY7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgdXNlU3RhdGUgZnJvbSBcInJjLXV0aWwvZXMvaG9va3MvdXNlU3RhdGVcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNURVBfQUNUSVZBVEVELCBTVEVQX0FDVElWRSwgU1RFUF9OT05FLCBTVEVQX1BSRVBBUkUsIFNURVBfUFJFUEFSRUQsIFNURVBfU1RBUlQgfSBmcm9tIFwiLi4vaW50ZXJmYWNlXCI7XG5pbXBvcnQgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCBmcm9tIFwiLi91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0XCI7XG5pbXBvcnQgdXNlTmV4dEZyYW1lIGZyb20gXCIuL3VzZU5leHRGcmFtZVwiO1xudmFyIEZVTExfU1RFUF9RVUVVRSA9IFtTVEVQX1BSRVBBUkUsIFNURVBfU1RBUlQsIFNURVBfQUNUSVZFLCBTVEVQX0FDVElWQVRFRF07XG52YXIgU0lNUExFX1NURVBfUVVFVUUgPSBbU1RFUF9QUkVQQVJFLCBTVEVQX1BSRVBBUkVEXTtcblxuLyoqIFNraXAgY3VycmVudCBzdGVwICovXG5leHBvcnQgdmFyIFNraXBTdGVwID0gZmFsc2U7XG4vKiogQ3VycmVudCBzdGVwIHNob3VsZCBiZSB1cGRhdGUgaW4gKi9cbmV4cG9ydCB2YXIgRG9TdGVwID0gdHJ1ZTtcbmV4cG9ydCBmdW5jdGlvbiBpc0FjdGl2ZShzdGVwKSB7XG4gIHJldHVybiBzdGVwID09PSBTVEVQX0FDVElWRSB8fCBzdGVwID09PSBTVEVQX0FDVElWQVRFRDtcbn1cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoc3RhdHVzLCBwcmVwYXJlT25seSwgY2FsbGJhY2spIHtcbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKFNURVBfTk9ORSksXG4gICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgc3RlcCA9IF91c2VTdGF0ZTJbMF0sXG4gICAgc2V0U3RlcCA9IF91c2VTdGF0ZTJbMV07XG4gIHZhciBfdXNlTmV4dEZyYW1lID0gdXNlTmV4dEZyYW1lKCksXG4gICAgX3VzZU5leHRGcmFtZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlTmV4dEZyYW1lLCAyKSxcbiAgICBuZXh0RnJhbWUgPSBfdXNlTmV4dEZyYW1lMlswXSxcbiAgICBjYW5jZWxOZXh0RnJhbWUgPSBfdXNlTmV4dEZyYW1lMlsxXTtcbiAgZnVuY3Rpb24gc3RhcnRRdWV1ZSgpIHtcbiAgICBzZXRTdGVwKFNURVBfUFJFUEFSRSwgdHJ1ZSk7XG4gIH1cbiAgdmFyIFNURVBfUVVFVUUgPSBwcmVwYXJlT25seSA/IFNJTVBMRV9TVEVQX1FVRVVFIDogRlVMTF9TVEVQX1FVRVVFO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc3RlcCAhPT0gU1RFUF9OT05FICYmIHN0ZXAgIT09IFNURVBfQUNUSVZBVEVEKSB7XG4gICAgICB2YXIgaW5kZXggPSBTVEVQX1FVRVVFLmluZGV4T2Yoc3RlcCk7XG4gICAgICB2YXIgbmV4dFN0ZXAgPSBTVEVQX1FVRVVFW2luZGV4ICsgMV07XG4gICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soc3RlcCk7XG4gICAgICBpZiAocmVzdWx0ID09PSBTa2lwU3RlcCkge1xuICAgICAgICAvLyBTa2lwIHdoZW4gbm8gbmVlZGVkXG4gICAgICAgIHNldFN0ZXAobmV4dFN0ZXAsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0U3RlcCkge1xuICAgICAgICAvLyBEbyBhcyBmcmFtZSBmb3Igc3RlcCB1cGRhdGVcbiAgICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgICAgZnVuY3Rpb24gZG9OZXh0KCkge1xuICAgICAgICAgICAgLy8gU2tpcCBzaW5jZSBjdXJyZW50IHF1ZXVlIGlzIG9vZFxuICAgICAgICAgICAgaWYgKGluZm8uaXNDYW5jZWxlZCgpKSByZXR1cm47XG4gICAgICAgICAgICBzZXRTdGVwKG5leHRTdGVwLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZG9OZXh0KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE9ubHkgcHJvbWlzZSBzaG91bGQgYmUgYXN5bmNcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4oZG9OZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3N0YXR1cywgc3RlcF0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjYW5jZWxOZXh0RnJhbWUoKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHJldHVybiBbc3RhcnRRdWV1ZSwgc3RlcF07XG59KTsiLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuLyogZXNsaW50LWRpc2FibGUgcmVhY3QvZGVmYXVsdC1wcm9wcy1tYXRjaC1wcm9wLXR5cGVzLCByZWFjdC9uby1tdWx0aS1jb21wLCByZWFjdC9wcm9wLXR5cGVzICovXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBmaW5kRE9NTm9kZSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vZmluZERPTU5vZGVcIjtcbmltcG9ydCB7IGZpbGxSZWYsIHN1cHBvcnRSZWYgfSBmcm9tIFwicmMtdXRpbC9lcy9yZWZcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tIFwiLi9jb250ZXh0XCI7XG5pbXBvcnQgRG9tV3JhcHBlciBmcm9tIFwiLi9Eb21XcmFwcGVyXCI7XG5pbXBvcnQgdXNlU3RhdHVzIGZyb20gXCIuL2hvb2tzL3VzZVN0YXR1c1wiO1xuaW1wb3J0IHsgaXNBY3RpdmUgfSBmcm9tIFwiLi9ob29rcy91c2VTdGVwUXVldWVcIjtcbmltcG9ydCB7IFNUQVRVU19OT05FLCBTVEVQX1BSRVBBUkUsIFNURVBfU1RBUlQgfSBmcm9tIFwiLi9pbnRlcmZhY2VcIjtcbmltcG9ydCB7IGdldFRyYW5zaXRpb25OYW1lLCBzdXBwb3J0VHJhbnNpdGlvbiB9IGZyb20gXCIuL3V0aWwvbW90aW9uXCI7XG4vKipcbiAqIGB0cmFuc2l0aW9uU3VwcG9ydGAgaXMgdXNlZCBmb3Igbm9uZSB0cmFuc2l0aW9uIHRlc3QgY2FzZS5cbiAqIERlZmF1bHQgd2UgdXNlIGJyb3dzZXIgdHJhbnNpdGlvbiBldmVudCBzdXBwb3J0IGNoZWNrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuQ1NTTW90aW9uKGNvbmZpZykge1xuICB2YXIgdHJhbnNpdGlvblN1cHBvcnQgPSBjb25maWc7XG4gIGlmIChfdHlwZW9mKGNvbmZpZykgPT09ICdvYmplY3QnKSB7XG4gICAgdHJhbnNpdGlvblN1cHBvcnQgPSBjb25maWcudHJhbnNpdGlvblN1cHBvcnQ7XG4gIH1cbiAgZnVuY3Rpb24gaXNTdXBwb3J0VHJhbnNpdGlvbihwcm9wcywgY29udGV4dE1vdGlvbikge1xuICAgIHJldHVybiAhIShwcm9wcy5tb3Rpb25OYW1lICYmIHRyYW5zaXRpb25TdXBwb3J0ICYmIGNvbnRleHRNb3Rpb24gIT09IGZhbHNlKTtcbiAgfVxuICB2YXIgQ1NTTW90aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICB2YXIgX3Byb3BzJHZpc2libGUgPSBwcm9wcy52aXNpYmxlLFxuICAgICAgdmlzaWJsZSA9IF9wcm9wcyR2aXNpYmxlID09PSB2b2lkIDAgPyB0cnVlIDogX3Byb3BzJHZpc2libGUsXG4gICAgICBfcHJvcHMkcmVtb3ZlT25MZWF2ZSA9IHByb3BzLnJlbW92ZU9uTGVhdmUsXG4gICAgICByZW1vdmVPbkxlYXZlID0gX3Byb3BzJHJlbW92ZU9uTGVhdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkcmVtb3ZlT25MZWF2ZSxcbiAgICAgIGZvcmNlUmVuZGVyID0gcHJvcHMuZm9yY2VSZW5kZXIsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgbW90aW9uTmFtZSA9IHByb3BzLm1vdGlvbk5hbWUsXG4gICAgICBsZWF2ZWRDbGFzc05hbWUgPSBwcm9wcy5sZWF2ZWRDbGFzc05hbWUsXG4gICAgICBldmVudFByb3BzID0gcHJvcHMuZXZlbnRQcm9wcztcbiAgICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbnRleHQpLFxuICAgICAgY29udGV4dE1vdGlvbiA9IF9SZWFjdCR1c2VDb250ZXh0Lm1vdGlvbjtcbiAgICB2YXIgc3VwcG9ydE1vdGlvbiA9IGlzU3VwcG9ydFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHRNb3Rpb24pO1xuXG4gICAgLy8gUmVmIHRvIHRoZSByZWFjdCBub2RlLCBpdCBtYXkgYmUgYSBIVE1MRWxlbWVudFxuICAgIHZhciBub2RlUmVmID0gdXNlUmVmKCk7XG4gICAgLy8gUmVmIHRvIHRoZSBkb20gd3JhcHBlciBpbiBjYXNlIHJlZiBjYW4gbm90IHBhc3MgdG8gSFRNTEVsZW1lbnRcbiAgICB2YXIgd3JhcHBlck5vZGVSZWYgPSB1c2VSZWYoKTtcbiAgICBmdW5jdGlvbiBnZXREb21FbGVtZW50KCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gSGVyZSB3ZSdyZSBhdm9pZGluZyBjYWxsIGZvciBmaW5kRE9NTm9kZSBzaW5jZSBpdCdzIGRlcHJlY2F0ZWRcbiAgICAgICAgLy8gaW4gc3RyaWN0IG1vZGUuIFdlJ3JlIGNhbGxpbmcgaXQgb25seSB3aGVuIG5vZGUgcmVmIGlzIG5vdFxuICAgICAgICAvLyBhbiBpbnN0YW5jZSBvZiBET00gSFRNTEVsZW1lbnQuIE90aGVyd2lzZSB1c2VcbiAgICAgICAgLy8gZmluZERPTU5vZGUgYXMgYSBmaW5hbCByZXNvcnRcbiAgICAgICAgcmV0dXJuIG5vZGVSZWYuY3VycmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ID8gbm9kZVJlZi5jdXJyZW50IDogZmluZERPTU5vZGUod3JhcHBlck5vZGVSZWYuY3VycmVudCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIE9ubHkgaGFwcGVuIHdoZW4gYG1vdGlvbkRlYWRsaW5lYCB0cmlnZ2VyIGJ1dCBlbGVtZW50IHJlbW92ZWQuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgX3VzZVN0YXR1cyA9IHVzZVN0YXR1cyhzdXBwb3J0TW90aW9uLCB2aXNpYmxlLCBnZXREb21FbGVtZW50LCBwcm9wcyksXG4gICAgICBfdXNlU3RhdHVzMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0dXMsIDQpLFxuICAgICAgc3RhdHVzID0gX3VzZVN0YXR1czJbMF0sXG4gICAgICBzdGF0dXNTdGVwID0gX3VzZVN0YXR1czJbMV0sXG4gICAgICBzdGF0dXNTdHlsZSA9IF91c2VTdGF0dXMyWzJdLFxuICAgICAgbWVyZ2VkVmlzaWJsZSA9IF91c2VTdGF0dXMyWzNdO1xuXG4gICAgLy8gUmVjb3JkIHdoZXRoZXIgY29udGVudCBoYXMgcmVuZGVyZWRcbiAgICAvLyBXaWxsIHJldHVybiBudWxsIGZvciB1bi1yZW5kZXJlZCBldmVuIHdoZW4gYHJlbW92ZU9uTGVhdmU9e2ZhbHNlfWBcbiAgICB2YXIgcmVuZGVyZWRSZWYgPSBSZWFjdC51c2VSZWYobWVyZ2VkVmlzaWJsZSk7XG4gICAgaWYgKG1lcmdlZFZpc2libGUpIHtcbiAgICAgIHJlbmRlcmVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT0gUmVmcyA9PT09PT09PT09PT09PT09PT09PT09XG4gICAgdmFyIHNldE5vZGVSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgICAgbm9kZVJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICAgIGZpbGxSZWYocmVmLCBub2RlKTtcbiAgICB9LCBbcmVmXSk7XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT0gUmVuZGVyID09PT09PT09PT09PT09PT09PT09PVxuICAgIHZhciBtb3Rpb25DaGlsZHJlbjtcbiAgICB2YXIgbWVyZ2VkUHJvcHMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGV2ZW50UHJvcHMpLCB7fSwge1xuICAgICAgdmlzaWJsZTogdmlzaWJsZVxuICAgIH0pO1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIC8vIE5vIGNoaWxkcmVuXG4gICAgICBtb3Rpb25DaGlsZHJlbiA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFNUQVRVU19OT05FKSB7XG4gICAgICAvLyBTdGFibGUgY2hpbGRyZW5cbiAgICAgIGlmIChtZXJnZWRWaXNpYmxlKSB7XG4gICAgICAgIG1vdGlvbkNoaWxkcmVuID0gY2hpbGRyZW4oX29iamVjdFNwcmVhZCh7fSwgbWVyZ2VkUHJvcHMpLCBzZXROb2RlUmVmKTtcbiAgICAgIH0gZWxzZSBpZiAoIXJlbW92ZU9uTGVhdmUgJiYgcmVuZGVyZWRSZWYuY3VycmVudCAmJiBsZWF2ZWRDbGFzc05hbWUpIHtcbiAgICAgICAgbW90aW9uQ2hpbGRyZW4gPSBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1lcmdlZFByb3BzKSwge30sIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGxlYXZlZENsYXNzTmFtZVxuICAgICAgICB9KSwgc2V0Tm9kZVJlZik7XG4gICAgICB9IGVsc2UgaWYgKGZvcmNlUmVuZGVyIHx8ICFyZW1vdmVPbkxlYXZlICYmICFsZWF2ZWRDbGFzc05hbWUpIHtcbiAgICAgICAgbW90aW9uQ2hpbGRyZW4gPSBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1lcmdlZFByb3BzKSwge30sIHtcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgfVxuICAgICAgICB9KSwgc2V0Tm9kZVJlZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb3Rpb25DaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcbiAgICAgIC8vIEluIG1vdGlvblxuICAgICAgdmFyIHN0YXR1c1N1ZmZpeDtcbiAgICAgIGlmIChzdGF0dXNTdGVwID09PSBTVEVQX1BSRVBBUkUpIHtcbiAgICAgICAgc3RhdHVzU3VmZml4ID0gJ3ByZXBhcmUnO1xuICAgICAgfSBlbHNlIGlmIChpc0FjdGl2ZShzdGF0dXNTdGVwKSkge1xuICAgICAgICBzdGF0dXNTdWZmaXggPSAnYWN0aXZlJztcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzU3RlcCA9PT0gU1RFUF9TVEFSVCkge1xuICAgICAgICBzdGF0dXNTdWZmaXggPSAnc3RhcnQnO1xuICAgICAgfVxuICAgICAgdmFyIG1vdGlvbkNscyA9IGdldFRyYW5zaXRpb25OYW1lKG1vdGlvbk5hbWUsIFwiXCIuY29uY2F0KHN0YXR1cywgXCItXCIpLmNvbmNhdChzdGF0dXNTdWZmaXgpKTtcbiAgICAgIG1vdGlvbkNoaWxkcmVuID0gY2hpbGRyZW4oX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtZXJnZWRQcm9wcyksIHt9LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhnZXRUcmFuc2l0aW9uTmFtZShtb3Rpb25OYW1lLCBzdGF0dXMpLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBtb3Rpb25DbHMsIG1vdGlvbkNscyAmJiBzdGF0dXNTdWZmaXgpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMsIG1vdGlvbk5hbWUsIHR5cGVvZiBtb3Rpb25OYW1lID09PSAnc3RyaW5nJyksIF9jbGFzc05hbWVzKSksXG4gICAgICAgIHN0eWxlOiBzdGF0dXNTdHlsZVxuICAgICAgfSksIHNldE5vZGVSZWYpO1xuICAgIH1cblxuICAgIC8vIEF1dG8gaW5qZWN0IHJlZiBpZiBjaGlsZCBub2RlIG5vdCBoYXZlIGByZWZgIHByb3BzXG4gICAgaWYgKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQobW90aW9uQ2hpbGRyZW4pICYmIHN1cHBvcnRSZWYobW90aW9uQ2hpbGRyZW4pKSB7XG4gICAgICB2YXIgX3JlZiA9IG1vdGlvbkNoaWxkcmVuLFxuICAgICAgICBvcmlnaW5Ob2RlUmVmID0gX3JlZi5yZWY7XG4gICAgICBpZiAoIW9yaWdpbk5vZGVSZWYpIHtcbiAgICAgICAgbW90aW9uQ2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KG1vdGlvbkNoaWxkcmVuLCB7XG4gICAgICAgICAgcmVmOiBzZXROb2RlUmVmXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRG9tV3JhcHBlciwge1xuICAgICAgcmVmOiB3cmFwcGVyTm9kZVJlZlxuICAgIH0sIG1vdGlvbkNoaWxkcmVuKTtcbiAgfSk7XG4gIENTU01vdGlvbi5kaXNwbGF5TmFtZSA9ICdDU1NNb3Rpb24nO1xuICByZXR1cm4gQ1NTTW90aW9uO1xufVxuZXhwb3J0IGRlZmF1bHQgZ2VuQ1NTTW90aW9uKHN1cHBvcnRUcmFuc2l0aW9uKTsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHVzZVN0YXRlIGZyb20gXCJyYy11dGlsL2VzL2hvb2tzL3VzZVN0YXRlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNUQVRVU19BUFBFQVIsIFNUQVRVU19FTlRFUiwgU1RBVFVTX0xFQVZFLCBTVEFUVVNfTk9ORSwgU1RFUF9BQ1RJVkUsIFNURVBfUFJFUEFSRSwgU1RFUF9QUkVQQVJFRCwgU1RFUF9TVEFSVCB9IGZyb20gXCIuLi9pbnRlcmZhY2VcIjtcbmltcG9ydCB1c2VEb21Nb3Rpb25FdmVudHMgZnJvbSBcIi4vdXNlRG9tTW90aW9uRXZlbnRzXCI7XG5pbXBvcnQgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCBmcm9tIFwiLi91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0XCI7XG5pbXBvcnQgdXNlU3RlcFF1ZXVlLCB7IERvU3RlcCwgaXNBY3RpdmUsIFNraXBTdGVwIH0gZnJvbSBcIi4vdXNlU3RlcFF1ZXVlXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTdGF0dXMoc3VwcG9ydE1vdGlvbiwgdmlzaWJsZSwgZ2V0RWxlbWVudCwgX3JlZikge1xuICB2YXIgX3JlZiRtb3Rpb25FbnRlciA9IF9yZWYubW90aW9uRW50ZXIsXG4gICAgbW90aW9uRW50ZXIgPSBfcmVmJG1vdGlvbkVudGVyID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRtb3Rpb25FbnRlcixcbiAgICBfcmVmJG1vdGlvbkFwcGVhciA9IF9yZWYubW90aW9uQXBwZWFyLFxuICAgIG1vdGlvbkFwcGVhciA9IF9yZWYkbW90aW9uQXBwZWFyID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRtb3Rpb25BcHBlYXIsXG4gICAgX3JlZiRtb3Rpb25MZWF2ZSA9IF9yZWYubW90aW9uTGVhdmUsXG4gICAgbW90aW9uTGVhdmUgPSBfcmVmJG1vdGlvbkxlYXZlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRtb3Rpb25MZWF2ZSxcbiAgICBtb3Rpb25EZWFkbGluZSA9IF9yZWYubW90aW9uRGVhZGxpbmUsXG4gICAgbW90aW9uTGVhdmVJbW1lZGlhdGVseSA9IF9yZWYubW90aW9uTGVhdmVJbW1lZGlhdGVseSxcbiAgICBvbkFwcGVhclByZXBhcmUgPSBfcmVmLm9uQXBwZWFyUHJlcGFyZSxcbiAgICBvbkVudGVyUHJlcGFyZSA9IF9yZWYub25FbnRlclByZXBhcmUsXG4gICAgb25MZWF2ZVByZXBhcmUgPSBfcmVmLm9uTGVhdmVQcmVwYXJlLFxuICAgIG9uQXBwZWFyU3RhcnQgPSBfcmVmLm9uQXBwZWFyU3RhcnQsXG4gICAgb25FbnRlclN0YXJ0ID0gX3JlZi5vbkVudGVyU3RhcnQsXG4gICAgb25MZWF2ZVN0YXJ0ID0gX3JlZi5vbkxlYXZlU3RhcnQsXG4gICAgb25BcHBlYXJBY3RpdmUgPSBfcmVmLm9uQXBwZWFyQWN0aXZlLFxuICAgIG9uRW50ZXJBY3RpdmUgPSBfcmVmLm9uRW50ZXJBY3RpdmUsXG4gICAgb25MZWF2ZUFjdGl2ZSA9IF9yZWYub25MZWF2ZUFjdGl2ZSxcbiAgICBvbkFwcGVhckVuZCA9IF9yZWYub25BcHBlYXJFbmQsXG4gICAgb25FbnRlckVuZCA9IF9yZWYub25FbnRlckVuZCxcbiAgICBvbkxlYXZlRW5kID0gX3JlZi5vbkxlYXZlRW5kLFxuICAgIG9uVmlzaWJsZUNoYW5nZWQgPSBfcmVmLm9uVmlzaWJsZUNoYW5nZWQ7XG4gIC8vIFVzZWQgZm9yIG91dGVyIHJlbmRlciB1c2FnZSB0byBhdm9pZCBgdmlzaWJsZTogZmFsc2UgJiBzdGF0dXM6IG5vbmVgIHRvIHJlbmRlciBub3RoaW5nXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSgpLFxuICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgIGFzeW5jVmlzaWJsZSA9IF91c2VTdGF0ZTJbMF0sXG4gICAgc2V0QXN5bmNWaXNpYmxlID0gX3VzZVN0YXRlMlsxXTtcbiAgdmFyIF91c2VTdGF0ZTMgPSB1c2VTdGF0ZShTVEFUVVNfTk9ORSksXG4gICAgX3VzZVN0YXRlNCA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTMsIDIpLFxuICAgIHN0YXR1cyA9IF91c2VTdGF0ZTRbMF0sXG4gICAgc2V0U3RhdHVzID0gX3VzZVN0YXRlNFsxXTtcbiAgdmFyIF91c2VTdGF0ZTUgPSB1c2VTdGF0ZShudWxsKSxcbiAgICBfdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNSwgMiksXG4gICAgc3R5bGUgPSBfdXNlU3RhdGU2WzBdLFxuICAgIHNldFN0eWxlID0gX3VzZVN0YXRlNlsxXTtcbiAgdmFyIG1vdW50ZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB2YXIgZGVhZGxpbmVSZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09IERvbSBOb2RlID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBmdW5jdGlvbiBnZXREb21FbGVtZW50KCkge1xuICAgIHJldHVybiBnZXRFbGVtZW50KCk7XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PSBNb3Rpb24gRW5kID09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBhY3RpdmVSZWYgPSB1c2VSZWYoZmFsc2UpO1xuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCBzdGF0dXMgJiBzdHlsZVxuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlTW90aW9uRW5kU3RhdHVzKCkge1xuICAgIHNldFN0YXR1cyhTVEFUVVNfTk9ORSwgdHJ1ZSk7XG4gICAgc2V0U3R5bGUobnVsbCwgdHJ1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gb25JbnRlcm5hbE1vdGlvbkVuZChldmVudCkge1xuICAgIHZhciBlbGVtZW50ID0gZ2V0RG9tRWxlbWVudCgpO1xuICAgIGlmIChldmVudCAmJiAhZXZlbnQuZGVhZGxpbmUgJiYgZXZlbnQudGFyZ2V0ICE9PSBlbGVtZW50KSB7XG4gICAgICAvLyBldmVudCBleGlzdHNcbiAgICAgIC8vIG5vdCBpbml0aWF0ZWQgYnkgZGVhZGxpbmVcbiAgICAgIC8vIHRyYW5zaXRpb25FbmQgbm90IGZpcmVkIGJ5IGlubmVyIGVsZW1lbnRzXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBjdXJyZW50QWN0aXZlID0gYWN0aXZlUmVmLmN1cnJlbnQ7XG4gICAgdmFyIGNhbkVuZDtcbiAgICBpZiAoc3RhdHVzID09PSBTVEFUVVNfQVBQRUFSICYmIGN1cnJlbnRBY3RpdmUpIHtcbiAgICAgIGNhbkVuZCA9IG9uQXBwZWFyRW5kID09PSBudWxsIHx8IG9uQXBwZWFyRW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkFwcGVhckVuZChlbGVtZW50LCBldmVudCk7XG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFNUQVRVU19FTlRFUiAmJiBjdXJyZW50QWN0aXZlKSB7XG4gICAgICBjYW5FbmQgPSBvbkVudGVyRW5kID09PSBudWxsIHx8IG9uRW50ZXJFbmQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRW50ZXJFbmQoZWxlbWVudCwgZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBTVEFUVVNfTEVBVkUgJiYgY3VycmVudEFjdGl2ZSkge1xuICAgICAgY2FuRW5kID0gb25MZWF2ZUVuZCA9PT0gbnVsbCB8fCBvbkxlYXZlRW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkxlYXZlRW5kKGVsZW1lbnQsIGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBPbmx5IHVwZGF0ZSBzdGF0dXMgd2hlbiBgY2FuRW5kYCBhbmQgbm90IGRlc3Ryb3llZFxuICAgIGlmIChzdGF0dXMgIT09IFNUQVRVU19OT05FICYmIGN1cnJlbnRBY3RpdmUgJiYgY2FuRW5kICE9PSBmYWxzZSkge1xuICAgICAgdXBkYXRlTW90aW9uRW5kU3RhdHVzKCk7XG4gICAgfVxuICB9XG4gIHZhciBfdXNlRG9tTW90aW9uRXZlbnRzID0gdXNlRG9tTW90aW9uRXZlbnRzKG9uSW50ZXJuYWxNb3Rpb25FbmQpLFxuICAgIF91c2VEb21Nb3Rpb25FdmVudHMyID0gX3NsaWNlZFRvQXJyYXkoX3VzZURvbU1vdGlvbkV2ZW50cywgMSksXG4gICAgcGF0Y2hNb3Rpb25FdmVudHMgPSBfdXNlRG9tTW90aW9uRXZlbnRzMlswXTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBTdGVwID09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBnZXRFdmVudEhhbmRsZXJzID0gZnVuY3Rpb24gZ2V0RXZlbnRIYW5kbGVycyh0YXJnZXRTdGF0dXMpIHtcbiAgICB2YXIgX3JlZjIsIF9yZWYzLCBfcmVmNDtcbiAgICBzd2l0Y2ggKHRhcmdldFN0YXR1cykge1xuICAgICAgY2FzZSBTVEFUVVNfQVBQRUFSOlxuICAgICAgICByZXR1cm4gX3JlZjIgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYyLCBTVEVQX1BSRVBBUkUsIG9uQXBwZWFyUHJlcGFyZSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgU1RFUF9TVEFSVCwgb25BcHBlYXJTdGFydCksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgU1RFUF9BQ1RJVkUsIG9uQXBwZWFyQWN0aXZlKSwgX3JlZjI7XG4gICAgICBjYXNlIFNUQVRVU19FTlRFUjpcbiAgICAgICAgcmV0dXJuIF9yZWYzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgU1RFUF9QUkVQQVJFLCBvbkVudGVyUHJlcGFyZSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMywgU1RFUF9TVEFSVCwgb25FbnRlclN0YXJ0KSwgX2RlZmluZVByb3BlcnR5KF9yZWYzLCBTVEVQX0FDVElWRSwgb25FbnRlckFjdGl2ZSksIF9yZWYzO1xuICAgICAgY2FzZSBTVEFUVVNfTEVBVkU6XG4gICAgICAgIHJldHVybiBfcmVmNCA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZjQsIFNURVBfUFJFUEFSRSwgb25MZWF2ZVByZXBhcmUpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjQsIFNURVBfU1RBUlQsIG9uTGVhdmVTdGFydCksIF9kZWZpbmVQcm9wZXJ0eShfcmVmNCwgU1RFUF9BQ1RJVkUsIG9uTGVhdmVBY3RpdmUpLCBfcmVmNDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH07XG4gIHZhciBldmVudEhhbmRsZXJzID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEV2ZW50SGFuZGxlcnMoc3RhdHVzKTtcbiAgfSwgW3N0YXR1c10pO1xuICB2YXIgX3VzZVN0ZXBRdWV1ZSA9IHVzZVN0ZXBRdWV1ZShzdGF0dXMsICFzdXBwb3J0TW90aW9uLCBmdW5jdGlvbiAobmV3U3RlcCkge1xuICAgICAgLy8gT25seSBwcmVwYXJlIHN0ZXAgY2FuIGJlIHNraXBcbiAgICAgIGlmIChuZXdTdGVwID09PSBTVEVQX1BSRVBBUkUpIHtcbiAgICAgICAgdmFyIG9uUHJlcGFyZSA9IGV2ZW50SGFuZGxlcnNbU1RFUF9QUkVQQVJFXTtcbiAgICAgICAgaWYgKCFvblByZXBhcmUpIHtcbiAgICAgICAgICByZXR1cm4gU2tpcFN0ZXA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9uUHJlcGFyZShnZXREb21FbGVtZW50KCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXN0IHN0ZXAgaXMgc3luYyB1cGRhdGVcbiAgICAgIGlmIChzdGVwIGluIGV2ZW50SGFuZGxlcnMpIHtcbiAgICAgICAgdmFyIF9ldmVudEhhbmRsZXJzJHN0ZXA7XG4gICAgICAgIHNldFN0eWxlKCgoX2V2ZW50SGFuZGxlcnMkc3RlcCA9IGV2ZW50SGFuZGxlcnNbc3RlcF0pID09PSBudWxsIHx8IF9ldmVudEhhbmRsZXJzJHN0ZXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ldmVudEhhbmRsZXJzJHN0ZXAuY2FsbChldmVudEhhbmRsZXJzLCBnZXREb21FbGVtZW50KCksIG51bGwpKSB8fCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGVwID09PSBTVEVQX0FDVElWRSkge1xuICAgICAgICAvLyBQYXRjaCBldmVudHMgd2hlbiBtb3Rpb24gbmVlZGVkXG4gICAgICAgIHBhdGNoTW90aW9uRXZlbnRzKGdldERvbUVsZW1lbnQoKSk7XG4gICAgICAgIGlmIChtb3Rpb25EZWFkbGluZSA+IDApIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoZGVhZGxpbmVSZWYuY3VycmVudCk7XG4gICAgICAgICAgZGVhZGxpbmVSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb25JbnRlcm5hbE1vdGlvbkVuZCh7XG4gICAgICAgICAgICAgIGRlYWRsaW5lOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBtb3Rpb25EZWFkbGluZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdGVwID09PSBTVEVQX1BSRVBBUkVEKSB7XG4gICAgICAgIHVwZGF0ZU1vdGlvbkVuZFN0YXR1cygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIERvU3RlcDtcbiAgICB9KSxcbiAgICBfdXNlU3RlcFF1ZXVlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGVwUXVldWUsIDIpLFxuICAgIHN0YXJ0U3RlcCA9IF91c2VTdGVwUXVldWUyWzBdLFxuICAgIHN0ZXAgPSBfdXNlU3RlcFF1ZXVlMlsxXTtcbiAgdmFyIGFjdGl2ZSA9IGlzQWN0aXZlKHN0ZXApO1xuICBhY3RpdmVSZWYuY3VycmVudCA9IGFjdGl2ZTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09IFN0YXR1cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFVwZGF0ZSB3aXRoIG5ldyBzdGF0dXNcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0QXN5bmNWaXNpYmxlKHZpc2libGUpO1xuICAgIHZhciBpc01vdW50ZWQgPSBtb3VudGVkUmVmLmN1cnJlbnQ7XG4gICAgbW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcblxuICAgIC8vIGlmICghc3VwcG9ydE1vdGlvbikge1xuICAgIC8vICAgcmV0dXJuO1xuICAgIC8vIH1cblxuICAgIHZhciBuZXh0U3RhdHVzO1xuXG4gICAgLy8gQXBwZWFyXG4gICAgaWYgKCFpc01vdW50ZWQgJiYgdmlzaWJsZSAmJiBtb3Rpb25BcHBlYXIpIHtcbiAgICAgIG5leHRTdGF0dXMgPSBTVEFUVVNfQVBQRUFSO1xuICAgIH1cblxuICAgIC8vIEVudGVyXG4gICAgaWYgKGlzTW91bnRlZCAmJiB2aXNpYmxlICYmIG1vdGlvbkVudGVyKSB7XG4gICAgICBuZXh0U3RhdHVzID0gU1RBVFVTX0VOVEVSO1xuICAgIH1cblxuICAgIC8vIExlYXZlXG4gICAgaWYgKGlzTW91bnRlZCAmJiAhdmlzaWJsZSAmJiBtb3Rpb25MZWF2ZSB8fCAhaXNNb3VudGVkICYmIG1vdGlvbkxlYXZlSW1tZWRpYXRlbHkgJiYgIXZpc2libGUgJiYgbW90aW9uTGVhdmUpIHtcbiAgICAgIG5leHRTdGF0dXMgPSBTVEFUVVNfTEVBVkU7XG4gICAgfVxuICAgIHZhciBuZXh0RXZlbnRIYW5kbGVycyA9IGdldEV2ZW50SGFuZGxlcnMobmV4dFN0YXR1cyk7XG5cbiAgICAvLyBVcGRhdGUgdG8gbmV4dCBzdGF0dXNcbiAgICBpZiAobmV4dFN0YXR1cyAmJiAoc3VwcG9ydE1vdGlvbiB8fCBuZXh0RXZlbnRIYW5kbGVyc1tTVEVQX1BSRVBBUkVdKSkge1xuICAgICAgc2V0U3RhdHVzKG5leHRTdGF0dXMpO1xuICAgICAgc3RhcnRTdGVwKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNldCBiYWNrIGluIGNhc2Ugbm8gbW90aW9uIGJ1dCBwcmV2IHN0YXR1cyBoYXMgcHJlcGFyZSBzdGVwXG4gICAgICBzZXRTdGF0dXMoU1RBVFVTX05PTkUpO1xuICAgIH1cbiAgfSwgW3Zpc2libGVdKTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09IEVmZmVjdCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFJlc2V0IHdoZW4gbW90aW9uIGNoYW5nZWRcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoXG4gICAgLy8gQ2FuY2VsIGFwcGVhclxuICAgIHN0YXR1cyA9PT0gU1RBVFVTX0FQUEVBUiAmJiAhbW90aW9uQXBwZWFyIHx8XG4gICAgLy8gQ2FuY2VsIGVudGVyXG4gICAgc3RhdHVzID09PSBTVEFUVVNfRU5URVIgJiYgIW1vdGlvbkVudGVyIHx8XG4gICAgLy8gQ2FuY2VsIGxlYXZlXG4gICAgc3RhdHVzID09PSBTVEFUVVNfTEVBVkUgJiYgIW1vdGlvbkxlYXZlKSB7XG4gICAgICBzZXRTdGF0dXMoU1RBVFVTX05PTkUpO1xuICAgIH1cbiAgfSwgW21vdGlvbkFwcGVhciwgbW90aW9uRW50ZXIsIG1vdGlvbkxlYXZlXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgY2xlYXJUaW1lb3V0KGRlYWRsaW5lUmVmLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICAvLyBUcmlnZ2VyIGBvblZpc2libGVDaGFuZ2VkYFxuICB2YXIgZmlyc3RNb3VudENoYW5nZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgLy8gW3Zpc2libGUgJiBtb3Rpb24gbm90IGVuZF0gPT4gWyF2aXNpYmxlICYgbW90aW9uIGVuZF0gc3RpbGwgbmVlZCB0cmlnZ2VyIG9uVmlzaWJsZUNoYW5nZWRcbiAgICBpZiAoYXN5bmNWaXNpYmxlKSB7XG4gICAgICBmaXJzdE1vdW50Q2hhbmdlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoYXN5bmNWaXNpYmxlICE9PSB1bmRlZmluZWQgJiYgc3RhdHVzID09PSBTVEFUVVNfTk9ORSkge1xuICAgICAgLy8gU2tpcCBmaXJzdCByZW5kZXIgaXMgaW52aXNpYmxlIHNpbmNlIGl0J3Mgbm90aGluZyBjaGFuZ2VkXG4gICAgICBpZiAoZmlyc3RNb3VudENoYW5nZVJlZi5jdXJyZW50IHx8IGFzeW5jVmlzaWJsZSkge1xuICAgICAgICBvblZpc2libGVDaGFuZ2VkID09PSBudWxsIHx8IG9uVmlzaWJsZUNoYW5nZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVmlzaWJsZUNoYW5nZWQoYXN5bmNWaXNpYmxlKTtcbiAgICAgIH1cbiAgICAgIGZpcnN0TW91bnRDaGFuZ2VSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfVxuICB9LCBbYXN5bmNWaXNpYmxlLCBzdGF0dXNdKTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09IFN0eWxlcyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBtZXJnZWRTdHlsZSA9IHN0eWxlO1xuICBpZiAoZXZlbnRIYW5kbGVyc1tTVEVQX1BSRVBBUkVdICYmIHN0ZXAgPT09IFNURVBfU1RBUlQpIHtcbiAgICBtZXJnZWRTdHlsZSA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgdHJhbnNpdGlvbjogJ25vbmUnXG4gICAgfSwgbWVyZ2VkU3R5bGUpO1xuICB9XG4gIHJldHVybiBbc3RhdHVzLCBzdGVwLCBtZXJnZWRTdHlsZSwgYXN5bmNWaXNpYmxlICE9PSBudWxsICYmIGFzeW5jVmlzaWJsZSAhPT0gdm9pZCAwID8gYXN5bmNWaXNpYmxlIDogdmlzaWJsZV07XG59IiwiaW1wb3J0IHJhZiBmcm9tIFwicmMtdXRpbC9lcy9yYWZcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoKSB7XG4gIHZhciBuZXh0RnJhbWVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGZ1bmN0aW9uIGNhbmNlbE5leHRGcmFtZSgpIHtcbiAgICByYWYuY2FuY2VsKG5leHRGcmFtZVJlZi5jdXJyZW50KTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0RnJhbWUoY2FsbGJhY2spIHtcbiAgICB2YXIgZGVsYXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDI7XG4gICAgY2FuY2VsTmV4dEZyYW1lKCk7XG4gICAgdmFyIG5leHRGcmFtZUlkID0gcmFmKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChkZWxheSA8PSAxKSB7XG4gICAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgICBpc0NhbmNlbGVkOiBmdW5jdGlvbiBpc0NhbmNlbGVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRGcmFtZUlkICE9PSBuZXh0RnJhbWVSZWYuY3VycmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEZyYW1lKGNhbGxiYWNrLCBkZWxheSAtIDEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5leHRGcmFtZVJlZi5jdXJyZW50ID0gbmV4dEZyYW1lSWQ7XG4gIH1cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2FuY2VsTmV4dEZyYW1lKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gW25leHRGcmFtZSwgY2FuY2VsTmV4dEZyYW1lXTtcbn0pOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmV4cG9ydCBmdW5jdGlvbiBpc0RPTShub2RlKSB7XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50XG4gIC8vIFNpbmNlIFhVTEVsZW1lbnQgaXMgYWxzbyBzdWJjbGFzcyBvZiBFbGVtZW50LCB3ZSBvbmx5IG5lZWQgSFRNTEVsZW1lbnQgYW5kIFNWR0VsZW1lbnRcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgU1ZHRWxlbWVudDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gaWYgYSBub2RlIGlzIGEgRE9NIG5vZGUuIEVsc2Ugd2lsbCByZXR1cm4gYnkgYGZpbmRET01Ob2RlYFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kRE9NTm9kZShub2RlKSB7XG4gIGlmIChpc0RPTShub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGlmIChub2RlIGluc3RhbmNlb2YgUmVhY3QuQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKG5vZGUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5cbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCwgaXNNZW1vIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IHVzZU1lbW8gZnJvbSBcIi4vaG9va3MvdXNlTWVtb1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbGxSZWYocmVmLCBub2RlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKG5vZGUpO1xuICB9IGVsc2UgaWYgKF90eXBlb2YocmVmKSA9PT0gJ29iamVjdCcgJiYgcmVmICYmICdjdXJyZW50JyBpbiByZWYpIHtcbiAgICByZWYuY3VycmVudCA9IG5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSByZWZzIGludG8gb25lIHJlZiBmdW5jdGlvbiB0byBzdXBwb3J0IHJlZiBwYXNzaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcG9zZVJlZigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlZnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcmVmc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICB2YXIgcmVmTGlzdCA9IHJlZnMuZmlsdGVyKGZ1bmN0aW9uIChyZWYpIHtcbiAgICByZXR1cm4gcmVmO1xuICB9KTtcbiAgaWYgKHJlZkxpc3QubGVuZ3RoIDw9IDEpIHtcbiAgICByZXR1cm4gcmVmTGlzdFswXTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZWZzLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgICAgZmlsbFJlZihyZWYsIG5vZGUpO1xuICAgIH0pO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbXBvc2VSZWYoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgcmVmcyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIHJlZnNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuICByZXR1cm4gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvbXBvc2VSZWYuYXBwbHkodm9pZCAwLCByZWZzKTtcbiAgfSwgcmVmcywgZnVuY3Rpb24gKHByZXYsIG5leHQpIHtcbiAgICByZXR1cm4gcHJldi5sZW5ndGggIT09IG5leHQubGVuZ3RoIHx8IHByZXYuZXZlcnkoZnVuY3Rpb24gKHJlZiwgaSkge1xuICAgICAgcmV0dXJuIHJlZiAhPT0gbmV4dFtpXTtcbiAgICB9KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydFJlZihub2RlT3JDb21wb25lbnQpIHtcbiAgdmFyIF90eXBlJHByb3RvdHlwZSwgX25vZGVPckNvbXBvbmVudCRwcm90O1xuICB2YXIgdHlwZSA9IGlzTWVtbyhub2RlT3JDb21wb25lbnQpID8gbm9kZU9yQ29tcG9uZW50LnR5cGUudHlwZSA6IG5vZGVPckNvbXBvbmVudC50eXBlO1xuXG4gIC8vIEZ1bmN0aW9uIGNvbXBvbmVudCBub2RlXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhKChfdHlwZSRwcm90b3R5cGUgPSB0eXBlLnByb3RvdHlwZSkgIT09IG51bGwgJiYgX3R5cGUkcHJvdG90eXBlICE9PSB2b2lkIDAgJiYgX3R5cGUkcHJvdG90eXBlLnJlbmRlcikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBDbGFzcyBjb21wb25lbnRcbiAgaWYgKHR5cGVvZiBub2RlT3JDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiYgISgoX25vZGVPckNvbXBvbmVudCRwcm90ID0gbm9kZU9yQ29tcG9uZW50LnByb3RvdHlwZSkgIT09IG51bGwgJiYgX25vZGVPckNvbXBvbmVudCRwcm90ICE9PSB2b2lkIDAgJiYgX25vZGVPckNvbXBvbmVudCRwcm90LnJlbmRlcikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydE5vZGVSZWYobm9kZSkge1xuICBpZiAoISAvKiNfX1BVUkVfXyovaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGlzRnJhZ21lbnQobm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHN1cHBvcnRSZWYobm9kZSk7XG59XG4vKiBlc2xpbnQtZW5hYmxlICovIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmV4cG9ydCB2YXIgU1RBVFVTX0FERCA9ICdhZGQnO1xuZXhwb3J0IHZhciBTVEFUVVNfS0VFUCA9ICdrZWVwJztcbmV4cG9ydCB2YXIgU1RBVFVTX1JFTU9WRSA9ICdyZW1vdmUnO1xuZXhwb3J0IHZhciBTVEFUVVNfUkVNT1ZFRCA9ICdyZW1vdmVkJztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwS2V5VG9PYmplY3Qoa2V5KSB7XG4gIHZhciBrZXlPYmo7XG4gIGlmIChrZXkgJiYgX3R5cGVvZihrZXkpID09PSAnb2JqZWN0JyAmJiAna2V5JyBpbiBrZXkpIHtcbiAgICBrZXlPYmogPSBrZXk7XG4gIH0gZWxzZSB7XG4gICAga2V5T2JqID0ge1xuICAgICAga2V5OiBrZXlcbiAgICB9O1xuICB9XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGtleU9iaiksIHt9LCB7XG4gICAga2V5OiBTdHJpbmcoa2V5T2JqLmtleSlcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VLZXlzKCkge1xuICB2YXIga2V5cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG4gIHJldHVybiBrZXlzLm1hcCh3cmFwS2V5VG9PYmplY3QpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZLZXlzKCkge1xuICB2YXIgcHJldktleXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICB2YXIgY3VycmVudEtleXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuICB2YXIgbGlzdCA9IFtdO1xuICB2YXIgY3VycmVudEluZGV4ID0gMDtcbiAgdmFyIGN1cnJlbnRMZW4gPSBjdXJyZW50S2V5cy5sZW5ndGg7XG4gIHZhciBwcmV2S2V5T2JqZWN0cyA9IHBhcnNlS2V5cyhwcmV2S2V5cyk7XG4gIHZhciBjdXJyZW50S2V5T2JqZWN0cyA9IHBhcnNlS2V5cyhjdXJyZW50S2V5cyk7XG5cbiAgLy8gQ2hlY2sgcHJldiBrZXlzIHRvIGluc2VydCBvciBrZWVwXG4gIHByZXZLZXlPYmplY3RzLmZvckVhY2goZnVuY3Rpb24gKGtleU9iaikge1xuICAgIHZhciBoaXQgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gY3VycmVudEluZGV4OyBpIDwgY3VycmVudExlbjsgaSArPSAxKSB7XG4gICAgICB2YXIgY3VycmVudEtleU9iaiA9IGN1cnJlbnRLZXlPYmplY3RzW2ldO1xuICAgICAgaWYgKGN1cnJlbnRLZXlPYmoua2V5ID09PSBrZXlPYmoua2V5KSB7XG4gICAgICAgIC8vIE5ldyBhZGRlZCBrZXlzIHNob3VsZCBhZGQgYmVmb3JlIGN1cnJlbnQga2V5XG4gICAgICAgIGlmIChjdXJyZW50SW5kZXggPCBpKSB7XG4gICAgICAgICAgbGlzdCA9IGxpc3QuY29uY2F0KGN1cnJlbnRLZXlPYmplY3RzLnNsaWNlKGN1cnJlbnRJbmRleCwgaSkubWFwKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9iaiksIHt9LCB7XG4gICAgICAgICAgICAgIHN0YXR1czogU1RBVFVTX0FERFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdC5wdXNoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY3VycmVudEtleU9iaiksIHt9LCB7XG4gICAgICAgICAgc3RhdHVzOiBTVEFUVVNfS0VFUFxuICAgICAgICB9KSk7XG4gICAgICAgIGN1cnJlbnRJbmRleCArPSAxO1xuICAgICAgICBoaXQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBub3QgaGl0LCBpdCBtZWFucyBrZXkgaXMgcmVtb3ZlZFxuICAgIGlmICghaGl0KSB7XG4gICAgICBsaXN0LnB1c2goX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBrZXlPYmopLCB7fSwge1xuICAgICAgICBzdGF0dXM6IFNUQVRVU19SRU1PVkVcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEFkZCByZXN0IHRvIHRoZSBsaXN0XG4gIGlmIChjdXJyZW50SW5kZXggPCBjdXJyZW50TGVuKSB7XG4gICAgbGlzdCA9IGxpc3QuY29uY2F0KGN1cnJlbnRLZXlPYmplY3RzLnNsaWNlKGN1cnJlbnRJbmRleCkubWFwKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9iaiksIHt9LCB7XG4gICAgICAgIHN0YXR1czogU1RBVFVTX0FERFxuICAgICAgfSk7XG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIHNhbWUga2V5IHdoZW4gaXQgcmVtb3ZlIGFuZCBhZGQgYWdhaW46XG4gICAqICAgIFsxIC0gYWRkLCAyIC0ga2VlcCwgMSAtIHJlbW92ZV0gLT4gWzEgLSBrZWVwLCAyIC0ga2VlcF1cbiAgICovXG4gIHZhciBrZXlzID0ge307XG4gIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBrZXkgPSBfcmVmLmtleTtcbiAgICBrZXlzW2tleV0gPSAoa2V5c1trZXldIHx8IDApICsgMTtcbiAgfSk7XG4gIHZhciBkdXBsaWNhdGVkS2V5cyA9IE9iamVjdC5rZXlzKGtleXMpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleXNba2V5XSA+IDE7XG4gIH0pO1xuICBkdXBsaWNhdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChtYXRjaEtleSkge1xuICAgIC8vIFJlbW92ZSBgU1RBVFVTX1JFTU9WRWAgbm9kZS5cbiAgICBsaXN0ID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIga2V5ID0gX3JlZjIua2V5LFxuICAgICAgICBzdGF0dXMgPSBfcmVmMi5zdGF0dXM7XG4gICAgICByZXR1cm4ga2V5ICE9PSBtYXRjaEtleSB8fCBzdGF0dXMgIT09IFNUQVRVU19SRU1PVkU7XG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgYFNUQVRVU19BRERgIHRvIGBTVEFUVVNfS0VFUGBcbiAgICBsaXN0LmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmtleSA9PT0gbWF0Y2hLZXkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIG5vZGUuc3RhdHVzID0gU1RBVFVTX0tFRVA7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbGlzdDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG52YXIgX2V4Y2x1ZGVkID0gW1wiY29tcG9uZW50XCIsIFwiY2hpbGRyZW5cIiwgXCJvblZpc2libGVDaGFuZ2VkXCIsIFwib25BbGxSZW1vdmVkXCJdLFxuICBfZXhjbHVkZWQyID0gW1wic3RhdHVzXCJdO1xuLyogZXNsaW50IHJlYWN0L3Byb3AtdHlwZXM6IDAgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBPcmlnaW5DU1NNb3Rpb24gZnJvbSBcIi4vQ1NTTW90aW9uXCI7XG5pbXBvcnQgeyBkaWZmS2V5cywgcGFyc2VLZXlzLCBTVEFUVVNfQURELCBTVEFUVVNfS0VFUCwgU1RBVFVTX1JFTU9WRSwgU1RBVFVTX1JFTU9WRUQgfSBmcm9tIFwiLi91dGlsL2RpZmZcIjtcbmltcG9ydCB7IHN1cHBvcnRUcmFuc2l0aW9uIH0gZnJvbSBcIi4vdXRpbC9tb3Rpb25cIjtcbnZhciBNT1RJT05fUFJPUF9OQU1FUyA9IFsnZXZlbnRQcm9wcycsICd2aXNpYmxlJywgJ2NoaWxkcmVuJywgJ21vdGlvbk5hbWUnLCAnbW90aW9uQXBwZWFyJywgJ21vdGlvbkVudGVyJywgJ21vdGlvbkxlYXZlJywgJ21vdGlvbkxlYXZlSW1tZWRpYXRlbHknLCAnbW90aW9uRGVhZGxpbmUnLCAncmVtb3ZlT25MZWF2ZScsICdsZWF2ZWRDbGFzc05hbWUnLCAnb25BcHBlYXJQcmVwYXJlJywgJ29uQXBwZWFyU3RhcnQnLCAnb25BcHBlYXJBY3RpdmUnLCAnb25BcHBlYXJFbmQnLCAnb25FbnRlclN0YXJ0JywgJ29uRW50ZXJBY3RpdmUnLCAnb25FbnRlckVuZCcsICdvbkxlYXZlU3RhcnQnLCAnb25MZWF2ZUFjdGl2ZScsICdvbkxlYXZlRW5kJ107XG4vKipcbiAqIEdlbmVyYXRlIGEgQ1NTTW90aW9uTGlzdCBjb21wb25lbnQgd2l0aCBjb25maWdcbiAqIEBwYXJhbSB0cmFuc2l0aW9uU3VwcG9ydCBObyBuZWVkIHNpbmNlIENTU01vdGlvbkxpc3Qgbm8gbG9uZ2VyIGRlcGVuZHMgb24gdHJhbnNpdGlvbiBzdXBwb3J0XG4gKiBAcGFyYW0gQ1NTTW90aW9uIENTU01vdGlvbiBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbkNTU01vdGlvbkxpc3QodHJhbnNpdGlvblN1cHBvcnQpIHtcbiAgdmFyIENTU01vdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogT3JpZ2luQ1NTTW90aW9uO1xuICB2YXIgQ1NTTW90aW9uTGlzdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhDU1NNb3Rpb25MaXN0LCBfUmVhY3QkQ29tcG9uZW50KTtcbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENTU01vdGlvbkxpc3QpO1xuICAgIGZ1bmN0aW9uIENTU01vdGlvbkxpc3QoKSB7XG4gICAgICB2YXIgX3RoaXM7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ1NTTW90aW9uTGlzdCk7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICAgIGtleUVudGl0aWVzOiBbXVxuICAgICAgfSk7XG4gICAgICAvLyBab21iaWVKOiBSZXR1cm4gdGhlIGNvdW50IG9mIHJlc3Qga2V5cy4gSXQncyBzYWZlIHRvIHJlZmFjdG9yIGlmIG5lZWQgbW9yZSBpbmZvLlxuICAgICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbW92ZUtleVwiLCBmdW5jdGlvbiAocmVtb3ZlS2V5KSB7XG4gICAgICAgIHZhciBrZXlFbnRpdGllcyA9IF90aGlzLnN0YXRlLmtleUVudGl0aWVzO1xuICAgICAgICB2YXIgbmV4dEtleUVudGl0aWVzID0ga2V5RW50aXRpZXMubWFwKGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgICAgICBpZiAoZW50aXR5LmtleSAhPT0gcmVtb3ZlS2V5KSByZXR1cm4gZW50aXR5O1xuICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGVudGl0eSksIHt9LCB7XG4gICAgICAgICAgICBzdGF0dXM6IFNUQVRVU19SRU1PVkVEXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAga2V5RW50aXRpZXM6IG5leHRLZXlFbnRpdGllc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5leHRLZXlFbnRpdGllcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICB2YXIgc3RhdHVzID0gX3JlZi5zdGF0dXM7XG4gICAgICAgICAgcmV0dXJuIHN0YXR1cyAhPT0gU1RBVFVTX1JFTU9WRUQ7XG4gICAgICAgIH0pLmxlbmd0aDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBfY3JlYXRlQ2xhc3MoQ1NTTW90aW9uTGlzdCwgW3tcbiAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgICB2YXIga2V5RW50aXRpZXMgPSB0aGlzLnN0YXRlLmtleUVudGl0aWVzO1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIF9vblZpc2libGVDaGFuZ2VkID0gX3RoaXMkcHJvcHMub25WaXNpYmxlQ2hhbmdlZCxcbiAgICAgICAgICBvbkFsbFJlbW92ZWQgPSBfdGhpcyRwcm9wcy5vbkFsbFJlbW92ZWQsXG4gICAgICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzLCBfZXhjbHVkZWQpO1xuICAgICAgICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50IHx8IFJlYWN0LkZyYWdtZW50O1xuICAgICAgICB2YXIgbW90aW9uUHJvcHMgPSB7fTtcbiAgICAgICAgTU9USU9OX1BST1BfTkFNRVMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgIG1vdGlvblByb3BzW3Byb3BdID0gcmVzdFByb3BzW3Byb3BdO1xuICAgICAgICAgIGRlbGV0ZSByZXN0UHJvcHNbcHJvcF07XG4gICAgICAgIH0pO1xuICAgICAgICBkZWxldGUgcmVzdFByb3BzLmtleXM7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHJlc3RQcm9wcywga2V5RW50aXRpZXMubWFwKGZ1bmN0aW9uIChfcmVmMiwgaW5kZXgpIHtcbiAgICAgICAgICB2YXIgc3RhdHVzID0gX3JlZjIuc3RhdHVzLFxuICAgICAgICAgICAgZXZlbnRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgX2V4Y2x1ZGVkMik7XG4gICAgICAgICAgdmFyIHZpc2libGUgPSBzdGF0dXMgPT09IFNUQVRVU19BREQgfHwgc3RhdHVzID09PSBTVEFUVVNfS0VFUDtcbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ1NTTW90aW9uLCBfZXh0ZW5kcyh7fSwgbW90aW9uUHJvcHMsIHtcbiAgICAgICAgICAgIGtleTogZXZlbnRQcm9wcy5rZXksXG4gICAgICAgICAgICB2aXNpYmxlOiB2aXNpYmxlLFxuICAgICAgICAgICAgZXZlbnRQcm9wczogZXZlbnRQcm9wcyxcbiAgICAgICAgICAgIG9uVmlzaWJsZUNoYW5nZWQ6IGZ1bmN0aW9uIG9uVmlzaWJsZUNoYW5nZWQoY2hhbmdlZFZpc2libGUpIHtcbiAgICAgICAgICAgICAgX29uVmlzaWJsZUNoYW5nZWQgPT09IG51bGwgfHwgX29uVmlzaWJsZUNoYW5nZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vblZpc2libGVDaGFuZ2VkKGNoYW5nZWRWaXNpYmxlLCB7XG4gICAgICAgICAgICAgICAga2V5OiBldmVudFByb3BzLmtleVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKCFjaGFuZ2VkVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXN0S2V5c0NvdW50ID0gX3RoaXMyLnJlbW92ZUtleShldmVudFByb3BzLmtleSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3RLZXlzQ291bnQgPT09IDAgJiYgb25BbGxSZW1vdmVkKSB7XG4gICAgICAgICAgICAgICAgICBvbkFsbFJlbW92ZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSwgZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByb3BzKSwge30sIHtcbiAgICAgICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgICAgICB9KSwgcmVmKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmMywgX3JlZjQpIHtcbiAgICAgICAgdmFyIGtleXMgPSBfcmVmMy5rZXlzO1xuICAgICAgICB2YXIga2V5RW50aXRpZXMgPSBfcmVmNC5rZXlFbnRpdGllcztcbiAgICAgICAgdmFyIHBhcnNlZEtleU9iamVjdHMgPSBwYXJzZUtleXMoa2V5cyk7XG4gICAgICAgIHZhciBtaXhlZEtleUVudGl0aWVzID0gZGlmZktleXMoa2V5RW50aXRpZXMsIHBhcnNlZEtleU9iamVjdHMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleUVudGl0aWVzOiBtaXhlZEtleUVudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICAgICAgICB2YXIgcHJldkVudGl0eSA9IGtleUVudGl0aWVzLmZpbmQoZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICAgICAgICAgIHZhciBrZXkgPSBfcmVmNS5rZXk7XG4gICAgICAgICAgICAgIHJldHVybiBlbnRpdHkua2V5ID09PSBrZXk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGlmIGFscmVhZHkgbWFyayBhcyByZW1vdmVkXG4gICAgICAgICAgICBpZiAocHJldkVudGl0eSAmJiBwcmV2RW50aXR5LnN0YXR1cyA9PT0gU1RBVFVTX1JFTU9WRUQgJiYgZW50aXR5LnN0YXR1cyA9PT0gU1RBVFVTX1JFTU9WRSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gQ1NTTW90aW9uTGlzdDtcbiAgfShSZWFjdC5Db21wb25lbnQpO1xuICBfZGVmaW5lUHJvcGVydHkoQ1NTTW90aW9uTGlzdCwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICAgIGNvbXBvbmVudDogJ2RpdidcbiAgfSk7XG4gIHJldHVybiBDU1NNb3Rpb25MaXN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZ2VuQ1NTTW90aW9uTGlzdChzdXBwb3J0VHJhbnNpdGlvbik7IiwiaW1wb3J0IENTU01vdGlvbiBmcm9tIFwiLi9DU1NNb3Rpb25cIjtcbmltcG9ydCBDU1NNb3Rpb25MaXN0IGZyb20gXCIuL0NTU01vdGlvbkxpc3RcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUHJvdmlkZXIgfSBmcm9tIFwiLi9jb250ZXh0XCI7XG5leHBvcnQgeyBDU1NNb3Rpb25MaXN0IH07XG5leHBvcnQgZGVmYXVsdCBDU1NNb3Rpb247IiwiLyoqXG4gKiBAaWdub3JlXG4gKiBzb21lIGtleS1jb2RlcyBkZWZpbml0aW9uIGFuZCB1dGlscyBmcm9tIGNsb3N1cmUtbGlicmFyeVxuICogQGF1dGhvciB5aW1pbmdoZUBnbWFpbC5jb21cbiAqL1xuXG52YXIgS2V5Q29kZSA9IHtcbiAgLyoqXG4gICAqIE1BQ19FTlRFUlxuICAgKi9cbiAgTUFDX0VOVEVSOiAzLFxuICAvKipcbiAgICogQkFDS1NQQUNFXG4gICAqL1xuICBCQUNLU1BBQ0U6IDgsXG4gIC8qKlxuICAgKiBUQUJcbiAgICovXG4gIFRBQjogOSxcbiAgLyoqXG4gICAqIE5VTUxPQ0sgb24gRkYvU2FmYXJpIE1hY1xuICAgKi9cbiAgTlVNX0NFTlRFUjogMTIsXG4gIC8vIE5VTUxPQ0sgb24gRkYvU2FmYXJpIE1hY1xuICAvKipcbiAgICogRU5URVJcbiAgICovXG4gIEVOVEVSOiAxMyxcbiAgLyoqXG4gICAqIFNISUZUXG4gICAqL1xuICBTSElGVDogMTYsXG4gIC8qKlxuICAgKiBDVFJMXG4gICAqL1xuICBDVFJMOiAxNyxcbiAgLyoqXG4gICAqIEFMVFxuICAgKi9cbiAgQUxUOiAxOCxcbiAgLyoqXG4gICAqIFBBVVNFXG4gICAqL1xuICBQQVVTRTogMTksXG4gIC8qKlxuICAgKiBDQVBTX0xPQ0tcbiAgICovXG4gIENBUFNfTE9DSzogMjAsXG4gIC8qKlxuICAgKiBFU0NcbiAgICovXG4gIEVTQzogMjcsXG4gIC8qKlxuICAgKiBTUEFDRVxuICAgKi9cbiAgU1BBQ0U6IDMyLFxuICAvKipcbiAgICogUEFHRV9VUFxuICAgKi9cbiAgUEFHRV9VUDogMzMsXG4gIC8vIGFsc28gTlVNX05PUlRIX0VBU1RcbiAgLyoqXG4gICAqIFBBR0VfRE9XTlxuICAgKi9cbiAgUEFHRV9ET1dOOiAzNCxcbiAgLy8gYWxzbyBOVU1fU09VVEhfRUFTVFxuICAvKipcbiAgICogRU5EXG4gICAqL1xuICBFTkQ6IDM1LFxuICAvLyBhbHNvIE5VTV9TT1VUSF9XRVNUXG4gIC8qKlxuICAgKiBIT01FXG4gICAqL1xuICBIT01FOiAzNixcbiAgLy8gYWxzbyBOVU1fTk9SVEhfV0VTVFxuICAvKipcbiAgICogTEVGVFxuICAgKi9cbiAgTEVGVDogMzcsXG4gIC8vIGFsc28gTlVNX1dFU1RcbiAgLyoqXG4gICAqIFVQXG4gICAqL1xuICBVUDogMzgsXG4gIC8vIGFsc28gTlVNX05PUlRIXG4gIC8qKlxuICAgKiBSSUdIVFxuICAgKi9cbiAgUklHSFQ6IDM5LFxuICAvLyBhbHNvIE5VTV9FQVNUXG4gIC8qKlxuICAgKiBET1dOXG4gICAqL1xuICBET1dOOiA0MCxcbiAgLy8gYWxzbyBOVU1fU09VVEhcbiAgLyoqXG4gICAqIFBSSU5UX1NDUkVFTlxuICAgKi9cbiAgUFJJTlRfU0NSRUVOOiA0NCxcbiAgLyoqXG4gICAqIElOU0VSVFxuICAgKi9cbiAgSU5TRVJUOiA0NSxcbiAgLy8gYWxzbyBOVU1fSU5TRVJUXG4gIC8qKlxuICAgKiBERUxFVEVcbiAgICovXG4gIERFTEVURTogNDYsXG4gIC8vIGFsc28gTlVNX0RFTEVURVxuICAvKipcbiAgICogWkVST1xuICAgKi9cbiAgWkVSTzogNDgsXG4gIC8qKlxuICAgKiBPTkVcbiAgICovXG4gIE9ORTogNDksXG4gIC8qKlxuICAgKiBUV09cbiAgICovXG4gIFRXTzogNTAsXG4gIC8qKlxuICAgKiBUSFJFRVxuICAgKi9cbiAgVEhSRUU6IDUxLFxuICAvKipcbiAgICogRk9VUlxuICAgKi9cbiAgRk9VUjogNTIsXG4gIC8qKlxuICAgKiBGSVZFXG4gICAqL1xuICBGSVZFOiA1MyxcbiAgLyoqXG4gICAqIFNJWFxuICAgKi9cbiAgU0lYOiA1NCxcbiAgLyoqXG4gICAqIFNFVkVOXG4gICAqL1xuICBTRVZFTjogNTUsXG4gIC8qKlxuICAgKiBFSUdIVFxuICAgKi9cbiAgRUlHSFQ6IDU2LFxuICAvKipcbiAgICogTklORVxuICAgKi9cbiAgTklORTogNTcsXG4gIC8qKlxuICAgKiBRVUVTVElPTl9NQVJLXG4gICAqL1xuICBRVUVTVElPTl9NQVJLOiA2MyxcbiAgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG4gIC8qKlxuICAgKiBBXG4gICAqL1xuICBBOiA2NSxcbiAgLyoqXG4gICAqIEJcbiAgICovXG4gIEI6IDY2LFxuICAvKipcbiAgICogQ1xuICAgKi9cbiAgQzogNjcsXG4gIC8qKlxuICAgKiBEXG4gICAqL1xuICBEOiA2OCxcbiAgLyoqXG4gICAqIEVcbiAgICovXG4gIEU6IDY5LFxuICAvKipcbiAgICogRlxuICAgKi9cbiAgRjogNzAsXG4gIC8qKlxuICAgKiBHXG4gICAqL1xuICBHOiA3MSxcbiAgLyoqXG4gICAqIEhcbiAgICovXG4gIEg6IDcyLFxuICAvKipcbiAgICogSVxuICAgKi9cbiAgSTogNzMsXG4gIC8qKlxuICAgKiBKXG4gICAqL1xuICBKOiA3NCxcbiAgLyoqXG4gICAqIEtcbiAgICovXG4gIEs6IDc1LFxuICAvKipcbiAgICogTFxuICAgKi9cbiAgTDogNzYsXG4gIC8qKlxuICAgKiBNXG4gICAqL1xuICBNOiA3NyxcbiAgLyoqXG4gICAqIE5cbiAgICovXG4gIE46IDc4LFxuICAvKipcbiAgICogT1xuICAgKi9cbiAgTzogNzksXG4gIC8qKlxuICAgKiBQXG4gICAqL1xuICBQOiA4MCxcbiAgLyoqXG4gICAqIFFcbiAgICovXG4gIFE6IDgxLFxuICAvKipcbiAgICogUlxuICAgKi9cbiAgUjogODIsXG4gIC8qKlxuICAgKiBTXG4gICAqL1xuICBTOiA4MyxcbiAgLyoqXG4gICAqIFRcbiAgICovXG4gIFQ6IDg0LFxuICAvKipcbiAgICogVVxuICAgKi9cbiAgVTogODUsXG4gIC8qKlxuICAgKiBWXG4gICAqL1xuICBWOiA4NixcbiAgLyoqXG4gICAqIFdcbiAgICovXG4gIFc6IDg3LFxuICAvKipcbiAgICogWFxuICAgKi9cbiAgWDogODgsXG4gIC8qKlxuICAgKiBZXG4gICAqL1xuICBZOiA4OSxcbiAgLyoqXG4gICAqIFpcbiAgICovXG4gIFo6IDkwLFxuICAvKipcbiAgICogTUVUQVxuICAgKi9cbiAgTUVUQTogOTEsXG4gIC8vIFdJTl9LRVlfTEVGVFxuICAvKipcbiAgICogV0lOX0tFWV9SSUdIVFxuICAgKi9cbiAgV0lOX0tFWV9SSUdIVDogOTIsXG4gIC8qKlxuICAgKiBDT05URVhUX01FTlVcbiAgICovXG4gIENPTlRFWFRfTUVOVTogOTMsXG4gIC8qKlxuICAgKiBOVU1fWkVST1xuICAgKi9cbiAgTlVNX1pFUk86IDk2LFxuICAvKipcbiAgICogTlVNX09ORVxuICAgKi9cbiAgTlVNX09ORTogOTcsXG4gIC8qKlxuICAgKiBOVU1fVFdPXG4gICAqL1xuICBOVU1fVFdPOiA5OCxcbiAgLyoqXG4gICAqIE5VTV9USFJFRVxuICAgKi9cbiAgTlVNX1RIUkVFOiA5OSxcbiAgLyoqXG4gICAqIE5VTV9GT1VSXG4gICAqL1xuICBOVU1fRk9VUjogMTAwLFxuICAvKipcbiAgICogTlVNX0ZJVkVcbiAgICovXG4gIE5VTV9GSVZFOiAxMDEsXG4gIC8qKlxuICAgKiBOVU1fU0lYXG4gICAqL1xuICBOVU1fU0lYOiAxMDIsXG4gIC8qKlxuICAgKiBOVU1fU0VWRU5cbiAgICovXG4gIE5VTV9TRVZFTjogMTAzLFxuICAvKipcbiAgICogTlVNX0VJR0hUXG4gICAqL1xuICBOVU1fRUlHSFQ6IDEwNCxcbiAgLyoqXG4gICAqIE5VTV9OSU5FXG4gICAqL1xuICBOVU1fTklORTogMTA1LFxuICAvKipcbiAgICogTlVNX01VTFRJUExZXG4gICAqL1xuICBOVU1fTVVMVElQTFk6IDEwNixcbiAgLyoqXG4gICAqIE5VTV9QTFVTXG4gICAqL1xuICBOVU1fUExVUzogMTA3LFxuICAvKipcbiAgICogTlVNX01JTlVTXG4gICAqL1xuICBOVU1fTUlOVVM6IDEwOSxcbiAgLyoqXG4gICAqIE5VTV9QRVJJT0RcbiAgICovXG4gIE5VTV9QRVJJT0Q6IDExMCxcbiAgLyoqXG4gICAqIE5VTV9ESVZJU0lPTlxuICAgKi9cbiAgTlVNX0RJVklTSU9OOiAxMTEsXG4gIC8qKlxuICAgKiBGMVxuICAgKi9cbiAgRjE6IDExMixcbiAgLyoqXG4gICAqIEYyXG4gICAqL1xuICBGMjogMTEzLFxuICAvKipcbiAgICogRjNcbiAgICovXG4gIEYzOiAxMTQsXG4gIC8qKlxuICAgKiBGNFxuICAgKi9cbiAgRjQ6IDExNSxcbiAgLyoqXG4gICAqIEY1XG4gICAqL1xuICBGNTogMTE2LFxuICAvKipcbiAgICogRjZcbiAgICovXG4gIEY2OiAxMTcsXG4gIC8qKlxuICAgKiBGN1xuICAgKi9cbiAgRjc6IDExOCxcbiAgLyoqXG4gICAqIEY4XG4gICAqL1xuICBGODogMTE5LFxuICAvKipcbiAgICogRjlcbiAgICovXG4gIEY5OiAxMjAsXG4gIC8qKlxuICAgKiBGMTBcbiAgICovXG4gIEYxMDogMTIxLFxuICAvKipcbiAgICogRjExXG4gICAqL1xuICBGMTE6IDEyMixcbiAgLyoqXG4gICAqIEYxMlxuICAgKi9cbiAgRjEyOiAxMjMsXG4gIC8qKlxuICAgKiBOVU1MT0NLXG4gICAqL1xuICBOVU1MT0NLOiAxNDQsXG4gIC8qKlxuICAgKiBTRU1JQ09MT05cbiAgICovXG4gIFNFTUlDT0xPTjogMTg2LFxuICAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIERBU0hcbiAgICovXG4gIERBU0g6IDE4OSxcbiAgLy8gbmVlZHMgbG9jYWxpemF0aW9uXG4gIC8qKlxuICAgKiBFUVVBTFNcbiAgICovXG4gIEVRVUFMUzogMTg3LFxuICAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIENPTU1BXG4gICAqL1xuICBDT01NQTogMTg4LFxuICAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIFBFUklPRFxuICAgKi9cbiAgUEVSSU9EOiAxOTAsXG4gIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogU0xBU0hcbiAgICovXG4gIFNMQVNIOiAxOTEsXG4gIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogQVBPU1RST1BIRVxuICAgKi9cbiAgQVBPU1RST1BIRTogMTkyLFxuICAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIFNJTkdMRV9RVU9URVxuICAgKi9cbiAgU0lOR0xFX1FVT1RFOiAyMjIsXG4gIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogT1BFTl9TUVVBUkVfQlJBQ0tFVFxuICAgKi9cbiAgT1BFTl9TUVVBUkVfQlJBQ0tFVDogMjE5LFxuICAvLyBuZWVkcyBsb2NhbGl6YXRpb25cbiAgLyoqXG4gICAqIEJBQ0tTTEFTSFxuICAgKi9cbiAgQkFDS1NMQVNIOiAyMjAsXG4gIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogQ0xPU0VfU1FVQVJFX0JSQUNLRVRcbiAgICovXG4gIENMT1NFX1NRVUFSRV9CUkFDS0VUOiAyMjEsXG4gIC8vIG5lZWRzIGxvY2FsaXphdGlvblxuICAvKipcbiAgICogV0lOX0tFWVxuICAgKi9cbiAgV0lOX0tFWTogMjI0LFxuICAvKipcbiAgICogTUFDX0ZGX01FVEFcbiAgICovXG4gIE1BQ19GRl9NRVRBOiAyMjQsXG4gIC8vIEZpcmVmb3ggKEdlY2tvKSBmaXJlcyB0aGlzIGZvciB0aGUgbWV0YSBrZXkgaW5zdGVhZCBvZiA5MVxuICAvKipcbiAgICogV0lOX0lNRVxuICAgKi9cbiAgV0lOX0lNRTogMjI5LFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT0gRnVuY3Rpb24gPT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8qKlxuICAgKiB3aGV0aGVyIHRleHQgYW5kIG1vZGlmaWVkIGtleSBpcyBlbnRlcmVkIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAqL1xuICBpc1RleHRNb2RpZnlpbmdLZXlFdmVudDogZnVuY3Rpb24gaXNUZXh0TW9kaWZ5aW5nS2V5RXZlbnQoZSkge1xuICAgIHZhciBrZXlDb2RlID0gZS5rZXlDb2RlO1xuICAgIGlmIChlLmFsdEtleSAmJiAhZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fFxuICAgIC8vIEZ1bmN0aW9uIGtleXMgZG9uJ3QgZ2VuZXJhdGUgdGV4dFxuICAgIGtleUNvZGUgPj0gS2V5Q29kZS5GMSAmJiBrZXlDb2RlIDw9IEtleUNvZGUuRjEyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBrZXlzIGFyZSBxdWl0ZSBoYXJtbGVzcywgZXZlbiBpbiBjb21iaW5hdGlvbiB3aXRoXG4gICAgLy8gQ1RSTCwgQUxUIG9yIFNISUZULlxuICAgIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgICAgY2FzZSBLZXlDb2RlLkFMVDpcbiAgICAgIGNhc2UgS2V5Q29kZS5DQVBTX0xPQ0s6XG4gICAgICBjYXNlIEtleUNvZGUuQ09OVEVYVF9NRU5VOlxuICAgICAgY2FzZSBLZXlDb2RlLkNUUkw6XG4gICAgICBjYXNlIEtleUNvZGUuRE9XTjpcbiAgICAgIGNhc2UgS2V5Q29kZS5FTkQ6XG4gICAgICBjYXNlIEtleUNvZGUuRVNDOlxuICAgICAgY2FzZSBLZXlDb2RlLkhPTUU6XG4gICAgICBjYXNlIEtleUNvZGUuSU5TRVJUOlxuICAgICAgY2FzZSBLZXlDb2RlLkxFRlQ6XG4gICAgICBjYXNlIEtleUNvZGUuTUFDX0ZGX01FVEE6XG4gICAgICBjYXNlIEtleUNvZGUuTUVUQTpcbiAgICAgIGNhc2UgS2V5Q29kZS5OVU1MT0NLOlxuICAgICAgY2FzZSBLZXlDb2RlLk5VTV9DRU5URVI6XG4gICAgICBjYXNlIEtleUNvZGUuUEFHRV9ET1dOOlxuICAgICAgY2FzZSBLZXlDb2RlLlBBR0VfVVA6XG4gICAgICBjYXNlIEtleUNvZGUuUEFVU0U6XG4gICAgICBjYXNlIEtleUNvZGUuUFJJTlRfU0NSRUVOOlxuICAgICAgY2FzZSBLZXlDb2RlLlJJR0hUOlxuICAgICAgY2FzZSBLZXlDb2RlLlNISUZUOlxuICAgICAgY2FzZSBLZXlDb2RlLlVQOlxuICAgICAgY2FzZSBLZXlDb2RlLldJTl9LRVk6XG4gICAgICBjYXNlIEtleUNvZGUuV0lOX0tFWV9SSUdIVDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICAvKipcbiAgICogd2hldGhlciBjaGFyYWN0ZXIgaXMgZW50ZXJlZC5cbiAgICovXG4gIGlzQ2hhcmFjdGVyS2V5OiBmdW5jdGlvbiBpc0NoYXJhY3RlcktleShrZXlDb2RlKSB7XG4gICAgaWYgKGtleUNvZGUgPj0gS2V5Q29kZS5aRVJPICYmIGtleUNvZGUgPD0gS2V5Q29kZS5OSU5FKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGtleUNvZGUgPj0gS2V5Q29kZS5OVU1fWkVSTyAmJiBrZXlDb2RlIDw9IEtleUNvZGUuTlVNX01VTFRJUExZKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGtleUNvZGUgPj0gS2V5Q29kZS5BICYmIGtleUNvZGUgPD0gS2V5Q29kZS5aKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBTYWZhcmkgc2VuZHMgemVybyBrZXkgY29kZSBmb3Igbm9uLWxhdGluIGNoYXJhY3RlcnMuXG4gICAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1dlYktpdCcpICE9PSAtMSAmJiBrZXlDb2RlID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc3dpdGNoIChrZXlDb2RlKSB7XG4gICAgICBjYXNlIEtleUNvZGUuU1BBQ0U6XG4gICAgICBjYXNlIEtleUNvZGUuUVVFU1RJT05fTUFSSzpcbiAgICAgIGNhc2UgS2V5Q29kZS5OVU1fUExVUzpcbiAgICAgIGNhc2UgS2V5Q29kZS5OVU1fTUlOVVM6XG4gICAgICBjYXNlIEtleUNvZGUuTlVNX1BFUklPRDpcbiAgICAgIGNhc2UgS2V5Q29kZS5OVU1fRElWSVNJT046XG4gICAgICBjYXNlIEtleUNvZGUuU0VNSUNPTE9OOlxuICAgICAgY2FzZSBLZXlDb2RlLkRBU0g6XG4gICAgICBjYXNlIEtleUNvZGUuRVFVQUxTOlxuICAgICAgY2FzZSBLZXlDb2RlLkNPTU1BOlxuICAgICAgY2FzZSBLZXlDb2RlLlBFUklPRDpcbiAgICAgIGNhc2UgS2V5Q29kZS5TTEFTSDpcbiAgICAgIGNhc2UgS2V5Q29kZS5BUE9TVFJPUEhFOlxuICAgICAgY2FzZSBLZXlDb2RlLlNJTkdMRV9RVU9URTpcbiAgICAgIGNhc2UgS2V5Q29kZS5PUEVOX1NRVUFSRV9CUkFDS0VUOlxuICAgICAgY2FzZSBLZXlDb2RlLkJBQ0tTTEFTSDpcbiAgICAgIGNhc2UgS2V5Q29kZS5DTE9TRV9TUVVBUkVfQlJBQ0tFVDpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgS2V5Q29kZTsiLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgUGFuZWxDb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgdmFyIF9jbGFzc25hbWVzO1xuICB2YXIgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgIGZvcmNlUmVuZGVyID0gcHJvcHMuZm9yY2VSZW5kZXIsXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICBpc0FjdGl2ZSA9IHByb3BzLmlzQWN0aXZlLFxuICAgIHJvbGUgPSBwcm9wcy5yb2xlO1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoaXNBY3RpdmUgfHwgZm9yY2VSZW5kZXIpLFxuICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgIHJlbmRlcmVkID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICBzZXRSZW5kZXJlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IGlzQWN0aXZlKSB7XG4gICAgICBzZXRSZW5kZXJlZCh0cnVlKTtcbiAgICB9XG4gIH0sIFtmb3JjZVJlbmRlciwgaXNBY3RpdmVdKTtcbiAgaWYgKCFyZW5kZXJlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzKFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29udGVudFwiKSwgKF9jbGFzc25hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1jb250ZW50LWFjdGl2ZVwiKSwgaXNBY3RpdmUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29udGVudC1pbmFjdGl2ZVwiKSwgIWlzQWN0aXZlKSwgX2NsYXNzbmFtZXMpLCBjbGFzc05hbWUpLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICByb2xlOiByb2xlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29udGVudC1ib3hcIilcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xuUGFuZWxDb250ZW50LmRpc3BsYXlOYW1lID0gJ1BhbmVsQ29udGVudCc7XG5leHBvcnQgZGVmYXVsdCBQYW5lbENvbnRlbnQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJzaG93QXJyb3dcIiwgXCJoZWFkZXJDbGFzc1wiLCBcImlzQWN0aXZlXCIsIFwib25JdGVtQ2xpY2tcIiwgXCJmb3JjZVJlbmRlclwiLCBcImNsYXNzTmFtZVwiLCBcInByZWZpeENsc1wiLCBcImNvbGxhcHNpYmxlXCIsIFwiYWNjb3JkaW9uXCIsIFwicGFuZWxLZXlcIiwgXCJleHRyYVwiLCBcImhlYWRlclwiLCBcImV4cGFuZEljb25cIiwgXCJvcGVuTW90aW9uXCIsIFwiZGVzdHJveUluYWN0aXZlUGFuZWxcIiwgXCJjaGlsZHJlblwiXTtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IENTU01vdGlvbiBmcm9tICdyYy1tb3Rpb24nO1xuaW1wb3J0IEtleUNvZGUgZnJvbSBcInJjLXV0aWwvZXMvS2V5Q29kZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQYW5lbENvbnRlbnQgZnJvbSBcIi4vUGFuZWxDb250ZW50XCI7XG52YXIgQ29sbGFwc2VQYW5lbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfY2xhc3NOYW1lcywgX2NsYXNzTmFtZXMyO1xuICB2YXIgX3Byb3BzJHNob3dBcnJvdyA9IHByb3BzLnNob3dBcnJvdyxcbiAgICBzaG93QXJyb3cgPSBfcHJvcHMkc2hvd0Fycm93ID09PSB2b2lkIDAgPyB0cnVlIDogX3Byb3BzJHNob3dBcnJvdyxcbiAgICBoZWFkZXJDbGFzcyA9IHByb3BzLmhlYWRlckNsYXNzLFxuICAgIGlzQWN0aXZlID0gcHJvcHMuaXNBY3RpdmUsXG4gICAgb25JdGVtQ2xpY2sgPSBwcm9wcy5vbkl0ZW1DbGljayxcbiAgICBmb3JjZVJlbmRlciA9IHByb3BzLmZvcmNlUmVuZGVyLFxuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICBwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgY29sbGFwc2libGUgPSBwcm9wcy5jb2xsYXBzaWJsZSxcbiAgICBhY2NvcmRpb24gPSBwcm9wcy5hY2NvcmRpb24sXG4gICAgcGFuZWxLZXkgPSBwcm9wcy5wYW5lbEtleSxcbiAgICBleHRyYSA9IHByb3BzLmV4dHJhLFxuICAgIGhlYWRlciA9IHByb3BzLmhlYWRlcixcbiAgICBleHBhbmRJY29uID0gcHJvcHMuZXhwYW5kSWNvbixcbiAgICBvcGVuTW90aW9uID0gcHJvcHMub3Blbk1vdGlvbixcbiAgICBkZXN0cm95SW5hY3RpdmVQYW5lbCA9IHByb3BzLmRlc3Ryb3lJbmFjdGl2ZVBhbmVsLFxuICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgcmVzZXRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgdmFyIGRpc2FibGVkID0gY29sbGFwc2libGUgPT09ICdkaXNhYmxlZCc7XG4gIHZhciBjb2xsYXBzaWJsZUhlYWRlciA9IGNvbGxhcHNpYmxlID09PSAnaGVhZGVyJztcbiAgdmFyIGNvbGxhcHNpYmxlSWNvbiA9IGNvbGxhcHNpYmxlID09PSAnaWNvbic7XG4gIHZhciBpZkV4dHJhRXhpc3QgPSBleHRyYSAhPT0gbnVsbCAmJiBleHRyYSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBleHRyYSAhPT0gJ2Jvb2xlYW4nO1xuICB2YXIgaGFuZGxlSXRlbUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlSXRlbUNsaWNrKCkge1xuICAgIG9uSXRlbUNsaWNrID09PSBudWxsIHx8IG9uSXRlbUNsaWNrID09PSB2b2lkIDAgfHwgb25JdGVtQ2xpY2socGFuZWxLZXkpO1xuICB9O1xuICB2YXIgaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZSkge1xuICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyB8fCBlLmtleUNvZGUgPT09IEtleUNvZGUuRU5URVIgfHwgZS53aGljaCA9PT0gS2V5Q29kZS5FTlRFUikge1xuICAgICAgaGFuZGxlSXRlbUNsaWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PSBJY29uID09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgaWNvbk5vZGUgPSB0eXBlb2YgZXhwYW5kSWNvbiA9PT0gJ2Z1bmN0aW9uJyA/IGV4cGFuZEljb24ocHJvcHMpIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpXCIsIHtcbiAgICBjbGFzc05hbWU6IFwiYXJyb3dcIlxuICB9KTtcbiAgaWYgKGljb25Ob2RlKSB7XG4gICAgaWNvbk5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItZXhwYW5kLWljb25cIiksXG4gICAgICBvbkNsaWNrOiBbJ2hlYWRlcicsICdpY29uJ10uaW5jbHVkZXMoY29sbGFwc2libGUpID8gaGFuZGxlSXRlbUNsaWNrIDogdW5kZWZpbmVkXG4gICAgfSwgaWNvbk5vZGUpO1xuICB9XG4gIHZhciBjb2xsYXBzZVBhbmVsQ2xhc3NOYW1lcyA9IGNsYXNzTmFtZXMoKF9jbGFzc05hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtXCIpLCB0cnVlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWl0ZW0tYWN0aXZlXCIpLCBpc0FjdGl2ZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtLWRpc2FibGVkXCIpLCBkaXNhYmxlZCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKTtcbiAgdmFyIGhlYWRlckNsYXNzTmFtZSA9IGNsYXNzTmFtZXMoaGVhZGVyQ2xhc3MsIChfY2xhc3NOYW1lczIgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzMiwgXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1oZWFkZXJcIiksIHRydWUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzTmFtZXMyLCBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhlYWRlci1jb2xsYXBzaWJsZS1vbmx5XCIpLCBjb2xsYXBzaWJsZUhlYWRlciksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lczIsIFwiXCIuY29uY2F0KHByZWZpeENscywgXCItaWNvbi1jb2xsYXBzaWJsZS1vbmx5XCIpLCBjb2xsYXBzaWJsZUljb24pLCBfY2xhc3NOYW1lczIpKTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT0gSGVhZGVyUHJvcHMgPT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBoZWFkZXJQcm9wcyA9IHtcbiAgICBjbGFzc05hbWU6IGhlYWRlckNsYXNzTmFtZSxcbiAgICAnYXJpYS1leHBhbmRlZCc6IGlzQWN0aXZlLFxuICAgICdhcmlhLWRpc2FibGVkJzogZGlzYWJsZWQsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duXG4gIH07XG4gIGlmICghY29sbGFwc2libGVIZWFkZXIgJiYgIWNvbGxhcHNpYmxlSWNvbikge1xuICAgIGhlYWRlclByb3BzLm9uQ2xpY2sgPSBoYW5kbGVJdGVtQ2xpY2s7XG4gICAgaGVhZGVyUHJvcHMucm9sZSA9IGFjY29yZGlvbiA/ICd0YWInIDogJ2J1dHRvbic7XG4gICAgaGVhZGVyUHJvcHMudGFiSW5kZXggPSBkaXNhYmxlZCA/IC0xIDogMDtcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PSBSZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgcmVzZXRQcm9wcywge1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY29sbGFwc2VQYW5lbENsYXNzTmFtZXNcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIGhlYWRlclByb3BzLCBzaG93QXJyb3cgJiYgaWNvbk5vZGUsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBcIlwiLmNvbmNhdChwcmVmaXhDbHMsIFwiLWhlYWRlci10ZXh0XCIpLFxuICAgIG9uQ2xpY2s6IGNvbGxhcHNpYmxlID09PSAnaGVhZGVyJyA/IGhhbmRsZUl0ZW1DbGljayA6IHVuZGVmaW5lZFxuICB9LCBoZWFkZXIpLCBpZkV4dHJhRXhpc3QgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1leHRyYVwiKVxuICB9LCBleHRyYSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDU1NNb3Rpb24sIF9leHRlbmRzKHtcbiAgICB2aXNpYmxlOiBpc0FjdGl2ZSxcbiAgICBsZWF2ZWRDbGFzc05hbWU6IFwiXCIuY29uY2F0KHByZWZpeENscywgXCItY29udGVudC1oaWRkZW5cIilcbiAgfSwgb3Blbk1vdGlvbiwge1xuICAgIGZvcmNlUmVuZGVyOiBmb3JjZVJlbmRlcixcbiAgICByZW1vdmVPbkxlYXZlOiBkZXN0cm95SW5hY3RpdmVQYW5lbFxuICB9KSwgZnVuY3Rpb24gKF9yZWYsIG1vdGlvblJlZikge1xuICAgIHZhciBtb3Rpb25DbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIG1vdGlvblN0eWxlID0gX3JlZi5zdHlsZTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUGFuZWxDb250ZW50LCB7XG4gICAgICByZWY6IG1vdGlvblJlZixcbiAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgY2xhc3NOYW1lOiBtb3Rpb25DbGFzc05hbWUsXG4gICAgICBzdHlsZTogbW90aW9uU3R5bGUsXG4gICAgICBpc0FjdGl2ZTogaXNBY3RpdmUsXG4gICAgICBmb3JjZVJlbmRlcjogZm9yY2VSZW5kZXIsXG4gICAgICByb2xlOiBhY2NvcmRpb24gPyAndGFicGFuZWwnIDogdm9pZCAwXG4gICAgfSwgY2hpbGRyZW4pO1xuICB9KSk7XG59KTtcbmV4cG9ydCBkZWZhdWx0IENvbGxhcHNlUGFuZWw7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xudmFyIF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwibGFiZWxcIiwgXCJrZXlcIiwgXCJjb2xsYXBzaWJsZVwiLCBcIm9uSXRlbUNsaWNrXCIsIFwiZGVzdHJveUluYWN0aXZlUGFuZWxcIl07XG5pbXBvcnQgdG9BcnJheSBmcm9tIFwicmMtdXRpbC9lcy9DaGlsZHJlbi90b0FycmF5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENvbGxhcHNlUGFuZWwgZnJvbSBcIi4uL1BhbmVsXCI7XG52YXIgY29udmVydEl0ZW1zVG9Ob2RlcyA9IGZ1bmN0aW9uIGNvbnZlcnRJdGVtc1RvTm9kZXMoaXRlbXMsIHByb3BzKSB7XG4gIHZhciBwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgYWNjb3JkaW9uID0gcHJvcHMuYWNjb3JkaW9uLFxuICAgIGNvbGxhcHNpYmxlID0gcHJvcHMuY29sbGFwc2libGUsXG4gICAgZGVzdHJveUluYWN0aXZlUGFuZWwgPSBwcm9wcy5kZXN0cm95SW5hY3RpdmVQYW5lbCxcbiAgICBvbkl0ZW1DbGljayA9IHByb3BzLm9uSXRlbUNsaWNrLFxuICAgIGFjdGl2ZUtleSA9IHByb3BzLmFjdGl2ZUtleSxcbiAgICBvcGVuTW90aW9uID0gcHJvcHMub3Blbk1vdGlvbixcbiAgICBleHBhbmRJY29uID0gcHJvcHMuZXhwYW5kSWNvbjtcbiAgcmV0dXJuIGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuLFxuICAgICAgbGFiZWwgPSBpdGVtLmxhYmVsLFxuICAgICAgcmF3S2V5ID0gaXRlbS5rZXksXG4gICAgICByYXdDb2xsYXBzaWJsZSA9IGl0ZW0uY29sbGFwc2libGUsXG4gICAgICByYXdPbkl0ZW1DbGljayA9IGl0ZW0ub25JdGVtQ2xpY2ssXG4gICAgICByYXdEZXN0cm95SW5hY3RpdmVQYW5lbCA9IGl0ZW0uZGVzdHJveUluYWN0aXZlUGFuZWwsXG4gICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoaXRlbSwgX2V4Y2x1ZGVkKTtcblxuICAgIC8vIFlvdSBtYXkgYmUgcHV6emxlZCB3aHkgeW91IHdhbnQgdG8gY29udmVydCB0aGVtIGFsbCBpbnRvIHN0cmluZ3MsIG1lIHRvby5cbiAgICAvLyBNYXliZTogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LWNvbXBvbmVudC9jb2xsYXBzZS9ibG9iL2FhYzMwM2E4YjZmZjMwZTM1MDYwYjRmOGZlY2RlNmY0NTU2ZmNiZTIvc3JjL0NvbGxhcHNlLnRzeCNMMTVcbiAgICB2YXIga2V5ID0gU3RyaW5nKHJhd0tleSAhPT0gbnVsbCAmJiByYXdLZXkgIT09IHZvaWQgMCA/IHJhd0tleSA6IGluZGV4KTtcbiAgICB2YXIgbWVyZ2VDb2xsYXBzaWJsZSA9IHJhd0NvbGxhcHNpYmxlICE9PSBudWxsICYmIHJhd0NvbGxhcHNpYmxlICE9PSB2b2lkIDAgPyByYXdDb2xsYXBzaWJsZSA6IGNvbGxhcHNpYmxlO1xuICAgIHZhciBtZXJnZURlc3Ryb3lJbmFjdGl2ZVBhbmVsID0gcmF3RGVzdHJveUluYWN0aXZlUGFuZWwgIT09IG51bGwgJiYgcmF3RGVzdHJveUluYWN0aXZlUGFuZWwgIT09IHZvaWQgMCA/IHJhd0Rlc3Ryb3lJbmFjdGl2ZVBhbmVsIDogZGVzdHJveUluYWN0aXZlUGFuZWw7XG4gICAgdmFyIGhhbmRsZUl0ZW1DbGljayA9IGZ1bmN0aW9uIGhhbmRsZUl0ZW1DbGljayh2YWx1ZSkge1xuICAgICAgaWYgKG1lcmdlQ29sbGFwc2libGUgPT09ICdkaXNhYmxlZCcpIHJldHVybjtcbiAgICAgIG9uSXRlbUNsaWNrKHZhbHVlKTtcbiAgICAgIHJhd09uSXRlbUNsaWNrID09PSBudWxsIHx8IHJhd09uSXRlbUNsaWNrID09PSB2b2lkIDAgfHwgcmF3T25JdGVtQ2xpY2sodmFsdWUpO1xuICAgIH07XG4gICAgdmFyIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGFjY29yZGlvbikge1xuICAgICAgaXNBY3RpdmUgPSBhY3RpdmVLZXlbMF0gPT09IGtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXNBY3RpdmUgPSBhY3RpdmVLZXkuaW5kZXhPZihrZXkpID4gLTE7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb2xsYXBzZVBhbmVsLCBfZXh0ZW5kcyh7fSwgcmVzdFByb3BzLCB7XG4gICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgIGtleToga2V5LFxuICAgICAgcGFuZWxLZXk6IGtleSxcbiAgICAgIGlzQWN0aXZlOiBpc0FjdGl2ZSxcbiAgICAgIGFjY29yZGlvbjogYWNjb3JkaW9uLFxuICAgICAgb3Blbk1vdGlvbjogb3Blbk1vdGlvbixcbiAgICAgIGV4cGFuZEljb246IGV4cGFuZEljb24sXG4gICAgICBoZWFkZXI6IGxhYmVsLFxuICAgICAgY29sbGFwc2libGU6IG1lcmdlQ29sbGFwc2libGUsXG4gICAgICBvbkl0ZW1DbGljazogaGFuZGxlSXRlbUNsaWNrLFxuICAgICAgZGVzdHJveUluYWN0aXZlUGFuZWw6IG1lcmdlRGVzdHJveUluYWN0aXZlUGFuZWxcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9KTtcbn07XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhlIG5leHQgbWFqb3IgdmVyc2lvbiB3aWxsIGJlIHJlbW92ZWRcbiAqL1xudmFyIGdldE5ld0NoaWxkID0gZnVuY3Rpb24gZ2V0TmV3Q2hpbGQoY2hpbGQsIGluZGV4LCBwcm9wcykge1xuICBpZiAoIWNoaWxkKSByZXR1cm4gbnVsbDtcbiAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICBhY2NvcmRpb24gPSBwcm9wcy5hY2NvcmRpb24sXG4gICAgY29sbGFwc2libGUgPSBwcm9wcy5jb2xsYXBzaWJsZSxcbiAgICBkZXN0cm95SW5hY3RpdmVQYW5lbCA9IHByb3BzLmRlc3Ryb3lJbmFjdGl2ZVBhbmVsLFxuICAgIG9uSXRlbUNsaWNrID0gcHJvcHMub25JdGVtQ2xpY2ssXG4gICAgYWN0aXZlS2V5ID0gcHJvcHMuYWN0aXZlS2V5LFxuICAgIG9wZW5Nb3Rpb24gPSBwcm9wcy5vcGVuTW90aW9uLFxuICAgIGV4cGFuZEljb24gPSBwcm9wcy5leHBhbmRJY29uO1xuICB2YXIga2V5ID0gY2hpbGQua2V5IHx8IFN0cmluZyhpbmRleCk7XG4gIHZhciBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcyxcbiAgICBoZWFkZXIgPSBfY2hpbGQkcHJvcHMuaGVhZGVyLFxuICAgIGhlYWRlckNsYXNzID0gX2NoaWxkJHByb3BzLmhlYWRlckNsYXNzLFxuICAgIGNoaWxkRGVzdHJveUluYWN0aXZlUGFuZWwgPSBfY2hpbGQkcHJvcHMuZGVzdHJveUluYWN0aXZlUGFuZWwsXG4gICAgY2hpbGRDb2xsYXBzaWJsZSA9IF9jaGlsZCRwcm9wcy5jb2xsYXBzaWJsZSxcbiAgICBjaGlsZE9uSXRlbUNsaWNrID0gX2NoaWxkJHByb3BzLm9uSXRlbUNsaWNrO1xuICB2YXIgaXNBY3RpdmUgPSBmYWxzZTtcbiAgaWYgKGFjY29yZGlvbikge1xuICAgIGlzQWN0aXZlID0gYWN0aXZlS2V5WzBdID09PSBrZXk7XG4gIH0gZWxzZSB7XG4gICAgaXNBY3RpdmUgPSBhY3RpdmVLZXkuaW5kZXhPZihrZXkpID4gLTE7XG4gIH1cbiAgdmFyIG1lcmdlQ29sbGFwc2libGUgPSBjaGlsZENvbGxhcHNpYmxlICE9PSBudWxsICYmIGNoaWxkQ29sbGFwc2libGUgIT09IHZvaWQgMCA/IGNoaWxkQ29sbGFwc2libGUgOiBjb2xsYXBzaWJsZTtcbiAgdmFyIGhhbmRsZUl0ZW1DbGljayA9IGZ1bmN0aW9uIGhhbmRsZUl0ZW1DbGljayh2YWx1ZSkge1xuICAgIGlmIChtZXJnZUNvbGxhcHNpYmxlID09PSAnZGlzYWJsZWQnKSByZXR1cm47XG4gICAgb25JdGVtQ2xpY2sodmFsdWUpO1xuICAgIGNoaWxkT25JdGVtQ2xpY2sgPT09IG51bGwgfHwgY2hpbGRPbkl0ZW1DbGljayA9PT0gdm9pZCAwIHx8IGNoaWxkT25JdGVtQ2xpY2sodmFsdWUpO1xuICB9O1xuICB2YXIgY2hpbGRQcm9wcyA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBwYW5lbEtleToga2V5LFxuICAgIGhlYWRlcjogaGVhZGVyLFxuICAgIGhlYWRlckNsYXNzOiBoZWFkZXJDbGFzcyxcbiAgICBpc0FjdGl2ZTogaXNBY3RpdmUsXG4gICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgZGVzdHJveUluYWN0aXZlUGFuZWw6IGNoaWxkRGVzdHJveUluYWN0aXZlUGFuZWwgIT09IG51bGwgJiYgY2hpbGREZXN0cm95SW5hY3RpdmVQYW5lbCAhPT0gdm9pZCAwID8gY2hpbGREZXN0cm95SW5hY3RpdmVQYW5lbCA6IGRlc3Ryb3lJbmFjdGl2ZVBhbmVsLFxuICAgIG9wZW5Nb3Rpb246IG9wZW5Nb3Rpb24sXG4gICAgYWNjb3JkaW9uOiBhY2NvcmRpb24sXG4gICAgY2hpbGRyZW46IGNoaWxkLnByb3BzLmNoaWxkcmVuLFxuICAgIG9uSXRlbUNsaWNrOiBoYW5kbGVJdGVtQ2xpY2ssXG4gICAgZXhwYW5kSWNvbjogZXhwYW5kSWNvbixcbiAgICBjb2xsYXBzaWJsZTogbWVyZ2VDb2xsYXBzaWJsZVxuICB9O1xuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzIwNDc5XG4gIGlmICh0eXBlb2YgY2hpbGQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbiAgT2JqZWN0LmtleXMoY2hpbGRQcm9wcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICBpZiAodHlwZW9mIGNoaWxkUHJvcHNbcHJvcE5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGVsZXRlIGNoaWxkUHJvcHNbcHJvcE5hbWVdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKTtcbn07XG5mdW5jdGlvbiB1c2VJdGVtcyhpdGVtcywgcmF3Q2hpbGRyZW4sIHByb3BzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGl0ZW1zKSkge1xuICAgIHJldHVybiBjb252ZXJ0SXRlbXNUb05vZGVzKGl0ZW1zLCBwcm9wcyk7XG4gIH1cbiAgcmV0dXJuIHRvQXJyYXkocmF3Q2hpbGRyZW4pLm1hcChmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGdldE5ld0NoaWxkKGNoaWxkLCBpbmRleCwgcHJvcHMpO1xuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZUl0ZW1zOyIsImltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHVzZU1lcmdlZFN0YXRlIGZyb20gXCJyYy11dGlsL2VzL2hvb2tzL3VzZU1lcmdlZFN0YXRlXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZUl0ZW1zIGZyb20gXCIuL2hvb2tzL3VzZUl0ZW1zXCI7XG5pbXBvcnQgQ29sbGFwc2VQYW5lbCBmcm9tIFwiLi9QYW5lbFwiO1xuZnVuY3Rpb24gZ2V0QWN0aXZlS2V5c0FycmF5KGFjdGl2ZUtleSkge1xuICB2YXIgY3VycmVudEFjdGl2ZUtleSA9IGFjdGl2ZUtleTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGN1cnJlbnRBY3RpdmVLZXkpKSB7XG4gICAgdmFyIGFjdGl2ZUtleVR5cGUgPSBfdHlwZW9mKGN1cnJlbnRBY3RpdmVLZXkpO1xuICAgIGN1cnJlbnRBY3RpdmVLZXkgPSBhY3RpdmVLZXlUeXBlID09PSAnbnVtYmVyJyB8fCBhY3RpdmVLZXlUeXBlID09PSAnc3RyaW5nJyA/IFtjdXJyZW50QWN0aXZlS2V5XSA6IFtdO1xuICB9XG4gIHJldHVybiBjdXJyZW50QWN0aXZlS2V5Lm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIFN0cmluZyhrZXkpO1xuICB9KTtcbn1cbnZhciBDb2xsYXBzZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgIHByZWZpeENscyA9IF9wcm9wcyRwcmVmaXhDbHMgPT09IHZvaWQgMCA/ICdyYy1jb2xsYXBzZScgOiBfcHJvcHMkcHJlZml4Q2xzLFxuICAgIF9wcm9wcyRkZXN0cm95SW5hY3RpdiA9IHByb3BzLmRlc3Ryb3lJbmFjdGl2ZVBhbmVsLFxuICAgIGRlc3Ryb3lJbmFjdGl2ZVBhbmVsID0gX3Byb3BzJGRlc3Ryb3lJbmFjdGl2ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkZXN0cm95SW5hY3RpdixcbiAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgIGFjY29yZGlvbiA9IHByb3BzLmFjY29yZGlvbixcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICBjb2xsYXBzaWJsZSA9IHByb3BzLmNvbGxhcHNpYmxlLFxuICAgIG9wZW5Nb3Rpb24gPSBwcm9wcy5vcGVuTW90aW9uLFxuICAgIGV4cGFuZEljb24gPSBwcm9wcy5leHBhbmRJY29uLFxuICAgIHJhd0FjdGl2ZUtleSA9IHByb3BzLmFjdGl2ZUtleSxcbiAgICBkZWZhdWx0QWN0aXZlS2V5ID0gcHJvcHMuZGVmYXVsdEFjdGl2ZUtleSxcbiAgICBfb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICBpdGVtcyA9IHByb3BzLml0ZW1zO1xuICB2YXIgY29sbGFwc2VDbGFzc05hbWUgPSBjbGFzc05hbWVzKHByZWZpeENscywgY2xhc3NOYW1lKTtcbiAgdmFyIF91c2VNZXJnZWRTdGF0ZSA9IHVzZU1lcmdlZFN0YXRlKFtdLCB7XG4gICAgICB2YWx1ZTogcmF3QWN0aXZlS2V5LFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKHYpIHtcbiAgICAgICAgcmV0dXJuIF9vbkNoYW5nZSA9PT0gbnVsbCB8fCBfb25DaGFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vbkNoYW5nZSh2KTtcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRBY3RpdmVLZXksXG4gICAgICBwb3N0U3RhdGU6IGdldEFjdGl2ZUtleXNBcnJheVxuICAgIH0pLFxuICAgIF91c2VNZXJnZWRTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlTWVyZ2VkU3RhdGUsIDIpLFxuICAgIGFjdGl2ZUtleSA9IF91c2VNZXJnZWRTdGF0ZTJbMF0sXG4gICAgc2V0QWN0aXZlS2V5ID0gX3VzZU1lcmdlZFN0YXRlMlsxXTtcbiAgdmFyIG9uSXRlbUNsaWNrID0gZnVuY3Rpb24gb25JdGVtQ2xpY2soa2V5KSB7XG4gICAgcmV0dXJuIHNldEFjdGl2ZUtleShmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoYWNjb3JkaW9uKSB7XG4gICAgICAgIHJldHVybiBhY3RpdmVLZXlbMF0gPT09IGtleSA/IFtdIDogW2tleV07XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBhY3RpdmVLZXkuaW5kZXhPZihrZXkpO1xuICAgICAgdmFyIGlzQWN0aXZlID0gaW5kZXggPiAtMTtcbiAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICByZXR1cm4gYWN0aXZlS2V5LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtICE9PSBrZXk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWN0aXZlS2V5KSwgW2tleV0pO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PSBDaGlsZHJlbiA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgd2FybmluZyghY2hpbGRyZW4sICdbcmMtY29sbGFwc2VdIGBjaGlsZHJlbmAgd2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWFqb3IgdmVyc2lvbi4gUGxlYXNlIHVzZSBgaXRlbXNgIGluc3RlYWQuJyk7XG4gIHZhciBtZXJnZWRDaGlsZHJlbiA9IHVzZUl0ZW1zKGl0ZW1zLCBjaGlsZHJlbiwge1xuICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgIGFjY29yZGlvbjogYWNjb3JkaW9uLFxuICAgIG9wZW5Nb3Rpb246IG9wZW5Nb3Rpb24sXG4gICAgZXhwYW5kSWNvbjogZXhwYW5kSWNvbixcbiAgICBjb2xsYXBzaWJsZTogY29sbGFwc2libGUsXG4gICAgZGVzdHJveUluYWN0aXZlUGFuZWw6IGRlc3Ryb3lJbmFjdGl2ZVBhbmVsLFxuICAgIG9uSXRlbUNsaWNrOiBvbkl0ZW1DbGljayxcbiAgICBhY3RpdmVLZXk6IGFjdGl2ZUtleVxuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT0gUmVuZGVyID09PT09PT09PT09PT09PT09PT09PT09PVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY29sbGFwc2VDbGFzc05hbWUsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHJvbGU6IGFjY29yZGlvbiA/ICd0YWJsaXN0JyA6IHVuZGVmaW5lZFxuICB9LCBtZXJnZWRDaGlsZHJlbik7XG59KTtcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5hc3NpZ24oQ29sbGFwc2UsIHtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBgaXRlbXNgIGluc3RlYWQsIHdpbGwgYmUgcmVtb3ZlZCBpbiBgdjQuMC4wYFxuICAgKi9cbiAgUGFuZWw6IENvbGxhcHNlUGFuZWxcbn0pOyIsImltcG9ydCBDb2xsYXBzZSBmcm9tIFwiLi9Db2xsYXBzZVwiO1xuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2U7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGBpdGVtc2AgaW5zdGVhZCwgd2lsbCBiZSByZW1vdmVkIGluIGB2NC4wLjBgXG4gKi9cbnZhciBQYW5lbCA9IENvbGxhcHNlLlBhbmVsO1xuZXhwb3J0IHsgUGFuZWwgfTsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb21pdChvYmosIGZpZWxkcykge1xuICB2YXIgY2xvbmUgPSBfb2JqZWN0U3ByZWFkKHt9LCBvYmopO1xuICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZHMpKSB7XG4gICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVsZXRlIGNsb25lW2tleV07XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGNsb25lO1xufSIsIi8vID09PT09PT09PT09PT09PT09PSBDb2xsYXBzZSBNb3Rpb24gPT09PT09PT09PT09PT09PT09XG5jb25zdCBnZXRDb2xsYXBzZWRIZWlnaHQgPSAoKSA9PiAoe1xuICBoZWlnaHQ6IDAsXG4gIG9wYWNpdHk6IDBcbn0pO1xuY29uc3QgZ2V0UmVhbEhlaWdodCA9IG5vZGUgPT4ge1xuICBjb25zdCB7XG4gICAgc2Nyb2xsSGVpZ2h0XG4gIH0gPSBub2RlO1xuICByZXR1cm4ge1xuICAgIGhlaWdodDogc2Nyb2xsSGVpZ2h0LFxuICAgIG9wYWNpdHk6IDFcbiAgfTtcbn07XG5jb25zdCBnZXRDdXJyZW50SGVpZ2h0ID0gbm9kZSA9PiAoe1xuICBoZWlnaHQ6IG5vZGUgPyBub2RlLm9mZnNldEhlaWdodCA6IDBcbn0pO1xuY29uc3Qgc2tpcE9wYWNpdHlUcmFuc2l0aW9uID0gKF8sIGV2ZW50KSA9PiAoZXZlbnQgPT09IG51bGwgfHwgZXZlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2ZW50LmRlYWRsaW5lKSA9PT0gdHJ1ZSB8fCBldmVudC5wcm9wZXJ0eU5hbWUgPT09ICdoZWlnaHQnO1xuY29uc3QgaW5pdENvbGxhcHNlTW90aW9uID0gZnVuY3Rpb24gKCkge1xuICBsZXQgcm9vdENscyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2FudCc7XG4gIHJldHVybiB7XG4gICAgbW90aW9uTmFtZTogYCR7cm9vdENsc30tbW90aW9uLWNvbGxhcHNlYCxcbiAgICBvbkFwcGVhclN0YXJ0OiBnZXRDb2xsYXBzZWRIZWlnaHQsXG4gICAgb25FbnRlclN0YXJ0OiBnZXRDb2xsYXBzZWRIZWlnaHQsXG4gICAgb25BcHBlYXJBY3RpdmU6IGdldFJlYWxIZWlnaHQsXG4gICAgb25FbnRlckFjdGl2ZTogZ2V0UmVhbEhlaWdodCxcbiAgICBvbkxlYXZlU3RhcnQ6IGdldEN1cnJlbnRIZWlnaHQsXG4gICAgb25MZWF2ZUFjdGl2ZTogZ2V0Q29sbGFwc2VkSGVpZ2h0LFxuICAgIG9uQXBwZWFyRW5kOiBza2lwT3BhY2l0eVRyYW5zaXRpb24sXG4gICAgb25FbnRlckVuZDogc2tpcE9wYWNpdHlUcmFuc2l0aW9uLFxuICAgIG9uTGVhdmVFbmQ6IHNraXBPcGFjaXR5VHJhbnNpdGlvbixcbiAgICBtb3Rpb25EZWFkbGluZTogNTAwXG4gIH07XG59O1xuY29uc3QgU2VsZWN0UGxhY2VtZW50cyA9IFsnYm90dG9tTGVmdCcsICdib3R0b21SaWdodCcsICd0b3BMZWZ0JywgJ3RvcFJpZ2h0J107XG5jb25zdCBnZXRUcmFuc2l0aW9uTmFtZSA9IChyb290UHJlZml4Q2xzLCBtb3Rpb24sIHRyYW5zaXRpb25OYW1lKSA9PiB7XG4gIGlmICh0cmFuc2l0aW9uTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25OYW1lO1xuICB9XG4gIHJldHVybiBgJHtyb290UHJlZml4Q2xzfS0ke21vdGlvbn1gO1xufTtcbmV4cG9ydCB7IGdldFRyYW5zaXRpb25OYW1lIH07XG5leHBvcnQgZGVmYXVsdCBpbml0Q29sbGFwc2VNb3Rpb247IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGNvbnN0IHtcbiAgaXNWYWxpZEVsZW1lbnRcbn0gPSBSZWFjdDtcbmV4cG9ydCBmdW5jdGlvbiBpc0ZyYWdtZW50KGNoaWxkKSB7XG4gIHJldHVybiBjaGlsZCAmJiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2hpbGQudHlwZSA9PT0gUmVhY3QuRnJhZ21lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUVsZW1lbnQoZWxlbWVudCwgcmVwbGFjZW1lbnQsIHByb3BzKSB7XG4gIGlmICghaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICByZXR1cm4gcmVwbGFjZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwgdHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nID8gcHJvcHMoZWxlbWVudC5wcm9wcyB8fCB7fSkgOiBwcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xvbmVFbGVtZW50KGVsZW1lbnQsIHByb3BzKSB7XG4gIHJldHVybiByZXBsYWNlRWxlbWVudChlbGVtZW50LCBlbGVtZW50LCBwcm9wcyk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRJY29uUHJlZml4Q2xzID0gJ2FudGljb24nO1xuY29uc3QgZGVmYXVsdEdldFByZWZpeENscyA9IChzdWZmaXhDbHMsIGN1c3RvbWl6ZVByZWZpeENscykgPT4ge1xuICBpZiAoY3VzdG9taXplUHJlZml4Q2xzKSB7XG4gICAgcmV0dXJuIGN1c3RvbWl6ZVByZWZpeENscztcbiAgfVxuICByZXR1cm4gc3VmZml4Q2xzID8gYGFudC0ke3N1ZmZpeENsc31gIDogJ2FudCc7XG59O1xuLy8gem9tYmllSjog8J+aqCBEbyBub3QgcGFzcyBgZGVmYXVsdFJlbmRlckVtcHR5YCBoZXJlIHNpbmNlIGl0IHdpbGwgY2F1c2UgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbmV4cG9ydCBjb25zdCBDb25maWdDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICAvLyBXZSBwcm92aWRlIGEgZGVmYXVsdCBmdW5jdGlvbiBmb3IgQ29udGV4dCB3aXRob3V0IHByb3ZpZGVyXG4gIGdldFByZWZpeENsczogZGVmYXVsdEdldFByZWZpeENscyxcbiAgaWNvblByZWZpeENsczogZGVmYXVsdEljb25QcmVmaXhDbHNcbn0pO1xuZXhwb3J0IGNvbnN0IHtcbiAgQ29uc3VtZXI6IENvbmZpZ0NvbnN1bWVyXG59ID0gQ29uZmlnQ29udGV4dDsiLCJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgU2l6ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuZXhwb3J0IGNvbnN0IFNpemVDb250ZXh0UHJvdmlkZXIgPSBfcmVmID0+IHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBzaXplXG4gIH0gPSBfcmVmO1xuICBjb25zdCBvcmlnaW5TaXplID0gUmVhY3QudXNlQ29udGV4dChTaXplQ29udGV4dCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTaXplQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzaXplIHx8IG9yaWdpblNpemVcbiAgfSwgY2hpbGRyZW4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IFNpemVDb250ZXh0OyIsIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSY0NvbGxhcHNlIGZyb20gJ3JjLWNvbGxhcHNlJztcbmltcG9ydCB7IGRldlVzZVdhcm5pbmcgfSBmcm9tICcuLi9fdXRpbC93YXJuaW5nJztcbmltcG9ydCB7IENvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xuY29uc3QgQ29sbGFwc2VQYW5lbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc3Qgd2FybmluZyA9IGRldlVzZVdhcm5pbmcoJ0NvbGxhcHNlLlBhbmVsJyk7XG4gICAgd2FybmluZy5kZXByZWNhdGVkKCEoJ2Rpc2FibGVkJyBpbiBwcm9wcyksICdkaXNhYmxlZCcsICdjb2xsYXBzaWJsZT1cImRpc2FibGVkXCInKTtcbiAgfVxuICBjb25zdCB7XG4gICAgZ2V0UHJlZml4Q2xzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KENvbmZpZ0NvbnRleHQpO1xuICBjb25zdCB7XG4gICAgcHJlZml4Q2xzOiBjdXN0b21pemVQcmVmaXhDbHMsXG4gICAgY2xhc3NOYW1lLFxuICAgIHNob3dBcnJvdyA9IHRydWVcbiAgfSA9IHByb3BzO1xuICBjb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2NvbGxhcHNlJywgY3VzdG9taXplUHJlZml4Q2xzKTtcbiAgY29uc3QgY29sbGFwc2VQYW5lbENsYXNzTmFtZSA9IGNsYXNzTmFtZXMoe1xuICAgIFtgJHtwcmVmaXhDbHN9LW5vLWFycm93YF06ICFzaG93QXJyb3dcbiAgfSwgY2xhc3NOYW1lKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJjQ29sbGFwc2UuUGFuZWwsIE9iamVjdC5hc3NpZ24oe1xuICAgIHJlZjogcmVmXG4gIH0sIHByb3BzLCB7XG4gICAgcHJlZml4Q2xzOiBwcmVmaXhDbHMsXG4gICAgY2xhc3NOYW1lOiBjb2xsYXBzZVBhbmVsQ2xhc3NOYW1lXG4gIH0pKTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2VQYW5lbDsiLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWFwcGxlYnkvc21oYXNoZXIvYmxvYi82MWEwNTMwZjI4Mjc3ZjJlODUwYmZjMzk2MDBjZTYxZDAyYjUxOGRlL3NyYy9NdXJtdXJIYXNoMi5jcHAjTDM3LUw4NlxuZnVuY3Rpb24gbXVybXVyMihzdHIpIHtcbiAgLy8gJ20nIGFuZCAncicgYXJlIG1peGluZyBjb25zdGFudHMgZ2VuZXJhdGVkIG9mZmxpbmUuXG4gIC8vIFRoZXkncmUgbm90IHJlYWxseSAnbWFnaWMnLCB0aGV5IGp1c3QgaGFwcGVuIHRvIHdvcmsgd2VsbC5cbiAgLy8gY29uc3QgbSA9IDB4NWJkMWU5OTU7XG4gIC8vIGNvbnN0IHIgPSAyNDtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGFzaFxuICB2YXIgaCA9IDA7IC8vIE1peCA0IGJ5dGVzIGF0IGEgdGltZSBpbnRvIHRoZSBoYXNoXG5cbiAgdmFyIGssXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgZm9yICg7IGxlbiA+PSA0OyArK2ksIGxlbiAtPSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICAgIGsgXj1cbiAgICAvKiBrID4+PiByOiAqL1xuICAgIGsgPj4+IDI0O1xuICAgIGggPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpIF5cbiAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBIYW5kbGUgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZSBpbnB1dCBhcnJheVxuXG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPVxuICAgICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBEbyBhIGZldyBmaW5hbCBtaXhlcyBvZiB0aGUgaGFzaCB0byBlbnN1cmUgdGhlIGxhc3QgZmV3XG4gIC8vIGJ5dGVzIGFyZSB3ZWxsLWluY29ycG9yYXRlZC5cblxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPVxuICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIHJldHVybiAoKGggXiBoID4+PiAxNSkgPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbXVybXVyMjtcbiIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbi8vIFt0aW1lcywgcmVhbFZhbHVlXVxuXG52YXIgU1BMSVQgPSAnJSc7XG52YXIgRW50aXR5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRW50aXR5KGluc3RhbmNlSWQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRW50aXR5KTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbnN0YW5jZUlkXCIsIHZvaWQgMCk7XG4gICAgLyoqIEBwcml2YXRlIEludGVybmFsIGNhY2hlIG1hcC4gRG8gbm90IGFjY2VzcyB0aGlzIGRpcmVjdGx5ICovXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY2FjaGVcIiwgbmV3IE1hcCgpKTtcbiAgICB0aGlzLmluc3RhbmNlSWQgPSBpbnN0YW5jZUlkO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhFbnRpdHksIFt7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoa2V5cykge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleXMuam9pbihTUExJVCkpIHx8IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoa2V5cywgdmFsdWVGbikge1xuICAgICAgdmFyIHBhdGggPSBrZXlzLmpvaW4oU1BMSVQpO1xuICAgICAgdmFyIHByZXZWYWx1ZSA9IHRoaXMuY2FjaGUuZ2V0KHBhdGgpO1xuICAgICAgdmFyIG5leHRWYWx1ZSA9IHZhbHVlRm4ocHJldlZhbHVlKTtcbiAgICAgIGlmIChuZXh0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5kZWxldGUocGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNhY2hlLnNldChwYXRoLCBuZXh0VmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRW50aXR5O1xufSgpO1xuZXhwb3J0IGRlZmF1bHQgRW50aXR5OyIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xudmFyIF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCJdO1xuaW1wb3J0IHVzZU1lbW8gZnJvbSBcInJjLXV0aWwvZXMvaG9va3MvdXNlTWVtb1wiO1xuaW1wb3J0IGlzRXF1YWwgZnJvbSBcInJjLXV0aWwvZXMvaXNFcXVhbFwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENhY2hlRW50aXR5IGZyb20gXCIuL0NhY2hlXCI7XG5leHBvcnQgdmFyIEFUVFJfVE9LRU4gPSAnZGF0YS10b2tlbi1oYXNoJztcbmV4cG9ydCB2YXIgQVRUUl9NQVJLID0gJ2RhdGEtY3NzLWhhc2gnO1xuZXhwb3J0IHZhciBBVFRSX0NBQ0hFX1BBVEggPSAnZGF0YS1jYWNoZS1wYXRoJztcblxuLy8gTWFyayBjc3MtaW4tanMgaW5zdGFuY2UgaW4gc3R5bGUgZWxlbWVudFxuZXhwb3J0IHZhciBDU1NfSU5fSlNfSU5TVEFOQ0UgPSAnX19jc3NpbmpzX2luc3RhbmNlX18nO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuICB2YXIgY3NzaW5qc0luc3RhbmNlSWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDEyKS5zbGljZSgyKTtcblxuICAvLyBUcmlja3kgU1NSOiBNb3ZlIGFsbCBpbmxpbmUgc3R5bGUgdG8gdGhlIGhlYWQuXG4gIC8vIFBTOiBXZSBkbyBub3QgcmVjb21tZW5kIHRyaWNreSBtb2RlLlxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5oZWFkICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICB2YXIgc3R5bGVzID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbXCIuY29uY2F0KEFUVFJfTUFSSywgXCJdXCIpKSB8fCBbXTtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IGRvY3VtZW50LmhlYWQuZmlyc3RDaGlsZDtcbiAgICBBcnJheS5mcm9tKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIHN0eWxlW0NTU19JTl9KU19JTlNUQU5DRV0gPSBzdHlsZVtDU1NfSU5fSlNfSU5TVEFOQ0VdIHx8IGNzc2luanNJbnN0YW5jZUlkO1xuXG4gICAgICAvLyBOb3QgZm9yY2UgbW92ZSBpZiBubyBoZWFkXG4gICAgICBpZiAoc3R5bGVbQ1NTX0lOX0pTX0lOU1RBTkNFXSA9PT0gY3NzaW5qc0luc3RhbmNlSWQpIHtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGVkdXBsaWNhdGUgb2YgbW92ZWQgc3R5bGVzXG4gICAgdmFyIHN0eWxlSGFzaCA9IHt9O1xuICAgIEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW1wiLmNvbmNhdChBVFRSX01BUkssIFwiXVwiKSkpLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICB2YXIgaGFzaCA9IHN0eWxlLmdldEF0dHJpYnV0ZShBVFRSX01BUkspO1xuICAgICAgaWYgKHN0eWxlSGFzaFtoYXNoXSkge1xuICAgICAgICBpZiAoc3R5bGVbQ1NTX0lOX0pTX0lOU1RBTkNFXSA9PT0gY3NzaW5qc0luc3RhbmNlSWQpIHtcbiAgICAgICAgICB2YXIgX3N0eWxlJHBhcmVudE5vZGU7XG4gICAgICAgICAgKF9zdHlsZSRwYXJlbnROb2RlID0gc3R5bGUucGFyZW50Tm9kZSkgPT09IG51bGwgfHwgX3N0eWxlJHBhcmVudE5vZGUgPT09IHZvaWQgMCB8fCBfc3R5bGUkcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlSGFzaFtoYXNoXSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBDYWNoZUVudGl0eShjc3NpbmpzSW5zdGFuY2VJZCk7XG59XG52YXIgU3R5bGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBoYXNoUHJpb3JpdHk6ICdsb3cnLFxuICBjYWNoZTogY3JlYXRlQ2FjaGUoKSxcbiAgZGVmYXVsdENhY2hlOiB0cnVlXG59KTtcbmV4cG9ydCB2YXIgU3R5bGVQcm92aWRlciA9IGZ1bmN0aW9uIFN0eWxlUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQpO1xuICB2YXIgcGFyZW50Q29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoU3R5bGVDb250ZXh0KTtcbiAgdmFyIGNvbnRleHQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWVyZ2VkQ29udGV4dCA9IF9vYmplY3RTcHJlYWQoe30sIHBhcmVudENvbnRleHQpO1xuICAgIE9iamVjdC5rZXlzKHJlc3RQcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSByZXN0UHJvcHNba2V5XTtcbiAgICAgIGlmIChyZXN0UHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1lcmdlZENvbnRleHRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBjYWNoZSA9IHJlc3RQcm9wcy5jYWNoZTtcbiAgICBtZXJnZWRDb250ZXh0LmNhY2hlID0gbWVyZ2VkQ29udGV4dC5jYWNoZSB8fCBjcmVhdGVDYWNoZSgpO1xuICAgIG1lcmdlZENvbnRleHQuZGVmYXVsdENhY2hlID0gIWNhY2hlICYmIHBhcmVudENvbnRleHQuZGVmYXVsdENhY2hlO1xuICAgIHJldHVybiBtZXJnZWRDb250ZXh0O1xuICB9LCBbcGFyZW50Q29udGV4dCwgcmVzdFByb3BzXSwgZnVuY3Rpb24gKHByZXYsIG5leHQpIHtcbiAgICByZXR1cm4gIWlzRXF1YWwocHJldlswXSwgbmV4dFswXSwgdHJ1ZSkgfHwgIWlzRXF1YWwocHJldlsxXSwgbmV4dFsxXSwgdHJ1ZSk7XG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3R5bGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRcbiAgfSwgY2hpbGRyZW4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IFN0eWxlQ29udGV4dDsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gQ2FjaGUgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgZnVuY3Rpb24gc2FtZURlcml2YXRpdmVPcHRpb24obGVmdCwgcmlnaHQpIHtcbiAgaWYgKGxlZnQubGVuZ3RoICE9PSByaWdodC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZWZ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxlZnRbaV0gIT09IHJpZ2h0W2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxudmFyIFRoZW1lQ2FjaGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUaGVtZUNhY2hlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUaGVtZUNhY2hlKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjYWNoZVwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImtleXNcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjYWNoZUNhbGxUaW1lc1wiLCB2b2lkIDApO1xuICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5rZXlzID0gW107XG4gICAgdGhpcy5jYWNoZUNhbGxUaW1lcyA9IDA7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKFRoZW1lQ2FjaGUsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2l6ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmtleXMubGVuZ3RoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbnRlcm5hbEdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnRlcm5hbEdldChkZXJpdmF0aXZlT3B0aW9uKSB7XG4gICAgICB2YXIgX2NhY2hlMiwgX2NhY2hlMztcbiAgICAgIHZhciB1cGRhdGVDYWxsVGltZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgICAgdmFyIGNhY2hlID0ge1xuICAgICAgICBtYXA6IHRoaXMuY2FjaGVcbiAgICAgIH07XG4gICAgICBkZXJpdmF0aXZlT3B0aW9uLmZvckVhY2goZnVuY3Rpb24gKGRlcml2YXRpdmUpIHtcbiAgICAgICAgaWYgKCFjYWNoZSkge1xuICAgICAgICAgIGNhY2hlID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBfY2FjaGU7XG4gICAgICAgICAgY2FjaGUgPSAoX2NhY2hlID0gY2FjaGUpID09PSBudWxsIHx8IF9jYWNoZSA9PT0gdm9pZCAwIHx8IChfY2FjaGUgPSBfY2FjaGUubWFwKSA9PT0gbnVsbCB8fCBfY2FjaGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jYWNoZS5nZXQoZGVyaXZhdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKChfY2FjaGUyID0gY2FjaGUpICE9PSBudWxsICYmIF9jYWNoZTIgIT09IHZvaWQgMCAmJiBfY2FjaGUyLnZhbHVlICYmIHVwZGF0ZUNhbGxUaW1lcykge1xuICAgICAgICBjYWNoZS52YWx1ZVsxXSA9IHRoaXMuY2FjaGVDYWxsVGltZXMrKztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoX2NhY2hlMyA9IGNhY2hlKSA9PT0gbnVsbCB8fCBfY2FjaGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2FjaGUzLnZhbHVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGRlcml2YXRpdmVPcHRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRpbnRlcm5hbEdldDtcbiAgICAgIHJldHVybiAoX3RoaXMkaW50ZXJuYWxHZXQgPSB0aGlzLmludGVybmFsR2V0KGRlcml2YXRpdmVPcHRpb24sIHRydWUpKSA9PT0gbnVsbCB8fCBfdGhpcyRpbnRlcm5hbEdldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkaW50ZXJuYWxHZXRbMF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXMoZGVyaXZhdGl2ZU9wdGlvbikge1xuICAgICAgcmV0dXJuICEhdGhpcy5pbnRlcm5hbEdldChkZXJpdmF0aXZlT3B0aW9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChkZXJpdmF0aXZlT3B0aW9uLCB2YWx1ZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIC8vIE5ldyBjYWNoZVxuICAgICAgaWYgKCF0aGlzLmhhcyhkZXJpdmF0aXZlT3B0aW9uKSkge1xuICAgICAgICBpZiAodGhpcy5zaXplKCkgKyAxID4gVGhlbWVDYWNoZS5NQVhfQ0FDSEVfU0laRSArIFRoZW1lQ2FjaGUuTUFYX0NBQ0hFX09GRlNFVCkge1xuICAgICAgICAgIHZhciBfdGhpcyRrZXlzJHJlZHVjZSA9IHRoaXMua2V5cy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5KSB7XG4gICAgICAgICAgICAgIHZhciBfcmVzdWx0ID0gX3NsaWNlZFRvQXJyYXkocmVzdWx0LCAyKSxcbiAgICAgICAgICAgICAgICBjYWxsVGltZXMgPSBfcmVzdWx0WzFdO1xuICAgICAgICAgICAgICBpZiAoX3RoaXMuaW50ZXJuYWxHZXQoa2V5KVsxXSA8IGNhbGxUaW1lcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBba2V5LCBfdGhpcy5pbnRlcm5hbEdldChrZXkpWzFdXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSwgW3RoaXMua2V5c1swXSwgdGhpcy5jYWNoZUNhbGxUaW1lc10pLFxuICAgICAgICAgICAgX3RoaXMka2V5cyRyZWR1Y2UyID0gX3NsaWNlZFRvQXJyYXkoX3RoaXMka2V5cyRyZWR1Y2UsIDEpLFxuICAgICAgICAgICAgdGFyZ2V0S2V5ID0gX3RoaXMka2V5cyRyZWR1Y2UyWzBdO1xuICAgICAgICAgIHRoaXMuZGVsZXRlKHRhcmdldEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5rZXlzLnB1c2goZGVyaXZhdGl2ZU9wdGlvbik7XG4gICAgICB9XG4gICAgICB2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuICAgICAgZGVyaXZhdGl2ZU9wdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChkZXJpdmF0aXZlLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IGRlcml2YXRpdmVPcHRpb24ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGNhY2hlLnNldChkZXJpdmF0aXZlLCB7XG4gICAgICAgICAgICB2YWx1ZTogW3ZhbHVlLCBfdGhpcy5jYWNoZUNhbGxUaW1lcysrXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjYWNoZVZhbHVlID0gY2FjaGUuZ2V0KGRlcml2YXRpdmUpO1xuICAgICAgICAgIGlmICghY2FjaGVWYWx1ZSkge1xuICAgICAgICAgICAgY2FjaGUuc2V0KGRlcml2YXRpdmUsIHtcbiAgICAgICAgICAgICAgbWFwOiBuZXcgTWFwKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNhY2hlVmFsdWUubWFwKSB7XG4gICAgICAgICAgICBjYWNoZVZhbHVlLm1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FjaGUgPSBjYWNoZS5nZXQoZGVyaXZhdGl2ZSkubWFwO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVsZXRlQnlQYXRoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUJ5UGF0aChjdXJyZW50Q2FjaGUsIGRlcml2YXRpdmVzKSB7XG4gICAgICB2YXIgY2FjaGUgPSBjdXJyZW50Q2FjaGUuZ2V0KGRlcml2YXRpdmVzWzBdKTtcbiAgICAgIGlmIChkZXJpdmF0aXZlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFyIF9jYWNoZSR2YWx1ZTtcbiAgICAgICAgaWYgKCFjYWNoZS5tYXApIHtcbiAgICAgICAgICBjdXJyZW50Q2FjaGUuZGVsZXRlKGRlcml2YXRpdmVzWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50Q2FjaGUuc2V0KGRlcml2YXRpdmVzWzBdLCB7XG4gICAgICAgICAgICBtYXA6IGNhY2hlLm1hcFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoX2NhY2hlJHZhbHVlID0gY2FjaGUudmFsdWUpID09PSBudWxsIHx8IF9jYWNoZSR2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NhY2hlJHZhbHVlWzBdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZGVsZXRlQnlQYXRoKGNhY2hlLm1hcCwgZGVyaXZhdGl2ZXMuc2xpY2UoMSkpO1xuICAgICAgaWYgKCghY2FjaGUubWFwIHx8IGNhY2hlLm1hcC5zaXplID09PSAwKSAmJiAhY2FjaGUudmFsdWUpIHtcbiAgICAgICAgY3VycmVudENhY2hlLmRlbGV0ZShkZXJpdmF0aXZlc1swXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWxldGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShkZXJpdmF0aXZlT3B0aW9uKSB7XG4gICAgICAvLyBJZiBjYWNoZSBleGlzdHNcbiAgICAgIGlmICh0aGlzLmhhcyhkZXJpdmF0aXZlT3B0aW9uKSkge1xuICAgICAgICB0aGlzLmtleXMgPSB0aGlzLmtleXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuICFzYW1lRGVyaXZhdGl2ZU9wdGlvbihpdGVtLCBkZXJpdmF0aXZlT3B0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGV0ZUJ5UGF0aCh0aGlzLmNhY2hlLCBkZXJpdmF0aXZlT3B0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUaGVtZUNhY2hlO1xufSgpO1xuX2RlZmluZVByb3BlcnR5KFRoZW1lQ2FjaGUsIFwiTUFYX0NBQ0hFX1NJWkVcIiwgMjApO1xuX2RlZmluZVByb3BlcnR5KFRoZW1lQ2FjaGUsIFwiTUFYX0NBQ0hFX09GRlNFVFwiLCA1KTtcbmV4cG9ydCB7IFRoZW1lQ2FjaGUgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCB7IHdhcm5pbmcgfSBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG52YXIgdXVpZCA9IDA7XG5cbi8qKlxuICogVGhlbWUgd2l0aCBhbGdvcml0aG1zIHRvIGRlcml2ZSB0b2tlbnMgZnJvbSBkZXNpZ24gdG9rZW5zLlxuICogVXNlIGBjcmVhdGVUaGVtZWAgZmlyc3Qgd2hpY2ggd2lsbCBoZWxwIHRvIG1hbmFnZSB0aGUgdGhlbWUgaW5zdGFuY2UgY2FjaGUuXG4gKi9cbnZhciBUaGVtZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRoZW1lKGRlcml2YXRpdmVzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRoZW1lKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZXJpdmF0aXZlc1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlkXCIsIHZvaWQgMCk7XG4gICAgdGhpcy5kZXJpdmF0aXZlcyA9IEFycmF5LmlzQXJyYXkoZGVyaXZhdGl2ZXMpID8gZGVyaXZhdGl2ZXMgOiBbZGVyaXZhdGl2ZXNdO1xuICAgIHRoaXMuaWQgPSB1dWlkO1xuICAgIGlmIChkZXJpdmF0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHdhcm5pbmcoZGVyaXZhdGl2ZXMubGVuZ3RoID4gMCwgJ1tBbnQgRGVzaWduIENTUy1pbi1KU10gVGhlbWUgc2hvdWxkIGhhdmUgYXQgbGVhc3Qgb25lIGRlcml2YXRpdmUgZnVuY3Rpb24uJyk7XG4gICAgfVxuICAgIHV1aWQgKz0gMTtcbiAgfVxuICBfY3JlYXRlQ2xhc3MoVGhlbWUsIFt7XG4gICAga2V5OiBcImdldERlcml2YXRpdmVUb2tlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmF0aXZlVG9rZW4odG9rZW4pIHtcbiAgICAgIHJldHVybiB0aGlzLmRlcml2YXRpdmVzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBkZXJpdmF0aXZlKSB7XG4gICAgICAgIHJldHVybiBkZXJpdmF0aXZlKHRva2VuLCByZXN1bHQpO1xuICAgICAgfSwgdW5kZWZpbmVkKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRoZW1lO1xufSgpO1xuZXhwb3J0IHsgVGhlbWUgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBUaGVtZUNhY2hlIGZyb20gXCIuL1RoZW1lQ2FjaGVcIjtcbmltcG9ydCBUaGVtZSBmcm9tIFwiLi9UaGVtZVwiO1xudmFyIGNhY2hlVGhlbWVzID0gbmV3IFRoZW1lQ2FjaGUoKTtcblxuLyoqXG4gKiBTYW1lIGFzIG5ldyBUaGVtZSwgYnV0IHdpbGwgYWx3YXlzIHJldHVybiBzYW1lIG9uZSBpZiBgZGVyaXZhdGl2ZWAgbm90IGNoYW5nZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVRoZW1lKGRlcml2YXRpdmVzKSB7XG4gIHZhciBkZXJpdmF0aXZlQXJyID0gQXJyYXkuaXNBcnJheShkZXJpdmF0aXZlcykgPyBkZXJpdmF0aXZlcyA6IFtkZXJpdmF0aXZlc107XG4gIC8vIENyZWF0ZSBuZXcgdGhlbWUgaWYgbm90IGV4aXN0XG4gIGlmICghY2FjaGVUaGVtZXMuaGFzKGRlcml2YXRpdmVBcnIpKSB7XG4gICAgY2FjaGVUaGVtZXMuc2V0KGRlcml2YXRpdmVBcnIsIG5ldyBUaGVtZShkZXJpdmF0aXZlQXJyKSk7XG4gIH1cblxuICAvLyBHZXQgdGhlbWUgZnJvbSBjYWNoZSBhbmQgcmV0dXJuXG4gIHJldHVybiBjYWNoZVRoZW1lcy5nZXQoZGVyaXZhdGl2ZUFycik7XG59IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgaGFzaCBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCBjYW5Vc2VEb20gZnJvbSBcInJjLXV0aWwvZXMvRG9tL2NhblVzZURvbVwiO1xuaW1wb3J0IHsgcmVtb3ZlQ1NTLCB1cGRhdGVDU1MgfSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vZHluYW1pY0NTU1wiO1xuaW1wb3J0IHsgQVRUUl9NQVJLLCBBVFRSX1RPS0VOIH0gZnJvbSBcIi4uL1N0eWxlQ29udGV4dFwiO1xuaW1wb3J0IHsgVGhlbWUgfSBmcm9tIFwiLi4vdGhlbWVcIjtcblxuLy8gQ3JlYXRlIGEgY2FjaGUgZm9yIG1lbW8gY29uY2F0XG5cbnZhciByZXN1bHRDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG52YXIgUkVTVUxUX1ZBTFVFID0ge307XG5leHBvcnQgZnVuY3Rpb24gbWVtb1Jlc3VsdChjYWxsYmFjaywgZGVwcykge1xuICB2YXIgY3VycmVudCA9IHJlc3VsdENhY2hlO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZGVwID0gZGVwc1tpXTtcbiAgICBpZiAoIWN1cnJlbnQuaGFzKGRlcCkpIHtcbiAgICAgIGN1cnJlbnQuc2V0KGRlcCwgbmV3IFdlYWtNYXAoKSk7XG4gICAgfVxuICAgIGN1cnJlbnQgPSBjdXJyZW50LmdldChkZXApO1xuICB9XG4gIGlmICghY3VycmVudC5oYXMoUkVTVUxUX1ZBTFVFKSkge1xuICAgIGN1cnJlbnQuc2V0KFJFU1VMVF9WQUxVRSwgY2FsbGJhY2soKSk7XG4gIH1cbiAgcmV0dXJuIGN1cnJlbnQuZ2V0KFJFU1VMVF9WQUxVRSk7XG59XG5cbi8vIENyZWF0ZSBhIGNhY2hlIGhlcmUgdG8gYXZvaWQgYWx3YXlzIGxvb3AgZ2VuZXJhdGVcbnZhciBmbGF0dGVuVG9rZW5DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogRmxhdHRlbiB0b2tlbiB0byBzdHJpbmcsIHRoaXMgd2lsbCBhdXRvIGNhY2hlIHRoZSByZXN1bHQgd2hlbiB0b2tlbiBub3QgY2hhbmdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuVG9rZW4odG9rZW4pIHtcbiAgdmFyIHN0ciA9IGZsYXR0ZW5Ub2tlbkNhY2hlLmdldCh0b2tlbikgfHwgJyc7XG4gIGlmICghc3RyKSB7XG4gICAgT2JqZWN0LmtleXModG9rZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gdG9rZW5ba2V5XTtcbiAgICAgIHN0ciArPSBrZXk7XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUaGVtZSkge1xuICAgICAgICBzdHIgKz0gdmFsdWUuaWQ7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlICYmIF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBzdHIgKz0gZmxhdHRlblRva2VuKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciArPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFB1dCBpbiBjYWNoZVxuICAgIGZsYXR0ZW5Ub2tlbkNhY2hlLnNldCh0b2tlbiwgc3RyKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZGVyaXZhdGl2ZSB0b2tlbiB0byBrZXkgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbjJrZXkodG9rZW4sIHNhbHQpIHtcbiAgcmV0dXJuIGhhc2goXCJcIi5jb25jYXQoc2FsdCwgXCJfXCIpLmNvbmNhdChmbGF0dGVuVG9rZW4odG9rZW4pKSk7XG59XG52YXIgcmFuZG9tU2VsZWN0b3JLZXkgPSBcInJhbmRvbS1cIi5jb25jYXQoRGF0ZS5ub3coKSwgXCItXCIpLmNvbmNhdChNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXC4vZywgJycpO1xuXG4vLyBNYWdpYyBgY29udGVudGAgZm9yIGRldGVjdCBzZWxlY3RvciBzdXBwb3J0XG52YXIgY2hlY2tDb250ZW50ID0gJ19iQW1Cb09fJztcbmZ1bmN0aW9uIHN1cHBvcnRTZWxlY3RvcihzdHlsZVN0ciwgaGFuZGxlRWxlbWVudCwgc3VwcG9ydENoZWNrKSB7XG4gIGlmIChjYW5Vc2VEb20oKSkge1xuICAgIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSRjb24sIF9lbGUkcGFyZW50Tm9kZTtcbiAgICB1cGRhdGVDU1Moc3R5bGVTdHIsIHJhbmRvbVNlbGVjdG9yS2V5KTtcbiAgICB2YXIgX2VsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIF9lbGUuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgIF9lbGUuc3R5bGUubGVmdCA9ICcwJztcbiAgICBfZWxlLnN0eWxlLnRvcCA9ICcwJztcbiAgICBoYW5kbGVFbGVtZW50ID09PSBudWxsIHx8IGhhbmRsZUVsZW1lbnQgPT09IHZvaWQgMCB8fCBoYW5kbGVFbGVtZW50KF9lbGUpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoX2VsZSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIF9lbGUuaW5uZXJIVE1MID0gJ1Rlc3QnO1xuICAgICAgX2VsZS5zdHlsZS56SW5kZXggPSAnOTk5OTk5OSc7XG4gICAgfVxuICAgIHZhciBzdXBwb3J0ID0gc3VwcG9ydENoZWNrID8gc3VwcG9ydENoZWNrKF9lbGUpIDogKF9nZXRDb21wdXRlZFN0eWxlJGNvbiA9IGdldENvbXB1dGVkU3R5bGUoX2VsZSkuY29udGVudCkgPT09IG51bGwgfHwgX2dldENvbXB1dGVkU3R5bGUkY29uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ2V0Q29tcHV0ZWRTdHlsZSRjb24uaW5jbHVkZXMoY2hlY2tDb250ZW50KTtcbiAgICAoX2VsZSRwYXJlbnROb2RlID0gX2VsZS5wYXJlbnROb2RlKSA9PT0gbnVsbCB8fCBfZWxlJHBhcmVudE5vZGUgPT09IHZvaWQgMCB8fCBfZWxlJHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoX2VsZSk7XG4gICAgcmVtb3ZlQ1NTKHJhbmRvbVNlbGVjdG9yS2V5KTtcbiAgICByZXR1cm4gc3VwcG9ydDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG52YXIgY2FuTGF5ZXIgPSB1bmRlZmluZWQ7XG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydExheWVyKCkge1xuICBpZiAoY2FuTGF5ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbkxheWVyID0gc3VwcG9ydFNlbGVjdG9yKFwiQGxheWVyIFwiLmNvbmNhdChyYW5kb21TZWxlY3RvcktleSwgXCIgeyAuXCIpLmNvbmNhdChyYW5kb21TZWxlY3RvcktleSwgXCIgeyBjb250ZW50OiBcXFwiXCIpLmNvbmNhdChjaGVja0NvbnRlbnQsIFwiXFxcIiFpbXBvcnRhbnQ7IH0gfVwiKSwgZnVuY3Rpb24gKGVsZSkge1xuICAgICAgZWxlLmNsYXNzTmFtZSA9IHJhbmRvbVNlbGVjdG9yS2V5O1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBjYW5MYXllcjtcbn1cbnZhciBjYW5XaGVyZSA9IHVuZGVmaW5lZDtcbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0V2hlcmUoKSB7XG4gIGlmIChjYW5XaGVyZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FuV2hlcmUgPSBzdXBwb3J0U2VsZWN0b3IoXCI6d2hlcmUoLlwiLmNvbmNhdChyYW5kb21TZWxlY3RvcktleSwgXCIpIHsgY29udGVudDogXFxcIlwiKS5jb25jYXQoY2hlY2tDb250ZW50LCBcIlxcXCIhaW1wb3J0YW50OyB9XCIpLCBmdW5jdGlvbiAoZWxlKSB7XG4gICAgICBlbGUuY2xhc3NOYW1lID0gcmFuZG9tU2VsZWN0b3JLZXk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGNhbldoZXJlO1xufVxudmFyIGNhbkxvZ2ljID0gdW5kZWZpbmVkO1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRMb2dpY1Byb3BzKCkge1xuICBpZiAoY2FuTG9naWMgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbkxvZ2ljID0gc3VwcG9ydFNlbGVjdG9yKFwiLlwiLmNvbmNhdChyYW5kb21TZWxlY3RvcktleSwgXCIgeyBpbnNldC1ibG9jazogOTNweCAhaW1wb3J0YW50OyB9XCIpLCBmdW5jdGlvbiAoZWxlKSB7XG4gICAgICBlbGUuY2xhc3NOYW1lID0gcmFuZG9tU2VsZWN0b3JLZXk7XG4gICAgfSwgZnVuY3Rpb24gKGVsZSkge1xuICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxlKS5ib3R0b20gPT09ICc5M3B4JztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gY2FuTG9naWM7XG59XG5leHBvcnQgdmFyIGlzQ2xpZW50U2lkZSA9IGNhblVzZURvbSgpO1xuZXhwb3J0IGZ1bmN0aW9uIHVuaXQobnVtKSB7XG4gIGlmICh0eXBlb2YgbnVtID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChudW0sIFwicHhcIik7XG4gIH1cbiAgcmV0dXJuIG51bTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b1N0eWxlU3RyKHN0eWxlLCB0b2tlbktleSwgc3R5bGVJZCkge1xuICB2YXIgX29iamVjdFNwcmVhZDI7XG4gIHZhciBjdXN0b21pemVBdHRycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gIHZhciBwbGFpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG4gIGlmIChwbGFpbikge1xuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuICB2YXIgYXR0cnMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1c3RvbWl6ZUF0dHJzKSwge30sIChfb2JqZWN0U3ByZWFkMiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX29iamVjdFNwcmVhZDIsIEFUVFJfVE9LRU4sIHRva2VuS2V5KSwgX2RlZmluZVByb3BlcnR5KF9vYmplY3RTcHJlYWQyLCBBVFRSX01BUkssIHN0eWxlSWQpLCBfb2JqZWN0U3ByZWFkMikpO1xuICB2YXIgYXR0clN0ciA9IE9iamVjdC5rZXlzKGF0dHJzKS5tYXAoZnVuY3Rpb24gKGF0dHIpIHtcbiAgICB2YXIgdmFsID0gYXR0cnNbYXR0cl07XG4gICAgcmV0dXJuIHZhbCA/IFwiXCIuY29uY2F0KGF0dHIsIFwiPVxcXCJcIikuY29uY2F0KHZhbCwgXCJcXFwiXCIpIDogbnVsbDtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH0pLmpvaW4oJyAnKTtcbiAgcmV0dXJuIFwiPHN0eWxlIFwiLmNvbmNhdChhdHRyU3RyLCBcIj5cIikuY29uY2F0KHN0eWxlLCBcIjwvc3R5bGU+XCIpO1xufSIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuZXhwb3J0IHZhciB0b2tlbjJDU1NWYXIgPSBmdW5jdGlvbiB0b2tlbjJDU1NWYXIodG9rZW4pIHtcbiAgdmFyIHByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gIHJldHVybiBcIi0tXCIuY29uY2F0KHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCItXCIpIDogJycpLmNvbmNhdCh0b2tlbikucmVwbGFjZSgvKFthLXowLTldKShbQS1aXSkvZywgJyQxLSQyJykucmVwbGFjZSgvKFtBLVpdKykoW0EtWl1bYS16MC05XSspL2csICckMS0kMicpLnJlcGxhY2UoLyhbYS16XSkoW0EtWjAtOV0pL2csICckMS0kMicpLnRvTG93ZXJDYXNlKCk7XG59O1xuZXhwb3J0IHZhciBzZXJpYWxpemVDU1NWYXIgPSBmdW5jdGlvbiBzZXJpYWxpemVDU1NWYXIoY3NzVmFycywgaGFzaElkLCBvcHRpb25zKSB7XG4gIGlmICghT2JqZWN0LmtleXMoY3NzVmFycykubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBcIi5cIi5jb25jYXQoaGFzaElkKS5jb25jYXQob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5zY29wZSA/IFwiLlwiLmNvbmNhdChvcHRpb25zLnNjb3BlKSA6ICcnLCBcIntcIikuY29uY2F0KE9iamVjdC5lbnRyaWVzKGNzc1ZhcnMpLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAga2V5ID0gX3JlZjJbMF0sXG4gICAgICB2YWx1ZSA9IF9yZWYyWzFdO1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChrZXksIFwiOlwiKS5jb25jYXQodmFsdWUsIFwiO1wiKTtcbiAgfSkuam9pbignJyksIFwifVwiKTtcbn07XG5leHBvcnQgdmFyIHRyYW5zZm9ybVRva2VuID0gZnVuY3Rpb24gdHJhbnNmb3JtVG9rZW4odG9rZW4sIHRoZW1lS2V5LCBjb25maWcpIHtcbiAgdmFyIGNzc1ZhcnMgPSB7fTtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBPYmplY3QuZW50cmllcyh0b2tlbikuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICB2YXIgX2NvbmZpZyRwcmVzZXJ2ZSwgX2NvbmZpZyRpZ25vcmU7XG4gICAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDIpLFxuICAgICAga2V5ID0gX3JlZjRbMF0sXG4gICAgICB2YWx1ZSA9IF9yZWY0WzFdO1xuICAgIGlmIChjb25maWcgIT09IG51bGwgJiYgY29uZmlnICE9PSB2b2lkIDAgJiYgKF9jb25maWckcHJlc2VydmUgPSBjb25maWcucHJlc2VydmUpICE9PSBudWxsICYmIF9jb25maWckcHJlc2VydmUgIT09IHZvaWQgMCAmJiBfY29uZmlnJHByZXNlcnZlW2tleV0pIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICgodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSAmJiAhKGNvbmZpZyAhPT0gbnVsbCAmJiBjb25maWcgIT09IHZvaWQgMCAmJiAoX2NvbmZpZyRpZ25vcmUgPSBjb25maWcuaWdub3JlKSAhPT0gbnVsbCAmJiBfY29uZmlnJGlnbm9yZSAhPT0gdm9pZCAwICYmIF9jb25maWckaWdub3JlW2tleV0pKSB7XG4gICAgICB2YXIgX2NvbmZpZyR1bml0bGVzcztcbiAgICAgIHZhciBjc3NWYXIgPSB0b2tlbjJDU1NWYXIoa2V5LCBjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcucHJlZml4KTtcbiAgICAgIGNzc1ZhcnNbY3NzVmFyXSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIShjb25maWcgIT09IG51bGwgJiYgY29uZmlnICE9PSB2b2lkIDAgJiYgKF9jb25maWckdW5pdGxlc3MgPSBjb25maWcudW5pdGxlc3MpICE9PSBudWxsICYmIF9jb25maWckdW5pdGxlc3MgIT09IHZvaWQgMCAmJiBfY29uZmlnJHVuaXRsZXNzW2tleV0pID8gXCJcIi5jb25jYXQodmFsdWUsIFwicHhcIikgOiBTdHJpbmcodmFsdWUpO1xuICAgICAgcmVzdWx0W2tleV0gPSBcInZhcihcIi5jb25jYXQoY3NzVmFyLCBcIilcIik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtyZXN1bHQsIHNlcmlhbGl6ZUNTU1Zhcihjc3NWYXJzLCB0aGVtZUtleSwge1xuICAgIHNjb3BlOiBjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuc2NvcGVcbiAgfSldO1xufTsiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuLy8gaW1wb3J0IGNhblVzZURvbSBmcm9tICdyYy11dGlsL2xpYi9Eb20vY2FuVXNlRG9tJztcbmltcG9ydCB1c2VMYXlvdXRFZmZlY3QgZnJvbSBcInJjLXV0aWwvZXMvaG9va3MvdXNlTGF5b3V0RWZmZWN0XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8vIFdlIG5lZWQgZnVsbHkgY2xvbmUgUmVhY3QgZnVuY3Rpb24gaGVyZVxuLy8gdG8gYXZvaWQgd2VicGFjayB3YXJuaW5nIFJlYWN0IDE3IGRvIG5vdCBleHBvcnQgYHVzZUlkYFxudmFyIGZ1bGxDbG9uZSA9IF9vYmplY3RTcHJlYWQoe30sIFJlYWN0KTtcbnZhciB1c2VJbnNlcnRpb25FZmZlY3QgPSBmdWxsQ2xvbmUudXNlSW5zZXJ0aW9uRWZmZWN0O1xuLyoqXG4gKiBQb2x5ZmlsbCBgdXNlSW5zZXJ0aW9uRWZmZWN0YCBmb3IgUmVhY3QgPCAxOFxuICogQHBhcmFtIHJlbmRlckVmZmVjdCB3aWxsIGJlIGV4ZWN1dGVkIGluIGB1c2VNZW1vYCwgYW5kIGRvIG5vdCBoYXZlIGNhbGxiYWNrXG4gKiBAcGFyYW0gZWZmZWN0IHdpbGwgYmUgZXhlY3V0ZWQgaW4gYHVzZUxheW91dEVmZmVjdGBcbiAqIEBwYXJhbSBkZXBzXG4gKi9cbnZhciB1c2VJbnNlcnRpb25FZmZlY3RQb2x5ZmlsbCA9IGZ1bmN0aW9uIHVzZUluc2VydGlvbkVmZmVjdFBvbHlmaWxsKHJlbmRlckVmZmVjdCwgZWZmZWN0LCBkZXBzKSB7XG4gIFJlYWN0LnVzZU1lbW8ocmVuZGVyRWZmZWN0LCBkZXBzKTtcbiAgdXNlTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZWZmZWN0KHRydWUpO1xuICB9LCBkZXBzKTtcbn07XG5cbi8qKlxuICogQ29tcGF0aWJsZSBgdXNlSW5zZXJ0aW9uRWZmZWN0YFxuICogd2lsbCB1c2UgYHVzZUluc2VydGlvbkVmZmVjdGAgaWYgUmVhY3QgdmVyc2lvbiA+PSAxOCxcbiAqIG90aGVyd2lzZSB1c2UgYHVzZUluc2VydGlvbkVmZmVjdFBvbHlmaWxsYC5cbiAqL1xudmFyIHVzZUNvbXBhdGlibGVJbnNlcnRpb25FZmZlY3QgPSB1c2VJbnNlcnRpb25FZmZlY3QgPyBmdW5jdGlvbiAocmVuZGVyRWZmZWN0LCBlZmZlY3QsIGRlcHMpIHtcbiAgcmV0dXJuIHVzZUluc2VydGlvbkVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmVuZGVyRWZmZWN0KCk7XG4gICAgcmV0dXJuIGVmZmVjdCgpO1xuICB9LCBkZXBzKTtcbn0gOiB1c2VJbnNlcnRpb25FZmZlY3RQb2x5ZmlsbDtcbmV4cG9ydCBkZWZhdWx0IHVzZUNvbXBhdGlibGVJbnNlcnRpb25FZmZlY3Q7IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCB7IHdhcm5pbmcgfSBmcm9tIFwicmMtdXRpbC9lcy93YXJuaW5nXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgZnVsbENsb25lID0gX29iamVjdFNwcmVhZCh7fSwgUmVhY3QpO1xudmFyIHVzZUluc2VydGlvbkVmZmVjdCA9IGZ1bGxDbG9uZS51c2VJbnNlcnRpb25FZmZlY3Q7XG5cbi8vIERPIE5PVCByZWdpc3RlciBmdW5jdGlvbnMgaW4gdXNlRWZmZWN0IGNsZWFudXAgZnVuY3Rpb24sIG9yIGZ1bmN0aW9ucyB0aGF0IHJlZ2lzdGVyZWQgd2lsbCBuZXZlciBiZSBjYWxsZWQuXG52YXIgdXNlQ2xlYW51cFJlZ2lzdGVyID0gZnVuY3Rpb24gdXNlQ2xlYW51cFJlZ2lzdGVyKGRlcHMpIHtcbiAgdmFyIGVmZmVjdENsZWFudXBzID0gW107XG4gIHZhciBjbGVhbnVwRmxhZyA9IGZhbHNlO1xuICBmdW5jdGlvbiByZWdpc3Rlcihmbikge1xuICAgIGlmIChjbGVhbnVwRmxhZykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ1tBbnQgRGVzaWduIENTUy1pbi1KU10gWW91IGFyZSByZWdpc3RlcmluZyBhIGNsZWFudXAgZnVuY3Rpb24gYWZ0ZXIgdW5tb3VudCwgd2hpY2ggd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0LicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlZmZlY3RDbGVhbnVwcy5wdXNoKGZuKTtcbiAgfVxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIC8vIENvbXBhdGlibGUgd2l0aCBzdHJpY3QgbW9kZVxuICAgIGNsZWFudXBGbGFnID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFudXBGbGFnID0gdHJ1ZTtcbiAgICAgIGlmIChlZmZlY3RDbGVhbnVwcy5sZW5ndGgpIHtcbiAgICAgICAgZWZmZWN0Q2xlYW51cHMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgZGVwcyk7XG4gIHJldHVybiByZWdpc3Rlcjtcbn07XG52YXIgdXNlUnVuID0gZnVuY3Rpb24gdXNlUnVuKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgZm4oKTtcbiAgfTtcbn07XG5cbi8vIE9ubHkgZW5hYmxlIHJlZ2lzdGVyIGluIFJlYWN0IDE4XG52YXIgdXNlRWZmZWN0Q2xlYW51cFJlZ2lzdGVyID0gdHlwZW9mIHVzZUluc2VydGlvbkVmZmVjdCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VDbGVhbnVwUmVnaXN0ZXIgOiB1c2VSdW47XG5leHBvcnQgZGVmYXVsdCB1c2VFZmZlY3RDbGVhbnVwUmVnaXN0ZXI7IiwiZnVuY3Rpb24gdXNlUHJvZEhNUigpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxudmFyIHdlYnBhY2tITVIgPSBmYWxzZTtcbmZ1bmN0aW9uIHVzZURldkhNUigpIHtcbiAgcmV0dXJuIHdlYnBhY2tITVI7XG59XG5leHBvcnQgZGVmYXVsdCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nID8gdXNlUHJvZEhNUiA6IHVzZURldkhNUjtcblxuLy8gV2VicGFjayBgbW9kdWxlLmhvdC5hY2NlcHRgIGRvIG5vdCBzdXBwb3J0IGFueSBkZXBzIHVwZGF0ZSB0cmlnZ2VyXG4vLyBXZSBoYXZlIHRvIGhhY2sgaGFuZGxlciB0byBmb3JjZSBtYXJrIGFzIEhSTVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlICYmIG1vZHVsZS5ob3QgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgdmFyIHdpbiA9IHdpbmRvdztcbiAgaWYgKHR5cGVvZiB3aW4ud2VicGFja0hvdFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBvcmlnaW5XZWJwYWNrSG90VXBkYXRlID0gd2luLndlYnBhY2tIb3RVcGRhdGU7XG4gICAgd2luLndlYnBhY2tIb3RVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3ZWJwYWNrSE1SID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB3ZWJwYWNrSE1SID0gZmFsc2U7XG4gICAgICB9LCAwKTtcbiAgICAgIHJldHVybiBvcmlnaW5XZWJwYWNrSG90VXBkYXRlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG59IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN0eWxlQ29udGV4dCBmcm9tIFwiLi4vU3R5bGVDb250ZXh0XCI7XG5pbXBvcnQgdXNlQ29tcGF0aWJsZUluc2VydGlvbkVmZmVjdCBmcm9tIFwiLi91c2VDb21wYXRpYmxlSW5zZXJ0aW9uRWZmZWN0XCI7XG5pbXBvcnQgdXNlRWZmZWN0Q2xlYW51cFJlZ2lzdGVyIGZyb20gXCIuL3VzZUVmZmVjdENsZWFudXBSZWdpc3RlclwiO1xuaW1wb3J0IHVzZUhNUiBmcm9tIFwiLi91c2VITVJcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUdsb2JhbENhY2hlKHByZWZpeCwga2V5UGF0aCwgY2FjaGVGbiwgb25DYWNoZVJlbW92ZSxcbi8vIEFkZCBhZGRpdGlvbmFsIGVmZmVjdCB0cmlnZ2VyIGJ5IGB1c2VJbnNlcnRpb25FZmZlY3RgXG5vbkNhY2hlRWZmZWN0KSB7XG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoU3R5bGVDb250ZXh0KSxcbiAgICBnbG9iYWxDYWNoZSA9IF9SZWFjdCR1c2VDb250ZXh0LmNhY2hlO1xuICB2YXIgZnVsbFBhdGggPSBbcHJlZml4XS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGtleVBhdGgpKTtcbiAgdmFyIGRlcHMgPSBmdWxsUGF0aC5qb2luKCdfJyk7XG4gIHZhciByZWdpc3RlciA9IHVzZUVmZmVjdENsZWFudXBSZWdpc3RlcihbZGVwc10pO1xuICB2YXIgSE1SVXBkYXRlID0gdXNlSE1SKCk7XG4gIHZhciBidWlsZENhY2hlID0gZnVuY3Rpb24gYnVpbGRDYWNoZSh1cGRhdGVyKSB7XG4gICAgZ2xvYmFsQ2FjaGUudXBkYXRlKGZ1bGxQYXRoLCBmdW5jdGlvbiAocHJldkNhY2hlKSB7XG4gICAgICB2YXIgX3JlZiA9IHByZXZDYWNoZSB8fCBbdW5kZWZpbmVkLCB1bmRlZmluZWRdLFxuICAgICAgICBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICBfcmVmMiQgPSBfcmVmMlswXSxcbiAgICAgICAgdGltZXMgPSBfcmVmMiQgPT09IHZvaWQgMCA/IDAgOiBfcmVmMiQsXG4gICAgICAgIGNhY2hlID0gX3JlZjJbMV07XG5cbiAgICAgIC8vIEhNUiBzaG91bGQgYWx3YXlzIGlnbm9yZSBjYWNoZSBzaW5jZSBkZXZlbG9wZXIgbWF5IGNoYW5nZSBpdFxuICAgICAgdmFyIHRtcENhY2hlID0gY2FjaGU7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjYWNoZSAmJiBITVJVcGRhdGUpIHtcbiAgICAgICAgb25DYWNoZVJlbW92ZSA9PT0gbnVsbCB8fCBvbkNhY2hlUmVtb3ZlID09PSB2b2lkIDAgfHwgb25DYWNoZVJlbW92ZSh0bXBDYWNoZSwgSE1SVXBkYXRlKTtcbiAgICAgICAgdG1wQ2FjaGUgPSBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIG1lcmdlZENhY2hlID0gdG1wQ2FjaGUgfHwgY2FjaGVGbigpO1xuICAgICAgdmFyIGRhdGEgPSBbdGltZXMsIG1lcmdlZENhY2hlXTtcblxuICAgICAgLy8gQ2FsbCB1cGRhdGVyIGlmIG5lZWQgYWRkaXRpb25hbCBsb2dpY1xuICAgICAgcmV0dXJuIHVwZGF0ZXIgPyB1cGRhdGVyKGRhdGEpIDogZGF0YTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBDcmVhdGUgY2FjaGVcbiAgUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgYnVpbGRDYWNoZSgpO1xuICB9LCAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgKi9cbiAgW2RlcHNdXG4gIC8qIGVzbGludC1lbmFibGUgKi8pO1xuXG4gIHZhciBjYWNoZUVudGl0eSA9IGdsb2JhbENhY2hlLmdldChmdWxsUGF0aCk7XG5cbiAgLy8gSE1SIGNsZWFuIHRoZSBjYWNoZSBidXQgbm90IHRyaWdnZXIgYHVzZU1lbW9gIGFnYWluXG4gIC8vIExldCdzIGZhbGxiYWNrIG9mIHRoaXNcbiAgLy8gcmVmIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2Nzc2luanMvaXNzdWVzLzEyN1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY2FjaGVFbnRpdHkpIHtcbiAgICBidWlsZENhY2hlKCk7XG4gICAgY2FjaGVFbnRpdHkgPSBnbG9iYWxDYWNoZS5nZXQoZnVsbFBhdGgpO1xuICB9XG4gIHZhciBjYWNoZUNvbnRlbnQgPSBjYWNoZUVudGl0eVsxXTtcblxuICAvLyBSZW1vdmUgaWYgbm8gbmVlZCBhbnltb3JlXG4gIHVzZUNvbXBhdGlibGVJbnNlcnRpb25FZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIG9uQ2FjaGVFZmZlY3QgPT09IG51bGwgfHwgb25DYWNoZUVmZmVjdCA9PT0gdm9pZCAwIHx8IG9uQ2FjaGVFZmZlY3QoY2FjaGVDb250ZW50KTtcbiAgfSwgZnVuY3Rpb24gKHBvbHlmaWxsKSB7XG4gICAgLy8gSXQncyBiYWQgdG8gY2FsbCBidWlsZCBhZ2FpbiBpbiBlZmZlY3QuXG4gICAgLy8gQnV0IHdlIGhhdmUgdG8gZG8gdGhpcyBzaW5jZSBTdHJpY3RNb2RlIHdpbGwgY2FsbCBlZmZlY3QgdHdpY2VcbiAgICAvLyB3aGljaCB3aWxsIGNsZWFyIGNhY2hlIG9uIHRoZSBmaXJzdCB0aW1lLlxuICAgIGJ1aWxkQ2FjaGUoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgX3JlZjQgPSBfc2xpY2VkVG9BcnJheShfcmVmMywgMiksXG4gICAgICAgIHRpbWVzID0gX3JlZjRbMF0sXG4gICAgICAgIGNhY2hlID0gX3JlZjRbMV07XG4gICAgICBpZiAocG9seWZpbGwgJiYgdGltZXMgPT09IDApIHtcbiAgICAgICAgb25DYWNoZUVmZmVjdCA9PT0gbnVsbCB8fCBvbkNhY2hlRWZmZWN0ID09PSB2b2lkIDAgfHwgb25DYWNoZUVmZmVjdChjYWNoZUNvbnRlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFt0aW1lcyArIDEsIGNhY2hlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZ2xvYmFsQ2FjaGUudXBkYXRlKGZ1bGxQYXRoLCBmdW5jdGlvbiAocHJldkNhY2hlKSB7XG4gICAgICAgIHZhciBfcmVmNSA9IHByZXZDYWNoZSB8fCBbXSxcbiAgICAgICAgICBfcmVmNiA9IF9zbGljZWRUb0FycmF5KF9yZWY1LCAyKSxcbiAgICAgICAgICBfcmVmNiQgPSBfcmVmNlswXSxcbiAgICAgICAgICB0aW1lcyA9IF9yZWY2JCA9PT0gdm9pZCAwID8gMCA6IF9yZWY2JCxcbiAgICAgICAgICBjYWNoZSA9IF9yZWY2WzFdO1xuICAgICAgICB2YXIgbmV4dENvdW50ID0gdGltZXMgLSAxO1xuICAgICAgICBpZiAobmV4dENvdW50ID09PSAwKSB7XG4gICAgICAgICAgLy8gQWx3YXlzIHJlbW92ZSBzdHlsZXMgaW4gdXNlRWZmZWN0IGNhbGxiYWNrXG4gICAgICAgICAgcmVnaXN0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gV2l0aCBwb2x5ZmlsbCwgcmVnaXN0ZXJlZCBjYWxsYmFjayB3aWxsIGFsd2F5cyBiZSBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgICAgICAgICAgLy8gQnV0IHdpdGhvdXQgcG9seWZpbGwsIGl0IHdpbGwgYmUgY2FsbGVkIGluIGVmZmVjdCBjbGVhbiB1cCxcbiAgICAgICAgICAgIC8vIEFuZCBieSB0aGF0IHRpbWUgdGhpcyBjYWNoZSBpcyBjbGVhbmVkIHVwLlxuICAgICAgICAgICAgaWYgKHBvbHlmaWxsIHx8ICFnbG9iYWxDYWNoZS5nZXQoZnVsbFBhdGgpKSB7XG4gICAgICAgICAgICAgIG9uQ2FjaGVSZW1vdmUgPT09IG51bGwgfHwgb25DYWNoZVJlbW92ZSA9PT0gdm9pZCAwIHx8IG9uQ2FjaGVSZW1vdmUoY2FjaGUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RpbWVzIC0gMSwgY2FjaGVdO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSwgW2RlcHNdKTtcbiAgcmV0dXJuIGNhY2hlQ29udGVudDtcbn0iLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IGhhc2ggZnJvbSAnQGVtb3Rpb24vaGFzaCc7XG5pbXBvcnQgeyB1cGRhdGVDU1MgfSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vZHluYW1pY0NTU1wiO1xuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdHlsZUNvbnRleHQsIHsgQVRUUl9NQVJLLCBBVFRSX1RPS0VOLCBDU1NfSU5fSlNfSU5TVEFOQ0UgfSBmcm9tIFwiLi4vU3R5bGVDb250ZXh0XCI7XG5pbXBvcnQgeyBmbGF0dGVuVG9rZW4sIG1lbW9SZXN1bHQsIHRva2VuMmtleSwgdG9TdHlsZVN0ciB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQgeyB0cmFuc2Zvcm1Ub2tlbiB9IGZyb20gXCIuLi91dGlsL2Nzcy12YXJpYWJsZXNcIjtcbmltcG9ydCB1c2VHbG9iYWxDYWNoZSBmcm9tIFwiLi91c2VHbG9iYWxDYWNoZVwiO1xudmFyIEVNUFRZX09WRVJSSURFID0ge307XG5cbi8vIEdlbmVyYXRlIGRpZmZlcmVudCBwcmVmaXggdG8gbWFrZSB1c2VyIHNlbGVjdG9yIGJyZWFrIGluIHByb2R1Y3Rpb24gZW52LlxuLy8gVGhpcyBoZWxwcyBkZXZlbG9wZXIgbm90IHRvIGRvIHN0eWxlIG92ZXJyaWRlIGRpcmVjdGx5IG9uIHRoZSBoYXNoIGlkLlxudmFyIGhhc2hQcmVmaXggPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gJ2Nzcy1kZXYtb25seS1kby1ub3Qtb3ZlcnJpZGUnIDogJ2Nzcyc7XG52YXIgdG9rZW5LZXlzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gcmVjb3JkQ2xlYW5Ub2tlbih0b2tlbktleSkge1xuICB0b2tlbktleXMuc2V0KHRva2VuS2V5LCAodG9rZW5LZXlzLmdldCh0b2tlbktleSkgfHwgMCkgKyAxKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlVGFncyhrZXksIGluc3RhbmNlSWQpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgc3R5bGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW1wiLmNvbmNhdChBVFRSX1RPS0VOLCBcIj1cXFwiXCIpLmNvbmNhdChrZXksIFwiXFxcIl1cIikpO1xuICAgIHN0eWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgaWYgKHN0eWxlW0NTU19JTl9KU19JTlNUQU5DRV0gPT09IGluc3RhbmNlSWQpIHtcbiAgICAgICAgdmFyIF9zdHlsZSRwYXJlbnROb2RlO1xuICAgICAgICAoX3N0eWxlJHBhcmVudE5vZGUgPSBzdHlsZS5wYXJlbnROb2RlKSA9PT0gbnVsbCB8fCBfc3R5bGUkcGFyZW50Tm9kZSA9PT0gdm9pZCAwIHx8IF9zdHlsZSRwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxudmFyIFRPS0VOX1RIUkVTSE9MRCA9IDA7XG5cbi8vIFJlbW92ZSB3aWxsIGNoZWNrIGN1cnJlbnQga2V5cyBmaXJzdFxuZnVuY3Rpb24gY2xlYW5Ub2tlblN0eWxlKHRva2VuS2V5LCBpbnN0YW5jZUlkKSB7XG4gIHRva2VuS2V5cy5zZXQodG9rZW5LZXksICh0b2tlbktleXMuZ2V0KHRva2VuS2V5KSB8fCAwKSAtIDEpO1xuICB2YXIgdG9rZW5LZXlMaXN0ID0gQXJyYXkuZnJvbSh0b2tlbktleXMua2V5cygpKTtcbiAgdmFyIGNsZWFuYWJsZUtleUxpc3QgPSB0b2tlbktleUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY291bnQgPSB0b2tlbktleXMuZ2V0KGtleSkgfHwgMDtcbiAgICByZXR1cm4gY291bnQgPD0gMDtcbiAgfSk7XG5cbiAgLy8gU2hvdWxkIGtlZXAgdG9rZW5zIHVuZGVyIHRocmVzaG9sZCBmb3Igbm90IHRvIGluc2VydCBzdHlsZSB0b28gb2Z0ZW5cbiAgaWYgKHRva2VuS2V5TGlzdC5sZW5ndGggLSBjbGVhbmFibGVLZXlMaXN0Lmxlbmd0aCA+IFRPS0VOX1RIUkVTSE9MRCkge1xuICAgIGNsZWFuYWJsZUtleUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZW1vdmVTdHlsZVRhZ3Moa2V5LCBpbnN0YW5jZUlkKTtcbiAgICAgIHRva2VuS2V5cy5kZWxldGUoa2V5KTtcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0IHZhciBnZXRDb21wdXRlZFRva2VuID0gZnVuY3Rpb24gZ2V0Q29tcHV0ZWRUb2tlbihvcmlnaW5Ub2tlbiwgb3ZlcnJpZGVUb2tlbiwgdGhlbWUsIGZvcm1hdCkge1xuICB2YXIgZGVyaXZhdGl2ZVRva2VuID0gdGhlbWUuZ2V0RGVyaXZhdGl2ZVRva2VuKG9yaWdpblRva2VuKTtcblxuICAvLyBNZXJnZSB3aXRoIG92ZXJyaWRlXG4gIHZhciBtZXJnZWREZXJpdmF0aXZlVG9rZW4gPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlcml2YXRpdmVUb2tlbiksIG92ZXJyaWRlVG9rZW4pO1xuXG4gIC8vIEZvcm1hdCBpZiBuZWVkZWRcbiAgaWYgKGZvcm1hdCkge1xuICAgIG1lcmdlZERlcml2YXRpdmVUb2tlbiA9IGZvcm1hdChtZXJnZWREZXJpdmF0aXZlVG9rZW4pO1xuICB9XG4gIHJldHVybiBtZXJnZWREZXJpdmF0aXZlVG9rZW47XG59O1xuZXhwb3J0IHZhciBUT0tFTl9QUkVGSVggPSAndG9rZW4nO1xuLyoqXG4gKiBDYWNoZSB0aGVtZSBkZXJpdmF0aXZlIHRva2VuIGFzIGdsb2JhbCBzaGFyZWQgb25lXG4gKiBAcGFyYW0gdGhlbWUgVGhlbWUgZW50aXR5XG4gKiBAcGFyYW0gdG9rZW5zIExpc3Qgb2YgdG9rZW5zLCB1c2VkIGZvciBjYWNoZS4gUGxlYXNlIGRvIG5vdCBkeW5hbWljIGdlbmVyYXRlIG9iamVjdCBkaXJlY3RseVxuICogQHBhcmFtIG9wdGlvbiBBZGRpdGlvbmFsIGNvbmZpZ1xuICogQHJldHVybnMgQ2FsbCBUaGVtZS5nZXREZXJpdmF0aXZlVG9rZW4odG9rZW5PYmplY3QpIHRvIGdldCB0b2tlblxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDYWNoZVRva2VuKHRoZW1lLCB0b2tlbnMpIHtcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBfdXNlQ29udGV4dCA9IHVzZUNvbnRleHQoU3R5bGVDb250ZXh0KSxcbiAgICBpbnN0YW5jZUlkID0gX3VzZUNvbnRleHQuY2FjaGUuaW5zdGFuY2VJZCxcbiAgICBjb250YWluZXIgPSBfdXNlQ29udGV4dC5jb250YWluZXI7XG4gIHZhciBfb3B0aW9uJHNhbHQgPSBvcHRpb24uc2FsdCxcbiAgICBzYWx0ID0gX29wdGlvbiRzYWx0ID09PSB2b2lkIDAgPyAnJyA6IF9vcHRpb24kc2FsdCxcbiAgICBfb3B0aW9uJG92ZXJyaWRlID0gb3B0aW9uLm92ZXJyaWRlLFxuICAgIG92ZXJyaWRlID0gX29wdGlvbiRvdmVycmlkZSA9PT0gdm9pZCAwID8gRU1QVFlfT1ZFUlJJREUgOiBfb3B0aW9uJG92ZXJyaWRlLFxuICAgIGZvcm1hdFRva2VuID0gb3B0aW9uLmZvcm1hdFRva2VuLFxuICAgIGNvbXB1dGUgPSBvcHRpb24uZ2V0Q29tcHV0ZWRUb2tlbixcbiAgICBjc3NWYXIgPSBvcHRpb24uY3NzVmFyO1xuXG4gIC8vIEJhc2ljIC0gV2UgZG8gYmFzaWMgY2FjaGUgaGVyZVxuICB2YXIgbWVyZ2VkVG9rZW4gPSBtZW1vUmVzdWx0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbi5hcHBseShPYmplY3QsIFt7fV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0b2tlbnMpKSk7XG4gIH0sIHRva2Vucyk7XG4gIHZhciB0b2tlblN0ciA9IGZsYXR0ZW5Ub2tlbihtZXJnZWRUb2tlbik7XG4gIHZhciBvdmVycmlkZVRva2VuU3RyID0gZmxhdHRlblRva2VuKG92ZXJyaWRlKTtcbiAgdmFyIGNzc1ZhclN0ciA9IGNzc1ZhciA/IGZsYXR0ZW5Ub2tlbihjc3NWYXIpIDogJyc7XG4gIHZhciBjYWNoZWRUb2tlbiA9IHVzZUdsb2JhbENhY2hlKFRPS0VOX1BSRUZJWCwgW3NhbHQsIHRoZW1lLmlkLCB0b2tlblN0ciwgb3ZlcnJpZGVUb2tlblN0ciwgY3NzVmFyU3RyXSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY3NzVmFyJGtleTtcbiAgICB2YXIgbWVyZ2VkRGVyaXZhdGl2ZVRva2VuID0gY29tcHV0ZSA/IGNvbXB1dGUobWVyZ2VkVG9rZW4sIG92ZXJyaWRlLCB0aGVtZSkgOiBnZXRDb21wdXRlZFRva2VuKG1lcmdlZFRva2VuLCBvdmVycmlkZSwgdGhlbWUsIGZvcm1hdFRva2VuKTtcblxuICAgIC8vIFJlcGxhY2UgdG9rZW4gdmFsdWUgd2l0aCBjc3MgdmFyaWFibGVzXG4gICAgdmFyIGFjdHVhbFRva2VuID0gX29iamVjdFNwcmVhZCh7fSwgbWVyZ2VkRGVyaXZhdGl2ZVRva2VuKTtcbiAgICB2YXIgY3NzVmFyc1N0ciA9ICcnO1xuICAgIGlmICghIWNzc1Zhcikge1xuICAgICAgdmFyIF90cmFuc2Zvcm1Ub2tlbiA9IHRyYW5zZm9ybVRva2VuKG1lcmdlZERlcml2YXRpdmVUb2tlbiwgY3NzVmFyLmtleSwge1xuICAgICAgICBwcmVmaXg6IGNzc1Zhci5wcmVmaXgsXG4gICAgICAgIGlnbm9yZTogY3NzVmFyLmlnbm9yZSxcbiAgICAgICAgdW5pdGxlc3M6IGNzc1Zhci51bml0bGVzcyxcbiAgICAgICAgcHJlc2VydmU6IGNzc1Zhci5wcmVzZXJ2ZVxuICAgICAgfSk7XG4gICAgICB2YXIgX3RyYW5zZm9ybVRva2VuMiA9IF9zbGljZWRUb0FycmF5KF90cmFuc2Zvcm1Ub2tlbiwgMik7XG4gICAgICBtZXJnZWREZXJpdmF0aXZlVG9rZW4gPSBfdHJhbnNmb3JtVG9rZW4yWzBdO1xuICAgICAgY3NzVmFyc1N0ciA9IF90cmFuc2Zvcm1Ub2tlbjJbMV07XG4gICAgfVxuXG4gICAgLy8gT3B0aW1pemUgZm9yIGB1c2VTdHlsZVJlZ2lzdGVyYCBwZXJmb3JtYW5jZVxuICAgIHZhciB0b2tlbktleSA9IHRva2VuMmtleShtZXJnZWREZXJpdmF0aXZlVG9rZW4sIHNhbHQpO1xuICAgIG1lcmdlZERlcml2YXRpdmVUb2tlbi5fdG9rZW5LZXkgPSB0b2tlbktleTtcbiAgICBhY3R1YWxUb2tlbi5fdG9rZW5LZXkgPSB0b2tlbjJrZXkoYWN0dWFsVG9rZW4sIHNhbHQpO1xuICAgIHZhciB0aGVtZUtleSA9IChfY3NzVmFyJGtleSA9IGNzc1ZhciA9PT0gbnVsbCB8fCBjc3NWYXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNzc1Zhci5rZXkpICE9PSBudWxsICYmIF9jc3NWYXIka2V5ICE9PSB2b2lkIDAgPyBfY3NzVmFyJGtleSA6IHRva2VuS2V5O1xuICAgIG1lcmdlZERlcml2YXRpdmVUb2tlbi5fdGhlbWVLZXkgPSB0aGVtZUtleTtcbiAgICByZWNvcmRDbGVhblRva2VuKHRoZW1lS2V5KTtcbiAgICB2YXIgaGFzaElkID0gXCJcIi5jb25jYXQoaGFzaFByZWZpeCwgXCItXCIpLmNvbmNhdChoYXNoKHRva2VuS2V5KSk7XG4gICAgbWVyZ2VkRGVyaXZhdGl2ZVRva2VuLl9oYXNoSWQgPSBoYXNoSWQ7IC8vIE5vdCB1c2VkXG5cbiAgICByZXR1cm4gW21lcmdlZERlcml2YXRpdmVUb2tlbiwgaGFzaElkLCBhY3R1YWxUb2tlbiwgY3NzVmFyc1N0ciwgKGNzc1ZhciA9PT0gbnVsbCB8fCBjc3NWYXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNzc1Zhci5rZXkpIHx8ICcnXTtcbiAgfSwgZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgLy8gUmVtb3ZlIHRva2VuIHdpbGwgcmVtb3ZlIGFsbCByZWxhdGVkIHN0eWxlXG4gICAgY2xlYW5Ub2tlblN0eWxlKGNhY2hlWzBdLl90aGVtZUtleSwgaW5zdGFuY2VJZCk7XG4gIH0sIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgNCksXG4gICAgICB0b2tlbiA9IF9yZWYyWzBdLFxuICAgICAgY3NzVmFyc1N0ciA9IF9yZWYyWzNdO1xuICAgIGlmIChjc3NWYXIgJiYgY3NzVmFyc1N0cikge1xuICAgICAgdmFyIHN0eWxlID0gdXBkYXRlQ1NTKGNzc1ZhcnNTdHIsIGhhc2goXCJjc3MtdmFyaWFibGVzLVwiLmNvbmNhdCh0b2tlbi5fdGhlbWVLZXkpKSwge1xuICAgICAgICBtYXJrOiBBVFRSX01BUkssXG4gICAgICAgIHByZXBlbmQ6ICdxdWV1ZScsXG4gICAgICAgIGF0dGFjaFRvOiBjb250YWluZXIsXG4gICAgICAgIHByaW9yaXR5OiAtOTk5XG4gICAgICB9KTtcbiAgICAgIHN0eWxlW0NTU19JTl9KU19JTlNUQU5DRV0gPSBpbnN0YW5jZUlkO1xuXG4gICAgICAvLyBVc2VkIGZvciBgdXNlQ2FjaGVUb2tlbmAgdG8gcmVtb3ZlIG9uIGJhdGNoIHdoZW4gdG9rZW4gcmVtb3ZlZFxuICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKEFUVFJfVE9LRU4sIHRva2VuLl90aGVtZUtleSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNhY2hlZFRva2VuO1xufVxuZXhwb3J0IHZhciBleHRyYWN0ID0gZnVuY3Rpb24gZXh0cmFjdChjYWNoZSwgZWZmZWN0U3R5bGVzLCBvcHRpb25zKSB7XG4gIHZhciBfY2FjaGUgPSBfc2xpY2VkVG9BcnJheShjYWNoZSwgNSksXG4gICAgcmVhbFRva2VuID0gX2NhY2hlWzJdLFxuICAgIHN0eWxlU3RyID0gX2NhY2hlWzNdLFxuICAgIGNzc1ZhcktleSA9IF9jYWNoZVs0XTtcbiAgdmFyIF9yZWYzID0gb3B0aW9ucyB8fCB7fSxcbiAgICBwbGFpbiA9IF9yZWYzLnBsYWluO1xuICBpZiAoIXN0eWxlU3RyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHN0eWxlSWQgPSByZWFsVG9rZW4uX3Rva2VuS2V5O1xuICB2YXIgb3JkZXIgPSAtOTk5O1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT0gU3R5bGUgPT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBVc2VkIGZvciByYy11dGlsXG4gIHZhciBzaGFyZWRBdHRycyA9IHtcbiAgICAnZGF0YS1yYy1vcmRlcic6ICdwcmVwZW5kUXVldWUnLFxuICAgICdkYXRhLXJjLXByaW9yaXR5JzogXCJcIi5jb25jYXQob3JkZXIpXG4gIH07XG4gIHZhciBzdHlsZVRleHQgPSB0b1N0eWxlU3RyKHN0eWxlU3RyLCBjc3NWYXJLZXksIHN0eWxlSWQsIHNoYXJlZEF0dHJzLCBwbGFpbik7XG4gIHJldHVybiBbb3JkZXIsIHN0eWxlSWQsIHN0eWxlVGV4dF07XG59OyIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBjYW5Vc2VEb20gZnJvbSBcInJjLXV0aWwvZXMvRG9tL2NhblVzZURvbVwiO1xuaW1wb3J0IHsgQVRUUl9NQVJLIH0gZnJvbSBcIi4uL1N0eWxlQ29udGV4dFwiO1xuZXhwb3J0IHZhciBBVFRSX0NBQ0hFX01BUCA9ICdkYXRhLWFudC1jc3NpbmpzLWNhY2hlLXBhdGgnO1xuXG4vKipcbiAqIFRoaXMgbWFya3Mgc3R5bGUgZnJvbSB0aGUgY3NzIGZpbGUuXG4gKiBXaGljaCBtZWFucyBub3QgZXhpc3QgaW4gYDxzdHlsZSAvPmAgdGFnLlxuICovXG5leHBvcnQgdmFyIENTU19GSUxFX1NUWUxFID0gJ19GSUxFX1NUWUxFX18nO1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZShjYWNoZVBhdGhNYXApIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGNhY2hlUGF0aE1hcCkubWFwKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgdmFyIGhhc2ggPSBjYWNoZVBhdGhNYXBbcGF0aF07XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHBhdGgsIFwiOlwiKS5jb25jYXQoaGFzaCk7XG4gIH0pLmpvaW4oJzsnKTtcbn1cbnZhciBjYWNoZVBhdGhNYXA7XG52YXIgZnJvbUNTU0ZpbGUgPSB0cnVlO1xuXG4vKipcbiAqIEBwcml2YXRlIFRlc3QgdXNhZ2Ugb25seS4gQ2FuIHNhdmUgcmVtb3ZlIGlmIG5vIG5lZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldChtb2NrQ2FjaGUpIHtcbiAgdmFyIGZyb21GaWxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICBjYWNoZVBhdGhNYXAgPSBtb2NrQ2FjaGU7XG4gIGZyb21DU1NGaWxlID0gZnJvbUZpbGU7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZSgpIHtcbiAgaWYgKCFjYWNoZVBhdGhNYXApIHtcbiAgICBjYWNoZVBhdGhNYXAgPSB7fTtcbiAgICBpZiAoY2FuVXNlRG9tKCkpIHtcbiAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRpdi5jbGFzc05hbWUgPSBBVFRSX0NBQ0hFX01BUDtcbiAgICAgIGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICBkaXYuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgZGl2LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgIHZhciBjb250ZW50ID0gZ2V0Q29tcHV0ZWRTdHlsZShkaXYpLmNvbnRlbnQgfHwgJyc7XG4gICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9eXCIvLCAnJykucmVwbGFjZSgvXCIkLywgJycpO1xuXG4gICAgICAvLyBGaWxsIGRhdGFcbiAgICAgIGNvbnRlbnQuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHZhciBfaXRlbSRzcGxpdCA9IGl0ZW0uc3BsaXQoJzonKSxcbiAgICAgICAgICBfaXRlbSRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfaXRlbSRzcGxpdCwgMiksXG4gICAgICAgICAgcGF0aCA9IF9pdGVtJHNwbGl0MlswXSxcbiAgICAgICAgICBoYXNoID0gX2l0ZW0kc3BsaXQyWzFdO1xuICAgICAgICBjYWNoZVBhdGhNYXBbcGF0aF0gPSBoYXNoO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlbW92ZSBpbmxpbmUgcmVjb3JkIHN0eWxlXG4gICAgICB2YXIgaW5saW5lTWFwU3R5bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbXCIuY29uY2F0KEFUVFJfQ0FDSEVfTUFQLCBcIl1cIikpO1xuICAgICAgaWYgKGlubGluZU1hcFN0eWxlKSB7XG4gICAgICAgIHZhciBfaW5saW5lTWFwU3R5bGUkcGFyZW47XG4gICAgICAgIGZyb21DU1NGaWxlID0gZmFsc2U7XG4gICAgICAgIChfaW5saW5lTWFwU3R5bGUkcGFyZW4gPSBpbmxpbmVNYXBTdHlsZS5wYXJlbnROb2RlKSA9PT0gbnVsbCB8fCBfaW5saW5lTWFwU3R5bGUkcGFyZW4gPT09IHZvaWQgMCB8fCBfaW5saW5lTWFwU3R5bGUkcGFyZW4ucmVtb3ZlQ2hpbGQoaW5saW5lTWFwU3R5bGUpO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkaXYpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGV4aXN0UGF0aChwYXRoKSB7XG4gIHByZXBhcmUoKTtcbiAgcmV0dXJuICEhY2FjaGVQYXRoTWFwW3BhdGhdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlQW5kSGFzaChwYXRoKSB7XG4gIHZhciBoYXNoID0gY2FjaGVQYXRoTWFwW3BhdGhdO1xuICB2YXIgc3R5bGVTdHIgPSBudWxsO1xuICBpZiAoaGFzaCAmJiBjYW5Vc2VEb20oKSkge1xuICAgIGlmIChmcm9tQ1NTRmlsZSkge1xuICAgICAgc3R5bGVTdHIgPSBDU1NfRklMRV9TVFlMRTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9zdHlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtcIi5jb25jYXQoQVRUUl9NQVJLLCBcIj1cXFwiXCIpLmNvbmNhdChjYWNoZVBhdGhNYXBbcGF0aF0sIFwiXFxcIl1cIikpO1xuICAgICAgaWYgKF9zdHlsZSkge1xuICAgICAgICBzdHlsZVN0ciA9IF9zdHlsZS5pbm5lckhUTUw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDbGVhbiB1cCBzaW5jZSBub3QgZXhpc3QgYW55bW9yZVxuICAgICAgICBkZWxldGUgY2FjaGVQYXRoTWFwW3BhdGhdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gW3N0eWxlU3RyLCBoYXNoXTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IGhhc2ggZnJvbSAnQGVtb3Rpb24vaGFzaCc7XG5pbXBvcnQgeyByZW1vdmVDU1MsIHVwZGF0ZUNTUyB9IGZyb20gXCJyYy11dGlsL2VzL0RvbS9keW5hbWljQ1NTXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgdW5pdGxlc3MgZnJvbSAnQGVtb3Rpb24vdW5pdGxlc3MnO1xuaW1wb3J0IHsgY29tcGlsZSwgc2VyaWFsaXplLCBzdHJpbmdpZnkgfSBmcm9tICdzdHlsaXMnO1xuaW1wb3J0IHsgY29udGVudFF1b3Rlc0xpbnRlciwgaGFzaGVkQW5pbWF0aW9uTGludGVyIH0gZnJvbSBcIi4uL2xpbnRlcnNcIjtcbmltcG9ydCBTdHlsZUNvbnRleHQsIHsgQVRUUl9DQUNIRV9QQVRILCBBVFRSX01BUkssIEFUVFJfVE9LRU4sIENTU19JTl9KU19JTlNUQU5DRSB9IGZyb20gXCIuLi9TdHlsZUNvbnRleHRcIjtcbmltcG9ydCB7IGlzQ2xpZW50U2lkZSwgc3VwcG9ydExheWVyLCB0b1N0eWxlU3RyIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IENTU19GSUxFX1NUWUxFLCBleGlzdFBhdGgsIGdldFN0eWxlQW5kSGFzaCB9IGZyb20gXCIuLi91dGlsL2NhY2hlTWFwVXRpbFwiO1xuaW1wb3J0IHVzZUdsb2JhbENhY2hlIGZyb20gXCIuL3VzZUdsb2JhbENhY2hlXCI7XG52YXIgU0tJUF9DSEVDSyA9ICdfc2tpcF9jaGVja18nO1xudmFyIE1VTFRJX1ZBTFVFID0gJ19tdWx0aV92YWx1ZV8nO1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gPT0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXJzZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gUHJlcHJvY2Vzc29yIHN0eWxlIGNvbnRlbnQgdG8gYnJvd3NlciBzdXBwb3J0IG9uZVxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlKHN0eWxlU3RyKSB7XG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplKGNvbXBpbGUoc3R5bGVTdHIpLCBzdHJpbmdpZnkpO1xuICByZXR1cm4gc2VyaWFsaXplZC5yZXBsYWNlKC9cXHslJSVcXDpbXjtdO30vZywgJzsnKTtcbn1cbmZ1bmN0aW9uIGlzQ29tcG91bmRDU1NQcm9wZXJ0eSh2YWx1ZSkge1xuICByZXR1cm4gX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIChTS0lQX0NIRUNLIGluIHZhbHVlIHx8IE1VTFRJX1ZBTFVFIGluIHZhbHVlKTtcbn1cblxuLy8g5rOo5YWlIGhhc2gg5YC8XG5mdW5jdGlvbiBpbmplY3RTZWxlY3Rvckhhc2goa2V5LCBoYXNoSWQsIGhhc2hQcmlvcml0eSkge1xuICBpZiAoIWhhc2hJZCkge1xuICAgIHJldHVybiBrZXk7XG4gIH1cbiAgdmFyIGhhc2hDbGFzc05hbWUgPSBcIi5cIi5jb25jYXQoaGFzaElkKTtcbiAgdmFyIGhhc2hTZWxlY3RvciA9IGhhc2hQcmlvcml0eSA9PT0gJ2xvdycgPyBcIjp3aGVyZShcIi5jb25jYXQoaGFzaENsYXNzTmFtZSwgXCIpXCIpIDogaGFzaENsYXNzTmFtZTtcblxuICAvLyDms6jlhaUgaGFzaElkXG4gIHZhciBrZXlzID0ga2V5LnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgdmFyIF9maXJzdFBhdGgkbWF0Y2g7XG4gICAgdmFyIGZ1bGxQYXRoID0gay50cmltKCkuc3BsaXQoL1xccysvKTtcblxuICAgIC8vIOWmguaenCBTZWxlY3RvciDnrKzkuIDkuKrmmK8gSFRNTCBFbGVtZW5077yM6YKj5oiR5Lus5bCx5o+S5Yiw5a6D55qE5ZCO6Z2i44CC5Y+N5LmL77yM5bCx5o+S5Yiw5pyA5YmN6Z2i44CCXG4gICAgdmFyIGZpcnN0UGF0aCA9IGZ1bGxQYXRoWzBdIHx8ICcnO1xuICAgIHZhciBodG1sRWxlbWVudCA9ICgoX2ZpcnN0UGF0aCRtYXRjaCA9IGZpcnN0UGF0aC5tYXRjaCgvXlxcdysvKSkgPT09IG51bGwgfHwgX2ZpcnN0UGF0aCRtYXRjaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZpcnN0UGF0aCRtYXRjaFswXSkgfHwgJyc7XG4gICAgZmlyc3RQYXRoID0gXCJcIi5jb25jYXQoaHRtbEVsZW1lbnQpLmNvbmNhdChoYXNoU2VsZWN0b3IpLmNvbmNhdChmaXJzdFBhdGguc2xpY2UoaHRtbEVsZW1lbnQubGVuZ3RoKSk7XG4gICAgcmV0dXJuIFtmaXJzdFBhdGhdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZnVsbFBhdGguc2xpY2UoMSkpKS5qb2luKCcgJyk7XG4gIH0pO1xuICByZXR1cm4ga2V5cy5qb2luKCcsJyk7XG59XG4vLyBQYXJzZSBDU1NPYmplY3QgdG8gc3R5bGUgY29udGVudFxuZXhwb3J0IHZhciBwYXJzZVN0eWxlID0gZnVuY3Rpb24gcGFyc2VTdHlsZShpbnRlcnBvbGF0aW9uKSB7XG4gIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge1xuICAgICAgcm9vdDogdHJ1ZSxcbiAgICAgIHBhcmVudFNlbGVjdG9yczogW11cbiAgICB9LFxuICAgIHJvb3QgPSBfcmVmLnJvb3QsXG4gICAgaW5qZWN0SGFzaCA9IF9yZWYuaW5qZWN0SGFzaCxcbiAgICBwYXJlbnRTZWxlY3RvcnMgPSBfcmVmLnBhcmVudFNlbGVjdG9ycztcbiAgdmFyIGhhc2hJZCA9IGNvbmZpZy5oYXNoSWQsXG4gICAgbGF5ZXIgPSBjb25maWcubGF5ZXIsXG4gICAgcGF0aCA9IGNvbmZpZy5wYXRoLFxuICAgIGhhc2hQcmlvcml0eSA9IGNvbmZpZy5oYXNoUHJpb3JpdHksXG4gICAgX2NvbmZpZyR0cmFuc2Zvcm1lcnMgPSBjb25maWcudHJhbnNmb3JtZXJzLFxuICAgIHRyYW5zZm9ybWVycyA9IF9jb25maWckdHJhbnNmb3JtZXJzID09PSB2b2lkIDAgPyBbXSA6IF9jb25maWckdHJhbnNmb3JtZXJzLFxuICAgIF9jb25maWckbGludGVycyA9IGNvbmZpZy5saW50ZXJzLFxuICAgIGxpbnRlcnMgPSBfY29uZmlnJGxpbnRlcnMgPT09IHZvaWQgMCA/IFtdIDogX2NvbmZpZyRsaW50ZXJzO1xuICB2YXIgc3R5bGVTdHIgPSAnJztcbiAgdmFyIGVmZmVjdFN0eWxlID0ge307XG4gIGZ1bmN0aW9uIHBhcnNlS2V5ZnJhbWVzKGtleWZyYW1lcykge1xuICAgIHZhciBhbmltYXRpb25OYW1lID0ga2V5ZnJhbWVzLmdldE5hbWUoaGFzaElkKTtcbiAgICBpZiAoIWVmZmVjdFN0eWxlW2FuaW1hdGlvbk5hbWVdKSB7XG4gICAgICB2YXIgX3BhcnNlU3R5bGUgPSBwYXJzZVN0eWxlKGtleWZyYW1lcy5zdHlsZSwgY29uZmlnLCB7XG4gICAgICAgICAgcm9vdDogZmFsc2UsXG4gICAgICAgICAgcGFyZW50U2VsZWN0b3JzOiBwYXJlbnRTZWxlY3RvcnNcbiAgICAgICAgfSksXG4gICAgICAgIF9wYXJzZVN0eWxlMiA9IF9zbGljZWRUb0FycmF5KF9wYXJzZVN0eWxlLCAxKSxcbiAgICAgICAgX3BhcnNlZFN0ciA9IF9wYXJzZVN0eWxlMlswXTtcbiAgICAgIGVmZmVjdFN0eWxlW2FuaW1hdGlvbk5hbWVdID0gXCJAa2V5ZnJhbWVzIFwiLmNvbmNhdChrZXlmcmFtZXMuZ2V0TmFtZShoYXNoSWQpKS5jb25jYXQoX3BhcnNlZFN0cik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGZsYXR0ZW5MaXN0KGxpc3QpIHtcbiAgICB2YXIgZnVsbExpc3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgZmxhdHRlbkxpc3QoaXRlbSwgZnVsbExpc3QpO1xuICAgICAgfSBlbHNlIGlmIChpdGVtKSB7XG4gICAgICAgIGZ1bGxMaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZ1bGxMaXN0O1xuICB9XG4gIHZhciBmbGF0dGVuU3R5bGVMaXN0ID0gZmxhdHRlbkxpc3QoQXJyYXkuaXNBcnJheShpbnRlcnBvbGF0aW9uKSA/IGludGVycG9sYXRpb24gOiBbaW50ZXJwb2xhdGlvbl0pO1xuICBmbGF0dGVuU3R5bGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKG9yaWdpblN0eWxlKSB7XG4gICAgLy8gT25seSByb290IGxldmVsIGNhbiB1c2UgcmF3IHN0cmluZ1xuICAgIHZhciBzdHlsZSA9IHR5cGVvZiBvcmlnaW5TdHlsZSA9PT0gJ3N0cmluZycgJiYgIXJvb3QgPyB7fSA6IG9yaWdpblN0eWxlO1xuICAgIGlmICh0eXBlb2Ygc3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdHlsZVN0ciArPSBcIlwiLmNvbmNhdChzdHlsZSwgXCJcXG5cIik7XG4gICAgfSBlbHNlIGlmIChzdHlsZS5fa2V5ZnJhbWUpIHtcbiAgICAgIC8vIEtleWZyYW1lXG4gICAgICBwYXJzZUtleWZyYW1lcyhzdHlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtZXJnZWRTdHlsZSA9IHRyYW5zZm9ybWVycy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIHRyYW5zKSB7XG4gICAgICAgIHZhciBfdHJhbnMkdmlzaXQ7XG4gICAgICAgIHJldHVybiAodHJhbnMgPT09IG51bGwgfHwgdHJhbnMgPT09IHZvaWQgMCB8fCAoX3RyYW5zJHZpc2l0ID0gdHJhbnMudmlzaXQpID09PSBudWxsIHx8IF90cmFucyR2aXNpdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RyYW5zJHZpc2l0LmNhbGwodHJhbnMsIHByZXYpKSB8fCBwcmV2O1xuICAgICAgfSwgc3R5bGUpO1xuXG4gICAgICAvLyBOb3JtYWwgQ1NTT2JqZWN0XG4gICAgICBPYmplY3Qua2V5cyhtZXJnZWRTdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG1lcmdlZFN0eWxlW2tleV07XG4gICAgICAgIGlmIChfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgKGtleSAhPT0gJ2FuaW1hdGlvbk5hbWUnIHx8ICF2YWx1ZS5fa2V5ZnJhbWUpICYmICFpc0NvbXBvdW5kQ1NTUHJvcGVydHkodmFsdWUpKSB7XG4gICAgICAgICAgdmFyIHN1YkluamVjdEhhc2ggPSBmYWxzZTtcblxuICAgICAgICAgIC8vIOW9k+aIkOW1jOWll+WvueixoeadpeWkhOeQhlxuICAgICAgICAgIHZhciBtZXJnZWRLZXkgPSBrZXkudHJpbSgpO1xuICAgICAgICAgIC8vIFdoZXRoZXIgdHJlYXQgY2hpbGQgYXMgcm9vdC4gSW4gbW9zdCBjYXNlIGl0IGlzIGZhbHNlLlxuICAgICAgICAgIHZhciBuZXh0Um9vdCA9IGZhbHNlO1xuXG4gICAgICAgICAgLy8g5ouG5YiG5aSa5Liq6YCJ5oup5ZmoXG4gICAgICAgICAgaWYgKChyb290IHx8IGluamVjdEhhc2gpICYmIGhhc2hJZCkge1xuICAgICAgICAgICAgaWYgKG1lcmdlZEtleS5zdGFydHNXaXRoKCdAJykpIHtcbiAgICAgICAgICAgICAgLy8g55Wl6L+H5aqS5L2T5p+l6K+i77yM5Lqk57uZ5a2Q6IqC54K557un57ut5o+S5YWlIGhhc2hJZFxuICAgICAgICAgICAgICBzdWJJbmplY3RIYXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIOazqOWFpSBoYXNoSWRcbiAgICAgICAgICAgICAgbWVyZ2VkS2V5ID0gaW5qZWN0U2VsZWN0b3JIYXNoKGtleSwgaGFzaElkLCBoYXNoUHJpb3JpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAocm9vdCAmJiAhaGFzaElkICYmIChtZXJnZWRLZXkgPT09ICcmJyB8fCBtZXJnZWRLZXkgPT09ICcnKSkge1xuICAgICAgICAgICAgLy8gSW4gY2FzZSBvZiBgeyAnJic6IHsgYTogeyBjb2xvcjogJ3JlZCcgfSB9IH1gIG9yIGB7ICcnOiB7IGE6IHsgY29sb3I6ICdyZWQnIH0gfSB9YCB3aXRob3V0IGhhc2hJZCxcbiAgICAgICAgICAgIC8vIHdlIHdpbGwgZ2V0IGAme2E6e2NvbG9yOnJlZDt9fWAgb3IgYHthOntjb2xvcjpyZWQ7fX1gIHN0cmluZyBmb3Igc3R5bGlzIHRvIGNvbXBpbGUuXG4gICAgICAgICAgICAvLyBCdXQgaXQgZG9lcyBub3QgY29uZm9ybSB0byBzdHlsaXMgc3ludGF4LFxuICAgICAgICAgICAgLy8gYW5kIGZpbmFsbHkgd2Ugd2lsbCBnZXQgYHtjb2xvcjpyZWQ7fWAgYXMgY3NzLCB3aGljaCBpcyB3cm9uZy5cbiAgICAgICAgICAgIC8vIFNvIHdlIG5lZWQgdG8gcmVtb3ZlIGtleSBpbiByb290LCBhbmQgdHJlYXQgY2hpbGQgYHsgYTogeyBjb2xvcjogJ3JlZCcgfSB9YCBhcyByb290LlxuICAgICAgICAgICAgbWVyZ2VkS2V5ID0gJyc7XG4gICAgICAgICAgICBuZXh0Um9vdCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBfcGFyc2VTdHlsZTMgPSBwYXJzZVN0eWxlKHZhbHVlLCBjb25maWcsIHtcbiAgICAgICAgICAgICAgcm9vdDogbmV4dFJvb3QsXG4gICAgICAgICAgICAgIGluamVjdEhhc2g6IHN1YkluamVjdEhhc2gsXG4gICAgICAgICAgICAgIHBhcmVudFNlbGVjdG9yczogW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwYXJlbnRTZWxlY3RvcnMpLCBbbWVyZ2VkS2V5XSlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgX3BhcnNlU3R5bGU0ID0gX3NsaWNlZFRvQXJyYXkoX3BhcnNlU3R5bGUzLCAyKSxcbiAgICAgICAgICAgIF9wYXJzZWRTdHIyID0gX3BhcnNlU3R5bGU0WzBdLFxuICAgICAgICAgICAgY2hpbGRFZmZlY3RTdHlsZSA9IF9wYXJzZVN0eWxlNFsxXTtcbiAgICAgICAgICBlZmZlY3RTdHlsZSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZWZmZWN0U3R5bGUpLCBjaGlsZEVmZmVjdFN0eWxlKTtcbiAgICAgICAgICBzdHlsZVN0ciArPSBcIlwiLmNvbmNhdChtZXJnZWRLZXkpLmNvbmNhdChfcGFyc2VkU3RyMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF92YWx1ZTtcbiAgICAgICAgICBmdW5jdGlvbiBhcHBlbmRTdHlsZShjc3NLZXksIGNzc1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAoX3R5cGVvZih2YWx1ZSkgIT09ICdvYmplY3QnIHx8ICEodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCAmJiB2YWx1ZVtTS0lQX0NIRUNLXSkpKSB7XG4gICAgICAgICAgICAgIFtjb250ZW50UXVvdGVzTGludGVyLCBoYXNoZWRBbmltYXRpb25MaW50ZXJdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobGludGVycykpLmZvckVhY2goZnVuY3Rpb24gKGxpbnRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaW50ZXIoY3NzS2V5LCBjc3NWYWx1ZSwge1xuICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICAgICAgICAgIGhhc2hJZDogaGFzaElkLFxuICAgICAgICAgICAgICAgICAgcGFyZW50U2VsZWN0b3JzOiBwYXJlbnRTZWxlY3RvcnNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOWmguaenOaYr+agt+W8j+WImeebtOaOpeaPkuWFpVxuICAgICAgICAgICAgdmFyIHN0eWxlTmFtZSA9IGNzc0tleS5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiLmNvbmNhdChtYXRjaC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBBdXRvIHN1ZmZpeCB3aXRoIHB4XG4gICAgICAgICAgICB2YXIgZm9ybWF0VmFsdWUgPSBjc3NWYWx1ZTtcbiAgICAgICAgICAgIGlmICghdW5pdGxlc3NbY3NzS2V5XSAmJiB0eXBlb2YgZm9ybWF0VmFsdWUgPT09ICdudW1iZXInICYmIGZvcm1hdFZhbHVlICE9PSAwKSB7XG4gICAgICAgICAgICAgIGZvcm1hdFZhbHVlID0gXCJcIi5jb25jYXQoZm9ybWF0VmFsdWUsIFwicHhcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBhbmltYXRpb25OYW1lICYgS2V5ZnJhbWUgdmFsdWVcbiAgICAgICAgICAgIGlmIChjc3NLZXkgPT09ICdhbmltYXRpb25OYW1lJyAmJiBjc3NWYWx1ZSAhPT0gbnVsbCAmJiBjc3NWYWx1ZSAhPT0gdm9pZCAwICYmIGNzc1ZhbHVlLl9rZXlmcmFtZSkge1xuICAgICAgICAgICAgICBwYXJzZUtleWZyYW1lcyhjc3NWYWx1ZSk7XG4gICAgICAgICAgICAgIGZvcm1hdFZhbHVlID0gY3NzVmFsdWUuZ2V0TmFtZShoYXNoSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3R5bGVTdHIgKz0gXCJcIi5jb25jYXQoc3R5bGVOYW1lLCBcIjpcIikuY29uY2F0KGZvcm1hdFZhbHVlLCBcIjtcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBhY3R1YWxWYWx1ZSA9IChfdmFsdWUgPSB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudmFsdWUpICE9PSBudWxsICYmIF92YWx1ZSAhPT0gdm9pZCAwID8gX3ZhbHVlIDogdmFsdWU7XG4gICAgICAgICAgaWYgKF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwICYmIHZhbHVlW01VTFRJX1ZBTFVFXSAmJiBBcnJheS5pc0FycmF5KGFjdHVhbFZhbHVlKSkge1xuICAgICAgICAgICAgYWN0dWFsVmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICBhcHBlbmRTdHlsZShrZXksIGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFwcGVuZFN0eWxlKGtleSwgYWN0dWFsVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFyb290KSB7XG4gICAgc3R5bGVTdHIgPSBcIntcIi5jb25jYXQoc3R5bGVTdHIsIFwifVwiKTtcbiAgfSBlbHNlIGlmIChsYXllciAmJiBzdXBwb3J0TGF5ZXIoKSkge1xuICAgIHZhciBsYXllckNlbGxzID0gbGF5ZXIuc3BsaXQoJywnKTtcbiAgICB2YXIgbGF5ZXJOYW1lID0gbGF5ZXJDZWxsc1tsYXllckNlbGxzLmxlbmd0aCAtIDFdLnRyaW0oKTtcbiAgICBzdHlsZVN0ciA9IFwiQGxheWVyIFwiLmNvbmNhdChsYXllck5hbWUsIFwiIHtcIikuY29uY2F0KHN0eWxlU3RyLCBcIn1cIik7XG5cbiAgICAvLyBPcmRlciBvZiBsYXllciBpZiBuZWVkZWRcbiAgICBpZiAobGF5ZXJDZWxscy5sZW5ndGggPiAxKSB7XG4gICAgICAvLyB6b21iaWVKOiBzdHlsaXMgZG8gbm90IHN1cHBvcnQgbGF5ZXIgb3JkZXIsIHNvIHdlIG5lZWQgdG8gaGFuZGxlIGl0IG1hbnVhbGx5LlxuICAgICAgc3R5bGVTdHIgPSBcIkBsYXllciBcIi5jb25jYXQobGF5ZXIsIFwieyUlJTolfVwiKS5jb25jYXQoc3R5bGVTdHIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW3N0eWxlU3RyLCBlZmZlY3RTdHlsZV07XG59O1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyA9PSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVnaXN0ZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID09XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZnVuY3Rpb24gdW5pcXVlSGFzaChwYXRoLCBzdHlsZVN0cikge1xuICByZXR1cm4gaGFzaChcIlwiLmNvbmNhdChwYXRoLmpvaW4oJyUnKSkuY29uY2F0KHN0eWxlU3RyKSk7XG59XG5mdW5jdGlvbiBFbXB0eSgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5leHBvcnQgdmFyIFNUWUxFX1BSRUZJWCA9ICdzdHlsZSc7XG4vKipcbiAqIFJlZ2lzdGVyIGEgc3R5bGUgdG8gdGhlIGdsb2JhbCBzdHlsZSBzaGVldC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlU3R5bGVSZWdpc3RlcihpbmZvLCBzdHlsZUZuKSB7XG4gIHZhciB0b2tlbiA9IGluZm8udG9rZW4sXG4gICAgcGF0aCA9IGluZm8ucGF0aCxcbiAgICBoYXNoSWQgPSBpbmZvLmhhc2hJZCxcbiAgICBsYXllciA9IGluZm8ubGF5ZXIsXG4gICAgbm9uY2UgPSBpbmZvLm5vbmNlLFxuICAgIGNsaWVudE9ubHkgPSBpbmZvLmNsaWVudE9ubHksXG4gICAgX2luZm8kb3JkZXIgPSBpbmZvLm9yZGVyLFxuICAgIG9yZGVyID0gX2luZm8kb3JkZXIgPT09IHZvaWQgMCA/IDAgOiBfaW5mbyRvcmRlcjtcbiAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChTdHlsZUNvbnRleHQpLFxuICAgIGF1dG9DbGVhciA9IF9SZWFjdCR1c2VDb250ZXh0LmF1dG9DbGVhcixcbiAgICBtb2NrID0gX1JlYWN0JHVzZUNvbnRleHQubW9jayxcbiAgICBkZWZhdWx0Q2FjaGUgPSBfUmVhY3QkdXNlQ29udGV4dC5kZWZhdWx0Q2FjaGUsXG4gICAgaGFzaFByaW9yaXR5ID0gX1JlYWN0JHVzZUNvbnRleHQuaGFzaFByaW9yaXR5LFxuICAgIGNvbnRhaW5lciA9IF9SZWFjdCR1c2VDb250ZXh0LmNvbnRhaW5lcixcbiAgICBzc3JJbmxpbmUgPSBfUmVhY3QkdXNlQ29udGV4dC5zc3JJbmxpbmUsXG4gICAgdHJhbnNmb3JtZXJzID0gX1JlYWN0JHVzZUNvbnRleHQudHJhbnNmb3JtZXJzLFxuICAgIGxpbnRlcnMgPSBfUmVhY3QkdXNlQ29udGV4dC5saW50ZXJzLFxuICAgIGNhY2hlID0gX1JlYWN0JHVzZUNvbnRleHQuY2FjaGU7XG4gIHZhciB0b2tlbktleSA9IHRva2VuLl90b2tlbktleTtcbiAgdmFyIGZ1bGxQYXRoID0gW3Rva2VuS2V5XS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHBhdGgpKTtcblxuICAvLyBDaGVjayBpZiBuZWVkIGluc2VydCBzdHlsZVxuICB2YXIgaXNNZXJnZWRDbGllbnRTaWRlID0gaXNDbGllbnRTaWRlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBtb2NrICE9PSB1bmRlZmluZWQpIHtcbiAgICBpc01lcmdlZENsaWVudFNpZGUgPSBtb2NrID09PSAnY2xpZW50JztcbiAgfVxuICB2YXIgX3VzZUdsb2JhbENhY2hlID0gdXNlR2xvYmFsQ2FjaGUoU1RZTEVfUFJFRklYLCBmdWxsUGF0aCxcbiAgICAvLyBDcmVhdGUgY2FjaGUgaWYgbmVlZGVkXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNhY2hlUGF0aCA9IGZ1bGxQYXRoLmpvaW4oJ3wnKTtcblxuICAgICAgLy8gR2V0IHN0eWxlIGZyb20gU1NSIGlubGluZSBzdHlsZSBkaXJlY3RseVxuICAgICAgaWYgKGV4aXN0UGF0aChjYWNoZVBhdGgpKSB7XG4gICAgICAgIHZhciBfZ2V0U3R5bGVBbmRIYXNoID0gZ2V0U3R5bGVBbmRIYXNoKGNhY2hlUGF0aCksXG4gICAgICAgICAgX2dldFN0eWxlQW5kSGFzaDIgPSBfc2xpY2VkVG9BcnJheShfZ2V0U3R5bGVBbmRIYXNoLCAyKSxcbiAgICAgICAgICBpbmxpbmVDYWNoZVN0eWxlU3RyID0gX2dldFN0eWxlQW5kSGFzaDJbMF0sXG4gICAgICAgICAgc3R5bGVIYXNoID0gX2dldFN0eWxlQW5kSGFzaDJbMV07XG4gICAgICAgIGlmIChpbmxpbmVDYWNoZVN0eWxlU3RyKSB7XG4gICAgICAgICAgcmV0dXJuIFtpbmxpbmVDYWNoZVN0eWxlU3RyLCB0b2tlbktleSwgc3R5bGVIYXNoLCB7fSwgY2xpZW50T25seSwgb3JkZXJdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEdlbmVyYXRlIHN0eWxlXG4gICAgICB2YXIgc3R5bGVPYmogPSBzdHlsZUZuKCk7XG4gICAgICB2YXIgX3BhcnNlU3R5bGU1ID0gcGFyc2VTdHlsZShzdHlsZU9iaiwge1xuICAgICAgICAgIGhhc2hJZDogaGFzaElkLFxuICAgICAgICAgIGhhc2hQcmlvcml0eTogaGFzaFByaW9yaXR5LFxuICAgICAgICAgIGxheWVyOiBsYXllcixcbiAgICAgICAgICBwYXRoOiBwYXRoLmpvaW4oJy0nKSxcbiAgICAgICAgICB0cmFuc2Zvcm1lcnM6IHRyYW5zZm9ybWVycyxcbiAgICAgICAgICBsaW50ZXJzOiBsaW50ZXJzXG4gICAgICAgIH0pLFxuICAgICAgICBfcGFyc2VTdHlsZTYgPSBfc2xpY2VkVG9BcnJheShfcGFyc2VTdHlsZTUsIDIpLFxuICAgICAgICBwYXJzZWRTdHlsZSA9IF9wYXJzZVN0eWxlNlswXSxcbiAgICAgICAgZWZmZWN0U3R5bGUgPSBfcGFyc2VTdHlsZTZbMV07XG4gICAgICB2YXIgc3R5bGVTdHIgPSBub3JtYWxpemVTdHlsZShwYXJzZWRTdHlsZSk7XG4gICAgICB2YXIgc3R5bGVJZCA9IHVuaXF1ZUhhc2goZnVsbFBhdGgsIHN0eWxlU3RyKTtcbiAgICAgIHJldHVybiBbc3R5bGVTdHIsIHRva2VuS2V5LCBzdHlsZUlkLCBlZmZlY3RTdHlsZSwgY2xpZW50T25seSwgb3JkZXJdO1xuICAgIH0sXG4gICAgLy8gUmVtb3ZlIGNhY2hlIGlmIG5vIG5lZWRcbiAgICBmdW5jdGlvbiAoX3JlZjIsIGZyb21ITVIpIHtcbiAgICAgIHZhciBfcmVmMyA9IF9zbGljZWRUb0FycmF5KF9yZWYyLCAzKSxcbiAgICAgICAgc3R5bGVJZCA9IF9yZWYzWzJdO1xuICAgICAgaWYgKChmcm9tSE1SIHx8IGF1dG9DbGVhcikgJiYgaXNDbGllbnRTaWRlKSB7XG4gICAgICAgIHJlbW92ZUNTUyhzdHlsZUlkLCB7XG4gICAgICAgICAgbWFyazogQVRUUl9NQVJLXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gRWZmZWN0OiBJbmplY3Qgc3R5bGUgaGVyZVxuICAgIGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgdmFyIF9yZWY1ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjQsIDQpLFxuICAgICAgICBzdHlsZVN0ciA9IF9yZWY1WzBdLFxuICAgICAgICBfID0gX3JlZjVbMV0sXG4gICAgICAgIHN0eWxlSWQgPSBfcmVmNVsyXSxcbiAgICAgICAgZWZmZWN0U3R5bGUgPSBfcmVmNVszXTtcbiAgICAgIGlmIChpc01lcmdlZENsaWVudFNpZGUgJiYgc3R5bGVTdHIgIT09IENTU19GSUxFX1NUWUxFKSB7XG4gICAgICAgIHZhciBtZXJnZWRDU1NDb25maWcgPSB7XG4gICAgICAgICAgbWFyazogQVRUUl9NQVJLLFxuICAgICAgICAgIHByZXBlbmQ6ICdxdWV1ZScsXG4gICAgICAgICAgYXR0YWNoVG86IGNvbnRhaW5lcixcbiAgICAgICAgICBwcmlvcml0eTogb3JkZXJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG5vbmNlU3RyID0gdHlwZW9mIG5vbmNlID09PSAnZnVuY3Rpb24nID8gbm9uY2UoKSA6IG5vbmNlO1xuICAgICAgICBpZiAobm9uY2VTdHIpIHtcbiAgICAgICAgICBtZXJnZWRDU1NDb25maWcuY3NwID0ge1xuICAgICAgICAgICAgbm9uY2U6IG5vbmNlU3RyXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3R5bGUgPSB1cGRhdGVDU1Moc3R5bGVTdHIsIHN0eWxlSWQsIG1lcmdlZENTU0NvbmZpZyk7XG4gICAgICAgIHN0eWxlW0NTU19JTl9KU19JTlNUQU5DRV0gPSBjYWNoZS5pbnN0YW5jZUlkO1xuXG4gICAgICAgIC8vIFVzZWQgZm9yIGB1c2VDYWNoZVRva2VuYCB0byByZW1vdmUgb24gYmF0Y2ggd2hlbiB0b2tlbiByZW1vdmVkXG4gICAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZShBVFRSX1RPS0VOLCB0b2tlbktleSk7XG5cbiAgICAgICAgLy8gRGVidWcgdXNhZ2UuIERldiBvbmx5XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKEFUVFJfQ0FDSEVfUEFUSCwgZnVsbFBhdGguam9pbignfCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluamVjdCBjbGllbnQgc2lkZSBlZmZlY3Qgc3R5bGVcbiAgICAgICAgT2JqZWN0LmtleXMoZWZmZWN0U3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKGVmZmVjdEtleSkge1xuICAgICAgICAgIHVwZGF0ZUNTUyhub3JtYWxpemVTdHlsZShlZmZlY3RTdHlsZVtlZmZlY3RLZXldKSwgXCJfZWZmZWN0LVwiLmNvbmNhdChlZmZlY3RLZXkpLCBtZXJnZWRDU1NDb25maWcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBfdXNlR2xvYmFsQ2FjaGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZUdsb2JhbENhY2hlLCAzKSxcbiAgICBjYWNoZWRTdHlsZVN0ciA9IF91c2VHbG9iYWxDYWNoZTJbMF0sXG4gICAgY2FjaGVkVG9rZW5LZXkgPSBfdXNlR2xvYmFsQ2FjaGUyWzFdLFxuICAgIGNhY2hlZFN0eWxlSWQgPSBfdXNlR2xvYmFsQ2FjaGUyWzJdO1xuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgc3R5bGVOb2RlO1xuICAgIGlmICghc3NySW5saW5lIHx8IGlzTWVyZ2VkQ2xpZW50U2lkZSB8fCAhZGVmYXVsdENhY2hlKSB7XG4gICAgICBzdHlsZU5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChFbXB0eSwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcmVmNjtcbiAgICAgIHN0eWxlTm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiwgX2V4dGVuZHMoe30sIChfcmVmNiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZjYsIEFUVFJfVE9LRU4sIGNhY2hlZFRva2VuS2V5KSwgX2RlZmluZVByb3BlcnR5KF9yZWY2LCBBVFRSX01BUkssIGNhY2hlZFN0eWxlSWQpLCBfcmVmNiksIHtcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgICBfX2h0bWw6IGNhY2hlZFN0eWxlU3RyXG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBzdHlsZU5vZGUsIG5vZGUpO1xuICB9O1xufVxuZXhwb3J0IHZhciBleHRyYWN0ID0gZnVuY3Rpb24gZXh0cmFjdChjYWNoZSwgZWZmZWN0U3R5bGVzLCBvcHRpb25zKSB7XG4gIHZhciBfY2FjaGUgPSBfc2xpY2VkVG9BcnJheShjYWNoZSwgNiksXG4gICAgc3R5bGVTdHIgPSBfY2FjaGVbMF0sXG4gICAgdG9rZW5LZXkgPSBfY2FjaGVbMV0sXG4gICAgc3R5bGVJZCA9IF9jYWNoZVsyXSxcbiAgICBlZmZlY3RTdHlsZSA9IF9jYWNoZVszXSxcbiAgICBjbGllbnRPbmx5ID0gX2NhY2hlWzRdLFxuICAgIG9yZGVyID0gX2NhY2hlWzVdO1xuICB2YXIgX3JlZjcgPSBvcHRpb25zIHx8IHt9LFxuICAgIHBsYWluID0gX3JlZjcucGxhaW47XG5cbiAgLy8gU2tpcCBjbGllbnQgb25seSBzdHlsZVxuICBpZiAoY2xpZW50T25seSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBrZXlTdHlsZVRleHQgPSBzdHlsZVN0cjtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09IFN0eWxlID09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gVXNlZCBmb3IgcmMtdXRpbFxuICB2YXIgc2hhcmVkQXR0cnMgPSB7XG4gICAgJ2RhdGEtcmMtb3JkZXInOiAncHJlcGVuZFF1ZXVlJyxcbiAgICAnZGF0YS1yYy1wcmlvcml0eSc6IFwiXCIuY29uY2F0KG9yZGVyKVxuICB9O1xuICBrZXlTdHlsZVRleHQgPSB0b1N0eWxlU3RyKHN0eWxlU3RyLCB0b2tlbktleSwgc3R5bGVJZCwgc2hhcmVkQXR0cnMsIHBsYWluKTtcblxuICAvLyA9PT09PT09PT09PT09PT0gQ3JlYXRlIGVmZmVjdCBzdHlsZSA9PT09PT09PT09PT09PT1cbiAgaWYgKGVmZmVjdFN0eWxlKSB7XG4gICAgT2JqZWN0LmtleXMoZWZmZWN0U3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKGVmZmVjdEtleSkge1xuICAgICAgLy8gRWZmZWN0IHN0eWxlIGNhbiBiZSByZXVzZWRcbiAgICAgIGlmICghZWZmZWN0U3R5bGVzW2VmZmVjdEtleV0pIHtcbiAgICAgICAgZWZmZWN0U3R5bGVzW2VmZmVjdEtleV0gPSB0cnVlO1xuICAgICAgICB2YXIgZWZmZWN0U3R5bGVTdHIgPSBub3JtYWxpemVTdHlsZShlZmZlY3RTdHlsZVtlZmZlY3RLZXldKTtcbiAgICAgICAga2V5U3R5bGVUZXh0ICs9IHRvU3R5bGVTdHIoZWZmZWN0U3R5bGVTdHIsIHRva2VuS2V5LCBcIl9lZmZlY3QtXCIuY29uY2F0KGVmZmVjdEtleSksIHNoYXJlZEF0dHJzLCBwbGFpbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIFtvcmRlciwgc3R5bGVJZCwga2V5U3R5bGVUZXh0XTtcbn07IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IHsgcmVtb3ZlQ1NTLCB1cGRhdGVDU1MgfSBmcm9tIFwicmMtdXRpbC9lcy9Eb20vZHluYW1pY0NTU1wiO1xuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdHlsZUNvbnRleHQsIHsgQVRUUl9NQVJLLCBBVFRSX1RPS0VOLCBDU1NfSU5fSlNfSU5TVEFOQ0UgfSBmcm9tIFwiLi4vU3R5bGVDb250ZXh0XCI7XG5pbXBvcnQgeyBpc0NsaWVudFNpZGUsIHRvU3R5bGVTdHIgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgdHJhbnNmb3JtVG9rZW4gfSBmcm9tIFwiLi4vdXRpbC9jc3MtdmFyaWFibGVzXCI7XG5pbXBvcnQgdXNlR2xvYmFsQ2FjaGUgZnJvbSBcIi4vdXNlR2xvYmFsQ2FjaGVcIjtcbmltcG9ydCB7IHVuaXF1ZUhhc2ggfSBmcm9tIFwiLi91c2VTdHlsZVJlZ2lzdGVyXCI7XG5leHBvcnQgdmFyIENTU19WQVJfUFJFRklYID0gJ2Nzc1Zhcic7XG52YXIgdXNlQ1NTVmFyUmVnaXN0ZXIgPSBmdW5jdGlvbiB1c2VDU1NWYXJSZWdpc3Rlcihjb25maWcsIGZuKSB7XG4gIHZhciBrZXkgPSBjb25maWcua2V5LFxuICAgIHByZWZpeCA9IGNvbmZpZy5wcmVmaXgsXG4gICAgdW5pdGxlc3MgPSBjb25maWcudW5pdGxlc3MsXG4gICAgaWdub3JlID0gY29uZmlnLmlnbm9yZSxcbiAgICB0b2tlbiA9IGNvbmZpZy50b2tlbixcbiAgICBfY29uZmlnJHNjb3BlID0gY29uZmlnLnNjb3BlLFxuICAgIHNjb3BlID0gX2NvbmZpZyRzY29wZSA9PT0gdm9pZCAwID8gJycgOiBfY29uZmlnJHNjb3BlO1xuICB2YXIgX3VzZUNvbnRleHQgPSB1c2VDb250ZXh0KFN0eWxlQ29udGV4dCksXG4gICAgaW5zdGFuY2VJZCA9IF91c2VDb250ZXh0LmNhY2hlLmluc3RhbmNlSWQsXG4gICAgY29udGFpbmVyID0gX3VzZUNvbnRleHQuY29udGFpbmVyO1xuICB2YXIgdG9rZW5LZXkgPSB0b2tlbi5fdG9rZW5LZXk7XG4gIHZhciBzdHlsZVBhdGggPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGNvbmZpZy5wYXRoKSwgW2tleSwgc2NvcGUsIHRva2VuS2V5XSk7XG4gIHZhciBjYWNoZSA9IHVzZUdsb2JhbENhY2hlKENTU19WQVJfUFJFRklYLCBzdHlsZVBhdGgsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3JpZ2luVG9rZW4gPSBmbigpO1xuICAgIHZhciBfdHJhbnNmb3JtVG9rZW4gPSB0cmFuc2Zvcm1Ub2tlbihvcmlnaW5Ub2tlbiwga2V5LCB7XG4gICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICB1bml0bGVzczogdW5pdGxlc3MsXG4gICAgICAgIGlnbm9yZTogaWdub3JlLFxuICAgICAgICBzY29wZTogc2NvcGVcbiAgICAgIH0pLFxuICAgICAgX3RyYW5zZm9ybVRva2VuMiA9IF9zbGljZWRUb0FycmF5KF90cmFuc2Zvcm1Ub2tlbiwgMiksXG4gICAgICBtZXJnZWRUb2tlbiA9IF90cmFuc2Zvcm1Ub2tlbjJbMF0sXG4gICAgICBjc3NWYXJzU3RyID0gX3RyYW5zZm9ybVRva2VuMlsxXTtcbiAgICB2YXIgc3R5bGVJZCA9IHVuaXF1ZUhhc2goc3R5bGVQYXRoLCBjc3NWYXJzU3RyKTtcbiAgICByZXR1cm4gW21lcmdlZFRva2VuLCBjc3NWYXJzU3RyLCBzdHlsZUlkLCBrZXldO1xuICB9LCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDMpLFxuICAgICAgc3R5bGVJZCA9IF9yZWYyWzJdO1xuICAgIGlmIChpc0NsaWVudFNpZGUpIHtcbiAgICAgIHJlbW92ZUNTUyhzdHlsZUlkLCB7XG4gICAgICAgIG1hcms6IEFUVFJfTUFSS1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICB2YXIgX3JlZjQgPSBfc2xpY2VkVG9BcnJheShfcmVmMywgMyksXG4gICAgICBjc3NWYXJzU3RyID0gX3JlZjRbMV0sXG4gICAgICBzdHlsZUlkID0gX3JlZjRbMl07XG4gICAgaWYgKCFjc3NWYXJzU3RyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBzdHlsZSA9IHVwZGF0ZUNTUyhjc3NWYXJzU3RyLCBzdHlsZUlkLCB7XG4gICAgICBtYXJrOiBBVFRSX01BUkssXG4gICAgICBwcmVwZW5kOiAncXVldWUnLFxuICAgICAgYXR0YWNoVG86IGNvbnRhaW5lcixcbiAgICAgIHByaW9yaXR5OiAtOTk5XG4gICAgfSk7XG4gICAgc3R5bGVbQ1NTX0lOX0pTX0lOU1RBTkNFXSA9IGluc3RhbmNlSWQ7XG5cbiAgICAvLyBVc2VkIGZvciBgdXNlQ2FjaGVUb2tlbmAgdG8gcmVtb3ZlIG9uIGJhdGNoIHdoZW4gdG9rZW4gcmVtb3ZlZFxuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShBVFRSX1RPS0VOLCBrZXkpO1xuICB9KTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcbmV4cG9ydCB2YXIgZXh0cmFjdCA9IGZ1bmN0aW9uIGV4dHJhY3QoY2FjaGUsIGVmZmVjdFN0eWxlcywgb3B0aW9ucykge1xuICB2YXIgX2NhY2hlID0gX3NsaWNlZFRvQXJyYXkoY2FjaGUsIDQpLFxuICAgIHN0eWxlU3RyID0gX2NhY2hlWzFdLFxuICAgIHN0eWxlSWQgPSBfY2FjaGVbMl0sXG4gICAgY3NzVmFyS2V5ID0gX2NhY2hlWzNdO1xuICB2YXIgX3JlZjUgPSBvcHRpb25zIHx8IHt9LFxuICAgIHBsYWluID0gX3JlZjUucGxhaW47XG4gIGlmICghc3R5bGVTdHIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgb3JkZXIgPSAtOTk5O1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT0gU3R5bGUgPT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBVc2VkIGZvciByYy11dGlsXG4gIHZhciBzaGFyZWRBdHRycyA9IHtcbiAgICAnZGF0YS1yYy1vcmRlcic6ICdwcmVwZW5kUXVldWUnLFxuICAgICdkYXRhLXJjLXByaW9yaXR5JzogXCJcIi5jb25jYXQob3JkZXIpXG4gIH07XG4gIHZhciBzdHlsZVRleHQgPSB0b1N0eWxlU3RyKHN0eWxlU3RyLCBjc3NWYXJLZXksIHN0eWxlSWQsIHNoYXJlZEF0dHJzLCBwbGFpbik7XG4gIHJldHVybiBbb3JkZXIsIHN0eWxlSWQsIHN0eWxlVGV4dF07XG59O1xuZXhwb3J0IGRlZmF1bHQgdXNlQ1NTVmFyUmVnaXN0ZXI7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xudmFyIF9FeHRyYWN0U3R5bGVGbnM7XG5pbXBvcnQgeyBleHRyYWN0IGFzIHRva2VuRXh0cmFjdFN0eWxlLCBUT0tFTl9QUkVGSVggfSBmcm9tIFwiLi9ob29rcy91c2VDYWNoZVRva2VuXCI7XG5pbXBvcnQgeyBDU1NfVkFSX1BSRUZJWCwgZXh0cmFjdCBhcyBjc3NWYXJFeHRyYWN0U3R5bGUgfSBmcm9tIFwiLi9ob29rcy91c2VDU1NWYXJSZWdpc3RlclwiO1xuaW1wb3J0IHsgZXh0cmFjdCBhcyBzdHlsZUV4dHJhY3RTdHlsZSwgU1RZTEVfUFJFRklYIH0gZnJvbSBcIi4vaG9va3MvdXNlU3R5bGVSZWdpc3RlclwiO1xuaW1wb3J0IHsgdG9TdHlsZVN0ciB9IGZyb20gXCIuL3V0aWxcIjtcbmltcG9ydCB7IEFUVFJfQ0FDSEVfTUFQLCBzZXJpYWxpemUgYXMgc2VyaWFsaXplQ2FjaGVNYXAgfSBmcm9tIFwiLi91dGlsL2NhY2hlTWFwVXRpbFwiO1xudmFyIEV4dHJhY3RTdHlsZUZucyA9IChfRXh0cmFjdFN0eWxlRm5zID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfRXh0cmFjdFN0eWxlRm5zLCBTVFlMRV9QUkVGSVgsIHN0eWxlRXh0cmFjdFN0eWxlKSwgX2RlZmluZVByb3BlcnR5KF9FeHRyYWN0U3R5bGVGbnMsIFRPS0VOX1BSRUZJWCwgdG9rZW5FeHRyYWN0U3R5bGUpLCBfZGVmaW5lUHJvcGVydHkoX0V4dHJhY3RTdHlsZUZucywgQ1NTX1ZBUl9QUkVGSVgsIGNzc1ZhckV4dHJhY3RTdHlsZSksIF9FeHRyYWN0U3R5bGVGbnMpO1xuZnVuY3Rpb24gaXNOb3ROdWxsKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dHJhY3RTdHlsZShjYWNoZSkge1xuICB2YXIgcGxhaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICB2YXIgbWF0Y2hQcmVmaXhSZWdleHAgPSBuZXcgUmVnRXhwKFwiXihcIi5jb25jYXQoT2JqZWN0LmtleXMoRXh0cmFjdFN0eWxlRm5zKS5qb2luKCd8JyksIFwiKSVcIikpO1xuXG4gIC8vIHByZWZpeCB3aXRoIGBzdHlsZWAgaXMgdXNlZCBmb3IgYHVzZVN0eWxlUmVnaXN0ZXJgIHRvIGNhY2hlIHN0eWxlIGNvbnRleHRcbiAgdmFyIHN0eWxlS2V5cyA9IEFycmF5LmZyb20oY2FjaGUuY2FjaGUua2V5cygpKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtYXRjaFByZWZpeFJlZ2V4cC50ZXN0KGtleSk7XG4gIH0pO1xuXG4gIC8vIENvbW1vbiBlZmZlY3Qgc3R5bGVzIGxpa2UgYW5pbWF0aW9uXG4gIHZhciBlZmZlY3RTdHlsZXMgPSB7fTtcblxuICAvLyBNYXBwaW5nIG9mIGNhY2hlUGF0aCB0byBzdHlsZSBoYXNoXG4gIHZhciBjYWNoZVBhdGhNYXAgPSB7fTtcbiAgdmFyIHN0eWxlVGV4dCA9ICcnO1xuICBzdHlsZUtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2FjaGVQYXRoID0ga2V5LnJlcGxhY2UobWF0Y2hQcmVmaXhSZWdleHAsICcnKS5yZXBsYWNlKC8lL2csICd8Jyk7XG4gICAgdmFyIF9rZXkkc3BsaXQgPSBrZXkuc3BsaXQoJyUnKSxcbiAgICAgIF9rZXkkc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX2tleSRzcGxpdCwgMSksXG4gICAgICBwcmVmaXggPSBfa2V5JHNwbGl0MlswXTtcbiAgICB2YXIgZXh0cmFjdEZuID0gRXh0cmFjdFN0eWxlRm5zW3ByZWZpeF07XG4gICAgdmFyIGV4dHJhY3RlZFN0eWxlID0gZXh0cmFjdEZuKGNhY2hlLmNhY2hlLmdldChrZXkpWzFdLCBlZmZlY3RTdHlsZXMsIHtcbiAgICAgIHBsYWluOiBwbGFpblxuICAgIH0pO1xuICAgIGlmICghZXh0cmFjdGVkU3R5bGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgX2V4dHJhY3RlZFN0eWxlID0gX3NsaWNlZFRvQXJyYXkoZXh0cmFjdGVkU3R5bGUsIDMpLFxuICAgICAgb3JkZXIgPSBfZXh0cmFjdGVkU3R5bGVbMF0sXG4gICAgICBzdHlsZUlkID0gX2V4dHJhY3RlZFN0eWxlWzFdLFxuICAgICAgc3R5bGVTdHIgPSBfZXh0cmFjdGVkU3R5bGVbMl07XG4gICAgaWYgKGtleS5zdGFydHNXaXRoKCdzdHlsZScpKSB7XG4gICAgICBjYWNoZVBhdGhNYXBbY2FjaGVQYXRoXSA9IHN0eWxlSWQ7XG4gICAgfVxuICAgIHJldHVybiBbb3JkZXIsIHN0eWxlU3RyXTtcbiAgfSkuZmlsdGVyKGlzTm90TnVsbCkuc29ydChmdW5jdGlvbiAoX3JlZiwgX3JlZjIpIHtcbiAgICB2YXIgX3JlZjMgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAxKSxcbiAgICAgIG8xID0gX3JlZjNbMF07XG4gICAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjIsIDEpLFxuICAgICAgbzIgPSBfcmVmNFswXTtcbiAgICByZXR1cm4gbzEgLSBvMjtcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICB2YXIgX3JlZjYgPSBfc2xpY2VkVG9BcnJheShfcmVmNSwgMiksXG4gICAgICBzdHlsZSA9IF9yZWY2WzFdO1xuICAgIHN0eWxlVGV4dCArPSBzdHlsZTtcbiAgfSk7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT0gRmlsbCBDYWNoZSBQYXRoID09PT09PT09PT09PT09PT09PT09XG4gIHN0eWxlVGV4dCArPSB0b1N0eWxlU3RyKFwiLlwiLmNvbmNhdChBVFRSX0NBQ0hFX01BUCwgXCJ7Y29udGVudDpcXFwiXCIpLmNvbmNhdChzZXJpYWxpemVDYWNoZU1hcChjYWNoZVBhdGhNYXApLCBcIlxcXCI7fVwiKSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgQVRUUl9DQUNIRV9NQVAsIEFUVFJfQ0FDSEVfTUFQKSwgcGxhaW4pO1xuICByZXR1cm4gc3R5bGVUZXh0O1xufSIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuZnVuY3Rpb24gc3BsaXRWYWx1ZXModmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gW1t2YWx1ZV0sIGZhbHNlXTtcbiAgfVxuICB2YXIgcmF3U3R5bGUgPSBTdHJpbmcodmFsdWUpLnRyaW0oKTtcbiAgdmFyIGltcG9ydGFudENlbGxzID0gcmF3U3R5bGUubWF0Y2goLyguKikoIWltcG9ydGFudCkvKTtcbiAgdmFyIHNwbGl0U3R5bGUgPSAoaW1wb3J0YW50Q2VsbHMgPyBpbXBvcnRhbnRDZWxsc1sxXSA6IHJhd1N0eWxlKS50cmltKCkuc3BsaXQoL1xccysvKTtcblxuICAvLyBDb21iaW5lIHN0eWxlcyBzcGxpdCBpbiBicmFja2V0cywgbGlrZSBgY2FsYygxcHggKyAycHgpYFxuICB2YXIgdGVtcCA9ICcnO1xuICB2YXIgYnJhY2tldHMgPSAwO1xuICByZXR1cm4gW3NwbGl0U3R5bGUucmVkdWNlKGZ1bmN0aW9uIChsaXN0LCBpdGVtKSB7XG4gICAgaWYgKGl0ZW0uaW5jbHVkZXMoJygnKSkge1xuICAgICAgdGVtcCArPSBpdGVtO1xuICAgICAgYnJhY2tldHMgKz0gaXRlbS5zcGxpdCgnKCcpLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIGlmIChpdGVtLmluY2x1ZGVzKCcpJykpIHtcbiAgICAgIHRlbXAgKz0gaXRlbTtcbiAgICAgIGJyYWNrZXRzIC09IGl0ZW0uc3BsaXQoJyknKS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGJyYWNrZXRzID09PSAwKSB7XG4gICAgICAgIGxpc3QucHVzaCh0ZW1wKTtcbiAgICAgICAgdGVtcCA9ICcnO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYnJhY2tldHMgPiAwKSB7XG4gICAgICB0ZW1wICs9IGl0ZW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH0sIFtdKSwgISFpbXBvcnRhbnRDZWxsc107XG59XG5mdW5jdGlvbiBub1NwbGl0KGxpc3QpIHtcbiAgbGlzdC5ub3RTcGxpdCA9IHRydWU7XG4gIHJldHVybiBsaXN0O1xufVxudmFyIGtleU1hcCA9IHtcbiAgLy8gSW5zZXRcbiAgaW5zZXQ6IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10sXG4gIGluc2V0QmxvY2s6IFsndG9wJywgJ2JvdHRvbSddLFxuICBpbnNldEJsb2NrU3RhcnQ6IFsndG9wJ10sXG4gIGluc2V0QmxvY2tFbmQ6IFsnYm90dG9tJ10sXG4gIGluc2V0SW5saW5lOiBbJ2xlZnQnLCAncmlnaHQnXSxcbiAgaW5zZXRJbmxpbmVTdGFydDogWydsZWZ0J10sXG4gIGluc2V0SW5saW5lRW5kOiBbJ3JpZ2h0J10sXG4gIC8vIE1hcmdpblxuICBtYXJnaW5CbG9jazogWydtYXJnaW5Ub3AnLCAnbWFyZ2luQm90dG9tJ10sXG4gIG1hcmdpbkJsb2NrU3RhcnQ6IFsnbWFyZ2luVG9wJ10sXG4gIG1hcmdpbkJsb2NrRW5kOiBbJ21hcmdpbkJvdHRvbSddLFxuICBtYXJnaW5JbmxpbmU6IFsnbWFyZ2luTGVmdCcsICdtYXJnaW5SaWdodCddLFxuICBtYXJnaW5JbmxpbmVTdGFydDogWydtYXJnaW5MZWZ0J10sXG4gIG1hcmdpbklubGluZUVuZDogWydtYXJnaW5SaWdodCddLFxuICAvLyBQYWRkaW5nXG4gIHBhZGRpbmdCbG9jazogWydwYWRkaW5nVG9wJywgJ3BhZGRpbmdCb3R0b20nXSxcbiAgcGFkZGluZ0Jsb2NrU3RhcnQ6IFsncGFkZGluZ1RvcCddLFxuICBwYWRkaW5nQmxvY2tFbmQ6IFsncGFkZGluZ0JvdHRvbSddLFxuICBwYWRkaW5nSW5saW5lOiBbJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdSaWdodCddLFxuICBwYWRkaW5nSW5saW5lU3RhcnQ6IFsncGFkZGluZ0xlZnQnXSxcbiAgcGFkZGluZ0lubGluZUVuZDogWydwYWRkaW5nUmlnaHQnXSxcbiAgLy8gQm9yZGVyXG4gIGJvcmRlckJsb2NrOiBub1NwbGl0KFsnYm9yZGVyVG9wJywgJ2JvcmRlckJvdHRvbSddKSxcbiAgYm9yZGVyQmxvY2tTdGFydDogbm9TcGxpdChbJ2JvcmRlclRvcCddKSxcbiAgYm9yZGVyQmxvY2tFbmQ6IG5vU3BsaXQoWydib3JkZXJCb3R0b20nXSksXG4gIGJvcmRlcklubGluZTogbm9TcGxpdChbJ2JvcmRlckxlZnQnLCAnYm9yZGVyUmlnaHQnXSksXG4gIGJvcmRlcklubGluZVN0YXJ0OiBub1NwbGl0KFsnYm9yZGVyTGVmdCddKSxcbiAgYm9yZGVySW5saW5lRW5kOiBub1NwbGl0KFsnYm9yZGVyUmlnaHQnXSksXG4gIC8vIEJvcmRlciB3aWR0aFxuICBib3JkZXJCbG9ja1dpZHRoOiBbJ2JvcmRlclRvcFdpZHRoJywgJ2JvcmRlckJvdHRvbVdpZHRoJ10sXG4gIGJvcmRlckJsb2NrU3RhcnRXaWR0aDogWydib3JkZXJUb3BXaWR0aCddLFxuICBib3JkZXJCbG9ja0VuZFdpZHRoOiBbJ2JvcmRlckJvdHRvbVdpZHRoJ10sXG4gIGJvcmRlcklubGluZVdpZHRoOiBbJ2JvcmRlckxlZnRXaWR0aCcsICdib3JkZXJSaWdodFdpZHRoJ10sXG4gIGJvcmRlcklubGluZVN0YXJ0V2lkdGg6IFsnYm9yZGVyTGVmdFdpZHRoJ10sXG4gIGJvcmRlcklubGluZUVuZFdpZHRoOiBbJ2JvcmRlclJpZ2h0V2lkdGgnXSxcbiAgLy8gQm9yZGVyIHN0eWxlXG4gIGJvcmRlckJsb2NrU3R5bGU6IFsnYm9yZGVyVG9wU3R5bGUnLCAnYm9yZGVyQm90dG9tU3R5bGUnXSxcbiAgYm9yZGVyQmxvY2tTdGFydFN0eWxlOiBbJ2JvcmRlclRvcFN0eWxlJ10sXG4gIGJvcmRlckJsb2NrRW5kU3R5bGU6IFsnYm9yZGVyQm90dG9tU3R5bGUnXSxcbiAgYm9yZGVySW5saW5lU3R5bGU6IFsnYm9yZGVyTGVmdFN0eWxlJywgJ2JvcmRlclJpZ2h0U3R5bGUnXSxcbiAgYm9yZGVySW5saW5lU3RhcnRTdHlsZTogWydib3JkZXJMZWZ0U3R5bGUnXSxcbiAgYm9yZGVySW5saW5lRW5kU3R5bGU6IFsnYm9yZGVyUmlnaHRTdHlsZSddLFxuICAvLyBCb3JkZXIgY29sb3JcbiAgYm9yZGVyQmxvY2tDb2xvcjogWydib3JkZXJUb3BDb2xvcicsICdib3JkZXJCb3R0b21Db2xvciddLFxuICBib3JkZXJCbG9ja1N0YXJ0Q29sb3I6IFsnYm9yZGVyVG9wQ29sb3InXSxcbiAgYm9yZGVyQmxvY2tFbmRDb2xvcjogWydib3JkZXJCb3R0b21Db2xvciddLFxuICBib3JkZXJJbmxpbmVDb2xvcjogWydib3JkZXJMZWZ0Q29sb3InLCAnYm9yZGVyUmlnaHRDb2xvciddLFxuICBib3JkZXJJbmxpbmVTdGFydENvbG9yOiBbJ2JvcmRlckxlZnRDb2xvciddLFxuICBib3JkZXJJbmxpbmVFbmRDb2xvcjogWydib3JkZXJSaWdodENvbG9yJ10sXG4gIC8vIEJvcmRlciByYWRpdXNcbiAgYm9yZGVyU3RhcnRTdGFydFJhZGl1czogWydib3JkZXJUb3BMZWZ0UmFkaXVzJ10sXG4gIGJvcmRlclN0YXJ0RW5kUmFkaXVzOiBbJ2JvcmRlclRvcFJpZ2h0UmFkaXVzJ10sXG4gIGJvcmRlckVuZFN0YXJ0UmFkaXVzOiBbJ2JvcmRlckJvdHRvbUxlZnRSYWRpdXMnXSxcbiAgYm9yZGVyRW5kRW5kUmFkaXVzOiBbJ2JvcmRlckJvdHRvbVJpZ2h0UmFkaXVzJ11cbn07XG5mdW5jdGlvbiB3cmFwSW1wb3J0YW50QW5kU2tpcENoZWNrKHZhbHVlLCBpbXBvcnRhbnQpIHtcbiAgdmFyIHBhcnNlZFZhbHVlID0gdmFsdWU7XG4gIGlmIChpbXBvcnRhbnQpIHtcbiAgICBwYXJzZWRWYWx1ZSA9IFwiXCIuY29uY2F0KHBhcnNlZFZhbHVlLCBcIiAhaW1wb3J0YW50XCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgX3NraXBfY2hlY2tfOiB0cnVlLFxuICAgIHZhbHVlOiBwYXJzZWRWYWx1ZVxuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnQgY3NzIGxvZ2ljYWwgcHJvcGVydGllcyB0byBsZWdhY3kgcHJvcGVydGllcy5cbiAqIFN1Y2ggYXM6IGBtYXJnaW4tYmxvY2stc3RhcnRgIHRvIGBtYXJnaW4tdG9wYC5cbiAqIFRyYW5zZm9ybSBsaXN0OlxuICogLSBpbnNldFxuICogLSBtYXJnaW5cbiAqIC0gcGFkZGluZ1xuICogLSBib3JkZXJcbiAqL1xudmFyIHRyYW5zZm9ybSA9IHtcbiAgdmlzaXQ6IGZ1bmN0aW9uIHZpc2l0KGNzc09iaikge1xuICAgIHZhciBjbG9uZSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGNzc09iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBjc3NPYmpba2V5XTtcbiAgICAgIHZhciBtYXRjaFZhbHVlID0ga2V5TWFwW2tleV07XG4gICAgICBpZiAobWF0Y2hWYWx1ZSAmJiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICB2YXIgX3NwbGl0VmFsdWVzID0gc3BsaXRWYWx1ZXModmFsdWUpLFxuICAgICAgICAgIF9zcGxpdFZhbHVlczIgPSBfc2xpY2VkVG9BcnJheShfc3BsaXRWYWx1ZXMsIDIpLFxuICAgICAgICAgIF92YWx1ZXMgPSBfc3BsaXRWYWx1ZXMyWzBdLFxuICAgICAgICAgIF9pbXBvcnRhbnQgPSBfc3BsaXRWYWx1ZXMyWzFdO1xuICAgICAgICBpZiAobWF0Y2hWYWx1ZS5sZW5ndGggJiYgbWF0Y2hWYWx1ZS5ub3RTcGxpdCkge1xuICAgICAgICAgIC8vIG5vdCBzcGxpdCBtZWFucyBhbHdheXMgZ2l2ZSBzYW1lIHZhbHVlIGxpa2UgYm9yZGVyXG4gICAgICAgICAgbWF0Y2hWYWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChtYXRjaEtleSkge1xuICAgICAgICAgICAgY2xvbmVbbWF0Y2hLZXldID0gd3JhcEltcG9ydGFudEFuZFNraXBDaGVjayh2YWx1ZSwgX2ltcG9ydGFudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2hWYWx1ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAvLyBIYW5kbGUgbGlrZSBgbWFyZ2luQmxvY2tTdGFydGAgPT4gYG1hcmdpblRvcGBcbiAgICAgICAgICBjbG9uZVttYXRjaFZhbHVlWzBdXSA9IHdyYXBJbXBvcnRhbnRBbmRTa2lwQ2hlY2sodmFsdWUsIF9pbXBvcnRhbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoVmFsdWUubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgLy8gSGFuZGxlIGxpa2UgYG1hcmdpbkJsb2NrYCA9PiBgbWFyZ2luVG9wYCAmIGBtYXJnaW5Cb3R0b21gXG4gICAgICAgICAgbWF0Y2hWYWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChtYXRjaEtleSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBfdmFsdWVzJGluZGV4O1xuICAgICAgICAgICAgY2xvbmVbbWF0Y2hLZXldID0gd3JhcEltcG9ydGFudEFuZFNraXBDaGVjaygoX3ZhbHVlcyRpbmRleCA9IF92YWx1ZXNbaW5kZXhdKSAhPT0gbnVsbCAmJiBfdmFsdWVzJGluZGV4ICE9PSB2b2lkIDAgPyBfdmFsdWVzJGluZGV4IDogX3ZhbHVlc1swXSwgX2ltcG9ydGFudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2hWYWx1ZS5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAvLyBIYW5kbGUgbGlrZSBgaW5zZXRgID0+IGB0b3BgICYgYHJpZ2h0YCAmIGBib3R0b21gICYgYGxlZnRgXG4gICAgICAgICAgbWF0Y2hWYWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChtYXRjaEtleSwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBfcmVmLCBfdmFsdWVzJGluZGV4MjtcbiAgICAgICAgICAgIGNsb25lW21hdGNoS2V5XSA9IHdyYXBJbXBvcnRhbnRBbmRTa2lwQ2hlY2soKF9yZWYgPSAoX3ZhbHVlcyRpbmRleDIgPSBfdmFsdWVzW2luZGV4XSkgIT09IG51bGwgJiYgX3ZhbHVlcyRpbmRleDIgIT09IHZvaWQgMCA/IF92YWx1ZXMkaW5kZXgyIDogX3ZhbHVlc1tpbmRleCAtIDJdKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogX3ZhbHVlc1swXSwgX2ltcG9ydGFudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvbmVba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9uZVtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsb25lO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgdHJhbnNmb3JtOyIsIlwidXNlIGNsaWVudFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG5pbXBvcnQgeyB1bml0IH0gZnJvbSAnQGFudC1kZXNpZ24vY3NzaW5qcyc7XG5leHBvcnQgeyBvcGVyYXRpb25Vbml0IH0gZnJvbSAnLi9vcGVyYXRpb25Vbml0JztcbmV4cG9ydCBjb25zdCB0ZXh0RWxsaXBzaXMgPSB7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJ1xufTtcbmV4cG9ydCBjb25zdCByZXNldENvbXBvbmVudCA9IGZ1bmN0aW9uICh0b2tlbikge1xuICBsZXQgbmVlZEluaGVyaXRGb250RmFtaWx5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgcmV0dXJuIHtcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBtYXJnaW46IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBjb2xvcjogdG9rZW4uY29sb3JUZXh0LFxuICAgIGZvbnRTaXplOiB0b2tlbi5mb250U2l6ZSxcbiAgICAvLyBmb250LXZhcmlhbnQ6IEBmb250LXZhcmlhbnQtYmFzZTtcbiAgICBsaW5lSGVpZ2h0OiB0b2tlbi5saW5lSGVpZ2h0LFxuICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuICAgIC8vIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogQGZvbnQtZmVhdHVyZS1zZXR0aW5ncy1iYXNlO1xuICAgIGZvbnRGYW1pbHk6IG5lZWRJbmhlcml0Rm9udEZhbWlseSA/ICdpbmhlcml0JyA6IHRva2VuLmZvbnRGYW1pbHlcbiAgfTtcbn07XG5leHBvcnQgY29uc3QgcmVzZXRJY29uID0gKCkgPT4gKHtcbiAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGNvbG9yOiAnaW5oZXJpdCcsXG4gIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gIGxpbmVIZWlnaHQ6IDAsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIHRleHRUcmFuc2Zvcm06ICdub25lJyxcbiAgLy8gZm9yIFNWRyBpY29uLCBzZWUgaHR0cHM6Ly9ibG9nLnByb3RvdHlwci5pby9hbGlnbi1zdmctaWNvbnMtdG8tdGV4dC1hbmQtc2F5LWdvb2RieWUtdG8tZm9udC1pY29ucy1kNDRiM2Q3YjI2YjRcbiAgdmVydGljYWxBbGlnbjogJy0wLjEyNWVtJyxcbiAgdGV4dFJlbmRlcmluZzogJ29wdGltaXplTGVnaWJpbGl0eScsXG4gICctd2Via2l0LWZvbnQtc21vb3RoaW5nJzogJ2FudGlhbGlhc2VkJyxcbiAgJy1tb3otb3N4LWZvbnQtc21vb3RoaW5nJzogJ2dyYXlzY2FsZScsXG4gICc+IConOiB7XG4gICAgbGluZUhlaWdodDogMVxuICB9LFxuICBzdmc6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICB9XG59KTtcbmV4cG9ydCBjb25zdCBjbGVhckZpeCA9ICgpID0+ICh7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzIxMzAxI2lzc3VlY29tbWVudC01ODM5NTUyMjlcbiAgJyY6OmJlZm9yZSc6IHtcbiAgICBkaXNwbGF5OiAndGFibGUnLFxuICAgIGNvbnRlbnQ6ICdcIlwiJ1xuICB9LFxuICAnJjo6YWZ0ZXInOiB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvMjE4NjRcbiAgICBkaXNwbGF5OiAndGFibGUnLFxuICAgIGNsZWFyOiAnYm90aCcsXG4gICAgY29udGVudDogJ1wiXCInXG4gIH1cbn0pO1xuZXhwb3J0IGNvbnN0IGdlbkxpbmtTdHlsZSA9IHRva2VuID0+ICh7XG4gIGE6IHtcbiAgICBjb2xvcjogdG9rZW4uY29sb3JMaW5rLFxuICAgIHRleHREZWNvcmF0aW9uOiB0b2tlbi5saW5rRGVjb3JhdGlvbixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgLy8gcmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgb24gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB0cmFuc2l0aW9uOiBgY29sb3IgJHt0b2tlbi5tb3Rpb25EdXJhdGlvblNsb3d9YCxcbiAgICAnLXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc2tpcCc6ICdvYmplY3RzJyxcbiAgICAvLyByZW1vdmUgZ2FwcyBpbiBsaW5rcyB1bmRlcmxpbmUgaW4gaU9TIDgrIGFuZCBTYWZhcmkgOCsuXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBjb2xvcjogdG9rZW4uY29sb3JMaW5rSG92ZXJcbiAgICB9LFxuICAgICcmOmFjdGl2ZSc6IHtcbiAgICAgIGNvbG9yOiB0b2tlbi5jb2xvckxpbmtBY3RpdmVcbiAgICB9LFxuICAgIFtgJjphY3RpdmUsXG4gICY6aG92ZXJgXToge1xuICAgICAgdGV4dERlY29yYXRpb246IHRva2VuLmxpbmtIb3ZlckRlY29yYXRpb24sXG4gICAgICBvdXRsaW5lOiAwXG4gICAgfSxcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8yMjUwM1xuICAgICcmOmZvY3VzJzoge1xuICAgICAgdGV4dERlY29yYXRpb246IHRva2VuLmxpbmtGb2N1c0RlY29yYXRpb24sXG4gICAgICBvdXRsaW5lOiAwXG4gICAgfSxcbiAgICAnJltkaXNhYmxlZF0nOiB7XG4gICAgICBjb2xvcjogdG9rZW4uY29sb3JUZXh0RGlzYWJsZWQsXG4gICAgICBjdXJzb3I6ICdub3QtYWxsb3dlZCdcbiAgICB9XG4gIH1cbn0pO1xuZXhwb3J0IGNvbnN0IGdlbkNvbW1vblN0eWxlID0gKHRva2VuLCBjb21wb25lbnRQcmVmaXhDbHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFNpemVcbiAgfSA9IHRva2VuO1xuICBjb25zdCByb290UHJlZml4U2VsZWN0b3IgPSBgW2NsYXNzXj1cIiR7Y29tcG9uZW50UHJlZml4Q2xzfVwiXSwgW2NsYXNzKj1cIiAke2NvbXBvbmVudFByZWZpeENsc31cIl1gO1xuICByZXR1cm4ge1xuICAgIFtyb290UHJlZml4U2VsZWN0b3JdOiB7XG4gICAgICBmb250RmFtaWx5LFxuICAgICAgZm9udFNpemUsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICcmOjpiZWZvcmUsICY6OmFmdGVyJzoge1xuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgfSxcbiAgICAgIFtyb290UHJlZml4U2VsZWN0b3JdOiB7XG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAnJjo6YmVmb3JlLCAmOjphZnRlcic6IHtcbiAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbmV4cG9ydCBjb25zdCBnZW5Gb2N1c091dGxpbmUgPSB0b2tlbiA9PiAoe1xuICBvdXRsaW5lOiBgJHt1bml0KHRva2VuLmxpbmVXaWR0aEZvY3VzKX0gc29saWQgJHt0b2tlbi5jb2xvclByaW1hcnlCb3JkZXJ9YCxcbiAgb3V0bGluZU9mZnNldDogMSxcbiAgdHJhbnNpdGlvbjogJ291dGxpbmUtb2Zmc2V0IDBzLCBvdXRsaW5lIDBzJ1xufSk7XG5leHBvcnQgY29uc3QgZ2VuRm9jdXNTdHlsZSA9IHRva2VuID0+ICh7XG4gICcmOmZvY3VzLXZpc2libGUnOiBPYmplY3QuYXNzaWduKHt9LCBnZW5Gb2N1c091dGxpbmUodG9rZW4pKVxufSk7IiwiY29uc3QgZ2VuQ29sbGFwc2VNb3Rpb24gPSB0b2tlbiA9PiAoe1xuICBbdG9rZW4uY29tcG9uZW50Q2xzXToge1xuICAgIC8vIEZvciBjb21tb24vb3BlbkFuaW1hdGlvblxuICAgIFtgJHt0b2tlbi5hbnRDbHN9LW1vdGlvbi1jb2xsYXBzZS1sZWdhY3lgXToge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgJyYtYWN0aXZlJzoge1xuICAgICAgICB0cmFuc2l0aW9uOiBgaGVpZ2h0ICR7dG9rZW4ubW90aW9uRHVyYXRpb25NaWR9ICR7dG9rZW4ubW90aW9uRWFzZUluT3V0fSxcbiAgICAgICAgb3BhY2l0eSAke3Rva2VuLm1vdGlvbkR1cmF0aW9uTWlkfSAke3Rva2VuLm1vdGlvbkVhc2VJbk91dH0gIWltcG9ydGFudGBcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJHt0b2tlbi5hbnRDbHN9LW1vdGlvbi1jb2xsYXBzZWBdOiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0cmFuc2l0aW9uOiBgaGVpZ2h0ICR7dG9rZW4ubW90aW9uRHVyYXRpb25NaWR9ICR7dG9rZW4ubW90aW9uRWFzZUluT3V0fSxcbiAgICAgICAgb3BhY2l0eSAke3Rva2VuLm1vdGlvbkR1cmF0aW9uTWlkfSAke3Rva2VuLm1vdGlvbkVhc2VJbk91dH0gIWltcG9ydGFudGBcbiAgICB9XG4gIH1cbn0pO1xuZXhwb3J0IGRlZmF1bHQgZ2VuQ29sbGFwc2VNb3Rpb247IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDJcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX3RvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQXJyYXlcIjtcbmltcG9ydCBnZXQgZnJvbSBcIi4vZ2V0XCI7XG5mdW5jdGlvbiBpbnRlcm5hbFNldChlbnRpdHksIHBhdGhzLCB2YWx1ZSwgcmVtb3ZlSWZVbmRlZmluZWQpIHtcbiAgaWYgKCFwYXRocy5sZW5ndGgpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIF9wYXRocyA9IF90b0FycmF5KHBhdGhzKSxcbiAgICBwYXRoID0gX3BhdGhzWzBdLFxuICAgIHJlc3RQYXRoID0gX3BhdGhzLnNsaWNlKDEpO1xuICB2YXIgY2xvbmU7XG4gIGlmICghZW50aXR5ICYmIHR5cGVvZiBwYXRoID09PSAnbnVtYmVyJykge1xuICAgIGNsb25lID0gW107XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlbnRpdHkpKSB7XG4gICAgY2xvbmUgPSBfdG9Db25zdW1hYmxlQXJyYXkoZW50aXR5KTtcbiAgfSBlbHNlIHtcbiAgICBjbG9uZSA9IF9vYmplY3RTcHJlYWQoe30sIGVudGl0eSk7XG4gIH1cblxuICAvLyBEZWxldGUgcHJvcCBpZiBgcmVtb3ZlSWZVbmRlZmluZWRgIGFuZCB2YWx1ZSBpcyB1bmRlZmluZWRcbiAgaWYgKHJlbW92ZUlmVW5kZWZpbmVkICYmIHZhbHVlID09PSB1bmRlZmluZWQgJiYgcmVzdFBhdGgubGVuZ3RoID09PSAxKSB7XG4gICAgZGVsZXRlIGNsb25lW3BhdGhdW3Jlc3RQYXRoWzBdXTtcbiAgfSBlbHNlIHtcbiAgICBjbG9uZVtwYXRoXSA9IGludGVybmFsU2V0KGNsb25lW3BhdGhdLCByZXN0UGF0aCwgdmFsdWUsIHJlbW92ZUlmVW5kZWZpbmVkKTtcbiAgfVxuICByZXR1cm4gY2xvbmU7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXQoZW50aXR5LCBwYXRocywgdmFsdWUpIHtcbiAgdmFyIHJlbW92ZUlmVW5kZWZpbmVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcbiAgLy8gRG8gbm90aGluZyBpZiBgcmVtb3ZlSWZVbmRlZmluZWRgIGFuZCBwYXJlbnQgb2JqZWN0IG5vdCBleGlzdFxuICBpZiAocGF0aHMubGVuZ3RoICYmIHJlbW92ZUlmVW5kZWZpbmVkICYmIHZhbHVlID09PSB1bmRlZmluZWQgJiYgIWdldChlbnRpdHksIHBhdGhzLnNsaWNlKDAsIC0xKSkpIHtcbiAgICByZXR1cm4gZW50aXR5O1xuICB9XG4gIHJldHVybiBpbnRlcm5hbFNldChlbnRpdHksIHBhdGhzLCB2YWx1ZSwgcmVtb3ZlSWZVbmRlZmluZWQpO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBfdHlwZW9mKG9iaikgPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVtcHR5KHNvdXJjZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShzb3VyY2UpID8gW10gOiB7fTtcbn1cbnZhciBrZXlzID0gdHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnID8gT2JqZWN0LmtleXMgOiBSZWZsZWN0Lm93bktleXM7XG5cbi8qKlxuICogTWVyZ2Ugb2JqZWN0cyB3aGljaCB3aWxsIGNyZWF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzb3VyY2VzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHNvdXJjZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgdmFyIGNsb25lID0gY3JlYXRlRW1wdHkoc291cmNlc1swXSk7XG4gIHNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc3JjKSB7XG4gICAgZnVuY3Rpb24gaW50ZXJuYWxNZXJnZShwYXRoLCBwYXJlbnRMb29wU2V0KSB7XG4gICAgICB2YXIgbG9vcFNldCA9IG5ldyBTZXQocGFyZW50TG9vcFNldCk7XG4gICAgICB2YXIgdmFsdWUgPSBnZXQoc3JjLCBwYXRoKTtcbiAgICAgIHZhciBpc0FyciA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyIHx8IGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAvLyBPbmx5IGFkZCBub3QgbG9vcCBvYmpcbiAgICAgICAgaWYgKCFsb29wU2V0Lmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgICBsb29wU2V0LmFkZCh2YWx1ZSk7XG4gICAgICAgICAgdmFyIG9yaWdpblZhbHVlID0gZ2V0KGNsb25lLCBwYXRoKTtcbiAgICAgICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgICAgIC8vIEFycmF5IHdpbGwgYWx3YXlzIGJlIG92ZXJyaWRlXG4gICAgICAgICAgICBjbG9uZSA9IHNldChjbG9uZSwgcGF0aCwgW10pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIW9yaWdpblZhbHVlIHx8IF90eXBlb2Yob3JpZ2luVmFsdWUpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgLy8gSW5pdCBjb250YWluZXIgaWYgbm90IGV4aXN0XG4gICAgICAgICAgICBjbG9uZSA9IHNldChjbG9uZSwgcGF0aCwgY3JlYXRlRW1wdHkodmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5cyh2YWx1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpbnRlcm5hbE1lcmdlKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocGF0aCksIFtrZXldKSwgbG9vcFNldCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb25lID0gc2V0KGNsb25lLCBwYXRoLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGludGVybmFsTWVyZ2UoW10pO1xuICB9KTtcbiAgcmV0dXJuIGNsb25lO1xufSIsImV4cG9ydCBkZWZhdWx0ICc1LjEyLjEnOyIsIlwidXNlIGNsaWVudFwiO1xuXG4vKiBlc2xpbnQgaW1wb3J0L25vLXVucmVzb2x2ZWQ6IDAgKi9cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB2ZXJzaW9uIGZyb20gJy4vdmVyc2lvbic7XG5leHBvcnQgZGVmYXVsdCB2ZXJzaW9uOyIsImV4cG9ydCBjb25zdCBkZWZhdWx0UHJlc2V0Q29sb3JzID0ge1xuICBibHVlOiAnIzE2NzdmZicsXG4gIHB1cnBsZTogJyM3MjJFRDEnLFxuICBjeWFuOiAnIzEzQzJDMicsXG4gIGdyZWVuOiAnIzUyQzQxQScsXG4gIG1hZ2VudGE6ICcjRUIyRjk2JyxcbiAgcGluazogJyNlYjJmOTYnLFxuICByZWQ6ICcjRjUyMjJEJyxcbiAgb3JhbmdlOiAnI0ZBOEMxNicsXG4gIHllbGxvdzogJyNGQURCMTQnLFxuICB2b2xjYW5vOiAnI0ZBNTQxQycsXG4gIGdlZWtibHVlOiAnIzJGNTRFQicsXG4gIGdvbGQ6ICcjRkFBRDE0JyxcbiAgbGltZTogJyNBMEQ5MTEnXG59O1xuY29uc3Qgc2VlZFRva2VuID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UHJlc2V0Q29sb3JzKSwge1xuICAvLyBDb2xvclxuICBjb2xvclByaW1hcnk6ICcjMTY3N2ZmJyxcbiAgY29sb3JTdWNjZXNzOiAnIzUyYzQxYScsXG4gIGNvbG9yV2FybmluZzogJyNmYWFkMTQnLFxuICBjb2xvckVycm9yOiAnI2ZmNGQ0ZicsXG4gIGNvbG9ySW5mbzogJyMxNjc3ZmYnLFxuICBjb2xvckxpbms6ICcnLFxuICBjb2xvclRleHRCYXNlOiAnJyxcbiAgY29sb3JCZ0Jhc2U6ICcnLFxuICAvLyBGb250XG4gIGZvbnRGYW1pbHk6IGAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdTZWdvZSBVSScsIFJvYm90bywgJ0hlbHZldGljYSBOZXVlJywgQXJpYWwsXG4nTm90byBTYW5zJywgc2Fucy1zZXJpZiwgJ0FwcGxlIENvbG9yIEVtb2ppJywgJ1NlZ29lIFVJIEVtb2ppJywgJ1NlZ29lIFVJIFN5bWJvbCcsXG4nTm90byBDb2xvciBFbW9qaSdgLFxuICBmb250RmFtaWx5Q29kZTogYCdTRk1vbm8tUmVndWxhcicsIENvbnNvbGFzLCAnTGliZXJhdGlvbiBNb25vJywgTWVubG8sIENvdXJpZXIsIG1vbm9zcGFjZWAsXG4gIGZvbnRTaXplOiAxNCxcbiAgLy8gTGluZVxuICBsaW5lV2lkdGg6IDEsXG4gIGxpbmVUeXBlOiAnc29saWQnLFxuICAvLyBNb3Rpb25cbiAgbW90aW9uVW5pdDogMC4xLFxuICBtb3Rpb25CYXNlOiAwLFxuICBtb3Rpb25FYXNlT3V0Q2lyYzogJ2N1YmljLWJlemllcigwLjA4LCAwLjgyLCAwLjE3LCAxKScsXG4gIG1vdGlvbkVhc2VJbk91dENpcmM6ICdjdWJpYy1iZXppZXIoMC43OCwgMC4xNCwgMC4xNSwgMC44NiknLFxuICBtb3Rpb25FYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxLCAwLjM1NSwgMSknLFxuICBtb3Rpb25FYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC42NDUsIDAuMDQ1LCAwLjM1NSwgMSknLFxuICBtb3Rpb25FYXNlT3V0QmFjazogJ2N1YmljLWJlemllcigwLjEyLCAwLjQsIDAuMjksIDEuNDYpJyxcbiAgbW90aW9uRWFzZUluQmFjazogJ2N1YmljLWJlemllcigwLjcxLCAtMC40NiwgMC44OCwgMC42KScsXG4gIG1vdGlvbkVhc2VJblF1aW50OiAnY3ViaWMtYmV6aWVyKDAuNzU1LCAwLjA1LCAwLjg1NSwgMC4wNiknLFxuICBtb3Rpb25FYXNlT3V0UXVpbnQ6ICdjdWJpYy1iZXppZXIoMC4yMywgMSwgMC4zMiwgMSknLFxuICAvLyBSYWRpdXNcbiAgYm9yZGVyUmFkaXVzOiA2LFxuICAvLyBTaXplXG4gIHNpemVVbml0OiA0LFxuICBzaXplU3RlcDogNCxcbiAgc2l6ZVBvcHVwQXJyb3c6IDE2LFxuICAvLyBDb250cm9sIEJhc2VcbiAgY29udHJvbEhlaWdodDogMzIsXG4gIC8vIHpJbmRleFxuICB6SW5kZXhCYXNlOiAwLFxuICB6SW5kZXhQb3B1cEJhc2U6IDEwMDAsXG4gIC8vIEltYWdlXG4gIG9wYWNpdHlJbWFnZTogMSxcbiAgLy8gV2lyZWZyYW1lXG4gIHdpcmVmcmFtZTogZmFsc2UsXG4gIC8vIE1vdGlvblxuICBtb3Rpb246IHRydWVcbn0pO1xuZXhwb3J0IGRlZmF1bHQgc2VlZFRva2VuOyIsImltcG9ydCB7IG51bWJlcklucHV0VG9PYmplY3QsIHJnYmFUb0hleCwgcmdiVG9IZXgsIHJnYlRvSHNsLCByZ2JUb0hzdiB9IGZyb20gJy4vY29udmVyc2lvbi5qcyc7XG5pbXBvcnQgeyBuYW1lcyB9IGZyb20gJy4vY3NzLWNvbG9yLW5hbWVzLmpzJztcbmltcG9ydCB7IGlucHV0VG9SR0IgfSBmcm9tICcuL2Zvcm1hdC1pbnB1dCc7XG5pbXBvcnQgeyBib3VuZDAxLCBib3VuZEFscGhhLCBjbGFtcDAxIH0gZnJvbSAnLi91dGlsLmpzJztcbnZhciBUaW55Q29sb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGlueUNvbG9yKGNvbG9yLCBvcHRzKSB7XG4gICAgICAgIGlmIChjb2xvciA9PT0gdm9pZCAwKSB7IGNvbG9yID0gJyc7IH1cbiAgICAgICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0ge307IH1cbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyBJZiBpbnB1dCBpcyBhbHJlYWR5IGEgdGlueWNvbG9yLCByZXR1cm4gaXRzZWxmXG4gICAgICAgIGlmIChjb2xvciBpbnN0YW5jZW9mIFRpbnlDb2xvcikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb2xvciA9IG51bWJlcklucHV0VG9PYmplY3QoY29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3JpZ2luYWxJbnB1dCA9IGNvbG9yO1xuICAgICAgICB2YXIgcmdiID0gaW5wdXRUb1JHQihjb2xvcik7XG4gICAgICAgIHRoaXMub3JpZ2luYWxJbnB1dCA9IGNvbG9yO1xuICAgICAgICB0aGlzLnIgPSByZ2IucjtcbiAgICAgICAgdGhpcy5nID0gcmdiLmc7XG4gICAgICAgIHRoaXMuYiA9IHJnYi5iO1xuICAgICAgICB0aGlzLmEgPSByZ2IuYTtcbiAgICAgICAgdGhpcy5yb3VuZEEgPSBNYXRoLnJvdW5kKDEwMCAqIHRoaXMuYSkgLyAxMDA7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gKF9hID0gb3B0cy5mb3JtYXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHJnYi5mb3JtYXQ7XG4gICAgICAgIHRoaXMuZ3JhZGllbnRUeXBlID0gb3B0cy5ncmFkaWVudFR5cGU7XG4gICAgICAgIC8vIERvbid0IGxldCB0aGUgcmFuZ2Ugb2YgWzAsMjU1XSBjb21lIGJhY2sgaW4gWzAsMV0uXG4gICAgICAgIC8vIFBvdGVudGlhbGx5IGxvc2UgYSBsaXR0bGUgYml0IG9mIHByZWNpc2lvbiBoZXJlLCBidXQgd2lsbCBmaXggaXNzdWVzIHdoZXJlXG4gICAgICAgIC8vIC41IGdldHMgaW50ZXJwcmV0ZWQgYXMgaGFsZiBvZiB0aGUgdG90YWwsIGluc3RlYWQgb2YgaGFsZiBvZiAxXG4gICAgICAgIC8vIElmIGl0IHdhcyBzdXBwb3NlZCB0byBiZSAxMjgsIHRoaXMgd2FzIGFscmVhZHkgdGFrZW4gY2FyZSBvZiBieSBgaW5wdXRUb1JnYmBcbiAgICAgICAgaWYgKHRoaXMuciA8IDEpIHtcbiAgICAgICAgICAgIHRoaXMuciA9IE1hdGgucm91bmQodGhpcy5yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5nIDwgMSkge1xuICAgICAgICAgICAgdGhpcy5nID0gTWF0aC5yb3VuZCh0aGlzLmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmIgPCAxKSB7XG4gICAgICAgICAgICB0aGlzLmIgPSBNYXRoLnJvdW5kKHRoaXMuYik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1ZhbGlkID0gcmdiLm9rO1xuICAgIH1cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmlzRGFyayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnJpZ2h0bmVzcygpIDwgMTI4O1xuICAgIH07XG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5pc0xpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNEYXJrKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZXJjZWl2ZWQgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IsIGZyb20gMC0yNTUuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5nZXRCcmlnaHRuZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9BRVJUI2NvbG9yLWNvbnRyYXN0XG4gICAgICAgIHZhciByZ2IgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHJldHVybiAocmdiLnIgKiAyOTkgKyByZ2IuZyAqIDU4NyArIHJnYi5iICogMTE0KSAvIDEwMDA7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwZXJjZWl2ZWQgbHVtaW5hbmNlIG9mIGEgY29sb3IsIGZyb20gMC0xLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuZ2V0THVtaW5hbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG4gICAgICAgIHZhciByZ2IgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHZhciBSO1xuICAgICAgICB2YXIgRztcbiAgICAgICAgdmFyIEI7XG4gICAgICAgIHZhciBSc1JHQiA9IHJnYi5yIC8gMjU1O1xuICAgICAgICB2YXIgR3NSR0IgPSByZ2IuZyAvIDI1NTtcbiAgICAgICAgdmFyIEJzUkdCID0gcmdiLmIgLyAyNTU7XG4gICAgICAgIGlmIChSc1JHQiA8PSAwLjAzOTI4KSB7XG4gICAgICAgICAgICBSID0gUnNSR0IgLyAxMi45MjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZXhwb25lbnRpYXRpb24tb3BlcmF0b3JcbiAgICAgICAgICAgIFIgPSBNYXRoLnBvdygoUnNSR0IgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoR3NSR0IgPD0gMC4wMzkyOCkge1xuICAgICAgICAgICAgRyA9IEdzUkdCIC8gMTIuOTI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWV4cG9uZW50aWF0aW9uLW9wZXJhdG9yXG4gICAgICAgICAgICBHID0gTWF0aC5wb3coKEdzUkdCICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJzUkdCIDw9IDAuMDM5MjgpIHtcbiAgICAgICAgICAgIEIgPSBCc1JHQiAvIDEyLjkyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1leHBvbmVudGlhdGlvbi1vcGVyYXRvclxuICAgICAgICAgICAgQiA9IE1hdGgucG93KChCc1JHQiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwLjIxMjYgKiBSICsgMC43MTUyICogRyArIDAuMDcyMiAqIEI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhbHBoYSB2YWx1ZSBvZiBhIGNvbG9yLCBmcm9tIDAtMS5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmdldEFscGhhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYWxwaGEgdmFsdWUgb24gdGhlIGN1cnJlbnQgY29sb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWxwaGEgLSBUaGUgbmV3IGFscGhhIHZhbHVlLiBUaGUgYWNjZXB0ZWQgcmFuZ2UgaXMgMC0xLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuc2V0QWxwaGEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcbiAgICAgICAgdGhpcy5hID0gYm91bmRBbHBoYShhbHBoYSk7XG4gICAgICAgIHRoaXMucm91bmRBID0gTWF0aC5yb3VuZCgxMDAgKiB0aGlzLmEpIC8gMTAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgY29sb3IgaXMgbW9ub2Nocm9tZS5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmlzTW9ub2Nocm9tZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHMgPSB0aGlzLnRvSHNsKCkucztcbiAgICAgICAgcmV0dXJuIHMgPT09IDA7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBvYmplY3QgYXMgYSBIU1ZBIG9iamVjdC5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvSHN2ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaHN2ID0gcmdiVG9Ic3YodGhpcy5yLCB0aGlzLmcsIHRoaXMuYik7XG4gICAgICAgIHJldHVybiB7IGg6IGhzdi5oICogMzYwLCBzOiBoc3YucywgdjogaHN2LnYsIGE6IHRoaXMuYSB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaHN2YSB2YWx1ZXMgaW50ZXJwb2xhdGVkIGludG8gYSBzdHJpbmcgd2l0aCB0aGUgZm9sbG93aW5nIGZvcm1hdDpcbiAgICAgKiBcImhzdmEoeHh4LCB4eHgsIHh4eCwgeHgpXCIuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hzdlN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhzdiA9IHJnYlRvSHN2KHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuICAgICAgICB2YXIgaCA9IE1hdGgucm91bmQoaHN2LmggKiAzNjApO1xuICAgICAgICB2YXIgcyA9IE1hdGgucm91bmQoaHN2LnMgKiAxMDApO1xuICAgICAgICB2YXIgdiA9IE1hdGgucm91bmQoaHN2LnYgKiAxMDApO1xuICAgICAgICByZXR1cm4gdGhpcy5hID09PSAxID8gXCJoc3YoXCIuY29uY2F0KGgsIFwiLCBcIikuY29uY2F0KHMsIFwiJSwgXCIpLmNvbmNhdCh2LCBcIiUpXCIpIDogXCJoc3ZhKFwiLmNvbmNhdChoLCBcIiwgXCIpLmNvbmNhdChzLCBcIiUsIFwiKS5jb25jYXQodiwgXCIlLCBcIikuY29uY2F0KHRoaXMucm91bmRBLCBcIilcIik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBvYmplY3QgYXMgYSBIU0xBIG9iamVjdC5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvSHNsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaHNsID0gcmdiVG9Ic2wodGhpcy5yLCB0aGlzLmcsIHRoaXMuYik7XG4gICAgICAgIHJldHVybiB7IGg6IGhzbC5oICogMzYwLCBzOiBoc2wucywgbDogaHNsLmwsIGE6IHRoaXMuYSB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaHNsYSB2YWx1ZXMgaW50ZXJwb2xhdGVkIGludG8gYSBzdHJpbmcgd2l0aCB0aGUgZm9sbG93aW5nIGZvcm1hdDpcbiAgICAgKiBcImhzbGEoeHh4LCB4eHgsIHh4eCwgeHgpXCIuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hzbFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhzbCA9IHJnYlRvSHNsKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuICAgICAgICB2YXIgaCA9IE1hdGgucm91bmQoaHNsLmggKiAzNjApO1xuICAgICAgICB2YXIgcyA9IE1hdGgucm91bmQoaHNsLnMgKiAxMDApO1xuICAgICAgICB2YXIgbCA9IE1hdGgucm91bmQoaHNsLmwgKiAxMDApO1xuICAgICAgICByZXR1cm4gdGhpcy5hID09PSAxID8gXCJoc2woXCIuY29uY2F0KGgsIFwiLCBcIikuY29uY2F0KHMsIFwiJSwgXCIpLmNvbmNhdChsLCBcIiUpXCIpIDogXCJoc2xhKFwiLmNvbmNhdChoLCBcIiwgXCIpLmNvbmNhdChzLCBcIiUsIFwiKS5jb25jYXQobCwgXCIlLCBcIikuY29uY2F0KHRoaXMucm91bmRBLCBcIilcIik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoZXggdmFsdWUgb2YgdGhlIGNvbG9yLlxuICAgICAqIEBwYXJhbSBhbGxvdzNDaGFyIHdpbGwgc2hvcnRlbiBoZXggdmFsdWUgdG8gMyBjaGFyIGlmIHBvc3NpYmxlXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uIChhbGxvdzNDaGFyKSB7XG4gICAgICAgIGlmIChhbGxvdzNDaGFyID09PSB2b2lkIDApIHsgYWxsb3czQ2hhciA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiByZ2JUb0hleCh0aGlzLnIsIHRoaXMuZywgdGhpcy5iLCBhbGxvdzNDaGFyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhleCB2YWx1ZSBvZiB0aGUgY29sb3IgLXdpdGggYSAjIHByZWZpeGVkLlxuICAgICAqIEBwYXJhbSBhbGxvdzNDaGFyIHdpbGwgc2hvcnRlbiBoZXggdmFsdWUgdG8gMyBjaGFyIGlmIHBvc3NpYmxlXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hleFN0cmluZyA9IGZ1bmN0aW9uIChhbGxvdzNDaGFyKSB7XG4gICAgICAgIGlmIChhbGxvdzNDaGFyID09PSB2b2lkIDApIHsgYWxsb3czQ2hhciA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiAnIycgKyB0aGlzLnRvSGV4KGFsbG93M0NoYXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaGV4IDggdmFsdWUgb2YgdGhlIGNvbG9yLlxuICAgICAqIEBwYXJhbSBhbGxvdzRDaGFyIHdpbGwgc2hvcnRlbiBoZXggdmFsdWUgdG8gNCBjaGFyIGlmIHBvc3NpYmxlXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hleDggPSBmdW5jdGlvbiAoYWxsb3c0Q2hhcikge1xuICAgICAgICBpZiAoYWxsb3c0Q2hhciA9PT0gdm9pZCAwKSB7IGFsbG93NENoYXIgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gcmdiYVRvSGV4KHRoaXMuciwgdGhpcy5nLCB0aGlzLmIsIHRoaXMuYSwgYWxsb3c0Q2hhcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoZXggOCB2YWx1ZSBvZiB0aGUgY29sb3IgLXdpdGggYSAjIHByZWZpeGVkLlxuICAgICAqIEBwYXJhbSBhbGxvdzRDaGFyIHdpbGwgc2hvcnRlbiBoZXggdmFsdWUgdG8gNCBjaGFyIGlmIHBvc3NpYmxlXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hleDhTdHJpbmcgPSBmdW5jdGlvbiAoYWxsb3c0Q2hhcikge1xuICAgICAgICBpZiAoYWxsb3c0Q2hhciA9PT0gdm9pZCAwKSB7IGFsbG93NENoYXIgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gJyMnICsgdGhpcy50b0hleDgoYWxsb3c0Q2hhcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzaG9ydGVyIGhleCB2YWx1ZSBvZiB0aGUgY29sb3IgZGVwZW5kcyBvbiBpdHMgYWxwaGEgLXdpdGggYSAjIHByZWZpeGVkLlxuICAgICAqIEBwYXJhbSBhbGxvd1Nob3J0Q2hhciB3aWxsIHNob3J0ZW4gaGV4IHZhbHVlIHRvIDMgb3IgNCBjaGFyIGlmIHBvc3NpYmxlXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b0hleFNob3J0U3RyaW5nID0gZnVuY3Rpb24gKGFsbG93U2hvcnRDaGFyKSB7XG4gICAgICAgIGlmIChhbGxvd1Nob3J0Q2hhciA9PT0gdm9pZCAwKSB7IGFsbG93U2hvcnRDaGFyID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYSA9PT0gMSA/IHRoaXMudG9IZXhTdHJpbmcoYWxsb3dTaG9ydENoYXIpIDogdGhpcy50b0hleDhTdHJpbmcoYWxsb3dTaG9ydENoYXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgb2JqZWN0IGFzIGEgUkdCQSBvYmplY3QuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b1JnYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IE1hdGgucm91bmQodGhpcy5yKSxcbiAgICAgICAgICAgIGc6IE1hdGgucm91bmQodGhpcy5nKSxcbiAgICAgICAgICAgIGI6IE1hdGgucm91bmQodGhpcy5iKSxcbiAgICAgICAgICAgIGE6IHRoaXMuYSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFJHQkEgdmFsdWVzIGludGVycG9sYXRlZCBpbnRvIGEgc3RyaW5nIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gICAgICogXCJSR0JBKHh4eCwgeHh4LCB4eHgsIHh4KVwiLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9SZ2JTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByID0gTWF0aC5yb3VuZCh0aGlzLnIpO1xuICAgICAgICB2YXIgZyA9IE1hdGgucm91bmQodGhpcy5nKTtcbiAgICAgICAgdmFyIGIgPSBNYXRoLnJvdW5kKHRoaXMuYik7XG4gICAgICAgIHJldHVybiB0aGlzLmEgPT09IDEgPyBcInJnYihcIi5jb25jYXQociwgXCIsIFwiKS5jb25jYXQoZywgXCIsIFwiKS5jb25jYXQoYiwgXCIpXCIpIDogXCJyZ2JhKFwiLmNvbmNhdChyLCBcIiwgXCIpLmNvbmNhdChnLCBcIiwgXCIpLmNvbmNhdChiLCBcIiwgXCIpLmNvbmNhdCh0aGlzLnJvdW5kQSwgXCIpXCIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgb2JqZWN0IGFzIGEgUkdCQSBvYmplY3QuXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b1BlcmNlbnRhZ2VSZ2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmbXQgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChib3VuZDAxKHgsIDI1NSkgKiAxMDApLCBcIiVcIik7IH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBmbXQodGhpcy5yKSxcbiAgICAgICAgICAgIGc6IGZtdCh0aGlzLmcpLFxuICAgICAgICAgICAgYjogZm10KHRoaXMuYiksXG4gICAgICAgICAgICBhOiB0aGlzLmEsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBSR0JBIHJlbGF0aXZlIHZhbHVlcyBpbnRlcnBvbGF0ZWQgaW50byBhIHN0cmluZ1xuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUudG9QZXJjZW50YWdlUmdiU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcm5kID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoYm91bmQwMSh4LCAyNTUpICogMTAwKTsgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYSA9PT0gMVxuICAgICAgICAgICAgPyBcInJnYihcIi5jb25jYXQocm5kKHRoaXMuciksIFwiJSwgXCIpLmNvbmNhdChybmQodGhpcy5nKSwgXCIlLCBcIikuY29uY2F0KHJuZCh0aGlzLmIpLCBcIiUpXCIpXG4gICAgICAgICAgICA6IFwicmdiYShcIi5jb25jYXQocm5kKHRoaXMuciksIFwiJSwgXCIpLmNvbmNhdChybmQodGhpcy5nKSwgXCIlLCBcIikuY29uY2F0KHJuZCh0aGlzLmIpLCBcIiUsIFwiKS5jb25jYXQodGhpcy5yb3VuZEEsIFwiKVwiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSAncmVhbCcgbmFtZSBvZiB0aGUgY29sb3IgLWlmIHRoZXJlIGlzIG9uZS5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICd0cmFuc3BhcmVudCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYSA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGV4ID0gJyMnICsgcmdiVG9IZXgodGhpcy5yLCB0aGlzLmcsIHRoaXMuYiwgZmFsc2UpO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmVudHJpZXMobmFtZXMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIF9iID0gX2FbX2ldLCBrZXkgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcbiAgICAgICAgICAgIGlmIChoZXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICB2YXIgZm9ybWF0U2V0ID0gQm9vbGVhbihmb3JtYXQpO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgIT09IG51bGwgJiYgZm9ybWF0ICE9PSB2b2lkIDAgPyBmb3JtYXQgOiB0aGlzLmZvcm1hdDtcbiAgICAgICAgdmFyIGZvcm1hdHRlZFN0cmluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFzQWxwaGEgPSB0aGlzLmEgPCAxICYmIHRoaXMuYSA+PSAwO1xuICAgICAgICB2YXIgbmVlZHNBbHBoYUZvcm1hdCA9ICFmb3JtYXRTZXQgJiYgaGFzQWxwaGEgJiYgKGZvcm1hdC5zdGFydHNXaXRoKCdoZXgnKSB8fCBmb3JtYXQgPT09ICduYW1lJyk7XG4gICAgICAgIGlmIChuZWVkc0FscGhhRm9ybWF0KSB7XG4gICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIFwidHJhbnNwYXJlbnRcIiwgYWxsIG90aGVyIG5vbi1hbHBoYSBmb3JtYXRzXG4gICAgICAgICAgICAvLyB3aWxsIHJldHVybiByZ2JhIHdoZW4gdGhlcmUgaXMgdHJhbnNwYXJlbmN5LlxuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ25hbWUnICYmIHRoaXMuYSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvTmFtZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9SZ2JTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSAncmdiJykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b1JnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdwcmdiJykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b1BlcmNlbnRhZ2VSZ2JTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSAnaGV4JyB8fCBmb3JtYXQgPT09ICdoZXg2Jykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdoZXgzJykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleFN0cmluZyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSAnaGV4NCcpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXg4U3RyaW5nKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdoZXg4Jykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleDhTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSAnbmFtZScpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9OYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2hzbCcpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9Ic2xTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSAnaHN2Jykge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hzdlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWRTdHJpbmcgfHwgdGhpcy50b0hleFN0cmluZygpO1xuICAgIH07XG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChNYXRoLnJvdW5kKHRoaXMucikgPDwgMTYpICsgKE1hdGgucm91bmQodGhpcy5nKSA8PCA4KSArIE1hdGgucm91bmQodGhpcy5iKTtcbiAgICB9O1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKHRoaXMudG9TdHJpbmcoKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBMaWdodGVuIHRoZSBjb2xvciBhIGdpdmVuIGFtb3VudC4gUHJvdmlkaW5nIDEwMCB3aWxsIGFsd2F5cyByZXR1cm4gd2hpdGUuXG4gICAgICogQHBhcmFtIGFtb3VudCAtIHZhbGlkIGJldHdlZW4gMS0xMDBcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmxpZ2h0ZW4gPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAxMDsgfVxuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICBoc2wubCArPSBhbW91bnQgLyAxMDA7XG4gICAgICAgIGhzbC5sID0gY2xhbXAwMShoc2wubCk7XG4gICAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKGhzbCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBCcmlnaHRlbiB0aGUgY29sb3IgYSBnaXZlbiBhbW91bnQsIGZyb20gMCB0byAxMDAuXG4gICAgICogQHBhcmFtIGFtb3VudCAtIHZhbGlkIGJldHdlZW4gMS0xMDBcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmJyaWdodGVuID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMTA7IH1cbiAgICAgICAgdmFyIHJnYiA9IHRoaXMudG9SZ2IoKTtcbiAgICAgICAgcmdiLnIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIHJnYi5yIC0gTWF0aC5yb3VuZCgyNTUgKiAtKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgICAgIHJnYi5nID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCByZ2IuZyAtIE1hdGgucm91bmQoMjU1ICogLShhbW91bnQgLyAxMDApKSkpO1xuICAgICAgICByZ2IuYiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgcmdiLmIgLSBNYXRoLnJvdW5kKDI1NSAqIC0oYW1vdW50IC8gMTAwKSkpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IocmdiKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERhcmtlbiB0aGUgY29sb3IgYSBnaXZlbiBhbW91bnQsIGZyb20gMCB0byAxMDAuXG4gICAgICogUHJvdmlkaW5nIDEwMCB3aWxsIGFsd2F5cyByZXR1cm4gYmxhY2suXG4gICAgICogQHBhcmFtIGFtb3VudCAtIHZhbGlkIGJldHdlZW4gMS0xMDBcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLmRhcmtlbiA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDEwOyB9XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIGhzbC5sIC09IGFtb3VudCAvIDEwMDtcbiAgICAgICAgaHNsLmwgPSBjbGFtcDAxKGhzbC5sKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IoaHNsKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1peCB0aGUgY29sb3Igd2l0aCBwdXJlIHdoaXRlLCBmcm9tIDAgdG8gMTAwLlxuICAgICAqIFByb3ZpZGluZyAwIHdpbGwgZG8gbm90aGluZywgcHJvdmlkaW5nIDEwMCB3aWxsIGFsd2F5cyByZXR1cm4gd2hpdGUuXG4gICAgICogQHBhcmFtIGFtb3VudCAtIHZhbGlkIGJldHdlZW4gMS0xMDBcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnRpbnQgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAxMDsgfVxuICAgICAgICByZXR1cm4gdGhpcy5taXgoJ3doaXRlJywgYW1vdW50KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1peCB0aGUgY29sb3Igd2l0aCBwdXJlIGJsYWNrLCBmcm9tIDAgdG8gMTAwLlxuICAgICAqIFByb3ZpZGluZyAwIHdpbGwgZG8gbm90aGluZywgcHJvdmlkaW5nIDEwMCB3aWxsIGFsd2F5cyByZXR1cm4gYmxhY2suXG4gICAgICogQHBhcmFtIGFtb3VudCAtIHZhbGlkIGJldHdlZW4gMS0xMDBcbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnNoYWRlID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMTA7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWl4KCdibGFjaycsIGFtb3VudCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXNhdHVyYXRlIHRoZSBjb2xvciBhIGdpdmVuIGFtb3VudCwgZnJvbSAwIHRvIDEwMC5cbiAgICAgKiBQcm92aWRpbmcgMTAwIHdpbGwgaXMgdGhlIHNhbWUgYXMgY2FsbGluZyBncmV5c2NhbGVcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuZGVzYXR1cmF0ZSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gdm9pZCAwKSB7IGFtb3VudCA9IDEwOyB9XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIGhzbC5zIC09IGFtb3VudCAvIDEwMDtcbiAgICAgICAgaHNsLnMgPSBjbGFtcDAxKGhzbC5zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IoaHNsKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNhdHVyYXRlIHRoZSBjb2xvciBhIGdpdmVuIGFtb3VudCwgZnJvbSAwIHRvIDEwMC5cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gdmFsaWQgYmV0d2VlbiAxLTEwMFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuc2F0dXJhdGUgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAxMDsgfVxuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICBoc2wucyArPSBhbW91bnQgLyAxMDA7XG4gICAgICAgIGhzbC5zID0gY2xhbXAwMShoc2wucyk7XG4gICAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKGhzbCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb21wbGV0ZWx5IGRlc2F0dXJhdGVzIGEgY29sb3IgaW50byBncmV5c2NhbGUuXG4gICAgICogU2FtZSBhcyBjYWxsaW5nIGBkZXNhdHVyYXRlKDEwMClgXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5ncmV5c2NhbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlc2F0dXJhdGUoMTAwKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNwaW4gdGFrZXMgYSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSBhbW91bnQgd2l0aGluIFstMzYwLCAzNjBdIGluZGljYXRpbmcgdGhlIGNoYW5nZSBvZiBodWUuXG4gICAgICogVmFsdWVzIG91dHNpZGUgb2YgdGhpcyByYW5nZSB3aWxsIGJlIHdyYXBwZWQgaW50byB0aGlzIHJhbmdlLlxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuc3BpbiA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgdmFyIGhzbCA9IHRoaXMudG9Ic2woKTtcbiAgICAgICAgdmFyIGh1ZSA9IChoc2wuaCArIGFtb3VudCkgJSAzNjA7XG4gICAgICAgIGhzbC5oID0gaHVlIDwgMCA/IDM2MCArIGh1ZSA6IGh1ZTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3IoaHNsKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE1peCB0aGUgY3VycmVudCBjb2xvciBhIGdpdmVuIGFtb3VudCB3aXRoIGFub3RoZXIgY29sb3IsIGZyb20gMCB0byAxMDAuXG4gICAgICogMCBtZWFucyBubyBtaXhpbmcgKHJldHVybiBjdXJyZW50IGNvbG9yKS5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLm1peCA9IGZ1bmN0aW9uIChjb2xvciwgYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSA1MDsgfVxuICAgICAgICB2YXIgcmdiMSA9IHRoaXMudG9SZ2IoKTtcbiAgICAgICAgdmFyIHJnYjIgPSBuZXcgVGlueUNvbG9yKGNvbG9yKS50b1JnYigpO1xuICAgICAgICB2YXIgcCA9IGFtb3VudCAvIDEwMDtcbiAgICAgICAgdmFyIHJnYmEgPSB7XG4gICAgICAgICAgICByOiAocmdiMi5yIC0gcmdiMS5yKSAqIHAgKyByZ2IxLnIsXG4gICAgICAgICAgICBnOiAocmdiMi5nIC0gcmdiMS5nKSAqIHAgKyByZ2IxLmcsXG4gICAgICAgICAgICBiOiAocmdiMi5iIC0gcmdiMS5iKSAqIHAgKyByZ2IxLmIsXG4gICAgICAgICAgICBhOiAocmdiMi5hIC0gcmdiMS5hKSAqIHAgKyByZ2IxLmEsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKHJnYmEpO1xuICAgIH07XG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5hbmFsb2dvdXMgPSBmdW5jdGlvbiAocmVzdWx0cywgc2xpY2VzKSB7XG4gICAgICAgIGlmIChyZXN1bHRzID09PSB2b2lkIDApIHsgcmVzdWx0cyA9IDY7IH1cbiAgICAgICAgaWYgKHNsaWNlcyA9PT0gdm9pZCAwKSB7IHNsaWNlcyA9IDMwOyB9XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIHZhciBwYXJ0ID0gMzYwIC8gc2xpY2VzO1xuICAgICAgICB2YXIgcmV0ID0gW3RoaXNdO1xuICAgICAgICBmb3IgKGhzbC5oID0gKGhzbC5oIC0gKChwYXJ0ICogcmVzdWx0cykgPj4gMSkgKyA3MjApICUgMzYwOyAtLXJlc3VsdHM7KSB7XG4gICAgICAgICAgICBoc2wuaCA9IChoc2wuaCArIHBhcnQpICUgMzYwO1xuICAgICAgICAgICAgcmV0LnB1c2gobmV3IFRpbnlDb2xvcihoc2wpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vaW5mdXNpb24valF1ZXJ5LXhjb2xvci9ibG9iL21hc3Rlci9qcXVlcnkueGNvbG9yLmpzXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5jb21wbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaHNsID0gdGhpcy50b0hzbCgpO1xuICAgICAgICBoc2wuaCA9IChoc2wuaCArIDE4MCkgJSAzNjA7XG4gICAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKGhzbCk7XG4gICAgfTtcbiAgICBUaW55Q29sb3IucHJvdG90eXBlLm1vbm9jaHJvbWF0aWMgPSBmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgICBpZiAocmVzdWx0cyA9PT0gdm9pZCAwKSB7IHJlc3VsdHMgPSA2OyB9XG4gICAgICAgIHZhciBoc3YgPSB0aGlzLnRvSHN2KCk7XG4gICAgICAgIHZhciBoID0gaHN2Lmg7XG4gICAgICAgIHZhciBzID0gaHN2LnM7XG4gICAgICAgIHZhciB2ID0gaHN2LnY7XG4gICAgICAgIHZhciByZXMgPSBbXTtcbiAgICAgICAgdmFyIG1vZGlmaWNhdGlvbiA9IDEgLyByZXN1bHRzO1xuICAgICAgICB3aGlsZSAocmVzdWx0cy0tKSB7XG4gICAgICAgICAgICByZXMucHVzaChuZXcgVGlueUNvbG9yKHsgaDogaCwgczogcywgdjogdiB9KSk7XG4gICAgICAgICAgICB2ID0gKHYgKyBtb2RpZmljYXRpb24pICUgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS5zcGxpdGNvbXBsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIHZhciBoID0gaHNsLmg7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgbmV3IFRpbnlDb2xvcih7IGg6IChoICsgNzIpICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSksXG4gICAgICAgICAgICBuZXcgVGlueUNvbG9yKHsgaDogKGggKyAyMTYpICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSksXG4gICAgICAgIF07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlIGhvdyB0aGUgY29sb3Igd291bGQgYXBwZWFyIG9uIGEgYmFja2dyb3VuZFxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUub25CYWNrZ3JvdW5kID0gZnVuY3Rpb24gKGJhY2tncm91bmQpIHtcbiAgICAgICAgdmFyIGZnID0gdGhpcy50b1JnYigpO1xuICAgICAgICB2YXIgYmcgPSBuZXcgVGlueUNvbG9yKGJhY2tncm91bmQpLnRvUmdiKCk7XG4gICAgICAgIHZhciBhbHBoYSA9IGZnLmEgKyBiZy5hICogKDEgLSBmZy5hKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3Ioe1xuICAgICAgICAgICAgcjogKGZnLnIgKiBmZy5hICsgYmcuciAqIGJnLmEgKiAoMSAtIGZnLmEpKSAvIGFscGhhLFxuICAgICAgICAgICAgZzogKGZnLmcgKiBmZy5hICsgYmcuZyAqIGJnLmEgKiAoMSAtIGZnLmEpKSAvIGFscGhhLFxuICAgICAgICAgICAgYjogKGZnLmIgKiBmZy5hICsgYmcuYiAqIGJnLmEgKiAoMSAtIGZnLmEpKSAvIGFscGhhLFxuICAgICAgICAgICAgYTogYWxwaGEsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGBwb2x5YWQoMylgXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50cmlhZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9seWFkKDMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGBwb2x5YWQoNClgXG4gICAgICovXG4gICAgVGlueUNvbG9yLnByb3RvdHlwZS50ZXRyYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvbHlhZCg0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBwb2x5YWQgY29sb3JzLCBsaWtlIChmb3IgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgZXRjLi4uKVxuICAgICAqIG1vbmFkLCBkeWFkLCB0cmlhZCwgdGV0cmFkLCBwZW50YWQsIGhleGFkLCBoZXB0YWQsIG9jdGFkLCBldGMuLi5cbiAgICAgKi9cbiAgICBUaW55Q29sb3IucHJvdG90eXBlLnBvbHlhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHZhciBoc2wgPSB0aGlzLnRvSHNsKCk7XG4gICAgICAgIHZhciBoID0gaHNsLmg7XG4gICAgICAgIHZhciByZXN1bHQgPSBbdGhpc107XG4gICAgICAgIHZhciBpbmNyZW1lbnQgPSAzNjAgLyBuO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IFRpbnlDb2xvcih7IGg6IChoICsgaSAqIGluY3JlbWVudCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGNvbXBhcmUgY29sb3IgdnMgY3VycmVudCBjb2xvclxuICAgICAqL1xuICAgIFRpbnlDb2xvci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvUmdiU3RyaW5nKCkgPT09IG5ldyBUaW55Q29sb3IoY29sb3IpLnRvUmdiU3RyaW5nKCk7XG4gICAgfTtcbiAgICByZXR1cm4gVGlueUNvbG9yO1xufSgpKTtcbmV4cG9ydCB7IFRpbnlDb2xvciB9O1xuLy8ga2VwdCBmb3IgYmFja3dhcmRzIGNvbXBhdGFiaWxpdHkgd2l0aCB2MVxuZXhwb3J0IGZ1bmN0aW9uIHRpbnljb2xvcihjb2xvciwgb3B0cykge1xuICAgIGlmIChjb2xvciA9PT0gdm9pZCAwKSB7IGNvbG9yID0gJyc7IH1cbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7IG9wdHMgPSB7fTsgfVxuICAgIHJldHVybiBuZXcgVGlueUNvbG9yKGNvbG9yLCBvcHRzKTtcbn1cbiIsImNvbnN0IGdlblJhZGl1cyA9IHJhZGl1c0Jhc2UgPT4ge1xuICBsZXQgcmFkaXVzTEcgPSByYWRpdXNCYXNlO1xuICBsZXQgcmFkaXVzU00gPSByYWRpdXNCYXNlO1xuICBsZXQgcmFkaXVzWFMgPSByYWRpdXNCYXNlO1xuICBsZXQgcmFkaXVzT3V0ZXIgPSByYWRpdXNCYXNlO1xuICAvLyByYWRpdXNMR1xuICBpZiAocmFkaXVzQmFzZSA8IDYgJiYgcmFkaXVzQmFzZSA+PSA1KSB7XG4gICAgcmFkaXVzTEcgPSByYWRpdXNCYXNlICsgMTtcbiAgfSBlbHNlIGlmIChyYWRpdXNCYXNlIDwgMTYgJiYgcmFkaXVzQmFzZSA+PSA2KSB7XG4gICAgcmFkaXVzTEcgPSByYWRpdXNCYXNlICsgMjtcbiAgfSBlbHNlIGlmIChyYWRpdXNCYXNlID49IDE2KSB7XG4gICAgcmFkaXVzTEcgPSAxNjtcbiAgfVxuICAvLyByYWRpdXNTTVxuICBpZiAocmFkaXVzQmFzZSA8IDcgJiYgcmFkaXVzQmFzZSA+PSA1KSB7XG4gICAgcmFkaXVzU00gPSA0O1xuICB9IGVsc2UgaWYgKHJhZGl1c0Jhc2UgPCA4ICYmIHJhZGl1c0Jhc2UgPj0gNykge1xuICAgIHJhZGl1c1NNID0gNTtcbiAgfSBlbHNlIGlmIChyYWRpdXNCYXNlIDwgMTQgJiYgcmFkaXVzQmFzZSA+PSA4KSB7XG4gICAgcmFkaXVzU00gPSA2O1xuICB9IGVsc2UgaWYgKHJhZGl1c0Jhc2UgPCAxNiAmJiByYWRpdXNCYXNlID49IDE0KSB7XG4gICAgcmFkaXVzU00gPSA3O1xuICB9IGVsc2UgaWYgKHJhZGl1c0Jhc2UgPj0gMTYpIHtcbiAgICByYWRpdXNTTSA9IDg7XG4gIH1cbiAgLy8gcmFkaXVzWFNcbiAgaWYgKHJhZGl1c0Jhc2UgPCA2ICYmIHJhZGl1c0Jhc2UgPj0gMikge1xuICAgIHJhZGl1c1hTID0gMTtcbiAgfSBlbHNlIGlmIChyYWRpdXNCYXNlID49IDYpIHtcbiAgICByYWRpdXNYUyA9IDI7XG4gIH1cbiAgLy8gcmFkaXVzT3V0ZXJcbiAgaWYgKHJhZGl1c0Jhc2UgPiA0ICYmIHJhZGl1c0Jhc2UgPCA4KSB7XG4gICAgcmFkaXVzT3V0ZXIgPSA0O1xuICB9IGVsc2UgaWYgKHJhZGl1c0Jhc2UgPj0gOCkge1xuICAgIHJhZGl1c091dGVyID0gNjtcbiAgfVxuICByZXR1cm4ge1xuICAgIGJvcmRlclJhZGl1czogcmFkaXVzQmFzZSxcbiAgICBib3JkZXJSYWRpdXNYUzogcmFkaXVzWFMsXG4gICAgYm9yZGVyUmFkaXVzU006IHJhZGl1c1NNLFxuICAgIGJvcmRlclJhZGl1c0xHOiByYWRpdXNMRyxcbiAgICBib3JkZXJSYWRpdXNPdXRlcjogcmFkaXVzT3V0ZXJcbiAgfTtcbn07XG5leHBvcnQgZGVmYXVsdCBnZW5SYWRpdXM7IiwiaW1wb3J0IHsgVGlueUNvbG9yIH0gZnJvbSAnQGN0cmwvdGlueWNvbG9yJztcbmV4cG9ydCBjb25zdCBnZXRBbHBoYUNvbG9yID0gKGJhc2VDb2xvciwgYWxwaGEpID0+IG5ldyBUaW55Q29sb3IoYmFzZUNvbG9yKS5zZXRBbHBoYShhbHBoYSkudG9SZ2JTdHJpbmcoKTtcbmV4cG9ydCBjb25zdCBnZXRTb2xpZENvbG9yID0gKGJhc2VDb2xvciwgYnJpZ2h0bmVzcykgPT4ge1xuICBjb25zdCBpbnN0YW5jZSA9IG5ldyBUaW55Q29sb3IoYmFzZUNvbG9yKTtcbiAgcmV0dXJuIGluc3RhbmNlLmRhcmtlbihicmlnaHRuZXNzKS50b0hleFN0cmluZygpO1xufTsiLCJpbXBvcnQgeyBnZW5lcmF0ZSB9IGZyb20gJ0BhbnQtZGVzaWduL2NvbG9ycyc7XG5pbXBvcnQgeyBnZXRBbHBoYUNvbG9yLCBnZXRTb2xpZENvbG9yIH0gZnJvbSAnLi9jb2xvckFsZ29yaXRobSc7XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVDb2xvclBhbGV0dGVzID0gYmFzZUNvbG9yID0+IHtcbiAgY29uc3QgY29sb3JzID0gZ2VuZXJhdGUoYmFzZUNvbG9yKTtcbiAgcmV0dXJuIHtcbiAgICAxOiBjb2xvcnNbMF0sXG4gICAgMjogY29sb3JzWzFdLFxuICAgIDM6IGNvbG9yc1syXSxcbiAgICA0OiBjb2xvcnNbM10sXG4gICAgNTogY29sb3JzWzRdLFxuICAgIDY6IGNvbG9yc1s1XSxcbiAgICA3OiBjb2xvcnNbNl0sXG4gICAgODogY29sb3JzWzRdLFxuICAgIDk6IGNvbG9yc1s1XSxcbiAgICAxMDogY29sb3JzWzZdXG4gICAgLy8gODogY29sb3JzWzddLFxuICAgIC8vIDk6IGNvbG9yc1s4XSxcbiAgICAvLyAxMDogY29sb3JzWzldLFxuICB9O1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZU5ldXRyYWxDb2xvclBhbGV0dGVzID0gKGJnQmFzZUNvbG9yLCB0ZXh0QmFzZUNvbG9yKSA9PiB7XG4gIGNvbnN0IGNvbG9yQmdCYXNlID0gYmdCYXNlQ29sb3IgfHwgJyNmZmYnO1xuICBjb25zdCBjb2xvclRleHRCYXNlID0gdGV4dEJhc2VDb2xvciB8fCAnIzAwMCc7XG4gIHJldHVybiB7XG4gICAgY29sb3JCZ0Jhc2UsXG4gICAgY29sb3JUZXh0QmFzZSxcbiAgICBjb2xvclRleHQ6IGdldEFscGhhQ29sb3IoY29sb3JUZXh0QmFzZSwgMC44OCksXG4gICAgY29sb3JUZXh0U2Vjb25kYXJ5OiBnZXRBbHBoYUNvbG9yKGNvbG9yVGV4dEJhc2UsIDAuNjUpLFxuICAgIGNvbG9yVGV4dFRlcnRpYXJ5OiBnZXRBbHBoYUNvbG9yKGNvbG9yVGV4dEJhc2UsIDAuNDUpLFxuICAgIGNvbG9yVGV4dFF1YXRlcm5hcnk6IGdldEFscGhhQ29sb3IoY29sb3JUZXh0QmFzZSwgMC4yNSksXG4gICAgY29sb3JGaWxsOiBnZXRBbHBoYUNvbG9yKGNvbG9yVGV4dEJhc2UsIDAuMTUpLFxuICAgIGNvbG9yRmlsbFNlY29uZGFyeTogZ2V0QWxwaGFDb2xvcihjb2xvclRleHRCYXNlLCAwLjA2KSxcbiAgICBjb2xvckZpbGxUZXJ0aWFyeTogZ2V0QWxwaGFDb2xvcihjb2xvclRleHRCYXNlLCAwLjA0KSxcbiAgICBjb2xvckZpbGxRdWF0ZXJuYXJ5OiBnZXRBbHBoYUNvbG9yKGNvbG9yVGV4dEJhc2UsIDAuMDIpLFxuICAgIGNvbG9yQmdMYXlvdXQ6IGdldFNvbGlkQ29sb3IoY29sb3JCZ0Jhc2UsIDQpLFxuICAgIGNvbG9yQmdDb250YWluZXI6IGdldFNvbGlkQ29sb3IoY29sb3JCZ0Jhc2UsIDApLFxuICAgIGNvbG9yQmdFbGV2YXRlZDogZ2V0U29saWRDb2xvcihjb2xvckJnQmFzZSwgMCksXG4gICAgY29sb3JCZ1Nwb3RsaWdodDogZ2V0QWxwaGFDb2xvcihjb2xvclRleHRCYXNlLCAwLjg1KSxcbiAgICBjb2xvckJnQmx1cjogJ3RyYW5zcGFyZW50JyxcbiAgICBjb2xvckJvcmRlcjogZ2V0U29saWRDb2xvcihjb2xvckJnQmFzZSwgMTUpLFxuICAgIGNvbG9yQm9yZGVyU2Vjb25kYXJ5OiBnZXRTb2xpZENvbG9yKGNvbG9yQmdCYXNlLCA2KVxuICB9O1xufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICdAYW50LWRlc2lnbi9jc3NpbmpzJztcbmltcG9ydCBkZWZhdWx0RGVyaXZhdGl2ZSBmcm9tICcuL3RoZW1lcy9kZWZhdWx0JztcbmltcG9ydCBkZWZhdWx0U2VlZFRva2VuIGZyb20gJy4vdGhlbWVzL3NlZWQnO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKGRlZmF1bHREZXJpdmF0aXZlKTtcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IENvbnRleHQgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBUbyBlbnN1cmUgc25hcHNob3Qgc3RhYmxlLiBXZSBkaXNhYmxlIGhhc2hlZCBpbiB0ZXN0IGVudi5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICB0b2tlbjogZGVmYXVsdFNlZWRUb2tlbixcbiAgb3ZlcnJpZGU6IHtcbiAgICBvdmVycmlkZTogZGVmYXVsdFNlZWRUb2tlblxuICB9LFxuICBoYXNoZWQ6IHRydWVcbn07XG5leHBvcnQgY29uc3QgRGVzaWduVG9rZW5Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoZGVmYXVsdENvbmZpZyk7IiwiaW1wb3J0IHsgZ2VuZXJhdGUgfSBmcm9tICdAYW50LWRlc2lnbi9jb2xvcnMnO1xuaW1wb3J0IGdlbkNvbnRyb2xIZWlnaHQgZnJvbSAnLi4vc2hhcmVkL2dlbkNvbnRyb2xIZWlnaHQnO1xuaW1wb3J0IGdlblNpemVNYXBUb2tlbiBmcm9tICcuLi9zaGFyZWQvZ2VuU2l6ZU1hcFRva2VuJztcbmltcG9ydCB7IGRlZmF1bHRQcmVzZXRDb2xvcnMgfSBmcm9tICcuLi9zZWVkJztcbmltcG9ydCBnZW5Db2xvck1hcFRva2VuIGZyb20gJy4uL3NoYXJlZC9nZW5Db2xvck1hcFRva2VuJztcbmltcG9ydCBnZW5Db21tb25NYXBUb2tlbiBmcm9tICcuLi9zaGFyZWQvZ2VuQ29tbW9uTWFwVG9rZW4nO1xuaW1wb3J0IHsgZ2VuZXJhdGVDb2xvclBhbGV0dGVzLCBnZW5lcmF0ZU5ldXRyYWxDb2xvclBhbGV0dGVzIH0gZnJvbSAnLi9jb2xvcnMnO1xuaW1wb3J0IGdlbkZvbnRNYXBUb2tlbiBmcm9tICcuLi9zaGFyZWQvZ2VuRm9udE1hcFRva2VuJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlcml2YXRpdmUodG9rZW4pIHtcbiAgY29uc3QgY29sb3JQYWxldHRlcyA9IE9iamVjdC5rZXlzKGRlZmF1bHRQcmVzZXRDb2xvcnMpLm1hcChjb2xvcktleSA9PiB7XG4gICAgY29uc3QgY29sb3JzID0gZ2VuZXJhdGUodG9rZW5bY29sb3JLZXldKTtcbiAgICByZXR1cm4gbmV3IEFycmF5KDEwKS5maWxsKDEpLnJlZHVjZSgocHJldiwgXywgaSkgPT4ge1xuICAgICAgcHJldltgJHtjb2xvcktleX0tJHtpICsgMX1gXSA9IGNvbG9yc1tpXTtcbiAgICAgIHByZXZbYCR7Y29sb3JLZXl9JHtpICsgMX1gXSA9IGNvbG9yc1tpXTtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH0sIHt9KTtcbiAgfSkucmVkdWNlKChwcmV2LCBjdXIpID0+IHtcbiAgICBwcmV2ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwcmV2KSwgY3VyKTtcbiAgICByZXR1cm4gcHJldjtcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdG9rZW4pLCBjb2xvclBhbGV0dGVzKSwgZ2VuQ29sb3JNYXBUb2tlbih0b2tlbiwge1xuICAgIGdlbmVyYXRlQ29sb3JQYWxldHRlcyxcbiAgICBnZW5lcmF0ZU5ldXRyYWxDb2xvclBhbGV0dGVzXG4gIH0pKSwgZ2VuRm9udE1hcFRva2VuKHRva2VuLmZvbnRTaXplKSksIGdlblNpemVNYXBUb2tlbih0b2tlbikpLCBnZW5Db250cm9sSGVpZ2h0KHRva2VuKSksIGdlbkNvbW1vbk1hcFRva2VuKHRva2VuKSk7XG59IiwiaW1wb3J0IHsgVGlueUNvbG9yIH0gZnJvbSAnQGN0cmwvdGlueWNvbG9yJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbkNvbG9yTWFwVG9rZW4oc2VlZCwgX3JlZikge1xuICBsZXQge1xuICAgIGdlbmVyYXRlQ29sb3JQYWxldHRlcyxcbiAgICBnZW5lcmF0ZU5ldXRyYWxDb2xvclBhbGV0dGVzXG4gIH0gPSBfcmVmO1xuICBjb25zdCB7XG4gICAgY29sb3JTdWNjZXNzOiBjb2xvclN1Y2Nlc3NCYXNlLFxuICAgIGNvbG9yV2FybmluZzogY29sb3JXYXJuaW5nQmFzZSxcbiAgICBjb2xvckVycm9yOiBjb2xvckVycm9yQmFzZSxcbiAgICBjb2xvckluZm86IGNvbG9ySW5mb0Jhc2UsXG4gICAgY29sb3JQcmltYXJ5OiBjb2xvclByaW1hcnlCYXNlLFxuICAgIGNvbG9yQmdCYXNlLFxuICAgIGNvbG9yVGV4dEJhc2VcbiAgfSA9IHNlZWQ7XG4gIGNvbnN0IHByaW1hcnlDb2xvcnMgPSBnZW5lcmF0ZUNvbG9yUGFsZXR0ZXMoY29sb3JQcmltYXJ5QmFzZSk7XG4gIGNvbnN0IHN1Y2Nlc3NDb2xvcnMgPSBnZW5lcmF0ZUNvbG9yUGFsZXR0ZXMoY29sb3JTdWNjZXNzQmFzZSk7XG4gIGNvbnN0IHdhcm5pbmdDb2xvcnMgPSBnZW5lcmF0ZUNvbG9yUGFsZXR0ZXMoY29sb3JXYXJuaW5nQmFzZSk7XG4gIGNvbnN0IGVycm9yQ29sb3JzID0gZ2VuZXJhdGVDb2xvclBhbGV0dGVzKGNvbG9yRXJyb3JCYXNlKTtcbiAgY29uc3QgaW5mb0NvbG9ycyA9IGdlbmVyYXRlQ29sb3JQYWxldHRlcyhjb2xvckluZm9CYXNlKTtcbiAgY29uc3QgbmV1dHJhbENvbG9ycyA9IGdlbmVyYXRlTmV1dHJhbENvbG9yUGFsZXR0ZXMoY29sb3JCZ0Jhc2UsIGNvbG9yVGV4dEJhc2UpO1xuICAvLyBDb2xvciBMaW5rXG4gIGNvbnN0IGNvbG9yTGluayA9IHNlZWQuY29sb3JMaW5rIHx8IHNlZWQuY29sb3JJbmZvO1xuICBjb25zdCBsaW5rQ29sb3JzID0gZ2VuZXJhdGVDb2xvclBhbGV0dGVzKGNvbG9yTGluayk7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG5ldXRyYWxDb2xvcnMpLCB7XG4gICAgY29sb3JQcmltYXJ5Qmc6IHByaW1hcnlDb2xvcnNbMV0sXG4gICAgY29sb3JQcmltYXJ5QmdIb3ZlcjogcHJpbWFyeUNvbG9yc1syXSxcbiAgICBjb2xvclByaW1hcnlCb3JkZXI6IHByaW1hcnlDb2xvcnNbM10sXG4gICAgY29sb3JQcmltYXJ5Qm9yZGVySG92ZXI6IHByaW1hcnlDb2xvcnNbNF0sXG4gICAgY29sb3JQcmltYXJ5SG92ZXI6IHByaW1hcnlDb2xvcnNbNV0sXG4gICAgY29sb3JQcmltYXJ5OiBwcmltYXJ5Q29sb3JzWzZdLFxuICAgIGNvbG9yUHJpbWFyeUFjdGl2ZTogcHJpbWFyeUNvbG9yc1s3XSxcbiAgICBjb2xvclByaW1hcnlUZXh0SG92ZXI6IHByaW1hcnlDb2xvcnNbOF0sXG4gICAgY29sb3JQcmltYXJ5VGV4dDogcHJpbWFyeUNvbG9yc1s5XSxcbiAgICBjb2xvclByaW1hcnlUZXh0QWN0aXZlOiBwcmltYXJ5Q29sb3JzWzEwXSxcbiAgICBjb2xvclN1Y2Nlc3NCZzogc3VjY2Vzc0NvbG9yc1sxXSxcbiAgICBjb2xvclN1Y2Nlc3NCZ0hvdmVyOiBzdWNjZXNzQ29sb3JzWzJdLFxuICAgIGNvbG9yU3VjY2Vzc0JvcmRlcjogc3VjY2Vzc0NvbG9yc1szXSxcbiAgICBjb2xvclN1Y2Nlc3NCb3JkZXJIb3Zlcjogc3VjY2Vzc0NvbG9yc1s0XSxcbiAgICBjb2xvclN1Y2Nlc3NIb3Zlcjogc3VjY2Vzc0NvbG9yc1s0XSxcbiAgICBjb2xvclN1Y2Nlc3M6IHN1Y2Nlc3NDb2xvcnNbNl0sXG4gICAgY29sb3JTdWNjZXNzQWN0aXZlOiBzdWNjZXNzQ29sb3JzWzddLFxuICAgIGNvbG9yU3VjY2Vzc1RleHRIb3Zlcjogc3VjY2Vzc0NvbG9yc1s4XSxcbiAgICBjb2xvclN1Y2Nlc3NUZXh0OiBzdWNjZXNzQ29sb3JzWzldLFxuICAgIGNvbG9yU3VjY2Vzc1RleHRBY3RpdmU6IHN1Y2Nlc3NDb2xvcnNbMTBdLFxuICAgIGNvbG9yRXJyb3JCZzogZXJyb3JDb2xvcnNbMV0sXG4gICAgY29sb3JFcnJvckJnSG92ZXI6IGVycm9yQ29sb3JzWzJdLFxuICAgIGNvbG9yRXJyb3JCb3JkZXI6IGVycm9yQ29sb3JzWzNdLFxuICAgIGNvbG9yRXJyb3JCb3JkZXJIb3ZlcjogZXJyb3JDb2xvcnNbNF0sXG4gICAgY29sb3JFcnJvckhvdmVyOiBlcnJvckNvbG9yc1s1XSxcbiAgICBjb2xvckVycm9yOiBlcnJvckNvbG9yc1s2XSxcbiAgICBjb2xvckVycm9yQWN0aXZlOiBlcnJvckNvbG9yc1s3XSxcbiAgICBjb2xvckVycm9yVGV4dEhvdmVyOiBlcnJvckNvbG9yc1s4XSxcbiAgICBjb2xvckVycm9yVGV4dDogZXJyb3JDb2xvcnNbOV0sXG4gICAgY29sb3JFcnJvclRleHRBY3RpdmU6IGVycm9yQ29sb3JzWzEwXSxcbiAgICBjb2xvcldhcm5pbmdCZzogd2FybmluZ0NvbG9yc1sxXSxcbiAgICBjb2xvcldhcm5pbmdCZ0hvdmVyOiB3YXJuaW5nQ29sb3JzWzJdLFxuICAgIGNvbG9yV2FybmluZ0JvcmRlcjogd2FybmluZ0NvbG9yc1szXSxcbiAgICBjb2xvcldhcm5pbmdCb3JkZXJIb3Zlcjogd2FybmluZ0NvbG9yc1s0XSxcbiAgICBjb2xvcldhcm5pbmdIb3Zlcjogd2FybmluZ0NvbG9yc1s0XSxcbiAgICBjb2xvcldhcm5pbmc6IHdhcm5pbmdDb2xvcnNbNl0sXG4gICAgY29sb3JXYXJuaW5nQWN0aXZlOiB3YXJuaW5nQ29sb3JzWzddLFxuICAgIGNvbG9yV2FybmluZ1RleHRIb3Zlcjogd2FybmluZ0NvbG9yc1s4XSxcbiAgICBjb2xvcldhcm5pbmdUZXh0OiB3YXJuaW5nQ29sb3JzWzldLFxuICAgIGNvbG9yV2FybmluZ1RleHRBY3RpdmU6IHdhcm5pbmdDb2xvcnNbMTBdLFxuICAgIGNvbG9ySW5mb0JnOiBpbmZvQ29sb3JzWzFdLFxuICAgIGNvbG9ySW5mb0JnSG92ZXI6IGluZm9Db2xvcnNbMl0sXG4gICAgY29sb3JJbmZvQm9yZGVyOiBpbmZvQ29sb3JzWzNdLFxuICAgIGNvbG9ySW5mb0JvcmRlckhvdmVyOiBpbmZvQ29sb3JzWzRdLFxuICAgIGNvbG9ySW5mb0hvdmVyOiBpbmZvQ29sb3JzWzRdLFxuICAgIGNvbG9ySW5mbzogaW5mb0NvbG9yc1s2XSxcbiAgICBjb2xvckluZm9BY3RpdmU6IGluZm9Db2xvcnNbN10sXG4gICAgY29sb3JJbmZvVGV4dEhvdmVyOiBpbmZvQ29sb3JzWzhdLFxuICAgIGNvbG9ySW5mb1RleHQ6IGluZm9Db2xvcnNbOV0sXG4gICAgY29sb3JJbmZvVGV4dEFjdGl2ZTogaW5mb0NvbG9yc1sxMF0sXG4gICAgY29sb3JMaW5rSG92ZXI6IGxpbmtDb2xvcnNbNF0sXG4gICAgY29sb3JMaW5rOiBsaW5rQ29sb3JzWzZdLFxuICAgIGNvbG9yTGlua0FjdGl2ZTogbGlua0NvbG9yc1s3XSxcbiAgICBjb2xvckJnTWFzazogbmV3IFRpbnlDb2xvcignIzAwMCcpLnNldEFscGhhKDAuNDUpLnRvUmdiU3RyaW5nKCksXG4gICAgY29sb3JXaGl0ZTogJyNmZmYnXG4gIH0pO1xufSIsImltcG9ydCBnZW5Gb250U2l6ZXMgZnJvbSAnLi9nZW5Gb250U2l6ZXMnO1xuY29uc3QgZ2VuRm9udE1hcFRva2VuID0gZm9udFNpemUgPT4ge1xuICBjb25zdCBmb250U2l6ZVBhaXJzID0gZ2VuRm9udFNpemVzKGZvbnRTaXplKTtcbiAgY29uc3QgZm9udFNpemVzID0gZm9udFNpemVQYWlycy5tYXAocGFpciA9PiBwYWlyLnNpemUpO1xuICBjb25zdCBsaW5lSGVpZ2h0cyA9IGZvbnRTaXplUGFpcnMubWFwKHBhaXIgPT4gcGFpci5saW5lSGVpZ2h0KTtcbiAgY29uc3QgZm9udFNpemVNRCA9IGZvbnRTaXplc1sxXTtcbiAgY29uc3QgZm9udFNpemVTTSA9IGZvbnRTaXplc1swXTtcbiAgY29uc3QgZm9udFNpemVMRyA9IGZvbnRTaXplc1syXTtcbiAgY29uc3QgbGluZUhlaWdodCA9IGxpbmVIZWlnaHRzWzFdO1xuICBjb25zdCBsaW5lSGVpZ2h0U00gPSBsaW5lSGVpZ2h0c1swXTtcbiAgY29uc3QgbGluZUhlaWdodExHID0gbGluZUhlaWdodHNbMl07XG4gIHJldHVybiB7XG4gICAgZm9udFNpemVTTSxcbiAgICBmb250U2l6ZTogZm9udFNpemVNRCxcbiAgICBmb250U2l6ZUxHLFxuICAgIGZvbnRTaXplWEw6IGZvbnRTaXplc1szXSxcbiAgICBmb250U2l6ZUhlYWRpbmcxOiBmb250U2l6ZXNbNl0sXG4gICAgZm9udFNpemVIZWFkaW5nMjogZm9udFNpemVzWzVdLFxuICAgIGZvbnRTaXplSGVhZGluZzM6IGZvbnRTaXplc1s0XSxcbiAgICBmb250U2l6ZUhlYWRpbmc0OiBmb250U2l6ZXNbM10sXG4gICAgZm9udFNpemVIZWFkaW5nNTogZm9udFNpemVzWzJdLFxuICAgIGxpbmVIZWlnaHQsXG4gICAgbGluZUhlaWdodExHLFxuICAgIGxpbmVIZWlnaHRTTSxcbiAgICBmb250SGVpZ2h0OiBNYXRoLnJvdW5kKGxpbmVIZWlnaHQgKiBmb250U2l6ZU1EKSxcbiAgICBmb250SGVpZ2h0TEc6IE1hdGgucm91bmQobGluZUhlaWdodExHICogZm9udFNpemVMRyksXG4gICAgZm9udEhlaWdodFNNOiBNYXRoLnJvdW5kKGxpbmVIZWlnaHRTTSAqIGZvbnRTaXplU00pLFxuICAgIGxpbmVIZWlnaHRIZWFkaW5nMTogbGluZUhlaWdodHNbNl0sXG4gICAgbGluZUhlaWdodEhlYWRpbmcyOiBsaW5lSGVpZ2h0c1s1XSxcbiAgICBsaW5lSGVpZ2h0SGVhZGluZzM6IGxpbmVIZWlnaHRzWzRdLFxuICAgIGxpbmVIZWlnaHRIZWFkaW5nNDogbGluZUhlaWdodHNbM10sXG4gICAgbGluZUhlaWdodEhlYWRpbmc1OiBsaW5lSGVpZ2h0c1syXVxuICB9O1xufTtcbmV4cG9ydCBkZWZhdWx0IGdlbkZvbnRNYXBUb2tlbjsiLCIvLyBodHRwczovL3podWFubGFuLnpoaWh1LmNvbS9wLzMyNzQ2ODEwXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGb250U2l6ZXMoYmFzZSkge1xuICBjb25zdCBmb250U2l6ZXMgPSBuZXcgQXJyYXkoMTApLmZpbGwobnVsbCkubWFwKChfLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGkgPSBpbmRleCAtIDE7XG4gICAgY29uc3QgYmFzZVNpemUgPSBiYXNlICogTWF0aC5wb3coMi43MTgyOCwgaSAvIDUpO1xuICAgIGNvbnN0IGludFNpemUgPSBpbmRleCA+IDEgPyBNYXRoLmZsb29yKGJhc2VTaXplKSA6IE1hdGguY2VpbChiYXNlU2l6ZSk7XG4gICAgLy8gQ29udmVydCB0byBldmVuXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoaW50U2l6ZSAvIDIpICogMjtcbiAgfSk7XG4gIGZvbnRTaXplc1sxXSA9IGJhc2U7XG4gIHJldHVybiBmb250U2l6ZXMubWFwKHNpemUgPT4ge1xuICAgIGNvbnN0IGhlaWdodCA9IHNpemUgKyA4O1xuICAgIHJldHVybiB7XG4gICAgICBzaXplLFxuICAgICAgbGluZUhlaWdodDogaGVpZ2h0IC8gc2l6ZVxuICAgIH07XG4gIH0pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlblNpemVNYXBUb2tlbih0b2tlbikge1xuICBjb25zdCB7XG4gICAgc2l6ZVVuaXQsXG4gICAgc2l6ZVN0ZXBcbiAgfSA9IHRva2VuO1xuICByZXR1cm4ge1xuICAgIHNpemVYWEw6IHNpemVVbml0ICogKHNpemVTdGVwICsgOCksXG4gICAgLy8gNDhcbiAgICBzaXplWEw6IHNpemVVbml0ICogKHNpemVTdGVwICsgNCksXG4gICAgLy8gMzJcbiAgICBzaXplTEc6IHNpemVVbml0ICogKHNpemVTdGVwICsgMiksXG4gICAgLy8gMjRcbiAgICBzaXplTUQ6IHNpemVVbml0ICogKHNpemVTdGVwICsgMSksXG4gICAgLy8gMjBcbiAgICBzaXplTVM6IHNpemVVbml0ICogc2l6ZVN0ZXAsXG4gICAgLy8gMTZcbiAgICBzaXplOiBzaXplVW5pdCAqIHNpemVTdGVwLFxuICAgIC8vIDE2XG4gICAgc2l6ZVNNOiBzaXplVW5pdCAqIChzaXplU3RlcCAtIDEpLFxuICAgIC8vIDEyXG4gICAgc2l6ZVhTOiBzaXplVW5pdCAqIChzaXplU3RlcCAtIDIpLFxuICAgIC8vIDhcbiAgICBzaXplWFhTOiBzaXplVW5pdCAqIChzaXplU3RlcCAtIDMpIC8vIDRcbiAgfTtcbn0iLCJjb25zdCBnZW5Db250cm9sSGVpZ2h0ID0gdG9rZW4gPT4ge1xuICBjb25zdCB7XG4gICAgY29udHJvbEhlaWdodFxuICB9ID0gdG9rZW47XG4gIHJldHVybiB7XG4gICAgY29udHJvbEhlaWdodFNNOiBjb250cm9sSGVpZ2h0ICogMC43NSxcbiAgICBjb250cm9sSGVpZ2h0WFM6IGNvbnRyb2xIZWlnaHQgKiAwLjUsXG4gICAgY29udHJvbEhlaWdodExHOiBjb250cm9sSGVpZ2h0ICogMS4yNVxuICB9O1xufTtcbmV4cG9ydCBkZWZhdWx0IGdlbkNvbnRyb2xIZWlnaHQ7IiwiaW1wb3J0IGdlblJhZGl1cyBmcm9tICcuL2dlblJhZGl1cyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5Db21tb25NYXBUb2tlbih0b2tlbikge1xuICBjb25zdCB7XG4gICAgbW90aW9uVW5pdCxcbiAgICBtb3Rpb25CYXNlLFxuICAgIGJvcmRlclJhZGl1cyxcbiAgICBsaW5lV2lkdGhcbiAgfSA9IHRva2VuO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7XG4gICAgLy8gbW90aW9uXG4gICAgbW90aW9uRHVyYXRpb25GYXN0OiBgJHsobW90aW9uQmFzZSArIG1vdGlvblVuaXQpLnRvRml4ZWQoMSl9c2AsXG4gICAgbW90aW9uRHVyYXRpb25NaWQ6IGAkeyhtb3Rpb25CYXNlICsgbW90aW9uVW5pdCAqIDIpLnRvRml4ZWQoMSl9c2AsXG4gICAgbW90aW9uRHVyYXRpb25TbG93OiBgJHsobW90aW9uQmFzZSArIG1vdGlvblVuaXQgKiAzKS50b0ZpeGVkKDEpfXNgLFxuICAgIC8vIGxpbmVcbiAgICBsaW5lV2lkdGhCb2xkOiBsaW5lV2lkdGggKyAxXG4gIH0sIGdlblJhZGl1cyhib3JkZXJSYWRpdXMpKTtcbn0iLCJpbXBvcnQgeyBUaW55Q29sb3IgfSBmcm9tICdAY3RybC90aW55Y29sb3InO1xuZnVuY3Rpb24gaXNTdGFibGVDb2xvcihjb2xvcikge1xuICByZXR1cm4gY29sb3IgPj0gMCAmJiBjb2xvciA8PSAyNTU7XG59XG5mdW5jdGlvbiBnZXRBbHBoYUNvbG9yKGZyb250Q29sb3IsIGJhY2tncm91bmRDb2xvcikge1xuICBjb25zdCB7XG4gICAgcjogZlIsXG4gICAgZzogZkcsXG4gICAgYjogZkIsXG4gICAgYTogb3JpZ2luQWxwaGFcbiAgfSA9IG5ldyBUaW55Q29sb3IoZnJvbnRDb2xvcikudG9SZ2IoKTtcbiAgaWYgKG9yaWdpbkFscGhhIDwgMSkge1xuICAgIHJldHVybiBmcm9udENvbG9yO1xuICB9XG4gIGNvbnN0IHtcbiAgICByOiBiUixcbiAgICBnOiBiRyxcbiAgICBiOiBiQlxuICB9ID0gbmV3IFRpbnlDb2xvcihiYWNrZ3JvdW5kQ29sb3IpLnRvUmdiKCk7XG4gIGZvciAobGV0IGZBID0gMC4wMTsgZkEgPD0gMTsgZkEgKz0gMC4wMSkge1xuICAgIGNvbnN0IHIgPSBNYXRoLnJvdW5kKChmUiAtIGJSICogKDEgLSBmQSkpIC8gZkEpO1xuICAgIGNvbnN0IGcgPSBNYXRoLnJvdW5kKChmRyAtIGJHICogKDEgLSBmQSkpIC8gZkEpO1xuICAgIGNvbnN0IGIgPSBNYXRoLnJvdW5kKChmQiAtIGJCICogKDEgLSBmQSkpIC8gZkEpO1xuICAgIGlmIChpc1N0YWJsZUNvbG9yKHIpICYmIGlzU3RhYmxlQ29sb3IoZykgJiYgaXNTdGFibGVDb2xvcihiKSkge1xuICAgICAgcmV0dXJuIG5ldyBUaW55Q29sb3Ioe1xuICAgICAgICByLFxuICAgICAgICBnLFxuICAgICAgICBiLFxuICAgICAgICBhOiBNYXRoLnJvdW5kKGZBICogMTAwKSAvIDEwMFxuICAgICAgfSkudG9SZ2JTdHJpbmcoKTtcbiAgICB9XG4gIH1cbiAgLy8gZmFsbGJhY2tcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIG5ldyBUaW55Q29sb3Ioe1xuICAgIHI6IGZSLFxuICAgIGc6IGZHLFxuICAgIGI6IGZCLFxuICAgIGE6IDFcbiAgfSkudG9SZ2JTdHJpbmcoKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGdldEFscGhhQ29sb3I7IiwidmFyIF9fcmVzdCA9IHRoaXMgJiYgdGhpcy5fX3Jlc3QgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpIHRbcFtpXV0gPSBzW3BbaV1dO1xuICB9XG4gIHJldHVybiB0O1xufTtcbmltcG9ydCB7IFRpbnlDb2xvciB9IGZyb20gJ0BjdHJsL3Rpbnljb2xvcic7XG5pbXBvcnQgc2VlZFRva2VuIGZyb20gJy4uL3RoZW1lcy9zZWVkJztcbmltcG9ydCBnZXRBbHBoYUNvbG9yIGZyb20gJy4vZ2V0QWxwaGFDb2xvcic7XG4vKipcbiAqIFNlZWQgKGRlc2lnbmVyKSA+IERlcml2YXRpdmUgKGRlc2lnbmVyKSA+IEFsaWFzIChkZXZlbG9wZXIpLlxuICpcbiAqIE1lcmdlIHNlZWQgJiBkZXJpdmF0aXZlICYgb3ZlcnJpZGUgdG9rZW4gYW5kIGdlbmVyYXRlIGFsaWFzIHRva2VuIGZvciBkZXZlbG9wZXIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFRva2VuKGRlcml2YXRpdmVUb2tlbikge1xuICBjb25zdCB7XG4gICAgICBvdmVycmlkZVxuICAgIH0gPSBkZXJpdmF0aXZlVG9rZW4sXG4gICAgcmVzdFRva2VuID0gX19yZXN0KGRlcml2YXRpdmVUb2tlbiwgW1wib3ZlcnJpZGVcIl0pO1xuICBjb25zdCBvdmVycmlkZVRva2VucyA9IE9iamVjdC5hc3NpZ24oe30sIG92ZXJyaWRlKTtcbiAgT2JqZWN0LmtleXMoc2VlZFRva2VuKS5mb3JFYWNoKHRva2VuID0+IHtcbiAgICBkZWxldGUgb3ZlcnJpZGVUb2tlbnNbdG9rZW5dO1xuICB9KTtcbiAgY29uc3QgbWVyZ2VkVG9rZW4gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3RUb2tlbiksIG92ZXJyaWRlVG9rZW5zKTtcbiAgY29uc3Qgc2NyZWVuWFMgPSA0ODA7XG4gIGNvbnN0IHNjcmVlblNNID0gNTc2O1xuICBjb25zdCBzY3JlZW5NRCA9IDc2ODtcbiAgY29uc3Qgc2NyZWVuTEcgPSA5OTI7XG4gIGNvbnN0IHNjcmVlblhMID0gMTIwMDtcbiAgY29uc3Qgc2NyZWVuWFhMID0gMTYwMDtcbiAgLy8gTW90aW9uXG4gIGlmIChtZXJnZWRUb2tlbi5tb3Rpb24gPT09IGZhbHNlKSB7XG4gICAgY29uc3QgZmFzdER1cmF0aW9uID0gJzBzJztcbiAgICBtZXJnZWRUb2tlbi5tb3Rpb25EdXJhdGlvbkZhc3QgPSBmYXN0RHVyYXRpb247XG4gICAgbWVyZ2VkVG9rZW4ubW90aW9uRHVyYXRpb25NaWQgPSBmYXN0RHVyYXRpb247XG4gICAgbWVyZ2VkVG9rZW4ubW90aW9uRHVyYXRpb25TbG93ID0gZmFzdER1cmF0aW9uO1xuICB9XG4gIC8vIEdlbmVyYXRlIGFsaWFzIHRva2VuXG4gIGNvbnN0IGFsaWFzVG9rZW4gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbWVyZ2VkVG9rZW4pLCB7XG4gICAgLy8gPT09PT09PT09PT09PT0gQmFja2dyb3VuZCA9PT09PT09PT09PT09PSAvL1xuICAgIGNvbG9yRmlsbENvbnRlbnQ6IG1lcmdlZFRva2VuLmNvbG9yRmlsbFNlY29uZGFyeSxcbiAgICBjb2xvckZpbGxDb250ZW50SG92ZXI6IG1lcmdlZFRva2VuLmNvbG9yRmlsbCxcbiAgICBjb2xvckZpbGxBbHRlcjogbWVyZ2VkVG9rZW4uY29sb3JGaWxsUXVhdGVybmFyeSxcbiAgICBjb2xvckJnQ29udGFpbmVyRGlzYWJsZWQ6IG1lcmdlZFRva2VuLmNvbG9yRmlsbFRlcnRpYXJ5LFxuICAgIC8vID09PT09PT09PT09PT09IFNwbGl0ID09PT09PT09PT09PT09IC8vXG4gICAgY29sb3JCb3JkZXJCZzogbWVyZ2VkVG9rZW4uY29sb3JCZ0NvbnRhaW5lcixcbiAgICBjb2xvclNwbGl0OiBnZXRBbHBoYUNvbG9yKG1lcmdlZFRva2VuLmNvbG9yQm9yZGVyU2Vjb25kYXJ5LCBtZXJnZWRUb2tlbi5jb2xvckJnQ29udGFpbmVyKSxcbiAgICAvLyA9PT09PT09PT09PT09PSBUZXh0ID09PT09PT09PT09PT09IC8vXG4gICAgY29sb3JUZXh0UGxhY2Vob2xkZXI6IG1lcmdlZFRva2VuLmNvbG9yVGV4dFF1YXRlcm5hcnksXG4gICAgY29sb3JUZXh0RGlzYWJsZWQ6IG1lcmdlZFRva2VuLmNvbG9yVGV4dFF1YXRlcm5hcnksXG4gICAgY29sb3JUZXh0SGVhZGluZzogbWVyZ2VkVG9rZW4uY29sb3JUZXh0LFxuICAgIGNvbG9yVGV4dExhYmVsOiBtZXJnZWRUb2tlbi5jb2xvclRleHRTZWNvbmRhcnksXG4gICAgY29sb3JUZXh0RGVzY3JpcHRpb246IG1lcmdlZFRva2VuLmNvbG9yVGV4dFRlcnRpYXJ5LFxuICAgIGNvbG9yVGV4dExpZ2h0U29saWQ6IG1lcmdlZFRva2VuLmNvbG9yV2hpdGUsXG4gICAgY29sb3JIaWdobGlnaHQ6IG1lcmdlZFRva2VuLmNvbG9yRXJyb3IsXG4gICAgY29sb3JCZ1RleHRIb3ZlcjogbWVyZ2VkVG9rZW4uY29sb3JGaWxsU2Vjb25kYXJ5LFxuICAgIGNvbG9yQmdUZXh0QWN0aXZlOiBtZXJnZWRUb2tlbi5jb2xvckZpbGwsXG4gICAgY29sb3JJY29uOiBtZXJnZWRUb2tlbi5jb2xvclRleHRUZXJ0aWFyeSxcbiAgICBjb2xvckljb25Ib3ZlcjogbWVyZ2VkVG9rZW4uY29sb3JUZXh0LFxuICAgIGNvbG9yRXJyb3JPdXRsaW5lOiBnZXRBbHBoYUNvbG9yKG1lcmdlZFRva2VuLmNvbG9yRXJyb3JCZywgbWVyZ2VkVG9rZW4uY29sb3JCZ0NvbnRhaW5lciksXG4gICAgY29sb3JXYXJuaW5nT3V0bGluZTogZ2V0QWxwaGFDb2xvcihtZXJnZWRUb2tlbi5jb2xvcldhcm5pbmdCZywgbWVyZ2VkVG9rZW4uY29sb3JCZ0NvbnRhaW5lciksXG4gICAgLy8gRm9udFxuICAgIGZvbnRTaXplSWNvbjogbWVyZ2VkVG9rZW4uZm9udFNpemVTTSxcbiAgICAvLyBMaW5lXG4gICAgbGluZVdpZHRoRm9jdXM6IG1lcmdlZFRva2VuLmxpbmVXaWR0aCAqIDQsXG4gICAgLy8gQ29udHJvbFxuICAgIGxpbmVXaWR0aDogbWVyZ2VkVG9rZW4ubGluZVdpZHRoLFxuICAgIGNvbnRyb2xPdXRsaW5lV2lkdGg6IG1lcmdlZFRva2VuLmxpbmVXaWR0aCAqIDIsXG4gICAgLy8gQ2hlY2tib3ggc2l6ZSBhbmQgZXhwYW5kIGljb24gc2l6ZVxuICAgIGNvbnRyb2xJbnRlcmFjdGl2ZVNpemU6IG1lcmdlZFRva2VuLmNvbnRyb2xIZWlnaHQgLyAyLFxuICAgIGNvbnRyb2xJdGVtQmdIb3ZlcjogbWVyZ2VkVG9rZW4uY29sb3JGaWxsVGVydGlhcnksXG4gICAgY29udHJvbEl0ZW1CZ0FjdGl2ZTogbWVyZ2VkVG9rZW4uY29sb3JQcmltYXJ5QmcsXG4gICAgY29udHJvbEl0ZW1CZ0FjdGl2ZUhvdmVyOiBtZXJnZWRUb2tlbi5jb2xvclByaW1hcnlCZ0hvdmVyLFxuICAgIGNvbnRyb2xJdGVtQmdBY3RpdmVEaXNhYmxlZDogbWVyZ2VkVG9rZW4uY29sb3JGaWxsLFxuICAgIGNvbnRyb2xUbXBPdXRsaW5lOiBtZXJnZWRUb2tlbi5jb2xvckZpbGxRdWF0ZXJuYXJ5LFxuICAgIGNvbnRyb2xPdXRsaW5lOiBnZXRBbHBoYUNvbG9yKG1lcmdlZFRva2VuLmNvbG9yUHJpbWFyeUJnLCBtZXJnZWRUb2tlbi5jb2xvckJnQ29udGFpbmVyKSxcbiAgICBsaW5lVHlwZTogbWVyZ2VkVG9rZW4ubGluZVR5cGUsXG4gICAgYm9yZGVyUmFkaXVzOiBtZXJnZWRUb2tlbi5ib3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyUmFkaXVzWFM6IG1lcmdlZFRva2VuLmJvcmRlclJhZGl1c1hTLFxuICAgIGJvcmRlclJhZGl1c1NNOiBtZXJnZWRUb2tlbi5ib3JkZXJSYWRpdXNTTSxcbiAgICBib3JkZXJSYWRpdXNMRzogbWVyZ2VkVG9rZW4uYm9yZGVyUmFkaXVzTEcsXG4gICAgZm9udFdlaWdodFN0cm9uZzogNjAwLFxuICAgIG9wYWNpdHlMb2FkaW5nOiAwLjY1LFxuICAgIGxpbmtEZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgbGlua0hvdmVyRGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIGxpbmtGb2N1c0RlY29yYXRpb246ICdub25lJyxcbiAgICBjb250cm9sUGFkZGluZ0hvcml6b250YWw6IDEyLFxuICAgIGNvbnRyb2xQYWRkaW5nSG9yaXpvbnRhbFNNOiA4LFxuICAgIHBhZGRpbmdYWFM6IG1lcmdlZFRva2VuLnNpemVYWFMsXG4gICAgcGFkZGluZ1hTOiBtZXJnZWRUb2tlbi5zaXplWFMsXG4gICAgcGFkZGluZ1NNOiBtZXJnZWRUb2tlbi5zaXplU00sXG4gICAgcGFkZGluZzogbWVyZ2VkVG9rZW4uc2l6ZSxcbiAgICBwYWRkaW5nTUQ6IG1lcmdlZFRva2VuLnNpemVNRCxcbiAgICBwYWRkaW5nTEc6IG1lcmdlZFRva2VuLnNpemVMRyxcbiAgICBwYWRkaW5nWEw6IG1lcmdlZFRva2VuLnNpemVYTCxcbiAgICBwYWRkaW5nQ29udGVudEhvcml6b250YWxMRzogbWVyZ2VkVG9rZW4uc2l6ZUxHLFxuICAgIHBhZGRpbmdDb250ZW50VmVydGljYWxMRzogbWVyZ2VkVG9rZW4uc2l6ZU1TLFxuICAgIHBhZGRpbmdDb250ZW50SG9yaXpvbnRhbDogbWVyZ2VkVG9rZW4uc2l6ZU1TLFxuICAgIHBhZGRpbmdDb250ZW50VmVydGljYWw6IG1lcmdlZFRva2VuLnNpemVTTSxcbiAgICBwYWRkaW5nQ29udGVudEhvcml6b250YWxTTTogbWVyZ2VkVG9rZW4uc2l6ZSxcbiAgICBwYWRkaW5nQ29udGVudFZlcnRpY2FsU006IG1lcmdlZFRva2VuLnNpemVYUyxcbiAgICBtYXJnaW5YWFM6IG1lcmdlZFRva2VuLnNpemVYWFMsXG4gICAgbWFyZ2luWFM6IG1lcmdlZFRva2VuLnNpemVYUyxcbiAgICBtYXJnaW5TTTogbWVyZ2VkVG9rZW4uc2l6ZVNNLFxuICAgIG1hcmdpbjogbWVyZ2VkVG9rZW4uc2l6ZSxcbiAgICBtYXJnaW5NRDogbWVyZ2VkVG9rZW4uc2l6ZU1ELFxuICAgIG1hcmdpbkxHOiBtZXJnZWRUb2tlbi5zaXplTEcsXG4gICAgbWFyZ2luWEw6IG1lcmdlZFRva2VuLnNpemVYTCxcbiAgICBtYXJnaW5YWEw6IG1lcmdlZFRva2VuLnNpemVYWEwsXG4gICAgYm94U2hhZG93OiBgXG4gICAgICAwIDZweCAxNnB4IDAgcmdiYSgwLCAwLCAwLCAwLjA4KSxcbiAgICAgIDAgM3B4IDZweCAtNHB4IHJnYmEoMCwgMCwgMCwgMC4xMiksXG4gICAgICAwIDlweCAyOHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMDUpXG4gICAgYCxcbiAgICBib3hTaGFkb3dTZWNvbmRhcnk6IGBcbiAgICAgIDAgNnB4IDE2cHggMCByZ2JhKDAsIDAsIDAsIDAuMDgpLFxuICAgICAgMCAzcHggNnB4IC00cHggcmdiYSgwLCAwLCAwLCAwLjEyKSxcbiAgICAgIDAgOXB4IDI4cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4wNSlcbiAgICBgLFxuICAgIGJveFNoYWRvd1RlcnRpYXJ5OiBgXG4gICAgICAwIDFweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMDMpLFxuICAgICAgMCAxcHggNnB4IC0xcHggcmdiYSgwLCAwLCAwLCAwLjAyKSxcbiAgICAgIDAgMnB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4wMilcbiAgICBgLFxuICAgIHNjcmVlblhTLFxuICAgIHNjcmVlblhTTWluOiBzY3JlZW5YUyxcbiAgICBzY3JlZW5YU01heDogc2NyZWVuU00gLSAxLFxuICAgIHNjcmVlblNNLFxuICAgIHNjcmVlblNNTWluOiBzY3JlZW5TTSxcbiAgICBzY3JlZW5TTU1heDogc2NyZWVuTUQgLSAxLFxuICAgIHNjcmVlbk1ELFxuICAgIHNjcmVlbk1ETWluOiBzY3JlZW5NRCxcbiAgICBzY3JlZW5NRE1heDogc2NyZWVuTEcgLSAxLFxuICAgIHNjcmVlbkxHLFxuICAgIHNjcmVlbkxHTWluOiBzY3JlZW5MRyxcbiAgICBzY3JlZW5MR01heDogc2NyZWVuWEwgLSAxLFxuICAgIHNjcmVlblhMLFxuICAgIHNjcmVlblhMTWluOiBzY3JlZW5YTCxcbiAgICBzY3JlZW5YTE1heDogc2NyZWVuWFhMIC0gMSxcbiAgICBzY3JlZW5YWEwsXG4gICAgc2NyZWVuWFhMTWluOiBzY3JlZW5YWEwsXG4gICAgYm94U2hhZG93UG9wb3ZlckFycm93OiAnMnB4IDJweCA1cHggcmdiYSgwLCAwLCAwLCAwLjA1KScsXG4gICAgYm94U2hhZG93Q2FyZDogYFxuICAgICAgMCAxcHggMnB4IC0ycHggJHtuZXcgVGlueUNvbG9yKCdyZ2JhKDAsIDAsIDAsIDAuMTYpJykudG9SZ2JTdHJpbmcoKX0sXG4gICAgICAwIDNweCA2cHggMCAke25ldyBUaW55Q29sb3IoJ3JnYmEoMCwgMCwgMCwgMC4xMiknKS50b1JnYlN0cmluZygpfSxcbiAgICAgIDAgNXB4IDEycHggNHB4ICR7bmV3IFRpbnlDb2xvcigncmdiYSgwLCAwLCAwLCAwLjA5KScpLnRvUmdiU3RyaW5nKCl9XG4gICAgYCxcbiAgICBib3hTaGFkb3dEcmF3ZXJSaWdodDogYFxuICAgICAgLTZweCAwIDE2cHggMCByZ2JhKDAsIDAsIDAsIDAuMDgpLFxuICAgICAgLTNweCAwIDZweCAtNHB4IHJnYmEoMCwgMCwgMCwgMC4xMiksXG4gICAgICAtOXB4IDAgMjhweCA4cHggcmdiYSgwLCAwLCAwLCAwLjA1KVxuICAgIGAsXG4gICAgYm94U2hhZG93RHJhd2VyTGVmdDogYFxuICAgICAgNnB4IDAgMTZweCAwIHJnYmEoMCwgMCwgMCwgMC4wOCksXG4gICAgICAzcHggMCA2cHggLTRweCByZ2JhKDAsIDAsIDAsIDAuMTIpLFxuICAgICAgOXB4IDAgMjhweCA4cHggcmdiYSgwLCAwLCAwLCAwLjA1KVxuICAgIGAsXG4gICAgYm94U2hhZG93RHJhd2VyVXA6IGBcbiAgICAgIDAgNnB4IDE2cHggMCByZ2JhKDAsIDAsIDAsIDAuMDgpLFxuICAgICAgMCAzcHggNnB4IC00cHggcmdiYSgwLCAwLCAwLCAwLjEyKSxcbiAgICAgIDAgOXB4IDI4cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4wNSlcbiAgICBgLFxuICAgIGJveFNoYWRvd0RyYXdlckRvd246IGBcbiAgICAgIDAgLTZweCAxNnB4IDAgcmdiYSgwLCAwLCAwLCAwLjA4KSxcbiAgICAgIDAgLTNweCA2cHggLTRweCByZ2JhKDAsIDAsIDAsIDAuMTIpLFxuICAgICAgMCAtOXB4IDI4cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4wNSlcbiAgICBgLFxuICAgIGJveFNoYWRvd1RhYnNPdmVyZmxvd0xlZnQ6ICdpbnNldCAxMHB4IDAgOHB4IC04cHggcmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgYm94U2hhZG93VGFic092ZXJmbG93UmlnaHQ6ICdpbnNldCAtMTBweCAwIDhweCAtOHB4IHJnYmEoMCwgMCwgMCwgMC4wOCknLFxuICAgIGJveFNoYWRvd1RhYnNPdmVyZmxvd1RvcDogJ2luc2V0IDAgMTBweCA4cHggLThweCByZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBib3hTaGFkb3dUYWJzT3ZlcmZsb3dCb3R0b206ICdpbnNldCAwIC0xMHB4IDhweCAtOHB4IHJnYmEoMCwgMCwgMCwgMC4wOCknXG4gIH0pLCBvdmVycmlkZVRva2Vucyk7XG4gIHJldHVybiBhbGlhc1Rva2VuO1xufSIsInZhciBfX3Jlc3QgPSB0aGlzICYmIHRoaXMuX19yZXN0IHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKSB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKSBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKSB0W3BbaV1dID0gc1twW2ldXTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQ2FjaGVUb2tlbiB9IGZyb20gJ0BhbnQtZGVzaWduL2Nzc2luanMnO1xuaW1wb3J0IHZlcnNpb24gZnJvbSAnLi4vdmVyc2lvbic7XG5pbXBvcnQgeyBkZWZhdWx0VGhlbWUsIERlc2lnblRva2VuQ29udGV4dCB9IGZyb20gJy4vY29udGV4dCc7XG5pbXBvcnQgZGVmYXVsdFNlZWRUb2tlbiBmcm9tICcuL3RoZW1lcy9zZWVkJztcbmltcG9ydCBmb3JtYXRUb2tlbiBmcm9tICcuL3V0aWwvYWxpYXMnO1xuZXhwb3J0IGNvbnN0IHVuaXRsZXNzID0ge1xuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBsaW5lSGVpZ2h0U006IHRydWUsXG4gIGxpbmVIZWlnaHRMRzogdHJ1ZSxcbiAgbGluZUhlaWdodEhlYWRpbmcxOiB0cnVlLFxuICBsaW5lSGVpZ2h0SGVhZGluZzI6IHRydWUsXG4gIGxpbmVIZWlnaHRIZWFkaW5nMzogdHJ1ZSxcbiAgbGluZUhlaWdodEhlYWRpbmc0OiB0cnVlLFxuICBsaW5lSGVpZ2h0SGVhZGluZzU6IHRydWUsXG4gIG9wYWNpdHlMb2FkaW5nOiB0cnVlLFxuICBmb250V2VpZ2h0U3Ryb25nOiB0cnVlLFxuICB6SW5kZXhQb3B1cEJhc2U6IHRydWUsXG4gIHpJbmRleEJhc2U6IHRydWVcbn07XG5leHBvcnQgY29uc3QgaWdub3JlID0ge1xuICBzaXplOiB0cnVlLFxuICBzaXplU006IHRydWUsXG4gIHNpemVMRzogdHJ1ZSxcbiAgc2l6ZU1EOiB0cnVlLFxuICBzaXplWFM6IHRydWUsXG4gIHNpemVYWFM6IHRydWUsXG4gIHNpemVNUzogdHJ1ZSxcbiAgc2l6ZVhMOiB0cnVlLFxuICBzaXplWFhMOiB0cnVlLFxuICBzaXplVW5pdDogdHJ1ZSxcbiAgc2l6ZVN0ZXA6IHRydWUsXG4gIG1vdGlvbkJhc2U6IHRydWUsXG4gIG1vdGlvblVuaXQ6IHRydWVcbn07XG5jb25zdCBwcmVzZXJ2ZSA9IHtcbiAgc2NyZWVuWFM6IHRydWUsXG4gIHNjcmVlblhTTWluOiB0cnVlLFxuICBzY3JlZW5YU01heDogdHJ1ZSxcbiAgc2NyZWVuU006IHRydWUsXG4gIHNjcmVlblNNTWluOiB0cnVlLFxuICBzY3JlZW5TTU1heDogdHJ1ZSxcbiAgc2NyZWVuTUQ6IHRydWUsXG4gIHNjcmVlbk1ETWluOiB0cnVlLFxuICBzY3JlZW5NRE1heDogdHJ1ZSxcbiAgc2NyZWVuTEc6IHRydWUsXG4gIHNjcmVlbkxHTWluOiB0cnVlLFxuICBzY3JlZW5MR01heDogdHJ1ZSxcbiAgc2NyZWVuWEw6IHRydWUsXG4gIHNjcmVlblhMTWluOiB0cnVlLFxuICBzY3JlZW5YTE1heDogdHJ1ZSxcbiAgc2NyZWVuWFhMOiB0cnVlLFxuICBzY3JlZW5YWExNaW46IHRydWVcbn07XG5leHBvcnQgY29uc3QgZ2V0Q29tcHV0ZWRUb2tlbiA9IChvcmlnaW5Ub2tlbiwgb3ZlcnJpZGVUb2tlbiwgdGhlbWUpID0+IHtcbiAgY29uc3QgZGVyaXZhdGl2ZVRva2VuID0gdGhlbWUuZ2V0RGVyaXZhdGl2ZVRva2VuKG9yaWdpblRva2VuKTtcbiAgY29uc3Qge1xuICAgICAgb3ZlcnJpZGVcbiAgICB9ID0gb3ZlcnJpZGVUb2tlbixcbiAgICBjb21wb25lbnRzID0gX19yZXN0KG92ZXJyaWRlVG9rZW4sIFtcIm92ZXJyaWRlXCJdKTtcbiAgLy8gTWVyZ2Ugd2l0aCBvdmVycmlkZVxuICBsZXQgbWVyZ2VkRGVyaXZhdGl2ZVRva2VuID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZXJpdmF0aXZlVG9rZW4pLCB7XG4gICAgb3ZlcnJpZGVcbiAgfSk7XG4gIC8vIEZvcm1hdCBpZiBuZWVkZWRcbiAgbWVyZ2VkRGVyaXZhdGl2ZVRva2VuID0gZm9ybWF0VG9rZW4obWVyZ2VkRGVyaXZhdGl2ZVRva2VuKTtcbiAgaWYgKGNvbXBvbmVudHMpIHtcbiAgICBPYmplY3QuZW50cmllcyhjb21wb25lbnRzKS5mb3JFYWNoKF9yZWYgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY7XG4gICAgICBjb25zdCB7XG4gICAgICAgICAgdGhlbWU6IGNvbXBvbmVudFRoZW1lXG4gICAgICAgIH0gPSB2YWx1ZSxcbiAgICAgICAgY29tcG9uZW50VG9rZW5zID0gX19yZXN0KHZhbHVlLCBbXCJ0aGVtZVwiXSk7XG4gICAgICBsZXQgbWVyZ2VkQ29tcG9uZW50VG9rZW4gPSBjb21wb25lbnRUb2tlbnM7XG4gICAgICBpZiAoY29tcG9uZW50VGhlbWUpIHtcbiAgICAgICAgbWVyZ2VkQ29tcG9uZW50VG9rZW4gPSBnZXRDb21wdXRlZFRva2VuKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbWVyZ2VkRGVyaXZhdGl2ZVRva2VuKSwgY29tcG9uZW50VG9rZW5zKSwge1xuICAgICAgICAgIG92ZXJyaWRlOiBjb21wb25lbnRUb2tlbnNcbiAgICAgICAgfSwgY29tcG9uZW50VGhlbWUpO1xuICAgICAgfVxuICAgICAgbWVyZ2VkRGVyaXZhdGl2ZVRva2VuW2tleV0gPSBtZXJnZWRDb21wb25lbnRUb2tlbjtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbWVyZ2VkRGVyaXZhdGl2ZVRva2VuO1xufTtcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gSG9vayA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUb2tlbigpIHtcbiAgY29uc3Qge1xuICAgIHRva2VuOiByb290RGVzaWduVG9rZW4sXG4gICAgaGFzaGVkLFxuICAgIHRoZW1lLFxuICAgIG92ZXJyaWRlLFxuICAgIGNzc1ZhclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChEZXNpZ25Ub2tlbkNvbnRleHQpO1xuICBjb25zdCBzYWx0ID0gYCR7dmVyc2lvbn0tJHtoYXNoZWQgfHwgJyd9YDtcbiAgY29uc3QgbWVyZ2VkVGhlbWUgPSB0aGVtZSB8fCBkZWZhdWx0VGhlbWU7XG4gIGNvbnN0IFt0b2tlbiwgaGFzaElkLCByZWFsVG9rZW5dID0gdXNlQ2FjaGVUb2tlbihtZXJnZWRUaGVtZSwgW2RlZmF1bHRTZWVkVG9rZW4sIHJvb3REZXNpZ25Ub2tlbl0sIHtcbiAgICBzYWx0LFxuICAgIG92ZXJyaWRlLFxuICAgIGdldENvbXB1dGVkVG9rZW4sXG4gICAgLy8gZm9ybWF0VG9rZW4gd2lsbCBub3QgYmUgY29uc3VtZWQgYWZ0ZXIgMS4xNS4wIHdpdGggZ2V0Q29tcHV0ZWRUb2tlbi5cbiAgICAvLyBCdXQgdG9rZW4gd2lsbCBicmVhayBpZiBAYW50LWRlc2lnbi9jc3NpbmpzIGlzIHVuZGVyIDEuMTUuMCB3aXRob3V0IGl0XG4gICAgZm9ybWF0VG9rZW4sXG4gICAgY3NzVmFyOiBjc3NWYXIgJiYge1xuICAgICAgcHJlZml4OiBjc3NWYXIucHJlZml4LFxuICAgICAga2V5OiBjc3NWYXIua2V5LFxuICAgICAgdW5pdGxlc3MsXG4gICAgICBpZ25vcmUsXG4gICAgICBwcmVzZXJ2ZVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBbbWVyZ2VkVGhlbWUsIHJlYWxUb2tlbiwgaGFzaGVkID8gaGFzaElkIDogJycsIHRva2VuLCBjc3NWYXJdO1xufSIsImltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xubGV0IEFic3RyYWN0Q2FsY3VsYXRvciA9IC8qI19fUFVSRV9fKi9fY3JlYXRlQ2xhc3MoZnVuY3Rpb24gQWJzdHJhY3RDYWxjdWxhdG9yKCkge1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWJzdHJhY3RDYWxjdWxhdG9yKTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgQWJzdHJhY3RDYWxjdWxhdG9yOyIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNcIjtcbmltcG9ydCBfY3JlYXRlU3VwZXIgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZVN1cGVyXCI7XG5pbXBvcnQgQWJzdHJhY3RDYWxjdWxhdG9yIGZyb20gJy4vY2FsY3VsYXRvcic7XG5sZXQgTnVtQ2FsY3VsYXRvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fic3RyYWN0Q2FsY3VsYXRvcikge1xuICBfaW5oZXJpdHMoTnVtQ2FsY3VsYXRvciwgX0Fic3RyYWN0Q2FsY3VsYXRvcik7XG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTnVtQ2FsY3VsYXRvcik7XG4gIGZ1bmN0aW9uIE51bUNhbGN1bGF0b3IobnVtKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOdW1DYWxjdWxhdG9yKTtcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgIF90aGlzLnJlc3VsdCA9IDA7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIE51bUNhbGN1bGF0b3IpIHtcbiAgICAgIF90aGlzLnJlc3VsdCA9IG51bS5yZXN1bHQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbnVtID09PSAnbnVtYmVyJykge1xuICAgICAgX3RoaXMucmVzdWx0ID0gbnVtO1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKE51bUNhbGN1bGF0b3IsIFt7XG4gICAga2V5OiBcImFkZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQobnVtKSB7XG4gICAgICBpZiAobnVtIGluc3RhbmNlb2YgTnVtQ2FsY3VsYXRvcikge1xuICAgICAgICB0aGlzLnJlc3VsdCArPSBudW0ucmVzdWx0O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbnVtID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLnJlc3VsdCArPSBudW07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3ViXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1YihudW0pIHtcbiAgICAgIGlmIChudW0gaW5zdGFuY2VvZiBOdW1DYWxjdWxhdG9yKSB7XG4gICAgICAgIHRoaXMucmVzdWx0IC09IG51bS5yZXN1bHQ7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBudW0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMucmVzdWx0IC09IG51bTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtdWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbXVsKG51bSkge1xuICAgICAgaWYgKG51bSBpbnN0YW5jZW9mIE51bUNhbGN1bGF0b3IpIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgKj0gbnVtLnJlc3VsdDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgKj0gbnVtO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRpdlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXYobnVtKSB7XG4gICAgICBpZiAobnVtIGluc3RhbmNlb2YgTnVtQ2FsY3VsYXRvcikge1xuICAgICAgICB0aGlzLnJlc3VsdCAvPSBudW0ucmVzdWx0O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbnVtID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLnJlc3VsdCAvPSBudW07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXF1YWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXF1YWwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXN1bHQ7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBOdW1DYWxjdWxhdG9yO1xufShBYnN0cmFjdENhbGN1bGF0b3IpO1xuZXhwb3J0IHsgTnVtQ2FsY3VsYXRvciBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2tcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c1wiO1xuaW1wb3J0IF9jcmVhdGVTdXBlciBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlU3VwZXJcIjtcbmltcG9ydCBBYnN0cmFjdENhbGN1bGF0b3IgZnJvbSAnLi9jYWxjdWxhdG9yJztcbmNvbnN0IENBTENfVU5JVCA9ICdDQUxDX1VOSVQnO1xuZnVuY3Rpb24gdW5pdCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBgJHt2YWx1ZX0ke0NBTENfVU5JVH1gO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmxldCBDU1NDYWxjdWxhdG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQWJzdHJhY3RDYWxjdWxhdG9yKSB7XG4gIF9pbmhlcml0cyhDU1NDYWxjdWxhdG9yLCBfQWJzdHJhY3RDYWxjdWxhdG9yKTtcbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihDU1NDYWxjdWxhdG9yKTtcbiAgZnVuY3Rpb24gQ1NTQ2FsY3VsYXRvcihudW0pIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENTU0NhbGN1bGF0b3IpO1xuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgX3RoaXMucmVzdWx0ID0gJyc7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIENTU0NhbGN1bGF0b3IpIHtcbiAgICAgIF90aGlzLnJlc3VsdCA9IGAoJHtudW0ucmVzdWx0fSlgO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicpIHtcbiAgICAgIF90aGlzLnJlc3VsdCA9IHVuaXQobnVtKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBudW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBfdGhpcy5yZXN1bHQgPSBudW07XG4gICAgfVxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfY3JlYXRlQ2xhc3MoQ1NTQ2FsY3VsYXRvciwgW3tcbiAgICBrZXk6IFwiYWRkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChudW0pIHtcbiAgICAgIGlmIChudW0gaW5zdGFuY2VvZiBDU1NDYWxjdWxhdG9yKSB7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gYCR7dGhpcy5yZXN1bHR9ICsgJHtudW0uZ2V0UmVzdWx0KCl9YDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG51bSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSBgJHt0aGlzLnJlc3VsdH0gKyAke3VuaXQobnVtKX1gO1xuICAgICAgfVxuICAgICAgdGhpcy5sb3dQcmlvcml0eSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3ViXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1YihudW0pIHtcbiAgICAgIGlmIChudW0gaW5zdGFuY2VvZiBDU1NDYWxjdWxhdG9yKSB7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gYCR7dGhpcy5yZXN1bHR9IC0gJHtudW0uZ2V0UmVzdWx0KCl9YDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG51bSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSBgJHt0aGlzLnJlc3VsdH0gLSAke3VuaXQobnVtKX1gO1xuICAgICAgfVxuICAgICAgdGhpcy5sb3dQcmlvcml0eSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibXVsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG11bChudW0pIHtcbiAgICAgIGlmICh0aGlzLmxvd1ByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gYCgke3RoaXMucmVzdWx0fSlgO1xuICAgICAgfVxuICAgICAgaWYgKG51bSBpbnN0YW5jZW9mIENTU0NhbGN1bGF0b3IpIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSBgJHt0aGlzLnJlc3VsdH0gKiAke251bS5nZXRSZXN1bHQodHJ1ZSl9YDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG51bSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSBgJHt0aGlzLnJlc3VsdH0gKiAke251bX1gO1xuICAgICAgfVxuICAgICAgdGhpcy5sb3dQcmlvcml0eSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRpdlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXYobnVtKSB7XG4gICAgICBpZiAodGhpcy5sb3dQcmlvcml0eSkge1xuICAgICAgICB0aGlzLnJlc3VsdCA9IGAoJHt0aGlzLnJlc3VsdH0pYDtcbiAgICAgIH1cbiAgICAgIGlmIChudW0gaW5zdGFuY2VvZiBDU1NDYWxjdWxhdG9yKSB7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gYCR7dGhpcy5yZXN1bHR9IC8gJHtudW0uZ2V0UmVzdWx0KHRydWUpfWA7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBudW0gPT09ICdudW1iZXInIHx8IHR5cGVvZiBudW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gYCR7dGhpcy5yZXN1bHR9IC8gJHtudW19YDtcbiAgICAgIH1cbiAgICAgIHRoaXMubG93UHJpb3JpdHkgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRSZXN1bHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVzdWx0KGZvcmNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5sb3dQcmlvcml0eSB8fCBmb3JjZSA/IGAoJHt0aGlzLnJlc3VsdH0pYCA6IHRoaXMucmVzdWx0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlcXVhbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhbChvcHRpb25zKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHVuaXQ6IGNzc1VuaXQgPSB0cnVlXG4gICAgICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIGNvbnN0IHJlZ2V4cCA9IG5ldyBSZWdFeHAoYCR7Q0FMQ19VTklUfWAsICdnJyk7XG4gICAgICB0aGlzLnJlc3VsdCA9IHRoaXMucmVzdWx0LnJlcGxhY2UocmVnZXhwLCBjc3NVbml0ID8gJ3B4JyA6ICcnKTtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5sb3dQcmlvcml0eSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGBjYWxjKCR7dGhpcy5yZXN1bHR9KWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5yZXN1bHQ7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBDU1NDYWxjdWxhdG9yO1xufShBYnN0cmFjdENhbGN1bGF0b3IpO1xuZXhwb3J0IHsgQ1NTQ2FsY3VsYXRvciBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IE51bUNhbGN1bGF0b3IgZnJvbSAnLi9OdW1DYWxjdWxhdG9yJztcbmltcG9ydCBDU1NDYWxjdWxhdG9yIGZyb20gJy4vQ1NTQ2FsY3VsYXRvcic7XG5jb25zdCBnZW5DYWxjID0gdHlwZSA9PiB7XG4gIGNvbnN0IENhbGN1bGF0b3IgPSB0eXBlID09PSAnY3NzJyA/IENTU0NhbGN1bGF0b3IgOiBOdW1DYWxjdWxhdG9yO1xuICByZXR1cm4gbnVtID0+IG5ldyBDYWxjdWxhdG9yKG51bSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZ2VuQ2FsYzsiLCJjb25zdCBlbmFibGVTdGF0aXN0aWMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nIHx8IHR5cGVvZiBDU1NJTkpTX1NUQVRJU1RJQyAhPT0gJ3VuZGVmaW5lZCc7XG5sZXQgcmVjb3JkaW5nID0gdHJ1ZTtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGRvIGFzIGBPYmplY3QuYXNzaWduYCBpbiBwcm9kdWN0aW9uLiBCdXQgd2lsbCB1c2UgT2JqZWN0LmRlZmluZVByb3BlcnR5OmdldCB0b1xuICogcGFzcyBhbGwgdmFsdWUgYWNjZXNzIGluIGRldmVsb3BtZW50LiBUbyBzdXBwb3J0IHN0YXRpc3RpYyBmaWVsZCB1c2FnZSB3aXRoIGFsaWFzIHRva2VuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBvYmpzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG9ianNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFlbmFibGVTdGF0aXN0aWMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbi5hcHBseShPYmplY3QsIFt7fV0uY29uY2F0KG9ianMpKTtcbiAgfVxuICByZWNvcmRpbmcgPSBmYWxzZTtcbiAgY29uc3QgcmV0ID0ge307XG4gIG9ianMuZm9yRWFjaChvYmogPT4ge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJldCwga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBvYmpba2V5XVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuICByZWNvcmRpbmcgPSB0cnVlO1xuICByZXR1cm4gcmV0O1xufVxuLyoqIEBpbnRlcm5hbCBJbnRlcm5hbCBVc2FnZS4gTm90IHVzZSBpbiB5b3VyIHByb2R1Y3Rpb24uICovXG5leHBvcnQgY29uc3Qgc3RhdGlzdGljID0ge307XG4vKiogQGludGVybmFsIEludGVybmFsIFVzYWdlLiBOb3QgdXNlIGluIHlvdXIgcHJvZHVjdGlvbi4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbmV4cG9ydCBjb25zdCBfc3RhdGlzdGljX2J1aWxkXyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqIFN0YXRpc3RpYyB0b2tlbiB1c2FnZSBjYXNlLiBTaG91bGQgdXNlIGBtZXJnZWAgZnVuY3Rpb24gaWYgeW91IGRvIG5vdCB3YW50IHNwcmVhZCByZWNvcmQuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGF0aXN0aWNUb2tlbih0b2tlbikge1xuICBsZXQgdG9rZW5LZXlzO1xuICBsZXQgcHJveHkgPSB0b2tlbjtcbiAgbGV0IGZsdXNoID0gbm9vcDtcbiAgaWYgKGVuYWJsZVN0YXRpc3RpYyAmJiB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdG9rZW5LZXlzID0gbmV3IFNldCgpO1xuICAgIHByb3h5ID0gbmV3IFByb3h5KHRva2VuLCB7XG4gICAgICBnZXQob2JqLCBwcm9wKSB7XG4gICAgICAgIGlmIChyZWNvcmRpbmcpIHtcbiAgICAgICAgICB0b2tlbktleXMuYWRkKHByb3ApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmpbcHJvcF07XG4gICAgICB9XG4gICAgfSk7XG4gICAgZmx1c2ggPSAoY29tcG9uZW50TmFtZSwgY29tcG9uZW50VG9rZW4pID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIHN0YXRpc3RpY1tjb21wb25lbnROYW1lXSA9IHtcbiAgICAgICAgZ2xvYmFsOiBBcnJheS5mcm9tKHRva2VuS2V5cyksXG4gICAgICAgIGNvbXBvbmVudDogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCAoX2EgPSBzdGF0aXN0aWNbY29tcG9uZW50TmFtZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb21wb25lbnQpLCBjb21wb25lbnRUb2tlbilcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHRva2VuOiBwcm94eSxcbiAgICBrZXlzOiB0b2tlbktleXMsXG4gICAgZmx1c2hcbiAgfTtcbn0iLCJpbXBvcnQgeyB1c2VTdHlsZVJlZ2lzdGVyIH0gZnJvbSAnQGFudC1kZXNpZ24vY3NzaW5qcyc7XG5pbXBvcnQgeyByZXNldEljb24gfSBmcm9tICcuLi8uLi9zdHlsZSc7XG5pbXBvcnQgdXNlVG9rZW4gZnJvbSAnLi4vdXNlVG9rZW4nO1xuY29uc3QgdXNlUmVzZXRJY29uU3R5bGUgPSAoaWNvblByZWZpeENscywgY3NwKSA9PiB7XG4gIGNvbnN0IFt0aGVtZSwgdG9rZW5dID0gdXNlVG9rZW4oKTtcbiAgLy8gR2VuZXJhdGUgc3R5bGUgZm9yIGljb25zXG4gIHJldHVybiB1c2VTdHlsZVJlZ2lzdGVyKHtcbiAgICB0aGVtZSxcbiAgICB0b2tlbixcbiAgICBoYXNoSWQ6ICcnLFxuICAgIHBhdGg6IFsnYW50LWRlc2lnbi1pY29ucycsIGljb25QcmVmaXhDbHNdLFxuICAgIG5vbmNlOiAoKSA9PiBjc3AgPT09IG51bGwgfHwgY3NwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjc3Aubm9uY2VcbiAgfSwgKCkgPT4gW3tcbiAgICBbYC4ke2ljb25QcmVmaXhDbHN9YF06IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzZXRJY29uKCkpLCB7XG4gICAgICBbYC4ke2ljb25QcmVmaXhDbHN9IC4ke2ljb25QcmVmaXhDbHN9LWljb25gXToge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfSlcbiAgfV0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IHVzZVJlc2V0SWNvblN0eWxlOyIsIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHRva2VuMkNTU1ZhciwgdXNlQ1NTVmFyUmVnaXN0ZXIsIHVzZVN0eWxlUmVnaXN0ZXIgfSBmcm9tICdAYW50LWRlc2lnbi9jc3NpbmpzJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgd2FybmluZyB9IGZyb20gJ3JjLXV0aWwnO1xuaW1wb3J0IHsgQ29uZmlnQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbmZpZy1wcm92aWRlci9jb250ZXh0JztcbmltcG9ydCB7IGdlbkNvbW1vblN0eWxlLCBnZW5MaW5rU3R5bGUgfSBmcm9tICcuLi8uLi9zdHlsZSc7XG5pbXBvcnQgdXNlVG9rZW4sIHsgaWdub3JlLCB1bml0bGVzcyB9IGZyb20gJy4uL3VzZVRva2VuJztcbmltcG9ydCBnZW5DYWxjIGZyb20gJy4vY2FsYyc7XG5pbXBvcnQgZ2VuTWF4TWluIGZyb20gJy4vbWF4bWluJztcbmltcG9ydCBzdGF0aXN0aWNUb2tlbiwgeyBtZXJnZSBhcyBtZXJnZVRva2VuIH0gZnJvbSAnLi9zdGF0aXN0aWMnO1xuaW1wb3J0IHVzZVJlc2V0SWNvblN0eWxlIGZyb20gJy4vdXNlUmVzZXRJY29uU3R5bGUnO1xuY29uc3QgZ2V0RGVmYXVsdENvbXBvbmVudFRva2VuID0gKGNvbXBvbmVudCwgdG9rZW4sIGdldERlZmF1bHRUb2tlbikgPT4ge1xuICB2YXIgX2E7XG4gIGlmICh0eXBlb2YgZ2V0RGVmYXVsdFRva2VuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdldERlZmF1bHRUb2tlbihtZXJnZVRva2VuKHRva2VuLCAoX2EgPSB0b2tlbltjb21wb25lbnRdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fSkpO1xuICB9XG4gIHJldHVybiBnZXREZWZhdWx0VG9rZW4gIT09IG51bGwgJiYgZ2V0RGVmYXVsdFRva2VuICE9PSB2b2lkIDAgPyBnZXREZWZhdWx0VG9rZW4gOiB7fTtcbn07XG5jb25zdCBnZXRDb21wb25lbnRUb2tlbiA9IChjb21wb25lbnQsIHRva2VuLCBkZWZhdWx0VG9rZW4sIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgY3VzdG9tVG9rZW4gPSBPYmplY3QuYXNzaWduKHt9LCB0b2tlbltjb21wb25lbnRdKTtcbiAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kZXByZWNhdGVkVG9rZW5zKSB7XG4gICAgY29uc3Qge1xuICAgICAgZGVwcmVjYXRlZFRva2Vuc1xuICAgIH0gPSBvcHRpb25zO1xuICAgIGRlcHJlY2F0ZWRUb2tlbnMuZm9yRWFjaChfcmVmID0+IHtcbiAgICAgIGxldCBbb2xkVG9rZW5LZXksIG5ld1Rva2VuS2V5XSA9IF9yZWY7XG4gICAgICB2YXIgX2E7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoY3VzdG9tVG9rZW4gPT09IG51bGwgfHwgY3VzdG9tVG9rZW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1c3RvbVRva2VuW29sZFRva2VuS2V5XSksIGBUaGUgdG9rZW4gJyR7U3RyaW5nKG9sZFRva2VuS2V5KX0nIG9mICR7Y29tcG9uZW50fSBoYWQgZGVwcmVjYXRlZCwgdXNlICcke1N0cmluZyhuZXdUb2tlbktleSl9JyBpbnN0ZWFkLmApIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgLy8gU2hvdWxkIHdyYXAgd2l0aCBgaWZgIGNsYXVzZSwgb3IgdGhlcmUgd2lsbCBiZSBgdW5kZWZpbmVkYCBpbiBvYmplY3QuXG4gICAgICBpZiAoKGN1c3RvbVRva2VuID09PSBudWxsIHx8IGN1c3RvbVRva2VuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXN0b21Ub2tlbltvbGRUb2tlbktleV0pIHx8IChjdXN0b21Ub2tlbiA9PT0gbnVsbCB8fCBjdXN0b21Ub2tlbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VzdG9tVG9rZW5bbmV3VG9rZW5LZXldKSkge1xuICAgICAgICAoX2EgPSBjdXN0b21Ub2tlbltuZXdUb2tlbktleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGN1c3RvbVRva2VuW25ld1Rva2VuS2V5XSA9IGN1c3RvbVRva2VuID09PSBudWxsIHx8IGN1c3RvbVRva2VuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXN0b21Ub2tlbltvbGRUb2tlbktleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbGV0IG1lcmdlZFRva2VuID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0VG9rZW4pLCBjdXN0b21Ub2tlbik7XG4gIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZm9ybWF0KSB7XG4gICAgbWVyZ2VkVG9rZW4gPSBvcHRpb25zLmZvcm1hdChtZXJnZWRUb2tlbik7XG4gIH1cbiAgLy8gUmVtb3ZlIHNhbWUgdmFsdWUgYXMgZ2xvYmFsIHRva2VuIHRvIG1pbmltaXplIHNpemVcbiAgT2JqZWN0LmtleXMobWVyZ2VkVG9rZW4pLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAobWVyZ2VkVG9rZW5ba2V5XSA9PT0gdG9rZW5ba2V5XSkge1xuICAgICAgZGVsZXRlIG1lcmdlZFRva2VuW2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG1lcmdlZFRva2VuO1xufTtcbmNvbnN0IGdldENvbXBWYXJQcmVmaXggPSAoY29tcG9uZW50LCBwcmVmaXgpID0+IGAke1twcmVmaXgsIGNvbXBvbmVudC5yZXBsYWNlKC8oW0EtWl0rKShbQS1aXVthLXpdKykvZywgJyQxLSQyJykucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJyldLmZpbHRlcihCb29sZWFuKS5qb2luKCctJyl9YDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbkNvbXBvbmVudFN0eWxlSG9vayhjb21wb25lbnROYW1lLCBzdHlsZUZuLCBnZXREZWZhdWx0VG9rZW4pIHtcbiAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICBjb25zdCBjZWxscyA9IEFycmF5LmlzQXJyYXkoY29tcG9uZW50TmFtZSkgPyBjb21wb25lbnROYW1lIDogW2NvbXBvbmVudE5hbWUsIGNvbXBvbmVudE5hbWVdO1xuICBjb25zdCBbY29tcG9uZW50XSA9IGNlbGxzO1xuICBjb25zdCBjb25jYXRDb21wb25lbnQgPSBjZWxscy5qb2luKCctJyk7XG4gIHJldHVybiBwcmVmaXhDbHMgPT4ge1xuICAgIGNvbnN0IFt0aGVtZSwgcmVhbFRva2VuLCBoYXNoSWQsIHRva2VuLCBjc3NWYXJdID0gdXNlVG9rZW4oKTtcbiAgICBjb25zdCB7XG4gICAgICBnZXRQcmVmaXhDbHMsXG4gICAgICBpY29uUHJlZml4Q2xzLFxuICAgICAgY3NwXG4gICAgfSA9IHVzZUNvbnRleHQoQ29uZmlnQ29udGV4dCk7XG4gICAgY29uc3Qgcm9vdFByZWZpeENscyA9IGdldFByZWZpeENscygpO1xuICAgIGNvbnN0IHR5cGUgPSBjc3NWYXIgPyAnY3NzJyA6ICdqcyc7XG4gICAgY29uc3QgY2FsYyA9IGdlbkNhbGModHlwZSk7XG4gICAgY29uc3Qge1xuICAgICAgbWF4LFxuICAgICAgbWluXG4gICAgfSA9IGdlbk1heE1pbih0eXBlKTtcbiAgICAvLyBTaGFyZWQgY29uZmlnXG4gICAgY29uc3Qgc2hhcmVkQ29uZmlnID0ge1xuICAgICAgdGhlbWUsXG4gICAgICB0b2tlbixcbiAgICAgIGhhc2hJZCxcbiAgICAgIG5vbmNlOiAoKSA9PiBjc3AgPT09IG51bGwgfHwgY3NwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjc3Aubm9uY2UsXG4gICAgICBjbGllbnRPbmx5OiBvcHRpb25zLmNsaWVudE9ubHksXG4gICAgICAvLyBhbnRkIGlzIGFsd2F5cyBhdCB0b3Agb2Ygc3R5bGVzXG4gICAgICBvcmRlcjogb3B0aW9ucy5vcmRlciB8fCAtOTk5XG4gICAgfTtcbiAgICAvLyBHZW5lcmF0ZSBzdHlsZSBmb3IgYWxsIGEgdGFncyBpbiBhbnRkIGNvbXBvbmVudC5cbiAgICB1c2VTdHlsZVJlZ2lzdGVyKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc2hhcmVkQ29uZmlnKSwge1xuICAgICAgY2xpZW50T25seTogZmFsc2UsXG4gICAgICBwYXRoOiBbJ1NoYXJlZCcsIHJvb3RQcmVmaXhDbHNdXG4gICAgfSksICgpID0+IFt7XG4gICAgICAvLyBMaW5rXG4gICAgICAnJic6IGdlbkxpbmtTdHlsZSh0b2tlbilcbiAgICB9XSk7XG4gICAgLy8gR2VuZXJhdGUgc3R5bGUgZm9yIGljb25zXG4gICAgdXNlUmVzZXRJY29uU3R5bGUoaWNvblByZWZpeENscywgY3NwKTtcbiAgICBjb25zdCB3cmFwU1NSID0gdXNlU3R5bGVSZWdpc3RlcihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNoYXJlZENvbmZpZyksIHtcbiAgICAgIHBhdGg6IFtjb25jYXRDb21wb25lbnQsIHByZWZpeENscywgaWNvblByZWZpeENsc11cbiAgICB9KSwgKCkgPT4ge1xuICAgICAgaWYgKG9wdGlvbnMuaW5qZWN0U3R5bGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdG9rZW46IHByb3h5VG9rZW4sXG4gICAgICAgIGZsdXNoXG4gICAgICB9ID0gc3RhdGlzdGljVG9rZW4odG9rZW4pO1xuICAgICAgY29uc3QgZGVmYXVsdENvbXBvbmVudFRva2VuID0gZ2V0RGVmYXVsdENvbXBvbmVudFRva2VuKGNvbXBvbmVudCwgcmVhbFRva2VuLCBnZXREZWZhdWx0VG9rZW4pO1xuICAgICAgY29uc3QgY29tcG9uZW50Q2xzID0gYC4ke3ByZWZpeENsc31gO1xuICAgICAgY29uc3QgY29tcG9uZW50VG9rZW4gPSBnZXRDb21wb25lbnRUb2tlbihjb21wb25lbnQsIHJlYWxUb2tlbiwgZGVmYXVsdENvbXBvbmVudFRva2VuLCB7XG4gICAgICAgIGRlcHJlY2F0ZWRUb2tlbnM6IG9wdGlvbnMuZGVwcmVjYXRlZFRva2VucyxcbiAgICAgICAgZm9ybWF0OiBvcHRpb25zLmZvcm1hdFxuICAgICAgfSk7XG4gICAgICBpZiAoY3NzVmFyKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGRlZmF1bHRDb21wb25lbnRUb2tlbikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIGRlZmF1bHRDb21wb25lbnRUb2tlbltrZXldID0gYHZhcigke3Rva2VuMkNTU1ZhcihrZXksIGdldENvbXBWYXJQcmVmaXgoY29tcG9uZW50LCBjc3NWYXIucHJlZml4KSl9KWA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgY29uc3QgbWVyZ2VkVG9rZW4gPSBtZXJnZVRva2VuKHByb3h5VG9rZW4sIHtcbiAgICAgICAgY29tcG9uZW50Q2xzLFxuICAgICAgICBwcmVmaXhDbHMsXG4gICAgICAgIGljb25DbHM6IGAuJHtpY29uUHJlZml4Q2xzfWAsXG4gICAgICAgIGFudENsczogYC4ke3Jvb3RQcmVmaXhDbHN9YCxcbiAgICAgICAgY2FsYyxcbiAgICAgICAgbWF4LFxuICAgICAgICBtaW5cbiAgICAgIH0sIGNzc1ZhciA/IGRlZmF1bHRDb21wb25lbnRUb2tlbiA6IGNvbXBvbmVudFRva2VuKTtcbiAgICAgIGNvbnN0IHN0eWxlSW50ZXJwb2xhdGlvbiA9IHN0eWxlRm4obWVyZ2VkVG9rZW4sIHtcbiAgICAgICAgaGFzaElkLFxuICAgICAgICBwcmVmaXhDbHMsXG4gICAgICAgIHJvb3RQcmVmaXhDbHMsXG4gICAgICAgIGljb25QcmVmaXhDbHNcbiAgICAgIH0pO1xuICAgICAgZmx1c2goY29tcG9uZW50LCBjb21wb25lbnRUb2tlbik7XG4gICAgICByZXR1cm4gW29wdGlvbnMucmVzZXRTdHlsZSA9PT0gZmFsc2UgPyBudWxsIDogZ2VuQ29tbW9uU3R5bGUobWVyZ2VkVG9rZW4sIHByZWZpeENscyksIHN0eWxlSW50ZXJwb2xhdGlvbl07XG4gICAgfSk7XG4gICAgcmV0dXJuIFt3cmFwU1NSLCBjbGFzc05hbWVzKGhhc2hJZCwgY3NzVmFyID09PSBudWxsIHx8IGNzc1ZhciA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3NzVmFyLmtleSldO1xuICB9O1xufVxuZXhwb3J0IGNvbnN0IGdlblN1YlN0eWxlQ29tcG9uZW50ID0gKGNvbXBvbmVudE5hbWUsIHN0eWxlRm4sIGdldERlZmF1bHRUb2tlbiwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB1c2VTdHlsZSA9IGdlbkNvbXBvbmVudFN0eWxlSG9vayhjb21wb25lbnROYW1lLCBzdHlsZUZuLCBnZXREZWZhdWx0VG9rZW4sIE9iamVjdC5hc3NpZ24oe1xuICAgIHJlc2V0U3R5bGU6IGZhbHNlLFxuICAgIC8vIFN1YiBTdHlsZSBzaG91bGQgZGVmYXVsdCBhZnRlciByb290IG9uZVxuICAgIG9yZGVyOiAtOTk4XG4gIH0sIG9wdGlvbnMpKTtcbiAgY29uc3QgU3R5bGVkQ29tcG9uZW50ID0gX3JlZjIgPT4ge1xuICAgIGxldCB7XG4gICAgICBwcmVmaXhDbHNcbiAgICB9ID0gX3JlZjI7XG4gICAgdXNlU3R5bGUocHJlZml4Q2xzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBgU3ViU3R5bGVfJHtBcnJheS5pc0FycmF5KGNvbXBvbmVudE5hbWUpID8gY29tcG9uZW50TmFtZS5qb2luKCcuJykgOiBjb21wb25lbnROYW1lfWA7XG4gIH1cbiAgcmV0dXJuIFN0eWxlZENvbXBvbmVudDtcbn07XG5jb25zdCBnZW5DU1NWYXJSZWdpc3RlciA9IChjb21wb25lbnQsIGdldERlZmF1bHRUb2tlbiwgb3B0aW9ucykgPT4ge1xuICBmdW5jdGlvbiBwcmVmaXhUb2tlbihrZXkpIHtcbiAgICByZXR1cm4gYCR7Y29tcG9uZW50fSR7a2V5LnNsaWNlKDAsIDEpLnRvVXBwZXJDYXNlKCl9JHtrZXkuc2xpY2UoMSl9YDtcbiAgfVxuICBjb25zdCB7XG4gICAgdW5pdGxlc3M6IG9yaWdpblVuaXRsZXNzID0ge30sXG4gICAgaW5qZWN0U3R5bGUgPSB0cnVlXG4gIH0gPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fTtcbiAgY29uc3QgY29tcFVuaXRsZXNzID0ge1xuICAgIFtwcmVmaXhUb2tlbignekluZGV4UG9wdXAnKV06IHRydWVcbiAgfTtcbiAgT2JqZWN0LmtleXMob3JpZ2luVW5pdGxlc3MpLmZvckVhY2goa2V5ID0+IHtcbiAgICBjb21wVW5pdGxlc3NbcHJlZml4VG9rZW4oa2V5KV0gPSBvcmlnaW5Vbml0bGVzc1trZXldO1xuICB9KTtcbiAgY29uc3QgQ1NTVmFyUmVnaXN0ZXIgPSBfcmVmMyA9PiB7XG4gICAgbGV0IHtcbiAgICAgIHJvb3RDbHMsXG4gICAgICBjc3NWYXJcbiAgICB9ID0gX3JlZjM7XG4gICAgY29uc3QgWywgcmVhbFRva2VuXSA9IHVzZVRva2VuKCk7XG4gICAgdXNlQ1NTVmFyUmVnaXN0ZXIoe1xuICAgICAgcGF0aDogW2NvbXBvbmVudF0sXG4gICAgICBwcmVmaXg6IGNzc1Zhci5wcmVmaXgsXG4gICAgICBrZXk6IGNzc1ZhciA9PT0gbnVsbCB8fCBjc3NWYXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNzc1Zhci5rZXksXG4gICAgICB1bml0bGVzczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB1bml0bGVzcyksIGNvbXBVbml0bGVzcyksXG4gICAgICBpZ25vcmUsXG4gICAgICB0b2tlbjogcmVhbFRva2VuLFxuICAgICAgc2NvcGU6IHJvb3RDbHNcbiAgICB9LCAoKSA9PiB7XG4gICAgICBjb25zdCBkZWZhdWx0VG9rZW4gPSBnZXREZWZhdWx0Q29tcG9uZW50VG9rZW4oY29tcG9uZW50LCByZWFsVG9rZW4sIGdldERlZmF1bHRUb2tlbik7XG4gICAgICBjb25zdCBjb21wb25lbnRUb2tlbiA9IGdldENvbXBvbmVudFRva2VuKGNvbXBvbmVudCwgcmVhbFRva2VuLCBkZWZhdWx0VG9rZW4sIHtcbiAgICAgICAgZm9ybWF0OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZm9ybWF0LFxuICAgICAgICBkZXByZWNhdGVkVG9rZW5zOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVwcmVjYXRlZFRva2Vuc1xuICAgICAgfSk7XG4gICAgICBPYmplY3Qua2V5cyhkZWZhdWx0VG9rZW4pLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29tcG9uZW50VG9rZW5bcHJlZml4VG9rZW4oa2V5KV0gPSBjb21wb25lbnRUb2tlbltrZXldO1xuICAgICAgICBkZWxldGUgY29tcG9uZW50VG9rZW5ba2V5XTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFRva2VuO1xuICAgIH0pO1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuICBjb25zdCB1c2VDU1NWYXIgPSByb290Q2xzID0+IHtcbiAgICBjb25zdCBbLCwsLCBjc3NWYXJdID0gdXNlVG9rZW4oKTtcbiAgICByZXR1cm4gbm9kZSA9PiBpbmplY3RTdHlsZSAmJiBjc3NWYXIgPyAoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDU1NWYXJSZWdpc3Rlciwge1xuICAgICAgcm9vdENsczogcm9vdENscyxcbiAgICAgIGNzc1ZhcjogY3NzVmFyLFxuICAgICAgY29tcG9uZW50OiBjb21wb25lbnRcbiAgICB9KSwgbm9kZSkpIDogbm9kZTtcbiAgfTtcbiAgcmV0dXJuIHVzZUNTU1Zhcjtcbn07XG5leHBvcnQgY29uc3QgZ2VuU3R5bGVIb29rcyA9IChjb21wb25lbnQsIHN0eWxlRm4sIGdldERlZmF1bHRUb2tlbiwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB1c2VTdHlsZSA9IGdlbkNvbXBvbmVudFN0eWxlSG9vayhjb21wb25lbnQsIHN0eWxlRm4sIGdldERlZmF1bHRUb2tlbiwgb3B0aW9ucyk7XG4gIGNvbnN0IHVzZUNTU1ZhciA9IGdlbkNTU1ZhclJlZ2lzdGVyKGNvbXBvbmVudCwgZ2V0RGVmYXVsdFRva2VuLCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcmVmaXhDbHMpIHtcbiAgICBsZXQgcm9vdENscyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogcHJlZml4Q2xzO1xuICAgIGNvbnN0IFssIGhhc2hJZF0gPSB1c2VTdHlsZShwcmVmaXhDbHMpO1xuICAgIGNvbnN0IHdyYXBDU1NWYXIgPSB1c2VDU1NWYXIocm9vdENscyk7XG4gICAgcmV0dXJuIFt3cmFwQ1NTVmFyLCBoYXNoSWRdO1xuICB9O1xufTsiLCJpbXBvcnQgeyB1bml0IH0gZnJvbSAnQGFudC1kZXNpZ24vY3NzaW5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5NYXhNaW4odHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ2pzJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYXg6IE1hdGgubWF4LFxuICAgICAgbWluOiBNYXRoLm1pblxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYXg6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGBtYXgoJHthcmdzLm1hcCh2YWx1ZSA9PiB1bml0KHZhbHVlKSkuam9pbignLCcpfSlgO1xuICAgIH0sXG4gICAgbWluOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGBtaW4oJHthcmdzLm1hcCh2YWx1ZSA9PiB1bml0KHZhbHVlKSkuam9pbignLCcpfSlgO1xuICAgIH1cbiAgfTtcbn0iLCJpbXBvcnQgeyB1bml0IH0gZnJvbSAnQGFudC1kZXNpZ24vY3NzaW5qcyc7XG5pbXBvcnQgeyByZXNldENvbXBvbmVudCwgcmVzZXRJY29uIH0gZnJvbSAnLi4vLi4vc3R5bGUnO1xuaW1wb3J0IHsgZ2VuQ29sbGFwc2VNb3Rpb24gfSBmcm9tICcuLi8uLi9zdHlsZS9tb3Rpb24nO1xuaW1wb3J0IHsgZ2VuU3R5bGVIb29rcywgbWVyZ2VUb2tlbiB9IGZyb20gJy4uLy4uL3RoZW1lL2ludGVybmFsJztcbmV4cG9ydCBjb25zdCBnZW5CYXNlU3R5bGUgPSB0b2tlbiA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb21wb25lbnRDbHMsXG4gICAgY29udGVudEJnLFxuICAgIHBhZGRpbmcsXG4gICAgaGVhZGVyQmcsXG4gICAgaGVhZGVyUGFkZGluZyxcbiAgICBjb2xsYXBzZUhlYWRlclBhZGRpbmdTTSxcbiAgICBjb2xsYXBzZUhlYWRlclBhZGRpbmdMRyxcbiAgICBjb2xsYXBzZVBhbmVsQm9yZGVyUmFkaXVzLFxuICAgIGxpbmVXaWR0aCxcbiAgICBsaW5lVHlwZSxcbiAgICBjb2xvckJvcmRlcixcbiAgICBjb2xvclRleHQsXG4gICAgY29sb3JUZXh0SGVhZGluZyxcbiAgICBjb2xvclRleHREaXNhYmxlZCxcbiAgICBmb250U2l6ZUxHLFxuICAgIGxpbmVIZWlnaHQsXG4gICAgbGluZUhlaWdodExHLFxuICAgIG1hcmdpblNNLFxuICAgIHBhZGRpbmdTTSxcbiAgICBwYWRkaW5nTEcsXG4gICAgcGFkZGluZ1hTLFxuICAgIG1vdGlvbkR1cmF0aW9uU2xvdyxcbiAgICBmb250U2l6ZUljb24sXG4gICAgY29udGVudFBhZGRpbmcsXG4gICAgZm9udEhlaWdodCxcbiAgICBmb250SGVpZ2h0TEdcbiAgfSA9IHRva2VuO1xuICBjb25zdCBib3JkZXJCYXNlID0gYCR7dW5pdChsaW5lV2lkdGgpfSAke2xpbmVUeXBlfSAke2NvbG9yQm9yZGVyfWA7XG4gIHJldHVybiB7XG4gICAgW2NvbXBvbmVudENsc106IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzZXRDb21wb25lbnQodG9rZW4pKSwge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBoZWFkZXJCZyxcbiAgICAgIGJvcmRlcjogYm9yZGVyQmFzZSxcbiAgICAgIGJvcmRlckJvdHRvbTogMCxcbiAgICAgIGJvcmRlclJhZGl1czogY29sbGFwc2VQYW5lbEJvcmRlclJhZGl1cyxcbiAgICAgIFtgJi1ydGxgXToge1xuICAgICAgICBkaXJlY3Rpb246ICdydGwnXG4gICAgICB9LFxuICAgICAgW2AmID4gJHtjb21wb25lbnRDbHN9LWl0ZW1gXToge1xuICAgICAgICBib3JkZXJCb3R0b206IGJvcmRlckJhc2UsXG4gICAgICAgIFtgJjpsYXN0LWNoaWxkYF06IHtcbiAgICAgICAgICBbYFxuICAgICAgICAgICAgJixcbiAgICAgICAgICAgICYgPiAke2NvbXBvbmVudENsc30taGVhZGVyYF06IHtcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogYDAgMCAke3VuaXQoY29sbGFwc2VQYW5lbEJvcmRlclJhZGl1cyl9ICR7dW5pdChjb2xsYXBzZVBhbmVsQm9yZGVyUmFkaXVzKX1gXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbYD4gJHtjb21wb25lbnRDbHN9LWhlYWRlcmBdOiB7XG4gICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgLy8gQ29tcGF0aWJsZSB3aXRoIG9sZCB2ZXJzaW9uIG9mIGFudGQsIHNob3VsZCByZW1vdmUgaW4gbmV4dCB2ZXJzaW9uXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGZsZXhXcmFwOiAnbm93cmFwJyxcbiAgICAgICAgICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcsXG4gICAgICAgICAgcGFkZGluZzogaGVhZGVyUGFkZGluZyxcbiAgICAgICAgICBjb2xvcjogY29sb3JUZXh0SGVhZGluZyxcbiAgICAgICAgICBsaW5lSGVpZ2h0LFxuICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgIHRyYW5zaXRpb246IGBhbGwgJHttb3Rpb25EdXJhdGlvblNsb3d9LCB2aXNpYmlsaXR5IDBzYCxcbiAgICAgICAgICBbYD4gJHtjb21wb25lbnRDbHN9LWhlYWRlci10ZXh0YF06IHtcbiAgICAgICAgICAgIGZsZXg6ICdhdXRvJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJyY6Zm9jdXMnOiB7XG4gICAgICAgICAgICBvdXRsaW5lOiAnbm9uZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIC8vID4+Pj4+IEFycm93XG4gICAgICAgICAgW2Ake2NvbXBvbmVudENsc30tZXhwYW5kLWljb25gXToge1xuICAgICAgICAgICAgaGVpZ2h0OiBmb250SGVpZ2h0LFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nSW5saW5lRW5kOiBtYXJnaW5TTVxuICAgICAgICAgIH0sXG4gICAgICAgICAgW2Ake2NvbXBvbmVudENsc30tYXJyb3dgXTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNldEljb24oKSksIHtcbiAgICAgICAgICAgIGZvbnRTaXplOiBmb250U2l6ZUljb24sXG4gICAgICAgICAgICBzdmc6IHtcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke21vdGlvbkR1cmF0aW9uU2xvd31gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgLy8gPj4+Pj4gVGV4dFxuICAgICAgICAgIFtgJHtjb21wb25lbnRDbHN9LWhlYWRlci10ZXh0YF06IHtcbiAgICAgICAgICAgIG1hcmdpbklubGluZUVuZDogJ2F1dG8nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbYCR7Y29tcG9uZW50Q2xzfS1pY29uLWNvbGxhcHNpYmxlLW9ubHlgXToge1xuICAgICAgICAgIGN1cnNvcjogJ3Vuc2V0JyxcbiAgICAgICAgICBbYCR7Y29tcG9uZW50Q2xzfS1leHBhbmQtaWNvbmBdOiB7XG4gICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtgJHtjb21wb25lbnRDbHN9LWNvbnRlbnRgXToge1xuICAgICAgICBjb2xvcjogY29sb3JUZXh0LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbnRlbnRCZyxcbiAgICAgICAgYm9yZGVyVG9wOiBib3JkZXJCYXNlLFxuICAgICAgICBbYCYgPiAke2NvbXBvbmVudENsc30tY29udGVudC1ib3hgXToge1xuICAgICAgICAgIHBhZGRpbmc6IGNvbnRlbnRQYWRkaW5nXG4gICAgICAgIH0sXG4gICAgICAgIFtgJi1oaWRkZW5gXToge1xuICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2AmLXNtYWxsYF06IHtcbiAgICAgICAgW2A+ICR7Y29tcG9uZW50Q2xzfS1pdGVtYF06IHtcbiAgICAgICAgICBbYD4gJHtjb21wb25lbnRDbHN9LWhlYWRlcmBdOiB7XG4gICAgICAgICAgICBwYWRkaW5nOiBjb2xsYXBzZUhlYWRlclBhZGRpbmdTTSxcbiAgICAgICAgICAgIHBhZGRpbmdJbmxpbmVTdGFydDogcGFkZGluZ1hTLFxuICAgICAgICAgICAgW2A+ICR7Y29tcG9uZW50Q2xzfS1leHBhbmQtaWNvbmBdOiB7XG4gICAgICAgICAgICAgIC8vIEFycm93IG9mZnNldFxuICAgICAgICAgICAgICBtYXJnaW5JbmxpbmVTdGFydDogdG9rZW4uY2FsYyhwYWRkaW5nU00pLnN1YihwYWRkaW5nWFMpLmVxdWFsKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtgPiAke2NvbXBvbmVudENsc30tY29udGVudCA+ICR7Y29tcG9uZW50Q2xzfS1jb250ZW50LWJveGBdOiB7XG4gICAgICAgICAgICBwYWRkaW5nOiBwYWRkaW5nU01cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbYCYtbGFyZ2VgXToge1xuICAgICAgICBbYD4gJHtjb21wb25lbnRDbHN9LWl0ZW1gXToge1xuICAgICAgICAgIGZvbnRTaXplOiBmb250U2l6ZUxHLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRMRyxcbiAgICAgICAgICBbYD4gJHtjb21wb25lbnRDbHN9LWhlYWRlcmBdOiB7XG4gICAgICAgICAgICBwYWRkaW5nOiBjb2xsYXBzZUhlYWRlclBhZGRpbmdMRyxcbiAgICAgICAgICAgIHBhZGRpbmdJbmxpbmVTdGFydDogcGFkZGluZyxcbiAgICAgICAgICAgIFtgPiAke2NvbXBvbmVudENsc30tZXhwYW5kLWljb25gXToge1xuICAgICAgICAgICAgICBoZWlnaHQ6IGZvbnRIZWlnaHRMRyxcbiAgICAgICAgICAgICAgLy8gQXJyb3cgb2Zmc2V0XG4gICAgICAgICAgICAgIG1hcmdpbklubGluZVN0YXJ0OiB0b2tlbi5jYWxjKHBhZGRpbmdMRykuc3ViKHBhZGRpbmcpLmVxdWFsKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtgPiAke2NvbXBvbmVudENsc30tY29udGVudCA+ICR7Y29tcG9uZW50Q2xzfS1jb250ZW50LWJveGBdOiB7XG4gICAgICAgICAgICBwYWRkaW5nOiBwYWRkaW5nTEdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbYCR7Y29tcG9uZW50Q2xzfS1pdGVtOmxhc3QtY2hpbGRgXToge1xuICAgICAgICBbYD4gJHtjb21wb25lbnRDbHN9LWNvbnRlbnRgXToge1xuICAgICAgICAgIGJvcmRlclJhZGl1czogYDAgMCAke3VuaXQoY29sbGFwc2VQYW5lbEJvcmRlclJhZGl1cyl9ICR7dW5pdChjb2xsYXBzZVBhbmVsQm9yZGVyUmFkaXVzKX1gXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbYCYgJHtjb21wb25lbnRDbHN9LWl0ZW0tZGlzYWJsZWQgPiAke2NvbXBvbmVudENsc30taGVhZGVyYF06IHtcbiAgICAgICAgW2BcbiAgICAgICAgICAmLFxuICAgICAgICAgICYgPiAuYXJyb3dcbiAgICAgICAgYF06IHtcbiAgICAgICAgICBjb2xvcjogY29sb3JUZXh0RGlzYWJsZWQsXG4gICAgICAgICAgY3Vyc29yOiAnbm90LWFsbG93ZWQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PSBJY29uIFBvc2l0aW9uID09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICBbYCYke2NvbXBvbmVudENsc30taWNvbi1wb3NpdGlvbi1lbmRgXToge1xuICAgICAgICBbYCYgPiAke2NvbXBvbmVudENsc30taXRlbWBdOiB7XG4gICAgICAgICAgW2A+ICR7Y29tcG9uZW50Q2xzfS1oZWFkZXJgXToge1xuICAgICAgICAgICAgW2Ake2NvbXBvbmVudENsc30tZXhwYW5kLWljb25gXToge1xuICAgICAgICAgICAgICBvcmRlcjogMSxcbiAgICAgICAgICAgICAgcGFkZGluZ0lubGluZUVuZDogMCxcbiAgICAgICAgICAgICAgcGFkZGluZ0lubGluZVN0YXJ0OiBtYXJnaW5TTVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH07XG59O1xuY29uc3QgZ2VuQXJyb3dTdHlsZSA9IHRva2VuID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbXBvbmVudENsc1xuICB9ID0gdG9rZW47XG4gIGNvbnN0IGZpeGVkU2VsZWN0b3IgPSBgPiAke2NvbXBvbmVudENsc30taXRlbSA+ICR7Y29tcG9uZW50Q2xzfS1oZWFkZXIgJHtjb21wb25lbnRDbHN9LWFycm93IHN2Z2A7XG4gIHJldHVybiB7XG4gICAgW2Ake2NvbXBvbmVudENsc30tcnRsYF06IHtcbiAgICAgIFtmaXhlZFNlbGVjdG9yXToge1xuICAgICAgICB0cmFuc2Zvcm06IGByb3RhdGUoMTgwZGVnKWBcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuY29uc3QgZ2VuQm9yZGVybGVzc1N0eWxlID0gdG9rZW4gPT4ge1xuICBjb25zdCB7XG4gICAgY29tcG9uZW50Q2xzLFxuICAgIGhlYWRlckJnLFxuICAgIHBhZGRpbmdYWFMsXG4gICAgY29sb3JCb3JkZXJcbiAgfSA9IHRva2VuO1xuICByZXR1cm4ge1xuICAgIFtgJHtjb21wb25lbnRDbHN9LWJvcmRlcmxlc3NgXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBoZWFkZXJCZyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIFtgPiAke2NvbXBvbmVudENsc30taXRlbWBdOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAke2NvbG9yQm9yZGVyfWBcbiAgICAgIH0sXG4gICAgICBbYFxuICAgICAgICA+ICR7Y29tcG9uZW50Q2xzfS1pdGVtOmxhc3QtY2hpbGQsXG4gICAgICAgID4gJHtjb21wb25lbnRDbHN9LWl0ZW06bGFzdC1jaGlsZCAke2NvbXBvbmVudENsc30taGVhZGVyXG4gICAgICBgXToge1xuICAgICAgICBib3JkZXJSYWRpdXM6IDBcbiAgICAgIH0sXG4gICAgICBbYD4gJHtjb21wb25lbnRDbHN9LWl0ZW06bGFzdC1jaGlsZGBdOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogMFxuICAgICAgfSxcbiAgICAgIFtgPiAke2NvbXBvbmVudENsc30taXRlbSA+ICR7Y29tcG9uZW50Q2xzfS1jb250ZW50YF06IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBib3JkZXJUb3A6IDBcbiAgICAgIH0sXG4gICAgICBbYD4gJHtjb21wb25lbnRDbHN9LWl0ZW0gPiAke2NvbXBvbmVudENsc30tY29udGVudCA+ICR7Y29tcG9uZW50Q2xzfS1jb250ZW50LWJveGBdOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IHBhZGRpbmdYWFNcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuY29uc3QgZ2VuR2hvc3RTdHlsZSA9IHRva2VuID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbXBvbmVudENscyxcbiAgICBwYWRkaW5nU01cbiAgfSA9IHRva2VuO1xuICByZXR1cm4ge1xuICAgIFtgJHtjb21wb25lbnRDbHN9LWdob3N0YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIFtgPiAke2NvbXBvbmVudENsc30taXRlbWBdOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogMCxcbiAgICAgICAgW2A+ICR7Y29tcG9uZW50Q2xzfS1jb250ZW50YF06IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgYm9yZGVyOiAwLFxuICAgICAgICAgIFtgPiAke2NvbXBvbmVudENsc30tY29udGVudC1ib3hgXToge1xuICAgICAgICAgICAgcGFkZGluZ0Jsb2NrOiBwYWRkaW5nU01cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuZXhwb3J0IGNvbnN0IHByZXBhcmVDb21wb25lbnRUb2tlbiA9IHRva2VuID0+ICh7XG4gIGhlYWRlclBhZGRpbmc6IGAke3Rva2VuLnBhZGRpbmdTTX1weCAke3Rva2VuLnBhZGRpbmd9cHhgLFxuICBoZWFkZXJCZzogdG9rZW4uY29sb3JGaWxsQWx0ZXIsXG4gIGNvbnRlbnRQYWRkaW5nOiBgJHt0b2tlbi5wYWRkaW5nfXB4IDE2cHhgLFxuICAvLyBGaXhlZCBWYWx1ZVxuICBjb250ZW50Qmc6IHRva2VuLmNvbG9yQmdDb250YWluZXJcbn0pO1xuZXhwb3J0IGRlZmF1bHQgZ2VuU3R5bGVIb29rcygnQ29sbGFwc2UnLCB0b2tlbiA9PiB7XG4gIGNvbnN0IGNvbGxhcHNlVG9rZW4gPSBtZXJnZVRva2VuKHRva2VuLCB7XG4gICAgY29sbGFwc2VIZWFkZXJQYWRkaW5nU006IGAke3VuaXQodG9rZW4ucGFkZGluZ1hTKX0gJHt1bml0KHRva2VuLnBhZGRpbmdTTSl9YCxcbiAgICBjb2xsYXBzZUhlYWRlclBhZGRpbmdMRzogYCR7dW5pdCh0b2tlbi5wYWRkaW5nKX0gJHt1bml0KHRva2VuLnBhZGRpbmdMRyl9YCxcbiAgICBjb2xsYXBzZVBhbmVsQm9yZGVyUmFkaXVzOiB0b2tlbi5ib3JkZXJSYWRpdXNMR1xuICB9KTtcbiAgcmV0dXJuIFtnZW5CYXNlU3R5bGUoY29sbGFwc2VUb2tlbiksIGdlbkJvcmRlcmxlc3NTdHlsZShjb2xsYXBzZVRva2VuKSwgZ2VuR2hvc3RTdHlsZShjb2xsYXBzZVRva2VuKSwgZ2VuQXJyb3dTdHlsZShjb2xsYXBzZVRva2VuKSwgZ2VuQ29sbGFwc2VNb3Rpb24oY29sbGFwc2VUb2tlbildO1xufSwgcHJlcGFyZUNvbXBvbmVudFRva2VuKTsiLCJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJpZ2h0T3V0bGluZWQgZnJvbSBcIkBhbnQtZGVzaWduL2ljb25zL2VzL2ljb25zL1JpZ2h0T3V0bGluZWRcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJjQ29sbGFwc2UgZnJvbSAncmMtY29sbGFwc2UnO1xuaW1wb3J0IHRvQXJyYXkgZnJvbSBcInJjLXV0aWwvZXMvQ2hpbGRyZW4vdG9BcnJheVwiO1xuaW1wb3J0IG9taXQgZnJvbSBcInJjLXV0aWwvZXMvb21pdFwiO1xuaW1wb3J0IGluaXRDb2xsYXBzZU1vdGlvbiBmcm9tICcuLi9fdXRpbC9tb3Rpb24nO1xuaW1wb3J0IHsgY2xvbmVFbGVtZW50IH0gZnJvbSAnLi4vX3V0aWwvcmVhY3ROb2RlJztcbmltcG9ydCB7IGRldlVzZVdhcm5pbmcgfSBmcm9tICcuLi9fdXRpbC93YXJuaW5nJztcbmltcG9ydCB7IENvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb25maWctcHJvdmlkZXInO1xuaW1wb3J0IHVzZVNpemUgZnJvbSAnLi4vY29uZmlnLXByb3ZpZGVyL2hvb2tzL3VzZVNpemUnO1xuaW1wb3J0IENvbGxhcHNlUGFuZWwgZnJvbSAnLi9Db2xsYXBzZVBhbmVsJztcbmltcG9ydCB1c2VTdHlsZSBmcm9tICcuL3N0eWxlJztcbmNvbnN0IENvbGxhcHNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgY29uc3Qge1xuICAgIGdldFByZWZpeENscyxcbiAgICBkaXJlY3Rpb24sXG4gICAgY29sbGFwc2VcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoQ29uZmlnQ29udGV4dCk7XG4gIGNvbnN0IHtcbiAgICBwcmVmaXhDbHM6IGN1c3RvbWl6ZVByZWZpeENscyxcbiAgICBjbGFzc05hbWUsXG4gICAgcm9vdENsYXNzTmFtZSxcbiAgICBzdHlsZSxcbiAgICBib3JkZXJlZCA9IHRydWUsXG4gICAgZ2hvc3QsXG4gICAgc2l6ZTogY3VzdG9taXplU2l6ZSxcbiAgICBleHBhbmRJY29uUG9zaXRpb24gPSAnc3RhcnQnLFxuICAgIGNoaWxkcmVuLFxuICAgIGV4cGFuZEljb25cbiAgfSA9IHByb3BzO1xuICBjb25zdCBtZXJnZWRTaXplID0gdXNlU2l6ZShjdHggPT4ge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gY3VzdG9taXplU2l6ZSAhPT0gbnVsbCAmJiBjdXN0b21pemVTaXplICE9PSB2b2lkIDAgPyBjdXN0b21pemVTaXplIDogY3R4KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnbWlkZGxlJztcbiAgfSk7XG4gIGNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygnY29sbGFwc2UnLCBjdXN0b21pemVQcmVmaXhDbHMpO1xuICBjb25zdCByb290UHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCk7XG4gIGNvbnN0IFt3cmFwQ1NTVmFyLCBoYXNoSWRdID0gdXNlU3R5bGUocHJlZml4Q2xzKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zdCB3YXJuaW5nID0gZGV2VXNlV2FybmluZygnQ29sbGFwc2UnKTtcbiAgICAvLyBXYXJuaW5nIGlmIHVzZSBsZWdhY3kgdHlwZSBgZXhwYW5kSWNvblBvc2l0aW9uYFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZXhwYW5kSWNvblBvc2l0aW9uICE9PSAnbGVmdCcgJiYgZXhwYW5kSWNvblBvc2l0aW9uICE9PSAncmlnaHQnLCAnZGVwcmVjYXRlZCcsICdgZXhwYW5kSWNvblBvc2l0aW9uYCB3aXRoIGBsZWZ0YCBvciBgcmlnaHRgIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYHN0YXJ0YCBvciBgZW5kYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICB9XG4gIC8vIEFsaWduIHdpdGggbG9naWMgcG9zaXRpb25cbiAgY29uc3QgbWVyZ2VkRXhwYW5kSWNvblBvc2l0aW9uID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKGV4cGFuZEljb25Qb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICByZXR1cm4gJ3N0YXJ0JztcbiAgICB9XG4gICAgcmV0dXJuIGV4cGFuZEljb25Qb3NpdGlvbiA9PT0gJ3JpZ2h0JyA/ICdlbmQnIDogZXhwYW5kSWNvblBvc2l0aW9uO1xuICB9LCBbZXhwYW5kSWNvblBvc2l0aW9uXSk7XG4gIGNvbnN0IHJlbmRlckV4cGFuZEljb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHBhbmVsUHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGNvbnN0IGljb24gPSBleHBhbmRJY29uID8gZXhwYW5kSWNvbihwYW5lbFByb3BzKSA6ICggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmlnaHRPdXRsaW5lZCwge1xuICAgICAgcm90YXRlOiBwYW5lbFByb3BzLmlzQWN0aXZlID8gOTAgOiB1bmRlZmluZWRcbiAgICB9KSk7XG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChpY29uLCAoKSA9PiAoe1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGljb24ucHJvcHMuY2xhc3NOYW1lLCBgJHtwcmVmaXhDbHN9LWFycm93YClcbiAgICB9KSk7XG4gIH07XG4gIGNvbnN0IGNvbGxhcHNlQ2xhc3NOYW1lID0gY2xhc3NOYW1lcyhgJHtwcmVmaXhDbHN9LWljb24tcG9zaXRpb24tJHttZXJnZWRFeHBhbmRJY29uUG9zaXRpb259YCwge1xuICAgIFtgJHtwcmVmaXhDbHN9LWJvcmRlcmxlc3NgXTogIWJvcmRlcmVkLFxuICAgIFtgJHtwcmVmaXhDbHN9LXJ0bGBdOiBkaXJlY3Rpb24gPT09ICdydGwnLFxuICAgIFtgJHtwcmVmaXhDbHN9LWdob3N0YF06ICEhZ2hvc3QsXG4gICAgW2Ake3ByZWZpeENsc30tJHttZXJnZWRTaXplfWBdOiBtZXJnZWRTaXplICE9PSAnbWlkZGxlJ1xuICB9LCBjb2xsYXBzZSA9PT0gbnVsbCB8fCBjb2xsYXBzZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29sbGFwc2UuY2xhc3NOYW1lLCBjbGFzc05hbWUsIHJvb3RDbGFzc05hbWUsIGhhc2hJZCk7XG4gIGNvbnN0IG9wZW5Nb3Rpb24gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGluaXRDb2xsYXBzZU1vdGlvbihyb290UHJlZml4Q2xzKSksIHtcbiAgICBtb3Rpb25BcHBlYXI6IGZhbHNlLFxuICAgIGxlYXZlZENsYXNzTmFtZTogYCR7cHJlZml4Q2xzfS1jb250ZW50LWhpZGRlbmBcbiAgfSk7XG4gIGNvbnN0IGl0ZW1zID0gUmVhY3QudXNlTWVtbygoKSA9PiBjaGlsZHJlbiA/IHRvQXJyYXkoY2hpbGRyZW4pLm1hcCgoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAoKF9hID0gY2hpbGQucHJvcHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNhYmxlZCkge1xuICAgICAgY29uc3Qga2V5ID0gKF9iID0gY2hpbGQua2V5KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBTdHJpbmcoaW5kZXgpO1xuICAgICAgY29uc3Qge1xuICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgY29sbGFwc2libGVcbiAgICAgIH0gPSBjaGlsZC5wcm9wcztcbiAgICAgIGNvbnN0IGNoaWxkUHJvcHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9taXQoY2hpbGQucHJvcHMsIFsnZGlzYWJsZWQnXSkpLCB7XG4gICAgICAgIGtleSxcbiAgICAgICAgY29sbGFwc2libGU6IGNvbGxhcHNpYmxlICE9PSBudWxsICYmIGNvbGxhcHNpYmxlICE9PSB2b2lkIDAgPyBjb2xsYXBzaWJsZSA6IGRpc2FibGVkID8gJ2Rpc2FibGVkJyA6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KSA6IG51bGwsIFtjaGlsZHJlbl0pO1xuICByZXR1cm4gd3JhcENTU1ZhciggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmNDb2xsYXBzZSwgT2JqZWN0LmFzc2lnbih7XG4gICAgcmVmOiByZWYsXG4gICAgb3Blbk1vdGlvbjogb3Blbk1vdGlvblxuICB9LCBvbWl0KHByb3BzLCBbJ3Jvb3RDbGFzc05hbWUnXSksIHtcbiAgICBleHBhbmRJY29uOiByZW5kZXJFeHBhbmRJY29uLFxuICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgIGNsYXNzTmFtZTogY29sbGFwc2VDbGFzc05hbWUsXG4gICAgc3R5bGU6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29sbGFwc2UgPT09IG51bGwgfHwgY29sbGFwc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbGxhcHNlLnN0eWxlKSwgc3R5bGUpXG4gIH0pLCBpdGVtcykpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBDb2xsYXBzZS5kaXNwbGF5TmFtZSA9ICdDb2xsYXBzZSc7XG59XG5leHBvcnQgZGVmYXVsdCBPYmplY3QuYXNzaWduKENvbGxhcHNlLCB7XG4gIFBhbmVsOiBDb2xsYXBzZVBhbmVsXG59KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNpemVDb250ZXh0IGZyb20gJy4uL1NpemVDb250ZXh0JztcbmNvbnN0IHVzZVNpemUgPSBjdXN0b21TaXplID0+IHtcbiAgY29uc3Qgc2l6ZSA9IFJlYWN0LnVzZUNvbnRleHQoU2l6ZUNvbnRleHQpO1xuICBjb25zdCBtZXJnZWRTaXplID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFjdXN0b21TaXplKSB7XG4gICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjdXN0b21TaXplID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGN1c3RvbVNpemUgIT09IG51bGwgJiYgY3VzdG9tU2l6ZSAhPT0gdm9pZCAwID8gY3VzdG9tU2l6ZSA6IHNpemU7XG4gICAgfVxuICAgIGlmIChjdXN0b21TaXplIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgIHJldHVybiBjdXN0b21TaXplKHNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZTtcbiAgfSwgW2N1c3RvbVNpemUsIHNpemVdKTtcbiAgcmV0dXJuIG1lcmdlZFNpemU7XG59O1xuZXhwb3J0IGRlZmF1bHQgdXNlU2l6ZTsiLCJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IENvbGxhcHNlIGZyb20gJy4vQ29sbGFwc2UnO1xuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2U7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IENvbGxhcHNlIH0gZnJvbSBcImFudGRcIjtcclxuXHJcbmNvbnN0IFJpZGxlcyA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBbYW5zd2VyLCBzZXRBbnN3ZXJdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEFuc3dlcigpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGNvbnN0IGdldEFuc3dlciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBcImh0dHBzOi8vYXBpLmFwaS1uaW5qYXMuY29tL3YxL3JpZGRsZXNcIjtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAgIHNldEFuc3dlcihkYXRhWzBdKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwb2RhY2kgaXogemFnb25ldGtpXCIsIGRhdGEpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vdWJhY2VuaSBhbnRkIGRvZGF0YWsgZGEgYmkgc2UgcG9qYXZpbyBvZGdvdm9yXHJcbiAgICBjb25zdCB0ZXh0ID0gYW5zd2VyLmFuc3dlclxyXG5cclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyaXZpYVwiID5cclxuICAgICAgICAgICAgPGgyPlJpZGRsZXM8L2gyPlxyXG4gICAgICAgICAgICA8aDM+e2Fuc3dlci50aXRsZX08L2gzPlxyXG4gICAgICAgICAgICB7LyogPHNwYW4+e2Fuc3dlci5haXJkYXRlfTwvc3Bhbj4gKi99XHJcbiAgICAgICAgICAgIDxDb2xsYXBzZVxyXG5cclxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXHJcbiAgICAgICAgICAgICAgICBpdGVtcz17W3tcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zd2VyXCI+e2Fuc3dlci5xdWVzdGlvbn08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnNcIj57dGV4dH08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XX0gLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBSaWRsZXM7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcblxyXG5cclxuXHJcbmNvbnN0IENhdFByb2IgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtqb2tlcywgc2V0Sm9rZXNdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW3B1bmFwaSwgc2V0UHVuYXBpXSA9IHVzZVN0YXRlKFtdKTtcclxuICBcclxuICAgIFxyXG4gXHJcblxyXG5cclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEpva2VzKCk7XHJcbiAgICAgICAgZ2V0UHVuYXBpKCk7XHJcbiAgICAgICBcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICBjb25zdCBnZXRKb2tlcyA9IGFzeW5jICgpID0+IHtcclxuICAgICBcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB1cmwgPSBcImh0dHBzOi8veWVzbm8ud3RmL2FwaVwiO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJhbmR1bSBzYWxhXCIsIGRhdGEpO1xyXG4gICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgc2V0Sm9rZXMoZGF0YSk7XHJcbiAgICAgICAgIFxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGdldFB1bmFwaSA9IGFzeW5jICgpID0+IHtcclxuICAgICBcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB1cmwgPSBcImh0dHBzOi8vd3d3LnB1bmFwaS5yZXN0L2FwaS9wdW5cIjtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJhbmRvbSBwdW5hcGlcIiwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICBzZXRQdW5hcGkoZGF0YSk7XHJcbiAgICAgICAgIFxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvL2tyYWogYXhpb3MgbWV0b2RlXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cImpva2VzTWFpblwiPlxyXG4gICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRoID5cclxuICAgICAgICAgICAgICAgICAgICAgICBSYW5kb20gR0lGXHJcbiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtqb2tlcy5pbWFnZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJvcmRlckdpZlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2pva2VzLmFuc3dlcn08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInB1blwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQdW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB7cHVuYXBpLnB1bn1cclxuICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgXHJcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgIFxyXG4gICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcblxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IENhdFByb2I7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcblxyXG5cclxuXHJcbmNvbnN0IERhZEpva2VzID0gKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgXHJcbiAgICBjb25zdCBbZmFjdHMsIHNldEZhY3RzXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIFxyXG4gXHJcblxyXG5cclxuXHJcbiBcclxuICAgIFxyXG4gICBcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEZhY3RzKCk7XHJcbiAgICB9LFtdKVxyXG5cclxuICAgIGNvbnN0IGdldEZhY3RzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHVybCA9ICdodHRwczovL2FwaS5hcGktbmluamFzLmNvbS92MS9kYWRqb2tlcz9saW1pdD0yJ1xyXG4gICAgICBcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJhbmR1bSB0YXRpbmUgc2FsZVwiLCBkYXRhKTtcclxuICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIHNldEZhY3RzKGRhdGEpO1xyXG4gICAgICAgICBcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgc2V0RXJyb3IoZXJyKTtcclxuICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcblxyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cImRhZEpva2VzXCI+XHJcbiAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICA8dGggPlxyXG4gICAgICAgICAgICAgICAgICAgICAgRGFkIGpva2VzXHJcbiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICB7ZmFjdHMubWFwKChmYWN0KSA9PiAoXHJcbiAgICAgICAgICAgICAgICA8dGJvZHkga2V5PXtmYWN0Lmpva2V9PlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGRcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYm9yZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZmFjdC5qb2tlfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICBcclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICApKX1cclxuICAgICBcclxuICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG5cclxufVxyXG5leHBvcnQgZGVmYXVsdCBEYWRKb2tlczsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgcmFuZG9tTnVtYmVyQmV0d2VlbiB9IGZyb20gXCJAbXVpL3gtZGF0YS1ncmlkL3V0aWxzL3V0aWxzXCI7XHJcblxyXG5cclxuXHJcbmNvbnN0IENodWtOb3JyaXMgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuXHJcbiAgICBjb25zdCBbZmFjdHMsIHNldEZhY3RzXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtyb2JvdCwgc2V0Um9ib3RdID0gdXNlU3RhdGUoW10pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0RmFjdHMoKTtcclxuICAgICAgICBnZXRSb2JvdCgpO1xyXG4gICAgfSwgW10pXHJcblxyXG4gICAgY29uc3QgZ2V0RmFjdHMgPSBhc3luYyAoKSA9PiB7XHJcblxyXG5cclxuXHJcbiAgICAgICAgY29uc3QgdXJsID0gXCJodHRwczovL2FwaS5jaHVja25vcnJpcy5pby9qb2tlcy9yYW5kb21cIlxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2h1ayBub3JyaXMgc2FsZVwiLCBkYXRhKTtcclxuXHJcblxyXG4gICAgICAgICAgICBzZXRGYWN0cyhkYXRhKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG5hbWUgPSBNYXRoLnJhbmRvbSgpO1xyXG5cclxuICAgIGNvbnN0IGdldFJvYm90ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL3JvYm9oYXNoLm9yZy9zZXRfc2V0Mi8ke25hbWV9LnBuZ2BcclxuXHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyb2JvdCByYW5kdW0gc2xpa2VcIiwgbmFtZSlcclxuICAgICAgICAgICAgc2V0Um9ib3QodXJsKVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG5cclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwiZGFkSm9rZXNcIj5cclxuICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjb2xTcGFuPXsyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENodWsgTm9ycmlzIGpva2VzIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG5cclxuICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkID57ZmFjdHMudmFsdWV9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiYm9yZGVyQ2h1a1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlZDoge2ZhY3RzLmNyZWF0ZWRfYXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtyb2JvdH0+PC9pbWc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG5cclxuICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxuXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgQ2h1a05vcnJpczsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgQ29sbGFwc2UgfSBmcm9tIFwiYW50ZFwiO1xyXG5cclxuXHJcblxyXG5cclxuY29uc3QgSm9rZXNSYW5kb20gPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuIFxyXG4gICAgY29uc3QgW3JhbmR1bUpva2VzLCBzZXRSYW5kdW1Kb2tlc10gPSB1c2VTdGF0ZShbXSk7XHJcbiAgIFxyXG4gIFxyXG4gICAgXHJcbiBcclxuXHJcbiAgICBcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgXHJcbiAgICAgICAgZ2V0UmFuZHVtSm9rZXMoKTtcclxuICAgICAgICBcclxuICAgICAgIFxyXG4gICAgfSwgW10pO1xyXG5cclxuICBcclxuXHJcbiAgICBjb25zdCBnZXRSYW5kdW1Kb2tlcyA9IGFzeW5jICgpID0+IHtcclxuICAgICBcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB1cmwgPSBcImh0dHBzOi8vdjIuam9rZWFwaS5kZXYvam9rZS9Bbnk/c2FmZS1tb2RlXCI7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmFuZG9tIGpva2VzXCIsIGRhdGEpO1xyXG4gICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgc2V0UmFuZHVtSm9rZXMoZGF0YSk7XHJcbiAgICAgICAgIFxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIFxyXG4gICBcclxuICAgIFxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgdGV4dCA9IHJhbmR1bUpva2VzLmRlbGl2ZXJ5XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgIFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiam9rZU1haW5cIiA+XHJcbiAgICAgICAgICAgIDxoMz5Kb2tlIDwvaDM+XHJcbiAgICAgICAgICAgIDxoMz5DYXRlZ29yeToge3JhbmR1bUpva2VzLmNhdGVnb3J5fTwvaDM+XHJcbiAgICAgICAgICAgIDxDb2xsYXBzZVxyXG5cclxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXHJcbiAgICAgICAgICAgICAgICBpdGVtcz17W3tcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogPHAgY2xhc3NOYW1lPVwiam9rZUFuc3dlclwiPntyYW5kdW1Kb2tlcy5zZXR1cH0gIHtyYW5kdW1Kb2tlcy5qb2tlfTwvcD4sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IDxwIGNsYXNzTmFtZT1cImpva2VBbnNcIj57dGV4dH08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XX0gLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgIFxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG5cclxufVxyXG5leHBvcnQgZGVmYXVsdCBKb2tlc1JhbmRvbTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgQ29sbGFwc2UgfSBmcm9tIFwiYW50ZFwiO1xyXG5cclxuXHJcblxyXG5cclxuY29uc3QgSm9rZXNPZmZpY2lhbCA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW2pva2VzLCBzZXRKb2tlc10gPSB1c2VTdGF0ZShbXSk7XHJcbiAgIFxyXG4gICBcclxuICBcclxuICAgIFxyXG4gXHJcblxyXG4gICAgXHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnZXRKb2tlcygpO1xyXG4gICAgICBcclxuICAgICAgICBcclxuICAgICAgIFxyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGNvbnN0IGdldEpva2VzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHVybCA9IFwiaHR0cHM6Ly9vZmZpY2lhbC1qb2tlLWFwaS5hcHBzcG90LmNvbS9yYW5kb21fam9rZVwiO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgIFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9maWNpYWwgam9rZXNcIiwgZGF0YSk7XHJcbiAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICBzZXRKb2tlcyhkYXRhKTtcclxuICAgICAgICAgXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICBcclxuXHJcbiAgICBcclxuICAgXHJcbiAgICBcclxuXHJcblxyXG5cclxuY29uc3QgdGV4dCA9IGpva2VzLnB1bmNobGluZVxyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJqb2tlTWFpblwiID5cclxuICAgICAgICAgICAgPGgzPlJhbmRvbSBKb2tlPC9oMz5cclxuICAgICAgICAgICAgPENvbGxhcHNlXHJcblxyXG4gICAgICAgICAgICAgICAgc2l6ZT1cImxhcmdlXCJcclxuICAgICAgICAgICAgICAgIGl0ZW1zPXtbe1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiA8cCBjbGFzc05hbWU9XCJqb2tlQW5zd2VyXCI+e2pva2VzLnNldHVwfTwvcD4sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IDxwIGNsYXNzTmFtZT1cImpva2VBbnNcIj57dGV4dH08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XX0gLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgIFxyXG4gICAgICAgXHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcblxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEpva2VzT2ZmaWNpYWw7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgUmFuZG9tSm9rZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbam9rZXMsIHNldEpva2VzXSA9IHVzZVN0YXRlKFtdKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnZXRKb2tlcygpO1xyXG4gICAgfSwgW10pO1xyXG4gIFxyXG5cclxuICAgIGNvbnN0IGdldEpva2VzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5hcGktbmluamFzLmNvbS92MS9qb2tlcz9saW1pdD0zYDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGE7XHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlenVsdGF0IGdyYWRvdmFcIiwgZGF0YSlcclxuXHJcbiAgICAgICAgICAgIHNldEpva2VzKGRhdGEpO1xyXG4gICAgICAgICBcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgc2V0RXJyb3IoZXJyKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG5cclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwiZGFkSm9rZXNcIj5cclxuICAgICAgICAgICAgICAgIDx0aGVhZCA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoID5cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRoID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJhbmRvbSBKb2tlczwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgPC90aGVhZD5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHtqb2tlcy5tYXAoKGRhdGFPYmopID0+IChcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dGJvZHkga2V5PXtkYXRhT2JqLmpva2V9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJib3JkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGF0YU9iai5qb2tlfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cclxuXHJcbiAgICAgICAgICAgICAgICApKX1cclxuXHJcbiAgICAgICAgICAgIDwvdGFibGUgPlxyXG4gICAgICAgICBcclxuICAgICAgICA8Lz5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFJhbmRvbUpva2U7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcblxyXG5pbXBvcnQgWWVzTm9HaWYgZnJvbSBcIi4vWWVzTm9HaWZcIjtcclxuaW1wb3J0IERhZEpva2VzIGZyb20gXCIuL0RhZEpva2VzXCI7XHJcbmltcG9ydCBDaHVrTm9ycmlzIGZyb20gXCIuL0NodWtOb3JyaXNcIjtcclxuaW1wb3J0IEpva2VzUmFuZG9tIGZyb20gXCIuL0pva2VzUmFuZG9tXCI7XHJcbmltcG9ydCBKb2tlc09mZmljaWFsIGZyb20gXCIuL0pva2VzT2ZmaWNpYWxcIjtcclxuaW1wb3J0IFJhbmRvbUpva2UgZnJvbSBcIi4vUmFuZG9tSm9rZVwiO1xyXG5cclxuXHJcblxyXG5jb25zdCBQYXBpckthbWVuID0gKCkgPT4ge1xyXG5cclxuXHJcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xyXG5cclxuXHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiam9rZXNUZXh0XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIHs8Sm9rZXNSYW5kb20gLz59XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB7PEpva2VzT2ZmaWNpYWwgLz59XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB7PFllc05vR2lmIC8+fVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIHs8RGFkSm9rZXMgLz59XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHs8UmFuZG9tSm9rZSAvPn1cclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgezxDaHVrTm9ycmlzIC8+fVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcblxyXG5cclxuICAgICAgICA8Lz5cclxuXHJcbiAgICApXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUGFwaXJLYW1lbjsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgQ29sbGFwc2UgfSBmcm9tIFwiYW50ZFwiO1xyXG5pbXBvcnQgTG9hZGVyIGZyb20gXCIuLi9Mb2FkZXJcIjtcclxuXHJcblxyXG5cclxuY29uc3QgVHJpdmlhID0gKHByb3BzKSA9PiB7XHJcblxyXG4gICAgY29uc3QgW2Fuc3dlciwgc2V0QW5zd2VyXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XHJcblxyXG5cclxuICAgIGNvbnN0IHBhcmFtcyA9IHVzZVBhcmFtcygpO1xyXG4gICAgY29uc3QgdHJpdmlhQ2F0ID0gcGFyYW1zLnRyaXZpYUNhdDtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEFuc3dlcigpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGNvbnN0IGdldEFuc3dlciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuYXBpLW5pbmphcy5jb20vdjEvdHJpdmlhP2NhdGVnb3J5PWFydGxpdGVyYXR1cmVgO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAnWC1BcGktS2V5JzogJ0QrZFlqQ3hEU201ZkVrSXF5b0NJZUE9PWMyR3Z1alhUaUFiTUlIMDUnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YVswXTtcclxuICAgICAgICAgICAgc2V0QW5zd2VyKGRhdGEpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInBvZGFjaSBpeiAgdHJpdmlhXCIsIGRhdGEpO1xyXG4gICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgc2V0RXJyb3IoZXJyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvL3ViYWNlbmkgYW50ZCBkb2RhdGFrIGRhIGJpIHNlIHBvamF2aW8gb2Rnb3ZvclxyXG4gICAgY29uc3QgdGV4dCA9IGFuc3dlci5hbnN3ZXJcclxuXHJcbiAgICBpZiAoaXNMb2FkaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cml2aWFcIj5cclxuICAgICAgICAgICAgIDxMb2FkZXIgLz4gICBcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfSBcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCIgPlxyXG4gICAgICAgICAgICA8aDM+QXJ0ICYgTGl0ZXJhdHVyZTwvaDM+XHJcbiAgICAgICAgICAgIDxwPnthbnN3ZXIudGl0bGV9PC9wPlxyXG4gICAgICBcclxuICAgICAgICAgICAgPENvbGxhcHNlXHJcblxyXG4gICAgICAgICAgICAgICAgc2l6ZT1cImxhcmdlXCJcclxuICAgICAgICAgICAgICAgIGl0ZW1zPXtbe1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnN3ZXJcIj57YW5zd2VyLnF1ZXN0aW9ufTwvcD4sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IDxwIGNsYXNzTmFtZT1cInRyaXZpYUFuc1wiPnt0ZXh0fTwvcD4sXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0Fycm93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH1dfSAvPlxyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBUcml2aWE7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IENvbGxhcHNlIH0gZnJvbSBcImFudGRcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiLi4vTG9hZGVyXCI7XHJcblxyXG5cclxuXHJcbmNvbnN0IFRyaXZpYSA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIGNvbnN0IFthbnN3ZXIsIHNldEFuc3dlcl0gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG5cclxuXHJcbiAgICBjb25zdCBwYXJhbXMgPSB1c2VQYXJhbXMoKTtcclxuICAgIGNvbnN0IHRyaXZpYUNhdCA9IHBhcmFtcy50cml2aWFDYXQ7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnZXRBbnN3ZXIoKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICBjb25zdCBnZXRBbnN3ZXIgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmFwaS1uaW5qYXMuY29tL3YxL3RyaXZpYT9jYXRlZ29yeT1zY2llbmNlbmF0dXJlYDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGFbMF07XHJcbiAgICAgICAgICAgIHNldEFuc3dlcihkYXRhKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwb2RhY2kgaXogIHRyaXZpYVwiLCBkYXRhKTtcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy91YmFjZW5pIGFudGQgZG9kYXRhayBkYSBiaSBzZSBwb2phdmlvIG9kZ292b3JcclxuICAgIGNvbnN0IHRleHQgPSBhbnN3ZXIuYW5zd2VyXHJcblxyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCI+XHJcbiAgICAgICAgICAgICA8TG9hZGVyIC8+ICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH0gXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyaXZpYVwiID5cclxuICAgICAgICAgICAgPGgzPlNjaWVuY2UgJiBOYXR1cmU8L2gzPlxyXG4gICAgICAgICAgICA8cD57YW5zd2VyLnRpdGxlfTwvcD5cclxuICAgICAgXHJcbiAgICAgICAgICAgIDxDb2xsYXBzZVxyXG5cclxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXHJcbiAgICAgICAgICAgICAgICBpdGVtcz17W3tcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zd2VyXCI+e2Fuc3dlci5xdWVzdGlvbn08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnNcIj57dGV4dH08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XX0gLz5cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgVHJpdmlhOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgeyBDb2xsYXBzZSB9IGZyb20gXCJhbnRkXCI7XHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIi4uL0xvYWRlclwiO1xyXG5cclxuXHJcblxyXG5jb25zdCBUcml2aWEgPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBbYW5zd2VyLCBzZXRBbnN3ZXJdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcblxyXG4gICAgY29uc3QgcGFyYW1zID0gdXNlUGFyYW1zKCk7XHJcbiAgICBcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEFuc3dlcigpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGNvbnN0IGdldEFuc3dlciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuYXBpLW5pbmphcy5jb20vdjEvdHJpdmlhP2NhdGVnb3J5PWdlbmVyYWxgO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAnWC1BcGktS2V5JzogJ0QrZFlqQ3hEU201ZkVrSXF5b0NJZUE9PWMyR3Z1alhUaUFiTUlIMDUnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YVswXTtcclxuICAgICAgICAgICAgc2V0QW5zd2VyKGRhdGEpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInBvZGFjaSBpeiAgdHJpdmlhIGdlbmVyYWxcIiwgZGF0YSk7XHJcbiAgICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vdWJhY2VuaSBhbnRkIGRvZGF0YWsgZGEgYmkgc2UgcG9qYXZpbyBvZGdvdm9yXHJcbiAgICBjb25zdCB0ZXh0ID0gYW5zd2VyLmFuc3dlclxyXG5cclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyaXZpYVwiPlxyXG4gICAgICAgICAgICAgPExvYWRlciAvPiAgIFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9IFxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cml2aWFcIiA+XHJcbiAgICAgICAgICAgIDxoMz5HZW5lcmFsPC9oMz5cclxuICAgICAgICAgICAgPHA+e2Fuc3dlci50aXRsZX08L3A+XHJcbiAgICAgIFxyXG4gICAgICAgICAgICA8Q29sbGFwc2VcclxuXHJcbiAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxyXG4gICAgICAgICAgICAgICAgaXRlbXM9e1t7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IDxwIGNsYXNzTmFtZT1cInRyaXZpYUFuc3dlclwiPnthbnN3ZXIucXVlc3Rpb259PC9wPixcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zXCI+e3RleHR9PC9wPixcclxuICAgICAgICAgICAgICAgICAgICBzaG93QXJyb3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfV19IC8+XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFRyaXZpYTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgQ29sbGFwc2UgfSBmcm9tIFwiYW50ZFwiO1xyXG5pbXBvcnQgTG9hZGVyIGZyb20gXCIuLi9Mb2FkZXJcIjtcclxuXHJcblxyXG5cclxuY29uc3QgVHJpdmlhID0gKHByb3BzKSA9PiB7XHJcblxyXG4gICAgY29uc3QgW2Fuc3dlciwgc2V0QW5zd2VyXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XHJcblxyXG5cclxuICAgIGNvbnN0IHBhcmFtcyA9IHVzZVBhcmFtcygpO1xyXG4gICAgY29uc3QgdHJpdmlhQ2F0ID0gcGFyYW1zLnRyaXZpYUNhdDtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEFuc3dlcigpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGNvbnN0IGdldEFuc3dlciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuYXBpLW5pbmphcy5jb20vdjEvdHJpdmlhP2NhdGVnb3J5PWZvb2Rkcmlua2A7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdYLUFwaS1LZXknOiAnRCtkWWpDeERTbTVmRWtJcXlvQ0llQT09YzJHdnVqWFRpQWJNSUgwNSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhWzBdO1xyXG4gICAgICAgICAgICBzZXRBbnN3ZXIoZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0ZXh0ID0gYW5zd2VyLmFuc3dlclxyXG5cclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyaXZpYVwiPlxyXG4gICAgICAgICAgICAgPExvYWRlciAvPiAgIFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9IFxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICA8PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCIgPlxyXG4gICAgICAgICAgICA8aDM+Rm9vZCAmIERyaW5rPC9oMz5cclxuICAgICAgICAgICAgPHA+e2Fuc3dlci50aXRsZX08L3A+XHJcbiAgICAgIFxyXG4gICAgICAgICAgICA8Q29sbGFwc2VcclxuXHJcbiAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxyXG4gICAgICAgICAgICAgICAgaXRlbXM9e1t7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IDxwIGNsYXNzTmFtZT1cInRyaXZpYUFuc3dlclwiPnthbnN3ZXIucXVlc3Rpb259PC9wPixcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zXCI+e3RleHR9PC9wPixcclxuICAgICAgICAgICAgICAgICAgICBzaG93QXJyb3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfV19IC8+XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgIDwvZGl2PlxyXG4gXHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgVHJpdmlhOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgeyBDb2xsYXBzZSB9IGZyb20gXCJhbnRkXCI7XHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIi4uL0xvYWRlclwiO1xyXG5cclxuXHJcblxyXG5jb25zdCBUcml2aWEgPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBbYW5zd2VyLCBzZXRBbnN3ZXJdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcblxyXG4gICAgY29uc3QgcGFyYW1zID0gdXNlUGFyYW1zKCk7XHJcbiAgICBjb25zdCB0cml2aWFDYXQgPSBwYXJhbXMudHJpdmlhQ2F0O1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0QW5zd2VyKCk7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgY29uc3QgZ2V0QW5zd2VyID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5hcGktbmluamFzLmNvbS92MS90cml2aWE/Y2F0ZWdvcnk9cGVvcGxlcGxhY2VzYDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGFbMF07XHJcbiAgICAgICAgICAgIHNldEFuc3dlcihkYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRleHQgPSBhbnN3ZXIuYW5zd2VyXHJcblxyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCI+XHJcbiAgICAgICAgICAgICA8TG9hZGVyIC8+ICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH0gXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgIDw+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cml2aWFcIiA+XHJcbiAgICAgICAgICAgIDxoMz5QZW9wbGUgJiBQbGFjZTwvaDM+XHJcbiAgICAgICAgICAgIDxwPnthbnN3ZXIudGl0bGV9PC9wPlxyXG4gICAgICBcclxuICAgICAgICAgICAgPENvbGxhcHNlXHJcblxyXG4gICAgICAgICAgICAgICAgc2l6ZT1cImxhcmdlXCJcclxuICAgICAgICAgICAgICAgIGl0ZW1zPXtbe1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnN3ZXJcIj57YW5zd2VyLnF1ZXN0aW9ufTwvcD4sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IDxwIGNsYXNzTmFtZT1cInRyaXZpYUFuc1wiPnt0ZXh0fTwvcD4sXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0Fycm93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH1dfSAvPlxyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICA8L2Rpdj5cclxuIFxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFRyaXZpYTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgQ29sbGFwc2UgfSBmcm9tIFwiYW50ZFwiO1xyXG5pbXBvcnQgTG9hZGVyIGZyb20gXCIuLi9Mb2FkZXJcIjtcclxuXHJcblxyXG5cclxuY29uc3QgVHJpdmlhID0gKHByb3BzKSA9PiB7XHJcblxyXG4gICAgY29uc3QgW2Fuc3dlciwgc2V0QW5zd2VyXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XHJcblxyXG5cclxuICAgIGNvbnN0IHBhcmFtcyA9IHVzZVBhcmFtcygpO1xyXG4gICAgY29uc3QgdHJpdmlhQ2F0ID0gcGFyYW1zLnRyaXZpYUNhdDtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEFuc3dlcigpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGNvbnN0IGdldEFuc3dlciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuYXBpLW5pbmphcy5jb20vdjEvdHJpdmlhP2NhdGVnb3J5PWhpc3Rvcnlob2xpZGF5c2A7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdYLUFwaS1LZXknOiAnRCtkWWpDeERTbTVmRWtJcXlvQ0llQT09YzJHdnVqWFRpQWJNSUgwNSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhWzBdO1xyXG4gICAgICAgICAgICBzZXRBbnN3ZXIoZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0ZXh0ID0gYW5zd2VyLmFuc3dlclxyXG5cclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyaXZpYVwiPlxyXG4gICAgICAgICAgICAgPExvYWRlciAvPiAgIFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9IFxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICA8PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCIgPlxyXG4gICAgICAgICAgICA8aDM+SGlzdG9yeSAmIEhvbGlkYXlzPC9oMz5cclxuICAgICAgICAgICAgPHA+e2Fuc3dlci50aXRsZX08L3A+XHJcbiAgICAgIFxyXG4gICAgICAgICAgICA8Q29sbGFwc2VcclxuXHJcbiAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxyXG4gICAgICAgICAgICAgICAgaXRlbXM9e1t7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IDxwIGNsYXNzTmFtZT1cInRyaXZpYUFuc3dlclwiPnthbnN3ZXIucXVlc3Rpb259PC9wPixcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zXCI+e3RleHR9PC9wPixcclxuICAgICAgICAgICAgICAgICAgICBzaG93QXJyb3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfV19IC8+XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgIDwvZGl2PlxyXG4gXHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgVHJpdmlhOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgeyBDb2xsYXBzZSB9IGZyb20gXCJhbnRkXCI7XHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIi4uL0xvYWRlclwiO1xyXG5cclxuXHJcblxyXG5jb25zdCBUcml2aWEgPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBbYW5zd2VyLCBzZXRBbnN3ZXJdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcblxyXG4gICAgY29uc3QgcGFyYW1zID0gdXNlUGFyYW1zKCk7XHJcbiAgICBjb25zdCB0cml2aWFDYXQgPSBwYXJhbXMudHJpdmlhQ2F0O1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0QW5zd2VyKCk7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgY29uc3QgZ2V0QW5zd2VyID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5hcGktbmluamFzLmNvbS92MS90cml2aWE/Y2F0ZWdvcnk9Z2VvZ3JhcGh5YDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGFbMF07XHJcbiAgICAgICAgICAgIHNldEFuc3dlcihkYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRleHQgPSBhbnN3ZXIuYW5zd2VyXHJcblxyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCI+XHJcbiAgICAgICAgICAgICA8TG9hZGVyIC8+ICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH0gXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgIDw+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cml2aWFcIiA+XHJcbiAgICAgICAgICAgIDxoMz5HZW9ncmFwaHk8L2gzPlxyXG4gICAgICAgICAgICA8cD57YW5zd2VyLnRpdGxlfTwvcD5cclxuICAgICAgXHJcbiAgICAgICAgICAgIDxDb2xsYXBzZVxyXG5cclxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXHJcbiAgICAgICAgICAgICAgICBpdGVtcz17W3tcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zd2VyXCI+e2Fuc3dlci5xdWVzdGlvbn08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnNcIj57dGV4dH08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XX0gLz5cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+XHJcbiBcclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBUcml2aWE7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IENvbGxhcHNlIH0gZnJvbSBcImFudGRcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiLi4vTG9hZGVyXCI7XHJcblxyXG5cclxuXHJcbmNvbnN0IFRyaXZpYSA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIGNvbnN0IFthbnN3ZXIsIHNldEFuc3dlcl0gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG5cclxuXHJcbiAgICBjb25zdCBwYXJhbXMgPSB1c2VQYXJhbXMoKTtcclxuICAgIGNvbnN0IHRyaXZpYUNhdCA9IHBhcmFtcy50cml2aWFDYXQ7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnZXRBbnN3ZXIoKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICBjb25zdCBnZXRBbnN3ZXIgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmFwaS1uaW5qYXMuY29tL3YxL3RyaXZpYT9jYXRlZ29yeT1lbnRlcnRhaW5tZW50YDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGFbMF07XHJcbiAgICAgICAgICAgIHNldEFuc3dlcihkYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRleHQgPSBhbnN3ZXIuYW5zd2VyXHJcblxyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCI+XHJcbiAgICAgICAgICAgICA8TG9hZGVyIC8+ICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH0gXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgIDw+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cml2aWFcIiA+XHJcbiAgICAgICAgICAgIDxoMz5FbnRlcnRhaW5tZW50PC9oMz5cclxuICAgICAgICAgICAgPHA+e2Fuc3dlci50aXRsZX08L3A+XHJcbiAgICAgIFxyXG4gICAgICAgICAgICA8Q29sbGFwc2VcclxuXHJcbiAgICAgICAgICAgICAgICBzaXplPVwibGFyZ2VcIlxyXG4gICAgICAgICAgICAgICAgaXRlbXM9e1t7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IDxwIGNsYXNzTmFtZT1cInRyaXZpYUFuc3dlclwiPnthbnN3ZXIucXVlc3Rpb259PC9wPixcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zXCI+e3RleHR9PC9wPixcclxuICAgICAgICAgICAgICAgICAgICBzaG93QXJyb3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfV19IC8+XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgIDwvZGl2PlxyXG4gXHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgVHJpdmlhOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgeyBDb2xsYXBzZSB9IGZyb20gXCJhbnRkXCI7XHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIi4uL0xvYWRlclwiO1xyXG5cclxuXHJcblxyXG5jb25zdCBUcml2aWEgPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBbYW5zd2VyLCBzZXRBbnN3ZXJdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcblxyXG4gICAgY29uc3QgcGFyYW1zID0gdXNlUGFyYW1zKCk7XHJcbiAgICBjb25zdCB0cml2aWFDYXQgPSBwYXJhbXMudHJpdmlhQ2F0O1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0QW5zd2VyKCk7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgY29uc3QgZ2V0QW5zd2VyID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5hcGktbmluamFzLmNvbS92MS90cml2aWE/Y2F0ZWdvcnk9dG95c2dhbWVzYDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGFbMF07XHJcbiAgICAgICAgICAgIHNldEFuc3dlcihkYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRleHQgPSBhbnN3ZXIuYW5zd2VyXHJcblxyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCI+XHJcbiAgICAgICAgICAgICA8TG9hZGVyIC8+ICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH0gXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgIDw+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cml2aWFcIiA+XHJcbiAgICAgICAgICAgIDxoMz5Ub3lzICYgR2FtZXM8L2gzPlxyXG4gICAgICAgICAgICA8cD57YW5zd2VyLnRpdGxlfTwvcD5cclxuICAgICAgXHJcbiAgICAgICAgICAgIDxDb2xsYXBzZVxyXG5cclxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXHJcbiAgICAgICAgICAgICAgICBpdGVtcz17W3tcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zd2VyXCI+e2Fuc3dlci5xdWVzdGlvbn08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnNcIj57dGV4dH08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XX0gLz5cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+XHJcbiBcclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBUcml2aWE7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IENvbGxhcHNlIH0gZnJvbSBcImFudGRcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiLi4vTG9hZGVyXCI7XHJcblxyXG5cclxuXHJcbmNvbnN0IFRyaXZpYSA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIGNvbnN0IFthbnN3ZXIsIHNldEFuc3dlcl0gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG5cclxuXHJcbiAgICBjb25zdCBwYXJhbXMgPSB1c2VQYXJhbXMoKTtcclxuICAgIGNvbnN0IHRyaXZpYUNhdCA9IHBhcmFtcy50cml2aWFDYXQ7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnZXRBbnN3ZXIoKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICBjb25zdCBnZXRBbnN3ZXIgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmFwaS1uaW5qYXMuY29tL3YxL3RyaXZpYT9jYXRlZ29yeT1tdXNpY2A7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdYLUFwaS1LZXknOiAnRCtkWWpDeERTbTVmRWtJcXlvQ0llQT09YzJHdnVqWFRpQWJNSUgwNSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhWzBdO1xyXG4gICAgICAgICAgICBzZXRBbnN3ZXIoZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0ZXh0ID0gYW5zd2VyLmFuc3dlclxyXG5cclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyaXZpYVwiPlxyXG4gICAgICAgICAgICAgPExvYWRlciAvPiAgIFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9IFxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICA8PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCIgPlxyXG4gICAgICAgICAgICA8aDM+TXVzaWM8L2gzPlxyXG4gICAgICAgICAgICA8cD57YW5zd2VyLnRpdGxlfTwvcD5cclxuICAgICAgXHJcbiAgICAgICAgICAgIDxDb2xsYXBzZVxyXG5cclxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXHJcbiAgICAgICAgICAgICAgICBpdGVtcz17W3tcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zd2VyXCI+e2Fuc3dlci5xdWVzdGlvbn08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnNcIj57dGV4dH08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XX0gLz5cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+XHJcbiBcclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBUcml2aWE7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IENvbGxhcHNlIH0gZnJvbSBcImFudGRcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiLi4vTG9hZGVyXCI7XHJcblxyXG5cclxuXHJcbmNvbnN0IFRyaXZpYSA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIGNvbnN0IFthbnN3ZXIsIHNldEFuc3dlcl0gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xyXG5cclxuXHJcbiAgICBjb25zdCBwYXJhbXMgPSB1c2VQYXJhbXMoKTtcclxuICAgIGNvbnN0IHRyaXZpYUNhdCA9IHBhcmFtcy50cml2aWFDYXQ7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnZXRBbnN3ZXIoKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICBjb25zdCBnZXRBbnN3ZXIgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmFwaS1uaW5qYXMuY29tL3YxL3RyaXZpYT9jYXRlZ29yeT1sYW5ndWFnZWA7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdYLUFwaS1LZXknOiAnRCtkWWpDeERTbTVmRWtJcXlvQ0llQT09YzJHdnVqWFRpQWJNSUgwNSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhWzBdO1xyXG4gICAgICAgICAgICBzZXRBbnN3ZXIoZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0ZXh0ID0gYW5zd2VyLmFuc3dlclxyXG5cclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyaXZpYVwiPlxyXG4gICAgICAgICAgICAgPExvYWRlciAvPiAgIFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9IFxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICA8PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCIgPlxyXG4gICAgICAgICAgICA8aDM+TGFuZ3VhZ2U8L2gzPlxyXG4gICAgICAgICAgICA8cD57YW5zd2VyLnRpdGxlfTwvcD5cclxuICAgICAgXHJcbiAgICAgICAgICAgIDxDb2xsYXBzZVxyXG5cclxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXHJcbiAgICAgICAgICAgICAgICBpdGVtcz17W3tcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zd2VyXCI+e2Fuc3dlci5xdWVzdGlvbn08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnNcIj57dGV4dH08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XX0gLz5cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+XHJcbiBcclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBUcml2aWE7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IENvbGxhcHNlIH0gZnJvbSBcImFudGRcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiLi4vTG9hZGVyXCI7XHJcblxyXG5cclxuXHJcbmNvbnN0IFRyaXZpYSA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBbYW5zd2VyLCBzZXRBbnN3ZXJdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcblxyXG4gICBcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEFuc3dlcigpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGNvbnN0IGdldEFuc3dlciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuYXBpLW5pbmphcy5jb20vdjEvdHJpdmlhP2NhdGVnb3J5PXJlbGlnaW9ubXl0aG9sb2d5YDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleSc6ICdEK2RZakN4RFNtNWZFa0lxeW9DSWVBPT1jMkd2dWpYVGlBYk1JSDA1J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLmRhdGFbMF07XHJcbiAgICAgICAgICAgIHNldEFuc3dlcihkYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNldEVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRleHQgPSBhbnN3ZXIuYW5zd2VyXHJcblxyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCI+XHJcbiAgICAgICAgICAgICA8TG9hZGVyIC8+ICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH0gXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgIDw+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cml2aWFcIiA+XHJcbiAgICAgICAgICAgIDxoMz5SZWxpZ2lvbiAmIE15dGhvbG9neTwvaDM+XHJcbiAgICAgICAgICAgIDxwPnthbnN3ZXIudGl0bGV9PC9wPlxyXG4gICAgICBcclxuICAgICAgICAgICAgPENvbGxhcHNlXHJcblxyXG4gICAgICAgICAgICAgICAgc2l6ZT1cImxhcmdlXCJcclxuICAgICAgICAgICAgICAgIGl0ZW1zPXtbe1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnN3ZXJcIj57YW5zd2VyLnF1ZXN0aW9ufTwvcD4sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IDxwIGNsYXNzTmFtZT1cInRyaXZpYUFuc1wiPnt0ZXh0fTwvcD4sXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0Fycm93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH1dfSAvPlxyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICA8L2Rpdj5cclxuIFxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFRyaXZpYTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IENvbGxhcHNlIH0gZnJvbSBcImFudGRcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiLi4vTG9hZGVyXCI7XHJcblxyXG5cclxuXHJcbmNvbnN0IFRyaXZpYSA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBbYW5zd2VyLCBzZXRBbnN3ZXJdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuXHJcblxyXG4gICBcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGdldEFuc3dlcigpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGNvbnN0IGdldEFuc3dlciA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuYXBpLW5pbmphcy5jb20vdjEvdHJpdmlhP2NhdGVnb3J5PXNwb3J0c2xlaXN1cmVgO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAnWC1BcGktS2V5JzogJ0QrZFlqQ3hEU201ZkVrSXF5b0NJZUE9PWMyR3Z1alhUaUFiTUlIMDUnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YVswXTtcclxuICAgICAgICAgICAgc2V0QW5zd2VyKGRhdGEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgc2V0RXJyb3IoZXJyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGV4dCA9IGFuc3dlci5hbnN3ZXJcclxuXHJcbiAgICBpZiAoaXNMb2FkaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cml2aWFcIj5cclxuICAgICAgICAgICAgIDxMb2FkZXIgLz4gICBcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfSBcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgPD5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyaXZpYVwiID5cclxuICAgICAgICAgICAgPGgzPlNwb3J0cyAmIExlaXN1cmU8L2gzPlxyXG4gICAgICAgICAgICA8cD57YW5zd2VyLnRpdGxlfTwvcD5cclxuICAgICAgXHJcbiAgICAgICAgICAgIDxDb2xsYXBzZVxyXG5cclxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXHJcbiAgICAgICAgICAgICAgICBpdGVtcz17W3tcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zd2VyXCI+e2Fuc3dlci5xdWVzdGlvbn08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnNcIj57dGV4dH08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XX0gLz5cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+XHJcbiBcclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBUcml2aWE7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcblxyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgeyBDb2xsYXBzZSB9IGZyb20gXCJhbnRkXCI7XHJcbmltcG9ydCBMb2FkZXIgZnJvbSBcIi4uL0xvYWRlclwiO1xyXG5cclxuXHJcblxyXG5jb25zdCBUcml2aWEgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgW2Fuc3dlciwgc2V0QW5zd2VyXSA9IHVzZVN0YXRlKFtdKTtcclxuICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XHJcblxyXG5cclxuICAgXHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBnZXRBbnN3ZXIoKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICBjb25zdCBnZXRBbnN3ZXIgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmFwaS1uaW5qYXMuY29tL3YxL3RyaXZpYT9jYXRlZ29yeT1tYXRoZW1hdGljc2A7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdYLUFwaS1LZXknOiAnRCtkWWpDeERTbTVmRWtJcXlvQ0llQT09YzJHdnVqWFRpQWJNSUgwNSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5kYXRhWzBdO1xyXG4gICAgICAgICAgICBzZXRBbnN3ZXIoZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBzZXRFcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0ZXh0ID0gYW5zd2VyLmFuc3dlclxyXG5cclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyaXZpYVwiPlxyXG4gICAgICAgICAgICAgPExvYWRlciAvPiAgIFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9IFxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICA8PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJpdmlhXCIgPlxyXG4gICAgICAgICAgICA8aDM+TWF0aGVtYXRpY3M8L2gzPlxyXG4gICAgICAgICAgICA8cD57YW5zd2VyLnRpdGxlfTwvcD5cclxuICAgICAgXHJcbiAgICAgICAgICAgIDxDb2xsYXBzZVxyXG5cclxuICAgICAgICAgICAgICAgIHNpemU9XCJsYXJnZVwiXHJcbiAgICAgICAgICAgICAgICBpdGVtcz17W3tcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogPHAgY2xhc3NOYW1lPVwidHJpdmlhQW5zd2VyXCI+e2Fuc3dlci5xdWVzdGlvbn08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiA8cCBjbGFzc05hbWU9XCJ0cml2aWFBbnNcIj57dGV4dH08L3A+LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XX0gLz5cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+XHJcbiBcclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBUcml2aWE7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNyZWF0ZVRoZW1lLCBUaGVtZVByb3ZpZGVyIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnO1xyXG5pbXBvcnQgeyBsaW1lLCBwdXJwbGUsIHRlYWwsIGdyZWVuIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9jb2xvcnMnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJztcclxuaW1wb3J0IHsgUm91dGVzLCBSb3V0ZSwgTmF2TGluaywgSGFzaFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgSG9tZSBmcm9tIFwiLi9Ib21lXCI7XHJcbmltcG9ydCBGb290ZXJzIGZyb20gXCIuL0Zvb3RlcnNcIjtcclxuaW1wb3J0IFJlc3VsdHNMb2dvIGZyb20gXCIuL3NlYXJjaC9SZXN1bHRzTG9nb1wiO1xyXG5pbXBvcnQgUmVzdWx0c0RpY3Rpb25hcnkgZnJvbSBcIi4vc2VhcmNoL1Jlc3VsdHNEaWN0aW9uYXJ5XCI7XHJcbmltcG9ydCBSZXN1bHRzQ2VsZWJzIGZyb20gXCIuL3NlYXJjaC9SZXN1bHRzQ2VsZWJzXCI7XHJcbmltcG9ydCBSZXN1bHRzSGlzdG9yeSBmcm9tIFwiLi9zZWFyY2gvUmVzdWx0c0hpc3RvcnlcIjtcclxuaW1wb3J0IFJlc3VsdHNIaXN0b3J5RXZlbnRzIGZyb20gXCIuL3NlYXJjaC9SZXN1bHRzSGlzdG9yeUV2ZW50c1wiO1xyXG5pbXBvcnQgUmVzdWx0c1BlcnNvbiBmcm9tIFwiLi9zZWFyY2gvUmVzdWx0c1BlcnNvblwiO1xyXG5pbXBvcnQgRGV0YWlsc1BlcnNvbiBmcm9tIFwiLi9zZWFyY2gvRGV0YWlsc1BlcnNvblwiO1xyXG5pbXBvcnQgUGlja1RyaXZpYSBmcm9tIFwiLi90cml2aWEvUGlja1RyaXZpYVwiO1xyXG5pbXBvcnQgUmVzdWx0c0FkdmljZSBmcm9tIFwiLi9zZWFyY2gvUmVzdWx0c0FkdmljZVwiO1xyXG5pbXBvcnQgUmlkbGVzIGZyb20gXCIuL3RyaXZpYS9SaWRsZXNcIjtcclxuaW1wb3J0IEpva2VQbGFjZSBmcm9tIFwiLi9qb2tlcy9Kb2tlUGxhY2VcIjtcclxuaW1wb3J0IFNlYXJjaFBsYWNlIGZyb20gXCIuL3NlYXJjaC9TZWFyY2hQbGFjZVwiO1xyXG5pbXBvcnQgVHJpdmlhIGZyb20gXCIuL3RyaXZpYS9Ucml2aWFcIjtcclxuaW1wb3J0IFRyaXZpYVNjaWVuY2UgZnJvbSBcIi4vdHJpdmlhL1RyaXZpYVNjaWVuY2VcIjtcclxuaW1wb3J0IFRyaXZpYUdlbmVyYWwgZnJvbSBcIi4vdHJpdmlhL1RyaXZpYUdlbmVyYWxcIjtcclxuaW1wb3J0IFRyaXZpYUZvb2QgZnJvbSBcIi4vdHJpdmlhL1RyaXZpYUZvb2RcIjsgXHJcbmltcG9ydCBUcml2aWFQZW9wbGUgZnJvbSBcIi4vdHJpdmlhL1RyaXZpYVBlb3BsZVwiOyBcclxuaW1wb3J0IFRyaXZpYUhpc3RvcnkgZnJvbSBcIi4vdHJpdmlhL1RyaXZpYUhpc3RvcnlcIjsgXHJcbmltcG9ydCBUcml2aWFHZW9ncmFwaHkgZnJvbSBcIi4vdHJpdmlhL1RyaXZpYUdlb2dyYXBoeVwiOyBcclxuaW1wb3J0IFRyaXZpYUVudGVydGFpbm1lbnQgZnJvbSBcIi4vdHJpdmlhL1RyaXZpYUVudGVydGFpbm1lbnRcIjsgXHJcbmltcG9ydCBUcml2aWFUb3lzIGZyb20gXCIuL3RyaXZpYS9Ucml2aWFUb3lzXCI7XHJcbmltcG9ydCBUcml2aWFNdXNpYyBmcm9tIFwiLi90cml2aWEvVHJpdmlhTXVzaWNcIjtcclxuaW1wb3J0IFRyaXZpYUxhbmd1YWdlIGZyb20gXCIuL3RyaXZpYS9Ucml2aWFMYW5ndWFnZVwiXHJcbmltcG9ydCBUcml2aWFSZWxpZ2lvbiBmcm9tIFwiLi90cml2aWEvVHJpdmlhUmVsaWdpb25cIlxyXG5pbXBvcnQgVHJpdmlhU3BvcnQgZnJvbSBcIi4vdHJpdmlhL1RyaXZpYVNwb3J0XCJcclxuaW1wb3J0IFRyaXZpYU1hdGhlbWF0aWNzIGZyb20gXCIuL3RyaXZpYS9Ucml2aWFNYXRoZW1hdGljc1wiXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCB0aGVtZSA9IGNyZWF0ZVRoZW1lKHtcclxuICBwYWxldHRlOiB7XHJcbiAgICBwcmltYXJ5OiBncmVlbixcclxuICAgIHNlY29uZGFyeTogdGVhbCxcclxuICB9LFxyXG59KTtcclxuXHJcblxyXG5cclxuY29uc3QgTmF2aWdhdGlvbiA9ICgpID0+IHtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICByZXR1cm4gKFxyXG5cclxuICAgIDw+XHJcblxyXG5cclxuICAgICAgPEhhc2hSb3V0ZXIgYmFzZW5hbWU9XCIvXCI+XHJcbiAgICAgICAgPGRpdiA+XHJcbiAgICAgICAgICA8VGhlbWVQcm92aWRlclxyXG4gICBcclxuICAgICAgICAgICB0aGVtZT17dGhlbWV9PlxyXG5cclxuICAgICAgICAgICAgPE5hdkxpbmsgdG89XCIvXCI+XHJcbiAgICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwiY29udGFpbmVkXCI+SG9tZTwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL3NlYXJjaFwiPlxyXG4gICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImNvbnRhaW5lZFwiIGNvbG9yPVwic2Vjb25kYXJ5XCIgc3g9e3sgbWw6IDEgfX0gPlxyXG4gICAgICAgICAgICAgICAgU2VhcmNoPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvTmF2TGluaz5cclxuICAgICAgICAgICAgPE5hdkxpbmsgdG89XCIvam9rZXNcIj5cclxuICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJjb250YWluZWRcIiBjb2xvcj1cInNlY29uZGFyeVwiIHN4PXt7IG1sOiAxIH19PlxyXG4gICAgICAgICAgICAgICBKb2tlc1xyXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8L05hdkxpbms+XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgXHJcbiAgICBcclxuICAgICAgXHJcbiAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICA8TmF2TGluayB0bz1cIi9waWNrVHJpdmlhXCI+XHJcbiAgICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwiY29udGFpbmVkXCIgY29sb3I9XCJzZWNvbmRhcnlcIiBzeD17eyBtbDogMSB9fT5cclxuICAgICAgICAgICAgIFF1aXpcclxuICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgPC9OYXZMaW5rPlxyXG5cclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgICBcclxuXHJcblxyXG4gICAgICAgICAgPC9UaGVtZVByb3ZpZGVyPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8Um91dGVzPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgZWxlbWVudD17PEhvbWUgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9zZWFyY2hcIiBlbGVtZW50PXs8U2VhcmNoUGxhY2UgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9wb3puYXRpXCIgZWxlbWVudD17PFJlc3VsdHNDZWxlYnMgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9qb2tlc1wiIGVsZW1lbnQ9ezxKb2tlUGxhY2UgLz59IC8+XHJcbiAgICAgICBcclxuICAgXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgXHJcbiAgICAgICAgIFxyXG4gICAgICAgIFxyXG4gICBcclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3BpY2tUcml2aWFcIiBlbGVtZW50PXs8UGlja1RyaXZpYSAvPn0gLz5cclxuICAgICAgICAgXHJcbiAgICAgICAgIFxyXG4gICAgICAgXHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9sb2dvXCIgZWxlbWVudD17PFJlc3VsdHNMb2dvIC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvZGljdGlvbmFyeVwiIGVsZW1lbnQ9ezxSZXN1bHRzRGljdGlvbmFyeSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2hpc3RvcnlcIiBlbGVtZW50PXs8UmVzdWx0c0hpc3RvcnkgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9oaXN0b3J5RXZlbnRzXCIgZWxlbWVudD17PFJlc3VsdHNIaXN0b3J5RXZlbnRzIC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvaGlzdG9yeVBlcnNvblwiIGVsZW1lbnQ9ezxSZXN1bHRzUGVyc29uIC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvaGlzdG9yeVBlcnNvbi86cGVyc29uTmFtZVwiIGVsZW1lbnQ9ezxEZXRhaWxzUGVyc29uIC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdHJpdmlhLzp0cml2aWFDYXRcIiBlbGVtZW50PXs8VHJpdmlhIC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvYWR2aWNlXCIgZWxlbWVudD17PFJlc3VsdHNBZHZpY2UgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9yaWRsZXNcIiBlbGVtZW50PXs8UmlkbGVzIC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvYXJ0XCIgZWxlbWVudD17PFRyaXZpYSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NjaWVuY2VcIiBlbGVtZW50PXs8VHJpdmlhU2NpZW5jZSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2dlbmVyYWxcIiBlbGVtZW50PXs8VHJpdmlhR2VuZXJhbCAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2Zvb2RcIiBlbGVtZW50PXs8VHJpdmlhRm9vZCAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3Blb3BsZVwiIGVsZW1lbnQ9ezxUcml2aWFQZW9wbGUgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9oaXN0b3J5XCIgZWxlbWVudD17PFRyaXZpYUhpc3RvcnkgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9nZW9ncmFwaHlcIiBlbGVtZW50PXs8VHJpdmlhR2VvZ3JhcGh5IC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvZW50ZXJ0YWlubWVudFwiIGVsZW1lbnQ9ezxUcml2aWFFbnRlcnRhaW5tZW50IC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdG95c1wiIGVsZW1lbnQ9ezxUcml2aWFUb3lzIC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbXVzaWNcIiBlbGVtZW50PXs8VHJpdmlhTXVzaWMgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9sYW5ndWFnZVwiIGVsZW1lbnQ9ezxUcml2aWFMYW5ndWFnZSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3JlbGlnaW9uXCIgZWxlbWVudD17PFRyaXZpYVJlbGlnaW9uIC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvc3BvcnRcIiBlbGVtZW50PXs8VHJpdmlhU3BvcnQgLz59IC8+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9tYXRoZW1hdGljc1wiIGVsZW1lbnQ9ezxUcml2aWFNYXRoZW1hdGljcyAvPn0gLz5cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgXHJcblxyXG4gICAgICAgIDwvUm91dGVzPlxyXG5cclxuICAgICAgPC9IYXNoUm91dGVyPlxyXG5cclxuXHJcbjxGb290ZXJzIC8+XHJcblxyXG5cclxuXHJcbiAgICA8Lz5cclxuICApXHJcblxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IE5hdmlnYXRpb247IiwiY29uc3QgdGVhbCA9IHtcbiAgNTA6ICcjZTBmMmYxJyxcbiAgMTAwOiAnI2IyZGZkYicsXG4gIDIwMDogJyM4MGNiYzQnLFxuICAzMDA6ICcjNGRiNmFjJyxcbiAgNDAwOiAnIzI2YTY5YScsXG4gIDUwMDogJyMwMDk2ODgnLFxuICA2MDA6ICcjMDA4OTdiJyxcbiAgNzAwOiAnIzAwNzk2YicsXG4gIDgwMDogJyMwMDY5NWMnLFxuICA5MDA6ICcjMDA0ZDQwJyxcbiAgQTEwMDogJyNhN2ZmZWInLFxuICBBMjAwOiAnIzY0ZmZkYScsXG4gIEE0MDA6ICcjMWRlOWI2JyxcbiAgQTcwMDogJyMwMGJmYTUnXG59O1xuZXhwb3J0IGRlZmF1bHQgdGVhbDsiLCJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZX0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gXCIuL2NvbXBvbmVudHMvTmF2aWdhdGlvblwiO1xyXG5pbXBvcnQgR2xvYmFsQ29udGV4dCBmcm9tIFwiLi9jb21wb25lbnRzL0dsb2JhbENvbnRleHRcIjtcclxuXHJcblxyXG5cclxuY29uc3QgQXBwID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW3NlYXJjaFN0cmluZywgc2V0U2VhcmNoU3RyaW5nXSA9IHVzZVN0YXRlKCdFbnRlciBzZWFyY2ggY3JpdGVyaXVtIScpO1xyXG4gICByZXR1cm4gKFxyXG4gICAgPEdsb2JhbENvbnRleHQuUHJvdmlkZXJcclxuICAgIHZhbHVlPXt7XHJcbiAgICAgICAgc2V0U2VhcmNoU3RyaW5nRm46IHNldFNlYXJjaFN0cmluZyxcclxuICAgICAgICBzZWFyY2hTdHJpbmdWYWx1ZTogc2VhcmNoU3RyaW5nLFxyXG4gICAgfX1cclxuICAgID5cclxuICAgICAgICA8TmF2aWdhdGlvbiAvPlxyXG4gICAgPC9HbG9iYWxDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgICAgICk7XHJcblxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEFwcDtcclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbi8vIHN0YXJhIHNpbnRha3NhXHJcbi8vIGltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcblxyXG5cclxuLy9ub3ZhIHNpbnRha3NhXHJcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiO1xyXG5cclxuaW1wb3J0IFwiLi9jc3Mvc3R5bGVzLmNzc1wiO1xyXG5pbXBvcnQgXCIuL3Njc3MvbWFpbi5zY3NzXCI7XHJcblxyXG4vLyBpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9BcHBcIjsgLy9vdm8gamUgcHJpbWVyIGV4cG9ydFxyXG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcFwiOyAvL292byBqZSBwcmltZXIgc2EgZXhwb3J0IGRlZmF1bHRcclxuXHJcbi8vIGNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbi8vICAgICByZW5kZXIoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuICg8aDE+SGVsbG8gZnJvbSBSZWFjdCwgV2VicGFjayBhbmQgQmFiZWwhPC9oMT4pO1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG5cclxuLy9zdGFyYSBzaW50YWtzYSwgUmVhY3QgPCAxOFxyXG4vLyBSZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBcIikpO1xyXG5cclxuLy9JIG5hY2luIHBveml2YW5qYSBrb21wb25lbnRlOiA8QXBwIC8+XHJcbi8vSUkgbmFjaW4gcG96aXZhbmplIGtvbXBvbmVudGU6IDxBcHA+PC9BcHA+XHJcblxyXG4vL25vdmEgc2ludGFrc2EsIFJlYWN0IDE4XHJcbnZhciByb290ID0gUmVhY3RET00uY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKSk7XHJcbnJvb3QucmVuZGVyKFxyXG4gPFJlYWN0LlN0cmljdE1vZGU+XHJcbjxBcHBcclxuICAgICBudW1iZXI9ezEwfVxyXG4gICAgIHRpdGxlPVwiU3RyaW5nIGZyb20gaW5kZXggZmlsZVwiIFxyXG4gICAgIHRleHQ9XCJUZXh0IGZyb20gaW5kZXggZmlsZVwiIC8+XHJcbiAgICAgIDwvUmVhY3QuU3RyaWN0TW9kZT4sXHJcbiAgICAgKTtcclxuXHJcbiAgICAgXHJcbi8vIFJlYWN0RE9NLnJlbmRlcihcclxuICAgIFxyXG4vLyAgICAgICAgPEFwcCAvPlxyXG4gIFxyXG4vLyAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JylcclxuLy8gICAgKTtcclxuIl0sIm5hbWVzIjpbImxlYWZQcm90b3R5cGVzIiwiZ2V0UHJvdG8iLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZyIsImFyZ1R5cGUiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5uZXIiLCJhcHBseSIsInRvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaW5jbHVkZXMiLCJrZXkiLCJjYWxsIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJpZCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsIm5hbWUiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsImUiLCJiIiwiU3ltYm9sIiwiZm9yIiwiYyIsImQiLCJmIiwiZyIsImgiLCJsIiwibSIsIm4iLCJwIiwicSIsInIiLCJ0IiwidiIsInciLCJ4IiwieSIsInoiLCJhIiwidSIsIiQkdHlwZW9mIiwiQSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiYWEiLCJjYSIsImRhIiwiU2V0IiwiZWEiLCJmYSIsImhhIiwiYWRkIiwiaWEiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJqYSIsImthIiwibGEiLCJtYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwic3BsaXQiLCJmb3JFYWNoIiwidG9Mb3dlckNhc2UiLCJyYSIsInNhIiwidG9VcHBlckNhc2UiLCJ0YSIsInNsaWNlIiwicGEiLCJpc05hTiIsInFhIiwidGVzdCIsIm9hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJyZXBsYWNlIiwieGxpbmtIcmVmIiwidWEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJpdGVyYXRvciIsIkthIiwiTGEiLCJhc3NpZ24iLCJNYSIsIkVycm9yIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiUGEiLCJ0YWciLCJRYSIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwidmFsdWUiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsImFiIiwiYmIiLCJjYiIsImRiIiwib3duZXJEb2N1bWVudCIsImViIiwiZmIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwib2IiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInBiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInFiIiwicmIiLCJzYiIsInN0eWxlIiwiaW5kZXhPZiIsInNldFByb3BlcnR5IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwic291cmNlIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTmIiLCJvbkVycm9yIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIldiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJYYiIsIlpiIiwiY2hpbGQiLCJzaWJsaW5nIiwiY3VycmVudCIsIlliIiwiJGIiLCJhYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJiYyIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiY2MiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsImRjIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiQiIsInVuc3RhYmxlX25vdyIsImVjIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJmYyIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiZ2MiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImhjIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJpYyIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiamMiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJrYyIsImxjIiwib2MiLCJNYXRoIiwiY2x6MzIiLCJwYyIsInFjIiwibG9nIiwiTE4yIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwidmMiLCJ4YyIsInljIiwiemMiLCJBYyIsImV2ZW50VGltZXMiLCJDYyIsIkMiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJNYXAiLCJQYyIsIlFjIiwiUmMiLCJTYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIlRjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlZjIiwiV2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJYYyIsIlljIiwiZGlzcGF0Y2hFdmVudCIsInNoaWZ0IiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiZGQiLCJlZCIsInRyYW5zaXRpb24iLCJmZCIsImdkIiwiaGQiLCJVYyIsInN0b3BQcm9wYWdhdGlvbiIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlFkIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY29kZSIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJMZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJNZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJtaW4iLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImV4dGVuZCIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJlbGVtZW50IiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJYZSIsIlllIiwiWmUiLCJhbmltYXRpb24iLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJsZiIsIm1mIiwibmYiLCJVYiIsImluc3RhbmNlIiwibGlzdGVuZXIiLCJEIiwib2YiLCJoYXMiLCJwZiIsInFmIiwicmYiLCJyYW5kb20iLCJzZiIsImJpbmQiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIkoiLCJGIiwidGYiLCJ1ZiIsInBhcmVudFdpbmRvdyIsInZmIiwid2YiLCJuYSIsInhhIiwiJGEiLCJiYSIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX2h0bWwiLCJGZiIsInNldFRpbWVvdXQiLCJHZiIsImNsZWFyVGltZW91dCIsIkhmIiwiUHJvbWlzZSIsIkpmIiwicXVldWVNaWNyb3Rhc2siLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRSIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsIiRmIiwiYWciLCJiZyIsImdldENoaWxkQ29udGV4dCIsImNnIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJJIiwiemciLCJBZyIsIkJnIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJDZyIsInBlbmRpbmdQcm9wcyIsIm92ZXJmbG93IiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJEZyIsIm1vZGUiLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIl9jdXJyZW50VmFsdWUiLCJTZyIsImNoaWxkTGFuZXMiLCJUZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiVWciLCJWZyIsImNvbnRleHQiLCJtZW1vaXplZFZhbHVlIiwibmV4dCIsIldnIiwiWGciLCJZZyIsImludGVybGVhdmVkIiwiWmciLCIkZyIsImFoIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwiYmgiLCJjaCIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJkaCIsIksiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJDb21wb25lbnQiLCJyZWZzIiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkwiLCJsaCIsIm1oIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIm9oIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJwaCIsInN0YXRlIiwidXBkYXRlciIsInFoIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmgiLCJwcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50Iiwic2giLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwidGgiLCJ1aCIsInZoIiwiaW5kZXgiLCJ3aCIsInhoIiwieWgiLCJpbXBsZW1lbnRhdGlvbiIsInpoIiwiQWgiLCJkb25lIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsInRhZ05hbWUiLCJKaCIsIktoIiwiTGgiLCJNIiwiTWgiLCJyZXZlYWxPcmRlciIsIk5oIiwiT2giLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIlBoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlFoIiwiUmgiLCJOIiwiTyIsIlAiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIlEiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJkaSIsImVpIiwiZmkiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImdldFNuYXBzaG90IiwibGkiLCJtaSIsIlIiLCJuaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJvaSIsInBpIiwicWkiLCJyaSIsImNyZWF0ZSIsImRlc3Ryb3kiLCJkZXBzIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwiSGkiLCJJaSIsIkppIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsIktpIiwibWVzc2FnZSIsImRpZ2VzdCIsIkxpIiwiTWkiLCJjb25zb2xlIiwiZXJyb3IiLCJOaSIsIldlYWtNYXAiLCJPaSIsIlBpIiwiUWkiLCJSaSIsImNvbXBvbmVudERpZENhdGNoIiwiU2kiLCJjb21wb25lbnRTdGFjayIsIlRpIiwicGluZ0NhY2hlIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJSZWFjdEN1cnJlbnRPd25lciIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJjaiIsImRqIiwiZWoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJ0cmFuc2l0aW9ucyIsImZqIiwiZ2oiLCJoaiIsImlqIiwiamoiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJraiIsImxqIiwicGVuZGluZ0NvbnRleHQiLCJtaiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwibmoiLCJvaiIsInBqIiwiZmFsbGJhY2siLCJxaiIsInJqIiwidGoiLCJkYXRhc2V0IiwiZGdzdCIsInVqIiwidmoiLCJfcmVhY3RSZXRyeSIsInNqIiwic3VidHJlZUZsYWdzIiwid2oiLCJ4aiIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsInlqIiwiRWoiLCJTIiwiRmoiLCJHaiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJvbkNsaWNrIiwib25jbGljayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJjcmVhdGVUZXh0Tm9kZSIsIlQiLCJIaiIsIklqIiwiSmoiLCJLaiIsIlUiLCJMaiIsIldlYWtTZXQiLCJWIiwiTWoiLCJXIiwiTmoiLCJPaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiVWoiLCJWaiIsIldqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlhqIiwiWCIsIllqIiwiWmoiLCJhayIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiaXNIaWRkZW4iLCJnayIsImhrIiwiZGlzcGxheSIsImlrIiwiamsiLCJrayIsImxrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJXayIsIm1rIiwiY2VpbCIsIm5rIiwib2siLCJwayIsIlkiLCJaIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsIkluZmluaXR5IiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiRWsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ3YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJpZyIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsIk9rIiwiUGsiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiUWsiLCJ0aW1lb3V0SGFuZGxlIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJWayIsIm11dGFibGVSZWFkTGFuZXMiLCJCYyIsIlBqIiwib25Db21taXRGaWJlclJvb3QiLCJtYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlhrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWWsiLCJaayIsImFsIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImJsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImNsIiwiY2FjaGUiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZWwiLCJmbCIsImdsIiwiaGwiLCJpbCIsImpsIiwiemoiLCIkayIsImxsIiwicmVwb3J0RXJyb3IiLCJtbCIsIl9pbnRlcm5hbFJvb3QiLCJubCIsIm9sIiwicGwiLCJxbCIsInNsIiwicmwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJzcGxpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsInRsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidWwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJkbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZXJyIiwiX19zZWxmIiwiX19zb3VyY2UiLCJqc3giLCJqc3hzIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJwb3AiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImZsb29yIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsImluc2VydCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwibnMiLCJkZWYiLCJkZWZpbml0aW9uIiwibyIsInByb3AiLCJ0b1N0cmluZ1RhZyIsIm5jIiwibG9jYWxzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJmb3JtYXRNdWlFcnJvck1lc3NhZ2UiLCJpc1BsYWluT2JqZWN0IiwiZGVlcENsb25lIiwib3V0cHV0IiwiY2xvbmUiLCJfZXhjbHVkZWQiLCJib3JkZXJSYWRpdXMiLCJ2YWx1ZXMiLCJ4cyIsInNtIiwieGwiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJ1cCIsImhhbmRsZUJyZWFrcG9pbnRzIiwicHJvcFZhbHVlIiwic3R5bGVGcm9tUHJvcFZhbHVlIiwidGhlbWUiLCJ0aGVtZUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHMiLCJyZWR1Y2UiLCJhY2MiLCJicmVha3BvaW50IiwiY3NzS2V5IiwiY2FwaXRhbGl6ZSIsInN0cmluZyIsImdldFBhdGgiLCJwYXRoIiwiY2hlY2tWYXJzIiwidmFycyIsInZhbCIsImdldFN0eWxlVmFsdWUiLCJ0aGVtZU1hcHBpbmciLCJ0cmFuc2Zvcm0iLCJwcm9wVmFsdWVGaW5hbCIsInVzZXJWYWx1ZSIsImNzc1Byb3BlcnR5IiwidGhlbWVLZXkiLCJmbiIsImZpbHRlclByb3BzIiwicHJvcGVydGllcyIsImRpcmVjdGlvbnMiLCJhbGlhc2VzIiwibWFyZ2luWCIsIm1hcmdpblkiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiZ2V0Q3NzUHJvcGVydGllcyIsInByb3BlcnR5IiwiZGlyZWN0aW9uIiwiZGlyIiwibWVtb2l6ZSIsIm1hcmdpbktleXMiLCJwYWRkaW5nS2V5cyIsInNwYWNpbmdLZXlzIiwiY3JlYXRlVW5hcnlVbml0IiwicHJvcE5hbWUiLCJfZ2V0UGF0aCIsInRoZW1lU3BhY2luZyIsImFicyIsImNyZWF0ZVVuYXJ5U3BhY2luZyIsInRyYW5zZm9ybWVyIiwidHJhbnNmb3JtZWQiLCJjc3NQcm9wZXJ0aWVzIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwicmVzb2x2ZUNzc1Byb3BlcnR5IiwibWFyZ2luIiwicGFkZGluZyIsInNwYWNpbmciLCJzdHlsZXMiLCJoYW5kbGVycyIsImJvcmRlclRyYW5zZm9ybSIsImNyZWF0ZUJvcmRlclN0eWxlIiwiYm9yZGVyIiwiYm9yZGVyVG9wIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJCb3R0b20iLCJib3JkZXJMZWZ0IiwiYm9yZGVyQ29sb3IiLCJib3JkZXJUb3BDb2xvciIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckxlZnRDb2xvciIsIm91dGxpbmUiLCJvdXRsaW5lQ29sb3IiLCJnYXAiLCJjb2x1bW5HYXAiLCJyb3dHYXAiLCJwYWxldHRlVHJhbnNmb3JtIiwic2l6aW5nVHJhbnNmb3JtIiwibWF4V2lkdGgiLCJfcHJvcHMkdGhlbWUiLCJfcHJvcHMkdGhlbWUyIiwidW5pdCIsIm1pbldpZHRoIiwibWF4SGVpZ2h0IiwibWluSGVpZ2h0IiwiYmdjb2xvciIsImJhY2tncm91bmRDb2xvciIsInB0IiwicHIiLCJweCIsInB5IiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdJbmxpbmUiLCJwYWRkaW5nSW5saW5lU3RhcnQiLCJwYWRkaW5nSW5saW5lRW5kIiwicGFkZGluZ0Jsb2NrIiwicGFkZGluZ0Jsb2NrU3RhcnQiLCJwYWRkaW5nQmxvY2tFbmQiLCJtdCIsIm1yIiwibXgiLCJteSIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpbklubGluZSIsIm1hcmdpbklubGluZVN0YXJ0IiwibWFyZ2luSW5saW5lRW5kIiwibWFyZ2luQmxvY2siLCJtYXJnaW5CbG9ja1N0YXJ0IiwibWFyZ2luQmxvY2tFbmQiLCJkaXNwbGF5UHJpbnQiLCJ0ZXh0T3ZlcmZsb3ciLCJ2aXNpYmlsaXR5Iiwid2hpdGVTcGFjZSIsImZsZXhCYXNpcyIsImZsZXhEaXJlY3Rpb24iLCJmbGV4V3JhcCIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImFsaWduQ29udGVudCIsImFsaWduU2VsZiIsImp1c3RpZnlJdGVtcyIsImp1c3RpZnlTZWxmIiwiZ3JpZEF1dG9GbG93IiwiZ3JpZEF1dG9Db2x1bW5zIiwiZ3JpZEF1dG9Sb3dzIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRUZW1wbGF0ZVJvd3MiLCJncmlkVGVtcGxhdGVBcmVhcyIsInBvc2l0aW9uIiwicmlnaHQiLCJib3R0b20iLCJib3hTaGFkb3ciLCJib3hTaXppbmciLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250U3R5bGUiLCJsZXR0ZXJTcGFjaW5nIiwidGV4dFRyYW5zZm9ybSIsInRleHRBbGlnbiIsInR5cG9ncmFwaHkiLCJzdHlsZUZ1bmN0aW9uU3giLCJnZXRUaGVtZVZhbHVlIiwiY29uZmlnIiwiX3RoZW1lJHVuc3RhYmxlX3N4Q29uIiwic3giLCJ1bnN0YWJsZV9zeENvbmZpZyIsInRyYXZlcnNlIiwic3hJbnB1dCIsInN4T2JqZWN0IiwiZW1wdHlCcmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfYnJlYWtwb2ludHNJbnB1dCRrZXkiLCJjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QiLCJicmVha3BvaW50c0tleXMiLCJzdHlsZUtleSIsIm1heWJlRm4iLCJicmVha3BvaW50c1ZhbHVlcyIsIm9iamVjdHMiLCJhbGxLZXlzIiwib2JqZWN0IiwidW5pb24iLCJldmVyeSIsIm9iamVjdHNIYXZlU2FtZUtleXMiLCJicmVha3BvaW50T3V0cHV0IiwidW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4IiwiYXJncyIsInBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJzcGFjaW5nSW5wdXQiLCJzaGFwZSIsInNoYXBlSW5wdXQiLCJvdGhlciIsInN0ZXAiLCJzb3J0ZWRWYWx1ZXMiLCJicmVha3BvaW50c0FzQXJyYXkiLCJzb3J0IiwiYnJlYWtwb2ludDEiLCJicmVha3BvaW50MiIsInNvcnRCcmVha3BvaW50c1ZhbHVlcyIsImRvd24iLCJiZXR3ZWVuIiwiZW5kSW5kZXgiLCJub3QiLCJrZXlJbmRleCIsImNyZWF0ZUJyZWFrcG9pbnRzIiwibXVpIiwiYXJnc0lucHV0IiwiYXJndW1lbnQiLCJjcmVhdGVTcGFjaW5nIiwibXVpVGhlbWUiLCJjb21wb25lbnRzIiwidW5zdGFibGVfc3giLCJjbGFtcCIsIm1heCIsImRlY29tcG9zZUNvbG9yIiwiUmVnRXhwIiwiY29sb3JzIiwicGFyc2VJbnQiLCJyb3VuZCIsImhleFRvUmdiIiwibWFya2VyIiwiY29sb3JTcGFjZSIsInBhcnNlRmxvYXQiLCJyZWNvbXBvc2VDb2xvciIsImdldEx1bWluYW5jZSIsInJnYiIsInMiLCJoc2xUb1JnYiIsIk51bWJlciIsInRvRml4ZWQiLCJhbHBoYSIsImJsYWNrIiwid2hpdGUiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwibGlnaHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZGl2aWRlciIsImJhY2tncm91bmQiLCJwYXBlciIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWRPcGFjaXR5IiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiZGlzYWJsZWRPcGFjaXR5IiwiZm9jdXNPcGFjaXR5IiwiYWN0aXZhdGVkT3BhY2l0eSIsImRhcmsiLCJpY29uIiwiYWRkTGlnaHRPckRhcmsiLCJpbnRlbnQiLCJzaGFkZSIsInRvbmFsT2Zmc2V0IiwidG9uYWxPZmZzZXRMaWdodCIsInRvbmFsT2Zmc2V0RGFyayIsImNvZWZmaWNpZW50IiwibGlnaHRlbiIsIm1haW4iLCJkYXJrZW4iLCJjYXNlQWxsQ2FwcyIsImRlZmF1bHRGb250RmFtaWx5IiwiY3JlYXRlVHlwb2dyYXBoeSIsIl9yZWYiLCJmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0UmVndWxhciIsImZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0Qm9sZCIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbSIsInB4VG9SZW0yIiwiY29lZiIsImJ1aWxkVmFyaWFudCIsImNhc2luZyIsInZhcmlhbnRzIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwic3VidGl0bGUxIiwic3VidGl0bGUyIiwiYm9keTEiLCJib2R5MiIsImNhcHRpb24iLCJvdmVybGluZSIsImluaGVyaXQiLCJjcmVhdGVTaGFkb3ciLCJlYXNpbmciLCJlYXNlSW5PdXQiLCJlYXNlT3V0IiwiZWFzZUluIiwic2hhcnAiLCJkdXJhdGlvbiIsInNob3J0ZXN0Iiwic2hvcnRlciIsInNob3J0Iiwic3RhbmRhcmQiLCJjb21wbGV4IiwiZW50ZXJpbmdTY3JlZW4iLCJsZWF2aW5nU2NyZWVuIiwiZm9ybWF0TXMiLCJtaWxsaXNlY29uZHMiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJjb25zdGFudCIsImNyZWF0ZVRyYW5zaXRpb25zIiwiaW5wdXRUcmFuc2l0aW9ucyIsIm1lcmdlZEVhc2luZyIsIm1lcmdlZER1cmF0aW9uIiwiZHVyYXRpb25PcHRpb24iLCJlYXNpbmdPcHRpb24iLCJhbmltYXRlZFByb3AiLCJtb2JpbGVTdGVwcGVyIiwiZmFiIiwic3BlZWREaWFsIiwiYXBwQmFyIiwiZHJhd2VyIiwibW9kYWwiLCJzbmFja2JhciIsInRvb2x0aXAiLCJtaXhpbnNJbnB1dCIsInRyYW5zaXRpb25zSW5wdXQiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJjb250cmFzdFRocmVzaG9sZCIsImdldERlZmF1bHRQcmltYXJ5IiwiZ2V0RGVmYXVsdFNlY29uZGFyeSIsImdldERlZmF1bHRFcnJvciIsImluZm8iLCJnZXREZWZhdWx0SW5mbyIsInN1Y2Nlc3MiLCJnZXREZWZhdWx0U3VjY2VzcyIsIndhcm5pbmciLCJnZXREZWZhdWx0V2FybmluZyIsImdldENvbnRyYXN0VGV4dCIsImNvbnRyYXN0VGV4dCIsImZvcmVncm91bmQiLCJsdW1BIiwibHVtQiIsImdldENvbnRyYXN0UmF0aW8iLCJhdWdtZW50Q29sb3IiLCJtYWluU2hhZGUiLCJsaWdodFNoYWRlIiwiZGFya1NoYWRlIiwibW9kZXMiLCJjb21tb24iLCJncmV5IiwiY3JlYXRlUGFsZXR0ZSIsInN5c3RlbVRoZW1lIiwidG9vbGJhciIsInNoYWRvd3MiLCJ1c2VUaGVtZSIsImxvY2FsVGhlbWUiLCJvdXRlclRoZW1lIiwibWVyZ2VPdXRlckxvY2FsVGhlbWUiLCJuZXN0ZWQiLCJTdHlsZVNoZWV0IiwiX3RoaXMiLCJfaW5zZXJ0VGFnIiwiYmVmb3JlIiwidGFncyIsImluc2VydGlvblBvaW50IiwicHJlcGVuZCIsImNvbnRhaW5lciIsImlzU3BlZWR5Iiwic3BlZWR5IiwiY3RyIiwiX3Byb3RvIiwibm9kZXMiLCJydWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNoZWV0Rm9yVGFnIiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiZmx1c2giLCJwYXR0ZXJuIiwicmVwbGFjZW1lbnQiLCJpbmRleG9mIiwiY2hhckNvZGVBdCIsImJlZ2luIiwiYXJyYXkiLCJsaW5lIiwiY29sdW1uIiwiY2hhcmFjdGVyIiwiY2hhcmFjdGVycyIsInJvb3QiLCJwYXJlbnQiLCJwcmV2IiwicGVlayIsImNhcmV0IiwidG9rZW4iLCJhbGxvYyIsImRlYWxsb2MiLCJkZWxpbWl0IiwiZGVsaW1pdGVyIiwid2hpdGVzcGFjZSIsImVzY2FwaW5nIiwiY29tbWVudGVyIiwiQ09NTUVOVCIsIklNUE9SVCIsIkxBWUVSIiwiY29tcGlsZSIsInBhcnNlIiwicnVsZXMiLCJydWxlc2V0cyIsInBzZXVkbyIsInBvaW50cyIsImRlY2xhcmF0aW9ucyIsImF0cnVsZSIsInByZXZpb3VzIiwidmFyaWFibGUiLCJzY2FubmluZyIsImFtcGVyc2FuZCIsInJlZmVyZW5jZSIsImNvbW1lbnQiLCJkZWNsYXJhdGlvbiIsInJ1bGVzZXQiLCJwb3N0IiwiaiIsImlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyIsImZpeGVkRWxlbWVudHMiLCJjb21wYXQiLCJpc0ltcGxpY2l0UnVsZSIsInBhcnNlZCIsInRvUnVsZXMiLCJnZXRSdWxlcyIsInBhcmVudFJ1bGVzIiwicmVtb3ZlTGFiZWwiLCJoYXNoIiwiZGVmYXVsdFN0eWxpc1BsdWdpbnMiLCJleGVjIiwiY3JlYXRlQ2FjaGUiLCJzc3JTdHlsZXMiLCJnZXRBdHRyaWJ1dGUiLCJfaW5zZXJ0Iiwic3R5bGlzUGx1Z2lucyIsImluc2VydGVkIiwibm9kZXNUb0h5ZHJhdGUiLCJhdHRyaWIiLCJjdXJyZW50U2hlZXQiLCJjb2xsZWN0aW9uIiwiZmluYWxpemluZ1BsdWdpbnMiLCJzZXJpYWxpemVyIiwic2VsZWN0b3IiLCJzZXJpYWxpemVkIiwic2hvdWxkQ2FjaGUiLCJzdHlsaXMiLCJyZWdpc3RlcmVkIiwidW5pdGxlc3NLZXlzIiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJXZWJraXRMaW5lQ2xhbXAiLCJoeXBoZW5hdGVSZWdleCIsImFuaW1hdGlvblJlZ2V4IiwiaXNDdXN0b21Qcm9wZXJ0eSIsImlzUHJvY2Vzc2FibGVWYWx1ZSIsInByb2Nlc3NTdHlsZU5hbWUiLCJzdHlsZU5hbWUiLCJwcm9jZXNzU3R5bGVWYWx1ZSIsInAxIiwicDIiLCJjdXJzb3IiLCJoYW5kbGVJbnRlcnBvbGF0aW9uIiwibWVyZ2VkUHJvcHMiLCJpbnRlcnBvbGF0aW9uIiwiX19lbW90aW9uX3N0eWxlcyIsImFuaW0iLCJfa2V5IiwiaW50ZXJwb2xhdGVkIiwiY3JlYXRlU3RyaW5nRnJvbU9iamVjdCIsInByZXZpb3VzQ3Vyc29yIiwiY2FjaGVkIiwibGFiZWxQYXR0ZXJuIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJyYXciLCJsYXN0SW5kZXgiLCJpZGVudGlmaWVyTmFtZSIsInN0ciIsImxlbiIsInVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayIsIkVtb3Rpb25DYWNoZUNvbnRleHQiLCJIVE1MRWxlbWVudCIsImZ1bmMiLCJkZWZhdWx0VGhlbWUiLCJjb250ZXh0VGhlbWUiLCJFTVBUWV9USEVNRSIsInVzZVRoZW1lU2NvcGluZyIsInRoZW1lSWQiLCJ1cHBlclRoZW1lIiwiaXNQcml2YXRlIiwicmVzb2x2ZWRUaGVtZSIsIm1lcmdlZFRoZW1lIiwidXNlVGhlbWVXaXRob3V0RGVmYXVsdCIsInVwcGVyUHJpdmF0ZVRoZW1lIiwiZW5naW5lVGhlbWUiLCJwcml2YXRlVGhlbWUiLCJ0aGVtZUlucHV0Iiwic2NvcGVkVGhlbWUiLCJyZXNvbHZlUHJvcHMiLCJkZWZhdWx0U2xvdFByb3BzIiwic2xvdFByb3BzIiwic2xvdFByb3BOYW1lIiwiY29tcG9zZUNsYXNzZXMiLCJzbG90cyIsImdldFV0aWxpdHlDbGFzcyIsInNsb3QiLCJ1dGlsaXR5Q2xhc3MiLCJyZWFjdFByb3BzUmVnZXgiLCJpc1N0cmluZ1RhZyIsImNsYXNzTmFtZSIsInRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCIsImdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMiLCJpc1JlYWwiLCJzaG91bGRGb3J3YXJkUHJvcCIsIm9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCIsIl9fZW1vdGlvbl9mb3J3YXJkUHJvcCIsIm5ld1N0eWxlZCIsImNyZWF0ZVN0eWxlZCIsInRhcmdldENsYXNzTmFtZSIsIl9fZW1vdGlvbl9yZWFsIiwiYmFzZVRhZyIsIl9fZW1vdGlvbl9iYXNlIiwibGFiZWwiLCJkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJzaG91bGRVc2VBcyIsIlN0eWxlZCIsInJlZ2lzdGVyZWRTdHlsZXMiLCJyYXdDbGFzc05hbWUiLCJGaW5hbFRhZyIsImFzIiwiY2xhc3NJbnRlcnBvbGF0aW9ucyIsImZpbmFsU2hvdWxkRm9yd2FyZFByb3AiLCJuZXdQcm9wcyIsIndpdGhDb21wb25lbnQiLCJuZXh0VGFnIiwibmV4dE9wdGlvbnMiLCJpc0VtcHR5IiwicHJvcHNUb0NsYXNzS2V5IiwidmFyaWFudCIsImNsYXNzS2V5IiwidHJhbnNmb3JtVmFyaWFudHMiLCJ2YXJpYW50c1N0eWxlcyIsInZhcmlhbnRzUmVzb2x2ZXIiLCJvd25lclN0YXRlIiwiaXNNYXRjaCIsInN5c3RlbURlZmF1bHRUaGVtZSIsImxvd2VyY2FzZUZpcnN0TGV0dGVyIiwicmVzb2x2ZVRoZW1lIiwiZGVmYXVsdE92ZXJyaWRlc1Jlc29sdmVyIiwibXVpU3R5bGVkRnVuY3Rpb25SZXNvbHZlciIsInN0eWxlZEFyZyIsInJlc29sdmVkU3R5bGVzIiwib3B0aW9uYWxWYXJpYW50cyIsInJvb3RTaG91bGRGb3J3YXJkUHJvcCIsInNsb3RTaG91bGRGb3J3YXJkUHJvcCIsInN5c3RlbVN4IiwiX19tdWlfc3lzdGVtU3giLCJpbnB1dE9wdGlvbnMiLCJwcm9jZXNzb3IiLCJmaWx0ZXIiLCJjb21wb25lbnROYW1lIiwiY29tcG9uZW50U2xvdCIsInNraXBWYXJpYW50c1Jlc29sdmVyIiwiaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciIsInNraXBTeCIsImlucHV0U2tpcFN4Iiwib3ZlcnJpZGVzUmVzb2x2ZXIiLCJzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiIsImRlZmF1bHRTdHlsZWRSZXNvbHZlciIsInN0eWxlZCIsIm11aVN0eWxlZFJlc29sdmVyIiwic3R5bGVBcmciLCJleHByZXNzaW9ucyIsImV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSIsInN0eWxlc0FyZyIsInN0eWxlZEFyZ1ZhcmlhbnRzIiwidHJhbnNmb3JtZWRTdHlsZXNBcmciLCJ2YXJpYW50U3R5bGUiLCJ0cmFuc2Zvcm1lZFN0eWxlQXJnIiwic3R5bGVPdmVycmlkZXMiLCJnZXRTdHlsZU92ZXJyaWRlcyIsInJlc29sdmVkU3R5bGVPdmVycmlkZXMiLCJlbnRyaWVzIiwic2xvdEtleSIsInNsb3RTdHlsZSIsIl90aGVtZSRjb21wb25lbnRzIiwidGhlbWVWYXJpYW50cyIsInRoZW1lVmFyaWFudHNSZXNvbHZlciIsImdldFZhcmlhbnRTdHlsZXMiLCJudW1PZkN1c3RvbUZuc0FwcGxpZWQiLCJwbGFjZWhvbGRlcnMiLCJmaWxsIiwibXVpTmFtZSIsIndpdGhDb25maWciLCJwYXJhbXMiLCJnZXRUaGVtZVByb3BzIiwidXNlRm9ya1JlZiIsInNldFJlZiIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCIsImhhZEtleWJvYXJkRXZlbnQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseSIsImlucHV0VHlwZXNXaGl0ZWxpc3QiLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlUG9pbnRlckRvd24iLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwiZG9jIiwiaXNGb2N1c1Zpc2libGVSZWYiLCJvbkZvY3VzIiwibWF0Y2hlcyIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSIsImlzRm9jdXNWaXNpYmxlIiwib25CbHVyIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9zZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsIm5leHRQcm9wcyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiaW4iLCJleGl0IiwiZW50ZXIiLCJUcmFuc2l0aW9uR3JvdXAiLCJfUmVhY3QkQ29tcG9uZW50Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiaGFuZGxlRXhpdGVkIiwiY29udGV4dFZhbHVlIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJfdGhpcyRwcm9wcyIsImNoaWxkRmFjdG9yeSIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJHbG9iYWwiLCJzaGVldFJlZiIsInJlaHlkcmF0aW5nIiwic2hlZXRSZWZDdXJyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiX2xlbiIsImtleWZyYW1lcyIsImluc2VydGFibGUiLCJkZWZhdWx0R2VuZXJhdG9yIiwiQ2xhc3NOYW1lR2VuZXJhdG9yIiwiZ2VuZXJhdGUiLCJjb25maWd1cmUiLCJnZW5lcmF0b3IiLCJyZXNldCIsImNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciIsImdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmciLCJjb21wbGV0ZWQiLCJleHBhbmRlZCIsImZvY3VzZWQiLCJmb2N1c1Zpc2libGUiLCJvcGVuIiwicmVxdWlyZWQiLCJnbG9iYWxTdGF0ZVByZWZpeCIsImdsb2JhbFN0YXRlQ2xhc3MiLCJnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIiwiX3QiLCJfdDIiLCJfdDMiLCJfdDQiLCJfIiwiZW50ZXJLZXlmcmFtZSIsImV4aXRLZXlmcmFtZSIsInB1bHNhdGVLZXlmcmFtZSIsIlRvdWNoUmlwcGxlUm9vdCIsInBvaW50ZXJFdmVudHMiLCJUb3VjaFJpcHBsZVJpcHBsZSIsInB1bHNhdGUiLCJyaXBwbGVYIiwicmlwcGxlWSIsInJpcHBsZVNpemUiLCJpblByb3AiLCJ0aW1lb3V0IiwibGVhdmluZyIsInNldExlYXZpbmciLCJyaXBwbGVDbGFzc05hbWUiLCJyaXBwbGUiLCJyaXBwbGVWaXNpYmxlIiwicmlwcGxlUHVsc2F0ZSIsInJpcHBsZVN0eWxlcyIsImNoaWxkQ2xhc3NOYW1lIiwiY2hpbGRMZWF2aW5nIiwiY2hpbGRQdWxzYXRlIiwidGltZW91dElkIiwiVG91Y2hSaXBwbGUiLCJpblByb3BzIiwiY2VudGVyIiwiY2VudGVyUHJvcCIsInJpcHBsZXMiLCJzZXRSaXBwbGVzIiwicmlwcGxlQ2FsbGJhY2siLCJpZ25vcmluZ01vdXNlRG93biIsInN0YXJ0VGltZXIiLCJzdGFydFRpbWVyQ29tbWl0Iiwic3RhcnRDb21taXQiLCJvbGRSaXBwbGVzIiwiZmFrZUVsZW1lbnQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic3FydCIsInNpemVYIiwiY2xpZW50V2lkdGgiLCJzaXplWSIsImNsaWVudEhlaWdodCIsInN0b3AiLCJnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzIiwiQnV0dG9uQmFzZVJvb3QiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsInVzZXJTZWxlY3QiLCJ2ZXJ0aWNhbEFsaWduIiwiTW96QXBwZWFyYW5jZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJ0ZXh0RGVjb3JhdGlvbiIsImJvcmRlclN0eWxlIiwiY29sb3JBZGp1c3QiLCJCdXR0b25CYXNlIiwiY2VudGVyUmlwcGxlIiwiZGlzYWJsZVJpcHBsZSIsImRpc2FibGVUb3VjaFJpcHBsZSIsImZvY3VzUmlwcGxlIiwiTGlua0NvbXBvbmVudCIsIm9uQ29udGV4dE1lbnUiLCJvbkRyYWdMZWF2ZSIsIm9uRm9jdXNWaXNpYmxlIiwib25LZXlEb3duIiwib25LZXlVcCIsIm9uTW91c2VEb3duIiwib25Nb3VzZUxlYXZlIiwib25Nb3VzZVVwIiwib25Ub3VjaEVuZCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFN0YXJ0IiwidGFiSW5kZXgiLCJUb3VjaFJpcHBsZVByb3BzIiwidG91Y2hSaXBwbGVSZWYiLCJidXR0b25SZWYiLCJyaXBwbGVSZWYiLCJoYW5kbGVSaXBwbGVSZWYiLCJoYW5kbGVGb2N1c1Zpc2libGUiLCJoYW5kbGVCbHVyVmlzaWJsZSIsImZvY3VzVmlzaWJsZVJlZiIsInNldEZvY3VzVmlzaWJsZSIsIm1vdW50ZWRTdGF0ZSIsInNldE1vdW50ZWRTdGF0ZSIsImVuYWJsZVRvdWNoUmlwcGxlIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlQ29udGV4dE1lbnUiLCJoYW5kbGVEcmFnTGVhdmUiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImlzTm9uTmF0aXZlQnV0dG9uIiwia2V5ZG93blJlZiIsImhhbmRsZUtleVVwIiwiQ29tcG9uZW50UHJvcCIsInRvIiwiYnV0dG9uUHJvcHMiLCJyb2xlIiwiaGFuZGxlUmVmIiwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lIiwiY29tcG9zZWRDbGFzc2VzIiwidXNlVXRpbGl0eUNsYXNzZXMiLCJnZXRCdXR0b25VdGlsaXR5Q2xhc3MiLCJjb21tb25JY29uU3R5bGVzIiwiQnV0dG9uUm9vdCIsImNvbG9ySW5oZXJpdCIsImRpc2FibGVFbGV2YXRpb24iLCJmdWxsV2lkdGgiLCJfdGhlbWUkcGFsZXR0ZSRnZXRDb24iLCJfdGhlbWUkcGFsZXR0ZSIsImluaGVyaXRDb250YWluZWRCYWNrZ3JvdW5kQ29sb3IiLCJpbmhlcml0Q29udGFpbmVkSG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJwcmltYXJ5Q2hhbm5lbCIsIm1haW5DaGFubmVsIiwiQnV0dG9uIiwiaW5oZXJpdENvbnRhaW5lZEhvdmVyQmciLCJpbmhlcml0Q29udGFpbmVkQmciLCJCdXR0b25TdGFydEljb24iLCJzdGFydEljb24iLCJCdXR0b25FbmRJY29uIiwiZW5kSWNvbiIsImNvbnRleHRQcm9wcyIsImJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dFBvc2l0aW9uQ2xhc3NOYW1lIiwiZGlzYWJsZUZvY3VzUmlwcGxlIiwiZW5kSWNvblByb3AiLCJzdGFydEljb25Qcm9wIiwicG9zaXRpb25DbGFzc05hbWUiLCJBY3Rpb24iLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImludmFyaWFudCIsImNvbmQiLCJ3YXJuIiwiZ2V0SGlzdG9yeVN0YXRlIiwidXNyIiwiaWR4IiwiY3JlYXRlTG9jYXRpb24iLCJwYXRobmFtZSIsInBhcnNlUGF0aCIsInN1YnN0ciIsInBhcnNlZFBhdGgiLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsIlJlc3VsdFR5cGUiLCJtYXRjaFJvdXRlcyIsInJvdXRlcyIsImxvY2F0aW9uQXJnIiwiYmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzY29yZSIsImNvbXBhcmVJbmRleGVzIiwicm91dGVzTWV0YSIsImNoaWxkcmVuSW5kZXgiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoUm91dGVCcmFuY2giLCJzYWZlbHlEZWNvZGVVUkkiLCJwYXJlbnRzTWV0YSIsInBhcmVudFBhdGgiLCJmbGF0dGVuUm91dGUiLCJyb3V0ZSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJzdGFydHNXaXRoIiwiY29tcHV0ZVNjb3JlIiwiX3JvdXRlJHBhdGgiLCJleHBsb2RlZCIsImV4cGxvZGVPcHRpb25hbFNlZ21lbnRzIiwic2VnbWVudHMiLCJmaXJzdCIsInJlc3QiLCJpc09wdGlvbmFsIiwiZW5kc1dpdGgiLCJyZXN0RXhwbG9kZWQiLCJzdWJwYXRoIiwicGFyYW1SZSIsImR5bmFtaWNTZWdtZW50VmFsdWUiLCJpbmRleFJvdXRlVmFsdWUiLCJlbXB0eVNlZ21lbnRWYWx1ZSIsInN0YXRpY1NlZ21lbnRWYWx1ZSIsInNwbGF0UGVuYWx0eSIsImlzU3BsYXQiLCJpbml0aWFsU2NvcmUiLCJzb21lIiwic2VnbWVudCIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJyZW1haW5pbmdQYXRobmFtZSIsInBhdGhuYW1lQmFzZSIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwibWF0Y2hlciIsImNvbXBpbGVkUGFyYW1zIiwicmVnZXhwU291cmNlIiwicGFyYW1OYW1lIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwic3BsYXRWYWx1ZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInNhZmVseURlY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSSIsInN0YXJ0SW5kZXgiLCJuZXh0Q2hhciIsImdldEludmFsaWRQYXRoRXJyb3IiLCJmaWVsZCIsImRlc3QiLCJnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyIsInRvQXJnIiwicm91dGVQYXRobmFtZXMiLCJsb2NhdGlvblBhdGhuYW1lIiwiaXNQYXRoUmVsYXRpdmUiLCJmcm9tIiwiaXNFbXB0eVBhdGgiLCJ0b1BhdGhuYW1lIiwiZnJvbVNlZ21lbnRzIiwidG9TZWdtZW50cyIsInJvdXRlUGF0aG5hbWVJbmRleCIsImZyb21QYXRobmFtZSIsInJlc29sdmVQYXRobmFtZSIsIm5vcm1hbGl6ZVNlYXJjaCIsIm5vcm1hbGl6ZUhhc2giLCJyZXNvbHZlUGF0aCIsImhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCIsImhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoIiwicGF0aHMiLCJ2YWxpZE11dGF0aW9uTWV0aG9kc0FyciIsInZhbGlkUmVxdWVzdE1ldGhvZHNBcnIiLCJEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsImlzRGF0YVJvdXRlIiwiUm91dGVFcnJvckNvbnRleHQiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0Iiwic3RhdGljIiwicm91dGVyIiwiaG9va05hbWUiLCJjdHgiLCJ1c2VEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJIb29rIiwiVXNlTmF2aWdhdGVTdGFibGUiLCJ1c2VDdXJyZW50Um91dGVJZCIsIkRhdGFSb3V0ZXJTdGF0ZUhvb2siLCJhY3RpdmVSZWYiLCJuYXZpZ2F0ZSIsImZyb21Sb3V0ZUlkIiwidXNlTmF2aWdhdGVTdGFibGUiLCJkYXRhUm91dGVyQ29udGV4dCIsInJvdXRlUGF0aG5hbWVzSnNvbiIsImdvIiwicmVsYXRpdmUiLCJ1c2VOYXZpZ2F0ZVVuc3RhYmxlIiwidXNlUGFyYW1zIiwicm91dGVNYXRjaCIsIl90ZW1wMiIsInVzZVJvdXRlc0ltcGwiLCJkYXRhUm91dGVyU3RhdGUiLCJwYXJlbnRNYXRjaGVzIiwicGFyZW50UGFyYW1zIiwicGFyZW50UGF0aG5hbWVCYXNlIiwibG9jYXRpb25Gcm9tQ29udGV4dCIsIl9wYXJzZWRMb2NhdGlvbkFyZyRwYSIsInBhcnNlZExvY2F0aW9uQXJnIiwicmVuZGVyZWRNYXRjaGVzIiwiX2RhdGFSb3V0ZXJTdGF0ZTIiLCJfZGF0YVJvdXRlclN0YXRlIiwiZXJyb3JzIiwiZXJyb3JJbmRleCIsImZpbmRJbmRleCIsInJlZHVjZVJpZ2h0IiwiZXJyb3JFbGVtZW50IiwiZGVmYXVsdEVycm9yRWxlbWVudCIsImdldENoaWxkcmVuIiwiUmVuZGVyZWRSb3V0ZSIsInJvdXRlQ29udGV4dCIsIkVycm9yQm91bmRhcnkiLCJSZW5kZXJFcnJvckJvdW5kYXJ5IiwicmV2YWxpZGF0aW9uIiwiX3JlbmRlck1hdGNoZXMiLCJlbmNvZGVMb2NhdGlvbiIsIm5hdmlnYXRpb25UeXBlIiwiUG9wIiwiRGVmYXVsdEVycm9yQ29tcG9uZW50IiwiX3N0YXRlJGVycm9ycyIsInVzZURhdGFSb3V0ZXJTdGF0ZSIsIlVzZVJvdXRlRXJyb3IiLCJyb3V0ZUlkIiwidXNlUm91dGVFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJpbnRlcm5hbCIsImlzUm91dGVFcnJvclJlc3BvbnNlIiwicHJlU3R5bGVzIiwic3VwZXIiLCJlcnJvckluZm8iLCJzdGF0aWNDb250ZXh0IiwiX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQiLCJ1c2VSb3V0ZUNvbnRleHQiLCJ0aGlzUm91dGUiLCJSb3V0ZSIsIl9wcm9wcyIsIl9yZWY1IiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3RhdGljUHJvcCIsIm5hdmlnYXRpb25Db250ZXh0IiwibG9jYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsIlJvdXRlcyIsIl9yZWY2IiwiY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIiwidHJlZVBhdGgiLCJsb2FkZXIiLCJoYXNFcnJvckJvdW5kYXJ5Iiwic2hvdWxkUmV2YWxpZGF0ZSIsImhhbmRsZSIsIl9leGNsdWRlZDIiLCJWaWV3VHJhbnNpdGlvbkNvbnRleHQiLCJpc1RyYW5zaXRpb25pbmciLCJIYXNoUm91dGVyIiwiZnV0dXJlIiwiaGlzdG9yeVJlZiIsImdldExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsInZhbGlkYXRlTG9jYXRpb24iLCJ2NUNvbXBhdCIsImdsb2JhbEhpc3RvcnkiLCJoaXN0b3J5IiwiZ2V0SW5kZXgiLCJoYW5kbGVQb3AiLCJuZXh0SW5kZXgiLCJkZWx0YSIsImNyZWF0ZVVSTCIsIm9yaWdpbiIsIlVSTCIsInJlcGxhY2VTdGF0ZSIsImxpc3RlbiIsIlB1c2giLCJoaXN0b3J5U3RhdGUiLCJwdXNoU3RhdGUiLCJET01FeGNlcHRpb24iLCJSZXBsYWNlIiwiZ2V0VXJsQmFzZWRIaXN0b3J5Iiwic2V0U3RhdGVJbXBsIiwidjdfc3RhcnRUcmFuc2l0aW9uIiwibmV3U3RhdGUiLCJMaW5rIiwiX3JlZjciLCJhYnNvbHV0ZUhyZWYiLCJyZWxvYWREb2N1bWVudCIsInByZXZlbnRTY3JvbGxSZXNldCIsInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uIiwiaXNFeHRlcm5hbCIsImN1cnJlbnRVcmwiLCJ0YXJnZXRVcmwiLCJwcm90b2NvbCIsIl90ZW1wIiwiam9pbmVkUGF0aG5hbWUiLCJ1c2VIcmVmIiwiaW50ZXJuYWxPbkNsaWNrIiwicmVwbGFjZVByb3AiLCJpc01vZGlmaWVkRXZlbnQiLCJzaG91bGRQcm9jZXNzTGlua0NsaWNrIiwidXNlTGlua0NsaWNrSGFuZGxlciIsIk5hdkxpbmsiLCJfcmVmOCIsImFyaWFDdXJyZW50UHJvcCIsImNsYXNzTmFtZVByb3AiLCJzdHlsZVByb3AiLCJyb3V0ZXJTdGF0ZSIsIm9wdHMiLCJ2dENvbnRleHQiLCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlIiwiY3VycmVudFBhdGgiLCJjdXJyZW50TG9jYXRpb24iLCJuZXh0UGF0aCIsIm5leHRMb2NhdGlvbiIsIm5leHRMb2NhdGlvblBhdGhuYW1lIiwibmF2aWdhdGlvbiIsImVuZFNsYXNoUG9zaXRpb24iLCJpc0FjdGl2ZSIsImlzUGVuZGluZyIsInJlbmRlclByb3BzIiwiYXJpYUN1cnJlbnQiLCJCb29sZWFuIiwiUmVhY3QiLCJ0aGlzQXJnIiwia2luZE9mIiwidGhpbmciLCJraW5kT2ZUZXN0IiwidHlwZU9mVGVzdCIsImlzVW5kZWZpbmVkIiwiaXNBcnJheUJ1ZmZlciIsImlzU3RyaW5nIiwiaXNGdW5jdGlvbiIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0ZpbGVMaXN0IiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJhbGxPd25LZXlzIiwiZmluZEtleSIsIl9nbG9iYWwiLCJnbG9iYWxUaGlzIiwiZ2xvYmFsIiwiaXNDb250ZXh0RGVmaW5lZCIsImlzVHlwZWRBcnJheSIsIlR5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiaXNIVE1MRm9ybSIsImlzUmVnRXhwIiwicmVkdWNlRGVzY3JpcHRvcnMiLCJyZWR1Y2VyIiwiZGVzY3JpcHRvcnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwicmVkdWNlZERlc2NyaXB0b3JzIiwicmV0IiwiZGVmaW5lUHJvcGVydGllcyIsIkFMUEhBIiwiRElHSVQiLCJBTFBIQUJFVCIsIkFMUEhBX0RJR0lUIiwiaXNBc3luY0ZuIiwiaXNCdWZmZXIiLCJpc0Zvcm1EYXRhIiwia2luZCIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzQm9vbGVhbiIsImlzU3RyZWFtIiwicGlwZSIsIm1lcmdlIiwiY2FzZWxlc3MiLCJhc3NpZ25WYWx1ZSIsInRhcmdldEtleSIsInN0cmlwQk9NIiwiaW5oZXJpdHMiLCJzdXBlckNvbnN0cnVjdG9yIiwidG9GbGF0T2JqZWN0Iiwic291cmNlT2JqIiwiZGVzdE9iaiIsInByb3BGaWx0ZXIiLCJtZXJnZWQiLCJzZWFyY2hTdHJpbmciLCJhcnIiLCJmb3JFYWNoRW50cnkiLCJwYWlyIiwibWF0Y2hBbGwiLCJyZWdFeHAiLCJoYXNPd25Qcm9wIiwiZnJlZXplTWV0aG9kcyIsIndyaXRhYmxlIiwidG9PYmplY3RTZXQiLCJhcnJheU9yU3RyaW5nIiwiZGVmaW5lIiwidG9DYW1lbENhc2UiLCJub29wIiwidG9GaW5pdGVOdW1iZXIiLCJpc0Zpbml0ZSIsImdlbmVyYXRlU3RyaW5nIiwiYWxwaGFiZXQiLCJpc1NwZWNDb21wbGlhbnRGb3JtIiwidG9KU09OT2JqZWN0IiwidmlzaXQiLCJyZWR1Y2VkVmFsdWUiLCJpc1RoZW5hYmxlIiwiQXhpb3NFcnJvciIsInJlcXVlc3QiLCJyZXNwb25zZSIsImNhcHR1cmVTdGFja1RyYWNlIiwidXRpbHMiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImN1c3RvbVByb3BzIiwiYXhpb3NFcnJvciIsImNhdXNlIiwiaXNWaXNpdGFibGUiLCJyZW1vdmVCcmFja2V0cyIsInJlbmRlcktleSIsImRvdHMiLCJwcmVkaWNhdGVzIiwiZm9ybURhdGEiLCJUeXBlRXJyb3IiLCJtZXRhVG9rZW5zIiwiaW5kZXhlcyIsIm9wdGlvbiIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsInVzZUJsb2IiLCJCbG9iIiwiY29udmVydFZhbHVlIiwidG9JU09TdHJpbmciLCJCdWZmZXIiLCJpc0ZsYXRBcnJheSIsImV4cG9zZWRIZWxwZXJzIiwiYnVpbGQiLCJlbmNvZGUiLCJjaGFyTWFwIiwiQXhpb3NVUkxTZWFyY2hQYXJhbXMiLCJfcGFpcnMiLCJlbmNvZGVyIiwiX2VuY29kZSIsImJ1aWxkVVJMIiwic2VyaWFsaXplRm4iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVkUGFyYW1zIiwiaGFzaG1hcmtJbmRleCIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwic3luY2hyb25vdXMiLCJydW5XaGVuIiwiZWplY3QiLCJjbGVhciIsInNpbGVudEpTT05QYXJzaW5nIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJjbGFyaWZ5VGltZW91dEVycm9yIiwiaXNCcm93c2VyIiwiVVJMU2VhcmNoUGFyYW1zIiwicHJvdG9jb2xzIiwiaGFzQnJvd3NlckVudiIsImhhc1N0YW5kYXJkQnJvd3NlckVudiIsInByb2R1Y3QiLCJoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYiLCJXb3JrZXJHbG9iYWxTY29wZSIsImltcG9ydFNjcmlwdHMiLCJidWlsZFBhdGgiLCJpc051bWVyaWNLZXkiLCJpc0xhc3QiLCJhcnJheVRvT2JqZWN0IiwicGFyc2VQcm9wUGF0aCIsImRlZmF1bHRzIiwidHJhbnNpdGlvbmFsIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlcXVlc3QiLCJoZWFkZXJzIiwiY29udGVudFR5cGUiLCJnZXRDb250ZW50VHlwZSIsImhhc0pTT05Db250ZW50VHlwZSIsImlzT2JqZWN0UGF5bG9hZCIsInNldENvbnRlbnRUeXBlIiwicGxhdGZvcm0iLCJoZWxwZXJzIiwiaXNOb2RlIiwidG9VUkxFbmNvZGVkRm9ybSIsImZvcm1TZXJpYWxpemVyIiwiX0Zvcm1EYXRhIiwiZW52IiwicmF3VmFsdWUiLCJwYXJzZXIiLCJzdHJpbmdpZnlTYWZlbHkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsIkpTT05SZXF1ZXN0ZWQiLCJyZXNwb25zZVR5cGUiLCJzdHJpY3RKU09OUGFyc2luZyIsIkVSUl9CQURfUkVTUE9OU0UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsIm1ldGhvZCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwiJGludGVybmFscyIsIm5vcm1hbGl6ZUhlYWRlciIsImhlYWRlciIsIm5vcm1hbGl6ZVZhbHVlIiwibWF0Y2hIZWFkZXJWYWx1ZSIsImlzSGVhZGVyTmFtZUZpbHRlciIsIkF4aW9zSGVhZGVycyIsInZhbHVlT3JSZXdyaXRlIiwicmV3cml0ZSIsInNldEhlYWRlciIsIl92YWx1ZSIsIl9oZWFkZXIiLCJfcmV3cml0ZSIsImxIZWFkZXIiLCJzZXRIZWFkZXJzIiwicmF3SGVhZGVycyIsInBhcnNlSGVhZGVycyIsInRva2VucyIsInRva2Vuc1JFIiwicGFyc2VUb2tlbnMiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwibm9ybWFsaXplIiwiZm9ybWF0Iiwibm9ybWFsaXplZCIsImZvcm1hdEhlYWRlciIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJjb21wdXRlZCIsImFjY2Vzc29yIiwiYWNjZXNzb3JzIiwiZGVmaW5lQWNjZXNzb3IiLCJhY2Nlc3Nvck5hbWUiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiYnVpbGRBY2Nlc3NvcnMiLCJtYXBwZWQiLCJoZWFkZXJWYWx1ZSIsInRyYW5zZm9ybURhdGEiLCJmbnMiLCJpc0NhbmNlbCIsIl9fQ0FOQ0VMX18iLCJDYW5jZWxlZEVycm9yIiwiRVJSX0NBTkNFTEVEIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJyZWFkIiwiYnVpbGRGdWxsUGF0aCIsImJhc2VVUkwiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImNvbWJpbmVVUkxzIiwibXNpZSIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwib3JpZ2luVVJMIiwicmVzb2x2ZVVSTCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJyZXF1ZXN0VVJMIiwicHJvZ3Jlc3NFdmVudFJlZHVjZXIiLCJpc0Rvd25sb2FkU3RyZWFtIiwiYnl0ZXNOb3RpZmllZCIsIl9zcGVlZG9tZXRlciIsInNhbXBsZXNDb3VudCIsImJ5dGVzIiwidGltZXN0YW1wcyIsImZpcnN0U2FtcGxlVFMiLCJjaHVua0xlbmd0aCIsInN0YXJ0ZWRBdCIsImJ5dGVzQ291bnQiLCJwYXNzZWQiLCJsb2FkZWQiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJwcm9ncmVzc0J5dGVzIiwicmF0ZSIsInByb2dyZXNzIiwiZXN0aW1hdGVkIiwiWE1MSHR0cFJlcXVlc3QiLCJyZWplY3QiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwib25DYW5jZWxlZCIsIndpdGhYU1JGVG9rZW4iLCJjYW5jZWxUb2tlbiIsInVuc3Vic2NyaWJlIiwic2lnbmFsIiwiYXV0aCIsInVzZXJuYW1lIiwiZnVsbFBhdGgiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJFUlJfQkFEX1JFUVVFU1QiLCJzZXR0bGUiLCJyZXNwb25zZVRleHQiLCJwYXJhbXNTZXJpYWxpemVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwib25hYm9ydCIsIkVDT05OQUJPUlRFRCIsIm9uZXJyb3IiLCJFUlJfTkVUV09SSyIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJFVElNRURPVVQiLCJpc1VSTFNhbWVPcmlnaW4iLCJ4c3JmVmFsdWUiLCJjb29raWVzIiwic2V0UmVxdWVzdEhlYWRlciIsIndpdGhDcmVkZW50aWFscyIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWwiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJwYXJzZVByb3RvY29sIiwic2VuZCIsImtub3duQWRhcHRlcnMiLCJodHRwIiwieGhyIiwicmVuZGVyUmVhc29uIiwicmVhc29uIiwiaXNSZXNvbHZlZEhhbmRsZSIsImFkYXB0ZXJzIiwibmFtZU9yQWRhcHRlciIsInJlamVjdGVkUmVhc29ucyIsInJlYXNvbnMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImRpc3BhdGNoUmVxdWVzdCIsImhlYWRlcnNUb09iamVjdCIsIm1lcmdlQ29uZmlnIiwiY29uZmlnMSIsImNvbmZpZzIiLCJnZXRNZXJnZWRWYWx1ZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwidGltZW91dE1lc3NhZ2UiLCJkZWNvbXByZXNzIiwiYmVmb3JlUmVkaXJlY3QiLCJ0cmFuc3BvcnQiLCJodHRwQWdlbnQiLCJodHRwc0FnZW50Iiwic29ja2V0UGF0aCIsInJlc3BvbnNlRW5jb2RpbmciLCJjb25maWdWYWx1ZSIsInZhbGlkYXRvcnMiLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2YWxpZGF0b3IiLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIkVSUl9ERVBSRUNBVEVEIiwiYXNzZXJ0T3B0aW9ucyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkVSUl9CQURfT1BUSU9OX1ZBTFVFIiwiRVJSX0JBRF9PUFRJT04iLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJib29sZWFuIiwiZnVuY3Rpb24iLCJjb250ZXh0SGVhZGVycyIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJwcm9taXNlIiwiY2hhaW4iLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJnZXRVcmkiLCJnZW5lcmF0ZUhUVFBNZXRob2QiLCJpc0Zvcm0iLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJfbGlzdGVuZXJzIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIkh0dHBTdGF0dXNDb2RlIiwiQ29udGludWUiLCJTd2l0Y2hpbmdQcm90b2NvbHMiLCJQcm9jZXNzaW5nIiwiRWFybHlIaW50cyIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJWRVJTSU9OIiwidG9Gb3JtRGF0YSIsIkNhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiZm9ybVRvSlNPTiIsImdldEFkYXB0ZXIiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwiYXN5bmNJdGVyYXRvciIsIndyYXAiLCJHZW5lcmF0b3IiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsIl9fYXdhaXQiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsInJldmVyc2UiLCJydmFsIiwiY29tcGxldGUiLCJmaW5pc2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfc2xpY2VkVG9BcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsImFycjIiLCJfdXNlU3RhdGUyIiwic2V0RXJyb3IiLCJfdXNlU3RhdGU0IiwiZmFjdHMiLCJzZXRGYWN0cyIsImdldEZhY3RzIiwiX2NhbGxlZSIsInQwIiwiZGF0YU9iaiIsImZhY3QiLCJSYW5kb21GYWN0IiwiZWxldmF0aW9uIiwiYWxwaGFWYWx1ZSIsImdldFBhcGVyVXRpbGl0eUNsYXNzIiwiUGFwZXJSb290Iiwic3F1YXJlIiwicm91bmRlZCIsIl90aGVtZSR2YXJzJG92ZXJsYXlzIiwiYmFja2dyb3VuZEltYWdlIiwib3ZlcmxheXMiLCJvd25lcldpbmRvdyIsIm91dGVySGVpZ2h0U3R5bGUiLCJUZXh0YXJlYUF1dG9zaXplIiwiZm9yd2FyZGVkUmVmIiwib25DaGFuZ2UiLCJtYXhSb3dzIiwibWluUm93cyIsImlzQ29udHJvbGxlZCIsImlucHV0UmVmIiwic2hhZG93UmVmIiwicmVuZGVycyIsImdldFVwZGF0ZWRTdGF0ZSIsImNvbXB1dGVkU3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiaW5wdXRTaGFsbG93IiwicGxhY2Vob2xkZXIiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlclRvcFdpZHRoIiwiaW5uZXJIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJzaW5nbGVSb3dIZWlnaHQiLCJvdXRlckhlaWdodCIsInVwZGF0ZVN0YXRlIiwicHJldlN0YXRlIiwic3luY0hlaWdodCIsImhhbmRsZVJlc2l6ZSIsInN5bmNIZWlnaHRXaXRoRmx1c2hTeW5jIiwiZGVib3VuY2VIYW5kbGVSZXNpemUiLCJ3YWl0IiwiZGVib3VuY2VkIiwiZGVib3VuY2UiLCJjb250YWluZXJXaW5kb3ciLCJyZXNpemVPYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwickFGIiwiZGlzY29ubmVjdCIsInJvd3MiLCJpc0hvc3RDb21wb25lbnQiLCJHbG9iYWxTdHlsZXMiLCJnbG9iYWxTdHlsZXMiLCJoYXNWYWx1ZSIsImdldElucHV0QmFzZVV0aWxpdHlDbGFzcyIsIklucHV0QmFzZVJvb3QiLCJmb3JtQ29udHJvbCIsInN0YXJ0QWRvcm5tZW50IiwiYWRvcm5lZFN0YXJ0IiwiZW5kQWRvcm5tZW50IiwiYWRvcm5lZEVuZCIsInNpemVTbWFsbCIsIm11bHRpbGluZSIsImhpZGRlbkxhYmVsIiwiSW5wdXRCYXNlQ29tcG9uZW50IiwiaW5wdXRTaXplU21hbGwiLCJpbnB1dE11bHRpbGluZSIsImlucHV0VHlwZVNlYXJjaCIsImlucHV0QWRvcm5lZFN0YXJ0IiwiaW5wdXRBZG9ybmVkRW5kIiwiaW5wdXRIaWRkZW5MYWJlbCIsImlucHV0UGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlckhpZGRlbiIsInBsYWNlaG9sZGVyVmlzaWJsZSIsImZvbnQiLCJhbmltYXRpb25EdXJhdGlvbiIsIldlYmtpdFRleHRGaWxsQ29sb3IiLCJyZXNpemUiLCJpbnB1dEdsb2JhbFN0eWxlcyIsIl9zbG90UHJvcHMkaW5wdXQiLCJhcmlhRGVzY3JpYmVkYnkiLCJhdXRvQ29tcGxldGUiLCJjb21wb25lbnRzUHJvcHMiLCJkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzIiwiaW5wdXRDb21wb25lbnQiLCJpbnB1dFByb3BzIiwiaW5wdXRQcm9wc1Byb3AiLCJpbnB1dFJlZlByb3AiLCJyZW5kZXJTdWZmaXgiLCJ2YWx1ZVByb3AiLCJoYW5kbGVJbnB1dFJlZldhcm5pbmciLCJoYW5kbGVJbnB1dFJlZiIsInNldEZvY3VzZWQiLCJtdWlGb3JtQ29udHJvbCIsImZjcyIsInN0YXRlcyIsImZvcm1Db250cm9sU3RhdGUiLCJvbkZpbGxlZCIsIm9uRW1wdHkiLCJjaGVja0RpcnR5IiwiU1NSIiwiaXNGaWxsZWQiLCJJbnB1dENvbXBvbmVudCIsInNldEFkb3JuZWRTdGFydCIsIlJvb3QiLCJyb290UHJvcHMiLCJJbnB1dCIsIm9uQW5pbWF0aW9uU3RhcnQiLCJnZXRJY29uQnV0dG9uVXRpbGl0eUNsYXNzIiwiSWNvbkJ1dHRvblJvb3QiLCJlZGdlIiwiYWN0aXZlQ2hhbm5lbCIsIl9wYWxldHRlIiwic2VhcmNoU3RyaW5nVmFsdWUiLCJzZXRTZWFyY2hTdHJpbmdGbiIsIl90b1Byb3BlcnR5S2V5IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsInJlcyIsInNvdXJjZVN5bWJvbEtleXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImJvdW5kMDEiLCJpc09uZVBvaW50WmVybyIsImlzUGVyY2VudCIsImlzUGVyY2VudGFnZSIsImNsYW1wMDEiLCJib3VuZEFscGhhIiwiY29udmVydFRvUGVyY2VudGFnZSIsInJnYlRvSHNsIiwiaHVlMnJnYiIsInJnYlRvSHN2IiwiYWxsb3czQ2hhciIsImhleCIsImNvbnZlcnRIZXhUb0RlY2ltYWwiLCJwYXJzZUludEZyb21IZXgiLCJuYW1lcyIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZGVucm9kIiwiZ29sZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyYmx1c2giLCJsYXZlbmRlciIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImlucHV0VG9SR0IiLCJuYW1lZCIsIm1hdGNoZXJzIiwicmdiYSIsImhzbCIsImhzbGEiLCJoc3YiLCJoc3ZhIiwiaGV4OCIsImhleDYiLCJoZXg0IiwiaGV4MyIsInN0cmluZ0lucHV0VG9PYmplY3QiLCJpc1ZhbGlkQ1NTVW5pdCIsInJnYlRvUmdiIiwibW9kIiwiaHN2VG9SZ2IiLCJDU1NfVU5JVCIsIlBFUk1JU1NJVkVfTUFUQ0gzIiwiUEVSTUlTU0lWRV9NQVRDSDQiLCJodWVTdGVwIiwic2F0dXJhdGlvblN0ZXAiLCJzYXR1cmF0aW9uU3RlcDIiLCJicmlnaHRuZXNzU3RlcDEiLCJicmlnaHRuZXNzU3RlcDIiLCJsaWdodENvbG9yQ291bnQiLCJkYXJrQ29sb3JDb3VudCIsImRhcmtDb2xvck1hcCIsInRvSHN2IiwidG9IZXgiLCJfcmVmMiIsImdldEh1ZSIsImh1ZSIsImdldFNhdHVyYXRpb24iLCJzYXR1cmF0aW9uIiwicGF0dGVybnMiLCJwQ29sb3IiLCJjb2xvclN0cmluZyIsIl9oc3YiLCJfY29sb3JTdHJpbmciLCJfcmVmMyIsInJnYjEiLCJyZ2IyIiwicHJlc2V0UHJpbWFyeUNvbG9ycyIsInZvbGNhbm8iLCJnZWVrYmx1ZSIsInByZXNldFBhbGV0dGVzIiwicHJlc2V0RGFya1BhbGV0dGVzIiwib3duS2V5cyIsImNhblVzZURvbSIsIkFQUEVORF9PUkRFUiIsIkFQUEVORF9QUklPUklUWSIsIk1BUktfS0VZIiwiY29udGFpbmVyQ2FjaGUiLCJnZXRNYXJrIiwiZ2V0Q29udGFpbmVyIiwiYXR0YWNoVG8iLCJmaW5kU3R5bGVzIiwiaW5qZWN0Q1NTIiwiY3NwIiwiX29wdGlvbiRwcmlvcml0eSIsIm1lcmdlZE9yZGVyIiwiZ2V0T3JkZXIiLCJpc1ByZXBlbmRRdWV1ZSIsInN0eWxlTm9kZSIsImV4aXN0U3R5bGUiLCJub2RlUHJpb3JpdHkiLCJmaW5kRXhpc3ROb2RlIiwiZmluZCIsInJlbW92ZUNTUyIsImV4aXN0Tm9kZSIsInVwZGF0ZUNTUyIsImNhY2hlZFJlYWxDb250YWluZXIiLCJwbGFjZWhvbGRlclN0eWxlIiwic3luY1JlYWxDb250YWluZXIiLCJfb3B0aW9uJGNzcCIsIl9vcHRpb24kY3NwMiIsIl9vcHRpb24kY3NwMyIsIm5ld05vZGUiLCJnZXRSb290IiwiZWxlIiwiX2VsZSRnZXRSb290Tm9kZSIsImdldFJvb3ROb2RlIiwid2FybmVkIiwicHJlV2FybmluZ0ZucyIsInZhbGlkIiwibm90ZSIsInByZU1lc3NhZ2UiLCJyZXNldFdhcm5lZCIsIm5vdGVPbmNlIiwiaXNJY29uRGVmaW5pdGlvbiIsIm5vcm1hbGl6ZUF0dHJzIiwiYXR0cnMiLCJjbGFzcyIsImdldFNlY29uZGFyeUNvbG9yIiwicHJpbWFyeUNvbG9yIiwibm9ybWFsaXplVHdvVG9uZUNvbG9ycyIsInR3b1RvbmVDb2xvciIsInR3b1RvbmVDb2xvclBhbGV0dGUiLCJzZWNvbmRhcnlDb2xvciIsImNhbGN1bGF0ZWQiLCJJY29uQmFzZSIsImVsZVJlZiIsIl91c2VDb250ZXh0IiwicHJlZml4Q2xzIiwibWVyZ2VkU3R5bGVTdHIiLCJyZXN0UHJvcHMiLCJzdmdSZWYiLCJzaGFkb3dSb290IiwiU2hhZG93Um9vdCIsImluU2hhZG93IiwiZ2V0VHdvVG9uZUNvbG9ycyIsInNldFR3b1RvbmVDb2xvcnMiLCJzZXRUd29Ub25lQ29sb3IiLCJfbm9ybWFsaXplVHdvVG9uZUNvbG8yIiwiSWNvbiIsIl9jbGFzc05hbWVzIiwic3BpbiIsInJvdGF0ZSIsIl9SZWFjdCR1c2VDb250ZXh0IiwiX1JlYWN0JHVzZUNvbnRleHQkcHJlIiwicm9vdENsYXNzTmFtZSIsImNsYXNzU3RyaW5nIiwiaWNvblRhYkluZGV4Iiwic3ZnU3R5bGUiLCJtc1RyYW5zZm9ybSIsImdldFR3b1RvbmVDb2xvciIsIkFudGRJY29uIiwiZ2xvYmFsQ3R4IiwiR2xvYmFsQ29udGV4dCIsInVzZU5hdmlnYXRlIiwiaGFuZGxlQ2xpY2tTZWFyY2giLCJsaW5rVG8iLCJQYXBlciIsIklucHV0QmFzZSIsIkljb25CdXR0b24iLCJUZWFtT3V0bGluZWQiLCJDb3B5cmlnaHRPdXRsaW5lZCIsIlRyYW5zbGF0aW9uT3V0bGluZWQiLCJIaXN0b3J5T3V0bGluZWQiLCJSZWFkT3V0bGluZWQiLCJVc2VyT3V0bGluZWQiLCJRdWVzdGlvbkNpcmNsZU91dGxpbmVkIiwiU2VhcmNoQm94IiwiU2VhcmNoTG9nbyIsIkRpY3Rpb25hcnkiLCJTZWFyY2hBZHZpY2UiLCJTZWFyY2hIaXN0b3J5IiwiU2VhcmNoSGlzdG9yeUV2ZW50cyIsIlNlYXJjaFBlcnNvbiIsImNzc1VuaXQiLCJjbSIsIm1tIiwiZW0iLCJleCIsInJlbSIsInZ3Iiwidm1pbiIsInZtYXgiLCJjc3NWYWx1ZSIsImxlbmd0aFdpdGh1bml0IiwidmFsdWVTdHJpbmciLCJwYXJzZUxlbmd0aEFuZFVuaXQiLCJjcmVhdGVBbmltYXRpb24iLCJsb2FkZXJOYW1lIiwiZnJhbWVzIiwic3VmZml4Iiwic3R5bGVFbCIsImtleUZyYW1lcyIsIl9fYXNzaWduIiwicHVmZiIsIl9hIiwiX2IiLCJsb2FkaW5nIiwiX2MiLCJfZCIsInNwZWVkTXVsdGlwbGllciIsIl9lIiwiY3NzT3ZlcnJpZGUiLCJfZiIsImFkZGl0aW9uYWxwcm9wcyIsIl9fcmVzdCIsIndyYXBwZXIiLCJhbmltYXRpb25GaWxsTW9kZSIsImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uIiwiYW5pbWF0aW9uRGVsYXkiLCJQdWZmTG9hZGVyIiwibG9nbyIsInNldExvZ28iLCJfdXNlU3RhdGU2IiwicmVzdWx0cyIsInNldFJlc3VsdHMiLCJfdXNlU3RhdGU4IiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwiZ2V0TG9nb3MiLCJfeCIsIkxvYWRlciIsIlNlYXJjaFBsYWNlIiwiY29sU3BhbiIsInRpY2tlciIsImltYWdlIiwiRm9vdGVycyIsImRpY3Rpb25hcnkiLCJzZXREaWN0aW9uYXJ5IiwiZ2V0RGljdGlvbmFyeSIsIndvcmQiLCJjZWxlYnJpdHkiLCJzZXRDZWxlYnJpdHkiLCJnZXRDZWxlYnMiLCJfZGF0YU9iaiRvY2N1cGF0aW9uIiwiX2RhdGFPYmokb2NjdXBhdGlvbjIiLCJfZGF0YU9iaiRvY2N1cGF0aW9uMyIsIl9kYXRhT2JqJG9jY3VwYXRpb240IiwiX2RhdGFPYmokb2NjdXBhdGlvbjUiLCJfZGF0YU9iaiRvY2N1cGF0aW9uNiIsIl9kYXRhT2JqJG9jY3VwYXRpb243IiwiX2RhdGFPYmokb2NjdXBhdGlvbjgiLCJfZGF0YU9iaiRvY2N1cGF0aW9uOSIsIl9kYXRhT2JqJG9jY3VwYXRpb24xMCIsIl9kYXRhT2JqJG9jY3VwYXRpb24xMSIsIl9kYXRhT2JqJG9jY3VwYXRpb24xMiIsIl9kYXRhT2JqJG9jY3VwYXRpb24xMyIsImdlbmRlciIsImFnZSIsIm9jY3VwYXRpb24iLCJiaXJ0aGRheSIsImRlYXRoIiwibmF0aW9uYWxpdHkiLCJuZXRfd29ydGgiLCJzZXRIaXN0b3J5IiwiZ2V0SGlzdG9yeSIsImRheSIsInllYXIiLCJoaXN0b3J5RXZlbnRzIiwic2V0SGlzdG9yeUV2ZW50cyIsImdldEhpc3RvcnlFdmVudHMiLCJwZXJzb25zIiwic2V0UGVyc29ucyIsImdldFBlcnNvbiIsImhhbmRsZUNsaWNrIiwicGVyc29uTmFtZSIsIkxpbmtUbyIsInRpdGxlIiwiYm9ybiIsImRpZWQiLCJfZGF0YU9iaiRpbmZvJGdlbnJlcyIsIl9kYXRhT2JqJGluZm8kZ2VucmUiLCJfZGF0YU9iaiRpbmZvJGdlbnJlczIiLCJfZGF0YU9iaiRpbmZvJGdlbnJlMiIsIl9kYXRhT2JqJGluZm8kZ2VucmVzMyIsIl9kYXRhT2JqJGluZm8kZ2VucmUzIiwiX2RhdGFPYmokaW5mbyRnZW5yZXM0IiwiX2RhdGFPYmokaW5mbyRnZW5yZTQiLCJfZGF0YU9iaiRpbmZvJGdlbnJlczUiLCJfZGF0YU9iaiRpbmZvJGdlbnJlNSIsIl9kYXRhT2JqJGluZm8kZ2VucmVzNiIsIl9kYXRhT2JqJGluZm8kZ2VucmU2IiwiX2RhdGFPYmokaW5mbyRnZW5yZXM3IiwiX2RhdGFPYmokaW5mbyRnZW5yZTciLCJfZGF0YU9iaiRpbmZvJGdlbnJlczgiLCJfZGF0YU9iaiRpbmZvJGdlbnJlOCIsIl9kYXRhT2JqJGluZm8kZ2VucmVzOSIsIl9kYXRhT2JqJGluZm8kZ2VucmU5IiwiX2RhdGFPYmokaW5mbyIsIm5hdGl2ZV9uYW1lIiwibmlja25hbWVzIiwiYmlydGhfbmFtZSIsIm90aGVyX25hbWVzIiwib3RoZXJfcG9zdHMiLCJwcmVkZWNlc3NvciIsInByZWNlZGVkX2J5Iiwic3VjY2Vzc29yIiwic3VjY2VlZGVkX2J5IiwiZmllbGRzIiwibW92ZW1lbnQiLCJnZW5yZXMiLCJnZW5yZSIsImRpc2NpcGxpbmUiLCJwcm9mZXNzaW9uIiwia25vd25fZm9yIiwibm90YWJsZV93b3JrIiwiYXNzb2NpYXRlZF9hY3RzIiwiYWxsZWdpYW5jZSIsImNpdGl6ZW5zaGlwIiwicmVzaWRlbmNlIiwicmVzaWRlbmNlcyIsInJlc3RpbmdfcGxhY2UiLCJidXJpYWwiLCJidXJpZWQiLCJjYXVzZV9vZl9kZWF0aCIsIndlaWdodCIsImF3YXJkcyIsIm5vdGFibGVfYXdhcmRzIiwib2ZmaWNlIiwibm90YWJsZV93b3JrcyIsImNvbnZpY3Rpb25zIiwicG9saXRpY2FsX3BhcnR5Iiwib3RoZXJfcG9saXRpY2FsYWZmaWxpYXRpb25zIiwib3JnYW5pemF0aW9uIiwicmVsaWdpb24iLCJzdGFuY2UiLCJjaHVyY2giLCJlZHVjYXRpb24iLCJhbG1hX21hdGVyIiwidW5pdmVyc2l0eSIsInJhbmsiLCJ5ZWFyc19vZl9zZXJ2aWNlIiwid2FycyIsImNvbmZsaWN0cyIsImJhdHRsZXMiLCJzcG91c2UiLCJzcG91c2VzIiwicGFyZW50cyIsImZhdGhlciIsIm1vdGhlciIsInJlbGF0aXZlcyIsIm5vdGFibGVfcmVsYXRpdmVzIiwiZmFtaWx5IiwiaXNzdWUiLCJ5ZWFyc19hY3RpdmUiLCJhY3RpdmVfeWVhcnMiLCJyZWlnbiIsIndlYnNpdGUiLCJoYW5kbGVMYW5ndWFnZSIsImFkdmljZSIsInNldEFkdmljZSIsImdldEFkdmljZXMiLCJzbGlwcyIsImRhdGFBZHYiLCJpdGVyIiwidXNlRXZlbnQiLCJmblJlZiIsIm1lbW9GbiIsIl9mblJlZiRjdXJyZW50IiwidXNlSW50ZXJuYWxMYXlvdXRFZmZlY3QiLCJmaXJzdE1vdW50UmVmIiwidXNlTGF5b3V0VXBkYXRlRWZmZWN0IiwiZmlyc3RNb3VudCIsInVzZVNhZmVTdGF0ZSIsImRlc3Ryb3lSZWYiLCJfUmVhY3QkdXNlU3RhdGUyIiwiaWdub3JlRGVzdHJveSIsImtlZXBFbXB0eSIsIl9jbGFzc0NhbGxDaGVjayIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfaW5oZXJpdHMiLCJfZ2V0UHJvdG90eXBlT2YiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIlN1cGVyIiwiTmV3VGFyZ2V0IiwiRG9tV3JhcHBlciIsIl9zdXBlciIsIlNUQVRVU19OT05FIiwiU1RBVFVTX0FQUEVBUiIsIlNUQVRVU19FTlRFUiIsIlNUQVRVU19MRUFWRSIsIlNURVBfTk9ORSIsIlNURVBfUFJFUEFSRSIsIlNURVBfU1RBUlQiLCJTVEVQX0FDVElWRSIsIlNURVBfQUNUSVZBVEVEIiwiU1RFUF9QUkVQQVJFRCIsIm1ha2VQcmVmaXhNYXAiLCJldmVudE5hbWUiLCJwcmVmaXhlcyIsImRvbVN1cHBvcnQiLCJ3aW4iLCJ2ZW5kb3JQcmVmaXhlcyIsIl9kb2N1bWVudCRjcmVhdGVFbGVtZSIsInByZWZpeGVkRXZlbnROYW1lcyIsImdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lIiwicHJlZml4TWFwIiwic3R5bGVQcm9wTGlzdCIsImludGVybmFsQW5pbWF0aW9uRW5kTmFtZSIsImludGVybmFsVHJhbnNpdGlvbkVuZE5hbWUiLCJzdXBwb3J0VHJhbnNpdGlvbiIsImFuaW1hdGlvbkVuZE5hbWUiLCJ0cmFuc2l0aW9uRW5kTmFtZSIsImdldFRyYW5zaXRpb25OYW1lIiwidHJhbnNpdGlvbk5hbWUiLCJ0cmFuc2l0aW9uVHlwZSIsInJhZiIsImNhZiIsIm51bSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZlVVSUQiLCJyYWZJZHMiLCJjbGVhbnVwIiwid3JhcHBlclJhZiIsImNhbGxSZWYiLCJsZWZ0VGltZXMiLCJyZWFsSWQiLCJGVUxMX1NURVBfUVVFVUUiLCJTSU1QTEVfU1RFUF9RVUVVRSIsInRyYW5zaXRpb25TdXBwb3J0IiwiQ1NTTW90aW9uIiwiX3Byb3BzJHZpc2libGUiLCJ2aXNpYmxlIiwiX3Byb3BzJHJlbW92ZU9uTGVhdmUiLCJyZW1vdmVPbkxlYXZlIiwiZm9yY2VSZW5kZXIiLCJtb3Rpb25OYW1lIiwibGVhdmVkQ2xhc3NOYW1lIiwiZXZlbnRQcm9wcyIsInN1cHBvcnRNb3Rpb24iLCJjb250ZXh0TW90aW9uIiwiaXNTdXBwb3J0VHJhbnNpdGlvbiIsIm1vdGlvbiIsIm5vZGVSZWYiLCJ3cmFwcGVyTm9kZVJlZiIsIl91c2VTdGF0dXMiLCJnZXRFbGVtZW50IiwiX3JlZiRtb3Rpb25FbnRlciIsIm1vdGlvbkVudGVyIiwiX3JlZiRtb3Rpb25BcHBlYXIiLCJtb3Rpb25BcHBlYXIiLCJfcmVmJG1vdGlvbkxlYXZlIiwibW90aW9uTGVhdmUiLCJtb3Rpb25EZWFkbGluZSIsIm1vdGlvbkxlYXZlSW1tZWRpYXRlbHkiLCJvbkFwcGVhclByZXBhcmUiLCJvbkVudGVyUHJlcGFyZSIsIm9uTGVhdmVQcmVwYXJlIiwib25BcHBlYXJTdGFydCIsIm9uRW50ZXJTdGFydCIsIm9uTGVhdmVTdGFydCIsIm9uQXBwZWFyQWN0aXZlIiwib25FbnRlckFjdGl2ZSIsIm9uTGVhdmVBY3RpdmUiLCJvbkFwcGVhckVuZCIsIm9uRW50ZXJFbmQiLCJvbkxlYXZlRW5kIiwib25WaXNpYmxlQ2hhbmdlZCIsImFzeW5jVmlzaWJsZSIsInNldEFzeW5jVmlzaWJsZSIsInNldFN0YXR1cyIsInNldFN0eWxlIiwibW91bnRlZFJlZiIsImRlYWRsaW5lUmVmIiwiZ2V0RG9tRWxlbWVudCIsInVwZGF0ZU1vdGlvbkVuZFN0YXR1cyIsIm9uSW50ZXJuYWxNb3Rpb25FbmQiLCJkZWFkbGluZSIsImNhbkVuZCIsImN1cnJlbnRBY3RpdmUiLCJwYXRjaE1vdGlvbkV2ZW50cyIsImNhY2hlRWxlbWVudFJlZiIsImNhbGxiYWNrUmVmIiwicmVtb3ZlTW90aW9uRXZlbnRzIiwidXNlRG9tTW90aW9uRXZlbnRzIiwiZ2V0RXZlbnRIYW5kbGVycyIsInRhcmdldFN0YXR1cyIsIl9yZWY0IiwiZXZlbnRIYW5kbGVycyIsIl91c2VTdGVwUXVldWUyIiwicHJlcGFyZU9ubHkiLCJzZXRTdGVwIiwiX3VzZU5leHRGcmFtZSIsIm5leHRGcmFtZVJlZiIsImNhbmNlbE5leHRGcmFtZSIsIm5leHRGcmFtZSIsIm5leHRGcmFtZUlkIiwiaXNDYW5jZWxlZCIsInVzZU5leHRGcmFtZSIsIl91c2VOZXh0RnJhbWUyIiwiU1RFUF9RVUVVRSIsIm5leHRTdGVwIiwiZG9OZXh0IiwidXNlU3RlcFF1ZXVlIiwibmV3U3RlcCIsIm9uUHJlcGFyZSIsIl9ldmVudEhhbmRsZXJzJHN0ZXAiLCJzdGFydFN0ZXAiLCJuZXh0U3RhdHVzIiwibmV4dEV2ZW50SGFuZGxlcnMiLCJmaXJzdE1vdW50Q2hhbmdlUmVmIiwibWVyZ2VkU3R5bGUiLCJ1c2VTdGF0dXMiLCJTVkdFbGVtZW50IiwiaXNET00iLCJfdXNlU3RhdHVzMiIsInN0YXR1c1N0ZXAiLCJzdGF0dXNTdHlsZSIsIm1lcmdlZFZpc2libGUiLCJyZW5kZXJlZFJlZiIsIm1vdGlvbkNoaWxkcmVuIiwibm9kZU9yQ29tcG9uZW50IiwiX3R5cGUkcHJvdG90eXBlIiwiX25vZGVPckNvbXBvbmVudCRwcm90Iiwic2V0Tm9kZVJlZiIsImZpbGxSZWYiLCJzdGF0dXNTdWZmaXgiLCJtb3Rpb25DbHMiLCJTVEFUVVNfQUREIiwiU1RBVFVTX0tFRVAiLCJTVEFUVVNfUkVNT1ZFIiwiU1RBVFVTX1JFTU9WRUQiLCJ3cmFwS2V5VG9PYmplY3QiLCJrZXlPYmoiLCJwYXJzZUtleXMiLCJNT1RJT05fUFJPUF9OQU1FUyIsIkNTU01vdGlvbkxpc3QiLCJrZXlFbnRpdGllcyIsInJlbW92ZUtleSIsIm5leHRLZXlFbnRpdGllcyIsImVudGl0eSIsIl90aGlzMiIsIl9vblZpc2libGVDaGFuZ2VkIiwib25BbGxSZW1vdmVkIiwibW90aW9uUHJvcHMiLCJjaGFuZ2VkVmlzaWJsZSIsInBhcnNlZEtleU9iamVjdHMiLCJtaXhlZEtleUVudGl0aWVzIiwicHJldktleXMiLCJjdXJyZW50S2V5cyIsImN1cnJlbnRJbmRleCIsImN1cnJlbnRMZW4iLCJwcmV2S2V5T2JqZWN0cyIsImN1cnJlbnRLZXlPYmplY3RzIiwiaGl0IiwiY3VycmVudEtleU9iaiIsIm1hdGNoS2V5IiwiZGlmZktleXMiLCJwcmV2RW50aXR5IiwiS2V5Q29kZSIsIk1BQ19FTlRFUiIsIkJBQ0tTUEFDRSIsIlRBQiIsIk5VTV9DRU5URVIiLCJFTlRFUiIsIlNISUZUIiwiQ1RSTCIsIkFMVCIsIlBBVVNFIiwiQ0FQU19MT0NLIiwiRVNDIiwiU1BBQ0UiLCJQQUdFX1VQIiwiUEFHRV9ET1dOIiwiRU5EIiwiSE9NRSIsIkxFRlQiLCJVUCIsIlJJR0hUIiwiRE9XTiIsIlBSSU5UX1NDUkVFTiIsIklOU0VSVCIsIkRFTEVURSIsIlpFUk8iLCJPTkUiLCJUV08iLCJUSFJFRSIsIkZPVVIiLCJGSVZFIiwiU0lYIiwiU0VWRU4iLCJFSUdIVCIsIk5JTkUiLCJRVUVTVElPTl9NQVJLIiwiTUVUQSIsIldJTl9LRVlfUklHSFQiLCJDT05URVhUX01FTlUiLCJOVU1fWkVSTyIsIk5VTV9PTkUiLCJOVU1fVFdPIiwiTlVNX1RIUkVFIiwiTlVNX0ZPVVIiLCJOVU1fRklWRSIsIk5VTV9TSVgiLCJOVU1fU0VWRU4iLCJOVU1fRUlHSFQiLCJOVU1fTklORSIsIk5VTV9NVUxUSVBMWSIsIk5VTV9QTFVTIiwiTlVNX01JTlVTIiwiTlVNX1BFUklPRCIsIk5VTV9ESVZJU0lPTiIsIkYxIiwiRjIiLCJGMyIsIkY0IiwiRjUiLCJGNiIsIkY3IiwiRjgiLCJGOSIsIkYxMCIsIkYxMSIsIkYxMiIsIk5VTUxPQ0siLCJTRU1JQ09MT04iLCJEQVNIIiwiRVFVQUxTIiwiQ09NTUEiLCJQRVJJT0QiLCJTTEFTSCIsIkFQT1NUUk9QSEUiLCJTSU5HTEVfUVVPVEUiLCJPUEVOX1NRVUFSRV9CUkFDS0VUIiwiQkFDS1NMQVNIIiwiQ0xPU0VfU1FVQVJFX0JSQUNLRVQiLCJXSU5fS0VZIiwiTUFDX0ZGX01FVEEiLCJXSU5fSU1FIiwiaXNUZXh0TW9kaWZ5aW5nS2V5RXZlbnQiLCJpc0NoYXJhY3RlcktleSIsIlBhbmVsQ29udGVudCIsIl9jbGFzc25hbWVzIiwicmVuZGVyZWQiLCJzZXRSZW5kZXJlZCIsIkNvbGxhcHNlUGFuZWwiLCJfY2xhc3NOYW1lczIiLCJfcHJvcHMkc2hvd0Fycm93Iiwic2hvd0Fycm93IiwiaGVhZGVyQ2xhc3MiLCJvbkl0ZW1DbGljayIsImNvbGxhcHNpYmxlIiwiYWNjb3JkaW9uIiwicGFuZWxLZXkiLCJleHRyYSIsImV4cGFuZEljb24iLCJvcGVuTW90aW9uIiwiZGVzdHJveUluYWN0aXZlUGFuZWwiLCJyZXNldFByb3BzIiwiY29sbGFwc2libGVIZWFkZXIiLCJjb2xsYXBzaWJsZUljb24iLCJpZkV4dHJhRXhpc3QiLCJoYW5kbGVJdGVtQ2xpY2siLCJpY29uTm9kZSIsImNvbGxhcHNlUGFuZWxDbGFzc05hbWVzIiwiaGVhZGVyUHJvcHMiLCJtb3Rpb25SZWYiLCJtb3Rpb25DbGFzc05hbWUiLCJtb3Rpb25TdHlsZSIsImdldEFjdGl2ZUtleXNBcnJheSIsImFjdGl2ZUtleSIsImN1cnJlbnRBY3RpdmVLZXkiLCJhY3RpdmVLZXlUeXBlIiwiQ29sbGFwc2UiLCJkZWZhdWx0U3RhdGVWYWx1ZSIsInBvc3RTdGF0ZSIsImlubmVyVmFsdWUiLCJzZXRJbm5lclZhbHVlIiwibWVyZ2VkVmFsdWUiLCJwb3N0TWVyZ2VkVmFsdWUiLCJvbkNoYW5nZUZuIiwicHJldlZhbHVlIiwic2V0UHJldlZhbHVlIiwiX3Byb3BzJHByZWZpeENscyIsIl9wcm9wcyRkZXN0cm95SW5hY3RpdiIsInJhd0FjdGl2ZUtleSIsImRlZmF1bHRBY3RpdmVLZXkiLCJfb25DaGFuZ2UiLCJpdGVtcyIsImNvbGxhcHNlQ2xhc3NOYW1lIiwiX3VzZU1lcmdlZFN0YXRlIiwiX3VzZU1lcmdlZFN0YXRlMiIsInNldEFjdGl2ZUtleSIsIm1lcmdlZENoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJyYXdLZXkiLCJyYXdDb2xsYXBzaWJsZSIsInJhd09uSXRlbUNsaWNrIiwicmF3RGVzdHJveUluYWN0aXZlUGFuZWwiLCJtZXJnZUNvbGxhcHNpYmxlIiwibWVyZ2VEZXN0cm95SW5hY3RpdmVQYW5lbCIsImNvbnZlcnRJdGVtc1RvTm9kZXMiLCJfY2hpbGQkcHJvcHMiLCJjaGlsZERlc3Ryb3lJbmFjdGl2ZVBhbmVsIiwiY2hpbGRDb2xsYXBzaWJsZSIsImNoaWxkT25JdGVtQ2xpY2siLCJjaGlsZFByb3BzIiwiZ2V0TmV3Q2hpbGQiLCJQYW5lbCIsIm9taXQiLCJnZXRDb2xsYXBzZWRIZWlnaHQiLCJnZXRSZWFsSGVpZ2h0IiwiZ2V0Q3VycmVudEhlaWdodCIsIm9mZnNldEhlaWdodCIsInNraXBPcGFjaXR5VHJhbnNpdGlvbiIsInJlcGxhY2VFbGVtZW50IiwiQ29uZmlnQ29udGV4dCIsImdldFByZWZpeENscyIsInN1ZmZpeENscyIsImN1c3RvbWl6ZVByZWZpeENscyIsImljb25QcmVmaXhDbHMiLCJDb25maWdDb25zdW1lciIsImNvbGxhcHNlUGFuZWxDbGFzc05hbWUiLCJFbnRpdHkiLCJpbnN0YW5jZUlkIiwidmFsdWVGbiIsIm5leHRWYWx1ZSIsIkFUVFJfVE9LRU4iLCJBVFRSX01BUksiLCJDU1NfSU5fSlNfSU5TVEFOQ0UiLCJTdHlsZUNvbnRleHQiLCJoYXNoUHJpb3JpdHkiLCJjc3NpbmpzSW5zdGFuY2VJZCIsInN0eWxlSGFzaCIsIl9zdHlsZSRwYXJlbnROb2RlIiwiQ2FjaGUiLCJkZWZhdWx0Q2FjaGUiLCJUaGVtZUNhY2hlIiwiY2FjaGVDYWxsVGltZXMiLCJkZXJpdmF0aXZlT3B0aW9uIiwiX2NhY2hlMiIsIl9jYWNoZTMiLCJ1cGRhdGVDYWxsVGltZXMiLCJkZXJpdmF0aXZlIiwiX2NhY2hlIiwiX3RoaXMkaW50ZXJuYWxHZXQiLCJpbnRlcm5hbEdldCIsIk1BWF9DQUNIRV9TSVpFIiwiTUFYX0NBQ0hFX09GRlNFVCIsIl90aGlzJGtleXMkcmVkdWNlIiwiY2FsbFRpbWVzIiwiY2FjaGVWYWx1ZSIsImN1cnJlbnRDYWNoZSIsImRlcml2YXRpdmVzIiwiX2NhY2hlJHZhbHVlIiwiZGVsZXRlQnlQYXRoIiwic2FtZURlcml2YXRpdmVPcHRpb24iLCJ1dWlkIiwiVGhlbWUiLCJjYWNoZVRoZW1lcyIsInJlc3VsdENhY2hlIiwiUkVTVUxUX1ZBTFVFIiwiZmxhdHRlblRva2VuQ2FjaGUiLCJmbGF0dGVuVG9rZW4iLCJ0b2tlbjJrZXkiLCJzYWx0IiwicmFuZG9tU2VsZWN0b3JLZXkiLCJjaGVja0NvbnRlbnQiLCJjYW5MYXllciIsImlzQ2xpZW50U2lkZSIsInRva2VuS2V5Iiwic3R5bGVJZCIsIl9vYmplY3RTcHJlYWQyIiwiYXR0clN0ciIsImF0dHIiLCJ0b2tlbjJDU1NWYXIiLCJwcmVmaXgiLCJzZXJpYWxpemVDU1NWYXIiLCJjc3NWYXJzIiwiaGFzaElkIiwic2NvcGUiLCJ0cmFuc2Zvcm1Ub2tlbiIsIl9jb25maWckcHJlc2VydmUiLCJfY29uZmlnJGlnbm9yZSIsInByZXNlcnZlIiwiaWdub3JlIiwiX2NvbmZpZyR1bml0bGVzcyIsImNzc1ZhciIsInVuaXRsZXNzIiwicmVuZGVyRWZmZWN0IiwiZWZmZWN0IiwiZWZmZWN0Q2xlYW51cHMiLCJjbGVhbnVwRmxhZyIsInVzZUdsb2JhbENhY2hlIiwia2V5UGF0aCIsImNhY2hlRm4iLCJvbkNhY2hlUmVtb3ZlIiwib25DYWNoZUVmZmVjdCIsImdsb2JhbENhY2hlIiwicmVnaXN0ZXIiLCJidWlsZENhY2hlIiwidXNlSE1SIiwicHJldkNhY2hlIiwiX3JlZjIkIiwiY2FjaGVDb250ZW50IiwicG9seWZpbGwiLCJ0aW1lcyIsIl9yZWY2JCIsIkVNUFRZX09WRVJSSURFIiwiaGFzaFByZWZpeCIsInRva2VuS2V5cyIsIlRPS0VOX1RIUkVTSE9MRCIsImdldENvbXB1dGVkVG9rZW4iLCJvcmlnaW5Ub2tlbiIsIm92ZXJyaWRlVG9rZW4iLCJtZXJnZWREZXJpdmF0aXZlVG9rZW4iLCJnZXREZXJpdmF0aXZlVG9rZW4iLCJUT0tFTl9QUkVGSVgiLCJ1c2VDYWNoZVRva2VuIiwiX29wdGlvbiRzYWx0IiwiX29wdGlvbiRvdmVycmlkZSIsIm92ZXJyaWRlIiwiZm9ybWF0VG9rZW4iLCJjb21wdXRlIiwibWVyZ2VkVG9rZW4iLCJkZXAiLCJtZW1vUmVzdWx0IiwidG9rZW5TdHIiLCJvdmVycmlkZVRva2VuU3RyIiwiY3NzVmFyU3RyIiwiY2FjaGVkVG9rZW4iLCJfY3NzVmFyJGtleSIsImFjdHVhbFRva2VuIiwiY3NzVmFyc1N0ciIsIl90cmFuc2Zvcm1Ub2tlbjIiLCJfdG9rZW5LZXkiLCJfdGhlbWVLZXkiLCJyZWNvcmRDbGVhblRva2VuIiwiX2hhc2hJZCIsInRva2VuS2V5TGlzdCIsImNsZWFuYWJsZUtleUxpc3QiLCJyZW1vdmVTdHlsZVRhZ3MiLCJjbGVhblRva2VuU3R5bGUiLCJjYWNoZVBhdGhNYXAiLCJDU1NfRklMRV9TVFlMRSIsImZyb21DU1NGaWxlIiwiTVVMVElfVkFMVUUiLCJub3JtYWxpemVTdHlsZSIsInN0eWxlU3RyIiwicGFyc2VTdHlsZSIsInBhcmVudFNlbGVjdG9ycyIsImluamVjdEhhc2giLCJfY29uZmlnJHRyYW5zZm9ybWVycyIsInRyYW5zZm9ybWVycyIsImxpbnRlcnMiLCJlZmZlY3RTdHlsZSIsInBhcnNlS2V5ZnJhbWVzIiwiZ2V0TmFtZSIsIl9wYXJzZWRTdHIiLCJmbGF0dGVuU3R5bGVMaXN0IiwiZmxhdHRlbkxpc3QiLCJmdWxsTGlzdCIsIm9yaWdpblN0eWxlIiwiX2tleWZyYW1lIiwidHJhbnMiLCJfdHJhbnMkdmlzaXQiLCJpc0NvbXBvdW5kQ1NTUHJvcGVydHkiLCJhcHBlbmRTdHlsZSIsImZvcm1hdFZhbHVlIiwiYWN0dWFsVmFsdWUiLCJzdWJJbmplY3RIYXNoIiwibWVyZ2VkS2V5IiwibmV4dFJvb3QiLCJoYXNoQ2xhc3NOYW1lIiwiaGFzaFNlbGVjdG9yIiwiX2ZpcnN0UGF0aCRtYXRjaCIsImZpcnN0UGF0aCIsImh0bWxFbGVtZW50IiwiaW5qZWN0U2VsZWN0b3JIYXNoIiwiX3BhcnNlU3R5bGU0IiwiX3BhcnNlZFN0cjIiLCJjaGlsZEVmZmVjdFN0eWxlIiwiaGFuZGxlRWxlbWVudCIsInN1cHBvcnRDaGVjayIsIl9nZXRDb21wdXRlZFN0eWxlJGNvbiIsIl9lbGUkcGFyZW50Tm9kZSIsIl9lbGUiLCJzdXBwb3J0Iiwic3VwcG9ydFNlbGVjdG9yIiwibGF5ZXJDZWxscyIsImxheWVyTmFtZSIsInVuaXF1ZUhhc2giLCJFbXB0eSIsIlNUWUxFX1BSRUZJWCIsInVzZVN0eWxlUmVnaXN0ZXIiLCJzdHlsZUZuIiwiY2xpZW50T25seSIsIl9pbmZvJG9yZGVyIiwiYXV0b0NsZWFyIiwibW9jayIsInNzcklubGluZSIsImlzTWVyZ2VkQ2xpZW50U2lkZSIsIl91c2VHbG9iYWxDYWNoZSIsImNhY2hlUGF0aCIsImRpdiIsIl9pdGVtJHNwbGl0MiIsIl9pbmxpbmVNYXBTdHlsZSRwYXJlbiIsImlubGluZU1hcFN0eWxlIiwiZXhpc3RQYXRoIiwiX2dldFN0eWxlQW5kSGFzaCIsIl9zdHlsZSIsImdldFN0eWxlQW5kSGFzaCIsIl9nZXRTdHlsZUFuZEhhc2gyIiwiaW5saW5lQ2FjaGVTdHlsZVN0ciIsInN0eWxlT2JqIiwiX3BhcnNlU3R5bGU2IiwicGFyc2VkU3R5bGUiLCJmcm9tSE1SIiwibWVyZ2VkQ1NTQ29uZmlnIiwibm9uY2VTdHIiLCJlZmZlY3RLZXkiLCJfdXNlR2xvYmFsQ2FjaGUyIiwiY2FjaGVkU3R5bGVTdHIiLCJjYWNoZWRUb2tlbktleSIsImNhY2hlZFN0eWxlSWQiLCJDU1NfVkFSX1BSRUZJWCIsIl9FeHRyYWN0U3R5bGVGbnMiLCJub1NwbGl0Iiwibm90U3BsaXQiLCJlZmZlY3RTdHlsZXMiLCJwbGFpbiIsImtleVN0eWxlVGV4dCIsInNoYXJlZEF0dHJzIiwiZWZmZWN0U3R5bGVTdHIiLCJyZWFsVG9rZW4iLCJjc3NWYXJLZXkiLCJyZXNldENvbXBvbmVudCIsIm5lZWRJbmhlcml0Rm9udEZhbWlseSIsImNvbG9yVGV4dCIsImxpc3RTdHlsZSIsImdlbkxpbmtTdHlsZSIsImNvbG9yTGluayIsImxpbmtEZWNvcmF0aW9uIiwibW90aW9uRHVyYXRpb25TbG93IiwiY29sb3JMaW5rSG92ZXIiLCJjb2xvckxpbmtBY3RpdmUiLCJsaW5rSG92ZXJEZWNvcmF0aW9uIiwibGlua0ZvY3VzRGVjb3JhdGlvbiIsImNvbG9yVGV4dERpc2FibGVkIiwiZ2VuQ29tbW9uU3R5bGUiLCJjb21wb25lbnRQcmVmaXhDbHMiLCJyb290UHJlZml4U2VsZWN0b3IiLCJjb21wb25lbnRDbHMiLCJhbnRDbHMiLCJtb3Rpb25EdXJhdGlvbk1pZCIsIm1vdGlvbkVhc2VJbk91dCIsImRlZmF1bHRQcmVzZXRDb2xvcnMiLCJjb2xvclByaW1hcnkiLCJjb2xvclN1Y2Nlc3MiLCJjb2xvcldhcm5pbmciLCJjb2xvckVycm9yIiwiY29sb3JJbmZvIiwiY29sb3JUZXh0QmFzZSIsImNvbG9yQmdCYXNlIiwiZm9udEZhbWlseUNvZGUiLCJsaW5lV2lkdGgiLCJsaW5lVHlwZSIsIm1vdGlvblVuaXQiLCJtb3Rpb25CYXNlIiwibW90aW9uRWFzZU91dENpcmMiLCJtb3Rpb25FYXNlSW5PdXRDaXJjIiwibW90aW9uRWFzZU91dCIsIm1vdGlvbkVhc2VPdXRCYWNrIiwibW90aW9uRWFzZUluQmFjayIsIm1vdGlvbkVhc2VJblF1aW50IiwibW90aW9uRWFzZU91dFF1aW50Iiwic2l6ZVVuaXQiLCJzaXplU3RlcCIsInNpemVQb3B1cEFycm93IiwiY29udHJvbEhlaWdodCIsInpJbmRleEJhc2UiLCJ6SW5kZXhQb3B1cEJhc2UiLCJvcGFjaXR5SW1hZ2UiLCJ3aXJlZnJhbWUiLCJUaW55Q29sb3IiLCJudW1iZXJJbnB1dFRvT2JqZWN0Iiwib3JpZ2luYWxJbnB1dCIsInJvdW5kQSIsImdyYWRpZW50VHlwZSIsImlzVmFsaWQiLCJpc0RhcmsiLCJnZXRCcmlnaHRuZXNzIiwiaXNMaWdodCIsInRvUmdiIiwiUnNSR0IiLCJHc1JHQiIsIkJzUkdCIiwicG93IiwiZ2V0QWxwaGEiLCJzZXRBbHBoYSIsImlzTW9ub2Nocm9tZSIsInRvSHNsIiwidG9Ic3ZTdHJpbmciLCJ0b0hzbFN0cmluZyIsInRvSGV4U3RyaW5nIiwidG9IZXg4IiwiYWxsb3c0Q2hhciIsInJnYmFUb0hleCIsInRvSGV4OFN0cmluZyIsInRvSGV4U2hvcnRTdHJpbmciLCJhbGxvd1Nob3J0Q2hhciIsInRvUmdiU3RyaW5nIiwidG9QZXJjZW50YWdlUmdiIiwiZm10IiwidG9QZXJjZW50YWdlUmdiU3RyaW5nIiwicm5kIiwidG9OYW1lIiwiZm9ybWF0U2V0IiwiZm9ybWF0dGVkU3RyaW5nIiwiaGFzQWxwaGEiLCJ0b051bWJlciIsImFtb3VudCIsImJyaWdodGVuIiwidGludCIsIm1peCIsImRlc2F0dXJhdGUiLCJzYXR1cmF0ZSIsImdyZXlzY2FsZSIsImFuYWxvZ291cyIsInNsaWNlcyIsInBhcnQiLCJjb21wbGVtZW50IiwibW9ub2Nocm9tYXRpYyIsIm1vZGlmaWNhdGlvbiIsInNwbGl0Y29tcGxlbWVudCIsIm9uQmFja2dyb3VuZCIsInRyaWFkIiwicG9seWFkIiwidGV0cmFkIiwiaW5jcmVtZW50IiwiZXF1YWxzIiwiZ2V0QWxwaGFDb2xvciIsImJhc2VDb2xvciIsImdldFNvbGlkQ29sb3IiLCJicmlnaHRuZXNzIiwiZ2VuZXJhdGVDb2xvclBhbGV0dGVzIiwiZ2VuZXJhdGVOZXV0cmFsQ29sb3JQYWxldHRlcyIsImJnQmFzZUNvbG9yIiwidGV4dEJhc2VDb2xvciIsImNvbG9yVGV4dFNlY29uZGFyeSIsImNvbG9yVGV4dFRlcnRpYXJ5IiwiY29sb3JUZXh0UXVhdGVybmFyeSIsImNvbG9yRmlsbCIsImNvbG9yRmlsbFNlY29uZGFyeSIsImNvbG9yRmlsbFRlcnRpYXJ5IiwiY29sb3JGaWxsUXVhdGVybmFyeSIsImNvbG9yQmdMYXlvdXQiLCJjb2xvckJnQ29udGFpbmVyIiwiY29sb3JCZ0VsZXZhdGVkIiwiY29sb3JCZ1Nwb3RsaWdodCIsImNvbG9yQmdCbHVyIiwiY29sb3JCb3JkZXIiLCJjb2xvckJvcmRlclNlY29uZGFyeSIsImNvbG9yUGFsZXR0ZXMiLCJjb2xvcktleSIsImN1ciIsInNlZWQiLCJjb2xvclN1Y2Nlc3NCYXNlIiwiY29sb3JXYXJuaW5nQmFzZSIsImNvbG9yRXJyb3JCYXNlIiwiY29sb3JJbmZvQmFzZSIsImNvbG9yUHJpbWFyeUJhc2UiLCJwcmltYXJ5Q29sb3JzIiwic3VjY2Vzc0NvbG9ycyIsIndhcm5pbmdDb2xvcnMiLCJlcnJvckNvbG9ycyIsImluZm9Db2xvcnMiLCJuZXV0cmFsQ29sb3JzIiwibGlua0NvbG9ycyIsImNvbG9yUHJpbWFyeUJnIiwiY29sb3JQcmltYXJ5QmdIb3ZlciIsImNvbG9yUHJpbWFyeUJvcmRlciIsImNvbG9yUHJpbWFyeUJvcmRlckhvdmVyIiwiY29sb3JQcmltYXJ5SG92ZXIiLCJjb2xvclByaW1hcnlBY3RpdmUiLCJjb2xvclByaW1hcnlUZXh0SG92ZXIiLCJjb2xvclByaW1hcnlUZXh0IiwiY29sb3JQcmltYXJ5VGV4dEFjdGl2ZSIsImNvbG9yU3VjY2Vzc0JnIiwiY29sb3JTdWNjZXNzQmdIb3ZlciIsImNvbG9yU3VjY2Vzc0JvcmRlciIsImNvbG9yU3VjY2Vzc0JvcmRlckhvdmVyIiwiY29sb3JTdWNjZXNzSG92ZXIiLCJjb2xvclN1Y2Nlc3NBY3RpdmUiLCJjb2xvclN1Y2Nlc3NUZXh0SG92ZXIiLCJjb2xvclN1Y2Nlc3NUZXh0IiwiY29sb3JTdWNjZXNzVGV4dEFjdGl2ZSIsImNvbG9yRXJyb3JCZyIsImNvbG9yRXJyb3JCZ0hvdmVyIiwiY29sb3JFcnJvckJvcmRlciIsImNvbG9yRXJyb3JCb3JkZXJIb3ZlciIsImNvbG9yRXJyb3JIb3ZlciIsImNvbG9yRXJyb3JBY3RpdmUiLCJjb2xvckVycm9yVGV4dEhvdmVyIiwiY29sb3JFcnJvclRleHQiLCJjb2xvckVycm9yVGV4dEFjdGl2ZSIsImNvbG9yV2FybmluZ0JnIiwiY29sb3JXYXJuaW5nQmdIb3ZlciIsImNvbG9yV2FybmluZ0JvcmRlciIsImNvbG9yV2FybmluZ0JvcmRlckhvdmVyIiwiY29sb3JXYXJuaW5nSG92ZXIiLCJjb2xvcldhcm5pbmdBY3RpdmUiLCJjb2xvcldhcm5pbmdUZXh0SG92ZXIiLCJjb2xvcldhcm5pbmdUZXh0IiwiY29sb3JXYXJuaW5nVGV4dEFjdGl2ZSIsImNvbG9ySW5mb0JnIiwiY29sb3JJbmZvQmdIb3ZlciIsImNvbG9ySW5mb0JvcmRlciIsImNvbG9ySW5mb0JvcmRlckhvdmVyIiwiY29sb3JJbmZvSG92ZXIiLCJjb2xvckluZm9BY3RpdmUiLCJjb2xvckluZm9UZXh0SG92ZXIiLCJjb2xvckluZm9UZXh0IiwiY29sb3JJbmZvVGV4dEFjdGl2ZSIsImNvbG9yQmdNYXNrIiwiY29sb3JXaGl0ZSIsImdlbkNvbG9yTWFwVG9rZW4iLCJmb250U2l6ZVBhaXJzIiwiZm9udFNpemVzIiwiYmFzZVNpemUiLCJpbnRTaXplIiwibGluZUhlaWdodHMiLCJmb250U2l6ZU1EIiwiZm9udFNpemVTTSIsImZvbnRTaXplTEciLCJsaW5lSGVpZ2h0U00iLCJsaW5lSGVpZ2h0TEciLCJmb250U2l6ZVhMIiwiZm9udFNpemVIZWFkaW5nMSIsImZvbnRTaXplSGVhZGluZzIiLCJmb250U2l6ZUhlYWRpbmczIiwiZm9udFNpemVIZWFkaW5nNCIsImZvbnRTaXplSGVhZGluZzUiLCJmb250SGVpZ2h0IiwiZm9udEhlaWdodExHIiwiZm9udEhlaWdodFNNIiwibGluZUhlaWdodEhlYWRpbmcxIiwibGluZUhlaWdodEhlYWRpbmcyIiwibGluZUhlaWdodEhlYWRpbmczIiwibGluZUhlaWdodEhlYWRpbmc0IiwibGluZUhlaWdodEhlYWRpbmc1Iiwic2l6ZVhYTCIsInNpemVYTCIsInNpemVMRyIsInNpemVNRCIsInNpemVNUyIsInNpemVTTSIsInNpemVYUyIsInNpemVYWFMiLCJnZW5TaXplTWFwVG9rZW4iLCJjb250cm9sSGVpZ2h0U00iLCJjb250cm9sSGVpZ2h0WFMiLCJjb250cm9sSGVpZ2h0TEciLCJtb3Rpb25EdXJhdGlvbkZhc3QiLCJsaW5lV2lkdGhCb2xkIiwicmFkaXVzQmFzZSIsInJhZGl1c0xHIiwicmFkaXVzU00iLCJyYWRpdXNYUyIsInJhZGl1c091dGVyIiwiYm9yZGVyUmFkaXVzWFMiLCJib3JkZXJSYWRpdXNTTSIsImJvcmRlclJhZGl1c0xHIiwiYm9yZGVyUmFkaXVzT3V0ZXIiLCJnZW5Db21tb25NYXBUb2tlbiIsImRlcml2YXRpdmVBcnIiLCJoYXNoZWQiLCJEZXNpZ25Ub2tlbkNvbnRleHQiLCJpc1N0YWJsZUNvbG9yIiwiZnJvbnRDb2xvciIsImZSIiwiZkciLCJmQiIsIm9yaWdpbkFscGhhIiwiYlIiLCJiRyIsImJCIiwiZkEiLCJkZXJpdmF0aXZlVG9rZW4iLCJyZXN0VG9rZW4iLCJvdmVycmlkZVRva2VucyIsImZhc3REdXJhdGlvbiIsImNvbG9yRmlsbENvbnRlbnQiLCJjb2xvckZpbGxDb250ZW50SG92ZXIiLCJjb2xvckZpbGxBbHRlciIsImNvbG9yQmdDb250YWluZXJEaXNhYmxlZCIsImNvbG9yQm9yZGVyQmciLCJjb2xvclNwbGl0IiwiY29sb3JUZXh0UGxhY2Vob2xkZXIiLCJjb2xvclRleHRIZWFkaW5nIiwiY29sb3JUZXh0TGFiZWwiLCJjb2xvclRleHREZXNjcmlwdGlvbiIsImNvbG9yVGV4dExpZ2h0U29saWQiLCJjb2xvckhpZ2hsaWdodCIsImNvbG9yQmdUZXh0SG92ZXIiLCJjb2xvckJnVGV4dEFjdGl2ZSIsImNvbG9ySWNvbiIsImNvbG9ySWNvbkhvdmVyIiwiY29sb3JFcnJvck91dGxpbmUiLCJjb2xvcldhcm5pbmdPdXRsaW5lIiwiZm9udFNpemVJY29uIiwibGluZVdpZHRoRm9jdXMiLCJjb250cm9sT3V0bGluZVdpZHRoIiwiY29udHJvbEludGVyYWN0aXZlU2l6ZSIsImNvbnRyb2xJdGVtQmdIb3ZlciIsImNvbnRyb2xJdGVtQmdBY3RpdmUiLCJjb250cm9sSXRlbUJnQWN0aXZlSG92ZXIiLCJjb250cm9sSXRlbUJnQWN0aXZlRGlzYWJsZWQiLCJjb250cm9sVG1wT3V0bGluZSIsImNvbnRyb2xPdXRsaW5lIiwiZm9udFdlaWdodFN0cm9uZyIsIm9wYWNpdHlMb2FkaW5nIiwiY29udHJvbFBhZGRpbmdIb3Jpem9udGFsIiwiY29udHJvbFBhZGRpbmdIb3Jpem9udGFsU00iLCJwYWRkaW5nWFhTIiwicGFkZGluZ1hTIiwicGFkZGluZ1NNIiwicGFkZGluZ01EIiwicGFkZGluZ0xHIiwicGFkZGluZ1hMIiwicGFkZGluZ0NvbnRlbnRIb3Jpem9udGFsTEciLCJwYWRkaW5nQ29udGVudFZlcnRpY2FsTEciLCJwYWRkaW5nQ29udGVudEhvcml6b250YWwiLCJwYWRkaW5nQ29udGVudFZlcnRpY2FsIiwicGFkZGluZ0NvbnRlbnRIb3Jpem9udGFsU00iLCJwYWRkaW5nQ29udGVudFZlcnRpY2FsU00iLCJtYXJnaW5YWFMiLCJtYXJnaW5YUyIsIm1hcmdpblNNIiwibWFyZ2luTUQiLCJtYXJnaW5MRyIsIm1hcmdpblhMIiwibWFyZ2luWFhMIiwiYm94U2hhZG93U2Vjb25kYXJ5IiwiYm94U2hhZG93VGVydGlhcnkiLCJzY3JlZW5YUyIsInNjcmVlblhTTWluIiwic2NyZWVuWFNNYXgiLCJzY3JlZW5TTSIsInNjcmVlblNNTWluIiwic2NyZWVuU01NYXgiLCJzY3JlZW5NRCIsInNjcmVlbk1ETWluIiwic2NyZWVuTURNYXgiLCJzY3JlZW5MRyIsInNjcmVlbkxHTWluIiwic2NyZWVuTEdNYXgiLCJzY3JlZW5YTCIsInNjcmVlblhMTWluIiwic2NyZWVuWExNYXgiLCJzY3JlZW5YWEwiLCJzY3JlZW5YWExNaW4iLCJib3hTaGFkb3dQb3BvdmVyQXJyb3ciLCJib3hTaGFkb3dDYXJkIiwiYm94U2hhZG93RHJhd2VyUmlnaHQiLCJib3hTaGFkb3dEcmF3ZXJMZWZ0IiwiYm94U2hhZG93RHJhd2VyVXAiLCJib3hTaGFkb3dEcmF3ZXJEb3duIiwiYm94U2hhZG93VGFic092ZXJmbG93TGVmdCIsImJveFNoYWRvd1RhYnNPdmVyZmxvd1JpZ2h0IiwiYm94U2hhZG93VGFic092ZXJmbG93VG9wIiwiYm94U2hhZG93VGFic092ZXJmbG93Qm90dG9tIiwiY29tcG9uZW50VGhlbWUiLCJjb21wb25lbnRUb2tlbnMiLCJtZXJnZWRDb21wb25lbnRUb2tlbiIsInVzZVRva2VuIiwicm9vdERlc2lnblRva2VuIiwiQWJzdHJhY3RDYWxjdWxhdG9yIiwiTnVtQ2FsY3VsYXRvciIsIl9BYnN0cmFjdENhbGN1bGF0b3IiLCJDQUxDX1VOSVQiLCJDU1NDYWxjdWxhdG9yIiwiZ2V0UmVzdWx0IiwibG93UHJpb3JpdHkiLCJmb3JjZSIsInJlZ2V4cCIsImVuYWJsZVN0YXRpc3RpYyIsIkNTU0lOSlNfU1RBVElTVElDIiwicmVjb3JkaW5nIiwib2JqcyIsInN0YXRpc3RpYyIsImdldERlZmF1bHRDb21wb25lbnRUb2tlbiIsImdldERlZmF1bHRUb2tlbiIsImdldENvbXBvbmVudFRva2VuIiwiZGVmYXVsdFRva2VuIiwiY3VzdG9tVG9rZW4iLCJkZXByZWNhdGVkVG9rZW5zIiwib2xkVG9rZW5LZXkiLCJuZXdUb2tlbktleSIsImdlbkNvbXBvbmVudFN0eWxlSG9vayIsImNlbGxzIiwiY29uY2F0Q29tcG9uZW50Iiwicm9vdFByZWZpeENscyIsImNhbGMiLCJDYWxjdWxhdG9yIiwiX2xlbjIiLCJfa2V5MiIsImdlbk1heE1pbiIsInNoYXJlZENvbmZpZyIsInRleHRSZW5kZXJpbmciLCJzdmciLCJ3cmFwU1NSIiwiaW5qZWN0U3R5bGUiLCJwcm94eVRva2VuIiwicHJveHkiLCJjb21wb25lbnRUb2tlbiIsInN0YXRpc3RpY1Rva2VuIiwiZGVmYXVsdENvbXBvbmVudFRva2VuIiwiZ2V0Q29tcFZhclByZWZpeCIsImljb25DbHMiLCJzdHlsZUludGVycG9sYXRpb24iLCJyZXNldFN0eWxlIiwiZ2VuQmFzZVN0eWxlIiwiY29udGVudEJnIiwiaGVhZGVyQmciLCJoZWFkZXJQYWRkaW5nIiwiY29sbGFwc2VIZWFkZXJQYWRkaW5nU00iLCJjb2xsYXBzZUhlYWRlclBhZGRpbmdMRyIsImNvbGxhcHNlUGFuZWxCb3JkZXJSYWRpdXMiLCJjb250ZW50UGFkZGluZyIsImJvcmRlckJhc2UiLCJzdWIiLCJlcXVhbCIsImdlbkFycm93U3R5bGUiLCJnZW5Cb3JkZXJsZXNzU3R5bGUiLCJnZW5HaG9zdFN0eWxlIiwidXNlU3R5bGUiLCJjb2xsYXBzZVRva2VuIiwidXNlQ1NTVmFyIiwicHJlZml4VG9rZW4iLCJvcmlnaW5Vbml0bGVzcyIsImNvbXBVbml0bGVzcyIsIkNTU1ZhclJlZ2lzdGVyIiwicm9vdENscyIsIl9jb25maWckc2NvcGUiLCJzdHlsZVBhdGgiLCJnZW5DU1NWYXJSZWdpc3RlciIsImNvbGxhcHNlIiwiYm9yZGVyZWQiLCJnaG9zdCIsImN1c3RvbWl6ZVNpemUiLCJleHBhbmRJY29uUG9zaXRpb24iLCJtZXJnZWRTaXplIiwiY3VzdG9tU2l6ZSIsIkZ1bmN0aW9uIiwid3JhcENTU1ZhciIsIm1lcmdlZEV4cGFuZEljb25Qb3NpdGlvbiIsInBhbmVsUHJvcHMiLCJhbnN3ZXIiLCJzZXRBbnN3ZXIiLCJnZXRBbnN3ZXIiLCJxdWVzdGlvbiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiam9rZXMiLCJzZXRKb2tlcyIsInB1bmFwaSIsInNldFB1bmFwaSIsImdldEpva2VzIiwiZ2V0UHVuYXBpIiwiX2NhbGxlZTIiLCJfY29udGV4dDIiLCJwdW4iLCJqb2tlIiwicm9ib3QiLCJzZXRSb2JvdCIsImdldFJvYm90IiwiY3JlYXRlZF9hdCIsInJhbmR1bUpva2VzIiwic2V0UmFuZHVtSm9rZXMiLCJnZXRSYW5kdW1Kb2tlcyIsImRlbGl2ZXJ5IiwiY2F0ZWdvcnkiLCJzZXR1cCIsInB1bmNobGluZSIsIkpva2VzUmFuZG9tIiwiSm9rZXNPZmZpY2lhbCIsIlllc05vR2lmIiwiRGFkSm9rZXMiLCJSYW5kb21Kb2tlIiwiQ2h1a05vcnJpcyIsInRyaXZpYUNhdCIsImNyZWF0ZVRoZW1lIiwiVGhlbWVQcm92aWRlciIsIkhvbWUiLCJSZXN1bHRzQ2VsZWJzIiwiSm9rZVBsYWNlIiwiUGlja1RyaXZpYSIsIlJlc3VsdHNMb2dvIiwiUmVzdWx0c0RpY3Rpb25hcnkiLCJSZXN1bHRzSGlzdG9yeSIsIlJlc3VsdHNIaXN0b3J5RXZlbnRzIiwiUmVzdWx0c1BlcnNvbiIsIkRldGFpbHNQZXJzb24iLCJUcml2aWEiLCJSZXN1bHRzQWR2aWNlIiwiUmlkbGVzIiwiVHJpdmlhU2NpZW5jZSIsIlRyaXZpYUdlbmVyYWwiLCJUcml2aWFGb29kIiwiVHJpdmlhUGVvcGxlIiwiVHJpdmlhSGlzdG9yeSIsIlRyaXZpYUdlb2dyYXBoeSIsIlRyaXZpYUVudGVydGFpbm1lbnQiLCJUcml2aWFUb3lzIiwiVHJpdmlhTXVzaWMiLCJUcml2aWFMYW5ndWFnZSIsIlRyaXZpYVJlbGlnaW9uIiwiVHJpdmlhU3BvcnQiLCJUcml2aWFNYXRoZW1hdGljcyIsInNldFNlYXJjaFN0cmluZyIsIk5hdmlnYXRpb24iLCJSZWFjdERPTSIsImdldEVsZW1lbnRCeUlkIiwiQXBwIl0sInNvdXJjZVJvb3QiOiIifQ==