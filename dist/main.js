/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,n={6194:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),o=n(6411),a=n(6686),i=n(7563),l=n(211),c=n(2190),u=function(e,t,n){for(var r=0,a=0;r=a,a=(0,o.fj)(),38===r&&12===a&&(t[n]=1),!(0,o.r)(a);)(0,o.lp)();return(0,o.tP)(e,o.FK)},s=new WeakMap,f=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||s.get(n))&&!r){s.set(e,!0);for(var i=[],l=function(e,t){return(0,o.cE)(function(e,t){var n=-1,r=44;do{switch((0,o.r)(r)){case 0:38===r&&12===(0,o.fj)()&&(t[n]=1),e[n]+=u(o.FK-1,t,n);break;case 2:e[n]+=(0,o.iF)(r);break;case 4:if(44===r){e[++n]=58===(0,o.fj)()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=(0,a.Dp)(r)}}while(r=(0,o.lp)());return e}((0,o.un)(e),t))}(t,i),c=n.props,f=0,d=0;f<l.length;f++)for(var p=0;p<c.length;p++,d++)e.props[d]=i[f]?l[f].replace(/&\f/g,c[p]):c[p]+" "+l[f]}}},d=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function p(e,t){switch((0,a.vp)(e,t)){case 5103:return i.G$+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return i.G$+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return i.G$+e+i.uj+e+i.MS+e+e;case 6828:case 4268:return i.G$+e+i.MS+e+e;case 6165:return i.G$+e+i.MS+"flex-"+e+e;case 5187:return i.G$+e+(0,a.gx)(e,/(\w+).+(:[^]+)/,i.G$+"box-$1$2"+i.MS+"flex-$1$2")+e;case 5443:return i.G$+e+i.MS+"flex-item-"+(0,a.gx)(e,/flex-|-self/,"")+e;case 4675:return i.G$+e+i.MS+"flex-line-pack"+(0,a.gx)(e,/align-content|flex-|-self/,"")+e;case 5548:return i.G$+e+i.MS+(0,a.gx)(e,"shrink","negative")+e;case 5292:return i.G$+e+i.MS+(0,a.gx)(e,"basis","preferred-size")+e;case 6060:return i.G$+"box-"+(0,a.gx)(e,"-grow","")+i.G$+e+i.MS+(0,a.gx)(e,"grow","positive")+e;case 4554:return i.G$+(0,a.gx)(e,/([^-])(transform)/g,"$1"+i.G$+"$2")+e;case 6187:return(0,a.gx)((0,a.gx)((0,a.gx)(e,/(zoom-|grab)/,i.G$+"$1"),/(image-set)/,i.G$+"$1"),e,"")+e;case 5495:case 3959:return(0,a.gx)(e,/(image-set\([^]*)/,i.G$+"$1$`$1");case 4968:return(0,a.gx)((0,a.gx)(e,/(.+:)(flex-)?(.*)/,i.G$+"box-pack:$3"+i.MS+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+i.G$+e+e;case 4095:case 3583:case 4068:case 2532:return(0,a.gx)(e,/(.+)-inline(.+)/,i.G$+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if((0,a.to)(e)-1-t>6)switch((0,a.uO)(e,t+1)){case 109:if(45!==(0,a.uO)(e,t+4))break;case 102:return(0,a.gx)(e,/(.+:)(.+)-([^]+)/,"$1"+i.G$+"$2-$3$1"+i.uj+(108==(0,a.uO)(e,t+3)?"$3":"$2-$3"))+e;case 115:return~(0,a.Cw)(e,"stretch")?p((0,a.gx)(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==(0,a.uO)(e,t+1))break;case 6444:switch((0,a.uO)(e,(0,a.to)(e)-3-(~(0,a.Cw)(e,"!important")&&10))){case 107:return(0,a.gx)(e,":",":"+i.G$)+e;case 101:return(0,a.gx)(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+i.G$+(45===(0,a.uO)(e,14)?"inline-":"")+"box$3$1"+i.G$+"$2$3$1"+i.MS+"$2box$3")+e}break;case 5936:switch((0,a.uO)(e,t+11)){case 114:return i.G$+e+i.MS+(0,a.gx)(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return i.G$+e+i.MS+(0,a.gx)(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return i.G$+e+i.MS+(0,a.gx)(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return i.G$+e+i.MS+e+e}return e}var h=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case i.h5:e.return=p(e.value,e.length);break;case i.lK:return(0,l.q)([(0,o.JG)(e,{value:(0,a.gx)(e.value,"@","@"+i.G$)})],r);case i.Fr:if(e.length)return(0,a.$e)(e.props,(function(t){switch((0,a.EQ)(t,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return(0,l.q)([(0,o.JG)(e,{props:[(0,a.gx)(t,/:(read-\w+)/,":"+i.uj+"$1")]})],r);case"::placeholder":return(0,l.q)([(0,o.JG)(e,{props:[(0,a.gx)(t,/:(plac\w+)/,":"+i.G$+"input-$1")]}),(0,o.JG)(e,{props:[(0,a.gx)(t,/:(plac\w+)/,":"+i.uj+"$1")]}),(0,o.JG)(e,{props:[(0,a.gx)(t,/:(plac\w+)/,i.MS+"input-$1")]})],r)}return""}))}}],m=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o,i,u=e.stylisPlugins||h,s={},p=[];o=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)s[t[n]]=!0;p.push(e)}));var m,y,v,g,b=[f,d],w=[l.P,(g=function(e){m.insert(e)},function(e){e.root||(e=e.return)&&g(e)})],x=(y=b.concat(u,w),v=(0,a.Ei)(y),function(e,t,n,r){for(var o="",a=0;a<v;a++)o+=y[a](e,t,n,r)||"";return o});i=function(e,t,n,r){var o;m=n,o=e?e+"{"+t.styles+"}":t.styles,(0,l.q)((0,c.MY)(o),x),r&&(E.inserted[t.name]=!0)};var E={key:t,sheet:new r({key:t,container:o,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:s,registered:{},insert:i};return E.sheet.hydrate(p),E}},5042:(e,t,n)=>{"use strict";function r(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}n.d(t,{Z:()=>r})},5260:(e,t,n)=>{"use strict";n.d(t,{T:()=>c,i:()=>a,w:()=>l});var r=n(7294),o=n(6194),a=(n(6797),n(7278),!0),i=r.createContext("undefined"!=typeof HTMLElement?(0,o.Z)({key:"css"}):null);i.Provider;var l=function(e){return(0,r.forwardRef)((function(t,n){var o=(0,r.useContext)(i);return e(t,o,n)}))};a||(l=function(e){return function(t){var n=(0,r.useContext)(i);return null===n?(n=(0,o.Z)({key:"css"}),r.createElement(i.Provider,{value:n},e(t,n))):e(t,n)}});var c=r.createContext({})},6797:(e,t,n)=>{"use strict";n.d(t,{O:()=>h});var r={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},o=n(5042),a=/[A-Z]|^ms/g,i=/_EMO_([^_]+?)_([^]*?)_EMO_/g,l=function(e){return 45===e.charCodeAt(1)},c=function(e){return null!=e&&"boolean"!=typeof e},u=(0,o.Z)((function(e){return l(e)?e:e.replace(a,"-$&").toLowerCase()})),s=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(i,(function(e,t,n){return d={name:t,styles:n,next:d},t}))}return 1===r[e]||l(e)||"number"!=typeof t||0===t?t:t+"px"};function f(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return d={name:n.name,styles:n.styles,next:d},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)d={name:r.name,styles:r.styles,next:d},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=f(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":c(i)&&(r+=u(a)+":"+s(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=f(e,t,i);switch(a){case"animation":case"animationName":r+=u(a)+":"+l+";";break;default:r+=a+"{"+l+"}"}}else for(var d=0;d<i.length;d++)c(i[d])&&(r+=u(a)+":"+s(a,i[d])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=d,a=n(e);return d=o,f(e,t,a)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var d,p=/label:\s*([^\s;\n{]+)\s*(;|$)/g,h=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";d=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=f(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=f(n,t,e[i]),r&&(o+=a[i]);p.lastIndex=0;for(var l,c="";null!==(l=p.exec(o));)c+="-"+l[1];var u=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+c;return{name:u,styles:o,next:d}}},7278:(e,t,n)=>{"use strict";var r;n.d(t,{L:()=>i,j:()=>l});var o=n(7294),a=!!(r||(r=n.t(o,2))).useInsertionEffect&&(r||(r=n.t(o,2))).useInsertionEffect,i=a||function(e){return e()},l=a||o.useLayoutEffect},444:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}n.d(t,{My:()=>a,fp:()=>r,hC:()=>o});var o=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},a=function(e,t,n){o(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}}},5503:(e,t,n)=>{"use strict";var r=n(4836);t.Z=void 0;var o=r(n(4938)),a=n(5893),i=(0,o.default)((0,a.jsx)("path",{d:"M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"}),"KeyboardArrowDown");t.Z=i},813:(e,t,n)=>{"use strict";var r=n(4836);t.Z=void 0;var o=r(n(4938)),a=n(5893),i=(0,o.default)((0,a.jsx)("path",{d:"M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"}),"KeyboardArrowUp");t.Z=i},4938:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(7259)},3486:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"}},9553:(e,t,n)=>{"use strict";n.d(t,{Z:()=>B});var r=n(7462),o=n(3366),a=n(1387),i=n(9766),l=n(6268),c=n(8010),u=n(6523),s=n(1796);const f={black:"#000",white:"#fff"},d={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},p={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},h={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},m={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},y={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},v={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"};var g=n(3486);const b=["mode","contrastThreshold","tonalOffset"],w={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:f.white,default:f.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},x={text:{primary:f.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:f.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function E(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,s.$n)(e.main,o):"dark"===t&&(e.dark=(0,s._j)(e.main,a)))}const A=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],S={textTransform:"uppercase"},C='"Roboto", "Helvetica", "Arial", sans-serif';function k(e,t){const n="function"==typeof t?t(e):t,{fontFamily:a=C,fontSize:l=14,fontWeightLight:c=300,fontWeightRegular:u=400,fontWeightMedium:s=500,fontWeightBold:f=700,htmlFontSize:d=16,allVariants:p,pxToRem:h}=n,m=(0,o.Z)(n,A),y=l/14,v=h||(e=>e/d*y+"rem"),g=(e,t,n,o,i)=>{return(0,r.Z)({fontFamily:a,fontWeight:e,fontSize:v(t),lineHeight:n},a===C?{letterSpacing:(l=o/t,Math.round(1e5*l)/1e5+"em")}:{},i,p);var l},b={h1:g(c,96,1.167,-1.5),h2:g(c,60,1.2,-.5),h3:g(u,48,1.167,0),h4:g(u,34,1.235,.25),h5:g(u,24,1.334,0),h6:g(s,20,1.6,.15),subtitle1:g(u,16,1.75,.15),subtitle2:g(s,14,1.57,.1),body1:g(u,16,1.5,.15),body2:g(u,14,1.43,.15),button:g(s,14,1.75,.4,S),caption:g(u,12,1.66,.4),overline:g(u,12,2.66,1,S),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return(0,i.Z)((0,r.Z)({htmlFontSize:d,pxToRem:v,fontFamily:a,fontSize:l,fontWeightLight:c,fontWeightRegular:u,fontWeightMedium:s,fontWeightBold:f},b),m,{clone:!1})}function L(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const j=["none",L(0,2,1,-1,0,1,1,0,0,1,3,0),L(0,3,1,-2,0,2,2,0,0,1,5,0),L(0,3,3,-2,0,3,4,0,0,1,8,0),L(0,2,4,-1,0,4,5,0,0,1,10,0),L(0,3,5,-1,0,5,8,0,0,1,14,0),L(0,3,5,-1,0,6,10,0,0,1,18,0),L(0,4,5,-2,0,7,10,1,0,2,16,1),L(0,5,5,-3,0,8,10,1,0,3,14,2),L(0,5,6,-3,0,9,12,1,0,3,16,2),L(0,6,6,-3,0,10,14,1,0,4,18,3),L(0,6,7,-4,0,11,15,1,0,4,20,3),L(0,7,8,-4,0,12,17,2,0,5,22,4),L(0,7,8,-4,0,13,19,2,0,5,24,4),L(0,7,9,-4,0,14,21,2,0,5,26,4),L(0,8,9,-5,0,15,22,2,0,6,28,5),L(0,8,10,-5,0,16,24,2,0,6,30,5),L(0,8,11,-5,0,17,26,2,0,6,32,5),L(0,9,11,-5,0,18,28,2,0,7,34,6),L(0,9,12,-6,0,19,29,2,0,7,36,6),L(0,10,13,-6,0,20,31,3,0,8,38,7),L(0,10,13,-6,0,21,33,3,0,8,40,7),L(0,10,14,-6,0,22,35,3,0,8,42,7),L(0,11,14,-7,0,23,36,3,0,9,44,8),L(0,11,15,-7,0,24,38,3,0,9,46,8)];var O=n(6067);const N={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},_=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const B=function(e={},...t){const{mixins:n={},palette:A={},transitions:S={},typography:C={}}=e,L=(0,o.Z)(e,_);if(e.vars)throw new Error((0,a.Z)(18));const B=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:l=.2}=e,c=(0,o.Z)(e,b),u=e.primary||function(e="light"){return"dark"===e?{main:y[200],light:y[50],dark:y[400]}:{main:y[700],light:y[400],dark:y[800]}}(t),A=e.secondary||function(e="light"){return"dark"===e?{main:p[200],light:p[50],dark:p[400]}:{main:p[500],light:p[300],dark:p[700]}}(t),S=e.error||function(e="light"){return"dark"===e?{main:h[500],light:h[300],dark:h[700]}:{main:h[700],light:h[400],dark:h[800]}}(t),C=e.info||function(e="light"){return"dark"===e?{main:v[400],light:v[300],dark:v[700]}:{main:v[700],light:v[500],dark:v[900]}}(t),k=e.success||function(e="light"){return"dark"===e?{main:g.Z[400],light:g.Z[300],dark:g.Z[700]}:{main:g.Z[800],light:g.Z[500],dark:g.Z[900]}}(t),L=e.warning||function(e="light"){return"dark"===e?{main:m[400],light:m[300],dark:m[700]}:{main:"#ed6c02",light:m[500],dark:m[900]}}(t);function j(e){return(0,s.mi)(e,x.text.primary)>=n?x.text.primary:w.text.primary}const O=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:i=700})=>{if(!(e=(0,r.Z)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,a.Z)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,a.Z)(12,t?` (${t})`:"",JSON.stringify(e.main)));return E(e,"light",o,l),E(e,"dark",i,l),e.contrastText||(e.contrastText=j(e.main)),e},N={dark:x,light:w};return(0,i.Z)((0,r.Z)({common:(0,r.Z)({},f),mode:t,primary:O({color:u,name:"primary"}),secondary:O({color:A,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:O({color:S,name:"error"}),warning:O({color:L,name:"warning"}),info:O({color:C,name:"info"}),success:O({color:k,name:"success"}),grey:d,contrastThreshold:n,getContrastText:j,augmentColor:O,tonalOffset:l},N[t]),c)}(A),T=(0,l.Z)(e);let P=(0,i.Z)(T,{mixins:(I=T.breakpoints,z=n,(0,r.Z)({toolbar:{minHeight:56,[I.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[I.up("sm")]:{minHeight:64}}},z)),palette:B,shadows:j.slice(),typography:k(B,C),transitions:(0,O.ZP)(S),zIndex:(0,r.Z)({},N)});var I,z;return P=(0,i.Z)(P,L),P=t.reduce(((e,t)=>(0,i.Z)(e,t)),P),P.unstable_sxConfig=(0,r.Z)({},c.Z,null==L?void 0:L.unstable_sxConfig),P.unstable_sx=function(e){return(0,u.Z)({sx:e,theme:this})},P}},6067:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>s,x9:()=>l});var r=n(3366),o=n(7462);const a=["duration","easing","delay"],i={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},l={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function c(e){return`${Math.round(e)}ms`}function u(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function s(e){const t=(0,o.Z)({},i,e.easing),n=(0,o.Z)({},l,e.duration);return(0,o.Z)({getAutoHeightDuration:u,create:(e=["all"],o={})=>{const{duration:i=n.standard,easing:l=t.easeInOut,delay:u=0}=o;return(0,r.Z)(o,a),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof i?i:c(i)} ${l} ${"string"==typeof u?u:c(u)}`)).join(",")}},e,{easing:t,duration:n})}},247:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(9553).Z)()},606:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r="$$material"},9602:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>k,FO:()=>S});var r=n(3366),o=n(7462),a=n(9378),i=n(9766),l=n(6268),c=n(4142);const u=["variant"];function s(e){return 0===e.length}function f(e){const{variant:t}=e,n=(0,r.Z)(e,u);let o=t||"";return Object.keys(n).sort().forEach((t=>{o+="color"===t?s(o)?e[t]:(0,c.Z)(e[t]):`${s(o)?t:(0,c.Z)(t)}${(0,c.Z)(e[t].toString())}`})),o}var d=n(6523);const p=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],h=e=>{const t={};return e&&e.forEach((e=>{const n=f(e.props);t[n]=e.style})),t},m=(e,t,n)=>{const{ownerState:r={}}=e,o=[];return n&&n.forEach((n=>{let a=!0;Object.keys(n.props).forEach((t=>{r[t]!==n.props[t]&&e[t]!==n.props[t]&&(a=!1)})),a&&o.push(t[f(n.props)])})),o};function y(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const v=(0,l.Z)(),g=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function b({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function w(e){return e?(t,n)=>n[e]:null}const x=({styledArg:e,props:t,defaultTheme:n,themeId:r})=>{const a=e((0,o.Z)({},t,{theme:b((0,o.Z)({},t,{defaultTheme:n,themeId:r}))}));let i;return a&&a.variants&&(i=a.variants,delete a.variants),i?[a,...m(t,h(i),i)]:a};var E=n(247),A=n(606);const S=e=>y(e)&&"classes"!==e,C=function(e={}){const{themeId:t,defaultTheme:n=v,rootShouldForwardProp:l=y,slotShouldForwardProp:c=y}=e,u=e=>(0,d.Z)((0,o.Z)({},e,{theme:b((0,o.Z)({},e,{defaultTheme:n,themeId:t}))}));return u.__mui_systemSx=!0,(e,s={})=>{(0,a.Co)(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:f,slot:d,skipVariantsResolver:v,skipSx:E,overridesResolver:A=w(g(d))}=s,S=(0,r.Z)(s,p),C=void 0!==v?v:d&&"Root"!==d&&"root"!==d||!1,k=E||!1;let L=y;"Root"===d||"root"===d?L=l:d?L=c:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(L=void 0);const j=(0,a.ZP)(e,(0,o.Z)({shouldForwardProp:L,label:void 0},S)),O=(r,...a)=>{const l=a?a.map((e=>{if("function"==typeof e&&e.__emotion_real!==e)return r=>x({styledArg:e,props:r,defaultTheme:n,themeId:t});if((0,i.P)(e)){let t,n=e;return e&&e.variants&&(t=e.variants,delete n.variants,n=n=>{let r=e;return m(n,h(t),t).forEach((e=>{r=(0,i.Z)(r,e)})),r}),n}return e})):[];let c=r;if((0,i.P)(r)){let e;r&&r.variants&&(e=r.variants,delete c.variants,c=t=>{let n=r;return m(t,h(e),e).forEach((e=>{n=(0,i.Z)(n,e)})),n})}else"function"==typeof r&&r.__emotion_real!==r&&(c=e=>x({styledArg:r,props:e,defaultTheme:n,themeId:t}));f&&A&&l.push((e=>{const r=b((0,o.Z)({},e,{defaultTheme:n,themeId:t})),a=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(f,r);if(a){const t={};return Object.entries(a).forEach((([n,a])=>{t[n]="function"==typeof a?a((0,o.Z)({},e,{theme:r})):a})),A(e,t)}return null})),f&&!C&&l.push((e=>{const r=b((0,o.Z)({},e,{defaultTheme:n,themeId:t}));return((e,t,n,r)=>{var o;const a=null==n||null==(o=n.components)||null==(o=o[r])?void 0:o.variants;return m(e,t,a)})(e,((e,t)=>{let n=[];return t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants),h(n)})(f,r),r,f)})),k||l.push(u);const s=l.length-a.length;if(Array.isArray(r)&&s>0){const e=new Array(s).fill("");c=[...r,...e],c.raw=[...r.raw,...e]}const d=j(c,...l);return e.muiName&&(d.muiName=e.muiName),d};return j.withConfig&&(O.withConfig=j.withConfig),O}}({themeId:A.Z,defaultTheme:E.Z,rootShouldForwardProp:S}),k=C},6122:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7925),o=n(6682);var a=n(247),i=n(606);function l({props:e,name:t}){return function({props:e,name:t,defaultTheme:n,themeId:a}){let i=(0,o.Z)(n);a&&(i=i[a]||i);const l=function(e){const{theme:t,name:n,props:o}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?(0,r.Z)(t.components[n].defaultProps,o):o}({theme:i,name:t,props:e});return l}({props:e,name:t,defaultTheme:a.Z,themeId:i.Z})}},8216:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(4142).Z},7259:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>o.Z,createChainedFunction:()=>a,createSvgIcon:()=>E,debounce:()=>A,deprecatedPropType:()=>S,isMuiElement:()=>C,ownerDocument:()=>k,ownerWindow:()=>L,requirePropFactory:()=>j,setRef:()=>O,unstable_ClassNameGenerator:()=>F,unstable_useEnhancedEffect:()=>N.Z,unstable_useId:()=>T,unsupportedProp:()=>P,useControlled:()=>I,useEventCallback:()=>z.Z,useForkRef:()=>M.Z,useIsFocusVisible:()=>R.Z});var r=n(7078),o=n(8216);const a=function(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))};var i=n(7462),l=n(7294),c=n.t(l,2),u=n(3366),s=n(512),f=n(4780),d=n(6122),p=n(9602),h=n(1588),m=n(4867);function y(e){return(0,m.Z)("MuiSvgIcon",e)}(0,h.Z)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var v=n(5893);const g=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],b=(0,p.ZP)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${(0,o.Z)(n.color)}`],t[`fontSize${(0,o.Z)(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,o,a,i,l,c,u,s,f,d,p,h;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(o=e.transitions)||null==(o=o.duration)?void 0:o.shorter}),fontSize:{inherit:"inherit",small:(null==(a=e.typography)||null==(i=a.pxToRem)?void 0:i.call(a,20))||"1.25rem",medium:(null==(l=e.typography)||null==(c=l.pxToRem)?void 0:c.call(l,24))||"1.5rem",large:(null==(u=e.typography)||null==(s=u.pxToRem)?void 0:s.call(u,35))||"2.1875rem"}[t.fontSize],color:null!=(f=null==(d=(e.vars||e).palette)||null==(d=d[t.color])?void 0:d.main)?f:{action:null==(p=(e.vars||e).palette)||null==(p=p.action)?void 0:p.active,disabled:null==(h=(e.vars||e).palette)||null==(h=h.action)?void 0:h.disabled,inherit:void 0}[t.color]}})),w=l.forwardRef((function(e,t){const n=(0,d.Z)({props:e,name:"MuiSvgIcon"}),{children:r,className:a,color:c="inherit",component:p="svg",fontSize:h="medium",htmlColor:m,inheritViewBox:w=!1,titleAccess:x,viewBox:E="0 0 24 24"}=n,A=(0,u.Z)(n,g),S=l.isValidElement(r)&&"svg"===r.type,C=(0,i.Z)({},n,{color:c,component:p,fontSize:h,instanceFontSize:e.fontSize,inheritViewBox:w,viewBox:E,hasSvgAsChild:S}),k={};w||(k.viewBox=E);const L=(e=>{const{color:t,fontSize:n,classes:r}=e,a={root:["root","inherit"!==t&&`color${(0,o.Z)(t)}`,`fontSize${(0,o.Z)(n)}`]};return(0,f.Z)(a,y,r)})(C);return(0,v.jsxs)(b,(0,i.Z)({as:p,className:(0,s.Z)(L.root,a),focusable:"false",color:m,"aria-hidden":!x||void 0,role:x?"img":void 0,ref:t},k,A,S&&r.props,{ownerState:C,children:[S?r.props.children:r,x?(0,v.jsx)("title",{children:x}):null]}))}));w.muiName="SvgIcon";const x=w;function E(e,t){function n(n,r){return(0,v.jsx)(x,(0,i.Z)({"data-testid":`${t}Icon`,ref:r},n,{children:e}))}return n.muiName=x.muiName,l.memo(l.forwardRef(n))}const A=n(9336).Z,S=function(e,t){return()=>null},C=function(e,t){var n,r;return l.isValidElement(e)&&-1!==t.indexOf(null!=(n=e.type.muiName)?n:null==(r=e.type)||null==(r=r._payload)||null==(r=r.value)?void 0:r.muiName)},k=n(2690).Z,L=n(4161).Z,j=function(e,t){return()=>null},O=n(7960).Z;var N=n(8974);let _=0;const B=c["useId".toString()],T=function(e){if(void 0!==B){const t=B();return null!=e?e:t}return function(e){const[t,n]=l.useState(e),r=e||t;return l.useEffect((()=>{null==t&&(_+=1,n(`mui-${_}`))}),[t]),r}(e)},P=function(e,t,n,r,o){return null},I=function({controlled:e,default:t,name:n,state:r="value"}){const{current:o}=l.useRef(void 0!==e),[a,i]=l.useState(t);return[o?e:a,l.useCallback((e=>{o||i(e)}),[])]};var z=n(314),M=n(1705),R=n(3511);const F={configure:e=>{r.Z.configure(e)}}},8974:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(3546).Z},314:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(3546);const a=function(e){const t=r.useRef(e);return(0,o.Z)((()=>{t.current=e})),r.useRef(((...e)=>(0,t.current)(...e))).current}},1705:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(3703).Z},3511:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(7294);let o,a=!0,i=!1;const l={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function c(e){e.metaKey||e.altKey||e.ctrlKey||(a=!0)}function u(){a=!1}function s(){"hidden"===this.visibilityState&&i&&(a=!0)}const f=function(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",c,!0),t.addEventListener("mousedown",u,!0),t.addEventListener("pointerdown",u,!0),t.addEventListener("touchstart",u,!0),t.addEventListener("visibilitychange",s,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return a||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!l[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(i=!0,window.clearTimeout(o),o=window.setTimeout((()=>{i=!1}),100),t.current=!1,!0)},ref:e}}},9378:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>g,Co:()=>b});var r=n(7462),o=n(7294),a=n(5042),i=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,l=(0,a.Z)((function(e){return i.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),c=n(5260),u=n(444),s=n(6797),f=n(7278),d=l,p=function(e){return"theme"!==e},h=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?d:p},m=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},y=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return(0,u.hC)(t,n,r),(0,f.L)((function(){return(0,u.My)(t,n,r)})),null},v=function e(t,n){var a,i,l=t.__emotion_real===t,f=l&&t.__emotion_base||t;void 0!==n&&(a=n.label,i=n.target);var d=m(t,n,l),p=d||h(f),v=!p("as");return function(){var g=arguments,b=l&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==a&&b.push("label:"+a+";"),null==g[0]||void 0===g[0].raw)b.push.apply(b,g);else{b.push(g[0][0]);for(var w=g.length,x=1;x<w;x++)b.push(g[x],g[0][x])}var E=(0,c.w)((function(e,t,n){var r=v&&e.as||f,a="",l=[],m=e;if(null==e.theme){for(var g in m={},e)m[g]=e[g];m.theme=o.useContext(c.T)}"string"==typeof e.className?a=(0,u.fp)(t.registered,l,e.className):null!=e.className&&(a=e.className+" ");var w=(0,s.O)(b.concat(l),t.registered,m);a+=t.key+"-"+w.name,void 0!==i&&(a+=" "+i);var x=v&&void 0===d?h(r):p,E={};for(var A in e)v&&"as"===A||x(A)&&(E[A]=e[A]);return E.className=a,E.ref=n,o.createElement(o.Fragment,null,o.createElement(y,{cache:t,serialized:w,isStringTag:"string"==typeof r}),o.createElement(r,E))}));return E.displayName=void 0!==a?a:"Styled("+("string"==typeof f?f:f.displayName||f.name||"Component")+")",E.defaultProps=t.defaultProps,E.__emotion_real=E,E.__emotion_base=f,E.__emotion_styles=b,E.__emotion_forwardProp=d,Object.defineProperty(E,"toString",{value:function(){return"."+i}}),E.withComponent=function(t,o){return e(t,(0,r.Z)({},n,o,{shouldForwardProp:m(E,o,!0)})).apply(void 0,b)},E}}.bind();function g(e,t){return v(e,t)}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){v[e]=v(e)}));const b=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}},5408:(e,t,n)=>{"use strict";n.d(t,{L7:()=>l,VO:()=>r,W8:()=>i,k9:()=>a});const r={xs:0,sm:600,md:900,lg:1200,xl:1536},o={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${r[e]}px)`};function a(e,t,n){const a=e.theme||{};if(Array.isArray(t)){const e=a.breakpoints||o;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=a.breakpoints||o;return Object.keys(t).reduce(((o,a)=>{if(-1!==Object.keys(e.values||r).indexOf(a))o[e.up(a)]=n(t[a],a);else{const e=a;o[e]=t[e]}return o}),{})}return n(t)}function i(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function l(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}},1796:(e,t,n)=>{"use strict";n.d(t,{$n:()=>f,Fq:()=>u,_j:()=>s,mi:()=>c});var r=n(1387);function o(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function a(e){if(e.type)return e;if("#"===e.charAt(0))return a(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,r.Z)(9,e));let o,i=e.substring(t+1,e.length-1);if("color"===n){if(i=i.split(" "),o=i.shift(),4===i.length&&"/"===i[3].charAt(0)&&(i[3]=i[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(o))throw new Error((0,r.Z)(10,o))}else i=i.split(",");return i=i.map((e=>parseFloat(e))),{type:n,values:i,colorSpace:o}}function i(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function l(e){let t="hsl"===(e=a(e)).type||"hsla"===e.type?a(function(e){e=a(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,l=r*Math.min(o,1-o),c=(e,t=(e+n/30)%12)=>o-l*Math.max(Math.min(t-3,9-t,1),-1);let u="rgb";const s=[Math.round(255*c(0)),Math.round(255*c(8)),Math.round(255*c(4))];return"hsla"===e.type&&(u+="a",s.push(t[3])),i({type:u,values:s})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function c(e,t){const n=l(e),r=l(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e,t){return e=a(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,i(e)}function s(e,t){if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return i(e)}function f(e,t){if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return i(e)}},6268:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(7462),o=n(3366),a=n(9766);const i=["values","unit","step"],l={borderRadius:4};var c=n(2605),u=n(6523),s=n(8010);const f=["breakpoints","palette","spacing","shape"],d=function(e={},...t){const{breakpoints:n={},palette:d={},spacing:p,shape:h={}}=e,m=(0,o.Z)(e,f),y=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:a=5}=e,l=(0,o.Z)(e,i),c=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>(0,r.Z)({},e,{[t.key]:t.val})),{})})(t),u=Object.keys(c);function s(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function f(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-a/100}${n})`}function d(e,r){const o=u.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[u[o]]?t[u[o]]:r)-a/100}${n})`}return(0,r.Z)({keys:u,values:c,up:s,down:f,between:d,only:function(e){return u.indexOf(e)+1<u.length?d(e,u[u.indexOf(e)+1]):s(e)},not:function(e){const t=u.indexOf(e);return 0===t?s(u[1]):t===u.length-1?f(u[t]):d(e,u[u.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},l)}(n),v=function(e=8){if(e.mui)return e;const t=(0,c.hB)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(p);let g=(0,a.Z)({breakpoints:y,direction:"ltr",components:{},palette:(0,r.Z)({mode:"light"},d),spacing:v,shape:(0,r.Z)({},l,h)},m);return g=t.reduce(((e,t)=>(0,a.Z)(e,t)),g),g.unstable_sxConfig=(0,r.Z)({},s.Z,null==m?void 0:m.unstable_sxConfig),g.unstable_sx=function(e){return(0,u.Z)({sx:e,theme:this})},g}},7730:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9766);const o=function(e,t){return t?(0,r.Z)(e,t,{clone:!1}):e}},2605:(e,t,n)=>{"use strict";n.d(t,{hB:()=>h,eI:()=>p,NA:()=>m,e6:()=>v,o3:()=>g});var r=n(5408),o=n(4844),a=n(7730);const i={m:"margin",p:"padding"},l={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},c={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},u=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!c[e])return[e];e=c[e]}const[t,n]=e.split(""),r=i[t],o=l[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),s=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],f=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],d=[...s,...f];function p(e,t,n,r){var a;const i=null!=(a=(0,o.DW)(e,t,!1))?a:n;return"number"==typeof i?e=>"string"==typeof e?e:i*e:Array.isArray(i)?e=>"string"==typeof e?e:i[e]:"function"==typeof i?i:()=>{}}function h(e){return p(e,"spacing",8)}function m(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function y(e,t){const n=h(e.theme);return Object.keys(e).map((o=>function(e,t,n,o){if(-1===t.indexOf(n))return null;const a=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=m(t,n),e)),{})}(u(n),o),i=e[n];return(0,r.k9)(e,i,a)}(e,t,o,n))).reduce(a.Z,{})}function v(e){return y(e,s)}function g(e){return y(e,f)}function b(e){return y(e,d)}v.propTypes={},v.filterProps=s,g.propTypes={},g.filterProps=f,b.propTypes={},b.filterProps=d},4844:(e,t,n)=>{"use strict";n.d(t,{DW:()=>a,Jq:()=>i,ZP:()=>l});var r=n(4142),o=n(5408);function a(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function i(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:a(e,n)||r,t&&(o=t(o,r,e)),o}const l=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:l,transform:c}=e,u=e=>{if(null==e[t])return null;const u=e[t],s=a(e.theme,l)||{};return(0,o.k9)(e,u,(e=>{let o=i(s,c,e);return e===o&&"string"==typeof e&&(o=i(s,c,`${t}${"default"===e?"":(0,r.Z)(e)}`,e)),!1===n?o:{[n]:o}}))};return u.propTypes={},u.filterProps=[t],u}},8010:(e,t,n)=>{"use strict";n.d(t,{Z:()=>P});var r=n(2605),o=n(4844),a=n(7730);const i=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,a.Z)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var l=n(5408);function c(e){return"number"!=typeof e?e:`${e}px solid`}function u(e,t){return(0,o.ZP)({prop:e,themeKey:"borders",transform:t})}const s=u("border",c),f=u("borderTop",c),d=u("borderRight",c),p=u("borderBottom",c),h=u("borderLeft",c),m=u("borderColor"),y=u("borderTopColor"),v=u("borderRightColor"),g=u("borderBottomColor"),b=u("borderLeftColor"),w=u("outline",c),x=u("outlineColor"),E=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,r.eI)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,r.NA)(t,e)});return(0,l.k9)(e,e.borderRadius,n)}return null};E.propTypes={},E.filterProps=["borderRadius"],i(s,f,d,p,h,m,y,v,g,b,E,w,x);const A=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,r.eI)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,r.NA)(t,e)});return(0,l.k9)(e,e.gap,n)}return null};A.propTypes={},A.filterProps=["gap"];const S=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,r.eI)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,r.NA)(t,e)});return(0,l.k9)(e,e.columnGap,n)}return null};S.propTypes={},S.filterProps=["columnGap"];const C=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,r.eI)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,r.NA)(t,e)});return(0,l.k9)(e,e.rowGap,n)}return null};function k(e,t){return"grey"===t?t:e}function L(e){return e<=1&&0!==e?100*e+"%":e}C.propTypes={},C.filterProps=["rowGap"],i(A,S,C,(0,o.ZP)({prop:"gridColumn"}),(0,o.ZP)({prop:"gridRow"}),(0,o.ZP)({prop:"gridAutoFlow"}),(0,o.ZP)({prop:"gridAutoColumns"}),(0,o.ZP)({prop:"gridAutoRows"}),(0,o.ZP)({prop:"gridTemplateColumns"}),(0,o.ZP)({prop:"gridTemplateRows"}),(0,o.ZP)({prop:"gridTemplateAreas"}),(0,o.ZP)({prop:"gridArea"})),i((0,o.ZP)({prop:"color",themeKey:"palette",transform:k}),(0,o.ZP)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:k}),(0,o.ZP)({prop:"backgroundColor",themeKey:"palette",transform:k}));const j=(0,o.ZP)({prop:"width",transform:L}),O=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r;const o=(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||l.VO[t];return o?"px"!==(null==(r=e.theme)||null==(r=r.breakpoints)?void 0:r.unit)?{maxWidth:`${o}${e.theme.breakpoints.unit}`}:{maxWidth:o}:{maxWidth:L(t)}};return(0,l.k9)(e,e.maxWidth,t)}return null};O.filterProps=["maxWidth"];const N=(0,o.ZP)({prop:"minWidth",transform:L}),_=(0,o.ZP)({prop:"height",transform:L}),B=(0,o.ZP)({prop:"maxHeight",transform:L}),T=(0,o.ZP)({prop:"minHeight",transform:L}),P=((0,o.ZP)({prop:"size",cssProperty:"width",transform:L}),(0,o.ZP)({prop:"size",cssProperty:"height",transform:L}),i(j,O,N,_,B,T,(0,o.ZP)({prop:"boxSizing"})),{border:{themeKey:"borders",transform:c},borderTop:{themeKey:"borders",transform:c},borderRight:{themeKey:"borders",transform:c},borderBottom:{themeKey:"borders",transform:c},borderLeft:{themeKey:"borders",transform:c},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:c},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:E},color:{themeKey:"palette",transform:k},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:k},backgroundColor:{themeKey:"palette",transform:k},p:{style:r.o3},pt:{style:r.o3},pr:{style:r.o3},pb:{style:r.o3},pl:{style:r.o3},px:{style:r.o3},py:{style:r.o3},padding:{style:r.o3},paddingTop:{style:r.o3},paddingRight:{style:r.o3},paddingBottom:{style:r.o3},paddingLeft:{style:r.o3},paddingX:{style:r.o3},paddingY:{style:r.o3},paddingInline:{style:r.o3},paddingInlineStart:{style:r.o3},paddingInlineEnd:{style:r.o3},paddingBlock:{style:r.o3},paddingBlockStart:{style:r.o3},paddingBlockEnd:{style:r.o3},m:{style:r.e6},mt:{style:r.e6},mr:{style:r.e6},mb:{style:r.e6},ml:{style:r.e6},mx:{style:r.e6},my:{style:r.e6},margin:{style:r.e6},marginTop:{style:r.e6},marginRight:{style:r.e6},marginBottom:{style:r.e6},marginLeft:{style:r.e6},marginX:{style:r.e6},marginY:{style:r.e6},marginInline:{style:r.e6},marginInlineStart:{style:r.e6},marginInlineEnd:{style:r.e6},marginBlock:{style:r.e6},marginBlockStart:{style:r.e6},marginBlockEnd:{style:r.e6},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:A},rowGap:{style:C},columnGap:{style:S},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:L},maxWidth:{style:O},minWidth:{transform:L},height:{transform:L},maxHeight:{transform:L},minHeight:{transform:L},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}})},6523:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(4142),o=n(7730),a=n(4844),i=n(5408),l=n(8010);const c=function(){function e(e,t,n,o){const l={[e]:t,theme:n},c=o[e];if(!c)return{[e]:t};const{cssProperty:u=e,themeKey:s,transform:f,style:d}=c;if(null==t)return null;if("typography"===s&&"inherit"===t)return{[e]:t};const p=(0,a.DW)(n,s)||{};return d?d(l):(0,i.k9)(l,t,(t=>{let n=(0,a.Jq)(p,f,t);return t===n&&"string"==typeof t&&(n=(0,a.Jq)(p,f,`${e}${"default"===t?"":(0,r.Z)(t)}`,t)),!1===u?n:{[u]:n}}))}return function t(n){var r;const{sx:a,theme:c={}}=n||{};if(!a)return null;const u=null!=(r=c.unstable_sxConfig)?r:l.Z;function s(n){let r=n;if("function"==typeof n)r=n(c);else if("object"!=typeof n)return n;if(!r)return null;const a=(0,i.W8)(c.breakpoints),l=Object.keys(a);let s=a;return Object.keys(r).forEach((n=>{const a="function"==typeof(l=r[n])?l(c):l;var l;if(null!=a)if("object"==typeof a)if(u[n])s=(0,o.Z)(s,e(n,a,c,u));else{const e=(0,i.k9)({theme:c},a,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,a)?s=(0,o.Z)(s,e):s[n]=t({sx:a,theme:c})}else s=(0,o.Z)(s,e(n,a,c,u))})),(0,i.L7)(l,s)}return Array.isArray(a)?a.map(s):s(a)}}();c.filterProps=["sx"];const u=c},6682:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(6268),o=n(4168);const a=(0,r.Z)(),i=function(e=a){return(0,o.Z)(e)}},4168:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(5260);const a=function(e=null){const t=r.useContext(o.T);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}},7078:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const r=e=>e,o=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})()},4142:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(1387);function o(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},4780:(e,t,n)=>{"use strict";function r(e,t,n=void 0){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>{if(r){const o=t(r);""!==o&&e.push(o),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}n.d(t,{Z:()=>r})},9336:(e,t,n)=>{"use strict";function r(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}n.d(t,{Z:()=>r})},9766:(e,t,n)=>{"use strict";n.d(t,{P:()=>o,Z:()=>i});var r=n(7462);function o(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function a(e){if(!o(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=a(e[n])})),t}function i(e,t,n={clone:!0}){const l=n.clone?(0,r.Z)({},e):e;return o(e)&&o(t)&&Object.keys(t).forEach((r=>{"__proto__"!==r&&(o(t[r])&&r in e&&o(e[r])?l[r]=i(e[r],t[r],n):n.clone?l[r]=o(t[r])?a(t[r]):t[r]:l[r]=t[r])})),l}},1387:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},4867:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7078);const o={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function a(e,t,n="Mui"){const a=o[t];return a?`${n}-${a}`:`${r.Z.generate(e)}-${t}`}},1588:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4867);function o(e,t,n="Mui"){const o={};return t.forEach((t=>{o[t]=(0,r.Z)(e,t,n)})),o}},2690:(e,t,n)=>{"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{Z:()=>r})},4161:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(2690);function o(e){return(0,r.Z)(e).defaultView||window}},7925:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7462);function o(e,t){const n=(0,r.Z)({},t);return Object.keys(e).forEach((a=>{if(a.toString().match(/^(components|slots)$/))n[a]=(0,r.Z)({},e[a],n[a]);else if(a.toString().match(/^(componentsProps|slotProps)$/)){const i=e[a]||{},l=t[a];n[a]={},l&&Object.keys(l)?i&&Object.keys(i)?(n[a]=(0,r.Z)({},l),Object.keys(i).forEach((e=>{n[a][e]=o(i[e],l[e])}))):n[a]=l:n[a]=i}else void 0===n[a]&&(n[a]=e[a])})),n}},7960:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:()=>r})},3546:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);const o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect},3703:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(7960);function a(...e){return r.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{(0,o.Z)(e,t)}))}),e)}},4184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"===a||"number"===a)e.push(n);else if(Array.isArray(n)){if(n.length){var i=o.apply(null,n);i&&e.push(i)}}else if("object"===a){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){e.push(n.toString());continue}for(var l in n)r.call(n,l)&&n[l]&&e.push(l)}}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},6528:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,"body{padding:0px;margin:0px}.slika{background-color:#006064}.slika td{padding:0px 20px}.facts{margin:auto;justify-items:center;flex-direction:column;width:100%;background-color:#006064;color:#b2ebf2;font-size:30px;text-shadow:3px 3px 15px black;font-family:'Trebuchet MS', 'Lucida Sans Unicode';font-weight:bold}.facts .table{margin:auto;width:700px;text-align:center}.facts .table td{padding:10px 5px}.facts .table .category{text-align:left;font-size:24px}.facts .table .author{cursor:pointer;font-size:26px;text-align:right;padding-bottom:20px;color:#9fefd6}.facts .table .author:hover{color:#ffdd56;font-weight:bold;text-shadow:2px 2px 8px black}.facts hr{border:1px solid #4dd0e1}.navigation{display:flex;flex-direction:column;background-color:#293629;width:800px}.loader{margin:auto;padding-top:350px;display:flex;justify-content:center;align-items:center}.history{font-size:28px;text-align:center;height:80px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.paper{display:flex;flex-basis:auto;margin-top:8px;height:35px;justify-items:center;width:250px}.paper .base{justify-items:center;height:30px;padding-top:11px;padding-left:15px;font-size:22px;color:dodgerblue}.place{text-align:center;width:900px;height:460px;margin:auto;background-color:#bdd8ee;font-family:'Trebuchet MS', 'Lucida Sans Unicode';padding-top:10px;margin-top:10px}.place .search{width:250px;margin:auto;background-color:#add3f1}.drzava{cursor:pointer}.drzava:hover{color:#ffdd56;font-weight:bold;text-shadow:2px 2px 12px black}.tabelaZemlje{margin:auto;width:800px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.tabelaZemlje .razmak{height:70px}.tabelaZemlje .results{background-color:#bbdefb;font-size:18px}.tabelaZemlje .navod{font-size:24px;display:flex;align-content:flex-start;width:120px;padding-left:5px}.tabelaZemlje .nameComm{font-size:28px;width:650px;padding-left:5px}.tabelaZemlje .history{font-size:28px;text-align:center;height:60px}.tabelaZemlje .celebrity{text-transform:capitalize;text-align:left}.tabelaZemlje .celebrity,.tabelaZemlje .networth{font-weight:bold;font-size:30px}.tabelaZemlje .historyPerson{font-weight:bold;font-size:30px;cursor:pointer}.tabelaZemlje .historyPerson:hover{text-shadow:1px 1px 3px #64b5f6}.tabelaZemlje .phonetics{font-size:16px;background-color:#bcd0df;border:1px solid grey;border-radius:5px;margin-left:10px;max-width:150px;cursor:pointer;overflow:hidden}.tabelaZemlje .logoImg{max-width:300px}.tabelaZemlje .dictionary{width:800px;font-size:28px;padding-left:10px}.tabelaZemlje .nameComm{font-size:24px}.tabelaZemlje .nameComm ul{padding:0}.tabelaZemlje .nameComm li{list-style:none;padding:0}.tabelaZemlje .more{display:block;align-items:end;width:120px;color:#1976d2;cursor:pointer;font-size:24px}.tabelaZemlje .more:hover{color:#64b5f6}.tabelaZemlje img{width:700px}.tabelaZemlje .imgRobot{width:300px}.tabelaZemlje hr{border:2px solid #6a757e}.tabelaZemlje td{font-size:24px}.tabelaZemlje .colorHex{font-size:22px;width:300px;height:60px;cursor:copy}.tabelaZemlje .colorBut{text-align:center;border-radius:10px;width:100px;background-color:#64b5f6;height:45px;font-size:22px;padding:10px;cursor:pointer}.tabelaZemlje .colorBut:hover{background-color:#1976d2;color:#64b5f6}.mainDiv{background-color:#ffe0b2}.jokesMain{background-color:#b2ebf2;width:400px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesMain th{font-size:32px}.jokesMain td{padding:25px;font-size:34px;font-family:'Arial Narrow Bold', sans-serif}.jokesMain td img{width:500px}.jokesMain .borderGif{border-bottom:2px solid #6767bc}.jokesMain .pun{text-align:center;font-size:34px;font-weight:bold}.jokesText{display:flex;justify-content:space-around;width:1700px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesText th{font-size:32px}.jokesText td{padding:25px;font-size:34px;font-family:'Arial Narrow Bold', sans-serif}.jokesText .created{font-size:18px}.poznatiMain{margin:auto;display:flex;justify-content:space-around;border:2px solid black;width:1200px;height:1650px}.punapi{width:500px;border-radius:10px;background-color:#fff8e1;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.punapi th{font-size:28px;color:#2b7f7f;text-align:center}.punapi td{font-size:28px;padding:2px 20px}.jokeMain{border-radius:12px;width:500px;margin:auto;background-color:#f9fbe7;padding:20px 15px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokeMain .jokeAnswer,.jokeMain .jokeAns{font-weight:bold;font-size:28px;color:#1a237e}.jokeMain .jokeAnswer:hover{color:#ff8f00}.trivia{width:600px;height:900px;margin:auto;background-color:#bdd8ee;padding:30px 15px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.trivia .category{width:300px;height:40px;margin-top:10px;background-color:#80deea;border-radius:7px;font-size:24px;padding:5px 15px;cursor:pointer}.trivia .category:hover{background-color:#26c6da}.trivia .triviaAnswer:hover{color:#388e3c}.trivia .triviaAnswer,.trivia .triviaAns{font-weight:bold;font-size:28px;color:#1a237e}.dadJokes{background-color:#c8e6c9;width:500px;font-size:24px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.dadJokes .border{border-bottom:1px solid #4db6ac}.dadJokes .borderChuk{border-bottom:1px solid #4db6ac;font-size:16px}.dadJokes img{width:700px;text-align:center}.footer{font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;text-align:center;padding-top:750px;height:80px}.metropolitanMain{font-family:Tahoma, sans-serif;margin:auto;width:900px}.metropolitanMain .tableRow{width:890px}.metropolitanMain .tableRow .imgMetro{width:895px;border-radius:5px}.metropolitanMain .results{padding:5px;font-size:18px}.metropolitanMain .metroTitle{text-align:center;font-weight:bold;font-size:28px}.metropolitanMain .forLink{text-align:center;font-size:16px}.metropolitanMain td{font-size:24px;width:880px;padding:7px}.metropolitanMain .dropdown{font-size:30px;font-weight:bold;text-align:center;position:relative;display:inline-block;cursor:pointer}.metropolitanMain .dropdown .dropdown-content{display:none;font-size:22px;font-weight:lighter;position:absolute;background-color:#f9f9f9;min-width:40px;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);padding:10px}.metropolitanMain .dropdown .dropdown-content a{font-size:16px}.metropolitanMain .dropdown:hover{color:#fdc714;text-shadow:2px 2px 7px black}.metropolitanMain .dropdown:hover .dropdown-content{display:block;color:black;text-shadow:none}.gridColor{margin:auto;display:grid;grid-template-columns:auto auto auto auto auto auto auto auto;width:1200px;gap:0px;background-image:linear-gradient(#ded3d3, #c2d5c2);font-size:18px}.gridColor .dropdown{position:relative;display:inline-block;cursor:pointer;height:150px}.gridColor .dropdown .dropdown-content{display:none;font-size:22px;font-weight:lighter;position:absolute;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;background-color:#f9f9f9;min-width:145px;max-width:145px;height:150px;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);padding-left:5px;cursor:copy}.gridColor .dropdown:hover .dropdown-content{display:block;color:black;text-shadow:none}.back-to-top{position:fixed;bottom:20px;right:300px;color:#84867b;cursor:pointer;border-radius:5px}.back-to-top .arrowup{align-items:center;width:30px;height:25px;color:#7a9c99ac;background-color:rgba(222,211,211,0.43);border-radius:5px;border:solid 3px #95beba7c}@media screen and (max-width: 500px){.place{margin:0;display:flex;flex-direction:column;width:350px;height:500px}.jokesText{display:block;width:350px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesText th{font-size:22px}.jokesText td{padding:8px;font-size:20px}.trivia{width:350px}.trivia .triviaAnswer{font-size:22px}.trivia .triviaAns{font-size:22px}.trivia .category{font-size:20px;height:36px}.facts{font-size:18px;text-shadow:1px 1px 3px black}.facts .table{width:340px}.facts .table tr{padding:4px}.facts .table .category{font-size:15px}.facts .table .author{font-size:16px}.jokeMain{width:350px;border-radius:0}.jokeMain .jokeAnswer{font-size:22px}.jokeMain .jokeAns{font-size:22px}.tabelaZemlje{width:350px}.tabelaZemlje .razmak{height:20px}.tabelaZemlje .history,.tabelaZemlje .historyPerson{font-size:20px;height:40px}.tabelaZemlje .celebrity{font-size:22px;padding-left:8px}.tabelaZemlje .logoImg{max-width:200px}.tabelaZemlje .dictionary{padding-left:8px;font-size:20px}.tabelaZemlje img{width:348px}.tabelaZemlje .imgRobot{width:200px}.tabelaZemlje .navod,.tabelaZemlje .more{padding-left:4px;font-size:16px;width:95px}.tabelaZemlje .nameComm{padding-left:4px;font-size:20px;width:255px}.tabelaZemlje .networth{font-size:18px}.tabelaZemlje .phonetics{font-size:10px;border-radius:3px;margin-left:5px;max-width:100px}.tabelaZemlje .colorHex{font-size:18px;width:220px;height:40px}.tabelaZemlje .colorBut{width:80px;border-radius:7px;height:35px;font-size:18px;padding:8px}.dadJokes{width:350px;font-size:18px}.dadJokes .borderChuk,.dadJokes .created{font-size:14px}.dadJokes hr{border:1px solid}.mainJoke{width:350px;font-size:20px}.jokesMain{width:350px;border-radius:0;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesMain th{font-size:20px}.jokesMain td{padding:15px;font-size:20px}.jokesMain td img{width:348px}.jokesMain .pun{font-size:22px}.metropolitanMain{width:350px}.metropolitanMain .tableRow{width:340px}.metropolitanMain .tableRow .imgMetro{width:340px;border-radius:5px}.metropolitanMain .results{padding:4px;font-size:16px}.metropolitanMain .metroTitle{text-align:center;font-weight:bold;font-size:22px}.metropolitanMain .forLink{text-align:center;font-size:10px}.metropolitanMain td{font-size:17px;width:335px;padding:2px}.metropolitanMain .dropdown{font-size:24px;font-weight:bold;text-align:center;position:relative;display:inline-block;cursor:pointer}.metropolitanMain .dropdown .dropdown-content{display:none;font-size:18px;font-weight:lighter;position:absolute;background-color:#f9f9f9;min-width:40px;max-width:300px;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);padding:10px}.metropolitanMain .dropdown .dropdown-content a{font-size:10px}.metropolitanMain .dropdown:hover{color:#fdc714;text-shadow:2px 2px 7px black}.metropolitanMain .dropdown:hover .dropdown-content{display:block;color:black;text-shadow:none}.gridColor{grid-template-columns:auto auto auto auto;width:350px;font-size:16px}.gridColor .dropdown{height:87px}.gridColor .dropdown .dropdown-content{font-size:16px;min-width:82px;max-width:82px;height:87px}.back-to-top{right:20px}}\n","",{version:3,sources:["webpack://./src/scss/main.scss"],names:[],mappings:"AAAA,KACI,WAAY,CACZ,UAAW,CACd,OAGG,wBAAyB,CAD7B,UAMQ,gBAAiB,CACpB,OAMD,WAAY,CAEZ,oBAAqB,CACrB,qBAAsB,CAKtB,UAAW,CAIX,wBAAyB,CAEzB,aAAc,CACd,cAAe,CACf,8BAA+B,CAE/B,iDAAkD,CAElD,gBAAiB,CArBrB,cAwBQ,WAAY,CACZ,WAAY,CACZ,iBAAkB,CA1B1B,iBA6BY,gBAAiB,CA7B7B,wBAiCY,eAAgB,CAChB,cAAe,CAlC3B,sBAsCY,cAAe,CACf,cAAe,CACf,gBAAiB,CACjB,mBAAoB,CACpB,aAAc,CA1C1B,4BA6CgB,aAAwB,CACxB,gBAAiB,CACjB,6BAA8B,CA/C9C,UAsDQ,wBAAyB,CAC5B,YAID,YAAa,CACb,qBAAsB,CACtB,wBAAyB,CACzB,WAAY,CACf,QAGG,WAAY,CACZ,iBAAkB,CAClB,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CAEtB,SAGG,cAAe,CACf,iBAAkB,CAClB,WAAY,CACZ,oGAAqG,CACxG,OAGG,YAAa,CACb,eAAgB,CAChB,cAAe,CAEf,WAAY,CACZ,oBAAqB,CACrB,WAAY,CAPhB,aAWQ,oBAAqB,CAErB,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CAEpB,OAQD,iBAAkB,CAClB,WAAY,CACZ,YAAa,CACb,WAAY,CACZ,wBAAyB,CAEzB,iDAAkD,CAElD,gBAAiB,CACjB,eAAgB,CAZpB,eAgBQ,WAAY,CACZ,WAAY,CACZ,wBAAyB,CAE5B,QAOD,cAAe,CADnB,cAIQ,aAAwB,CACxB,gBAAiB,CACjB,8BAA+B,CAClC,cAOD,WAAY,CAIZ,WAAY,CACZ,oGAAqG,CAPzG,sBAUQ,WAAY,CAVpB,uBAcQ,wBAAyB,CACzB,cAAe,CAfvB,qBAmBQ,cAAe,CAEf,YAAa,CACb,wBAAyB,CAEzB,WAAY,CACZ,gBAAiB,CAzBzB,wBA6BQ,cAAe,CACf,WAAY,CACZ,gBAAiB,CA/BzB,uBAmCQ,cAAe,CACf,iBAAkB,CAClB,WAAY,CArCpB,yBAyCQ,yBAA0B,CAC1B,eAAgB,CA1CxB,iDA+CQ,gBAAiB,CACjB,cAAe,CAhDvB,6BAoDQ,gBAAiB,CACjB,cAAe,CACf,cAAe,CAtDvB,mCAyDY,+BAAgC,CAzD5C,yBAgEQ,cAAe,CACf,wBAAyB,CACzB,qBAAsB,CACtB,iBAAkB,CAClB,gBAAiB,CACjB,eAAgB,CAChB,cAAe,CAEf,eAAgB,CAxExB,uBA4EQ,eAAgB,CA5ExB,0BAgFQ,WAAY,CACZ,cAAe,CACf,iBAAkB,CAlF1B,wBAsFQ,cAAe,CAtFvB,2BAyFY,SAAU,CAzFtB,2BA6FY,eAAgB,CAChB,SAAU,CA9FtB,oBAmGQ,aAAc,CACd,eAAgB,CAChB,WAAY,CAEZ,aAAc,CACd,cAAe,CACf,cAAe,CAzGvB,0BA4GY,aAAc,CA5G1B,kBAiHQ,WAAY,CAjHpB,wBAqHQ,WAAY,CArHpB,iBA2HQ,wBAAyB,CA3HjC,iBA+HQ,cAAe,CA/HvB,wBAmIQ,cAAe,CACf,WAAY,CACZ,WAAY,CACZ,WAAY,CAtIpB,wBA0IQ,iBAAkB,CAClB,kBAAmB,CACnB,WAAY,CACZ,wBAAyB,CACzB,WAAY,CACZ,cAAe,CACf,YAAa,CAEb,cAAe,CAlJvB,8BAqJY,wBAAyB,CACzB,aAAc,CACjB,SAML,wBAAyB,CAE5B,WASG,wBAAyB,CACzB,WAAY,CAEZ,oGAAqG,CAJzG,cAOQ,cAAe,CAPvB,cAWQ,YAAa,CACb,cAAe,CACf,2CAA4C,CAbpD,kBAgBY,WAAY,CAhBxB,sBAqBQ,+BAA2C,CArBnD,gBAyBQ,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CACpB,WAID,YAAa,CACb,4BAA6B,CAC7B,YAAa,CAEb,oGAAqG,CALzG,cAQQ,cAAe,CARvB,cAYQ,YAAa,CACb,cAAe,CACf,2CAA4C,CAdpD,oBAmBQ,cAAe,CAClB,aAQD,WAAY,CACZ,YAAa,CACb,4BAA6B,CAC7B,sBAAuB,CACvB,YAAa,CACb,aAAc,CACjB,QAKG,WAAY,CACZ,kBAAmB,CACnB,wBAAyB,CACzB,oGAAqG,CAJzG,WAOQ,cAAe,CACf,aAAwB,CACxB,iBAAkB,CAT1B,WAaQ,cAAe,CACf,gBAAiB,CACpB,UAID,kBAAmB,CACnB,WAAY,CAEZ,WAAY,CACZ,wBAAyB,CACzB,iBAAkB,CAClB,oGAAqG,CAPzG,yCAWQ,gBAAiB,CACjB,cAAe,CACf,aAAc,CAbtB,4BAkBY,aAAc,CACjB,QAKL,WAAY,CACZ,YAAa,CACb,WAAY,CACZ,wBAAyB,CACzB,iBAAkB,CAClB,oGAAqG,CANzG,kBASQ,WAAY,CACZ,WAAY,CACZ,eAAgB,CAChB,wBAAyB,CACzB,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CACjB,cAAe,CAhBvB,wBAmBY,wBAAyB,CAnBrC,4BAyBY,aAAc,CAzB1B,yCA+BQ,gBAAiB,CACjB,cAAe,CACf,aAAc,CACjB,UAID,wBAAyB,CACzB,WAAY,CACZ,cAAe,CACf,oGAAqG,CAJzG,kBAOQ,+BAAgC,CAPxC,sBAaQ,+BAAgC,CAEhC,cAAe,CAfvB,cAqBQ,WAAY,CACZ,iBAAkB,CACrB,QAKD,oGAAqG,CACrG,iBAAkB,CAClB,iBAAkB,CAClB,WAAY,CACf,kBAIG,8BAA+B,CAC/B,WAAY,CACZ,WAAY,CAHhB,4BAMQ,WAAY,CANpB,sCASY,WAAY,CACZ,iBAAkB,CAV9B,2BAeQ,WAAY,CACZ,cAAe,CAhBvB,8BAmBQ,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CArBvB,2BAwBQ,iBAAkB,CAClB,cAAe,CAzBvB,qBA4BQ,cAAe,CACf,WAAY,CACZ,WAAY,CA9BpB,4BAmCQ,cAAe,CACf,gBAAiB,CAEjB,iBAAkB,CAElB,iBAAkB,CAClB,oBAAqB,CACrB,cAAe,CA1CvB,8CA6CY,YAAa,CACb,cAAe,CACf,mBAAoB,CACpB,iBAAkB,CAGlB,wBAAyB,CACzB,cAAe,CACf,2CAA+C,CAC/C,YAAa,CAtDzB,gDA2DgB,cAAe,CA3D/B,kCAiEY,aAAc,CACd,6BAA8B,CAlE1C,oDAsEY,aAAc,CACd,WAAY,CACZ,gBAAiB,CAGpB,WAKL,WAAY,CACZ,YAAa,CACb,6DAA8D,CAC9D,YAAa,CACb,OAAQ,CACR,kDAAyE,CACzE,cAAe,CAPnB,qBAUQ,iBAAkB,CAClB,oBAAqB,CACrB,cAAe,CACf,YAAa,CAbrB,uCAgBY,YAAa,CACb,cAAe,CACf,mBAAoB,CACpB,iBAAkB,CAClB,oGAAqG,CACrG,wBAAyB,CACzB,eAAgB,CAChB,eAAgB,CAChB,YAAa,CACb,2CAA+C,CAC/C,gBAAiB,CACjB,WAAY,CA3BxB,6CA+BY,aAAc,CACd,WAAY,CACZ,gBAAiB,CACpB,aAIL,cAAe,CACf,WAAY,CACZ,WAAY,CAEZ,aAAc,CACd,cAAe,CACf,iBAAkB,CAPtB,sBAUQ,kBAAmB,CAEnB,UAAW,CACX,WAAY,CACZ,eAAgB,CAChB,uCAA2C,CAE3C,iBAAkB,CAClB,0BAA2B,CAC9B,qCAKD,OACI,QAAS,CACT,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,YAAa,CAEhB,WAGG,aAAc,CACd,WAAY,CAEZ,oGAAqG,CAJzG,cAOQ,cAAe,CAPvB,cAWQ,WAAY,CACZ,cAAe,CAGlB,QAID,WAAY,CADhB,sBAIQ,cAAe,CAJvB,mBASQ,cAAe,CATvB,kBAaQ,cAAe,CACf,WAAY,CACf,OAKD,cAAe,CACf,6BAA8B,CAHlC,cAOQ,WAAY,CAPpB,iBAUY,WAAY,CAVxB,wBAcY,cAAe,CAd3B,sBAkBY,cAAe,CAClB,UAML,WAAY,CACZ,eAAgB,CAFpB,sBAKQ,cAAe,CALvB,mBAUQ,cAAe,CAClB,cAMD,WAAY,CADhB,sBAIQ,WAAY,CAJpB,oDASQ,cAAe,CACf,WAAY,CAVpB,yBAeQ,cAAe,CACf,gBAAiB,CAhBzB,uBAoBQ,eAAgB,CApBxB,0BAwBQ,gBAAiB,CACjB,cAAe,CAzBvB,kBA6BQ,WAAY,CA7BpB,wBAiCQ,WAAY,CAjCpB,yCAsCQ,gBAAiB,CACjB,cAAe,CACf,UAAW,CAxCnB,wBA4CQ,gBAAiB,CACjB,cAAe,CACf,WAAY,CA9CpB,wBAkDQ,cAAe,CAlDvB,yBAsDQ,cAAe,CAGf,iBAAkB,CAClB,eAAgB,CAChB,eAAgB,CA3DxB,wBAgEQ,cAAe,CACf,WAAY,CACZ,WAAY,CAlEpB,wBAsEQ,UAAW,CACX,iBAAkB,CAClB,WAAY,CACZ,cAAe,CACf,WAAY,CACf,UAKD,WAAY,CACZ,cAAe,CAHnB,yCAOQ,cAAe,CAPvB,aAWQ,gBAAiB,CACpB,UAID,WAAY,CACZ,cAAe,CAClB,WAIG,WAAY,CACZ,eAAgB,CAChB,oGAAqG,CAJzG,cAOQ,cAAe,CAPvB,cAWQ,YAAa,CACb,cAAe,CAZvB,kBAgBY,WAAY,CAhBxB,gBAqBQ,cAAe,CAClB,kBAKD,WAAY,CAFhB,4BAKQ,WAAY,CALpB,sCAQY,WAAY,CACZ,iBAAkB,CAT9B,2BAcQ,WAAY,CACZ,cAAe,CAfvB,8BAmBQ,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CArBvB,2BAyBQ,iBAAkB,CAClB,cAAe,CA1BvB,qBAgCQ,cAAe,CACf,WAAY,CACZ,WAAY,CAlCpB,4BAsCQ,cAAe,CACf,gBAAiB,CAEjB,iBAAkB,CAElB,iBAAkB,CAClB,oBAAqB,CACrB,cAAe,CA7CvB,8CAgDY,YAAa,CACb,cAAe,CACf,mBAAoB,CACpB,iBAAkB,CAGlB,wBAAyB,CACzB,cAAe,CACf,eAAgB,CAChB,2CAA+C,CAC/C,YAAa,CA1DzB,gDA8DgB,cAAe,CA9D/B,kCAoEY,aAAc,CACd,6BAA8B,CArE1C,oDAyEY,aAAc,CACd,WAAY,CACZ,gBAAiB,CAGpB,WAKL,yCAA0C,CAC1C,WAAY,CACZ,cAAe,CAHnB,qBAMQ,WAAY,CANpB,uCASY,cAAe,CACf,cAAe,CACf,cAAe,CACf,WAAY,CACf,aAIL,UAAW,CACd",sourcesContent:["body {\r\n    padding: 0px;\r\n    margin: 0px;\r\n}\r\n\r\n.slika {\r\n    background-color: #006064;\r\n\r\n\r\n\r\n    td {\r\n        padding: 0px 20px;\r\n    }\r\n\r\n\r\n}\r\n\r\n.facts {\r\n    margin: auto;\r\n\r\n    justify-items: center;\r\n    flex-direction: column;\r\n\r\n\r\n\r\n\r\n    width: 100%;\r\n    // height: 300px;\r\n\r\n\r\n    background-color: #006064;\r\n\r\n    color: #b2ebf2;\r\n    font-size: 30px;\r\n    text-shadow: 3px 3px 15px black;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode';\r\n\r\n    font-weight: bold;\r\n\r\n    .table {\r\n        margin: auto;\r\n        width: 700px;\r\n        text-align: center;\r\n\r\n        td {\r\n            padding: 10px 5px;\r\n        }\r\n\r\n        .category {\r\n            text-align: left;\r\n            font-size: 24px;\r\n        }\r\n\r\n        .author {\r\n            cursor: pointer;\r\n            font-size: 26px;\r\n            text-align: right;\r\n            padding-bottom: 20px;\r\n            color: #9fefd6;\r\n\r\n            &:hover {\r\n                color: rgb(255, 221, 86);\r\n                font-weight: bold;\r\n                text-shadow: 2px 2px 8px black;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    hr {\r\n        border: 1px solid #4dd0e1;\r\n    }\r\n}\r\n\r\n.navigation {\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: #293629;\r\n    width: 800px;\r\n}\r\n\r\n.loader {\r\n    margin: auto;\r\n    padding-top: 350px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n}\r\n\r\n.history {\r\n    font-size: 28px;\r\n    text-align: center;\r\n    height: 80px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n\r\n.paper {\r\n    display: flex;\r\n    flex-basis: auto;\r\n    margin-top: 8px;\r\n\r\n    height: 35px;\r\n    justify-items: center;\r\n    width: 250px;\r\n\r\n\r\n    .base {\r\n        justify-items: center;\r\n\r\n        height: 30px;\r\n        padding-top: 11px;\r\n        padding-left: 15px;\r\n        font-size: 22px;\r\n        color: dodgerblue;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n.place {\r\n\r\n\r\n    text-align: center;\r\n    width: 900px;\r\n    height: 460px;\r\n    margin: auto;\r\n    background-color: #bdd8ee;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode';\r\n\r\n    padding-top: 10px;\r\n    margin-top: 10px;\r\n\r\n\r\n    .search {\r\n        width: 250px;\r\n        margin: auto;\r\n        background-color: #add3f1;\r\n        // padding: auto;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n.drzava {\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        color: rgb(255, 221, 86);\r\n        font-weight: bold;\r\n        text-shadow: 2px 2px 12px black;\r\n    }\r\n}\r\n\r\n\r\n\r\n.tabelaZemlje {\r\n\r\n    margin: auto;\r\n\r\n\r\n\r\n    width: 800px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .razmak {\r\n        height: 70px;\r\n    }\r\n\r\n    .results {\r\n        background-color: #bbdefb;\r\n        font-size: 18px;\r\n    }\r\n\r\n    .navod {\r\n        font-size: 24px;\r\n\r\n        display: flex;\r\n        align-content: flex-start;\r\n\r\n        width: 120px;\r\n        padding-left: 5px;\r\n    }\r\n\r\n    .nameComm {\r\n        font-size: 28px;\r\n        width: 650px;\r\n        padding-left: 5px;\r\n    }\r\n\r\n    .history {\r\n        font-size: 28px;\r\n        text-align: center;\r\n        height: 60px;\r\n    }\r\n\r\n    .celebrity {\r\n        text-transform: capitalize;\r\n        text-align: left;\r\n    }\r\n\r\n    .celebrity,\r\n    .networth {\r\n        font-weight: bold;\r\n        font-size: 30px;\r\n    }\r\n\r\n    .historyPerson {\r\n        font-weight: bold;\r\n        font-size: 30px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            text-shadow: 1px 1px 3px #64b5f6;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    .phonetics {\r\n        font-size: 16px;\r\n        background-color: #bcd0df;\r\n        border: 1px solid grey;\r\n        border-radius: 5px;\r\n        margin-left: 10px;\r\n        max-width: 150px;\r\n        cursor: pointer;\r\n\r\n        overflow: hidden;\r\n    }\r\n\r\n    .logoImg {\r\n        max-width: 300px;\r\n    }\r\n\r\n    .dictionary {\r\n        width: 800px;\r\n        font-size: 28px;\r\n        padding-left: 10px;\r\n    }\r\n\r\n    .nameComm {\r\n        font-size: 24px;\r\n\r\n        ul {\r\n            padding: 0;\r\n        }\r\n\r\n        li {\r\n            list-style: none;\r\n            padding: 0;\r\n        }\r\n    }\r\n\r\n    .more {\r\n        display: block;\r\n        align-items: end;\r\n        width: 120px;\r\n        // text-align: right;\r\n        color: #1976d2;\r\n        cursor: pointer;\r\n        font-size: 24px;\r\n\r\n        &:hover {\r\n            color: #64b5f6;\r\n        }\r\n    }\r\n\r\n    img {\r\n        width: 700px;\r\n    }\r\n\r\n    .imgRobot {\r\n        width: 300px;\r\n    }\r\n\r\n    hr {\r\n\r\n\r\n        border: 2px solid #6a757e;\r\n    }\r\n\r\n    td {\r\n        font-size: 24px;\r\n    }\r\n\r\n    .colorHex {\r\n        font-size: 22px;\r\n        width: 300px;\r\n        height: 60px;\r\n        cursor: copy;\r\n    }\r\n\r\n    .colorBut {\r\n        text-align: center;\r\n        border-radius: 10px;\r\n        width: 100px;\r\n        background-color: #64b5f6;\r\n        height: 45px;\r\n        font-size: 22px;\r\n        padding: 10px;\r\n\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: #1976d2;\r\n            color: #64b5f6;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n.mainDiv {\r\n    background-color: #ffe0b2;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n.jokesMain {\r\n    background-color: #b2ebf2;\r\n    width: 400px;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    th {\r\n        font-size: 32px;\r\n    }\r\n\r\n    td {\r\n        padding: 25px;\r\n        font-size: 34px;\r\n        font-family: 'Arial Narrow Bold', sans-serif;\r\n\r\n        img {\r\n            width: 500px;\r\n        }\r\n    }\r\n\r\n    .borderGif {\r\n        border-bottom: 2px solid rgb(103, 103, 188);\r\n    }\r\n\r\n    .pun {\r\n        text-align: center;\r\n        font-size: 34px;\r\n        font-weight: bold;\r\n    }\r\n}\r\n\r\n.jokesText {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 1700px;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    th {\r\n        font-size: 32px;\r\n    }\r\n\r\n    td {\r\n        padding: 25px;\r\n        font-size: 34px;\r\n        font-family: 'Arial Narrow Bold', sans-serif;\r\n\r\n    }\r\n\r\n    .created {\r\n        font-size: 18px;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.poznatiMain {\r\n    margin: auto;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    border: 2px solid black;\r\n    width: 1200px;\r\n    height: 1650px;\r\n}\r\n\r\n\r\n\r\n.punapi {\r\n    width: 500px;\r\n    border-radius: 10px;\r\n    background-color: #fff8e1;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    th {\r\n        font-size: 28px;\r\n        color: rgb(43, 127, 127);\r\n        text-align: center;\r\n    }\r\n\r\n    td {\r\n        font-size: 28px;\r\n        padding: 2px 20px;\r\n    }\r\n}\r\n\r\n.jokeMain {\r\n    border-radius: 12px;\r\n    width: 500px;\r\n    // height: 500px;\r\n    margin: auto;\r\n    background-color: #f9fbe7;\r\n    padding: 20px 15px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .jokeAnswer,\r\n    .jokeAns {\r\n        font-weight: bold;\r\n        font-size: 28px;\r\n        color: #1a237e;\r\n    }\r\n\r\n    .jokeAnswer {\r\n        &:hover {\r\n            color: #ff8f00;\r\n        }\r\n    }\r\n}\r\n\r\n.trivia {\r\n    width: 600px;\r\n    height: 900px;\r\n    margin: auto;\r\n    background-color: #bdd8ee;\r\n    padding: 30px 15px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .category {\r\n        width: 300px;\r\n        height: 40px;\r\n        margin-top: 10px;\r\n        background-color: #80deea;\r\n        border-radius: 7px;\r\n        font-size: 24px;\r\n        padding: 5px 15px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: #26c6da;\r\n        }\r\n    }\r\n\r\n    .triviaAnswer {\r\n        &:hover {\r\n            color: #388e3c;\r\n        }\r\n    }\r\n\r\n    .triviaAnswer,\r\n    .triviaAns {\r\n        font-weight: bold;\r\n        font-size: 28px;\r\n        color: #1a237e;\r\n    }\r\n}\r\n\r\n.dadJokes {\r\n    background-color: #c8e6c9;\r\n    width: 500px;\r\n    font-size: 24px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .border {\r\n        border-bottom: 1px solid #4db6ac;\r\n\r\n\r\n    }\r\n\r\n    .borderChuk {\r\n        border-bottom: 1px solid #4db6ac;\r\n\r\n        font-size: 16px;\r\n    }\r\n\r\n\r\n\r\n    img {\r\n        width: 700px;\r\n        text-align: center;\r\n    }\r\n}\r\n\r\n\r\n.footer {\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n    text-align: center;\r\n    padding-top: 750px;\r\n    height: 80px;\r\n}\r\n\r\n\r\n.metropolitanMain {\r\n    font-family: Tahoma, sans-serif;\r\n    margin: auto;\r\n    width: 900px;\r\n\r\n    .tableRow {\r\n        width: 890px;\r\n\r\n        .imgMetro {\r\n            width: 895px;\r\n            border-radius: 5px;\r\n        }\r\n    }\r\n\r\n    .results {\r\n        padding: 5px;\r\n        font-size: 18px;\r\n    }\r\n    .metroTitle {\r\n        text-align: center;\r\n        font-weight: bold;\r\n        font-size: 28px;\r\n    }\r\n    .forLink {\r\n        text-align: center;\r\n        font-size: 16px;\r\n    }\r\n    td {\r\n        font-size: 24px;\r\n        width: 880px;\r\n        padding: 7px;\r\n    }\r\n\r\n\r\n    .dropdown {\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n\r\n        text-align: center;\r\n\r\n        position: relative;\r\n        display: inline-block;\r\n        cursor: pointer;\r\n\r\n        .dropdown-content {\r\n            display: none;\r\n            font-size: 22px;\r\n            font-weight: lighter;\r\n            position: absolute;\r\n\r\n\r\n            background-color: #f9f9f9;\r\n            min-width: 40px;\r\n            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n            padding: 10px;\r\n\r\n\r\n            // z-index: 1;\r\n            a {\r\n                font-size: 16px;\r\n            }\r\n\r\n        }\r\n\r\n        &:hover {\r\n            color: #fdc714;\r\n            text-shadow: 2px 2px 7px black;\r\n        }\r\n\r\n        &:hover .dropdown-content {\r\n            display: block;\r\n            color: black;\r\n            text-shadow: none;\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\n.gridColor {\r\n    margin: auto;\r\n    display: grid;\r\n    grid-template-columns: auto auto auto auto auto auto auto auto;\r\n    width: 1200px;\r\n    gap: 0px;\r\n    background-image: linear-gradient(rgb(222, 211, 211), rgb(194, 213, 194));\r\n    font-size: 18px;\r\n\r\n    .dropdown {\r\n        position: relative;\r\n        display: inline-block;\r\n        cursor: pointer;\r\n        height: 150px;\r\n\r\n        .dropdown-content {\r\n            display: none;\r\n            font-size: 22px;\r\n            font-weight: lighter;\r\n            position: absolute;\r\n            font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n            background-color: #f9f9f9;\r\n            min-width: 145px;\r\n            max-width: 145px;\r\n            height: 150px;\r\n            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n            padding-left: 5px;\r\n            cursor: copy;\r\n        }\r\n\r\n        &:hover .dropdown-content {\r\n            display: block;\r\n            color: black;\r\n            text-shadow: none;\r\n        }\r\n    }\r\n}\r\n.back-to-top {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 300px;\r\n\r\n    color: #84867b;\r\n    cursor: pointer;\r\n    border-radius: 5px;\r\n\r\n    .arrowup {\r\n        align-items: center;\r\n\r\n        width: 30px;\r\n        height: 25px;\r\n        color: #7a9c99ac;\r\n        background-color: rgba(222, 211, 211, 0.43);\r\n\r\n        border-radius: 5px;\r\n        border: solid 3px #95beba7c;\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n\r\n    .place {\r\n        margin: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 350px;\r\n        height: 500px;\r\n\r\n    }\r\n\r\n    .jokesText {\r\n        display: block;\r\n        width: 350px;\r\n\r\n        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n        th {\r\n            font-size: 22px;\r\n        }\r\n\r\n        td {\r\n            padding: 8px;\r\n            font-size: 20px;\r\n\r\n\r\n        }\r\n    }\r\n\r\n    .trivia {\r\n        width: 350px;\r\n\r\n        .triviaAnswer {\r\n            font-size: 22px;\r\n\r\n        }\r\n\r\n        .triviaAns {\r\n            font-size: 22px;\r\n        }\r\n\r\n        .category {\r\n            font-size: 20px;\r\n            height: 36px;\r\n        }\r\n    }\r\n\r\n    .facts {\r\n\r\n        font-size: 18px;\r\n        text-shadow: 1px 1px 3px black;\r\n\r\n\r\n        .table {\r\n            width: 340px;\r\n\r\n            tr {\r\n                padding: 4px;\r\n            }\r\n\r\n            .category {\r\n                font-size: 15px;\r\n            }\r\n\r\n            .author {\r\n                font-size: 16px;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    .jokeMain {\r\n        width: 350px;\r\n        border-radius: 0;\r\n\r\n        .jokeAnswer {\r\n            font-size: 22px;\r\n\r\n        }\r\n\r\n        .jokeAns {\r\n            font-size: 22px;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    .tabelaZemlje {\r\n        width: 350px;\r\n\r\n        .razmak {\r\n            height: 20px;\r\n        }\r\n\r\n        .history,\r\n        .historyPerson {\r\n            font-size: 20px;\r\n            height: 40px;\r\n        }\r\n\r\n\r\n        .celebrity {\r\n            font-size: 22px;\r\n            padding-left: 8px;\r\n        }\r\n\r\n        .logoImg {\r\n            max-width: 200px;\r\n        }\r\n\r\n        .dictionary {\r\n            padding-left: 8px;\r\n            font-size: 20px;\r\n        }\r\n\r\n        img {\r\n            width: 348px;\r\n        }\r\n\r\n        .imgRobot {\r\n            width: 200px;\r\n        }\r\n\r\n        .navod,\r\n        .more {\r\n            padding-left: 4px;\r\n            font-size: 16px;\r\n            width: 95px;\r\n        }\r\n\r\n        .nameComm {\r\n            padding-left: 4px;\r\n            font-size: 20px;\r\n            width: 255px;\r\n        }\r\n\r\n        .networth {\r\n            font-size: 18px;\r\n        }\r\n\r\n        .phonetics {\r\n            font-size: 10px;\r\n\r\n\r\n            border-radius: 3px;\r\n            margin-left: 5px;\r\n            max-width: 100px;\r\n\r\n        }\r\n\r\n        .colorHex {\r\n            font-size: 18px;\r\n            width: 220px;\r\n            height: 40px;\r\n\r\n        }\r\n        .colorBut {\r\n            width: 80px;\r\n            border-radius: 7px;\r\n            height: 35px;\r\n            font-size: 18px;\r\n            padding: 8px;\r\n        }\r\n    }\r\n\r\n    .dadJokes {\r\n\r\n        width: 350px;\r\n        font-size: 18px;\r\n\r\n        .borderChuk,\r\n        .created {\r\n            font-size: 14px;\r\n        }\r\n\r\n        hr {\r\n            border: 1px solid;\r\n        }\r\n    }\r\n\r\n    .mainJoke {\r\n        width: 350px;\r\n        font-size: 20px;\r\n    }\r\n\r\n    .jokesMain {\r\n\r\n        width: 350px;\r\n        border-radius: 0;\r\n        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n        th {\r\n            font-size: 20px;\r\n        }\r\n\r\n        td {\r\n            padding: 15px;\r\n            font-size: 20px;\r\n\r\n\r\n            img {\r\n                width: 348px;\r\n            }\r\n        }\r\n\r\n        .pun {\r\n            font-size: 22px;\r\n        }\r\n    }\r\n\r\n    .metropolitanMain {\r\n\r\n        width: 350px;\r\n\r\n        .tableRow {\r\n            width: 340px;\r\n\r\n            .imgMetro {\r\n                width: 340px;\r\n                border-radius: 5px;\r\n            }\r\n        }\r\n\r\n        .results {\r\n            padding: 4px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .metroTitle {\r\n            text-align: center;\r\n            font-weight: bold;\r\n            font-size: 22px;\r\n        }\r\n\r\n        .forLink {\r\n            text-align: center;\r\n            font-size: 10px;\r\n        }\r\n\r\n\r\n\r\n        td {\r\n            font-size: 17px;\r\n            width: 335px;\r\n            padding: 2px;\r\n        }\r\n\r\n        .dropdown {\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n\r\n            text-align: center;\r\n\r\n            position: relative;\r\n            display: inline-block;\r\n            cursor: pointer;\r\n\r\n            .dropdown-content {\r\n                display: none;\r\n                font-size: 18px;\r\n                font-weight: lighter;\r\n                position: absolute;\r\n\r\n\r\n                background-color: #f9f9f9;\r\n                min-width: 40px;\r\n                max-width: 300px;\r\n                box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n                padding: 10px;\r\n\r\n                // z-index: 1;\r\n                a {\r\n                    font-size: 10px;\r\n                }\r\n\r\n            }\r\n\r\n            &:hover {\r\n                color: #fdc714;\r\n                text-shadow: 2px 2px 7px black;\r\n            }\r\n\r\n            &:hover .dropdown-content {\r\n                display: block;\r\n                color: black;\r\n                text-shadow: none;\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    .gridColor {\r\n        grid-template-columns: auto auto auto auto;\r\n        width: 350px;\r\n        font-size: 16px;\r\n\r\n        .dropdown {\r\n            height: 87px;\r\n\r\n            .dropdown-content {\r\n                font-size: 16px;\r\n                min-width: 82px;\r\n                max-width: 82px;\r\n                height: 87px;\r\n            }\r\n        }\r\n    }\r\n    .back-to-top {\r\n        right: 20px;\r\n    }\r\n\r\n}"],sourceRoot:""}]);const l=i},5740:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,"/* body {\n    margin: 0;\n}\n.title {\n    background-color: red;\n    color: #fff;\n    padding: 20px;\n    font-size: 18px;\n    text-align: center;\n}\n.custom-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n.custom-table,\n.custom-td {\n\n    border: 1px solid #ddd;\n    text-align: left;\n    padding: 10px;\n}\n\n.custom-table th {\n    background-color: mediumaquamarine;\n    color: #fff;\n}\n.custom-table tr:nth-child(even) {\n    background-color: #ddd;\n}\n\n.main-heading {\n    padding: 30px;\n    font-size: 22px;\n    margin: 20px auto;\n    text-align: center;\n}\n.active {\n    background-color: cornflowerblue;\n    color: #fff;\n    border: 2px solid red;\n}\n\n.form-text {\n    border: 2px solid red;\n}\n\n\n.btn {\n    min-width: 150px;\n    background-color: crimson;\n    color: #fff;\n    font-size: 18px;\n    display: block;\n    padding: 10px;\n    margin: 20px;\n    border: none;\n    cursor: pointer;\n}\n.btn:hover {\n    background-color: rgb(130, 189, 248);\n}\n.btn.btn-warning {\n    background-color: orange;\n}\n\n.btn:disabled {\n    background-color: darkgrey;\n    cursor: not-allowed;\n}\n.top_nav {\n\n    display: flex;\n    background-color: blue;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n.top_nav .navig {\n\n    margin: 15px;\n    padding: 20px;\n    font-size: 18px;\n    color: #fff;\n    text-decoration: none;\n}*/\n.loader-container {\n    height: 100vh;\n \n    background-color: rgb(174, 191, 191);\n\n    width: 800px;\n    display: flex;\n    justify-content: center;\n    margin: auto;\n    /* align-items: center; */\n}\n\n.comments-container {\n    max-width: 450px;\n    margin: auto;\n}\n.comments {\n    padding: 20px 0;\n    border-bottom:  solid 2px  #ccc;\n \n} \n body {\n    padding: 50px;\n    background-color: #cacbda;\n    color: #0d2a32;\n}\n.todo-input-container input{\n    padding: 10px;\n    border: 2px sollid #fff;\n    border-radius: 5px;\n    outline: none;\n}\n.todo-input-container .btn {\n    margin-left: 10px;\n    background-color: #fff;\n    color: #333;\n    cursor: pointer;\n}\n.todo-list {\n    padding: 0;\n    list-style: none;\n    max-width: 350px;\n}\n\n.todo-list li {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    color: #333;\n    background-color: #61dafb;\n    padding: 15px;\n    margin: 15px 0;\n    border-radius: 10px;\n} \n\n.loader-container {\n    height: 100hv;\n   \n    background-color: rgb(195, 204, 204);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.single-comment {\n    background-color: #61dafb;\n    padding: 15px;\n    margin-bottom: 20px;\n    border-radius: 5px;\n    color: #333;\n}\n.single-comment\n.samoID {\n    background-color: blueviolet;\n    padding: 12px;\n    margin-right: 12px;\n    cursor: pointer;\n}\n\n.users-container {\n    min-width: 900px;\n    /* background-color: #61dafb; */\n}\n\n.users-container th,\n.users-container td {\n    padding: 5px;\n    text-align: left;\n    border: 1px solid rgb(156, 161, 199);\n    padding-right: 30px;\n}\n\n.users:nth-child(even) {\n\n    border: 1px solid rgb(156, 161, 199);\n    padding: 10px;\n\n    background-color: rgb(156, 161, 199);\n}\n\n.users td {\n\n    padding: 5px 20px;\n\n}\n\n\n.korisnik {\n    display: flex;\n    justify-content: space-between;\n\n    \n\n    /* width: 750px; */\n    background-color: #61dafb;\n}\n.korisnik h1 {\n    font-size: 20px;\n    font-weight: bolder;\n    padding: 5px 10px;\n    color: darkslateblue;\n    font-family: Calibri, 'Trebuchet MS', sans-serif;\n}\n.korisnik p {\n    padding: 10px 10px;\n    font-size: 12px;\n\n}\n\n.korisnik div {\n    width: 250px;\n    padding: 0 10px;\n    /* padding: 8px; */\n    background-color: rgb(184, 205, 227);\n    color: darkslategrey;\n    border-bottom: 2px solid #7272ab;\n}\n\n.korisnik li {\n    list-style: none;\n    padding: 10px;\n}\n\n.lista {\n    font-family: 'Arial Narrow Bold', sans-serif;\n}\n\n.glavni {\n    display: flex;\n}\n\n.glavni h1 {\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande';\n    text-align: center;\n    background-color: antiquewhite;\n    color: darkslategrey;\n}\n\n/* .karusel img{\n    height: 460px;\n    color: rgb(250, 155, 30);\n    \n    font-size: 18px;\n    text-align: center;\n    background-color: #61dafb;\n   } */\n.vajari {\n    width: 700px;\n    display: flex;\n    justify-content: space-between;\n    border-bottom: 3px solid rgb(81, 88, 137);\n   \n}\n.vajari .vajar-opis p, \n.vajari .vajar-opis h2{\n   width: 300px;\n   \n    padding: 15px;\n}\n.vajar-slika {\ntext-align: center;\npadding: 15px;\n}\n.upis-todo {\n    background-color: aliceblue;\n}\n\n\n.tacke2 {\n    margin-top: 460px;\n    top: 8px;\n    width: 1960px;\n    display: block;\n    position: absolute;\n    border-bottom: 16px dotted;\n    animation: move2 5s infinite linear;\n  \n}\n\n\n\n\n@keyframes move2 {\n    from {\n        transform: translateX(1%);\n    }\n\n    to {\n        transform: translateX(-50%);\n    }\n}\n.zaDigitron {\n   margin: 0px 150px;\n    display: flex;\n   justify-content: space-between;\n    align-items: center;\n}\n.form-tekst {\n    border: 2px solid green;\n}\n.form-tekst:hover {\n    border-color: #61dafb;\n    background-color: #ccc;\n}","",{version:3,sources:["webpack://./src/css/styles.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoFE;AACF;IACI,aAAa;;IAEb,oCAAoC;;IAEpC,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,gBAAgB;IAChB,YAAY;AAChB;AACA;IACI,eAAe;IACf,+BAA+B;;AAEnC;CACC;IACG,aAAa;IACb,yBAAyB;IACzB,cAAc;AAClB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,aAAa;AACjB;AACA;IACI,iBAAiB;IACjB,sBAAsB;IACtB,WAAW;IACX,eAAe;AACnB;AACA;IACI,UAAU;IACV,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,WAAW;IACX,yBAAyB;IACzB,aAAa;IACb,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,aAAa;;IAEb,oCAAoC;IACpC,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,WAAW;AACf;AACA;;IAEI,4BAA4B;IAC5B,aAAa;IACb,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,+BAA+B;AACnC;;AAEA;;IAEI,YAAY;IACZ,gBAAgB;IAChB,oCAAoC;IACpC,mBAAmB;AACvB;;AAEA;;IAEI,oCAAoC;IACpC,aAAa;;IAEb,oCAAoC;AACxC;;AAEA;;IAEI,iBAAiB;;AAErB;;;AAGA;IACI,aAAa;IACb,8BAA8B;;;;IAI9B,kBAAkB;IAClB,yBAAyB;AAC7B;AACA;IACI,eAAe;IACf,mBAAmB;IACnB,iBAAiB;IACjB,oBAAoB;IACpB,gDAAgD;AACpD;AACA;IACI,kBAAkB;IAClB,eAAe;;AAEnB;;AAEA;IACI,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,oCAAoC;IACpC,oBAAoB;IACpB,gCAAgC;AACpC;;AAEA;IACI,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,4CAA4C;AAChD;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,mEAAmE;IACnE,kBAAkB;IAClB,8BAA8B;IAC9B,oBAAoB;AACxB;;AAEA;;;;;;;MAOM;AACN;IACI,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,yCAAyC;;AAE7C;AACA;;GAEG,YAAY;;IAEX,aAAa;AACjB;AACA;AACA,kBAAkB;AAClB,aAAa;AACb;AACA;IACI,2BAA2B;AAC/B;;;AAGA;IACI,iBAAiB;IACjB,QAAQ;IACR,aAAa;IACb,cAAc;IACd,kBAAkB;IAClB,0BAA0B;IAC1B,mCAAmC;;AAEvC;;;;;AAKA;IACI;QACI,yBAAyB;IAC7B;;IAEA;QACI,2BAA2B;IAC/B;AACJ;AACA;GACG,iBAAiB;IAChB,aAAa;GACd,8BAA8B;IAC7B,mBAAmB;AACvB;AACA;IACI,uBAAuB;AAC3B;AACA;IACI,qBAAqB;IACrB,sBAAsB;AAC1B",sourcesContent:["/* body {\r\n    margin: 0;\r\n}\r\n.title {\r\n    background-color: red;\r\n    color: #fff;\r\n    padding: 20px;\r\n    font-size: 18px;\r\n    text-align: center;\r\n}\r\n.custom-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n}\r\n.custom-table,\r\n.custom-td {\r\n\r\n    border: 1px solid #ddd;\r\n    text-align: left;\r\n    padding: 10px;\r\n}\r\n\r\n.custom-table th {\r\n    background-color: mediumaquamarine;\r\n    color: #fff;\r\n}\r\n.custom-table tr:nth-child(even) {\r\n    background-color: #ddd;\r\n}\r\n\r\n.main-heading {\r\n    padding: 30px;\r\n    font-size: 22px;\r\n    margin: 20px auto;\r\n    text-align: center;\r\n}\r\n.active {\r\n    background-color: cornflowerblue;\r\n    color: #fff;\r\n    border: 2px solid red;\r\n}\r\n\r\n.form-text {\r\n    border: 2px solid red;\r\n}\r\n\r\n\r\n.btn {\r\n    min-width: 150px;\r\n    background-color: crimson;\r\n    color: #fff;\r\n    font-size: 18px;\r\n    display: block;\r\n    padding: 10px;\r\n    margin: 20px;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n.btn:hover {\r\n    background-color: rgb(130, 189, 248);\r\n}\r\n.btn.btn-warning {\r\n    background-color: orange;\r\n}\r\n\r\n.btn:disabled {\r\n    background-color: darkgrey;\r\n    cursor: not-allowed;\r\n}\r\n.top_nav {\r\n\r\n    display: flex;\r\n    background-color: blue;\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n.top_nav .navig {\r\n\r\n    margin: 15px;\r\n    padding: 20px;\r\n    font-size: 18px;\r\n    color: #fff;\r\n    text-decoration: none;\r\n}*/\r\n.loader-container {\r\n    height: 100vh;\r\n \r\n    background-color: rgb(174, 191, 191);\r\n\r\n    width: 800px;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: auto;\r\n    /* align-items: center; */\r\n}\r\n\r\n.comments-container {\r\n    max-width: 450px;\r\n    margin: auto;\r\n}\r\n.comments {\r\n    padding: 20px 0;\r\n    border-bottom:  solid 2px  #ccc;\r\n \r\n} \r\n body {\r\n    padding: 50px;\r\n    background-color: #cacbda;\r\n    color: #0d2a32;\r\n}\r\n.todo-input-container input{\r\n    padding: 10px;\r\n    border: 2px sollid #fff;\r\n    border-radius: 5px;\r\n    outline: none;\r\n}\r\n.todo-input-container .btn {\r\n    margin-left: 10px;\r\n    background-color: #fff;\r\n    color: #333;\r\n    cursor: pointer;\r\n}\r\n.todo-list {\r\n    padding: 0;\r\n    list-style: none;\r\n    max-width: 350px;\r\n}\r\n\r\n.todo-list li {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    color: #333;\r\n    background-color: #61dafb;\r\n    padding: 15px;\r\n    margin: 15px 0;\r\n    border-radius: 10px;\r\n} \r\n\r\n.loader-container {\r\n    height: 100hv;\r\n   \r\n    background-color: rgb(195, 204, 204);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.single-comment {\r\n    background-color: #61dafb;\r\n    padding: 15px;\r\n    margin-bottom: 20px;\r\n    border-radius: 5px;\r\n    color: #333;\r\n}\r\n.single-comment\r\n.samoID {\r\n    background-color: blueviolet;\r\n    padding: 12px;\r\n    margin-right: 12px;\r\n    cursor: pointer;\r\n}\r\n\r\n.users-container {\r\n    min-width: 900px;\r\n    /* background-color: #61dafb; */\r\n}\r\n\r\n.users-container th,\r\n.users-container td {\r\n    padding: 5px;\r\n    text-align: left;\r\n    border: 1px solid rgb(156, 161, 199);\r\n    padding-right: 30px;\r\n}\r\n\r\n.users:nth-child(even) {\r\n\r\n    border: 1px solid rgb(156, 161, 199);\r\n    padding: 10px;\r\n\r\n    background-color: rgb(156, 161, 199);\r\n}\r\n\r\n.users td {\r\n\r\n    padding: 5px 20px;\r\n\r\n}\r\n\r\n\r\n.korisnik {\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    \r\n\r\n    /* width: 750px; */\r\n    background-color: #61dafb;\r\n}\r\n.korisnik h1 {\r\n    font-size: 20px;\r\n    font-weight: bolder;\r\n    padding: 5px 10px;\r\n    color: darkslateblue;\r\n    font-family: Calibri, 'Trebuchet MS', sans-serif;\r\n}\r\n.korisnik p {\r\n    padding: 10px 10px;\r\n    font-size: 12px;\r\n\r\n}\r\n\r\n.korisnik div {\r\n    width: 250px;\r\n    padding: 0 10px;\r\n    /* padding: 8px; */\r\n    background-color: rgb(184, 205, 227);\r\n    color: darkslategrey;\r\n    border-bottom: 2px solid #7272ab;\r\n}\r\n\r\n.korisnik li {\r\n    list-style: none;\r\n    padding: 10px;\r\n}\r\n\r\n.lista {\r\n    font-family: 'Arial Narrow Bold', sans-serif;\r\n}\r\n\r\n.glavni {\r\n    display: flex;\r\n}\r\n\r\n.glavni h1 {\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande';\r\n    text-align: center;\r\n    background-color: antiquewhite;\r\n    color: darkslategrey;\r\n}\r\n\r\n/* .karusel img{\r\n    height: 460px;\r\n    color: rgb(250, 155, 30);\r\n    \r\n    font-size: 18px;\r\n    text-align: center;\r\n    background-color: #61dafb;\r\n   } */\r\n.vajari {\r\n    width: 700px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-bottom: 3px solid rgb(81, 88, 137);\r\n   \r\n}\r\n.vajari .vajar-opis p, \r\n.vajari .vajar-opis h2{\r\n   width: 300px;\r\n   \r\n    padding: 15px;\r\n}\r\n.vajar-slika {\r\ntext-align: center;\r\npadding: 15px;\r\n}\r\n.upis-todo {\r\n    background-color: aliceblue;\r\n}\r\n\r\n\r\n.tacke2 {\r\n    margin-top: 460px;\r\n    top: 8px;\r\n    width: 1960px;\r\n    display: block;\r\n    position: absolute;\r\n    border-bottom: 16px dotted;\r\n    animation: move2 5s infinite linear;\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n@keyframes move2 {\r\n    from {\r\n        transform: translateX(1%);\r\n    }\r\n\r\n    to {\r\n        transform: translateX(-50%);\r\n    }\r\n}\r\n.zaDigitron {\r\n   margin: 0px 150px;\r\n    display: flex;\r\n   justify-content: space-between;\r\n    align-items: center;\r\n}\r\n.form-tekst {\r\n    border: 2px solid green;\r\n}\r\n.form-tekst:hover {\r\n    border-color: #61dafb;\r\n    background-color: #ccc;\r\n}"],sourceRoot:""}]);const l=i},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var u=0;u<e.length;u++){var s=[].concat(e[u]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},8679:(e,t,n)=>{"use strict";var r=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function c(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=c(t),m=c(n),y=0;y<i.length;++y){var v=i[y];if(!(a[v]||r&&r[v]||m&&m[v]||l&&l[v])){var g=d(n,v);try{u(t,v,g)}catch(e){}}}}return t}},6103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,c=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case u:case d:case y:case m:case c:return e;default:return t}}case o:return t}}}function E(e){return x(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=c,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return E(e)||x(e)===s},t.isConcurrentMode=E,t.isContextConsumer=function(e){return x(e)===u},t.isContextProvider=function(e){return x(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===y},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===c||e.$$typeof===u||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===v)},t.typeOf=x},1296:(e,t,n)=>{"use strict";e.exports=n(6103)},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function c(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),E=Symbol.for("react.portal"),A=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),k=Symbol.for("react.provider"),L=Symbol.for("react.context"),j=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),B=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var T=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var P=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=P&&e[P]||e["@@iterator"])?e:null}var z,M=Object.assign;function R(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var F=!1;function G(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var c="\n"+o[i].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?R(e):""}function D(e){switch(e.tag){case 5:return R(e.type);case 16:return R("Lazy");case 13:return R("Suspense");case 19:return R("SuspenseList");case 0:case 2:case 15:return G(e.type,!1);case 11:return G(e.type.render,!1);case 1:return G(e.type,!0);default:return""}}function Z(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case A:return"Fragment";case E:return"Portal";case C:return"Profiler";case S:return"StrictMode";case O:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case L:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case j:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(t=e.displayName||null)?t:Z(e.type)||"Memo";case B:t=e._payload,e=e._init;try{return Z(e(t))}catch(e){}}return null}function $(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Z(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function U(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function W(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function V(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=U(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Q(e,t){X(e,t);var n=U(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,U(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+U(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:U(n)}}function ae(e,t){var n=U(t.value),r=U(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ce(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ye(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Ae=null,Se=null;function Ce(e){if(e=wo(e)){if("function"!=typeof Ee)throw Error(a(280));var t=e.stateNode;t&&(t=Eo(t),Ee(e.stateNode,e.type,t))}}function ke(e){Ae?Se?Se.push(e):Se=[e]:Ae=e}function Le(){if(Ae){var e=Ae,t=Se;if(Se=Ae=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function je(e,t){return e(t)}function Oe(){}var Ne=!1;function _e(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return je(e,t,n)}finally{Ne=!1,(null!==Ae||null!==Se)&&(Oe(),Le())}}function Be(e,t){var n=e.stateNode;if(null===n)return null;var r=Eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Te=!1;if(s)try{var Pe={};Object.defineProperty(Pe,"passive",{get:function(){Te=!0}}),window.addEventListener("test",Pe,Pe),window.removeEventListener("test",Pe,Pe)}catch(se){Te=!1}function Ie(e,t,n,r,o,a,i,l,c){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var ze=!1,Me=null,Re=!1,Fe=null,Ge={onError:function(e){ze=!0,Me=e}};function De(e,t,n,r,o,a,i,l,c){ze=!1,Me=null,Ie.apply(Ge,arguments)}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ue(e){if(Ze(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ue(o),e;if(i===r)return Ue(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,c=o.child;c;){if(c===n){l=!0,n=o,r=i;break}if(c===r){l=!0,r=o,n=i;break}c=c.sibling}if(!l){for(c=i.child;c;){if(c===n){l=!0,n=i,r=o;break}if(c===r){l=!0,r=i,n=o;break}c=c.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=We(e);if(null!==t)return t;e=e.sibling}return null}var Ye=o.unstable_scheduleCallback,qe=o.unstable_cancelCallback,Ve=o.unstable_shouldYield,Ke=o.unstable_requestPaint,Xe=o.unstable_now,Qe=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ct|0)|0},lt=Math.log,ct=Math.LN2,ut=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=ft(l):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function yt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,Et,At,St,Ct,kt=!1,Lt=[],jt=null,Ot=null,Nt=null,_t=new Map,Bt=new Map,Tt=[],Pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function It(e,t){switch(e){case"focusin":case"focusout":jt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":_t.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Bt.delete(t.pointerId)}}function zt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Mt(e){var t=bo(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void Ct(e.priority,(function(){At(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Rt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Vt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){Rt(e)&&n.delete(t)}function Gt(){kt=!1,null!==jt&&Rt(jt)&&(jt=null),null!==Ot&&Rt(Ot)&&(Ot=null),null!==Nt&&Rt(Nt)&&(Nt=null),_t.forEach(Ft),Bt.forEach(Ft)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,kt||(kt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Gt)))}function Zt(e){function t(t){return Dt(t,e)}if(0<Lt.length){Dt(Lt[0],e);for(var n=1;n<Lt.length;n++){var r=Lt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==jt&&Dt(jt,e),null!==Ot&&Dt(Ot,e),null!==Nt&&Dt(Nt,e),_t.forEach(t),Bt.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)Mt(n),null===n.blockedOn&&Tt.shift()}var $t=w.ReactCurrentBatchConfig,Ut=!0;function Ht(e,t,n,r){var o=bt,a=$t.transition;$t.transition=null;try{bt=1,Yt(e,t,n,r)}finally{bt=o,$t.transition=a}}function Wt(e,t,n,r){var o=bt,a=$t.transition;$t.transition=null;try{bt=4,Yt(e,t,n,r)}finally{bt=o,$t.transition=a}}function Yt(e,t,n,r){if(Ut){var o=Vt(e,t,n,r);if(null===o)Ur(e,t,r,qt,n),It(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return jt=zt(jt,e,t,n,r,o),!0;case"dragenter":return Ot=zt(Ot,e,t,n,r,o),!0;case"mouseover":return Nt=zt(Nt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return _t.set(a,zt(_t.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Bt.set(a,zt(Bt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(It(e,r),4&t&&-1<Pt.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&xt(a),null===(a=Vt(e,t,n,r))&&Ur(e,t,r,qt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Ur(e,t,r,null,n)}}var qt=null;function Vt(e,t,n,r){if(qt=null,null!==(e=bo(e=xe(r))))if(null===(t=Ze(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=$e(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Qe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Qt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Qt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,cn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(un),fn=M({},un,{view:0,detail:0}),dn=on(fn),pn=M({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(an=e.screenX-cn.screenX,ln=e.screenY-cn.screenY):ln=an=0,cn=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(M({},pn,{dataTransfer:0})),yn=on(M({},fn,{relatedTarget:0})),vn=on(M({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=M({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),wn=on(M({},un,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},An={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=An[e])&&!!t[e]}function Cn(){return Sn}var kn=M({},fn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ln=on(kn),jn=on(M({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=on(M({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Nn=on(M({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),_n=M({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Bn=on(_n),Tn=[9,13,27,32],Pn=s&&"CompositionEvent"in window,In=null;s&&"documentMode"in document&&(In=document.documentMode);var zn=s&&"TextEvent"in window&&!In,Mn=s&&(!Pn||In&&8<In&&11>=In),Rn=String.fromCharCode(32),Fn=!1;function Gn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Dn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Zn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Hn(e,t,n,r){ke(r),0<(t=Wr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,Yn=null;function qn(e){Rr(e,0)}function Vn(e){if(Y(xo(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(s){var Qn;if(s){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Qn=Jn}else Qn=!1;Xn=Qn&&(!document.documentMode||9<document.documentMode)}function tr(){Wn&&(Wn.detachEvent("onpropertychange",nr),Yn=Wn=null)}function nr(e){if("value"===e.propertyName&&Vn(Yn)){var t=[];Hn(t,Yn,e,xe(e)),_e(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Yn=n,(Wn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Vn(Yn)}function ar(e,t){if("click"===e)return Vn(t)}function ir(e,t){if("input"===e||"change"===e)return Vn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function cr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=sr(n,a);var i=sr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=s&&"documentMode"in document&&11>=document.documentMode,yr=null,vr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==yr||yr!==q(r)||(r="selectionStart"in(r=yr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&cr(gr,r)||(gr=r,0<(r=Wr(vr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},Ar={},Sr={};function Cr(e){if(Ar[e])return Ar[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return Ar[e]=n[t];return e}s&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var kr=Cr("animationend"),Lr=Cr("animationiteration"),jr=Cr("animationstart"),Or=Cr("transitionend"),Nr=new Map,_r="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Br(e,t){Nr.set(e,t),c(t,[e])}for(var Tr=0;Tr<_r.length;Tr++){var Pr=_r[Tr];Br(Pr.toLowerCase(),"on"+(Pr[0].toUpperCase()+Pr.slice(1)))}Br(kr,"onAnimationEnd"),Br(Lr,"onAnimationIteration"),Br(jr,"onAnimationStart"),Br("dblclick","onDoubleClick"),Br("focusin","onFocus"),Br("focusout","onBlur"),Br(Or,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),zr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Mr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,c,u){if(De.apply(this,arguments),ze){if(!ze)throw Error(a(198));var s=Me;ze=!1,Me=null,Re||(Re=!0,Fe=s)}}(r,t,void 0,e),e.currentTarget=null}function Rr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],c=l.instance,u=l.currentTarget;if(l=l.listener,c!==a&&o.isPropagationStopped())break e;Mr(o,l,u),a=c}else for(i=0;i<r.length;i++){if(c=(l=r[i]).instance,u=l.currentTarget,l=l.listener,c!==a&&o.isPropagationStopped())break e;Mr(o,l,u),a=c}}}if(Re)throw e=Fe,Re=!1,Fe=null,e}function Fr(e,t){var n=t[yo];void 0===n&&(n=t[yo]=new Set);var r=e+"__bubble";n.has(r)||($r(t,e,2,!1),n.add(r))}function Gr(e,t,n){var r=0;t&&(r|=4),$r(n,e,r,t)}var Dr="_reactListening"+Math.random().toString(36).slice(2);function Zr(e){if(!e[Dr]){e[Dr]=!0,i.forEach((function(t){"selectionchange"!==t&&(zr.has(t)||Gr(t,!1,e),Gr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Dr]||(t[Dr]=!0,Gr("selectionchange",!1,t))}}function $r(e,t,n,r){switch(Kt(t)){case 1:var o=Ht;break;case 4:o=Wt;break;default:o=Yt}n=o.bind(null,t,n,e),o=void 0,!Te||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ur(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var c=i.tag;if((3===c||4===c)&&((c=i.stateNode.containerInfo)===o||8===c.nodeType&&c.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(c=i.tag)||6===c){r=a=i;continue e}l=l.parentNode}}r=r.return}_e((function(){var r=a,o=xe(n),i=[];e:{var l=Nr.get(e);if(void 0!==l){var c=sn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":c=Ln;break;case"focusin":u="focus",c=yn;break;case"focusout":u="blur",c=yn;break;case"beforeblur":case"afterblur":c=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":c=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":c=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":c=On;break;case kr:case Lr:case jr:c=vn;break;case Or:c=Nn;break;case"scroll":c=dn;break;case"wheel":c=Bn;break;case"copy":case"cut":case"paste":c=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":c=jn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Be(h,d))&&s.push(Hr(h,m,p))),f)break;h=h.return}0<s.length&&(l=new c(l,u,null,n,o),i.push({event:l,listeners:s}))}}if(0==(7&t)){if(c="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(u=n.relatedTarget||n.fromElement)||!bo(u)&&!u[mo])&&(c||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,c?(c=r,null!==(u=(u=n.relatedTarget||n.toElement)?bo(u):null)&&(u!==(f=Ze(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(c=null,u=r),c!==u)){if(s=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=jn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==c?l:xo(c),p=null==u?l:xo(u),(l=new s(m,h+"leave",c,n,o)).target=f,l.relatedTarget=p,m=null,bo(o)===r&&((s=new s(d,h+"enter",u,n,o)).target=p,s.relatedTarget=f,m=s),f=m,c&&u)e:{for(d=u,h=0,p=s=c;p;p=Yr(p))h++;for(p=0,m=d;m;m=Yr(m))p++;for(;0<h-p;)s=Yr(s),h--;for(;0<p-h;)d=Yr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Yr(s),d=Yr(d)}s=null}else s=null;null!==c&&qr(i,l,c,s,!1),null!==u&&null!==f&&qr(i,f,u,s,!0)}if("select"===(c=(l=r?xo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===c&&"file"===l.type)var y=Kn;else if(Un(l))if(Xn)y=ir;else{y=or;var v=rr}else(c=l.nodeName)&&"input"===c.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(y=ar);switch(y&&(y=y(e,r))?Hn(i,y,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?xo(r):window,e){case"focusin":(Un(v)||"true"===v.contentEditable)&&(yr=v,vr=r,gr=null);break;case"focusout":gr=vr=yr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var g;if(Pn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Zn?Gn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(Zn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Zn&&(g=en()):(Qt="value"in(Xt=o)?Xt.value:Xt.textContent,Zn=!0)),0<(v=Wr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:v}),(g||null!==(g=Dn(n)))&&(b.data=g))),(g=zn?function(e,t){switch(e){case"compositionend":return Dn(t);case"keypress":return 32!==t.which?null:(Fn=!0,Rn);case"textInput":return(e=t.data)===Rn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Zn)return"compositionend"===e||!Pn&&Gn(e,t)?(e=en(),Jt=Qt=Xt=null,Zn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Wr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Rr(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Wr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Be(e,n))&&r.unshift(Hr(e,a,o)),null!=(a=Be(e,t))&&r.push(Hr(e,a,o))),e=e.return}return r}function Yr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,c=l.alternate,u=l.stateNode;if(null!==c&&c===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(c=Be(n,a))&&i.unshift(Hr(n,c,l)):o||null!=(c=Be(n,a))&&i.push(Hr(n,c,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Vr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Vr,"\n").replace(Kr,"")}function Qr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function co(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Zt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Zt(t)}function uo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,yo="__reactEvents$"+fo,vo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[po])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Eo(e){return e[ho]||null}var Ao=[],So=-1;function Co(e){return{current:e}}function ko(e){0>So||(e.current=Ao[So],Ao[So]=null,So--)}function Lo(e,t){So++,Ao[So]=e.current,e.current=t}var jo={},Oo=Co(jo),No=Co(!1),_o=jo;function Bo(e,t){var n=e.type.contextTypes;if(!n)return jo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function To(e){return null!=e.childContextTypes}function Po(){ko(No),ko(Oo)}function Io(e,t,n){if(Oo.current!==jo)throw Error(a(168));Lo(Oo,t),Lo(No,n)}function zo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,$(e)||"Unknown",o));return M({},n,r)}function Mo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||jo,_o=Oo.current,Lo(Oo,e),Lo(No,No.current),!0}function Ro(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=zo(e,t,_o),r.__reactInternalMemoizedMergedChildContext=e,ko(No),ko(Oo),Lo(Oo,e)):ko(No),Lo(No,n)}var Fo=null,Go=!1,Do=!1;function Zo(e){null===Fo?Fo=[e]:Fo.push(e)}function $o(){if(!Do&&null!==Fo){Do=!0;var e=0,t=bt;try{var n=Fo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fo=null,Go=!1}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),Ye(Je,$o),t}finally{bt=t,Do=!1}}return null}var Uo=[],Ho=0,Wo=null,Yo=0,qo=[],Vo=0,Ko=null,Xo=1,Qo="";function Jo(e,t){Uo[Ho++]=Yo,Uo[Ho++]=Wo,Wo=e,Yo=t}function ea(e,t,n){qo[Vo++]=Xo,qo[Vo++]=Qo,qo[Vo++]=Ko,Ko=e;var r=Xo;e=Qo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Xo=1<<32-it(t)+o|n<<o|r,Qo=a+e}else Xo=1<<a|n<<o|r,Qo=e}function ta(e){null!==e.return&&(Jo(e,1),ea(e,1,0))}function na(e){for(;e===Wo;)Wo=Uo[--Ho],Uo[Ho]=null,Yo=Uo[--Ho],Uo[Ho]=null;for(;e===Ko;)Ko=qo[--Vo],qo[Vo]=null,Qo=qo[--Vo],qo[Vo]=null,Xo=qo[--Vo],qo[Vo]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Bu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ca(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=uo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ko?{id:Xo,overflow:Qo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Bu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ua(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function sa(e){if(aa){var t=oa;if(t){var n=t;if(!ca(e,t)){if(ua(e))throw Error(a(418));t=uo(n.nextSibling);var r=ra;t&&ca(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ua(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function da(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ua(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=uo(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=uo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?uo(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=uo(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var ya=w.ReactCurrentBatchConfig;function va(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ga=Co(null),ba=null,wa=null,xa=null;function Ea(){xa=wa=ba=null}function Aa(e){var t=ga.current;ko(ga),e._currentValue=t}function Sa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ca(e,t){ba=e,xa=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function ka(e){var t=e._currentValue;if(xa!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var La=null;function ja(e){null===La?La=[e]:La.push(e)}function Oa(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,ja(t)):(n.next=o.next,o.next=n),t.interleaved=n,Na(e,r)}function Na(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var _a=!1;function Ba(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ta(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Pa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ia(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Oc)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Na(e,n)}return null===(o=r.interleaved)?(t.next=t,ja(r)):(t.next=o.next,o.next=t),r.interleaved=t,Na(e,n)}function za(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Ma(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ra(e,t,n,r){var o=e.updateQueue;_a=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,u=c.next;c.next=null,null===i?a=u:i.next=u,i=c;var s=e.alternate;null!==s&&(l=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===l?s.firstBaseUpdate=u:l.next=u,s.lastBaseUpdate=c)}if(null!==a){var f=o.baseState;for(i=0,s=u=c=null,l=a;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=M({},f,d);break e;case 2:_a=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(u=s=p,c=f):s=s.next=p,i|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===s&&(c=f),o.baseState=c,o.firstBaseUpdate=u,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Mc|=i,e.lanes=i,e.memoizedState=f}}function Fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Ga=(new r.Component).refs;function Da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Za={isMounted:function(e){return!!(e=e._reactInternals)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Pa(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Ia(e,a,o))&&(ru(t,e,o,r),za(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Pa(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Ia(e,a,o))&&(ru(t,e,o,r),za(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),r=nu(e),o=Pa(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Ia(e,o,r))&&(ru(t,e,r,n),za(t,e,r))}};function $a(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&cr(n,r)&&cr(o,a))}function Ua(e,t,n){var r=!1,o=jo,a=t.contextType;return"object"==typeof a&&null!==a?a=ka(a):(o=To(t)?_o:Oo.current,a=(r=null!=(r=t.contextTypes))?Bo(e,o):jo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Za,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ha(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Za.enqueueReplaceState(t,t.state,null)}function Wa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ga,Ba(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ka(a):(a=To(t)?_o:Oo.current,o.context=Bo(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Da(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Za.enqueueReplaceState(o,o.state,null),Ra(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ya(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===Ga&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function qa(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Va(e){return(0,e._init)(e._payload)}function Ka(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Pu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Ru(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===A?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===B&&Va(a)===t.type)?((r=o(t,n.props)).ref=Ya(e,t,n),r.return=e,r):((r=Iu(n.type,n.key,n.props,null,e.mode,r)).ref=Ya(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=zu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ru(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Iu(t.type,t.key,t.props,null,e.mode,n)).ref=Ya(e,null,t),n.return=e,n;case E:return(t=Fu(t,e.mode,n)).return=e,t;case B:return d(e,(0,t._init)(t._payload),n)}if(te(t)||I(t))return(t=zu(t,e.mode,n,null)).return=e,t;qa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?u(e,t,n,r):null;case E:return n.key===o?s(e,t,n,r):null;case B:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||I(n))return null!==o?null:f(e,t,n,r,null);qa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case E:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case B:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||I(r))return f(t,e=e.get(n)||null,r,o,null);qa(t,r)}return null}function m(o,a,l,c){for(var u=null,s=null,f=a,m=a=0,y=null;null!==f&&m<l.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(o,f,l[m],c);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,m),null===s?u=v:s.sibling=v,s=v,f=y}if(m===l.length)return n(o,f),aa&&Jo(o,m),u;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],c))&&(a=i(f,a,m),null===s?u=f:s.sibling=f,s=f);return aa&&Jo(o,m),u}for(f=r(o,f);m<l.length;m++)null!==(y=h(f,o,m,l[m],c))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),a=i(y,a,m),null===s?u=y:s.sibling=y,s=y);return e&&f.forEach((function(e){return t(o,e)})),aa&&Jo(o,m),u}function y(o,l,c,u){var s=I(c);if("function"!=typeof s)throw Error(a(150));if(null==(c=s.call(c)))throw Error(a(151));for(var f=s=null,m=l,y=l=0,v=null,g=c.next();null!==m&&!g.done;y++,g=c.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(o,m,g.value,u);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,y),null===f?s=b:f.sibling=b,f=b,m=v}if(g.done)return n(o,m),aa&&Jo(o,y),s;if(null===m){for(;!g.done;y++,g=c.next())null!==(g=d(o,g.value,u))&&(l=i(g,l,y),null===f?s=g:f.sibling=g,f=g);return aa&&Jo(o,y),s}for(m=r(o,m);!g.done;y++,g=c.next())null!==(g=h(m,o,y,g.value,u))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),l=i(g,l,y),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),aa&&Jo(o,y),s}return function e(r,a,i,c){if("object"==typeof i&&null!==i&&i.type===A&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case x:e:{for(var u=i.key,s=a;null!==s;){if(s.key===u){if((u=i.type)===A){if(7===s.tag){n(r,s.sibling),(a=o(s,i.props.children)).return=r,r=a;break e}}else if(s.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===B&&Va(u)===s.type){n(r,s.sibling),(a=o(s,i.props)).ref=Ya(r,s,i),a.return=r,r=a;break e}n(r,s);break}t(r,s),s=s.sibling}i.type===A?((a=zu(i.props.children,r.mode,c,i.key)).return=r,r=a):((c=Iu(i.type,i.key,i.props,null,r.mode,c)).ref=Ya(r,a,i),c.return=r,r=c)}return l(r);case E:e:{for(s=i.key;null!==a;){if(a.key===s){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Fu(i,r.mode,c)).return=r,r=a}return l(r);case B:return e(r,a,(s=i._init)(i._payload),c)}if(te(i))return m(r,a,i,c);if(I(i))return y(r,a,i,c);qa(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Ru(i,r.mode,c)).return=r,r=a),l(r)):n(r,a)}}var Xa=Ka(!0),Qa=Ka(!1),Ja={},ei=Co(Ja),ti=Co(Ja),ni=Co(Ja);function ri(e){if(e===Ja)throw Error(a(174));return e}function oi(e,t){switch(Lo(ni,t),Lo(ti,e),Lo(ei,Ja),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ce(null,"");break;default:t=ce(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ko(ei),Lo(ei,t)}function ai(){ko(ei),ko(ti),ko(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ce(t,e.type);t!==n&&(Lo(ti,e),Lo(ei,n))}function li(e){ti.current===e&&(ko(ei),ko(ti))}var ci=Co(0);function ui(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var si=[];function fi(){for(var e=0;e<si.length;e++)si[e]._workInProgressVersionPrimary=null;si.length=0}var di=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,mi=null,yi=null,vi=null,gi=!1,bi=!1,wi=0,xi=0;function Ei(){throw Error(a(321))}function Ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Si(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?ll:cl,e=n(r,o),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(a(301));i+=1,vi=yi=null,t.updateQueue=null,di.current=ul,e=n(r,o)}while(bi)}if(di.current=il,t=null!==yi&&null!==yi.next,hi=0,vi=yi=mi=null,gi=!1,t)throw Error(a(300));return e}function Ci(){var e=0!==wi;return wi=0,e}function ki(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?mi.memoizedState=vi=e:vi=vi.next=e,vi}function Li(){if(null===yi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=yi.next;var t=null===vi?mi.memoizedState:vi.next;if(null!==t)vi=t,yi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(yi=e).memoizedState,baseState:yi.baseState,baseQueue:yi.baseQueue,queue:yi.queue,next:null},null===vi?mi.memoizedState=vi=e:vi=vi.next=e}return vi}function ji(e,t){return"function"==typeof t?t(e):t}function Oi(e){var t=Li(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=yi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var c=l=null,u=null,s=i;do{var f=s.lane;if((hi&f)===f)null!==u&&(u=u.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===u?(c=u=d,l=r):u=u.next=d,mi.lanes|=f,Mc|=f}s=s.next}while(null!==s&&s!==i);null===u?l=r:u.next=c,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Mc|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ni(e){var t=Li(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(wl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function _i(){}function Bi(e,t){var n=mi,r=Li(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,wl=!0),r=r.queue,Ui(Ii.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(n.flags|=2048,Fi(9,Pi.bind(null,n,r,o,t),void 0,null),null===Nc)throw Error(a(349));0!=(30&hi)||Ti(n,t,o)}return o}function Ti(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Pi(e,t,n,r){t.value=n,t.getSnapshot=r,zi(t)&&Mi(e)}function Ii(e,t,n){return n((function(){zi(t)&&Mi(e)}))}function zi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Mi(e){var t=Na(e,1);null!==t&&ru(t,e,1,-1)}function Ri(e){var t=ki();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ji,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,mi,e),[t.memoizedState,e]}function Fi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Gi(){return Li().memoizedState}function Di(e,t,n,r){var o=ki();mi.flags|=e,o.memoizedState=Fi(1|t,n,void 0,void 0===r?null:r)}function Zi(e,t,n,r){var o=Li();r=void 0===r?null:r;var a=void 0;if(null!==yi){var i=yi.memoizedState;if(a=i.destroy,null!==r&&Ai(r,i.deps))return void(o.memoizedState=Fi(t,n,a,r))}mi.flags|=e,o.memoizedState=Fi(1|t,n,a,r)}function $i(e,t){return Di(8390656,8,e,t)}function Ui(e,t){return Zi(2048,8,e,t)}function Hi(e,t){return Zi(4,2,e,t)}function Wi(e,t){return Zi(4,4,e,t)}function Yi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function qi(e,t,n){return n=null!=n?n.concat([e]):null,Zi(4,4,Yi.bind(null,t,e),n)}function Vi(){}function Ki(e,t){var n=Li();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ai(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xi(e,t){var n=Li();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ai(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Qi(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),mi.lanes|=n,Mc|=n,e.baseState=!0),t)}function Ji(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function el(){return Li().memoizedState}function tl(e,t,n){var r=nu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=Oa(e,t,n,r))&&(ru(n,e,r,tu()),al(n,t,r))}function nl(e,t,n){var r=nu(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var c=t.interleaved;return null===c?(o.next=o,ja(t)):(o.next=c.next,c.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Oa(e,t,o,r))&&(ru(n,e,r,o=tu()),al(n,t,r))}}function rl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ol(e,t){bi=gi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var il={readContext:ka,useCallback:Ei,useContext:Ei,useEffect:Ei,useImperativeHandle:Ei,useInsertionEffect:Ei,useLayoutEffect:Ei,useMemo:Ei,useReducer:Ei,useRef:Ei,useState:Ei,useDebugValue:Ei,useDeferredValue:Ei,useTransition:Ei,useMutableSource:Ei,useSyncExternalStore:Ei,useId:Ei,unstable_isNewReconciler:!1},ll={readContext:ka,useCallback:function(e,t){return ki().memoizedState=[e,void 0===t?null:t],e},useContext:ka,useEffect:$i,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Di(4194308,4,Yi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Di(4194308,4,e,t)},useInsertionEffect:function(e,t){return Di(4,2,e,t)},useMemo:function(e,t){var n=ki();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ki();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ki().memoizedState=e},useState:Ri,useDebugValue:Vi,useDeferredValue:function(e){return ki().memoizedState=e},useTransition:function(){var e=Ri(!1),t=e[0];return e=Ji.bind(null,e[1]),ki().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=ki();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Nc)throw Error(a(349));0!=(30&hi)||Ti(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,$i(Ii.bind(null,r,i,e),[e]),r.flags|=2048,Fi(9,Pi.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=ki(),t=Nc.identifierPrefix;if(aa){var n=Qo;t=":"+t+"R"+(n=(Xo&~(1<<32-it(Xo)-1)).toString(32)+n),0<(n=wi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=xi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},cl={readContext:ka,useCallback:Ki,useContext:ka,useEffect:Ui,useImperativeHandle:qi,useInsertionEffect:Hi,useLayoutEffect:Wi,useMemo:Xi,useReducer:Oi,useRef:Gi,useState:function(){return Oi(ji)},useDebugValue:Vi,useDeferredValue:function(e){return Qi(Li(),yi.memoizedState,e)},useTransition:function(){return[Oi(ji)[0],Li().memoizedState]},useMutableSource:_i,useSyncExternalStore:Bi,useId:el,unstable_isNewReconciler:!1},ul={readContext:ka,useCallback:Ki,useContext:ka,useEffect:Ui,useImperativeHandle:qi,useInsertionEffect:Hi,useLayoutEffect:Wi,useMemo:Xi,useReducer:Ni,useRef:Gi,useState:function(){return Ni(ji)},useDebugValue:Vi,useDeferredValue:function(e){var t=Li();return null===yi?t.memoizedState=e:Qi(t,yi.memoizedState,e)},useTransition:function(){return[Ni(ji)[0],Li().memoizedState]},useMutableSource:_i,useSyncExternalStore:Bi,useId:el,unstable_isNewReconciler:!1};function sl(e,t){try{var n="",r=t;do{n+=D(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Pa(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hc||(Hc=!0,Wc=r),dl(0,t)},n}function ml(e,t,n){(n=Pa(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){dl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Yc?Yc=new Set([this]):Yc.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function yl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=ku.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Pa(-1,1)).tag=2,Ia(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function xl(e,t,n,r){t.child=null===e?Qa(t,null,n,r):Xa(t,e.child,n,r)}function El(e,t,n,r,o){n=n.render;var a=t.ref;return Ca(t,o),r=Si(e,t,n,r,a,o),n=Ci(),null===e||wl?(aa&&n&&ta(t),t.flags|=1,xl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Al(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Tu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Iu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Sl(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:cr)(i,r)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Pu(a,r)).ref=t.ref,e.return=t,t.child=e}function Sl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(cr(a,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return Ll(e,t,n,r,o)}function Cl(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Lo(Pc,Tc),Tc|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Lo(Pc,Tc),Tc|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Lo(Pc,Tc),Tc|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Lo(Pc,Tc),Tc|=r;return xl(e,t,o,n),t.child}function kl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ll(e,t,n,r,o){var a=To(n)?_o:Oo.current;return a=Bo(t,a),Ca(t,o),n=Si(e,t,n,r,a,o),r=Ci(),null===e||wl?(aa&&r&&ta(t),t.flags|=1,xl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function jl(e,t,n,r,o){if(To(n)){var a=!0;Mo(t)}else a=!1;if(Ca(t,o),null===t.stateNode)Ul(e,t),Ua(t,n,r),Wa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var c=i.context,u=n.contextType;u="object"==typeof u&&null!==u?ka(u):Bo(t,u=To(n)?_o:Oo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||c!==u)&&Ha(t,i,r,u),_a=!1;var d=t.memoizedState;i.state=d,Ra(t,r,i,o),c=t.memoizedState,l!==r||d!==c||No.current||_a?("function"==typeof s&&(Da(t,n,s,r),c=t.memoizedState),(l=_a||$a(t,n,l,r,d,c,u))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=c),i.props=r,i.state=c,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ta(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:va(t.type,l),i.props=u,f=t.pendingProps,d=i.context,c="object"==typeof(c=n.contextType)&&null!==c?ka(c):Bo(t,c=To(n)?_o:Oo.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==c)&&Ha(t,i,r,c),_a=!1,d=t.memoizedState,i.state=d,Ra(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||No.current||_a?("function"==typeof p&&(Da(t,n,p,r),h=t.memoizedState),(u=_a||$a(t,n,u,r,d,h,c)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,c)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=c,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Ol(e,t,n,r,a,o)}function Ol(e,t,n,r,o,a){kl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Ro(t,n,!1),Hl(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Xa(t,e.child,null,a),t.child=Xa(t,null,l,a)):xl(e,t,l,a),t.memoizedState=r.state,o&&Ro(t,n,!0),t.child}function Nl(e){var t=e.stateNode;t.pendingContext?Io(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Io(0,t.context,!1),oi(e,t.containerInfo)}function _l(e,t,n,r,o){return ha(),ma(o),t.flags|=256,xl(e,t,n,r),t.child}var Bl,Tl,Pl,Il,zl={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function Rl(e,t,n){var r,o=t.pendingProps,i=ci.current,l=!1,c=0!=(128&t.flags);if((r=c)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Lo(ci,1&i),null===e)return sa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(c=o.children,e=o.fallback,l?(o=t.mode,l=t.child,c={mode:"hidden",children:c},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=c):l=Mu(c,o,0,null),e=zu(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(n),t.memoizedState=zl,e):Fl(t,c));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,Gl(e,t,l,r=fl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Mu({mode:"visible",children:r.children},o,0,null),(i=zu(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Xa(t,e.child,null,l),t.child.memoizedState=Ml(l),t.memoizedState=zl,i);if(0==(1&t.mode))return Gl(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var c=r.dgst;return r=c,Gl(e,t,l,r=fl(i=Error(a(419)),r,void 0))}if(c=0!=(l&e.childLanes),wl||c){if(null!==(r=Nc)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Na(e,o),ru(r,e,o,-1))}return yu(),Gl(e,t,l,r=fl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=ju.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=uo(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(qo[Vo++]=Xo,qo[Vo++]=Qo,qo[Vo++]=Ko,Xo=e.id,Qo=e.overflow,Ko=t),(t=Fl(t,r.children)).flags|=4096,t)}(e,t,c,o,r,i,n);if(l){l=o.fallback,c=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:o.children};return 0==(1&c)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=u,t.deletions=null):(o=Pu(i,u)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Pu(r,l):(l=zu(l,c,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,c=null===(c=e.child.memoizedState)?Ml(n):{baseLanes:c.baseLanes|n,cachePool:null,transitions:c.transitions},l.memoizedState=c,l.childLanes=e.childLanes&~n,t.memoizedState=zl,o}return e=(l=e.child).sibling,o=Pu(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Fl(e,t){return(t=Mu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Gl(e,t,n,r){return null!==r&&ma(r),Xa(t,e.child,null,n),(e=Fl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Dl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Sa(e.return,t,n)}function Zl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function $l(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(xl(e,t,r.children,n),0!=(2&(r=ci.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Dl(e,n,t);else if(19===e.tag)Dl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Lo(ci,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ui(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Zl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ui(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Zl(t,!0,n,null,a);break;case"together":Zl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ul(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Mc|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Pu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Pu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Wl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ql(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Yl(t),null;case 1:case 17:return To(t.type)&&Po(),Yl(t),null;case 3:return r=t.stateNode,ai(),ko(No),ko(Oo),fi(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(lu(ia),ia=null))),Tl(e,t),Yl(t),null;case 5:li(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Pl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Yl(t),null}if(e=ri(ei.current),da(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(o=0;o<Ir.length;o++)Fr(Ir[o],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":K(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":oe(r,i),Fr("invalid",r)}for(var c in ge(n,i),o=null,i)if(i.hasOwnProperty(c)){var u=i[c];"children"===c?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Qr(r.textContent,u,e),o=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Qr(r.textContent,u,e),o=["children",""+u]):l.hasOwnProperty(c)&&null!=u&&"onScroll"===c&&Fr("scroll",r)}switch(n){case"input":W(r),J(r,i,!0);break;case"textarea":W(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{c=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[po]=t,e[ho]=r,Bl(e,t,!1,!1),t.stateNode=e;e:{switch(c=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),o=r;break;case"iframe":case"object":case"embed":Fr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Ir.length;o++)Fr(Ir[o],e);o=r;break;case"source":Fr("error",e),o=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),o=r;break;case"details":Fr("toggle",e),o=r;break;case"input":K(e,r),o=V(e,r),Fr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=M({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Fr("invalid",e)}for(i in ge(n,o),u=o)if(u.hasOwnProperty(i)){var s=u[i];"style"===i?ye(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&de(e,s):"number"==typeof s&&de(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=s&&"onScroll"===i&&Fr("scroll",e):null!=s&&b(e,i,s,c))}switch(n){case"input":W(e),J(e,r,!1);break;case"textarea":W(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+U(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Yl(t),null;case 6:if(e&&null!=t.stateNode)Il(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),da(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Qr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Qr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Yl(t),null;case 13:if(ko(ci),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Yl(t),i=!1}else null!==ia&&(lu(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ci.current)?0===Ic&&(Ic=3):yu())),null!==t.updateQueue&&(t.flags|=4),Yl(t),null);case 4:return ai(),Tl(e,t),null===e&&Zr(t.stateNode.containerInfo),Yl(t),null;case 10:return Aa(t.type._context),Yl(t),null;case 19:if(ko(ci),null===(i=t.memoizedState))return Yl(t),null;if(r=0!=(128&t.flags),null===(c=i.rendering))if(r)Wl(i,!1);else{if(0!==Ic||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(c=ui(e))){for(t.flags|=128,Wl(i,!1),null!==(r=c.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(c=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=c.childLanes,i.lanes=c.lanes,i.child=c.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=c.memoizedProps,i.memoizedState=c.memoizedState,i.updateQueue=c.updateQueue,i.type=c.type,e=c.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Lo(ci,1&ci.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>$c&&(t.flags|=128,r=!0,Wl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ui(c))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Wl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!aa)return Yl(t),null}else 2*Xe()-i.renderingStartTime>$c&&1073741824!==n&&(t.flags|=128,r=!0,Wl(i,!1),t.lanes=4194304);i.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=i.last)?n.sibling=c:t.child=c,i.last=c)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ci.current,Lo(ci,r?1&n|2:1&n),t):(Yl(t),null);case 22:case 23:return du(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Tc)&&(Yl(t),6&t.subtreeFlags&&(t.flags|=8192)):Yl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Vl(e,t){switch(na(t),t.tag){case 1:return To(t.type)&&Po(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),ko(No),ko(Oo),fi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(ko(ci),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ko(ci),null;case 4:return ai(),null;case 10:return Aa(t.type._context),null;case 22:case 23:return du(),null;default:return null}}Bl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Tl=function(){},Pl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=V(e,o),r=V(e,r),i=[];break;case"select":o=M({},o,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(s in ge(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var c=o[s];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var u=r[s];if(c=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&u!==c&&(null!=u||null!=c))if("style"===s)if(c){for(a in c)!c.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&c[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(i||(i=[]),i.push(s,n)),n=u;else"dangerouslySetInnerHTML"===s?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(i=i||[]).push(s,u)):"children"===s?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(s,""+u):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=u&&"onScroll"===s&&Fr("scroll",e),i||c===u||(i=[])):(i=i||[]).push(s,u))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},Il=function(e,t,n,r){n!==r&&(t.flags|=4)};var Kl=!1,Xl=!1,Ql="function"==typeof WeakSet?WeakSet:Set,Jl=null;function ec(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cu(e,t,n)}else n.current=null}function tc(e,t,n){try{n()}catch(n){Cu(e,t,n)}}var nc=!1;function rc(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&tc(t,n,a)}o=o.next}while(o!==r)}}function oc(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ac(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ic(e){var t=e.alternate;null!==t&&(e.alternate=null,ic(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[yo],delete t[vo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lc(e){return 5===e.tag||3===e.tag||4===e.tag}function cc(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lc(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(uc(e,t,n),e=e.sibling;null!==e;)uc(e,t,n),e=e.sibling}function sc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(sc(e,t,n),e=e.sibling;null!==e;)sc(e,t,n),e=e.sibling}var fc=null,dc=!1;function pc(e,t,n){for(n=n.child;null!==n;)hc(e,t,n),n=n.sibling}function hc(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xl||ec(n,t);case 6:var r=fc,o=dc;fc=null,pc(e,t,n),dc=o,null!==(fc=r)&&(dc?(e=fc,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fc.removeChild(n.stateNode));break;case 18:null!==fc&&(dc?(e=fc,n=n.stateNode,8===e.nodeType?co(e.parentNode,n):1===e.nodeType&&co(e,n),Zt(e)):co(fc,n.stateNode));break;case 4:r=fc,o=dc,fc=n.stateNode.containerInfo,dc=!0,pc(e,t,n),fc=r,dc=o;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&tc(n,t,i),o=o.next}while(o!==r)}pc(e,t,n);break;case 1:if(!Xl&&(ec(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cu(n,t,e)}pc(e,t,n);break;case 21:pc(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,pc(e,t,n),Xl=r):pc(e,t,n);break;default:pc(e,t,n)}}function mc(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ql),t.forEach((function(t){var r=Ou.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function yc(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,c=l;e:for(;null!==c;){switch(c.tag){case 5:fc=c.stateNode,dc=!1;break e;case 3:case 4:fc=c.stateNode.containerInfo,dc=!0;break e}c=c.return}if(null===fc)throw Error(a(160));hc(i,l,o),fc=null,dc=!1;var u=o.alternate;null!==u&&(u.return=null),o.return=null}catch(e){Cu(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vc(t,e),t=t.sibling}function vc(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(yc(t,e),gc(e),4&r){try{rc(3,e,e.return),oc(3,e)}catch(t){Cu(e,e.return,t)}try{rc(5,e,e.return)}catch(t){Cu(e,e.return,t)}}break;case 1:yc(t,e),gc(e),512&r&&null!==n&&ec(n,n.return);break;case 5:if(yc(t,e),gc(e),512&r&&null!==n&&ec(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){Cu(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,c=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===c&&"radio"===i.type&&null!=i.name&&X(o,i),be(c,l);var s=be(c,i);for(l=0;l<u.length;l+=2){var f=u[l],d=u[l+1];"style"===f?ye(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,s)}switch(c){case"input":Q(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){Cu(e,e.return,t)}}break;case 6:if(yc(t,e),gc(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Cu(e,e.return,t)}}break;case 3:if(yc(t,e),gc(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Zt(t.containerInfo)}catch(t){Cu(e,e.return,t)}break;case 4:default:yc(t,e),gc(e);break;case 13:yc(t,e),gc(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Zc=Xe())),4&r&&mc(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(s=Xl)||f,yc(t,e),Xl=s):yc(t,e),gc(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Jl=e,f=e.child;null!==f;){for(d=Jl=f;null!==Jl;){switch(h=(p=Jl).child,p.tag){case 0:case 11:case 14:case 15:rc(4,p,p.return);break;case 1:ec(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Cu(r,n,e)}}break;case 5:ec(p,p.return);break;case 22:if(null!==p.memoizedState){Ec(d);continue}}null!==h?(h.return=p,Jl=h):Ec(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,s?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(c=d.stateNode,l=null!=(u=d.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,c.style.display=me("display",l))}catch(t){Cu(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=s?"":d.memoizedProps}catch(t){Cu(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:yc(t,e),gc(e),4&r&&mc(e);case 21:}}function gc(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lc(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),sc(e,cc(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;uc(e,cc(e),i);break;default:throw Error(a(161))}}catch(t){Cu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bc(e,t,n){Jl=e,wc(e,t,n)}function wc(e,t,n){for(var r=0!=(1&e.mode);null!==Jl;){var o=Jl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Kl;if(!i){var l=o.alternate,c=null!==l&&null!==l.memoizedState||Xl;l=Kl;var u=Xl;if(Kl=i,(Xl=c)&&!u)for(Jl=o;null!==Jl;)c=(i=Jl).child,22===i.tag&&null!==i.memoizedState?Ac(o):null!==c?(c.return=i,Jl=c):Ac(o);for(;null!==a;)Jl=a,wc(a,t,n),a=a.sibling;Jl=o,Kl=l,Xl=u}xc(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Jl=a):xc(e)}}function xc(e){for(;null!==Jl;){var t=Jl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||oc(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:va(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Fa(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fa(t,l,n)}break;case 5:var c=t.stateNode;if(null===n&&4&t.flags){n=c;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Zt(d)}}}break;default:throw Error(a(163))}Xl||512&t.flags&&ac(t)}catch(e){Cu(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function Ec(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function Ac(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{oc(4,t)}catch(e){Cu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Cu(t,o,e)}}var a=t.return;try{ac(t)}catch(e){Cu(t,a,e)}break;case 5:var i=t.return;try{ac(t)}catch(e){Cu(t,i,e)}}}catch(e){Cu(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var Sc,Cc=Math.ceil,kc=w.ReactCurrentDispatcher,Lc=w.ReactCurrentOwner,jc=w.ReactCurrentBatchConfig,Oc=0,Nc=null,_c=null,Bc=0,Tc=0,Pc=Co(0),Ic=0,zc=null,Mc=0,Rc=0,Fc=0,Gc=null,Dc=null,Zc=0,$c=1/0,Uc=null,Hc=!1,Wc=null,Yc=null,qc=!1,Vc=null,Kc=0,Xc=0,Qc=null,Jc=-1,eu=0;function tu(){return 0!=(6&Oc)?Xe():-1!==Jc?Jc:Jc=Xe()}function nu(e){return 0==(1&e.mode)?1:0!=(2&Oc)&&0!==Bc?Bc&-Bc:null!==ya.transition?(0===eu&&(eu=mt()),eu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function ru(e,t,n,r){if(50<Xc)throw Xc=0,Qc=null,Error(a(185));vt(e,n,r),0!=(2&Oc)&&e===Nc||(e===Nc&&(0==(2&Oc)&&(Rc|=n),4===Ic&&cu(e,Bc)),ou(e,r),1===n&&0===Oc&&0==(1&t.mode)&&($c=Xe()+500,Go&&$o()))}function ou(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,c=o[i];-1===c?0!=(l&n)&&0==(l&r)||(o[i]=pt(l,t)):c<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=dt(e,e===Nc?Bc:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){Go=!0,Zo(e)}(uu.bind(null,e)):Zo(uu.bind(null,e)),io((function(){0==(6&Oc)&&$o()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Nu(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if(Jc=-1,eu=0,0!=(6&Oc))throw Error(a(327));var n=e.callbackNode;if(Au()&&e.callbackNode!==n)return null;var r=dt(e,e===Nc?Bc:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vu(e,r);else{t=r;var o=Oc;Oc|=2;var i=mu();for(Nc===e&&Bc===t||(Uc=null,$c=Xe()+500,pu(e,t));;)try{bu();break}catch(t){hu(e,t)}Ea(),kc.current=i,Oc=o,null!==_c?t=0:(Nc=null,Bc=0,t=Ic)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=iu(e,o)),1===t)throw n=zc,pu(e,0),cu(e,r),ou(e,Xe()),n;if(6===t)cu(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=vu(e,r))&&0!==(i=ht(e))&&(r=i,t=iu(e,i)),1===t))throw n=zc,pu(e,0),cu(e,r),ou(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Eu(e,Dc,Uc);break;case 3:if(cu(e,r),(130023424&r)===r&&10<(t=Zc+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Eu.bind(null,e,Dc,Uc),t);break}Eu(e,Dc,Uc);break;case 4:if(cu(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cc(r/1960))-r)){e.timeoutHandle=ro(Eu.bind(null,e,Dc,Uc),r);break}Eu(e,Dc,Uc);break;default:throw Error(a(329))}}}return ou(e,Xe()),e.callbackNode===n?au.bind(null,e):null}function iu(e,t){var n=Gc;return e.current.memoizedState.isDehydrated&&(pu(e,t).flags|=256),2!==(e=vu(e,t))&&(t=Dc,Dc=n,null!==t&&lu(t)),e}function lu(e){null===Dc?Dc=e:Dc.push.apply(Dc,e)}function cu(e,t){for(t&=~Fc,t&=~Rc,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function uu(e){if(0!=(6&Oc))throw Error(a(327));Au();var t=dt(e,0);if(0==(1&t))return ou(e,Xe()),null;var n=vu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=iu(e,r))}if(1===n)throw n=zc,pu(e,0),cu(e,t),ou(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Eu(e,Dc,Uc),ou(e,Xe()),null}function su(e,t){var n=Oc;Oc|=1;try{return e(t)}finally{0===(Oc=n)&&($c=Xe()+500,Go&&$o())}}function fu(e){null!==Vc&&0===Vc.tag&&0==(6&Oc)&&Au();var t=Oc;Oc|=1;var n=jc.transition,r=bt;try{if(jc.transition=null,bt=1,e)return e()}finally{bt=r,jc.transition=n,0==(6&(Oc=t))&&$o()}}function du(){Tc=Pc.current,ko(Pc)}function pu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==_c)for(n=_c.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Po();break;case 3:ai(),ko(No),ko(Oo),fi();break;case 5:li(r);break;case 4:ai();break;case 13:case 19:ko(ci);break;case 10:Aa(r.type._context);break;case 22:case 23:du()}n=n.return}if(Nc=e,_c=e=Pu(e.current,null),Bc=Tc=t,Ic=0,zc=null,Fc=Rc=Mc=0,Dc=Gc=null,null!==La){for(t=0;t<La.length;t++)if(null!==(r=(n=La[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}La=null}return e}function hu(e,t){for(;;){var n=_c;try{if(Ea(),di.current=il,gi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}gi=!1}if(hi=0,vi=yi=mi=null,bi=!1,wi=0,Lc.current=null,null===n||null===n.return){Ic=1,zc=t,_c=null;break}e:{var i=e,l=n.return,c=n,u=t;if(t=Bc,c.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u,f=c,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=vl(l);if(null!==h){h.flags&=-257,gl(h,l,c,0,t),1&h.mode&&yl(i,s,t),u=s;var m=(t=h).updateQueue;if(null===m){var y=new Set;y.add(u),t.updateQueue=y}else m.add(u);break e}if(0==(1&t)){yl(i,s,t),yu();break e}u=Error(a(426))}else if(aa&&1&c.mode){var v=vl(l);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),gl(v,l,c,0,t),ma(sl(u,c));break e}}i=u=sl(u,c),4!==Ic&&(Ic=2),null===Gc?Gc=[i]:Gc.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Ma(i,hl(0,u,t));break e;case 1:c=u;var g=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Yc||!Yc.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Ma(i,ml(i,c,t));break e}}i=i.return}while(null!==i)}xu(n)}catch(e){t=e,_c===n&&null!==n&&(_c=n=n.return);continue}break}}function mu(){var e=kc.current;return kc.current=il,null===e?il:e}function yu(){0!==Ic&&3!==Ic&&2!==Ic||(Ic=4),null===Nc||0==(268435455&Mc)&&0==(268435455&Rc)||cu(Nc,Bc)}function vu(e,t){var n=Oc;Oc|=2;var r=mu();for(Nc===e&&Bc===t||(Uc=null,pu(e,t));;)try{gu();break}catch(t){hu(e,t)}if(Ea(),Oc=n,kc.current=r,null!==_c)throw Error(a(261));return Nc=null,Bc=0,Ic}function gu(){for(;null!==_c;)wu(_c)}function bu(){for(;null!==_c&&!Ve();)wu(_c)}function wu(e){var t=Sc(e.alternate,e,Tc);e.memoizedProps=e.pendingProps,null===t?xu(e):_c=t,Lc.current=null}function xu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=ql(n,t,Tc)))return void(_c=n)}else{if(null!==(n=Vl(n,t)))return n.flags&=32767,void(_c=n);if(null===e)return Ic=6,void(_c=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(_c=t);_c=t=e}while(null!==t);0===Ic&&(Ic=5)}function Eu(e,t,n){var r=bt,o=jc.transition;try{jc.transition=null,bt=1,function(e,t,n,r){do{Au()}while(null!==Vc);if(0!=(6&Oc))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Nc&&(_c=Nc=null,Bc=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||qc||(qc=!0,Nu(tt,(function(){return Au(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=jc.transition,jc.transition=null;var l=bt;bt=1;var c=Oc;Oc|=4,Lc.current=null,function(e,t){if(eo=Ut,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,c=-1,u=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(c=l+o),d!==i||0!==r&&3!==d.nodeType||(u=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===o&&(c=l),p===i&&++f===r&&(u=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===c||-1===u?null:{start:c,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Ut=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var y=m.memoizedProps,v=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?y:va(t.type,y),v);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){Cu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}m=nc,nc=!1}(e,n),vc(n,e),hr(to),Ut=!!eo,to=eo=null,e.current=n,bc(n,e,o),Ke(),Oc=c,bt=l,jc.transition=i}else e.current=n;if(qc&&(qc=!1,Vc=e,Kc=o),0===(i=e.pendingLanes)&&(Yc=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ou(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Hc)throw Hc=!1,e=Wc,Wc=null,e;0!=(1&Kc)&&0!==e.tag&&Au(),0!=(1&(i=e.pendingLanes))?e===Qc?Xc++:(Xc=0,Qc=e):Xc=0,$o()}(e,t,n,r)}finally{jc.transition=o,bt=r}return null}function Au(){if(null!==Vc){var e=wt(Kc),t=jc.transition,n=bt;try{if(jc.transition=null,bt=16>e?16:e,null===Vc)var r=!1;else{if(e=Vc,Vc=null,Kc=0,0!=(6&Oc))throw Error(a(331));var o=Oc;for(Oc|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(0!=(16&Jl.flags)){var c=i.deletions;if(null!==c){for(var u=0;u<c.length;u++){var s=c[u];for(Jl=s;null!==Jl;){var f=Jl;switch(f.tag){case 0:case 11:case 15:rc(8,f,i)}var d=f.child;if(null!==d)d.return=f,Jl=d;else for(;null!==Jl;){var p=(f=Jl).sibling,h=f.return;if(ic(f),f===s){Jl=null;break}if(null!==p){p.return=h,Jl=p;break}Jl=h}}}var m=i.alternate;if(null!==m){var y=m.child;if(null!==y){m.child=null;do{var v=y.sibling;y.sibling=null,y=v}while(null!==y)}}Jl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(0!=(2048&(i=Jl).flags))switch(i.tag){case 0:case 11:case 15:rc(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Jl=g;break e}Jl=i.return}}var b=e.current;for(Jl=b;null!==Jl;){var w=(l=Jl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Jl=w;else e:for(l=b;null!==Jl;){if(0!=(2048&(c=Jl).flags))try{switch(c.tag){case 0:case 11:case 15:oc(9,c)}}catch(e){Cu(c,c.return,e)}if(c===l){Jl=null;break e}var x=c.sibling;if(null!==x){x.return=c.return,Jl=x;break e}Jl=c.return}}if(Oc=o,$o(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,jc.transition=t}}return!1}function Su(e,t,n){e=Ia(e,t=hl(0,t=sl(n,t),1),1),t=tu(),null!==e&&(vt(e,1,t),ou(e,t))}function Cu(e,t,n){if(3===e.tag)Su(e,e,n);else for(;null!==t;){if(3===t.tag){Su(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yc||!Yc.has(r))){t=Ia(t,e=ml(t,e=sl(n,e),1),1),e=tu(),null!==t&&(vt(t,1,e),ou(t,e));break}}t=t.return}}function ku(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,Nc===e&&(Bc&n)===n&&(4===Ic||3===Ic&&(130023424&Bc)===Bc&&500>Xe()-Zc?pu(e,0):Fc|=n),ou(e,t)}function Lu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=tu();null!==(e=Na(e,t))&&(vt(e,t,n),ou(e,n))}function ju(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Lu(e,n)}function Ou(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Lu(e,n)}function Nu(e,t){return Ye(e,t)}function _u(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Bu(e,t,n,r){return new _u(e,t,n,r)}function Tu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Pu(e,t){var n=e.alternate;return null===n?((n=Bu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Iu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Tu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case A:return zu(n.children,o,i,t);case S:l=8,o|=8;break;case C:return(e=Bu(12,n,t,2|o)).elementType=C,e.lanes=i,e;case O:return(e=Bu(13,n,t,o)).elementType=O,e.lanes=i,e;case N:return(e=Bu(19,n,t,o)).elementType=N,e.lanes=i,e;case T:return Mu(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:l=10;break e;case L:l=9;break e;case j:l=11;break e;case _:l=14;break e;case B:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Bu(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function zu(e,t,n,r){return(e=Bu(7,e,r,t)).lanes=n,e}function Mu(e,t,n,r){return(e=Bu(22,e,r,t)).elementType=T,e.lanes=n,e.stateNode={isHidden:!1},e}function Ru(e,t,n){return(e=Bu(6,e,null,t)).lanes=n,e}function Fu(e,t,n){return(t=Bu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Gu(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yt(0),this.expirationTimes=yt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Du(e,t,n,r,o,a,i,l,c){return e=new Gu(e,t,n,l,c),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Bu(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ba(a),e}function Zu(e){if(!e)return jo;e:{if(Ze(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(To(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(To(n))return zo(e,n,t)}return t}function $u(e,t,n,r,o,a,i,l,c){return(e=Du(n,r,!0,e,0,a,0,l,c)).context=Zu(null),n=e.current,(a=Pa(r=tu(),o=nu(n))).callback=null!=t?t:null,Ia(n,a,o),e.current.lanes=o,vt(e,o,r),ou(e,r),e}function Uu(e,t,n,r){var o=t.current,a=tu(),i=nu(o);return n=Zu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Pa(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ia(o,t,i))&&(ru(e,o,i,a),za(e,o,i)),i}function Hu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yu(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}Sc=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||No.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Nl(t),ha();break;case 5:ii(t);break;case 1:To(t.type)&&Mo(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Lo(ga,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Lo(ci,1&ci.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Rl(e,t,n):(Lo(ci,1&ci.current),null!==(e=Hl(e,t,n))?e.sibling:null);Lo(ci,1&ci.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return $l(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Lo(ci,ci.current),r)break;return null;case 22:case 23:return t.lanes=0,Cl(e,t,n)}return Hl(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,aa&&0!=(1048576&t.flags)&&ea(t,Yo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ul(e,t),e=t.pendingProps;var o=Bo(t,Oo.current);Ca(t,n),o=Si(null,t,r,e,o,n);var i=Ci();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,To(r)?(i=!0,Mo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ba(t),o.updater=Za,t.stateNode=o,o._reactInternals=t,Wa(t,r,e,n),t=Ol(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),xl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ul(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Tu(e)?1:0;if(null!=e){if((e=e.$$typeof)===j)return 11;if(e===_)return 14}return 2}(r),e=va(r,e),o){case 0:t=Ll(null,t,r,e,n);break e;case 1:t=jl(null,t,r,e,n);break e;case 11:t=El(null,t,r,e,n);break e;case 14:t=Al(null,t,r,va(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ll(e,t,r,o=t.elementType===r?o:va(r,o),n);case 1:return r=t.type,o=t.pendingProps,jl(e,t,r,o=t.elementType===r?o:va(r,o),n);case 3:e:{if(Nl(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Ta(e,t),Ra(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=_l(e,t,r,n,o=sl(Error(a(423)),t));break e}if(r!==o){t=_l(e,t,r,n,o=sl(Error(a(424)),t));break e}for(oa=uo(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Qa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Hl(e,t,n);break e}xl(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),kl(e,t),xl(e,t,l,n),t.child;case 6:return null===e&&sa(t),null;case 13:return Rl(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xa(t,null,r,n):xl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,El(e,t,r,o=t.elementType===r?o:va(r,o),n);case 7:return xl(e,t,t.pendingProps,n),t.child;case 8:case 12:return xl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Lo(ga,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!No.current){t=Hl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var c=i.dependencies;if(null!==c){l=i.child;for(var u=c.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Pa(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?u.next=u:(u.next=f.next,f.next=u),s.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Sa(i.return,n,t),c.lanes|=n;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),Sa(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}xl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ca(t,n),r=r(o=ka(o)),t.flags|=1,xl(e,t,r,n),t.child;case 14:return o=va(r=t.type,t.pendingProps),Al(e,t,r,o=va(r.type,o),n);case 15:return Sl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:va(r,o),Ul(e,t),t.tag=1,To(r)?(e=!0,Mo(t)):e=!1,Ca(t,n),Ua(t,r,o),Wa(t,r,o,n),Ol(null,t,r,!0,e,n);case 19:return $l(e,t,n);case 22:return Cl(e,t,n)}throw Error(a(156,t.tag))};var qu="function"==typeof reportError?reportError:function(e){console.error(e)};function Vu(e){this._internalRoot=e}function Ku(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Qu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Hu(i);l.call(e)}}Uu(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Hu(i);a.call(e)}}var i=$u(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=i,e[mo]=i.current,Zr(8===e.nodeType?e.parentNode:e),fu(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Hu(c);l.call(e)}}var c=Du(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=c,e[mo]=c.current,Zr(8===e.nodeType?e.parentNode:e),fu((function(){Uu(t,c,n,r)})),c}(n,t,e,o,r);return Hu(i)}Ku.prototype.render=Vu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Uu(e,t,null,null)},Ku.prototype.unmount=Vu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fu((function(){Uu(null,e,null,null)})),t[mo]=null}},Ku.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Tt.length&&0!==t&&t<Tt[n].priority;n++);Tt.splice(n,0,e),0===n&&Mt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),ou(t,Xe()),0==(6&Oc)&&($c=Xe()+500,$o()))}break;case 13:fu((function(){var t=Na(e,1);if(null!==t){var n=tu();ru(t,e,1,n)}})),Yu(e,1)}},Et=function(e){if(13===e.tag){var t=Na(e,134217728);null!==t&&ru(t,e,134217728,tu()),Yu(e,134217728)}},At=function(e){if(13===e.tag){var t=nu(e),n=Na(e,t);null!==n&&ru(n,e,t,tu()),Yu(e,t)}},St=function(){return bt},Ct=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ee=function(e,t,n){switch(t){case"input":if(Q(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Eo(r);if(!o)throw Error(a(90));Y(r),Q(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},je=su,Oe=fu;var ts={usingClientEntryPoint:!1,Events:[wo,xo,Eo,ke,Le,su]},ns={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ot=os.inject(rs),at=os}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(a(299));var n=!1,r="",o=qu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Du(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Zr(8===e.nodeType?e.parentNode:e),new Vu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return fu(e)},t.hydrate=function(e,t,n){if(!Qu(t))throw Error(a(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=qu;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=$u(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Zr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Ku(t)},t.render=function(e,t,n){if(!Qu(t))throw Error(a(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Qu(e))throw Error(a(40));return!!e._reactRootContainer&&(fu((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=su,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Qu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return es(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(3935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),c=Symbol.for("react.context"),u=Symbol.for("react.server_context"),s=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),d=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),h=Symbol.for("react.lazy");Symbol.for("react.offscreen");function m(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case i:case a:case f:case d:return e;default:switch(e=e&&e.$$typeof){case u:case c:case s:case h:case p:case l:return e;default:return t}}case r:return t}}}Symbol.for("react.module.reference"),t.isFragment=function(e){return m(e)===o},t.isMemo=function(e){return m(e)===p}},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},5251:(e,t,n)=>{"use strict";var r=n(7294),o=Symbol.for("react.element"),a=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,a={},u=null,s=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(s=t.ref),t)i.call(t,r)&&!c.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:s,props:a,_owner:l.current}}t.Fragment=a,t.jsx=u,t.jsxs=u},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),c=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function v(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var w=b.prototype=new g;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var x=Array.isArray,E=Object.prototype.hasOwnProperty,A={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,o)&&!S.hasOwnProperty(o)&&(a[o]=t[o]);var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){for(var u=Array(c),s=0;s<c;s++)u[s]=arguments[s+2];a.children=u}if(e&&e.defaultProps)for(o in c=e.defaultProps)void 0===a[o]&&(a[o]=c[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:A.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var L=/\/+/g;function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var c=!1;if(null===e)c=!0;else switch(l){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0}}if(c)return i=i(c=e),e=""===a?"."+j(c,0):a,x(i)?(o="",null!=e&&(o=e.replace(L,"$&/")+"/"),O(i,t,o,"",(function(e){return e}))):null!=i&&(k(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||c&&c.key===i.key?"":(""+i.key).replace(L,"$&/")+"/")+e)),t.push(i)),1;if(c=0,a=""===a?".":a+":",x(e))for(var u=0;u<e.length;u++){var s=a+j(l=e[u],u);c+=O(l,t,o,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),u=0;!(l=e.next()).done;)c+=O(l=l.value,t,o,s=a+j(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return c}function N(e,t,n){if(null==e)return e;var r=[],o=0;return O(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var B={current:null},T={transition:null},P={ReactCurrentDispatcher:B,ReactCurrentBatchConfig:T,ReactCurrentOwner:A};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=A.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)E.call(t,u)&&!S.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){c=Array(u);for(var s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:c,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=T.transition;T.transition={};try{e()}finally{T.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return B.current.useCallback(e,t)},t.useContext=function(e){return B.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return B.current.useDeferredValue(e)},t.useEffect=function(e,t){return B.current.useEffect(e,t)},t.useId=function(){return B.current.useId()},t.useImperativeHandle=function(e,t,n){return B.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return B.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return B.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return B.current.useMemo(e,t)},t.useReducer=function(e,t,n){return B.current.useReducer(e,t,n)},t.useRef=function(e){return B.current.useRef(e)},t.useState=function(e){return B.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return B.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return B.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,c=e[l],u=l+1,s=e[u];if(0>a(c,n))u<o&&0>a(s,c)?(e[r]=s,e[u]=n,r=u):(e[r]=c,e[l]=n,r=l);else{if(!(u<o&&0>a(s,n)))break e;e[r]=s,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,c=l.now();t.unstable_now=function(){return l.now()-c}}var u=[],s=[],f=1,d=null,p=3,h=!1,m=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(u,t)}t=r(s)}}function x(e){if(y=!1,w(e),!m)if(null!==r(u))m=!0,T(E);else{var t=r(s);null!==t&&P(x,t.startTime-e)}}function E(e,n){m=!1,y&&(y=!1,g(k),k=-1),h=!0;var a=p;try{for(w(n),d=r(u);null!==d&&(!(d.expirationTime>n)||e&&!O());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(u)&&o(u),w(n)}else o(u);d=r(u)}if(null!==d)var c=!0;else{var f=r(s);null!==f&&P(x,f.startTime-n),c=!1}return c}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var A,S=!1,C=null,k=-1,L=5,j=-1;function O(){return!(t.unstable_now()-j<L)}function N(){if(null!==C){var e=t.unstable_now();j=e;var n=!0;try{n=C(!0,e)}finally{n?A():(S=!1,C=null)}}else S=!1}if("function"==typeof b)A=function(){b(N)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,B=_.port2;_.port1.onmessage=N,A=function(){B.postMessage(null)}}else A=function(){v(N,0)};function T(e){C=e,S||(S=!0,A())}function P(e,n){k=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,T(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):L=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(s,e),null===r(u)&&e===r(s)&&(y?(g(k),k=-1):y=!0,P(x,a-i))):(e.sortIndex=l,n(u,e),m||h||(m=!0,T(E))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var c=e[l],u=r.base?c[0]+r.base:c[0],s=a[u]||0,f="".concat(u," ").concat(s);a[u]=s+1;var d=n(f),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var c=r(e,o),u=0;u<a.length;u++){var s=n(a[u]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}a=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},4836:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},3366:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})},512:(e,t,n)=>{"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:()=>o});const o=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},7563:(e,t,n)=>{"use strict";n.d(t,{Ab:()=>i,Fr:()=>l,G$:()=>a,JM:()=>f,K$:()=>u,MS:()=>r,h5:()=>c,lK:()=>s,uj:()=>o});var r="-ms-",o="-moz-",a="-webkit-",i="comm",l="rule",c="decl",u="@import",s="@keyframes",f="@layer"},2190:(e,t,n)=>{"use strict";n.d(t,{MY:()=>i});var r=n(7563),o=n(6686),a=n(6411);function i(e){return(0,a.cE)(l("",null,null,null,[""],e=(0,a.un)(e),0,[0],e))}function l(e,t,n,r,i,f,d,p,h){for(var m=0,y=0,v=d,g=0,b=0,w=0,x=1,E=1,A=1,S=0,C="",k=i,L=f,j=r,O=C;E;)switch(w=S,S=(0,a.lp)()){case 40:if(108!=w&&58==(0,o.uO)(O,v-1)){-1!=(0,o.Cw)(O+=(0,o.gx)((0,a.iF)(S),"&","&\f"),"&\f")&&(A=-1);break}case 34:case 39:case 91:O+=(0,a.iF)(S);break;case 9:case 10:case 13:case 32:O+=(0,a.Qb)(w);break;case 92:O+=(0,a.kq)((0,a.Ud)()-1,7);continue;case 47:switch((0,a.fj)()){case 42:case 47:(0,o.R3)(u((0,a.q6)((0,a.lp)(),(0,a.Ud)()),t,n),h);break;default:O+="/"}break;case 123*x:p[m++]=(0,o.to)(O)*A;case 125*x:case 59:case 0:switch(S){case 0:case 125:E=0;case 59+y:-1==A&&(O=(0,o.gx)(O,/\f/g,"")),b>0&&(0,o.to)(O)-v&&(0,o.R3)(b>32?s(O+";",r,n,v-1):s((0,o.gx)(O," ","")+";",r,n,v-2),h);break;case 59:O+=";";default:if((0,o.R3)(j=c(O,t,n,m,y,i,p,C,k=[],L=[],v),f),123===S)if(0===y)l(O,t,j,j,k,f,v,p,L);else switch(99===g&&110===(0,o.uO)(O,3)?100:g){case 100:case 108:case 109:case 115:l(e,j,j,r&&(0,o.R3)(c(e,j,j,0,0,i,p,C,i,k=[],v),L),i,L,v,p,r?k:L);break;default:l(O,j,j,j,[""],L,0,p,L)}}m=y=b=0,x=A=1,C=O="",v=d;break;case 58:v=1+(0,o.to)(O),b=w;default:if(x<1)if(123==S)--x;else if(125==S&&0==x++&&125==(0,a.mp)())continue;switch(O+=(0,o.Dp)(S),S*x){case 38:A=y>0?1:(O+="\f",-1);break;case 44:p[m++]=((0,o.to)(O)-1)*A,A=1;break;case 64:45===(0,a.fj)()&&(O+=(0,a.iF)((0,a.lp)())),g=(0,a.fj)(),y=v=(0,o.to)(C=O+=(0,a.QU)((0,a.Ud)())),S++;break;case 45:45===w&&2==(0,o.to)(O)&&(x=0)}}return f}function c(e,t,n,i,l,c,u,s,f,d,p){for(var h=l-1,m=0===l?c:[""],y=(0,o.Ei)(m),v=0,g=0,b=0;v<i;++v)for(var w=0,x=(0,o.tb)(e,h+1,h=(0,o.Wn)(g=u[v])),E=e;w<y;++w)(E=(0,o.fy)(g>0?m[w]+" "+x:(0,o.gx)(x,/&\f/g,m[w])))&&(f[b++]=E);return(0,a.dH)(e,t,n,0===l?r.Fr:s,f,d,p)}function u(e,t,n){return(0,a.dH)(e,t,n,r.Ab,(0,o.Dp)((0,a.Tb)()),(0,o.tb)(e,2,-2),0)}function s(e,t,n,i){return(0,a.dH)(e,t,n,r.h5,(0,o.tb)(e,0,i),(0,o.tb)(e,i+1,-1),i)}},211:(e,t,n)=>{"use strict";n.d(t,{P:()=>i,q:()=>a});var r=n(7563),o=n(6686);function a(e,t){for(var n="",r=(0,o.Ei)(e),a=0;a<r;a++)n+=t(e[a],a,e,t)||"";return n}function i(e,t,n,i){switch(e.type){case r.JM:if(e.children.length)break;case r.K$:case r.h5:return e.return=e.return||e.value;case r.Ab:return"";case r.lK:return e.return=e.value+"{"+a(e.children,i)+"}";case r.Fr:e.value=e.props.join(",")}return(0,o.to)(n=a(e.children,i))?e.return=e.value+"{"+n+"}":""}},6411:(e,t,n)=>{"use strict";n.d(t,{FK:()=>l,JG:()=>f,QU:()=>k,Qb:()=>E,Tb:()=>d,Ud:()=>y,cE:()=>w,dH:()=>s,fj:()=>m,iF:()=>x,kq:()=>A,lp:()=>h,mp:()=>p,q6:()=>C,r:()=>g,tP:()=>v,un:()=>b});var r=n(6686),o=1,a=1,i=0,l=0,c=0,u="";function s(e,t,n,r,i,l,c){return{value:e,root:t,parent:n,type:r,props:i,children:l,line:o,column:a,length:c,return:""}}function f(e,t){return(0,r.f0)(s("",null,null,"",null,null,0),e,{length:-e.length},t)}function d(){return c}function p(){return c=l>0?(0,r.uO)(u,--l):0,a--,10===c&&(a=1,o--),c}function h(){return c=l<i?(0,r.uO)(u,l++):0,a++,10===c&&(a=1,o++),c}function m(){return(0,r.uO)(u,l)}function y(){return l}function v(e,t){return(0,r.tb)(u,e,t)}function g(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function b(e){return o=a=1,i=(0,r.to)(u=e),l=0,[]}function w(e){return u="",e}function x(e){return(0,r.fy)(v(l-1,S(91===e?e+2:40===e?e+1:e)))}function E(e){for(;(c=m())&&c<33;)h();return g(e)>2||g(c)>3?"":" "}function A(e,t){for(;--t&&h()&&!(c<48||c>102||c>57&&c<65||c>70&&c<97););return v(e,y()+(t<6&&32==m()&&32==h()))}function S(e){for(;h();)switch(c){case e:return l;case 34:case 39:34!==e&&39!==e&&S(c);break;case 40:41===e&&S(e);break;case 92:h()}return l}function C(e,t){for(;h()&&e+c!==57&&(e+c!==84||47!==m()););return"/*"+v(t,l-1)+"*"+(0,r.Dp)(47===e?e:h())}function k(e){for(;!g(m());)h();return v(e,l)}},6686:(e,t,n)=>{"use strict";n.d(t,{$e:()=>y,Cw:()=>s,Dp:()=>o,EQ:()=>c,Ei:()=>h,R3:()=>m,Wn:()=>r,f0:()=>a,fy:()=>l,gx:()=>u,tb:()=>d,to:()=>p,uO:()=>f,vp:()=>i});var r=Math.abs,o=String.fromCharCode,a=Object.assign;function i(e,t){return 45^f(e,0)?(((t<<2^f(e,0))<<2^f(e,1))<<2^f(e,2))<<2^f(e,3):0}function l(e){return e.trim()}function c(e,t){return(e=t.exec(e))?e[0]:e}function u(e,t,n){return e.replace(t,n)}function s(e,t){return e.indexOf(t)}function f(e,t){return 0|e.charCodeAt(t)}function d(e,t,n){return e.slice(t,n)}function p(e){return e.length}function h(e){return e.length}function m(e,t){return t.push(e),e}function y(e,t){return e.map(t).join("")}}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={id:e,exports:{}};return n[e](a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0,(()=>{"use strict";var e={};o.r(e),o.d(e,{hasBrowserEnv:()=>lr,hasStandardBrowserEnv:()=>cr,hasStandardBrowserWebWorkerEnv:()=>sr});var t=o(7294),n=o.t(t,2),r=o(745),a=o(3379),i=o.n(a),l=o(7795),c=o.n(l),u=o(569),s=o.n(u),f=o(3565),d=o.n(f),p=o(9216),h=o.n(p),m=o(4589),y=o.n(m),v=o(5740),g={};g.styleTagTransform=y(),g.setAttributes=d(),g.insert=s().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=h(),i()(v.Z,g),v.Z&&v.Z.locals&&v.Z.locals;var b=o(6528),w={};w.styleTagTransform=y(),w.setAttributes=d(),w.insert=s().bind(null,"head"),w.domAPI=c(),w.insertStyleElement=h(),i()(b.Z,w),b.Z&&b.Z.locals&&b.Z.locals;var x=o(9553),E=o(7462),A=o(3366);const S=t.createContext(null);function C(){return t.useContext(S)}const k="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var L=o(5893);const j=function(e){const{children:n,theme:r}=e,o=C(),a=t.useMemo((()=>{const e=null===o?r:function(e,t){return"function"==typeof t?t(e):(0,E.Z)({},e,t)}(o,r);return null!=e&&(e[k]=null!==o),e}),[r,o]);return(0,L.jsx)(S.Provider,{value:a,children:n})};var O=o(5260),N=o(4168);const _={};function B(e,n,r,o=!1){return t.useMemo((()=>{const t=e&&n[e]||n;if("function"==typeof r){const a=r(t),i=e?(0,E.Z)({},n,{[e]:a}):a;return o?()=>i:i}return e?(0,E.Z)({},n,{[e]:r}):(0,E.Z)({},n,r)}),[e,n,r,o])}const T=function(e){const{children:t,theme:n,themeId:r}=e,o=(0,N.Z)(_),a=C()||_,i=B(r,o,n),l=B(r,a,n,!0);return(0,L.jsx)(j,{theme:l,children:(0,L.jsx)(O.T.Provider,{value:i,children:t})})};var P=o(606);const I=["theme"];function z(e){let{theme:t}=e,n=(0,A.Z)(e,I);const r=t[P.Z];return(0,L.jsx)(T,(0,E.Z)({},n,{themeId:r?P.Z:void 0,theme:r||t}))}var M=o(3486);var R=o(512),F=o(7925),G=o(4780),D=o(1796),Z=o(9602),$=o(6122),U=o(1705),H=o(314),W=o(3511);function Y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function q(e,t){return q=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},q(e,t)}function V(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,q(e,t)}const K=t.createContext(null);function X(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function Q(e,t,n){return null!=n[t]?n[t]:e.props[t]}function J(e,n,r){var o=X(e.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var c in t){if(o[c])for(r=0;r<o[c].length;r++){var u=o[c][r];l[o[c][r]]=n(u)}l[c]=n(c)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(n,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,t.isValidElement)(l)){var c=i in n,u=i in o,s=n[i],f=(0,t.isValidElement)(s)&&!s.props.in;!u||c&&!f?u||!c||f?u&&c&&(0,t.isValidElement)(s)&&(a[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:s.props.in,exit:Q(l,"exit",e),enter:Q(l,"enter",e)})):a[i]=(0,t.cloneElement)(l,{in:!1}):a[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:Q(l,"exit",e),enter:Q(l,"enter",e)})}})),a}var ee=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},te=function(e){function n(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(Y(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}V(n,e);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(e,n){var r,o,a=n.children,i=n.handleExited;return{children:n.firstRender?(r=e,o=i,X(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:Q(e,"appear",r),enter:Q(e,"enter",r),exit:Q(e,"exit",r)})}))):J(e,a,i),firstRender:!1}},r.handleExited=function(e,t){var n=X(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,E.Z)({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var e=this.props,n=e.component,r=e.childFactory,o=(0,A.Z)(e,["component","childFactory"]),a=this.state.contextValue,i=ee(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?t.createElement(K.Provider,{value:a},i):t.createElement(K.Provider,{value:a},t.createElement(n,o,i))},n}(t.Component);te.propTypes={},te.defaultProps={component:"div",childFactory:function(e){return e}};const ne=te;var re=o(444),oe=o(7278),ae=o(6797),ie=(o(6194),o(8679),(0,O.w)((function(e,n){var r=e.styles,o=(0,ae.O)([r],void 0,t.useContext(O.T));if(!O.i){for(var a,i=o.name,l=o.styles,c=o.next;void 0!==c;)i+=" "+c.name,l+=c.styles,c=c.next;var u=!0===n.compat,s=n.insert("",{name:i,styles:l},n.sheet,u);return u?null:t.createElement("style",((a={})["data-emotion"]=n.key+"-global "+i,a.dangerouslySetInnerHTML={__html:s},a.nonce=n.sheet.nonce,a))}var f=t.useRef();return(0,oe.j)((function(){var e=n.key+"-global",t=new n.sheet.constructor({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),r=!1,a=document.querySelector('style[data-emotion="'+e+" "+o.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==a&&(r=!0,a.setAttribute("data-emotion",e),t.hydrate([a])),f.current=[t,r],function(){t.flush()}}),[n]),(0,oe.j)((function(){var e=f.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==o.next&&(0,re.My)(n,o.next,!0),t.tags.length){var r=t.tags[t.tags.length-1].nextElementSibling;t.before=r,t.flush()}n.insert("",o,t,!1)}}),[n,o.name]),null})));function le(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,ae.O)(t)}var ce=function(){var e=le.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};var ue=o(1588);const se=(0,ue.Z)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),fe=["center","classes","className"];let de,pe,he,me,ye=e=>e;const ve=ce(de||(de=ye`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),ge=ce(pe||(pe=ye`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),be=ce(he||(he=ye`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),we=(0,Z.ZP)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),xe=(0,Z.ZP)((function(e){const{className:n,classes:r,pulsate:o=!1,rippleX:a,rippleY:i,rippleSize:l,in:c,onExited:u,timeout:s}=e,[f,d]=t.useState(!1),p=(0,R.Z)(n,r.ripple,r.rippleVisible,o&&r.ripplePulsate),h={width:l,height:l,top:-l/2+i,left:-l/2+a},m=(0,R.Z)(r.child,f&&r.childLeaving,o&&r.childPulsate);return c||f||d(!0),t.useEffect((()=>{if(!c&&null!=u){const e=setTimeout(u,s);return()=>{clearTimeout(e)}}}),[u,c,s]),(0,L.jsx)("span",{className:p,style:h,children:(0,L.jsx)("span",{className:m})})}),{name:"MuiTouchRipple",slot:"Ripple"})(me||(me=ye`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),se.rippleVisible,ve,550,(({theme:e})=>e.transitions.easing.easeInOut),se.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),se.child,se.childLeaving,ge,550,(({theme:e})=>e.transitions.easing.easeInOut),se.childPulsate,be,(({theme:e})=>e.transitions.easing.easeInOut)),Ee=t.forwardRef((function(e,n){const r=(0,$.Z)({props:e,name:"MuiTouchRipple"}),{center:o=!1,classes:a={},className:i}=r,l=(0,A.Z)(r,fe),[c,u]=t.useState([]),s=t.useRef(0),f=t.useRef(null);t.useEffect((()=>{f.current&&(f.current(),f.current=null)}),[c]);const d=t.useRef(!1),p=t.useRef(0),h=t.useRef(null),m=t.useRef(null);t.useEffect((()=>()=>{p.current&&clearTimeout(p.current)}),[]);const y=t.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:i}=e;u((e=>[...e,(0,L.jsx)(xe,{classes:{ripple:(0,R.Z)(a.ripple,se.ripple),rippleVisible:(0,R.Z)(a.rippleVisible,se.rippleVisible),ripplePulsate:(0,R.Z)(a.ripplePulsate,se.ripplePulsate),child:(0,R.Z)(a.child,se.child),childLeaving:(0,R.Z)(a.childLeaving,se.childLeaving),childPulsate:(0,R.Z)(a.childPulsate,se.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},s.current)])),s.current+=1,f.current=i}),[a]),v=t.useCallback(((e={},t={},n=(()=>{}))=>{const{pulsate:r=!1,center:a=o||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&d.current)return void(d.current=!1);"touchstart"===(null==e?void 0:e.type)&&(d.current=!0);const l=i?null:m.current,c=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,s,f;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(c.width/2),s=Math.round(c.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-c.left),s=Math.round(n-c.top)}if(a)f=Math.sqrt((2*c.width**2+c.height**2)/3),f%2==0&&(f+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-s),s)+2;f=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===h.current&&(h.current=()=>{y({pulsate:r,rippleX:u,rippleY:s,rippleSize:f,cb:n})},p.current=setTimeout((()=>{h.current&&(h.current(),h.current=null)}),80)):y({pulsate:r,rippleX:u,rippleY:s,rippleSize:f,cb:n})}),[o,y]),g=t.useCallback((()=>{v({},{pulsate:!0})}),[v]),b=t.useCallback(((e,t)=>{if(clearTimeout(p.current),"touchend"===(null==e?void 0:e.type)&&h.current)return h.current(),h.current=null,void(p.current=setTimeout((()=>{b(e,t)})));h.current=null,u((e=>e.length>0?e.slice(1):e)),f.current=t}),[]);return t.useImperativeHandle(n,(()=>({pulsate:g,start:v,stop:b})),[g,v,b]),(0,L.jsx)(we,(0,E.Z)({className:(0,R.Z)(se.root,a.root,i),ref:m},l,{children:(0,L.jsx)(ne,{component:null,exit:!0,children:c})}))})),Ae=Ee;var Se=o(4867);function Ce(e){return(0,Se.Z)("MuiButtonBase",e)}const ke=(0,ue.Z)("MuiButtonBase",["root","disabled","focusVisible"]),Le=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],je=(0,Z.ZP)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${ke.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),Oe=t.forwardRef((function(e,n){const r=(0,$.Z)({props:e,name:"MuiButtonBase"}),{action:o,centerRipple:a=!1,children:i,className:l,component:c="button",disabled:u=!1,disableRipple:s=!1,disableTouchRipple:f=!1,focusRipple:d=!1,LinkComponent:p="a",onBlur:h,onClick:m,onContextMenu:y,onDragLeave:v,onFocus:g,onFocusVisible:b,onKeyDown:w,onKeyUp:x,onMouseDown:S,onMouseLeave:C,onMouseUp:k,onTouchEnd:j,onTouchMove:O,onTouchStart:N,tabIndex:_=0,TouchRippleProps:B,touchRippleRef:T,type:P}=r,I=(0,A.Z)(r,Le),z=t.useRef(null),M=t.useRef(null),F=(0,U.Z)(M,T),{isFocusVisibleRef:D,onFocus:Z,onBlur:Y,ref:q}=(0,W.Z)(),[V,K]=t.useState(!1);u&&V&&K(!1),t.useImperativeHandle(o,(()=>({focusVisible:()=>{K(!0),z.current.focus()}})),[]);const[X,Q]=t.useState(!1);t.useEffect((()=>{Q(!0)}),[]);const J=X&&!s&&!u;function ee(e,t,n=f){return(0,H.Z)((r=>(t&&t(r),!n&&M.current&&M.current[e](r),!0)))}t.useEffect((()=>{V&&d&&!s&&X&&M.current.pulsate()}),[s,d,V,X]);const te=ee("start",S),ne=ee("stop",y),re=ee("stop",v),oe=ee("stop",k),ae=ee("stop",(e=>{V&&e.preventDefault(),C&&C(e)})),ie=ee("start",N),le=ee("stop",j),ce=ee("stop",O),ue=ee("stop",(e=>{Y(e),!1===D.current&&K(!1),h&&h(e)}),!1),se=(0,H.Z)((e=>{z.current||(z.current=e.currentTarget),Z(e),!0===D.current&&(K(!0),b&&b(e)),g&&g(e)})),fe=()=>{const e=z.current;return c&&"button"!==c&&!("A"===e.tagName&&e.href)},de=t.useRef(!1),pe=(0,H.Z)((e=>{d&&!de.current&&V&&M.current&&" "===e.key&&(de.current=!0,M.current.stop(e,(()=>{M.current.start(e)}))),e.target===e.currentTarget&&fe()&&" "===e.key&&e.preventDefault(),w&&w(e),e.target===e.currentTarget&&fe()&&"Enter"===e.key&&!u&&(e.preventDefault(),m&&m(e))})),he=(0,H.Z)((e=>{d&&" "===e.key&&M.current&&V&&!e.defaultPrevented&&(de.current=!1,M.current.stop(e,(()=>{M.current.pulsate(e)}))),x&&x(e),m&&e.target===e.currentTarget&&fe()&&" "===e.key&&!e.defaultPrevented&&m(e)}));let me=c;"button"===me&&(I.href||I.to)&&(me=p);const ye={};"button"===me?(ye.type=void 0===P?"button":P,ye.disabled=u):(I.href||I.to||(ye.role="button"),u&&(ye["aria-disabled"]=u));const ve=(0,U.Z)(n,q,z),ge=(0,E.Z)({},r,{centerRipple:a,component:c,disabled:u,disableRipple:s,disableTouchRipple:f,focusRipple:d,tabIndex:_,focusVisible:V}),be=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a={root:["root",t&&"disabled",n&&"focusVisible"]},i=(0,G.Z)(a,Ce,o);return n&&r&&(i.root+=` ${r}`),i})(ge);return(0,L.jsxs)(je,(0,E.Z)({as:me,className:(0,R.Z)(be.root,l),ownerState:ge,onBlur:ue,onClick:m,onContextMenu:ne,onFocus:se,onKeyDown:pe,onKeyUp:he,onMouseDown:te,onMouseLeave:ae,onMouseUp:oe,onDragLeave:re,onTouchEnd:le,onTouchMove:ce,onTouchStart:ie,ref:ve,tabIndex:u?-1:_,type:P},ye,I,{children:[i,J?(0,L.jsx)(Ae,(0,E.Z)({ref:F,center:a},B)):null]}))}));var Ne=o(8216);function _e(e){return(0,Se.Z)("MuiButton",e)}const Be=(0,ue.Z)("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),Te=t.createContext({}),Pe=t.createContext(void 0),Ie=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],ze=e=>(0,E.Z)({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),Me=(0,Z.ZP)(Oe,{shouldForwardProp:e=>(0,Z.FO)(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${(0,Ne.Z)(n.color)}`],t[`size${(0,Ne.Z)(n.size)}`],t[`${n.variant}Size${(0,Ne.Z)(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})((({theme:e,ownerState:t})=>{var n,r;const o="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],a="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return(0,E.Z)({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":(0,E.Z)({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,D.Fq)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===t.variant&&"inherit"!==t.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,D.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===t.variant&&"inherit"!==t.color&&{border:`1px solid ${(e.vars||e).palette[t.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,D.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===t.variant&&{backgroundColor:e.vars?e.vars.palette.Button.inheritContainedHoverBg:a,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===t.variant&&"inherit"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":(0,E.Z)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${Be.focusVisible}`]:(0,E.Z)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${Be.disabled}`]:(0,E.Z)({color:(e.vars||e).palette.action.disabled},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"contained"===t.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===t.variant&&{padding:"6px 8px"},"text"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main},"outlined"===t.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:`1px solid ${(0,D.Fq)(e.palette[t.color].main,.5)}`},"contained"===t.variant&&{color:e.vars?e.vars.palette.text.primary:null==(n=(r=e.palette).getContrastText)?void 0:n.call(r,e.palette.grey[300]),backgroundColor:e.vars?e.vars.palette.Button.inheritContainedBg:o,boxShadow:(e.vars||e).shadows[2]},"contained"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},"inherit"===t.color&&{color:"inherit",borderColor:"currentColor"},"small"===t.size&&"text"===t.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"text"===t.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"outlined"===t.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"outlined"===t.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"contained"===t.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"contained"===t.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})}),(({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${Be.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${Be.disabled}`]:{boxShadow:"none"}})),Re=(0,Z.ZP)("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${(0,Ne.Z)(n.size)}`]]}})((({ownerState:e})=>(0,E.Z)({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},ze(e)))),Fe=(0,Z.ZP)("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${(0,Ne.Z)(n.size)}`]]}})((({ownerState:e})=>(0,E.Z)({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},ze(e)))),Ge=t.forwardRef((function(e,n){const r=t.useContext(Te),o=t.useContext(Pe),a=(0,F.Z)(r,e),i=(0,$.Z)({props:a,name:"MuiButton"}),{children:l,color:c="primary",component:u="button",className:s,disabled:f=!1,disableElevation:d=!1,disableFocusRipple:p=!1,endIcon:h,focusVisibleClassName:m,fullWidth:y=!1,size:v="medium",startIcon:g,type:b,variant:w="text"}=i,x=(0,A.Z)(i,Ie),S=(0,E.Z)({},i,{color:c,component:u,disabled:f,disableElevation:d,disableFocusRipple:p,fullWidth:y,size:v,type:b,variant:w}),C=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:a,classes:i}=e,l={root:["root",a,`${a}${(0,Ne.Z)(t)}`,`size${(0,Ne.Z)(o)}`,`${a}Size${(0,Ne.Z)(o)}`,"inherit"===t&&"colorInherit",n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["startIcon",`iconSize${(0,Ne.Z)(o)}`],endIcon:["endIcon",`iconSize${(0,Ne.Z)(o)}`]},c=(0,G.Z)(l,_e,i);return(0,E.Z)({},i,c)})(S),k=g&&(0,L.jsx)(Re,{className:C.startIcon,ownerState:S,children:g}),j=h&&(0,L.jsx)(Fe,{className:C.endIcon,ownerState:S,children:h}),O=o||"";return(0,L.jsxs)(Me,(0,E.Z)({ownerState:S,className:(0,R.Z)(r.className,C.root,s,O),component:u,disabled:f,focusRipple:!p,focusVisibleClassName:(0,R.Z)(C.focusVisible,m),ref:n,type:b},x,{classes:C,children:[k,l,j]}))}));var De,Ze=o(3935),$e=o.t(Ze,2);function Ue(){return Ue=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ue.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(De||(De={}));const He="popstate";function We(e,t){if(!1===e||null==e)throw new Error(t)}function Ye(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function qe(e,t){return{usr:e.state,key:e.key,idx:t}}function Ve(e,t,n,r){return void 0===n&&(n=null),Ue({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?Xe(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function Ke(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function Xe(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var Qe;function Je(e,t,n){void 0===n&&(n="/");let r=pt(("string"==typeof t?Xe(t):t).pathname||"/",n);if(null==r)return null;let o=et(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=st(o[e],dt(r));return a}function et(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(We(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=vt([r,i.relativePath]),c=n.concat(i);e.children&&e.children.length>0&&(We(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),et(e.children,t,c,l)),(null!=e.path||e.index)&&t.push({path:l,score:ut(l,e.index),routesMeta:c})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of tt(e.path))o(e,t,n);else o(e,t)})),t}function tt(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=tt(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(Qe||(Qe={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const nt=/^:\w+$/,rt=3,ot=2,at=1,it=10,lt=-2,ct=e=>"*"===e;function ut(e,t){let n=e.split("/"),r=n.length;return n.some(ct)&&(r+=lt),t&&(r+=ot),n.filter((e=>!ct(e))).reduce(((e,t)=>e+(nt.test(t)?rt:""===t?at:it)),r)}function st(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,c="/"===o?t:t.slice(o.length)||"/",u=ft({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},c);if(!u)return null;Object.assign(r,u.params);let s=i.route;a.push({params:r,pathname:vt([o,u.pathname]),pathnameBase:gt(vt([o,u.pathnameBase])),route:s}),"/"!==u.pathnameBase&&(o=vt([o,u.pathnameBase]))}return a}function ft(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),Ye("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:o}=t;if("*"===r){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const c=l[n];return e[r]=o&&!c?void 0:function(e,t){try{return decodeURIComponent(e)}catch(n){return Ye(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(c||"",r),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function dt(e){try{return decodeURI(e)}catch(t){return Ye(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function pt(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function ht(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function mt(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function yt(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=Xe(e):(o=Ue({},e),We(!o.pathname||!o.pathname.includes("?"),ht("?","pathname","search",o)),We(!o.pathname||!o.pathname.includes("#"),ht("#","pathname","hash",o)),We(!o.search||!o.search.includes("#"),ht("#","search","hash",o)));let a,i=""===e||""===o.pathname,l=i?"/":o.pathname;if(null==l)a=n;else if(r){let e=t[t.length-1].replace(/^\//,"").split("/");if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e.pop();o.pathname=t.join("/")}a="/"+e.join("/")}else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?Xe(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:bt(r),hash:wt(o)}}(o,a),u=l&&"/"!==l&&l.endsWith("/"),s=(i||"."===l)&&n.endsWith("/");return c.pathname.endsWith("/")||!u&&!s||(c.pathname+="/"),c}const vt=e=>e.join("/").replace(/\/\/+/g,"/"),gt=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),bt=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",wt=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const xt=["post","put","patch","delete"],Et=(new Set(xt),["get",...xt]);function At(){return At=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},At.apply(this,arguments)}new Set(Et),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const St=t.createContext(null),Ct=t.createContext(null),kt=t.createContext(null),Lt=t.createContext(null),jt=t.createContext({outlet:null,matches:[],isDataRoute:!1}),Ot=t.createContext(null);function Nt(){return null!=t.useContext(Lt)}function _t(){return Nt()||We(!1),t.useContext(Lt).location}function Bt(e){t.useContext(kt).static||t.useLayoutEffect(e)}function Tt(){let{isDataRoute:e}=t.useContext(jt);return e?function(){let{router:e}=function(e){let n=t.useContext(St);return n||We(!1),n}(Dt.UseNavigateStable),n=$t(Zt.UseNavigateStable),r=t.useRef(!1);Bt((()=>{r.current=!0}));let o=t.useCallback((function(t,o){void 0===o&&(o={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,At({fromRouteId:n},o)))}),[e,n]);return o}():function(){Nt()||We(!1);let e=t.useContext(St),{basename:n,navigator:r}=t.useContext(kt),{matches:o}=t.useContext(jt),{pathname:a}=_t(),i=JSON.stringify(mt(o).map((e=>e.pathnameBase))),l=t.useRef(!1);Bt((()=>{l.current=!0}));let c=t.useCallback((function(t,o){if(void 0===o&&(o={}),!l.current)return;if("number"==typeof t)return void r.go(t);let c=yt(t,JSON.parse(i),a,"path"===o.relative);null==e&&"/"!==n&&(c.pathname="/"===c.pathname?n:vt([n,c.pathname])),(o.replace?r.replace:r.push)(c,o.state,o)}),[n,r,i,a,e]);return c}()}function Pt(){let{matches:e}=t.useContext(jt),n=e[e.length-1];return n?n.params:{}}function It(e,n){let{relative:r}=void 0===n?{}:n,{matches:o}=t.useContext(jt),{pathname:a}=_t(),i=JSON.stringify(mt(o).map((e=>e.pathnameBase)));return t.useMemo((()=>yt(e,JSON.parse(i),a,"path"===r)),[e,i,a,r])}function zt(e,n,r){Nt()||We(!1);let{navigator:o}=t.useContext(kt),{matches:a}=t.useContext(jt),i=a[a.length-1],l=i?i.params:{},c=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let u,s=_t();if(n){var f;let e="string"==typeof n?Xe(n):n;"/"===c||(null==(f=e.pathname)?void 0:f.startsWith(c))||We(!1),u=e}else u=s;let d=u.pathname||"/",p=Je(e,{pathname:"/"===c?d:d.slice(c.length)||"/"}),h=function(e,n,r){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),null==e){var a;if(null==(a=r)||!a.errors)return null;e=r.matches}let i=e,l=null==(o=r)?void 0:o.errors;if(null!=l){let e=i.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||We(!1),i=i.slice(0,Math.min(i.length,e+1))}return i.reduceRight(((e,o,a)=>{let c=o.route.id?null==l?void 0:l[o.route.id]:null,u=null;r&&(u=o.route.errorElement||Rt);let s=n.concat(i.slice(0,a+1)),f=()=>{let n;return n=c?u:o.route.Component?t.createElement(o.route.Component,null):o.route.element?o.route.element:e,t.createElement(Gt,{match:o,routeContext:{outlet:e,matches:s,isDataRoute:null!=r},children:n})};return r&&(o.route.ErrorBoundary||o.route.errorElement||0===a)?t.createElement(Ft,{location:r.location,revalidation:r.revalidation,component:u,error:c,children:f(),routeContext:{outlet:null,matches:s,isDataRoute:!0}}):f()}),null)}(p&&p.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:vt([c,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:vt([c,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),a,r);return n&&h?t.createElement(Lt.Provider,{value:{location:At({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:De.Pop}},h):h}function Mt(){let e=function(){var e;let n=t.useContext(Ot),r=function(e){let n=t.useContext(Ct);return n||We(!1),n}(Zt.UseRouteError),o=$t(Zt.UseRouteError);return n||(null==(e=r.errors)?void 0:e[o])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,null)}const Rt=t.createElement(Mt,null);class Ft extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(jt.Provider,{value:this.props.routeContext},t.createElement(Ot.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Gt(e){let{routeContext:n,match:r,children:o}=e,a=t.useContext(St);return a&&a.static&&a.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(jt.Provider,{value:n},o)}var Dt=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(Dt||{}),Zt=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Zt||{});function $t(e){let n=function(e){let n=t.useContext(jt);return n||We(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||We(!1),r.route.id}function Ut(e){We(!1)}function Ht(e){let{basename:n="/",children:r=null,location:o,navigationType:a=De.Pop,navigator:i,static:l=!1}=e;Nt()&&We(!1);let c=n.replace(/^\/*/,"/"),u=t.useMemo((()=>({basename:c,navigator:i,static:l})),[c,i,l]);"string"==typeof o&&(o=Xe(o));let{pathname:s="/",search:f="",hash:d="",state:p=null,key:h="default"}=o,m=t.useMemo((()=>{let e=pt(s,c);return null==e?null:{location:{pathname:e,search:f,hash:d,state:p,key:h},navigationType:a}}),[c,s,f,d,p,h,a]);return null==m?null:t.createElement(kt.Provider,{value:u},t.createElement(Lt.Provider,{children:r,value:m}))}function Wt(e){let{children:t,location:n}=e;return zt(Yt(t),n)}function Yt(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,o)=>{if(!t.isValidElement(e))return;let a=[...n,o];if(e.type===t.Fragment)return void r.push.apply(r,Yt(e.props.children,a));e.type!==Ut&&We(!1),e.props.index&&e.props.children&&We(!1);let i={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=Yt(e.props.children,a)),r.push(i)})),r}function qt(){return qt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},qt.apply(this,arguments)}function Vt(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Kt=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],Xt=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"],Qt=t.createContext({isTransitioning:!1});new Map;const Jt=n.startTransition;function en(e){let{basename:n,children:r,future:o,window:a}=e,i=t.useRef();null==i.current&&(i.current=function(e){return void 0===e&&(e={}),function(e,t,n,r){void 0===r&&(r={});let{window:o=document.defaultView,v5Compat:a=!1}=r,i=o.history,l=De.Pop,c=null,u=s();function s(){return(i.state||{idx:null}).idx}function f(){l=De.Pop;let e=s(),t=null==e?null:e-u;u=e,c&&c({action:l,location:p.location,delta:t})}function d(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:Ke(e);return We(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==u&&(u=0,i.replaceState(Ue({},i.state,{idx:u}),""));let p={get action(){return l},get location(){return e(o,i)},listen(e){if(c)throw new Error("A history only accepts one active listener");return o.addEventListener(He,f),c=e,()=>{o.removeEventListener(He,f),c=null}},createHref:e=>t(o,e),createURL:d,encodeLocation(e){let t=d(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l=De.Push;let r=Ve(p.location,e,t);n&&n(r,e),u=s()+1;let f=qe(r,u),d=p.createHref(r);try{i.pushState(f,"",d)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(d)}a&&c&&c({action:l,location:p.location,delta:1})},replace:function(e,t){l=De.Replace;let r=Ve(p.location,e,t);n&&n(r,e),u=s();let o=qe(r,u),f=p.createHref(r);i.replaceState(o,"",f),a&&c&&c({action:l,location:p.location,delta:0})},go:e=>i.go(e)};return p}((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=Xe(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),Ve("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:Ke(t))}),(function(e,t){Ye("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}({window:a,v5Compat:!0}));let l=i.current,[c,u]=t.useState({action:l.action,location:l.location}),{v7_startTransition:s}=o||{},f=t.useCallback((e=>{s&&Jt?Jt((()=>u(e))):u(e)}),[u,s]);return t.useLayoutEffect((()=>l.listen(f)),[l,f]),t.createElement(Ht,{basename:n,children:r,location:c.location,navigationType:c.action,navigator:l})}$e.flushSync;const tn="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,nn=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,rn=t.forwardRef((function(e,n){let r,{onClick:o,relative:a,reloadDocument:i,replace:l,state:c,target:u,to:s,preventScrollReset:f,unstable_viewTransition:d}=e,p=Vt(e,Kt),{basename:h}=t.useContext(kt),m=!1;if("string"==typeof s&&nn.test(s)&&(r=s,tn))try{let e=new URL(window.location.href),t=s.startsWith("//")?new URL(e.protocol+s):new URL(s),n=pt(t.pathname,h);t.origin===e.origin&&null!=n?s=n+t.search+t.hash:m=!0}catch(e){}let y=function(e,n){let{relative:r}=void 0===n?{}:n;Nt()||We(!1);let{basename:o,navigator:a}=t.useContext(kt),{hash:i,pathname:l,search:c}=It(e,{relative:r}),u=l;return"/"!==o&&(u="/"===l?o:vt([o,l])),a.createHref({pathname:u,search:c,hash:i})}(s,{relative:a}),v=function(e,n){let{target:r,replace:o,state:a,preventScrollReset:i,relative:l,unstable_viewTransition:c}=void 0===n?{}:n,u=Tt(),s=_t(),f=It(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==o?o:Ke(s)===Ke(f);u(e,{replace:n,state:a,preventScrollReset:i,relative:l,unstable_viewTransition:c})}}),[s,u,f,o,a,r,e,i,l,c])}(s,{replace:l,state:c,target:u,preventScrollReset:f,relative:a,unstable_viewTransition:d});return t.createElement("a",qt({},p,{href:r||y,onClick:m||i?o:function(e){o&&o(e),e.defaultPrevented||v(e)},ref:n,target:u}))})),on=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:o=!1,className:a="",end:i=!1,style:l,to:c,unstable_viewTransition:u,children:s}=e,f=Vt(e,Xt),d=It(c,{relative:f.relative}),p=_t(),h=t.useContext(Ct),{navigator:m}=t.useContext(kt),y=null!=h&&function(e,n){void 0===n&&(n={});let r=t.useContext(Qt);null==r&&We(!1);let{basename:o}=function(e){let n=t.useContext(St);return n||We(!1),n}(an.useViewTransitionState),a=It(e,{relative:n.relative});if(!r.isTransitioning)return!1;let i=pt(r.currentLocation.pathname,o)||r.currentLocation.pathname,l=pt(r.nextLocation.pathname,o)||r.nextLocation.pathname;return null!=ft(a.pathname,l)||null!=ft(a.pathname,i)}(d)&&!0===u,v=m.encodeLocation?m.encodeLocation(d).pathname:d.pathname,g=p.pathname,b=h&&h.navigation&&h.navigation.location?h.navigation.location.pathname:null;o||(g=g.toLowerCase(),b=b?b.toLowerCase():null,v=v.toLowerCase());const w="/"!==v&&v.endsWith("/")?v.length-1:v.length;let x,E=g===v||!i&&g.startsWith(v)&&"/"===g.charAt(w),A=null!=b&&(b===v||!i&&b.startsWith(v)&&"/"===b.charAt(v.length)),S={isActive:E,isPending:A,isTransitioning:y},C=E?r:void 0;x="function"==typeof a?a(S):[a,E?"active":null,A?"pending":null,y?"transitioning":null].filter(Boolean).join(" ");let k="function"==typeof l?l(S):l;return t.createElement(rn,qt({},f,{"aria-current":C,className:x,ref:n,style:k,to:c,unstable_viewTransition:u}),"function"==typeof s?s(S):s)}));var an,ln;function cn(e,t){return function(){return e.apply(t,arguments)}}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(an||(an={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ln||(ln={}));const{toString:un}=Object.prototype,{getPrototypeOf:sn}=Object,fn=(dn=Object.create(null),e=>{const t=un.call(e);return dn[t]||(dn[t]=t.slice(8,-1).toLowerCase())});var dn;const pn=e=>(e=e.toLowerCase(),t=>fn(t)===e),hn=e=>t=>typeof t===e,{isArray:mn}=Array,yn=hn("undefined"),vn=pn("ArrayBuffer"),gn=hn("string"),bn=hn("function"),wn=hn("number"),xn=e=>null!==e&&"object"==typeof e,En=e=>{if("object"!==fn(e))return!1;const t=sn(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},An=pn("Date"),Sn=pn("File"),Cn=pn("Blob"),kn=pn("FileList"),Ln=pn("URLSearchParams");function jn(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),mn(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(r=0;r<a;r++)i=o[r],t.call(null,e[i],i,e)}}function On(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const Nn="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,_n=e=>!yn(e)&&e!==Nn,Bn=(Tn="undefined"!=typeof Uint8Array&&sn(Uint8Array),e=>Tn&&e instanceof Tn);var Tn;const Pn=pn("HTMLFormElement"),In=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),zn=pn("RegExp"),Mn=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};jn(n,((n,o)=>{let a;!1!==(a=t(n,o,e))&&(r[o]=a||n)})),Object.defineProperties(e,r)},Rn="abcdefghijklmnopqrstuvwxyz",Fn="0123456789",Gn={DIGIT:Fn,ALPHA:Rn,ALPHA_DIGIT:Rn+Rn.toUpperCase()+Fn},Dn=pn("AsyncFunction"),Zn={isArray:mn,isArrayBuffer:vn,isBuffer:function(e){return null!==e&&!yn(e)&&null!==e.constructor&&!yn(e.constructor)&&bn(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||bn(e.append)&&("formdata"===(t=fn(e))||"object"===t&&bn(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&vn(e.buffer),t},isString:gn,isNumber:wn,isBoolean:e=>!0===e||!1===e,isObject:xn,isPlainObject:En,isUndefined:yn,isDate:An,isFile:Sn,isBlob:Cn,isRegExp:zn,isFunction:bn,isStream:e=>xn(e)&&bn(e.pipe),isURLSearchParams:Ln,isTypedArray:Bn,isFileList:kn,forEach:jn,merge:function e(){const{caseless:t}=_n(this)&&this||{},n={},r=(r,o)=>{const a=t&&On(n,o)||o;En(n[a])&&En(r)?n[a]=e(n[a],r):En(r)?n[a]=e({},r):mn(r)?n[a]=r.slice():n[a]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&jn(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(jn(t,((t,r)=>{n&&bn(t)?e[r]=cn(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,a,i;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),a=o.length;a-- >0;)i=o[a],r&&!r(i,e,t)||l[i]||(t[i]=e[i],l[i]=!0);e=!1!==n&&sn(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:fn,kindOfTest:pn,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(mn(e))return e;let t=e.length;if(!wn(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:Pn,hasOwnProperty:In,hasOwnProp:In,reduceDescriptors:Mn,freezeMethods:e=>{Mn(e,((t,n)=>{if(bn(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];bn(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return mn(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:On,global:Nn,isContextDefined:_n,ALPHABET:Gn,generateString:(e=16,t=Gn.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&bn(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(xn(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=mn(e)?[]:{};return jn(e,((e,t)=>{const a=n(e,r+1);!yn(a)&&(o[t]=a)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:Dn,isThenable:e=>e&&(xn(e)||bn(e))&&bn(e.then)&&bn(e.catch)};function $n(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}Zn.inherits($n,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Zn.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Un=$n.prototype,Hn={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{Hn[e]={value:e}})),Object.defineProperties($n,Hn),Object.defineProperty(Un,"isAxiosError",{value:!0}),$n.from=(e,t,n,r,o,a)=>{const i=Object.create(Un);return Zn.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),$n.call(i,e.message,t,n,r,o),i.cause=e,i.name=e.name,a&&Object.assign(i,a),i};const Wn=$n;function Yn(e){return Zn.isPlainObject(e)||Zn.isArray(e)}function qn(e){return Zn.endsWith(e,"[]")?e.slice(0,-2):e}function Vn(e,t,n){return e?e.concat(t).map((function(e,t){return e=qn(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const Kn=Zn.toFlatObject(Zn,{},null,(function(e){return/^is[A-Z]/.test(e)})),Xn=function(e,t,n){if(!Zn.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=Zn.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!Zn.isUndefined(t[e])}))).metaTokens,o=n.visitor||u,a=n.dots,i=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&Zn.isSpecCompliantForm(t);if(!Zn.isFunction(o))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(Zn.isDate(e))return e.toISOString();if(!l&&Zn.isBlob(e))throw new Wn("Blob is not supported. Use a Buffer instead.");return Zn.isArrayBuffer(e)||Zn.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function u(e,n,o){let l=e;if(e&&!o&&"object"==typeof e)if(Zn.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(Zn.isArray(e)&&function(e){return Zn.isArray(e)&&!e.some(Yn)}(e)||(Zn.isFileList(e)||Zn.endsWith(n,"[]"))&&(l=Zn.toArray(e)))return n=qn(n),l.forEach((function(e,r){!Zn.isUndefined(e)&&null!==e&&t.append(!0===i?Vn([n],r,a):null===i?n:n+"[]",c(e))})),!1;return!!Yn(e)||(t.append(Vn(o,n,a),c(e)),!1)}const s=[],f=Object.assign(Kn,{defaultVisitor:u,convertValue:c,isVisitable:Yn});if(!Zn.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!Zn.isUndefined(n)){if(-1!==s.indexOf(n))throw Error("Circular reference detected in "+r.join("."));s.push(n),Zn.forEach(n,(function(n,a){!0===(!(Zn.isUndefined(n)||null===n)&&o.call(t,n,Zn.isString(a)?a.trim():a,r,f))&&e(n,r?r.concat(a):[a])})),s.pop()}}(e),t};function Qn(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Jn(e,t){this._pairs=[],e&&Xn(e,this,t)}const er=Jn.prototype;er.append=function(e,t){this._pairs.push([e,t])},er.toString=function(e){const t=e?function(t){return e.call(this,t,Qn)}:Qn;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const tr=Jn;function nr(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function rr(e,t,n){if(!t)return e;const r=n&&n.encode||nr,o=n&&n.serialize;let a;if(a=o?o(t,n):Zn.isURLSearchParams(t)?t.toString():new tr(t,n).toString(r),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}const or=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Zn.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},ar={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ir={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:tr,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},lr="undefined"!=typeof window&&"undefined"!=typeof document,cr=(ur="undefined"!=typeof navigator&&navigator.product,lr&&["ReactNative","NativeScript","NS"].indexOf(ur)<0);var ur;const sr="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,fr={...e,...ir},dr=function(e){function t(e,n,r,o){let a=e[o++];const i=Number.isFinite(+a),l=o>=e.length;return a=!a&&Zn.isArray(r)?r.length:a,l?(Zn.hasOwnProp(r,a)?r[a]=[r[a],n]:r[a]=n,!i):(r[a]&&Zn.isObject(r[a])||(r[a]=[]),t(e,n,r[a],o)&&Zn.isArray(r[a])&&(r[a]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let a;for(r=0;r<o;r++)a=n[r],t[a]=e[a];return t}(r[a])),!i)}if(Zn.isFormData(e)&&Zn.isFunction(e.entries)){const n={};return Zn.forEachEntry(e,((e,r)=>{t(function(e){return Zn.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},pr={transitional:ar,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=Zn.isObject(e);if(o&&Zn.isHTMLForm(e)&&(e=new FormData(e)),Zn.isFormData(e))return r&&r?JSON.stringify(dr(e)):e;if(Zn.isArrayBuffer(e)||Zn.isBuffer(e)||Zn.isStream(e)||Zn.isFile(e)||Zn.isBlob(e))return e;if(Zn.isArrayBufferView(e))return e.buffer;if(Zn.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Xn(e,new fr.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return fr.isNode&&Zn.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=Zn.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Xn(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(Zn.isString(e))try{return(0,JSON.parse)(e),Zn.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||pr.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&Zn.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw Wn.from(e,Wn.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:fr.classes.FormData,Blob:fr.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Zn.forEach(["delete","get","head","post","put","patch"],(e=>{pr.headers[e]={}}));const hr=pr,mr=Zn.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),yr=Symbol("internals");function vr(e){return e&&String(e).trim().toLowerCase()}function gr(e){return!1===e||null==e?e:Zn.isArray(e)?e.map(gr):String(e)}function br(e,t,n,r,o){return Zn.isFunction(r)?r.call(this,t,n):(o&&(t=n),Zn.isString(t)?Zn.isString(r)?-1!==t.indexOf(r):Zn.isRegExp(r)?r.test(t):void 0:void 0)}class wr{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=vr(t);if(!o)throw new Error("header name must be a non-empty string");const a=Zn.findKey(r,o);(!a||void 0===r[a]||!0===n||void 0===n&&!1!==r[a])&&(r[a||t]=gr(e))}const a=(e,t)=>Zn.forEach(e,((e,n)=>o(e,n,t)));return Zn.isPlainObject(e)||e instanceof this.constructor?a(e,t):Zn.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?a((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&mr[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=vr(e)){const n=Zn.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(Zn.isFunction(t))return t.call(this,e,n);if(Zn.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=vr(e)){const n=Zn.findKey(this,e);return!(!n||void 0===this[n]||t&&!br(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=vr(e)){const o=Zn.findKey(n,e);!o||t&&!br(0,n[o],o,t)||(delete n[o],r=!0)}}return Zn.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!br(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return Zn.forEach(this,((r,o)=>{const a=Zn.findKey(n,o);if(a)return t[a]=gr(r),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();i!==o&&delete t[o],t[i]=gr(r),n[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Zn.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&Zn.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[yr]=this[yr]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=vr(e);t[r]||(function(e,t){const n=Zn.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return Zn.isArray(e)?e.forEach(r):r(e),this}}wr.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Zn.reduceDescriptors(wr.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),Zn.freezeMethods(wr);const xr=wr;function Er(e,t){const n=this||hr,r=t||n,o=xr.from(r.headers);let a=r.data;return Zn.forEach(e,(function(e){a=e.call(n,a,o.normalize(),t?t.status:void 0)})),o.normalize(),a}function Ar(e){return!(!e||!e.__CANCEL__)}function Sr(e,t,n){Wn.call(this,null==e?"canceled":e,Wn.ERR_CANCELED,t,n),this.name="CanceledError"}Zn.inherits(Sr,Wn,{__CANCEL__:!0});const Cr=Sr,kr=fr.hasStandardBrowserEnv?{write(e,t,n,r,o,a){const i=[e+"="+encodeURIComponent(t)];Zn.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),Zn.isString(r)&&i.push("path="+r),Zn.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Lr(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const jr=fr.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=Zn.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function Or(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,a=0,i=0;return t=void 0!==t?t:1e3,function(l){const c=Date.now(),u=r[i];o||(o=c),n[a]=l,r[a]=c;let s=i,f=0;for(;s!==a;)f+=n[s++],s%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),c-o<t)return;const d=u&&c-u;return d?Math.round(1e3*f/d):void 0}}(50,250);return o=>{const a=o.loaded,i=o.lengthComputable?o.total:void 0,l=a-n,c=r(l);n=a;const u={loaded:a,total:i,progress:i?a/i:void 0,bytes:l,rate:c||void 0,estimated:c&&i&&a<=i?(i-a)/c:void 0,event:o};u[t?"download":"upload"]=!0,e(u)}}const Nr={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=xr.from(e.headers).normalize();let a,i,{responseType:l,withXSRFToken:c}=e;function u(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}if(Zn.isFormData(r))if(fr.hasStandardBrowserEnv||fr.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(i=o.getContentType())){const[e,...t]=i?i.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}let s=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const f=Lr(e.baseURL,e.url);function d(){if(!s)return;const r=xr.from("getAllResponseHeaders"in s&&s.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new Wn("Request failed with status code "+n.status,[Wn.ERR_BAD_REQUEST,Wn.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),u()}),(function(e){n(e),u()}),{data:l&&"text"!==l&&"json"!==l?s.response:s.responseText,status:s.status,statusText:s.statusText,headers:r,config:e,request:s}),s=null}if(s.open(e.method.toUpperCase(),rr(f,e.params,e.paramsSerializer),!0),s.timeout=e.timeout,"onloadend"in s?s.onloadend=d:s.onreadystatechange=function(){s&&4===s.readyState&&(0!==s.status||s.responseURL&&0===s.responseURL.indexOf("file:"))&&setTimeout(d)},s.onabort=function(){s&&(n(new Wn("Request aborted",Wn.ECONNABORTED,e,s)),s=null)},s.onerror=function(){n(new Wn("Network Error",Wn.ERR_NETWORK,e,s)),s=null},s.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||ar;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new Wn(t,r.clarifyTimeoutError?Wn.ETIMEDOUT:Wn.ECONNABORTED,e,s)),s=null},fr.hasStandardBrowserEnv&&(c&&Zn.isFunction(c)&&(c=c(e)),c||!1!==c&&jr(f))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&kr.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in s&&Zn.forEach(o.toJSON(),(function(e,t){s.setRequestHeader(t,e)})),Zn.isUndefined(e.withCredentials)||(s.withCredentials=!!e.withCredentials),l&&"json"!==l&&(s.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&s.addEventListener("progress",Or(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&s.upload&&s.upload.addEventListener("progress",Or(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{s&&(n(!t||t.type?new Cr(null,e,s):t),s.abort(),s=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const p=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(f);p&&-1===fr.protocols.indexOf(p)?n(new Wn("Unsupported protocol "+p+":",Wn.ERR_BAD_REQUEST,e)):s.send(r||null)}))}};Zn.forEach(Nr,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const _r=e=>`- ${e}`,Br=e=>Zn.isFunction(e)||null===e||!1===e,Tr=e=>{e=Zn.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let a=0;a<t;a++){let t;if(n=e[a],r=n,!Br(n)&&(r=Nr[(t=String(n)).toLowerCase()],void 0===r))throw new Wn(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+a]=r}if(!r){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(_r).join("\n"):" "+_r(e[0]):"as no adapter specified";throw new Wn("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function Pr(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Cr(null,e)}function Ir(e){return Pr(e),e.headers=xr.from(e.headers),e.data=Er.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Tr(e.adapter||hr.adapter)(e).then((function(t){return Pr(e),t.data=Er.call(e,e.transformResponse,t),t.headers=xr.from(t.headers),t}),(function(t){return Ar(t)||(Pr(e),t&&t.response&&(t.response.data=Er.call(e,e.transformResponse,t.response),t.response.headers=xr.from(t.response.headers))),Promise.reject(t)}))}const zr=e=>e instanceof xr?e.toJSON():e;function Mr(e,t){t=t||{};const n={};function r(e,t,n){return Zn.isPlainObject(e)&&Zn.isPlainObject(t)?Zn.merge.call({caseless:n},e,t):Zn.isPlainObject(t)?Zn.merge({},t):Zn.isArray(t)?t.slice():t}function o(e,t,n){return Zn.isUndefined(t)?Zn.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function a(e,t){if(!Zn.isUndefined(t))return r(void 0,t)}function i(e,t){return Zn.isUndefined(t)?Zn.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,a){return a in t?r(n,o):a in e?r(void 0,n):void 0}const c={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t)=>o(zr(e),zr(t),!0)};return Zn.forEach(Object.keys(Object.assign({},e,t)),(function(r){const a=c[r]||o,i=a(e[r],t[r],r);Zn.isUndefined(i)&&a!==l||(n[r]=i)})),n}const Rr={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Rr[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Fr={};Rr.transitional=function(e,t,n){function r(e,t){return"[Axios v1.6.2] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,a)=>{if(!1===e)throw new Wn(r(o," has been removed"+(t?" in "+t:"")),Wn.ERR_DEPRECATED);return t&&!Fr[o]&&(Fr[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,a)}};const Gr={assertOptions:function(e,t,n){if("object"!=typeof e)throw new Wn("options must be an object",Wn.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const a=r[o],i=t[a];if(i){const t=e[a],n=void 0===t||i(t,a,e);if(!0!==n)throw new Wn("option "+a+" must be "+n,Wn.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new Wn("Unknown option "+a,Wn.ERR_BAD_OPTION)}},validators:Rr},Dr=Gr.validators;class Zr{constructor(e){this.defaults=e,this.interceptors={request:new or,response:new or}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Mr(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&Gr.assertOptions(n,{silentJSONParsing:Dr.transitional(Dr.boolean),forcedJSONParsing:Dr.transitional(Dr.boolean),clarifyTimeoutError:Dr.transitional(Dr.boolean)},!1),null!=r&&(Zn.isFunction(r)?t.paramsSerializer={serialize:r}:Gr.assertOptions(r,{encode:Dr.function,serialize:Dr.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let a=o&&Zn.merge(o.common,o[t.method]);o&&Zn.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=xr.concat(a,o);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const c=[];let u;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let s,f=0;if(!l){const e=[Ir.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,c),s=e.length,u=Promise.resolve(t);f<s;)u=u.then(e[f++],e[f++]);return u}s=i.length;let d=t;for(f=0;f<s;){const e=i[f++],t=i[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{u=Ir.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,s=c.length;f<s;)u=u.then(c[f++],c[f++]);return u}getUri(e){return rr(Lr((e=Mr(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}Zn.forEach(["delete","get","head","options"],(function(e){Zr.prototype[e]=function(t,n){return this.request(Mr(n||{},{method:e,url:t,data:(n||{}).data}))}})),Zn.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(Mr(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Zr.prototype[e]=t(),Zr.prototype[e+"Form"]=t(!0)}));const $r=Zr;class Ur{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new Cr(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new Ur((function(t){e=t})),cancel:e}}}const Hr=Ur,Wr={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Wr).forEach((([e,t])=>{Wr[t]=e}));const Yr=Wr,qr=function e(t){const n=new $r(t),r=cn($r.prototype.request,n);return Zn.extend(r,$r.prototype,n,{allOwnKeys:!0}),Zn.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(Mr(t,n))},r}(hr);qr.Axios=$r,qr.CanceledError=Cr,qr.CancelToken=Hr,qr.isCancel=Ar,qr.VERSION="1.6.2",qr.toFormData=Xn,qr.AxiosError=Wn,qr.Cancel=qr.CanceledError,qr.all=function(e){return Promise.all(e)},qr.spread=function(e){return function(t){return e.apply(null,t)}},qr.isAxiosError=function(e){return Zn.isObject(e)&&!0===e.isAxiosError},qr.mergeConfig=Mr,qr.AxiosHeaders=xr,qr.formToJSON=e=>dr(Zn.isHTMLForm(e)?new FormData(e):e),qr.getAdapter=Tr,qr.HttpStatusCode=Yr,qr.default=qr;const Vr=qr;function Kr(e){return Kr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Kr(e)}function Xr(){Xr=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Kr(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Kr(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Qr(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Jr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return eo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?eo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const to=function(){var e=Jr((0,t.useState)(null),2),n=(e[0],e[1]),r=Jr((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=Xr().mark((function e(){var t,r;return Xr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Vr.get("https://api.api-ninjas.com/v1/facts?limit=3",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,r=t.data,console.log("rezultat cinjenica",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Qr(a,r,o,i,l,"next",e)}function l(e){Qr(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("div",{className:"facts"},t.createElement("table",{className:"table"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement("h2",null,"WELCOME"),t.createElement("h3",null,"Random Facts:")))),t.createElement("tbody",null,o.map((function(e){return t.createElement("tr",{key:e.fact},t.createElement("td",null,e.fact))})),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null)))))))};var no={cm:!0,mm:!0,in:!0,px:!0,pt:!0,pc:!0,em:!0,ex:!0,ch:!0,rem:!0,vw:!0,vh:!0,vmin:!0,vmax:!0,"%":!0};function ro(e){var t=function(e){if("number"==typeof e)return{value:e,unit:"px"};var t,n=(e.match(/^[0-9.]*/)||"").toString();t=n.includes(".")?parseFloat(n):parseInt(n,10);var r=(e.match(/[^0-9]*$/)||"").toString();return no[r]?{value:t,unit:r}:(console.warn("React Spinners: ".concat(e," is not a valid css value. Defaulting to ").concat(t,"px.")),{value:t,unit:"px"})}(e);return"".concat(t.value).concat(t.unit)}var oo=function(e,t,n){var r="react-spinners-".concat(e,"-").concat(n);if("undefined"==typeof window||!window.document)return r;var o=document.createElement("style");document.head.appendChild(o);var a=o.sheet,i="\n    @keyframes ".concat(r," {\n      ").concat(t,"\n    }\n  ");return a&&a.insertRule(i,0),r},ao=function(){return ao=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ao.apply(this,arguments)},io=[oo("PuffLoader","0% {transform: scale(0)} 100% {transform: scale(1.0)}","puff-1"),oo("PuffLoader","0% {opacity: 1} 100% {opacity: 0}","puff-2")];const lo=function(e){var n=e.loading,r=void 0===n||n,o=e.color,a=void 0===o?"#000000":o,i=e.speedMultiplier,l=void 0===i?1:i,c=e.cssOverride,u=void 0===c?{}:c,s=e.size,f=void 0===s?60:s,d=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["loading","color","speedMultiplier","cssOverride","size"]),p=ao({display:"inherit",position:"relative",width:ro(f),height:ro(f)},u),h=function(e){return{position:"absolute",height:ro(f),width:ro(f),border:"thick solid ".concat(a),borderRadius:"50%",opacity:"1",top:"0",left:"0",animationFillMode:"both",animation:"".concat(io[0],", ").concat(io[1]),animationDuration:"".concat(2/l,"s"),animationIterationCount:"infinite",animationTimingFunction:"cubic-bezier(0.165, 0.84, 0.44, 1), cubic-bezier(0.3, 0.61, 0.355, 1)",animationDelay:1===e?"-1s":"0s"}};return r?t.createElement("span",ao({style:p},d),t.createElement("span",{style:h(1)}),t.createElement("span",{style:h(2)})):null},co=function(){return t.createElement("div",{className:"loader"},t.createElement(lo,{size:"170px",color:"dodgerblue",speedMultiplier:"0.3"}))};function uo(e){return uo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},uo(e)}function so(){so=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==uo(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(uo(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function fo(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function po(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ho(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ho(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ho(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const mo=function(){var e=po((0,t.useState)(null),2),n=(e[0],e[1]),r=po((0,t.useState)([]),2),o=r[0],a=r[1],i=po((0,t.useState)([]),2),l=i[0],c=i[1],u=po((0,t.useState)([]),2),s=u[0],f=u[1],d=po((0,t.useState)(!0),2),p=d[0],h=d[1],m=Tt();(0,t.useEffect)((function(){y()}),[]),console.log("quotes");var y=function(){var e,t=(e=so().mark((function e(){var t,r,o,i,l,u,s,d;return so().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/quotes?all",r="https://api.api-ninjas.com/v1/quotes?all",e.prev=3,e.next=6,Vr.get("https://api.api-ninjas.com/v1/quotes?all",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 6:return o=e.sent,e.next=9,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 9:return i=e.sent,e.next=12,Vr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 12:l=e.sent,u=o.data,s=i.data,d=l.data,console.log("rezultat quotes",u),a(u[0]),c(s[0]),f(d[0]),h(!1),e.next=26;break;case 23:e.prev=23,e.t0=e.catch(3),n(e.t0);case 26:case"end":return e.stop()}}),e,null,[[3,23]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){fo(a,r,o,i,l,"next",e)}function l(e){fo(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),v=function(e){console.log("klik na personu iz quotes",e);var t="/historyPerson/".concat(e);m(t)};return p?t.createElement(co,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"facts"},t.createElement("div",{className:"table"},t.createElement("h3",null,"Random Quotes:"),t.createElement("p",{className:"category"},o.category),t.createElement("p",null,o.quote),t.createElement("p",{className:"author",onClick:function(){return v(o.author)}},o.author)),t.createElement("div",{className:"table"},t.createElement("p",{className:"category"},l.category),t.createElement("p",null,l.quote),t.createElement("p",{className:"author",onClick:function(){return v(l.author)}},l.author)),t.createElement("div",{className:"table"},t.createElement("p",{className:"category"},s.category),t.createElement("p",null,s.quote),t.createElement("p",{className:"author",onClick:function(){return v(s.author)}},s.author),t.createElement("hr",null))))},yo=function(){return t.createElement(t.Fragment,null,t.createElement("div",{className:"slika"},t.createElement(to,null),t.createElement(mo,null)))},vo=function(){return t.createElement("div",{className:"footer"},t.createElement("hr",null),"Interval ©®")},go=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function bo(e){return(0,Se.Z)("MuiPaper",e)}(0,ue.Z)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const wo=["className","component","elevation","square","variant"],xo=(0,Z.ZP)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>{var n;return(0,E.Z)({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&(0,E.Z)({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${(0,D.Fq)("#fff",go(t.elevation))}, ${(0,D.Fq)("#fff",go(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))})),Eo=t.forwardRef((function(e,t){const n=(0,$.Z)({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:a=1,square:i=!1,variant:l="elevation"}=n,c=(0,A.Z)(n,wo),u=(0,E.Z)({},n,{component:o,elevation:a,square:i,variant:l}),s=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e,a={root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]};return(0,G.Z)(a,bo,o)})(u);return(0,L.jsx)(xo,(0,E.Z)({as:o,ownerState:u,className:(0,R.Z)(s.root,r),ref:t},c))}));var Ao=o(1387),So=o(3703),Co=o(4161),ko=o(3546),Lo=o(9336);const jo=["onChange","maxRows","minRows","style","value"];function Oo(e){return parseInt(e,10)||0}const No={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function _o(e){return null==e||0===Object.keys(e).length||0===e.outerHeightStyle&&!e.overflow}const Bo=t.forwardRef((function(e,n){const{onChange:r,maxRows:o,minRows:a=1,style:i,value:l}=e,c=(0,A.Z)(e,jo),{current:u}=t.useRef(null!=l),s=t.useRef(null),f=(0,So.Z)(n,s),d=t.useRef(null),p=t.useRef(0),[h,m]=t.useState({outerHeightStyle:0}),y=t.useCallback((()=>{const t=s.current,n=(0,Co.Z)(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0};const r=d.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const i=n.boxSizing,l=Oo(n.paddingBottom)+Oo(n.paddingTop),c=Oo(n.borderBottomWidth)+Oo(n.borderTopWidth),u=r.scrollHeight;r.value="x";const f=r.scrollHeight;let p=u;return a&&(p=Math.max(Number(a)*f,p)),o&&(p=Math.min(Number(o)*f,p)),p=Math.max(p,f),{outerHeightStyle:p+("border-box"===i?l+c:0),overflow:Math.abs(p-u)<=1}}),[o,a,e.placeholder]),v=(e,t)=>{const{outerHeightStyle:n,overflow:r}=t;return p.current<20&&(n>0&&Math.abs((e.outerHeightStyle||0)-n)>1||e.overflow!==r)?(p.current+=1,{overflow:r,outerHeightStyle:n}):e},g=t.useCallback((()=>{const e=y();_o(e)||m((t=>v(t,e)))}),[y]);return(0,ko.Z)((()=>{const e=()=>{p.current=0,(()=>{const e=y();_o(e)||Ze.flushSync((()=>{m((t=>v(t,e)))}))})()};const t=(0,Lo.Z)(e),n=s.current,r=(0,Co.Z)(n);let o;return r.addEventListener("resize",t),"undefined"!=typeof ResizeObserver&&(o=new ResizeObserver(e),o.observe(n)),()=>{t.clear(),cancelAnimationFrame(undefined),r.removeEventListener("resize",t),o&&o.disconnect()}}),[y]),(0,ko.Z)((()=>{g()})),t.useEffect((()=>{p.current=0}),[l]),(0,L.jsxs)(t.Fragment,{children:[(0,L.jsx)("textarea",(0,E.Z)({value:l,onChange:e=>{p.current=0,u||g(),r&&r(e)},ref:f,rows:a,style:(0,E.Z)({height:h.outerHeightStyle,overflow:h.overflow?"hidden":void 0},i)},c)),(0,L.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:d,tabIndex:-1,style:(0,E.Z)({},No,i,{paddingTop:0,paddingBottom:0})})]})}));function To(e){return"string"==typeof e}const Po=t.createContext(void 0);var Io=o(8974);function zo(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,L.jsx)(ie,{styles:r})}var Mo=o(6682);const Ro=function({styles:e,themeId:t,defaultTheme:n={}}){const r=(0,Mo.Z)(n),o="function"==typeof e?e(t&&r[t]||r):e;return(0,L.jsx)(zo,{styles:o})};var Fo=o(247);const Go=function(e){return(0,L.jsx)(Ro,(0,E.Z)({},e,{defaultTheme:Fo.Z,themeId:P.Z}))};function Do(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Zo(e){return(0,Se.Z)("MuiInputBase",e)}const $o=(0,ue.Z)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),Uo=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],Ho=(0,Z.ZP)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${(0,Ne.Z)(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]}})((({theme:e,ownerState:t})=>(0,E.Z)({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${$o.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&(0,E.Z)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),Wo=(0,Z.ZP)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=(0,E.Z)({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),o={opacity:"0 !important"},a=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return(0,E.Z)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${$o.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},[`&.${$o.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),Yo=(0,L.jsx)(Go,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),qo=t.forwardRef((function(e,n){var r;const o=(0,$.Z)({props:e,name:"MuiInputBase"}),{"aria-describedby":a,autoComplete:i,autoFocus:l,className:c,components:u={},componentsProps:s={},defaultValue:f,disabled:d,disableInjectingGlobalStyles:p,endAdornment:h,fullWidth:m=!1,id:y,inputComponent:v="input",inputProps:g={},inputRef:b,maxRows:w,minRows:x,multiline:S=!1,name:C,onBlur:k,onChange:j,onClick:O,onFocus:N,onKeyDown:_,onKeyUp:B,placeholder:T,readOnly:P,renderSuffix:I,rows:z,slotProps:M={},slots:F={},startAdornment:D,type:Z="text",value:H}=o,W=(0,A.Z)(o,Uo),Y=null!=g.value?g.value:H,{current:q}=t.useRef(null!=Y),V=t.useRef(),K=t.useCallback((e=>{}),[]),X=(0,U.Z)(V,b,g.ref,K),[Q,J]=t.useState(!1),ee=t.useContext(Po),te=function({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}({props:o,muiFormControl:ee,states:["color","disabled","error","hiddenLabel","size","required","filled"]});te.focused=ee?ee.focused:Q,t.useEffect((()=>{!ee&&d&&Q&&(J(!1),k&&k())}),[ee,d,Q,k]);const ne=ee&&ee.onFilled,re=ee&&ee.onEmpty,oe=t.useCallback((e=>{!function(e,t=!1){return e&&(Do(e.value)&&""!==e.value||t&&Do(e.defaultValue)&&""!==e.defaultValue)}(e)?re&&re():ne&&ne()}),[ne,re]);(0,Io.Z)((()=>{q&&oe({value:Y})}),[Y,oe,q]),t.useEffect((()=>{oe(V.current)}),[]);let ae=v,ie=g;S&&"input"===ae&&(ie=z?(0,E.Z)({type:void 0,minRows:z,maxRows:z},ie):(0,E.Z)({type:void 0,maxRows:w,minRows:x},ie),ae=Bo),t.useEffect((()=>{ee&&ee.setAdornedStart(Boolean(D))}),[ee,D]);const le=(0,E.Z)({},o,{color:te.color||"primary",disabled:te.disabled,endAdornment:h,error:te.error,focused:te.focused,formControl:ee,fullWidth:m,hiddenLabel:te.hiddenLabel,multiline:S,size:te.size,startAdornment:D,type:Z}),ce=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:a,focused:i,formControl:l,fullWidth:c,hiddenLabel:u,multiline:s,readOnly:f,size:d,startAdornment:p,type:h}=e,m={root:["root",`color${(0,Ne.Z)(n)}`,r&&"disabled",o&&"error",c&&"fullWidth",i&&"focused",l&&"formControl",d&&"medium"!==d&&`size${(0,Ne.Z)(d)}`,s&&"multiline",p&&"adornedStart",a&&"adornedEnd",u&&"hiddenLabel",f&&"readOnly"],input:["input",r&&"disabled","search"===h&&"inputTypeSearch",s&&"inputMultiline","small"===d&&"inputSizeSmall",u&&"inputHiddenLabel",p&&"inputAdornedStart",a&&"inputAdornedEnd",f&&"readOnly"]};return(0,G.Z)(m,Zo,t)})(le),ue=F.root||u.Root||Ho,se=M.root||s.root||{},fe=F.input||u.Input||Wo;return ie=(0,E.Z)({},ie,null!=(r=M.input)?r:s.input),(0,L.jsxs)(t.Fragment,{children:[!p&&Yo,(0,L.jsxs)(ue,(0,E.Z)({},se,!To(ue)&&{ownerState:(0,E.Z)({},le,se.ownerState)},{ref:n,onClick:e=>{V.current&&e.currentTarget===e.target&&V.current.focus(),O&&O(e)}},W,{className:(0,R.Z)(ce.root,se.className,c,P&&"MuiInputBase-readOnly"),children:[D,(0,L.jsx)(Po.Provider,{value:null,children:(0,L.jsx)(fe,(0,E.Z)({ownerState:le,"aria-invalid":te.error,"aria-describedby":a,autoComplete:i,autoFocus:l,defaultValue:f,disabled:te.disabled,id:y,onAnimationStart:e=>{oe("mui-auto-fill-cancel"===e.animationName?V.current:{value:"x"})},name:C,placeholder:T,readOnly:P,required:te.required,rows:z,value:Y,onKeyDown:_,onKeyUp:B,type:Z},ie,!To(fe)&&{as:ae,ownerState:(0,E.Z)({},le,ie.ownerState)},{ref:X,className:(0,R.Z)(ce.input,ie.className,P&&"MuiInputBase-readOnly"),onBlur:e=>{k&&k(e),g.onBlur&&g.onBlur(e),ee&&ee.onBlur?ee.onBlur(e):J(!1)},onChange:(e,...t)=>{if(!q){const t=e.target||V.current;if(null==t)throw new Error((0,Ao.Z)(1));oe({value:t.value})}g.onChange&&g.onChange(e,...t),j&&j(e,...t)},onFocus:e=>{te.disabled?e.stopPropagation():(N&&N(e),g.onFocus&&g.onFocus(e),ee&&ee.onFocus?ee.onFocus(e):J(!0))}}))}),h,I?I((0,E.Z)({},te,{startAdornment:D})):null]}))]})}));function Vo(e){return(0,Se.Z)("MuiIconButton",e)}const Ko=(0,ue.Z)("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),Xo=["edge","children","className","color","disabled","disableFocusRipple","size"],Qo=(0,Z.ZP)(Oe,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t[`color${(0,Ne.Z)(n.color)}`],n.edge&&t[`edge${(0,Ne.Z)(n.edge)}`],t[`size${(0,Ne.Z)(n.size)}`]]}})((({theme:e,ownerState:t})=>(0,E.Z)({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,D.Fq)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>{var n;const r=null==(n=(e.vars||e).palette)?void 0:n[t.color];return(0,E.Z)({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&(0,E.Z)({color:null==r?void 0:r.main},!t.disableRipple&&{"&:hover":(0,E.Z)({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,D.Fq)(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${Ko.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),Jo=t.forwardRef((function(e,t){const n=(0,$.Z)({props:e,name:"MuiIconButton"}),{edge:r=!1,children:o,className:a,color:i="default",disabled:l=!1,disableFocusRipple:c=!1,size:u="medium"}=n,s=(0,A.Z)(n,Xo),f=(0,E.Z)({},n,{edge:r,color:i,disabled:l,disableFocusRipple:c,size:u}),d=(e=>{const{classes:t,disabled:n,color:r,edge:o,size:a}=e,i={root:["root",n&&"disabled","default"!==r&&`color${(0,Ne.Z)(r)}`,o&&`edge${(0,Ne.Z)(o)}`,`size${(0,Ne.Z)(a)}`]};return(0,G.Z)(i,Vo,t)})(f);return(0,L.jsx)(Qo,(0,E.Z)({className:(0,R.Z)(d.root,a),centerRipple:!0,focusRipple:!c,disabled:l,ref:t,ownerState:f},s,{children:o}))})),ea=t.createContext({searchStringValue:"",setSearchStringFn:function(){}}),ta={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M824.2 699.9a301.55 301.55 0 00-86.4-60.4C783.1 602.8 812 546.8 812 484c0-110.8-92.4-201.7-203.2-200-109.1 1.7-197 90.6-197 200 0 62.8 29 118.8 74.2 155.5a300.95 300.95 0 00-86.4 60.4C345 754.6 314 826.8 312 903.8a8 8 0 008 8.2h56c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5A226.62 226.62 0 01612 684c60.9 0 118.2 23.7 161.3 66.8C814.5 792 838 846.3 840 904.3c.1 4.3 3.7 7.7 8 7.7h56a8 8 0 008-8.2c-2-77-33-149.2-87.8-203.9zM612 612c-34.2 0-66.4-13.3-90.5-37.5a126.86 126.86 0 01-37.5-91.8c.3-32.8 13.4-64.5 36.3-88 24-24.6 56.1-38.3 90.4-38.7 33.9-.3 66.8 12.9 91 36.6 24.8 24.3 38.4 56.8 38.4 91.4 0 34.2-13.3 66.3-37.5 90.5A127.3 127.3 0 01612 612zM361.5 510.4c-.9-8.7-1.4-17.5-1.4-26.4 0-15.9 1.5-31.4 4.3-46.5.7-3.6-1.2-7.3-4.5-8.8-13.6-6.1-26.1-14.5-36.9-25.1a127.54 127.54 0 01-38.7-95.4c.9-32.1 13.8-62.6 36.3-85.6 24.7-25.3 57.9-39.1 93.2-38.7 31.9.3 62.7 12.6 86 34.4 7.9 7.4 14.7 15.6 20.4 24.4 2 3.1 5.9 4.4 9.3 3.2 17.6-6.1 36.2-10.4 55.3-12.4 5.6-.6 8.8-6.6 6.3-11.6-32.5-64.3-98.9-108.7-175.7-109.9-110.9-1.7-203.3 89.2-203.3 199.9 0 62.8 28.9 118.8 74.2 155.5-31.8 14.7-61.1 35-86.5 60.4-54.8 54.7-85.8 126.9-87.8 204a8 8 0 008 8.2h56.1c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5 29.4-29.4 65.4-49.8 104.7-59.7 3.9-1 6.5-4.7 6-8.7z"}}]},name:"team",theme:"outlined"};function na(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ra(e,t){if(e){if("string"==typeof e)return na(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?na(e,t):void 0}}function oa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||ra(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function aa(e){return aa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},aa(e)}function ia(e){var t=function(e,t){if("object"!==aa(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==aa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===aa(t)?t:String(t)}function la(e,t,n){return(t=ia(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ca(e,t){if(null==e)return{};var n,r,o=(0,A.Z)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ua=o(4184),sa=o.n(ua);function fa(e,t){(function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var n=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=360===t?e:Math.min(t,Math.max(0,parseFloat(e))),n&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:e=360===t?(e<0?e%t+t:e%t)/parseFloat(String(t)):e%t/parseFloat(String(t))}function da(e){return Math.min(1,Math.max(0,e))}function pa(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function ha(e){return e<=1?"".concat(100*Number(e),"%"):e}function ma(e){return 1===e.length?"0"+e:String(e)}function ya(e,t,n){e=fa(e,255),t=fa(t,255),n=fa(n,255);var r=Math.max(e,t,n),o=Math.min(e,t,n),a=0,i=0,l=(r+o)/2;if(r===o)i=0,a=0;else{var c=r-o;switch(i=l>.5?c/(2-r-o):c/(r+o),r){case e:a=(t-n)/c+(t<n?6:0);break;case t:a=(n-e)/c+2;break;case n:a=(e-t)/c+4}a/=6}return{h:a,s:i,l}}function va(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*n*(t-e):n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function ga(e,t,n){e=fa(e,255),t=fa(t,255),n=fa(n,255);var r=Math.max(e,t,n),o=Math.min(e,t,n),a=0,i=r,l=r-o,c=0===r?0:l/r;if(r===o)a=0;else{switch(r){case e:a=(t-n)/l+(t<n?6:0);break;case t:a=(n-e)/l+2;break;case n:a=(e-t)/l+4}a/=6}return{h:a,s:c,v:i}}function ba(e,t,n,r){var o=[ma(Math.round(e).toString(16)),ma(Math.round(t).toString(16)),ma(Math.round(n).toString(16))];return r&&o[0].startsWith(o[0].charAt(1))&&o[1].startsWith(o[1].charAt(1))&&o[2].startsWith(o[2].charAt(1))?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0):o.join("")}function wa(e){return xa(e)/255}function xa(e){return parseInt(e,16)}var Ea={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function Aa(e){var t,n,r,o={r:0,g:0,b:0},a=1,i=null,l=null,c=null,u=!1,s=!1;return"string"==typeof e&&(e=function(e){if(0===(e=e.trim().toLowerCase()).length)return!1;var t=!1;if(Ea[e])e=Ea[e],t=!0;else if("transparent"===e)return{r:0,g:0,b:0,a:0,format:"name"};var n=La.rgb.exec(e);return n?{r:n[1],g:n[2],b:n[3]}:(n=La.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=La.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=La.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=La.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=La.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=La.hex8.exec(e))?{r:xa(n[1]),g:xa(n[2]),b:xa(n[3]),a:wa(n[4]),format:t?"name":"hex8"}:(n=La.hex6.exec(e))?{r:xa(n[1]),g:xa(n[2]),b:xa(n[3]),format:t?"name":"hex"}:(n=La.hex4.exec(e))?{r:xa(n[1]+n[1]),g:xa(n[2]+n[2]),b:xa(n[3]+n[3]),a:wa(n[4]+n[4]),format:t?"name":"hex8"}:!!(n=La.hex3.exec(e))&&{r:xa(n[1]+n[1]),g:xa(n[2]+n[2]),b:xa(n[3]+n[3]),format:t?"name":"hex"}}(e)),"object"==typeof e&&(ja(e.r)&&ja(e.g)&&ja(e.b)?(t=e.r,n=e.g,r=e.b,o={r:255*fa(t,255),g:255*fa(n,255),b:255*fa(r,255)},u=!0,s="%"===String(e.r).substr(-1)?"prgb":"rgb"):ja(e.h)&&ja(e.s)&&ja(e.v)?(i=ha(e.s),l=ha(e.v),o=function(e,t,n){e=6*fa(e,360),t=fa(t,100),n=fa(n,100);var r=Math.floor(e),o=e-r,a=n*(1-t),i=n*(1-o*t),l=n*(1-(1-o)*t),c=r%6;return{r:255*[n,i,a,a,l,n][c],g:255*[l,n,n,i,a,a][c],b:255*[a,a,l,n,n,i][c]}}(e.h,i,l),u=!0,s="hsv"):ja(e.h)&&ja(e.s)&&ja(e.l)&&(i=ha(e.s),c=ha(e.l),o=function(e,t,n){var r,o,a;if(e=fa(e,360),t=fa(t,100),n=fa(n,100),0===t)o=n,a=n,r=n;else{var i=n<.5?n*(1+t):n+t-n*t,l=2*n-i;r=va(l,i,e+1/3),o=va(l,i,e),a=va(l,i,e-1/3)}return{r:255*r,g:255*o,b:255*a}}(e.h,i,c),u=!0,s="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(a=e.a)),a=pa(a),{ok:u,format:e.format||s,r:Math.min(255,Math.max(o.r,0)),g:Math.min(255,Math.max(o.g,0)),b:Math.min(255,Math.max(o.b,0)),a}}var Sa="(?:".concat("[-\\+]?\\d*\\.\\d+%?",")|(?:").concat("[-\\+]?\\d+%?",")"),Ca="[\\s|\\(]+(".concat(Sa,")[,|\\s]+(").concat(Sa,")[,|\\s]+(").concat(Sa,")\\s*\\)?"),ka="[\\s|\\(]+(".concat(Sa,")[,|\\s]+(").concat(Sa,")[,|\\s]+(").concat(Sa,")[,|\\s]+(").concat(Sa,")\\s*\\)?"),La={CSS_UNIT:new RegExp(Sa),rgb:new RegExp("rgb"+Ca),rgba:new RegExp("rgba"+ka),hsl:new RegExp("hsl"+Ca),hsla:new RegExp("hsla"+ka),hsv:new RegExp("hsv"+Ca),hsva:new RegExp("hsva"+ka),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function ja(e){return Boolean(La.CSS_UNIT.exec(String(e)))}var Oa=2,Na=.16,_a=.05,Ba=.05,Ta=.15,Pa=5,Ia=4,za=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function Ma(e){var t=ga(e.r,e.g,e.b);return{h:360*t.h,s:t.s,v:t.v}}function Ra(e){var t=e.r,n=e.g,r=e.b;return"#".concat(ba(t,n,r,!1))}function Fa(e,t,n){var r;return(r=Math.round(e.h)>=60&&Math.round(e.h)<=240?n?Math.round(e.h)-Oa*t:Math.round(e.h)+Oa*t:n?Math.round(e.h)+Oa*t:Math.round(e.h)-Oa*t)<0?r+=360:r>=360&&(r-=360),r}function Ga(e,t,n){return 0===e.h&&0===e.s?e.s:((r=n?e.s-Na*t:t===Ia?e.s+Na:e.s+_a*t)>1&&(r=1),n&&t===Pa&&r>.1&&(r=.1),r<.06&&(r=.06),Number(r.toFixed(2)));var r}function Da(e,t,n){var r;return(r=n?e.v+Ba*t:e.v-Ta*t)>1&&(r=1),Number(r.toFixed(2))}function Za(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[],r=Aa(e),o=Pa;o>0;o-=1){var a=Ma(r),i=Ra(Aa({h:Fa(a,o,!0),s:Ga(a,o,!0),v:Da(a,o,!0)}));n.push(i)}n.push(Ra(r));for(var l=1;l<=Ia;l+=1){var c=Ma(r),u=Ra(Aa({h:Fa(c,l),s:Ga(c,l),v:Da(c,l)}));n.push(u)}return"dark"===t.theme?za.map((function(e){var r,o,a,i=e.index,l=e.opacity;return Ra((r=Aa(t.backgroundColor||"#141414"),a=100*l/100,{r:((o=Aa(n[i])).r-r.r)*a+r.r,g:(o.g-r.g)*a+r.g,b:(o.b-r.b)*a+r.b}))})):n}var $a={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1677FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},Ua={},Ha={};Object.keys($a).forEach((function(e){Ua[e]=Za($a[e]),Ua[e].primary=Ua[e][5],Ha[e]=Za($a[e],{theme:"dark",backgroundColor:"#141414"}),Ha[e].primary=Ha[e][5]})),Ua.red,Ua.volcano,Ua.gold,Ua.orange,Ua.yellow,Ua.lime,Ua.green,Ua.cyan;var Wa=Ua.blue;Ua.geekblue,Ua.purple,Ua.magenta,Ua.grey,Ua.grey;const Ya=(0,t.createContext)({});function qa(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Va(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qa(Object(n),!0).forEach((function(t){la(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qa(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ka(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}var Xa="data-rc-order",Qa="data-rc-priority",Ja="rc-util-key",ei=new Map;function ti(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).mark;return e?e.startsWith("data-")?e:"data-".concat(e):Ja}function ni(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function ri(e){return Array.from((ei.get(e)||e).children).filter((function(e){return"STYLE"===e.tagName}))}function oi(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!Ka())return null;var n=t.csp,r=t.prepend,o=t.priority,a=void 0===o?0:o,i=function(e){return"queue"===e?"prependQueue":e?"prepend":"append"}(r),l="prependQueue"===i,c=document.createElement("style");c.setAttribute(Xa,i),l&&a&&c.setAttribute(Qa,"".concat(a)),null!=n&&n.nonce&&(c.nonce=null==n?void 0:n.nonce),c.innerHTML=e;var u=ni(t),s=u.firstChild;if(r){if(l){var f=ri(u).filter((function(e){if(!["prepend","prependQueue"].includes(e.getAttribute(Xa)))return!1;var t=Number(e.getAttribute(Qa)||0);return a>=t}));if(f.length)return u.insertBefore(c,f[f.length-1].nextSibling),c}u.insertBefore(c,s)}else u.appendChild(c);return c}function ai(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return ri(ni(t)).find((function(n){return n.getAttribute(ti(t))===e}))}function ii(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=ai(e,t);n&&ni(t).removeChild(n)}function li(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){var n=ei.get(e);if(!n||!function(e,t){if(!e)return!1;if(e.contains)return e.contains(t);for(var n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}(document,n)){var r=oi("",t),o=r.parentNode;ei.set(e,o),e.removeChild(r)}}(ni(n),n);var r,o,a,i=ai(t,n);if(i)return null!==(r=n.csp)&&void 0!==r&&r.nonce&&i.nonce!==(null===(o=n.csp)||void 0===o?void 0:o.nonce)&&(i.nonce=null===(a=n.csp)||void 0===a?void 0:a.nonce),i.innerHTML!==e&&(i.innerHTML=e),i;var l=oi(e,n);return l.setAttribute(ti(n),t),l}function ci(e){var t;return null==e||null===(t=e.getRootNode)||void 0===t?void 0:t.call(e)}var ui={},si=[];function fi(e,t){}function di(e,t){}function pi(e,t,n){t||ui[n]||(e(!1,n),ui[n]=!0)}function hi(e,t){pi(fi,e,t)}hi.preMessage=function(e){si.push(e)},hi.resetWarned=function(){ui={}},hi.noteOnce=function(e,t){pi(di,e,t)};const mi=hi;function yi(e){return"object"===aa(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===aa(e.icon)||"function"==typeof e.icon)}function vi(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){var r,o=e[n];return"class"===n?(t.className=o,delete t.class):(delete t[n],t[(r=n,r.replace(/-(.)/g,(function(e,t){return t.toUpperCase()})))]=o),t}),{})}function gi(e,n,r){return r?t.createElement(e.tag,Va(Va({key:n},vi(e.attrs)),r),(e.children||[]).map((function(t,r){return gi(t,"".concat(n,"-").concat(e.tag,"-").concat(r))}))):t.createElement(e.tag,Va({key:n},vi(e.attrs)),(e.children||[]).map((function(t,r){return gi(t,"".concat(n,"-").concat(e.tag,"-").concat(r))})))}function bi(e){return Za(e)[0]}function wi(e){return e?Array.isArray(e)?e:[e]:[]}var xi=["icon","className","onClick","style","primaryColor","secondaryColor"],Ei={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1},Ai=function(e){var n,r,o,a,i,l,c,u=e.icon,s=e.className,f=e.onClick,d=e.style,p=e.primaryColor,h=e.secondaryColor,m=ca(e,xi),y=t.useRef(),v=Ei;if(p&&(v={primaryColor:p,secondaryColor:h||bi(p)}),n=y,r=(0,t.useContext)(Ya),o=r.csp,a=r.prefixCls,i="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",a&&(i=i.replace(/anticon/g,a)),(0,t.useEffect)((function(){var e,t=function(e){return ci(e)instanceof ShadowRoot}(e=n.current)?ci(e):null;li(i,"@ant-design-icons",{prepend:!0,csp:o,attachTo:t})}),[]),l=yi(u),c="icon should be icon definiton, but got ".concat(u),mi(l,"[@ant-design/icons] ".concat(c)),!yi(u))return null;var g=u;return g&&"function"==typeof g.icon&&(g=Va(Va({},g),{},{icon:g.icon(v.primaryColor,v.secondaryColor)})),gi(g.icon,"svg-".concat(g.name),Va(Va({className:s,onClick:f,style:d,"data-icon":g.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},m),{},{ref:y}))};Ai.displayName="IconReact",Ai.getTwoToneColors=function(){return Va({},Ei)},Ai.setTwoToneColors=function(e){var t=e.primaryColor,n=e.secondaryColor;Ei.primaryColor=t,Ei.secondaryColor=n||bi(t),Ei.calculated=!!n};const Si=Ai;function Ci(e){var t=oa(wi(e),2),n=t[0],r=t[1];return Si.setTwoToneColors({primaryColor:n,secondaryColor:r})}var ki=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];Ci(Wa.primary);var Li=t.forwardRef((function(e,n){var r,o=e.className,a=e.icon,i=e.spin,l=e.rotate,c=e.tabIndex,u=e.onClick,s=e.twoToneColor,f=ca(e,ki),d=t.useContext(Ya),p=d.prefixCls,h=void 0===p?"anticon":p,m=d.rootClassName,y=sa()(m,h,(la(r={},"".concat(h,"-").concat(a.name),!!a.name),la(r,"".concat(h,"-spin"),!!i||"loading"===a.name),r),o),v=c;void 0===v&&u&&(v=-1);var g=l?{msTransform:"rotate(".concat(l,"deg)"),transform:"rotate(".concat(l,"deg)")}:void 0,b=oa(wi(s),2),w=b[0],x=b[1];return t.createElement("span",(0,E.Z)({role:"img","aria-label":a.name},f,{ref:n,tabIndex:v,onClick:u,className:y}),t.createElement(Si,{icon:a,primaryColor:w,secondaryColor:x,style:g}))}));Li.displayName="AntdIcon",Li.getTwoToneColor=function(){var e=Si.getTwoToneColors();return e.calculated?[e.primaryColor,e.secondaryColor]:e.primaryColor},Li.setTwoToneColor=Ci;const ji=Li;var Oi=function(e,n){return t.createElement(ji,(0,E.Z)({},e,{ref:n,icon:ta}))};const Ni=t.forwardRef(Oi),_i=function(e){var n=(0,t.useContext)(ea),r=Tt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga poznatih",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(qo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Ni,null)))},Bi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm5.6-532.7c53 0 89 33.8 93 83.4.3 4.2 3.8 7.4 8 7.4h56.7c2.6 0 4.7-2.1 4.7-4.7 0-86.7-68.4-147.4-162.7-147.4C407.4 290 344 364.2 344 486.8v52.3C344 660.8 407.4 734 517.3 734c94 0 162.7-58.8 162.7-141.4 0-2.6-2.1-4.7-4.7-4.7h-56.8c-4.2 0-7.6 3.2-8 7.3-4.2 46.1-40.1 77.8-93 77.8-65.3 0-102.1-47.9-102.1-133.6v-52.6c.1-87 37-135.5 102.2-135.5z"}}]},name:"copyright",theme:"outlined"};var Ti=function(e,n){return t.createElement(ji,(0,E.Z)({},e,{ref:n,icon:Bi}))};const Pi=t.forwardRef(Ti),Ii=function(e){var n=(0,t.useContext)(ea),r=Tt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("logo pretraga",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(qo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Pi,null)))},zi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"defs",attrs:{},children:[{tag:"style",attrs:{}}]},{tag:"path",attrs:{d:"M140 188h584v164h76V144c0-17.7-14.3-32-32-32H96c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h544v-76H140V188z"}},{tag:"path",attrs:{d:"M414.3 256h-60.6c-3.4 0-6.4 2.2-7.6 5.4L219 629.4c-.3.8-.4 1.7-.4 2.6 0 4.4 3.6 8 8 8h55.1c3.4 0 6.4-2.2 7.6-5.4L322 540h196.2L422 261.4a8.42 8.42 0 00-7.7-5.4zm12.4 228h-85.5L384 360.2 426.7 484zM936 528H800v-93c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v93H592c-13.3 0-24 10.7-24 24v176c0 13.3 10.7 24 24 24h136v152c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V752h136c13.3 0 24-10.7 24-24V552c0-13.3-10.7-24-24-24zM728 680h-88v-80h88v80zm160 0h-88v-80h88v80z"}}]},name:"translation",theme:"outlined"};var Mi=function(e,n){return t.createElement(ji,(0,E.Z)({},e,{ref:n,icon:zi}))};const Ri=t.forwardRef(Mi),Fi=function(e){var n=(0,t.useContext)(ea),r=Tt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("dictionary pretraga",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(qo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Ri,null)))},Gi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M536.1 273H488c-4.4 0-8 3.6-8 8v275.3c0 2.6 1.2 5 3.3 6.5l165.3 120.7c3.6 2.6 8.6 1.9 11.2-1.7l28.6-39c2.7-3.7 1.9-8.7-1.7-11.2L544.1 528.5V281c0-4.4-3.6-8-8-8zm219.8 75.2l156.8 38.3c5 1.2 9.9-2.6 9.9-7.7l.8-161.5c0-6.7-7.7-10.5-12.9-6.3L752.9 334.1a8 8 0 003 14.1zm167.7 301.1l-56.7-19.5a8 8 0 00-10.1 4.8c-1.9 5.1-3.9 10.1-6 15.1-17.8 42.1-43.3 80-75.9 112.5a353 353 0 01-112.5 75.9 352.18 352.18 0 01-137.7 27.8c-47.8 0-94.1-9.3-137.7-27.8a353 353 0 01-112.5-75.9c-32.5-32.5-58-70.4-75.9-112.5A353.44 353.44 0 01171 512c0-47.8 9.3-94.2 27.8-137.8 17.8-42.1 43.3-80 75.9-112.5a353 353 0 01112.5-75.9C430.6 167.3 477 158 524.8 158s94.1 9.3 137.7 27.8A353 353 0 01775 261.7c10.2 10.3 19.8 21 28.6 32.3l59.8-46.8C784.7 146.6 662.2 81.9 524.6 82 285 82.1 92.6 276.7 95 516.4 97.4 751.9 288.9 942 524.8 942c185.5 0 343.5-117.6 403.7-282.3 1.5-4.2-.7-8.9-4.9-10.4z"}}]},name:"history",theme:"outlined"};var Di=function(e,n){return t.createElement(ji,(0,E.Z)({},e,{ref:n,icon:Gi}))};const Zi=t.forwardRef(Di),$i=function(e){var n=(0,t.useContext)(ea),r=Tt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("SearchHistory pretraga",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(qo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Zi,null)))},Ui={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M928 161H699.2c-49.1 0-97.1 14.1-138.4 40.7L512 233l-48.8-31.3A255.2 255.2 0 00324.8 161H96c-17.7 0-32 14.3-32 32v568c0 17.7 14.3 32 32 32h228.8c49.1 0 97.1 14.1 138.4 40.7l44.4 28.6c1.3.8 2.8 1.3 4.3 1.3s3-.4 4.3-1.3l44.4-28.6C602 807.1 650.1 793 699.2 793H928c17.7 0 32-14.3 32-32V193c0-17.7-14.3-32-32-32zM324.8 721H136V233h188.8c35.4 0 69.8 10.1 99.5 29.2l48.8 31.3 6.9 4.5v462c-47.6-25.6-100.8-39-155.2-39zm563.2 0H699.2c-54.4 0-107.6 13.4-155.2 39V298l6.9-4.5 48.8-31.3c29.7-19.1 64.1-29.2 99.5-29.2H888v488zM396.9 361H211.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5zm223.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c0-4.1-3.2-7.5-7.1-7.5H627.1c-3.9 0-7.1 3.4-7.1 7.5zM396.9 501H211.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5zm416 0H627.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5z"}}]},name:"read",theme:"outlined"};var Hi=function(e,n){return t.createElement(ji,(0,E.Z)({},e,{ref:n,icon:Ui}))};const Wi=t.forwardRef(Hi),Yi=function(e){var n=(0,t.useContext)(ea),r=Tt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("SearchHistoryEvents pretraga",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(qo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Wi,null)))},qi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M858.5 763.6a374 374 0 00-80.6-119.5 375.63 375.63 0 00-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 00-80.6 119.5A371.7 371.7 0 00136 901.8a8 8 0 008 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 008-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z"}}]},name:"user",theme:"outlined"};var Vi=function(e,n){return t.createElement(ji,(0,E.Z)({},e,{ref:n,icon:qi}))};const Ki=t.forwardRef(Vi),Xi=function(e){var n=(0,t.useContext)(ea),r=Tt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga istoriskih licnosti",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(qo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Ki,null)))},Qi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z"}}]},name:"question-circle",theme:"outlined"};var Ji=function(e,n){return t.createElement(ji,(0,E.Z)({},e,{ref:n,icon:Qi}))};const el=t.forwardRef(Ji),tl=function(e){var n=(0,t.useContext)(ea),r=Tt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga saveta",o)};return t.createElement(Eo,{className:"paper",component:"form",se:{p:"2px 4px",display:"flex",alignItems:"center",width:"40rem",fontSize:"28px",backgroundColor:"red"}},t.createElement(qo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,sx:{p:"10px"},"aria-label":"search"},t.createElement(el,null)))},nl={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2zM304 456a88 88 0 100-176 88 88 0 000 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z"}}]},name:"picture",theme:"outlined"};var rl=function(e,n){return t.createElement(ji,(0,E.Z)({},e,{ref:n,icon:nl}))};const ol=t.forwardRef(rl),al=function(e){var n=(0,t.useContext)(ea),r=Tt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga metropolitan",o)};return t.createElement(Eo,{className:"paper",component:"form",se:{p:"2px 4px",display:"flex",alignItems:"center",width:"40rem",fontSize:"28px",backgroundColor:"red"}},t.createElement(qo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,sx:{p:"10px"},"aria-label":"search"},t.createElement(ol,null)))},il={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M766.4 744.3c43.7 0 79.4-36.2 79.4-80.5 0-53.5-79.4-140.8-79.4-140.8S687 610.3 687 663.8c0 44.3 35.7 80.5 79.4 80.5zm-377.1-44.1c7.1 7.1 18.6 7.1 25.6 0l256.1-256c7.1-7.1 7.1-18.6 0-25.6l-256-256c-.6-.6-1.3-1.2-2-1.7l-78.2-78.2a9.11 9.11 0 00-12.8 0l-48 48a9.11 9.11 0 000 12.8l67.2 67.2-207.8 207.9c-7.1 7.1-7.1 18.6 0 25.6l255.9 256zm12.9-448.6l178.9 178.9H223.4l178.8-178.9zM904 816H120c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8z"}}]},name:"bg-colors",theme:"outlined"};var ll=function(e,n){return t.createElement(ji,(0,E.Z)({},e,{ref:n,icon:il}))};const cl=t.forwardRef(ll),ul=function(e){var n=(0,t.useContext)(ea),r=Tt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga boja",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(qo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(cl,null)))},sl=function(){return t.createElement("div",{className:"place"},t.createElement("div",{className:"search"},t.createElement(_i,{placeholder:"Celebrity",linkTo:"/poznati"}),t.createElement(Ii,{placeholder:"Logo",linkTo:"/logo"}),t.createElement(ul,{placeholder:"Colors",linkTo:"/colorsSearch"}),t.createElement(Fi,{placeholder:"Word",linkTo:"/dictionary"}),t.createElement(tl,{placeholder:"Advice",linkTo:"/advice"}),t.createElement(al,{placeholder:"Metropolitan",linkTo:"/metropolitan"})),t.createElement("div",{className:"search"},t.createElement("h3",null,"Search History"),t.createElement($i,{placeholder:"Year",linkTo:"/history"}),t.createElement(Yi,{placeholder:"Events",linkTo:"/historyEvents"}),t.createElement(Xi,{placeholder:"Persons",linkTo:"/historyPerson"})))};var fl=o(813);function dl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function pl(){var e,n,r=(e=(0,t.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return dl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dl(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];return(0,t.useEffect)((function(){var e=function(){window.pageYOffset>300?a(!0):a(!1)};return window.addEventListener("scroll",e),function(){window.removeEventListener("scroll",e)}}),[]),t.createElement("div",null,o&&t.createElement("span",null,t.createElement("div",{onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},className:"back-to-top"},t.createElement("div",{className:"arrowup"},t.createElement(fl.Z,null)))))}function hl(e){return hl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hl(e)}function ml(){ml=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==hl(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(hl(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function yl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function vl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return gl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const bl=function(){var e=vl((0,t.useState)(null),2),n=(e[0],e[1]),r=vl((0,t.useState)([]),2),o=r[0],a=r[1],i=vl((0,t.useState)([]),2),l=i[0],c=i[1],u=vl((0,t.useState)([]),2),s=u[0],f=u[1],d=vl((0,t.useState)([]),2),p=d[0],h=d[1],m=vl((0,t.useState)(!0),2),y=m[0],v=m[1],g=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){b(g)}),[g]),console.log("iz resultLogo searchStringValue:",g);var b=function(){var e,t=(e=ml().mark((function e(t){var r,o,i,l,u,s;return ml().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/logo?name=".concat(t),o="https://autocomplete.clearbit.com/v1/companies/suggest?query=".concat(t),e.prev=2,e.next=5,Vr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return i=e.sent,e.next=8,Vr.get(o);case 8:l=e.sent,u=i.data,s=l.data,console.log("rezultat Logoa",u),console.log("drugi logo podaci",s),a(u),c(s),f(u.length),h(s.length),v(!1),e.next=23;break;case 20:e.prev=20,e.t0=e.catch(2),n(e.t0);case 23:case"end":return e.stop()}}),e,null,[[2,20]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){yl(a,r,o,i,l,"next",e)}function l(e){yl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return y?t.createElement(co,null):0==s&&0==p?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Ii,{placeholder:"Logo",linkTo:"/logo"}))),t.createElement("tr",null,t.createElement("th",{className:"history",colSpan:2},"Logo ",g)),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of Logo:",s+p))),o.map((function(e){return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.ticker)),t.createElement("tr",null,t.createElement("td",null,t.createElement("img",{className:"logoImg",src:e.image}))),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))})),l.map((function(e){return t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.domain,"   ")),t.createElement("tr",null,t.createElement("td",{className:"celebrity"},t.createElement("img",{src:e.logo,className:"logoImg",alt:"no picture"}))),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(pl,null))},wl=function(e){return t.createElement(t.Fragment,null,t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.dictRow.word)),t.createElement("tr",null,t.createElement("td",{className:"dictionary"},e.dictRow.definition)))},xl=function(e){return t.createElement(t.Fragment,null,t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.dictRow2.word+" "+e.dictRow2.phonetic)),e.dictRow2.phonetics.map((function(e){return t.createElement("tr",null,t.createElement("td",null,t.createElement("a",{href:e.audio,target:"_blank",className:"phonetics"},e.audio)))})),e.dictRow2.meanings.map((function(e){var n,r,o,a,i,l,c;return t.createElement(t.Fragment,null,e.definitions.map((function(e){return t.createElement("tr",null,t.createElement("td",null,e.definition,"         "))})),t.createElement("tr",null,t.createElement("td",{className:"nameComm"}," synonyms",t.createElement("ul",null,t.createElement("li",null,null===(n=e.synonyms)||void 0===n?void 0:n[0]),t.createElement("li",null,null===(r=e.synonyms)||void 0===r?void 0:r[1]),t.createElement("li",null,null===(o=e.synonyms)||void 0===o?void 0:o[2]),t.createElement("li",null,null===(a=e.synonyms)||void 0===a?void 0:a[3]),t.createElement("li",null,null===(i=e.synonyms)||void 0===i?void 0:i[5]),t.createElement("li",null,null===(l=e.synonyms)||void 0===l?void 0:l[6]),t.createElement("li",null,null===(c=e.synonyms)||void 0===c?void 0:c[7])))),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))})))};function El(e){return El="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},El(e)}function Al(){Al=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==El(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(El(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Sl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Cl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return kl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?kl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ll=function(){var e=Cl((0,t.useState)(null),2),n=(e[0],e[1]),r=Cl((0,t.useState)([]),2),o=r[0],a=r[1],i=Cl((0,t.useState)([]),2),l=i[0],c=i[1],u=Cl((0,t.useState)([]),2),s=u[0],f=u[1],d=Cl((0,t.useState)([]),2),p=d[0],h=d[1],m=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){y(m)}),[m]),console.log("iz resultDictionary searchStringValue:",m);var y=function(){var e,t=(e=Al().mark((function e(t){var r,o,i,l,u,d;return Al().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/dictionary?word=".concat(t),o="https://api.dictionaryapi.dev/api/v2/entries/en/".concat(t),e.prev=2,e.next=5,Vr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return i=e.sent,e.next=8,Vr.get(o);case 8:l=e.sent,u=i.data,d=l.data,console.log("rezultat recnika",u),console.log("rezultat drugo recnika",d),a(u),c(d),f(u.length),h(d.length),console.log("prvi niz",s),console.log("drugi niz",p),e.next=24;break;case 21:e.prev=21,e.t0=e.catch(2),n(e.t0);case 24:case"end":return e.stop()}}),e,null,[[2,21]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Sl(a,r,o,i,l,"next",e)}function l(e){Sl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return 0==s&&0==p?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Fi,{placeholder:"Word",linkTo:"/dictionary"}))),t.createElement("tr",null,t.createElement("th",{className:"results"},"Word ",m))),t.createElement("tbody",null,t.createElement(wl,{dictRow:o}),l.map((function(e){return t.createElement(xl,{dictRow2:e})})))),t.createElement(pl,null))};function jl(e){return jl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jl(e)}function Ol(){Ol=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==jl(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(jl(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Nl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function _l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Bl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Bl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Tl=function(){var e=_l((0,t.useState)(null),2),n=(e[0],e[1]),r=_l((0,t.useState)([]),2),o=r[0],a=r[1],i=_l((0,t.useState)([]),2),l=i[0],c=i[1],u=_l((0,t.useState)(!0),2),s=u[0],f=u[1],d=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){p(d)}),[d]),console.log("iz resultCelebs searchStringValue:",d);var p=function(){var e,t=(e=Ol().mark((function e(t){var r,o,i;return Ol().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/celebrity?name=".concat(t),e.prev=1,e.next=4,Vr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat poznatih",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Nl(a,r,o,i,l,"next",e)}function l(e){Nl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(co,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(_i,{placeholder:"Celebrity",linkTo:"/poznati"}))),t.createElement("tr",null,t.createElement("th",{className:"history",colSpan:2},"Celebrity ",d)),t.createElement("tr",null,t.createElement("th",{className:"results",colSpan:2},"Number of Celebrity: ",l))),o.map((function(e){var n,r,o,a,i,l,c,u,s,f,d,p,h;return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"navod"},"Name:"),t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Gender:"),t.createElement("td",{className:"nameComm"},e.gender)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Age:"),t.createElement("td",{className:"nameComm"},e.age)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Occupation:"),t.createElement("td",{className:"nameComm"},t.createElement("ul",null,t.createElement("li",null,null===(n=e.occupation)||void 0===n?void 0:n[0]),t.createElement("li",null,null===(r=e.occupation)||void 0===r?void 0:r[1]),t.createElement("li",null,null===(o=e.occupation)||void 0===o?void 0:o[2]),t.createElement("li",null,null===(a=e.occupation)||void 0===a?void 0:a[3]),t.createElement("li",null,null===(i=e.occupation)||void 0===i?void 0:i[4]),t.createElement("li",null,null===(l=e.occupation)||void 0===l?void 0:l[5]),t.createElement("li",null,null===(c=e.occupation)||void 0===c?void 0:c[6]),t.createElement("li",null,null===(u=e.occupation)||void 0===u?void 0:u[7]),t.createElement("li",null,null===(s=e.occupation)||void 0===s?void 0:s[8]),t.createElement("li",null,null===(f=e.occupation)||void 0===f?void 0:f[9]),t.createElement("li",null,null===(d=e.occupation)||void 0===d?void 0:d[10]),t.createElement("li",null,null===(p=e.occupation)||void 0===p?void 0:p[11]),t.createElement("li",null,null===(h=e.occupation)||void 0===h?void 0:h[12])))),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Birthday:"),t.createElement("td",{className:"nameComm"},e.birthday)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Death:"),t.createElement("td",{className:"nameComm"},e.death)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Nationality:"),t.createElement("td",{className:"celebrity"},e.nationality)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Height:"),t.createElement("td",{className:"nameComm"},e.height)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Net worth:"),t.createElement("td",{className:"networth"},e.net_worth)),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))))}))),t.createElement(pl,null))};function Pl(e){return Pl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Pl(e)}function Il(){Il=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Pl(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Pl(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function zl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Ml(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Rl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Fl=function(){var e=Ml((0,t.useState)(null),2),n=(e[0],e[1]),r=Ml((0,t.useState)([]),2),o=r[0],a=r[1],i=Ml((0,t.useState)([]),2),l=i[0],c=i[1],u=Ml((0,t.useState)(!0),2),s=u[0],f=u[1],d=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){p(d)}),[d]),console.log("iz resulthistory searchStringValue:",d);var p=function(){var e,t=(e=Il().mark((function e(t){var r,o,i;return Il().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/historicalevents?year=".concat(t),e.prev=1,e.next=4,Vr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat recnika",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){zl(a,r,o,i,l,"next",e)}function l(e){zl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(co,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement($i,{placeholder:"Year",linkTo:"/history"}))),t.createElement("tr",null,t.createElement("th",{className:"history"},"Historical Year ",d)),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of History Events: ",l))),o.map((function(e){return t.createElement("tbody",{key:o.word},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.day+" "+e.month+" "+e.year)),t.createElement("tr",null,t.createElement("td",{className:"dictionary"},e.event)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(pl,null))};function Gl(e){return Gl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gl(e)}function Dl(){Dl=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Gl(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Gl(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Zl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function $l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ul(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ul(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ul(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Hl=function(){var e=$l((0,t.useState)(null),2),n=(e[0],e[1]),r=$l((0,t.useState)([]),2),o=r[0],a=r[1],i=$l((0,t.useState)([]),2),l=i[0],c=i[1],u=$l((0,t.useState)(!0),2),s=u[0],f=u[1],d=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){p(d)}),[d]),console.log("iz resulthistoryEvents searchStringValue:",d);var p=function(){var e,t=(e=Dl().mark((function e(t){var r,o,i;return Dl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/historicalevents?text=".concat(t),e.prev=1,e.next=4,Vr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat recnika",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Zl(a,r,o,i,l,"next",e)}function l(e){Zl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(co,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement(Yi,{placeholder:"Events",linkTo:"/historyEvents"}))),t.createElement("tr",null,t.createElement("th",{className:"history"},"Historical Event ",d)),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of Event:",l))),o.map((function(e){return t.createElement("tbody",{key:o.word},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.day+" "+e.month+" "+e.year)),t.createElement("tr",null,t.createElement("td",{className:"dictionary"},e.event)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(pl,null))};function Wl(e){return Wl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wl(e)}function Yl(){Yl=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Wl(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Wl(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ql(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Vl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Xl=function(){var e=Vl((0,t.useState)(null),2),n=(e[0],e[1]),r=Vl((0,t.useState)([]),2),o=r[0],a=r[1],i=Vl((0,t.useState)([]),2),l=i[0],c=i[1],u=Vl((0,t.useState)(!0),2),s=u[0],f=u[1],d=Tt(),p=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){h(p)}),[p]),console.log("iz resultPerson searchStringValue:",p);var h=function(){var e,t=(e=Yl().mark((function e(t){var r,o,i;return Yl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/historicalfigures?name=".concat(t),e.prev=1,e.next=4,Vr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat poznatih",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ql(a,r,o,i,l,"next",e)}function l(e){ql(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),m=function(e){var t="/historyPerson/".concat(e);d(t)};return s?t.createElement(co,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Xi,{placeholder:"Persons",linkTo:"/historyPerson"}))),t.createElement("tr",null,t.createElement("th",{className:"history",colSpan:2},"Persons ",p)),t.createElement("tr",{className:"results"},t.createElement("th",{colSpan:2},"Number of Historyc persons: ",l))),o.map((function(e){return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"navod"},"Name:"),t.createElement("td",{className:"historyPerson",onClick:function(){return m(e.name)}},e.name)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Title:"),t.createElement("td",{className:"nameComm"},e.title)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Birthday:"),t.createElement("td",{className:"nameComm"},e.info.born)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Death:"),t.createElement("td",{className:"nameComm"},e.info.died)),t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"more",onClick:function(){return m(e.name)}},"more...")),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))))}))),t.createElement(pl,null))};function Ql(e){return Ql="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ql(e)}function Jl(){Jl=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Ql(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ql(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ec(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function tc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return nc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const rc=function(e){var n=tc((0,t.useState)(null),2),r=(n[0],n[1]),o=tc((0,t.useState)([]),2),a=o[0],i=o[1],l=tc((0,t.useState)(!0),2),c=l[0],u=l[1],s=tc((0,t.useState)([]),2),f=s[0],d=s[1],p=Pt().personName;(0,t.useEffect)((function(){h()}),[]),console.log("iz detailsPerson params:",p);var h=function(){var e,t=(e=Jl().mark((function e(){var t,n,o,a,l,c;return Jl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/historicalfigures?name=".concat(p),n="https://api.api-ninjas.com/v1/celebrity?name=".concat(p),e.prev=2,e.next=5,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return o=e.sent,e.next=8,Vr.get(n,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:a=e.sent,l=o.data,c=a.data,console.log("detalji istorijske persone",l),i(l),d(c),u(!1),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),r(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ec(a,r,o,i,l,"next",e)}function l(e){ec(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return c?t.createElement(co,null):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Xi,{placeholder:"Persons",linkTo:"/historyPerson"})))),a.map((function(e){var n,r,o,a,i,l,c,u,s,f,d,p,h,m,y,v,g,b,w,x,E,A,S,C,k;return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"navod"},"Name:"),t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.native_name)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.nicknames)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.birth_name)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.other_names)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Title:"),t.createElement("td",{className:"nameComm"},e.title)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.other_posts)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Predecessor:"),t.createElement("td",{className:"nameComm"},e.info.predecessor||e.info.preceded_by)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Successor:"),t.createElement("td",{className:"nameComm"},e.info.successor||e.info.succeeded_by)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Fields:"),t.createElement("td",{className:"nameComm"},e.info.fields)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.movement)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Genres:"),t.createElement("td",{className:"nameComm"},t.createElement("ul",null,t.createElement("li",null,(null===(n=e.info.genres)||void 0===n?void 0:n[0])||(null===(r=e.info.genre)||void 0===r?void 0:r[0])),t.createElement("li",null,(null===(o=e.info.genres)||void 0===o?void 0:o[1])||(null===(a=e.info.genre)||void 0===a?void 0:a[1])),t.createElement("li",null,(null===(i=e.info.genres)||void 0===i?void 0:i[2])||(null===(l=e.info.genre)||void 0===l?void 0:l[2])),t.createElement("li",null,(null===(c=e.info.genres)||void 0===c?void 0:c[3])||(null===(u=e.info.genre)||void 0===u?void 0:u[3])),t.createElement("li",null,(null===(s=e.info.genres)||void 0===s?void 0:s[4])||(null===(f=e.info.genre)||void 0===f?void 0:f[4])),t.createElement("li",null,(null===(d=e.info.genres)||void 0===d?void 0:d[5])||(null===(p=e.info.genre)||void 0===p?void 0:p[5])),t.createElement("li",null,(null===(h=e.info.genres)||void 0===h?void 0:h[6])||(null===(m=e.info.genre)||void 0===m?void 0:m[6])),t.createElement("li",null,(null===(y=e.info.genres)||void 0===y?void 0:y[7])||(null===(v=e.info.genre)||void 0===v?void 0:v[7])),t.createElement("li",null,(null===(g=e.info.genres)||void 0===g?void 0:g[8])||(null===(b=e.info.genre)||void 0===b?void 0:b[8]))))),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.discipline)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.attributes)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Profession:"),t.createElement("td",{className:"nameComm"},e.info.profession)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Occupation:"),t.createElement("td",{className:"nameComm"},t.createElement("ul",null,t.createElement("li",null,null===(w=e.info.occupation)||void 0===w?void 0:w[0]),t.createElement("li",null,null===(x=e.info.occupation)||void 0===x?void 0:x[1]),t.createElement("li",null,null===(E=e.info.occupation)||void 0===E?void 0:E[2]),t.createElement("li",null,null===(A=e.info.occupation)||void 0===A?void 0:A[3]),t.createElement("li",null,null===(S=e.info.occupation)||void 0===S?void 0:S[4]),t.createElement("li",null,null===(C=e.info.occupation)||void 0===C?void 0:C[5])))),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Known for:"),t.createElement("td",{className:"nameComm"},e.info.known_for)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.notable_work)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Associated Acts:"),t.createElement("td",{className:"nameComm"},e.info.associated_acts)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Nationality:"),t.createElement("td",{className:"nameComm"},e.info.nationality||e.info.allegiance)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Residence:"),t.createElement("td",{className:"nameComm"},e.info.citizenship||e.info.residence||e.info.residences)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Birthday:"),t.createElement("td",{className:"nameComm"},e.info.born)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Death:"),t.createElement("td",{className:"nameComm"},e.info.died)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Buried:"),t.createElement("td",{className:"nameComm"},e.info.resting_place||e.info.burial||e.info.buried)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.cause_of_death)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Height:"),t.createElement("td",{className:"nameComm"},e.info.height)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Weight:"),t.createElement("td",{className:"nameComm"}," ",e.info.weight)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Awards:"),t.createElement("td",{className:"nameComm"},e.info.awards||e.info.notable_awards)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.office)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.notable_works)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Convictions:"),t.createElement("td",{className:"nameCom"},e.info.convictions)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Political Party:"),t.createElement("td",{className:"nameComm"},e.info.political_party)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},null===(k=e.info)||void 0===k?void 0:k.other_politicalaffiliations)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Organization"),t.createElement("td",{className:"nameComm"},e.info.organization)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Religion:"),t.createElement("td",{className:"nameComm"},e.info.religion||e.info.stance)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.church)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Education:"),t.createElement("td",{className:"nameComm"},e.info.education||e.info.alma_mater||e.info.university)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Rank:"),t.createElement("td",{className:"nameComm"},e.info.rank)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Years of Service:"),t.createElement("td",{className:"nameComm"},e.info.years_of_service)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Branch:"),t.createElement("td",{className:"nameComm"},e.info.branch)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Wars:"),t.createElement("td",{className:"nameComm"},e.info.wars)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.conflicts)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.battles)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Spouse:"),t.createElement("td",{className:"nameComm"},e.info.spouse||e.info.spouses)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Parents:"),t.createElement("td",{className:"nameComm"},e.info.parents)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.father)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.mother)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Children:"),t.createElement("td",{className:"nameComm"},e.info.children)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Relatives:"),t.createElement("td",{className:"nameComm"},e.info.relatives||e.info.notable_relatives||e.info.family)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.issue)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Years Active:"),t.createElement("td",{className:"nameComm"},e.info.years_active||e.info.active_years||e.info.reign)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Website:"),t.createElement("td",{className:"nameComm"},t.createElement("a",{href:e.info.website},e.info.website))),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))))}))),t.createElement("table",{className:"tabelaZemlje"},f.map((function(e){var n,r,o,a,i,l,c,u,s,f,d,p,h;return t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{className:"navod"},"Height:"),t.createElement("td",{className:"nameComm"},e.height)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Occupation:"),t.createElement("td",{className:"nameComm"},t.createElement("ul",null,t.createElement("li",null,null===(n=e.occupation)||void 0===n?void 0:n[0]),t.createElement("li",null,null===(r=e.occupation)||void 0===r?void 0:r[1]),t.createElement("li",null,null===(o=e.occupation)||void 0===o?void 0:o[2]),t.createElement("li",null,null===(a=e.occupation)||void 0===a?void 0:a[3]),t.createElement("li",null,null===(i=e.occupation)||void 0===i?void 0:i[4]),t.createElement("li",null,null===(l=e.occupation)||void 0===l?void 0:l[5]),t.createElement("li",null,null===(c=e.occupation)||void 0===c?void 0:c[6]),t.createElement("li",null,null===(u=e.occupation)||void 0===u?void 0:u[7]),t.createElement("li",null,null===(s=e.occupation)||void 0===s?void 0:s[8]),t.createElement("li",null,null===(f=e.occupation)||void 0===f?void 0:f[9]),t.createElement("li",null,null===(d=e.occupation)||void 0===d?void 0:d[10]),t.createElement("li",null,null===(p=e.occupation)||void 0===p?void 0:p[11]),t.createElement("li",null,null===(h=e.occupation)||void 0===h?void 0:h[12])))),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Net worth:"),t.createElement("td",{className:"networth"},e.net_worth)))}))))},oc=function(){var e=Tt(),n=function(){e("/language")};return t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("div",{onClick:function(){return console.log("klik na ridles"),void e("/ridles")},className:"category"},"Riddles"),t.createElement("div",{onClick:function(){e("/general")},className:"category"},"General"),t.createElement("div",{onClick:function(){return n()},className:"category"},"Language"),t.createElement("div",{onClick:function(){return console.log("klik na Art Literature"),void e("/art")},className:"category"},"Art & Literature"),t.createElement("div",{onClick:function(){return console.log("klik na Science"),void e("/science")},className:"category"},"Science & Nature"),t.createElement("div",{onClick:function(){e("/food")},className:"category"},"Food & Drink"),t.createElement("div",{onClick:function(){e("/people")},className:"category"},"People & Place"),t.createElement("div",{onClick:function(){e("/holidays")},className:"category"},"History & Holidays"),t.createElement("div",{onClick:function(){e("/geography")},className:"category"},"Geography"),t.createElement("div",{onClick:function(){e("/entertainment")},className:"category"},"Entertainment"),t.createElement("div",{onClick:function(){e("/toys")},className:"category"},"Toys & Games"),t.createElement("div",{onClick:function(){e("/music")},className:"category"},"Music"),t.createElement("div",{onClick:function(){return n()},className:"category"},"Language"),t.createElement("div",{onClick:function(){e("/religion")},className:"category"},"Religion & Mythology"),t.createElement("div",{onClick:function(){e("/sport")},className:"category"},"Sports & Leisure"),t.createElement("div",{onClick:function(){e("/mathematics")},className:"category"},"Mathematicss")))};function ac(e){return ac="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ac(e)}function ic(){ic=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==ac(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(ac(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function lc(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function cc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return uc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?uc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function uc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const sc=function(){var e=cc((0,t.useState)(null),2),n=(e[0],e[1]),r=cc((0,t.useState)({}),2),o=r[0],a=r[1],i=cc((0,t.useState)([]),2),l=i[0],c=i[1],u=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){s(u)}),[u]),console.log("iz advice searchStringValue:",u);var s=function(){var e,t=(e=ic().mark((function e(t){var r,o,i;return ic().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.adviceslip.com/advice/search/".concat(t),e.prev=1,e.next=4,Vr.get(r);case 4:o=e.sent,i=o.data.slips,console.log("rezultat advicea",i),a(i),c(i.length),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),n(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){lc(a,r,o,i,l,"next",e)}function l(e){lc(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return 0==l?t.createElement(t.Fragment,null,t.createElement("br",null),t.createElement("br",null),t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement(sl,null))),t.createElement("tr",null,t.createElement("th",null,"Nothing found"))))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(tl,{placeholder:"Advice",linkTo:"/advice"}))),t.createElement("tr",null,t.createElement("th",{className:"celebrity",colSpan:2},u," Advice")),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of Advice: ",l)),t.createElement("tr",null,t.createElement("th",null))),o.map((function(e){return t.createElement("tbody",{key:e.id},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.advice)),t.createElement("tr",null,t.createElement("td",{className:"nameComm"},e.date)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(pl,null))},fc={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z"}}]},name:"right",theme:"outlined"};var dc=function(e,n){return t.createElement(ji,(0,E.Z)({},e,{ref:n,icon:fc}))};const pc=t.forwardRef(dc);function hc(e){return function(e){if(Array.isArray(e))return na(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ra(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mc(e){var n=t.useRef();n.current=e;var r=t.useCallback((function(){for(var e,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return null===(e=n.current)||void 0===e?void 0:e.call.apply(e,[n].concat(r))}),[]);return r}var yc=Ka()?t.useLayoutEffect:t.useEffect,vc=function(e,n){var r=t.useRef(!0);yc((function(){return e(r.current)}),n),yc((function(){return r.current=!1,function(){r.current=!0}}),[])},gc=function(e,t){vc((function(t){if(!t)return e()}),t)};const bc=vc;function wc(e){var n=t.useRef(!1),r=oa(t.useState(e),2),o=r[0],a=r[1];return t.useEffect((function(){return n.current=!1,function(){n.current=!0}}),[]),[o,function(e,t){t&&n.current||a(e)}]}function xc(e){return void 0!==e}var Ec=o(9864);function Ac(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[];return t.Children.forEach(e,(function(e){(null!=e||n.keepEmpty)&&(Array.isArray(e)?r=r.concat(Ac(e)):(0,Ec.isFragment)(e)&&e.props?r=r.concat(Ac(e.props.children,n)):r.push(e))})),r}var Sc=t.createContext({});function Cc(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function kc(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,ia(r.key),r)}}function Lc(e,t,n){return t&&kc(e.prototype,t),n&&kc(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function jc(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&q(e,t)}function Oc(e){return Oc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Oc(e)}function Nc(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Oc(e);if(t){var o=Oc(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return function(e,t){if(t&&("object"===aa(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Y(e)}(this,n)}}const _c=function(e){jc(n,e);var t=Nc(n);function n(){return Cc(this,n),t.apply(this,arguments)}return Lc(n,[{key:"render",value:function(){return this.props.children}}]),n}(t.Component);var Bc="none",Tc="appear",Pc="enter",Ic="leave",zc="none",Mc="prepare",Rc="start",Fc="active",Gc="end",Dc="prepared";function Zc(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit".concat(e)]="webkit".concat(t),n["Moz".concat(e)]="moz".concat(t),n["ms".concat(e)]="MS".concat(t),n["O".concat(e)]="o".concat(t.toLowerCase()),n}var $c,Uc,Hc,Wc=($c=Ka(),Uc="undefined"!=typeof window?window:{},Hc={animationend:Zc("Animation","AnimationEnd"),transitionend:Zc("Transition","TransitionEnd")},$c&&("AnimationEvent"in Uc||delete Hc.animationend.animation,"TransitionEvent"in Uc||delete Hc.transitionend.transition),Hc),Yc={};if(Ka()){var qc=document.createElement("div");Yc=qc.style}var Vc={};function Kc(e){if(Vc[e])return Vc[e];var t=Wc[e];if(t)for(var n=Object.keys(t),r=n.length,o=0;o<r;o+=1){var a=n[o];if(Object.prototype.hasOwnProperty.call(t,a)&&a in Yc)return Vc[e]=t[a],Vc[e]}return""}var Xc=Kc("animationend"),Qc=Kc("transitionend"),Jc=!(!Xc||!Qc),eu=Xc||"animationend",tu=Qc||"transitionend";function nu(e,t){return e?"object"===aa(e)?e[t.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(t):null}const ru=Ka()?t.useLayoutEffect:t.useEffect;var ou=function(e){return+setTimeout(e,16)},au=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(ou=function(e){return window.requestAnimationFrame(e)},au=function(e){return window.cancelAnimationFrame(e)});var iu=0,lu=new Map;function cu(e){lu.delete(e)}var uu=function(e){var t=iu+=1;return function n(r){if(0===r)cu(t),e();else{var o=ou((function(){n(r-1)}));lu.set(t,o)}}(arguments.length>1&&void 0!==arguments[1]?arguments[1]:1),t};uu.cancel=function(e){var t=lu.get(e);return cu(e),au(t)};const su=uu;var fu=[Mc,Rc,Fc,Gc],du=[Mc,Dc];function pu(e){return e===Fc||e===Gc}const hu=function(e){var n=e;"object"===aa(e)&&(n=e.transitionSupport);var r=t.forwardRef((function(e,r){var o=e.visible,a=void 0===o||o,i=e.removeOnLeave,l=void 0===i||i,c=e.forceRender,u=e.children,s=e.motionName,f=e.leavedClassName,d=e.eventProps,p=function(e,t){return!(!e.motionName||!n||!1===t)}(e,t.useContext(Sc).motion),h=(0,t.useRef)(),m=(0,t.useRef)(),y=function(e,n,r,o){var a=o.motionEnter,i=void 0===a||a,l=o.motionAppear,c=void 0===l||l,u=o.motionLeave,s=void 0===u||u,f=o.motionDeadline,d=o.motionLeaveImmediately,p=o.onAppearPrepare,h=o.onEnterPrepare,m=o.onLeavePrepare,y=o.onAppearStart,v=o.onEnterStart,g=o.onLeaveStart,b=o.onAppearActive,w=o.onEnterActive,x=o.onLeaveActive,E=o.onAppearEnd,A=o.onEnterEnd,S=o.onLeaveEnd,C=o.onVisibleChanged,k=oa(wc(),2),L=k[0],j=k[1],O=oa(wc(Bc),2),N=O[0],_=O[1],B=oa(wc(null),2),T=B[0],P=B[1],I=(0,t.useRef)(!1),z=(0,t.useRef)(null);function M(){return r()}var R=(0,t.useRef)(!1);function F(){_(Bc,!0),P(null,!0)}function G(e){var t=M();if(!e||e.deadline||e.target===t){var n,r=R.current;N===Tc&&r?n=null==E?void 0:E(t,e):N===Pc&&r?n=null==A?void 0:A(t,e):N===Ic&&r&&(n=null==S?void 0:S(t,e)),N!==Bc&&r&&!1!==n&&F()}}var D=oa(function(e){var n=(0,t.useRef)(),r=(0,t.useRef)(e);r.current=e;var o=t.useCallback((function(e){r.current(e)}),[]);function a(e){e&&(e.removeEventListener(tu,o),e.removeEventListener(eu,o))}return t.useEffect((function(){return function(){a(n.current)}}),[]),[function(e){n.current&&n.current!==e&&a(n.current),e&&e!==n.current&&(e.addEventListener(tu,o),e.addEventListener(eu,o),n.current=e)},a]}(G),1)[0],Z=function(e){var t,n,r;switch(e){case Tc:return la(t={},Mc,p),la(t,Rc,y),la(t,Fc,b),t;case Pc:return la(n={},Mc,h),la(n,Rc,v),la(n,Fc,w),n;case Ic:return la(r={},Mc,m),la(r,Rc,g),la(r,Fc,x),r;default:return{}}},$=t.useMemo((function(){return Z(N)}),[N]),U=oa(function(e,n,r){var o=oa(wc(zc),2),a=o[0],i=o[1],l=function(){var e=t.useRef(null);function n(){su.cancel(e.current)}return t.useEffect((function(){return function(){n()}}),[]),[function t(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;n();var a=su((function(){o<=1?r({isCanceled:function(){return a!==e.current}}):t(r,o-1)}));e.current=a},n]}(),c=oa(l,2),u=c[0],s=c[1],f=n?du:fu;return ru((function(){if(a!==zc&&a!==Gc){var e=f.indexOf(a),t=f[e+1],n=r(a);!1===n?i(t,!0):t&&u((function(e){function r(){e.isCanceled()||i(t,!0)}!0===n?r():Promise.resolve(n).then(r)}))}}),[e,a]),t.useEffect((function(){return function(){s()}}),[]),[function(){i(Mc,!0)},a]}(N,!e,(function(e){if(e===Mc){var t=$[Mc];return!!t&&t(M())}var n;return W in $&&P((null===(n=$[W])||void 0===n?void 0:n.call($,M(),null))||null),W===Fc&&(D(M()),f>0&&(clearTimeout(z.current),z.current=setTimeout((function(){G({deadline:!0})}),f))),W===Dc&&F(),true})),2),H=U[0],W=U[1],Y=pu(W);R.current=Y,ru((function(){j(n);var t,r=I.current;I.current=!0,!r&&n&&c&&(t=Tc),r&&n&&i&&(t=Pc),(r&&!n&&s||!r&&d&&!n&&s)&&(t=Ic);var o=Z(t);t&&(e||o[Mc])?(_(t),H()):_(Bc)}),[n]),(0,t.useEffect)((function(){(N===Tc&&!c||N===Pc&&!i||N===Ic&&!s)&&_(Bc)}),[c,i,s]),(0,t.useEffect)((function(){return function(){I.current=!1,clearTimeout(z.current)}}),[]);var q=t.useRef(!1);(0,t.useEffect)((function(){L&&(q.current=!0),void 0!==L&&N===Bc&&((q.current||L)&&(null==C||C(L)),q.current=!0)}),[L,N]);var V=T;return $[Mc]&&W===Rc&&(V=Va({transition:"none"},V)),[N,W,V,null!=L?L:n]}(p,a,(function(){try{return h.current instanceof HTMLElement?h.current:function(e){return e instanceof HTMLElement||e instanceof SVGElement}(e=m.current)?e:e instanceof t.Component?Ze.findDOMNode(e):null}catch(e){return null}var e}),e),v=oa(y,4),g=v[0],b=v[1],w=v[2],x=v[3],E=t.useRef(x);x&&(E.current=!0);var A,S,C,k,L,j=t.useCallback((function(e){h.current=e,function(e,t){"function"==typeof e?e(t):"object"===aa(e)&&e&&"current"in e&&(e.current=t)}(r,e)}),[r]),O=Va(Va({},d),{},{visible:a});if(u)if(g===Bc)A=x?u(Va({},O),j):!l&&E.current&&f?u(Va(Va({},O),{},{className:f}),j):c||!l&&!f?u(Va(Va({},O),{},{style:{display:"none"}}),j):null;else{var N,_;b===Mc?_="prepare":pu(b)?_="active":b===Rc&&(_="start");var B=nu(s,"".concat(g,"-").concat(_));A=u(Va(Va({},O),{},{className:sa()(nu(s,g),(N={},la(N,B,B&&_),la(N,s,"string"==typeof s),N)),style:w}),j)}else A=null;return t.isValidElement(A)&&(S=A,("function"!=typeof(L=(0,Ec.isMemo)(S)?S.type.type:S.type)||null!==(C=L.prototype)&&void 0!==C&&C.render)&&("function"!=typeof S||null!==(k=S.prototype)&&void 0!==k&&k.render))&&(A.ref||(A=t.cloneElement(A,{ref:j}))),t.createElement(_c,{ref:m},A)}));return r.displayName="CSSMotion",r}(Jc);var mu="add",yu="keep",vu="remove",gu="removed";function bu(e){var t;return Va(Va({},t=e&&"object"===aa(e)&&"key"in e?e:{key:e}),{},{key:String(t.key)})}function wu(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map(bu)}var xu=["component","children","onVisibleChanged","onAllRemoved"],Eu=["status"],Au=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearPrepare","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];!function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:hu,r=function(e){jc(o,e);var r=Nc(o);function o(){var e;Cc(this,o);for(var t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];return la(Y(e=r.call.apply(r,[this].concat(n))),"state",{keyEntities:[]}),la(Y(e),"removeKey",(function(t){var n=e.state.keyEntities.map((function(e){return e.key!==t?e:Va(Va({},e),{},{status:gu})}));return e.setState({keyEntities:n}),n.filter((function(e){return e.status!==gu})).length})),e}return Lc(o,[{key:"render",value:function(){var e=this,r=this.state.keyEntities,o=this.props,a=o.component,i=o.children,l=o.onVisibleChanged,c=o.onAllRemoved,u=ca(o,xu),s=a||t.Fragment,f={};return Au.forEach((function(e){f[e]=u[e],delete u[e]})),delete u.keys,t.createElement(s,u,r.map((function(r,o){var a=r.status,u=ca(r,Eu),s=a===mu||a===yu;return t.createElement(n,(0,E.Z)({},f,{key:u.key,visible:s,eventProps:u,onVisibleChanged:function(t){null==l||l(t,{key:u.key}),t||0===e.removeKey(u.key)&&c&&c()}}),(function(e,t){return i(Va(Va({},e),{},{index:o}),t)}))})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.keys,r=t.keyEntities,o=wu(n),a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=[],r=0,o=t.length,a=wu(e),i=wu(t);a.forEach((function(e){for(var t=!1,a=r;a<o;a+=1){var l=i[a];if(l.key===e.key){r<a&&(n=n.concat(i.slice(r,a).map((function(e){return Va(Va({},e),{},{status:mu})}))),r=a),n.push(Va(Va({},l),{},{status:yu})),r+=1,t=!0;break}}t||n.push(Va(Va({},e),{},{status:vu}))})),r<o&&(n=n.concat(i.slice(r).map((function(e){return Va(Va({},e),{},{status:mu})}))));var l={};return n.forEach((function(e){var t=e.key;l[t]=(l[t]||0)+1})),Object.keys(l).filter((function(e){return l[e]>1})).forEach((function(e){(n=n.filter((function(t){var n=t.key,r=t.status;return n!==e||r!==vu}))).forEach((function(t){t.key===e&&(t.status=yu)}))})),n}(r,o);return{keyEntities:a.filter((function(e){var t=r.find((function(t){var n=t.key;return e.key===n}));return!t||t.status!==gu||e.status!==vu}))}}}]),o}(t.Component);la(r,"defaultProps",{component:"div"})}(Jc);const Su=hu;var Cu={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=Cu.F1&&t<=Cu.F12)return!1;switch(t){case Cu.ALT:case Cu.CAPS_LOCK:case Cu.CONTEXT_MENU:case Cu.CTRL:case Cu.DOWN:case Cu.END:case Cu.ESC:case Cu.HOME:case Cu.INSERT:case Cu.LEFT:case Cu.MAC_FF_META:case Cu.META:case Cu.NUMLOCK:case Cu.NUM_CENTER:case Cu.PAGE_DOWN:case Cu.PAGE_UP:case Cu.PAUSE:case Cu.PRINT_SCREEN:case Cu.RIGHT:case Cu.SHIFT:case Cu.UP:case Cu.WIN_KEY:case Cu.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=Cu.ZERO&&e<=Cu.NINE)return!0;if(e>=Cu.NUM_ZERO&&e<=Cu.NUM_MULTIPLY)return!0;if(e>=Cu.A&&e<=Cu.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case Cu.SPACE:case Cu.QUESTION_MARK:case Cu.NUM_PLUS:case Cu.NUM_MINUS:case Cu.NUM_PERIOD:case Cu.NUM_DIVISION:case Cu.SEMICOLON:case Cu.DASH:case Cu.EQUALS:case Cu.COMMA:case Cu.PERIOD:case Cu.SLASH:case Cu.APOSTROPHE:case Cu.SINGLE_QUOTE:case Cu.OPEN_SQUARE_BRACKET:case Cu.BACKSLASH:case Cu.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};const ku=Cu;var Lu=t.forwardRef((function(e,n){var r,o=e.prefixCls,a=e.forceRender,i=e.className,l=e.style,c=e.children,u=e.isActive,s=e.role,f=oa(t.useState(u||a),2),d=f[0],p=f[1];return t.useEffect((function(){(a||u)&&p(!0)}),[a,u]),d?t.createElement("div",{ref:n,className:sa()("".concat(o,"-content"),(r={},la(r,"".concat(o,"-content-active"),u),la(r,"".concat(o,"-content-inactive"),!u),r),i),style:l,role:s},t.createElement("div",{className:"".concat(o,"-content-box")},c)):null}));Lu.displayName="PanelContent";const ju=Lu;var Ou=["showArrow","headerClass","isActive","onItemClick","forceRender","className","prefixCls","collapsible","accordion","panelKey","extra","header","expandIcon","openMotion","destroyInactivePanel","children"],Nu=t.forwardRef((function(e,n){var r,o,a=e.showArrow,i=void 0===a||a,l=e.headerClass,c=e.isActive,u=e.onItemClick,s=e.forceRender,f=e.className,d=e.prefixCls,p=e.collapsible,h=e.accordion,m=e.panelKey,y=e.extra,v=e.header,g=e.expandIcon,b=e.openMotion,w=e.destroyInactivePanel,x=e.children,A=ca(e,Ou),S="disabled"===p,C="header"===p,k="icon"===p,L=null!=y&&"boolean"!=typeof y,j=function(){null==u||u(m)},O="function"==typeof g?g(e):t.createElement("i",{className:"arrow"});O&&(O=t.createElement("div",{className:"".concat(d,"-expand-icon"),onClick:["header","icon"].includes(p)?j:void 0},O));var N=sa()((la(r={},"".concat(d,"-item"),!0),la(r,"".concat(d,"-item-active"),c),la(r,"".concat(d,"-item-disabled"),S),r),f),_={className:sa()(l,(la(o={},"".concat(d,"-header"),!0),la(o,"".concat(d,"-header-collapsible-only"),C),la(o,"".concat(d,"-icon-collapsible-only"),k),o)),"aria-expanded":c,"aria-disabled":S,onKeyDown:function(e){"Enter"!==e.key&&e.keyCode!==ku.ENTER&&e.which!==ku.ENTER||j()}};return C||k||(_.onClick=j,_.role=h?"tab":"button",_.tabIndex=S?-1:0),t.createElement("div",(0,E.Z)({},A,{ref:n,className:N}),t.createElement("div",_,i&&O,t.createElement("span",{className:"".concat(d,"-header-text"),onClick:"header"===p?j:void 0},v),L&&t.createElement("div",{className:"".concat(d,"-extra")},y)),t.createElement(Su,(0,E.Z)({visible:c,leavedClassName:"".concat(d,"-content-hidden")},b,{forceRender:s,removeOnLeave:w}),(function(e,n){var r=e.className,o=e.style;return t.createElement(ju,{ref:n,prefixCls:d,className:r,style:o,isActive:c,forceRender:s,role:h?"tabpanel":void 0},x)})))}));const _u=Nu;var Bu=["children","label","key","collapsible","onItemClick","destroyInactivePanel"];function Tu(e){var t=e;if(!Array.isArray(t)){var n=aa(t);t="number"===n||"string"===n?[t]:[]}return t.map((function(e){return String(e)}))}var Pu=t.forwardRef((function(e,n){var r,o,a,i,l,c,u,s,f,d,p,h,m,y,v,g=e.prefixCls,b=void 0===g?"rc-collapse":g,w=e.destroyInactivePanel,x=void 0!==w&&w,A=e.style,S=e.accordion,C=e.className,k=e.children,L=e.collapsible,j=e.openMotion,O=e.expandIcon,N=e.activeKey,_=e.defaultActiveKey,B=e.onChange,T=e.items,P=sa()(b,C),I=(r=[],a=(o={value:N,onChange:function(e){return null==B?void 0:B(e)},defaultValue:_,postState:Tu}||{}).defaultValue,i=o.value,l=o.onChange,c=o.postState,u=oa(wc((function(){return xc(i)?i:xc(a)?"function"==typeof a?a():a:"function"==typeof r?r():r})),2),s=u[0],f=u[1],d=void 0!==i?i:s,p=c?c(d):d,h=mc(l),m=oa(wc([d]),2),y=m[0],v=m[1],gc((function(){var e=y[0];s!==e&&h(s,e)}),[y]),gc((function(){xc(i)||f(i)}),[i]),[p,mc((function(e,t){f(e,t),v([d],t)}))]),z=oa(I,2),M=z[0],R=z[1];mi(!k,"[rc-collapse] `children` will be removed in next major version. Please use `items` instead.");var F=function(e,n,r){return Array.isArray(e)?function(e,n){var r=n.prefixCls,o=n.accordion,a=n.collapsible,i=n.destroyInactivePanel,l=n.onItemClick,c=n.activeKey,u=n.openMotion,s=n.expandIcon;return e.map((function(e,n){var f,d=e.children,p=e.label,h=e.key,m=e.collapsible,y=e.onItemClick,v=e.destroyInactivePanel,g=ca(e,Bu),b=String(null!=h?h:n),w=null!=m?m:a,x=null!=v?v:i;return f=o?c[0]===b:c.indexOf(b)>-1,t.createElement(_u,(0,E.Z)({},g,{prefixCls:r,key:b,panelKey:b,isActive:f,accordion:o,openMotion:u,expandIcon:s,header:p,collapsible:w,onItemClick:function(e){"disabled"!==w&&(l(e),null==y||y(e))},destroyInactivePanel:x}),d)}))}(e,r):Ac(n).map((function(e,n){return function(e,n,r){if(!e)return null;var o,a=r.prefixCls,i=r.accordion,l=r.collapsible,c=r.destroyInactivePanel,u=r.onItemClick,s=r.activeKey,f=r.openMotion,d=r.expandIcon,p=e.key||String(n),h=e.props,m=h.header,y=h.headerClass,v=h.destroyInactivePanel,g=h.collapsible,b=h.onItemClick;o=i?s[0]===p:s.indexOf(p)>-1;var w=null!=g?g:l,x={key:p,panelKey:p,header:m,headerClass:y,isActive:o,prefixCls:a,destroyInactivePanel:null!=v?v:c,openMotion:f,accordion:i,children:e.props.children,onItemClick:function(e){"disabled"!==w&&(u(e),null==b||b(e))},expandIcon:d,collapsible:w};return"string"==typeof e.type?e:(Object.keys(x).forEach((function(e){void 0===x[e]&&delete x[e]})),t.cloneElement(e,x))}(e,n,r)}))}(T,k,{prefixCls:b,accordion:S,openMotion:j,expandIcon:O,collapsible:L,destroyInactivePanel:x,onItemClick:function(e){return R((function(){return S?M[0]===e?[]:[e]:M.indexOf(e)>-1?M.filter((function(t){return t!==e})):[].concat(hc(M),[e])}))},activeKey:M});return t.createElement("div",{ref:n,className:P,style:A,role:S?"tablist":void 0},F)}));const Iu=Object.assign(Pu,{Panel:_u}),zu=Iu;function Mu(e,t){var n=Va({},e);return Array.isArray(t)&&t.forEach((function(e){delete n[e]})),n}Iu.Panel;const Ru=()=>({height:0,opacity:0}),Fu=e=>{const{scrollHeight:t}=e;return{height:t,opacity:1}},Gu=e=>({height:e?e.offsetHeight:0}),Du=(e,t)=>!0===(null==t?void 0:t.deadline)||"height"===t.propertyName,{isValidElement:Zu}=n;function $u(e,n){return function(e,n,r){return Zu(e)?t.cloneElement(e,"function"==typeof r?r(e.props||{}):r):n}(e,e,n)}const Uu=t.createContext({getPrefixCls:(e,t)=>t||(e?`ant-${e}`:"ant"),iconPrefixCls:"anticon"}),{Consumer:Hu}=Uu,Wu=t.createContext(void 0),Yu=t.forwardRef(((e,n)=>{const{getPrefixCls:r}=t.useContext(Uu),{prefixCls:o,className:a,showArrow:i=!0}=e,l=r("collapse",o),c=sa()({[`${l}-no-arrow`]:!i},a);return t.createElement(zu.Panel,Object.assign({ref:n},e,{prefixCls:l,className:c}))})),qu=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)};const Vu=function(){function e(t){Cc(this,e),la(this,"instanceId",void 0),la(this,"cache",new Map),this.instanceId=t}return Lc(e,[{key:"get",value:function(e){return this.cache.get(e.join("%"))||null}},{key:"update",value:function(e,t){var n=e.join("%"),r=t(this.cache.get(n));null===r?this.cache.delete(n):this.cache.set(n,r)}}]),e}();var Ku="data-token-hash",Xu="data-css-hash",Qu="__cssinjs_instance__";var Ju=t.createContext({hashPriority:"low",cache:function(){var e=Math.random().toString(12).slice(2);if("undefined"!=typeof document&&document.head&&document.body){var t=document.body.querySelectorAll("style[".concat(Xu,"]"))||[],n=document.head.firstChild;Array.from(t).forEach((function(t){t[Qu]=t[Qu]||e,t[Qu]===e&&document.head.insertBefore(t,n)}));var r={};Array.from(document.querySelectorAll("style[".concat(Xu,"]"))).forEach((function(t){var n,o=t.getAttribute(Xu);r[o]?t[Qu]===e&&(null===(n=t.parentNode)||void 0===n||n.removeChild(t)):r[o]=!0}))}return new Vu(e)}(),defaultCache:!0});const es=Ju;var ts=function(){function e(){Cc(this,e),la(this,"cache",void 0),la(this,"keys",void 0),la(this,"cacheCallTimes",void 0),this.cache=new Map,this.keys=[],this.cacheCallTimes=0}return Lc(e,[{key:"size",value:function(){return this.keys.length}},{key:"internalGet",value:function(e){var t,n,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o={map:this.cache};return e.forEach((function(e){var t;o=o?null===(t=o)||void 0===t||null===(t=t.map)||void 0===t?void 0:t.get(e):void 0})),null!==(t=o)&&void 0!==t&&t.value&&r&&(o.value[1]=this.cacheCallTimes++),null===(n=o)||void 0===n?void 0:n.value}},{key:"get",value:function(e){var t;return null===(t=this.internalGet(e,!0))||void 0===t?void 0:t[0]}},{key:"has",value:function(e){return!!this.internalGet(e)}},{key:"set",value:function(t,n){var r=this;if(!this.has(t)){if(this.size()+1>e.MAX_CACHE_SIZE+e.MAX_CACHE_OFFSET){var o=this.keys.reduce((function(e,t){var n=oa(e,2)[1];return r.internalGet(t)[1]<n?[t,r.internalGet(t)[1]]:e}),[this.keys[0],this.cacheCallTimes]),a=oa(o,1)[0];this.delete(a)}this.keys.push(t)}var i=this.cache;t.forEach((function(e,o){if(o===t.length-1)i.set(e,{value:[n,r.cacheCallTimes++]});else{var a=i.get(e);a?a.map||(a.map=new Map):i.set(e,{map:new Map}),i=i.get(e).map}}))}},{key:"deleteByPath",value:function(e,t){var n,r=e.get(t[0]);if(1===t.length)return r.map?e.set(t[0],{map:r.map}):e.delete(t[0]),null===(n=r.value)||void 0===n?void 0:n[0];var o=this.deleteByPath(r.map,t.slice(1));return r.map&&0!==r.map.size||r.value||e.delete(t[0]),o}},{key:"delete",value:function(e){if(this.has(e))return this.keys=this.keys.filter((function(t){return!function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(t,e)})),this.deleteByPath(this.cache,e)}}]),e}();la(ts,"MAX_CACHE_SIZE",20),la(ts,"MAX_CACHE_OFFSET",5);var ns=0,rs=function(){function e(t){Cc(this,e),la(this,"derivatives",void 0),la(this,"id",void 0),this.derivatives=Array.isArray(t)?t:[t],this.id=ns,0===t.length&&t.length,ns+=1}return Lc(e,[{key:"getDerivativeToken",value:function(e){return this.derivatives.reduce((function(t,n){return n(e,t)}),void 0)}}]),e}(),os=new ts,as=new WeakMap,is={},ls=new WeakMap;function cs(e){var t=ls.get(e)||"";return t||(Object.keys(e).forEach((function(n){var r=e[n];t+=n,r instanceof rs?t+=r.id:r&&"object"===aa(r)?t+=cs(r):t+=r})),ls.set(e,t)),t}function us(e,t){return qu("".concat(t,"_").concat(cs(e)))}var ss="random-".concat(Date.now(),"-").concat(Math.random()).replace(/\./g,""),fs="_bAmBoO_";var ds=void 0,ps=Ka();function hs(e){return"number"==typeof e?"".concat(e,"px"):e}function ms(e,t,n){var r;if(arguments.length>4&&void 0!==arguments[4]&&arguments[4])return e;var o=Va(Va({},arguments.length>3&&void 0!==arguments[3]?arguments[3]:{}),{},(la(r={},Ku,t),la(r,Xu,n),r)),a=Object.keys(o).map((function(e){var t=o[e];return t?"".concat(e,'="').concat(t,'"'):null})).filter((function(e){return e})).join(" ");return"<style ".concat(a,">").concat(e,"</style>")}var ys=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"--".concat(t?"".concat(t,"-"):"").concat(e).replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z]+)([A-Z][a-z0-9]+)/g,"$1-$2").replace(/([a-z])([A-Z0-9])/g,"$1-$2").toLowerCase()},vs=function(e,t,n){return Object.keys(e).length?".".concat(t).concat(null!=n&&n.scope?".".concat(n.scope):"","{").concat(Object.entries(e).map((function(e){var t=oa(e,2),n=t[0],r=t[1];return"".concat(n,":").concat(r,";")})).join(""),"}"):""},gs=function(e,t,n){var r={},o={};return Object.entries(e).forEach((function(e){var t,a,i=oa(e,2),l=i[0],c=i[1];if(null!=n&&null!==(t=n.preserve)&&void 0!==t&&t[l])o[l]=c;else if(!("string"!=typeof c&&"number"!=typeof c||null!=n&&null!==(a=n.ignore)&&void 0!==a&&a[l])){var u,s=ys(l,null==n?void 0:n.prefix);r[s]="number"!=typeof c||null!=n&&null!==(u=n.unitless)&&void 0!==u&&u[l]?String(c):"".concat(c,"px"),o[l]="var(".concat(s,")")}})),[o,vs(r,t,{scope:null==n?void 0:n.scope})]},bs=Va({},n).useInsertionEffect;const ws=bs?function(e,t,n){return bs((function(){return e(),t()}),n)}:function(e,n,r){t.useMemo(e,r),bc((function(){return n(!0)}),r)},xs=void 0!==Va({},n).useInsertionEffect?function(e){var n=[],r=!1;return t.useEffect((function(){return r=!1,function(){r=!0,n.length&&n.forEach((function(e){return e()}))}}),e),function(e){r||n.push(e)}}:function(){return function(e){e()}},Es=function(){return!1};function As(e,n,r,o,a){var i=t.useContext(es).cache,l=[e].concat(hc(n)),c=l.join("_"),u=xs([c]),s=(Es(),function(e){i.update(l,(function(t){var n=oa(t||[void 0,void 0],2),o=n[0],a=[void 0===o?0:o,n[1]||r()];return e?e(a):a}))});t.useMemo((function(){s()}),[c]);var f=i.get(l)[1];return ws((function(){null==a||a(f)}),(function(e){return s((function(t){var n=oa(t,2),r=n[0],o=n[1];return e&&0===r&&(null==a||a(f)),[r+1,o]})),function(){i.update(l,(function(t){var n=oa(t||[],2),r=n[0],a=void 0===r?0:r,c=n[1];return 0==a-1?(u((function(){!e&&i.get(l)||null==o||o(c,!1)})),null):[a-1,c]}))}}),[c]),f}var Ss={},Cs="css",ks=new Map,Ls=0;var js=function(e,t,n,r){var o=Va(Va({},n.getDerivativeToken(e)),t);return r&&(o=r(o)),o},Os="token";function Ns(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=(0,t.useContext)(es),a=o.cache.instanceId,i=o.container,l=r.salt,c=void 0===l?"":l,u=r.override,s=void 0===u?Ss:u,f=r.formatToken,d=r.getComputedToken,p=r.cssVar,h=function(e,t){for(var r=as,o=0;o<t.length;o+=1){var a=t[o];r.has(a)||r.set(a,new WeakMap),r=r.get(a)}return r.has(is)||r.set(is,Object.assign.apply(Object,[{}].concat(hc(n)))),r.get(is)}(0,n),m=cs(h),y=cs(s),v=p?cs(p):"",g=As(Os,[c,e.id,m,y,v],(function(){var t,n=d?d(h,s,e):js(h,s,e,f),r=Va({},n),o="";if(p){var a=oa(gs(n,p.key,{prefix:p.prefix,ignore:p.ignore,unitless:p.unitless,preserve:p.preserve}),2);n=a[0],o=a[1]}var i=us(n,c);n._tokenKey=i,r._tokenKey=us(r,c);var l=null!==(t=null==p?void 0:p.key)&&void 0!==t?t:i;n._themeKey=l,function(e){ks.set(e,(ks.get(e)||0)+1)}(l);var u="".concat(Cs,"-").concat(qu(i));return n._hashId=u,[n,u,r,o,(null==p?void 0:p.key)||""]}),(function(e){!function(e,t){ks.set(e,(ks.get(e)||0)-1);var n=Array.from(ks.keys()),r=n.filter((function(e){return(ks.get(e)||0)<=0}));n.length-r.length>Ls&&r.forEach((function(e){!function(e,t){"undefined"!=typeof document&&document.querySelectorAll("style[".concat(Ku,'="').concat(e,'"]')).forEach((function(e){var n;e[Qu]===t&&(null===(n=e.parentNode)||void 0===n||n.removeChild(e))}))}(e,t),ks.delete(e)}))}(e[0]._themeKey,a)}),(function(e){var t=oa(e,4),n=t[0],r=t[3];if(p&&r){var o=li(r,qu("css-variables-".concat(n._themeKey)),{mark:Xu,prepend:"queue",attachTo:i,priority:-999});o[Qu]=a,o.setAttribute(Ku,n._themeKey)}}));return g}const _s={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Bs,Ts=o(211),Ps=o(2190),Is="data-ant-cssinjs-cache-path",zs="_FILE_STYLE__",Ms=!0;var Rs="_multi_value_";function Fs(e){return(0,Ts.q)((0,Ps.MY)(e),Ts.P).replace(/\{%%%\:[^;];}/g,";")}var Gs=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{root:!0,parentSelectors:[]},o=r.root,a=r.injectHash,i=r.parentSelectors,l=n.hashId,c=n.layer,u=(n.path,n.hashPriority),s=n.transformers,f=void 0===s?[]:s,d=(n.linters,""),p={};function h(t){var r=t.getName(l);if(!p[r]){var o=oa(e(t.style,n,{root:!1,parentSelectors:i}),1)[0];p[r]="@keyframes ".concat(t.getName(l)).concat(o)}}var m=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return t.forEach((function(t){Array.isArray(t)?e(t,n):t&&n.push(t)})),n}(Array.isArray(t)?t:[t]);if(m.forEach((function(t){var r="string"!=typeof t||o?t:{};if("string"==typeof r)d+="".concat(r,"\n");else if(r._keyframe)h(r);else{var c=f.reduce((function(e,t){var n;return(null==t||null===(n=t.visit)||void 0===n?void 0:n.call(t,e))||e}),r);Object.keys(c).forEach((function(t){var r=c[t];if("object"!==aa(r)||!r||"animationName"===t&&r._keyframe||function(e){return"object"===aa(e)&&e&&("_skip_check_"in e||Rs in e)}(r)){var s;function x(e,t){var n=e.replace(/[A-Z]/g,(function(e){return"-".concat(e.toLowerCase())})),r=t;_s[e]||"number"!=typeof r||0===r||(r="".concat(r,"px")),"animationName"===e&&null!=t&&t._keyframe&&(h(t),r=t.getName(l)),d+="".concat(n,":").concat(r,";")}var f=null!==(s=null==r?void 0:r.value)&&void 0!==s?s:r;"object"===aa(r)&&null!=r&&r[Rs]&&Array.isArray(f)?f.forEach((function(e){x(t,e)})):x(t,f)}else{var m=!1,y=t.trim(),v=!1;(o||a)&&l?y.startsWith("@")?m=!0:y=function(e,t,n){if(!t)return e;var r=".".concat(t),o="low"===n?":where(".concat(r,")"):r;return e.split(",").map((function(e){var t,n=e.trim().split(/\s+/),r=n[0]||"",a=(null===(t=r.match(/^\w+/))||void 0===t?void 0:t[0])||"";return[r="".concat(a).concat(o).concat(r.slice(a.length))].concat(hc(n.slice(1))).join(" ")})).join(",")}(t,l,u):!o||l||"&"!==y&&""!==y||(y="",v=!0);var g=oa(e(r,n,{root:v,injectHash:m,parentSelectors:[].concat(hc(i),[y])}),2),b=g[0],w=g[1];p=Va(Va({},p),w),d+="".concat(y).concat(b)}}))}})),o){if(c&&(void 0===ds&&(ds=function(e,t,n){if(Ka()){var r,o;li(e,ss);var a=document.createElement("div");a.style.position="fixed",a.style.left="0",a.style.top="0",null==t||t(a),document.body.appendChild(a);var i=n?n(a):null===(r=getComputedStyle(a).content)||void 0===r?void 0:r.includes(fs);return null===(o=a.parentNode)||void 0===o||o.removeChild(a),ii(ss),i}return!1}("@layer ".concat(ss," { .").concat(ss,' { content: "').concat(fs,'"!important; } }'),(function(e){e.className=ss}))),ds)){var y=c.split(","),v=y[y.length-1].trim();d="@layer ".concat(v," {").concat(d,"}"),y.length>1&&(d="@layer ".concat(c,"{%%%:%}").concat(d))}}else d="{".concat(d,"}");return[d,p]};function Ds(e,t){return qu("".concat(e.join("%")).concat(t))}function Zs(){return null}var $s="style";function Us(e,n){var r=e.token,o=e.path,a=e.hashId,i=e.layer,l=e.nonce,c=e.clientOnly,u=e.order,s=void 0===u?0:u,f=t.useContext(es),d=f.autoClear,p=(f.mock,f.defaultCache),h=f.hashPriority,m=f.container,y=f.ssrInline,v=f.transformers,g=f.linters,b=f.cache,w=r._tokenKey,x=[w].concat(hc(o)),A=ps,S=As($s,x,(function(){var e=x.join("|");if(function(e){return function(){if(!Bs&&(Bs={},Ka())){var e=document.createElement("div");e.className=Is,e.style.position="fixed",e.style.visibility="hidden",e.style.top="-9999px",document.body.appendChild(e);var t=getComputedStyle(e).content||"";(t=t.replace(/^"/,"").replace(/"$/,"")).split(";").forEach((function(e){var t=oa(e.split(":"),2),n=t[0],r=t[1];Bs[n]=r}));var n,r=document.querySelector("style[".concat(Is,"]"));r&&(Ms=!1,null===(n=r.parentNode)||void 0===n||n.removeChild(r)),document.body.removeChild(e)}}(),!!Bs[e]}(e)){var t=function(e){var t=Bs[e],n=null;if(t&&Ka())if(Ms)n=zs;else{var r=document.querySelector("style[".concat(Xu,'="').concat(Bs[e],'"]'));r?n=r.innerHTML:delete Bs[e]}return[n,t]}(e),r=oa(t,2),l=r[0],u=r[1];if(l)return[l,w,u,{},c,s]}var f=n(),d=oa(Gs(f,{hashId:a,hashPriority:h,layer:i,path:o.join("-"),transformers:v,linters:g}),2),p=d[0],m=d[1],y=Fs(p),b=Ds(x,y);return[y,w,b,m,c,s]}),(function(e,t){var n=oa(e,3)[2];(t||d)&&ps&&ii(n,{mark:Xu})}),(function(e){var t=oa(e,4),n=t[0],r=(t[1],t[2]),o=t[3];if(A&&n!==zs){var a={mark:Xu,prepend:"queue",attachTo:m,priority:s},i="function"==typeof l?l():l;i&&(a.csp={nonce:i});var c=li(n,r,a);c[Qu]=b.instanceId,c.setAttribute(Ku,w),Object.keys(o).forEach((function(e){li(Fs(o[e]),"_effect-".concat(e),a)}))}})),C=oa(S,3),k=C[0],L=C[1],j=C[2];return function(e){var n,r;return n=y&&!A&&p?t.createElement("style",(0,E.Z)({},(la(r={},Ku,L),la(r,Xu,j),r),{dangerouslySetInnerHTML:{__html:k}})):t.createElement(Zs,null),t.createElement(t.Fragment,null,n,e)}}var Hs="cssVar";var Ws;function Ys(e){return e.notSplit=!0,e}la(Ws={},$s,(function(e,t,n){var r=oa(e,6),o=r[0],a=r[1],i=r[2],l=r[3],c=r[4],u=r[5],s=(n||{}).plain;if(c)return null;var f=o,d={"data-rc-order":"prependQueue","data-rc-priority":"".concat(u)};return f=ms(o,a,i,d,s),l&&Object.keys(l).forEach((function(e){if(!t[e]){t[e]=!0;var n=Fs(l[e]);f+=ms(n,a,"_effect-".concat(e),d,s)}})),[u,i,f]})),la(Ws,Os,(function(e,t,n){var r=oa(e,5),o=r[2],a=r[3],i=r[4],l=(n||{}).plain;if(!a)return null;var c=o._tokenKey;return[-999,c,ms(a,i,c,{"data-rc-order":"prependQueue","data-rc-priority":"".concat(-999)},l)]})),la(Ws,Hs,(function(e,t,n){var r=oa(e,4),o=r[1],a=r[2],i=r[3],l=(n||{}).plain;return o?[-999,a,ms(o,i,a,{"data-rc-order":"prependQueue","data-rc-priority":"".concat(-999)},l)]:null})),Ys(["borderTop","borderBottom"]),Ys(["borderTop"]),Ys(["borderBottom"]),Ys(["borderLeft","borderRight"]),Ys(["borderLeft"]),Ys(["borderRight"]);const qs=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return{boxSizing:"border-box",margin:0,padding:0,color:e.colorText,fontSize:e.fontSize,lineHeight:e.lineHeight,listStyle:"none",fontFamily:t?"inherit":e.fontFamily}},Vs=e=>({a:{color:e.colorLink,textDecoration:e.linkDecoration,backgroundColor:"transparent",outline:"none",cursor:"pointer",transition:`color ${e.motionDurationSlow}`,"-webkit-text-decoration-skip":"objects","&:hover":{color:e.colorLinkHover},"&:active":{color:e.colorLinkActive},"&:active,\n  &:hover":{textDecoration:e.linkHoverDecoration,outline:0},"&:focus":{textDecoration:e.linkFocusDecoration,outline:0},"&[disabled]":{color:e.colorTextDisabled,cursor:"not-allowed"}}}),Ks=(e,t)=>{const{fontFamily:n,fontSize:r}=e,o=`[class^="${t}"], [class*=" ${t}"]`;return{[o]:{fontFamily:n,fontSize:r,boxSizing:"border-box","&::before, &::after":{boxSizing:"border-box"},[o]:{boxSizing:"border-box","&::before, &::after":{boxSizing:"border-box"}}}}},Xs=e=>({[e.componentCls]:{[`${e.antCls}-motion-collapse-legacy`]:{overflow:"hidden","&-active":{transition:`height ${e.motionDurationMid} ${e.motionEaseInOut},\n        opacity ${e.motionDurationMid} ${e.motionEaseInOut} !important`}},[`${e.antCls}-motion-collapse`]:{overflow:"hidden",transition:`height ${e.motionDurationMid} ${e.motionEaseInOut},\n        opacity ${e.motionDurationMid} ${e.motionEaseInOut} !important`}}});"undefined"==typeof Reflect?Object.keys:Reflect.ownKeys;const Qs="5.12.1",Js={blue:"#1677ff",purple:"#722ED1",cyan:"#13C2C2",green:"#52C41A",magenta:"#EB2F96",pink:"#eb2f96",red:"#F5222D",orange:"#FA8C16",yellow:"#FADB14",volcano:"#FA541C",geekblue:"#2F54EB",gold:"#FAAD14",lime:"#A0D911"},ef=Object.assign(Object.assign({},Js),{colorPrimary:"#1677ff",colorSuccess:"#52c41a",colorWarning:"#faad14",colorError:"#ff4d4f",colorInfo:"#1677ff",colorLink:"",colorTextBase:"",colorBgBase:"",fontFamily:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n'Noto Color Emoji'",fontFamilyCode:"'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace",fontSize:14,lineWidth:1,lineType:"solid",motionUnit:.1,motionBase:0,motionEaseOutCirc:"cubic-bezier(0.08, 0.82, 0.17, 1)",motionEaseInOutCirc:"cubic-bezier(0.78, 0.14, 0.15, 0.86)",motionEaseOut:"cubic-bezier(0.215, 0.61, 0.355, 1)",motionEaseInOut:"cubic-bezier(0.645, 0.045, 0.355, 1)",motionEaseOutBack:"cubic-bezier(0.12, 0.4, 0.29, 1.46)",motionEaseInBack:"cubic-bezier(0.71, -0.46, 0.88, 0.6)",motionEaseInQuint:"cubic-bezier(0.755, 0.05, 0.855, 0.06)",motionEaseOutQuint:"cubic-bezier(0.23, 1, 0.32, 1)",borderRadius:6,sizeUnit:4,sizeStep:4,sizePopupArrow:16,controlHeight:32,zIndexBase:0,zIndexPopupBase:1e3,opacityImage:1,wireframe:!1,motion:!0});var tf=function(){function e(t,n){var r;if(void 0===t&&(t=""),void 0===n&&(n={}),t instanceof e)return t;"number"==typeof t&&(t=function(e){return{r:e>>16,g:(65280&e)>>8,b:255&e}}(t)),this.originalInput=t;var o=Aa(t);this.originalInput=t,this.r=o.r,this.g=o.g,this.b=o.b,this.a=o.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(r=n.format)&&void 0!==r?r:o.format,this.gradientType=n.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=o.ok}return e.prototype.isDark=function(){return this.getBrightness()<128},e.prototype.isLight=function(){return!this.isDark()},e.prototype.getBrightness=function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},e.prototype.getLuminance=function(){var e=this.toRgb(),t=e.r/255,n=e.g/255,r=e.b/255;return.2126*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))},e.prototype.getAlpha=function(){return this.a},e.prototype.setAlpha=function(e){return this.a=pa(e),this.roundA=Math.round(100*this.a)/100,this},e.prototype.isMonochrome=function(){return 0===this.toHsl().s},e.prototype.toHsv=function(){var e=ga(this.r,this.g,this.b);return{h:360*e.h,s:e.s,v:e.v,a:this.a}},e.prototype.toHsvString=function(){var e=ga(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.v);return 1===this.a?"hsv(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsva(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHsl=function(){var e=ya(this.r,this.g,this.b);return{h:360*e.h,s:e.s,l:e.l,a:this.a}},e.prototype.toHslString=function(){var e=ya(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.l);return 1===this.a?"hsl(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsla(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHex=function(e){return void 0===e&&(e=!1),ba(this.r,this.g,this.b,e)},e.prototype.toHexString=function(e){return void 0===e&&(e=!1),"#"+this.toHex(e)},e.prototype.toHex8=function(e){return void 0===e&&(e=!1),function(e,t,n,r,o){var a,i=[ma(Math.round(e).toString(16)),ma(Math.round(t).toString(16)),ma(Math.round(n).toString(16)),ma((a=r,Math.round(255*parseFloat(a)).toString(16)))];return o&&i[0].startsWith(i[0].charAt(1))&&i[1].startsWith(i[1].charAt(1))&&i[2].startsWith(i[2].charAt(1))&&i[3].startsWith(i[3].charAt(1))?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0)+i[3].charAt(0):i.join("")}(this.r,this.g,this.b,this.a,e)},e.prototype.toHex8String=function(e){return void 0===e&&(e=!1),"#"+this.toHex8(e)},e.prototype.toHexShortString=function(e){return void 0===e&&(e=!1),1===this.a?this.toHexString(e):this.toHex8String(e)},e.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},e.prototype.toRgbString=function(){var e=Math.round(this.r),t=Math.round(this.g),n=Math.round(this.b);return 1===this.a?"rgb(".concat(e,", ").concat(t,", ").concat(n,")"):"rgba(".concat(e,", ").concat(t,", ").concat(n,", ").concat(this.roundA,")")},e.prototype.toPercentageRgb=function(){var e=function(e){return"".concat(Math.round(100*fa(e,255)),"%")};return{r:e(this.r),g:e(this.g),b:e(this.b),a:this.a}},e.prototype.toPercentageRgbString=function(){var e=function(e){return Math.round(100*fa(e,255))};return 1===this.a?"rgb(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%)"):"rgba(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%, ").concat(this.roundA,")")},e.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var e="#"+ba(this.r,this.g,this.b,!1),t=0,n=Object.entries(Ea);t<n.length;t++){var r=n[t],o=r[0];if(e===r[1])return o}return!1},e.prototype.toString=function(e){var t=Boolean(e);e=null!=e?e:this.format;var n=!1,r=this.a<1&&this.a>=0;return t||!r||!e.startsWith("hex")&&"name"!==e?("rgb"===e&&(n=this.toRgbString()),"prgb"===e&&(n=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(n=this.toHexString()),"hex3"===e&&(n=this.toHexString(!0)),"hex4"===e&&(n=this.toHex8String(!0)),"hex8"===e&&(n=this.toHex8String()),"name"===e&&(n=this.toName()),"hsl"===e&&(n=this.toHslString()),"hsv"===e&&(n=this.toHsvString()),n||this.toHexString()):"name"===e&&0===this.a?this.toName():this.toRgbString()},e.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},e.prototype.clone=function(){return new e(this.toString())},e.prototype.lighten=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l+=t/100,n.l=da(n.l),new e(n)},e.prototype.brighten=function(t){void 0===t&&(t=10);var n=this.toRgb();return n.r=Math.max(0,Math.min(255,n.r-Math.round(-t/100*255))),n.g=Math.max(0,Math.min(255,n.g-Math.round(-t/100*255))),n.b=Math.max(0,Math.min(255,n.b-Math.round(-t/100*255))),new e(n)},e.prototype.darken=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l-=t/100,n.l=da(n.l),new e(n)},e.prototype.tint=function(e){return void 0===e&&(e=10),this.mix("white",e)},e.prototype.shade=function(e){return void 0===e&&(e=10),this.mix("black",e)},e.prototype.desaturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s-=t/100,n.s=da(n.s),new e(n)},e.prototype.saturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s+=t/100,n.s=da(n.s),new e(n)},e.prototype.greyscale=function(){return this.desaturate(100)},e.prototype.spin=function(t){var n=this.toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,new e(n)},e.prototype.mix=function(t,n){void 0===n&&(n=50);var r=this.toRgb(),o=new e(t).toRgb(),a=n/100;return new e({r:(o.r-r.r)*a+r.r,g:(o.g-r.g)*a+r.g,b:(o.b-r.b)*a+r.b,a:(o.a-r.a)*a+r.a})},e.prototype.analogous=function(t,n){void 0===t&&(t=6),void 0===n&&(n=30);var r=this.toHsl(),o=360/n,a=[this];for(r.h=(r.h-(o*t>>1)+720)%360;--t;)r.h=(r.h+o)%360,a.push(new e(r));return a},e.prototype.complement=function(){var t=this.toHsl();return t.h=(t.h+180)%360,new e(t)},e.prototype.monochromatic=function(t){void 0===t&&(t=6);for(var n=this.toHsv(),r=n.h,o=n.s,a=n.v,i=[],l=1/t;t--;)i.push(new e({h:r,s:o,v:a})),a=(a+l)%1;return i},e.prototype.splitcomplement=function(){var t=this.toHsl(),n=t.h;return[this,new e({h:(n+72)%360,s:t.s,l:t.l}),new e({h:(n+216)%360,s:t.s,l:t.l})]},e.prototype.onBackground=function(t){var n=this.toRgb(),r=new e(t).toRgb(),o=n.a+r.a*(1-n.a);return new e({r:(n.r*n.a+r.r*r.a*(1-n.a))/o,g:(n.g*n.a+r.g*r.a*(1-n.a))/o,b:(n.b*n.a+r.b*r.a*(1-n.a))/o,a:o})},e.prototype.triad=function(){return this.polyad(3)},e.prototype.tetrad=function(){return this.polyad(4)},e.prototype.polyad=function(t){for(var n=this.toHsl(),r=n.h,o=[this],a=360/t,i=1;i<t;i++)o.push(new e({h:(r+i*a)%360,s:n.s,l:n.l}));return o},e.prototype.equals=function(t){return this.toRgbString()===new e(t).toRgbString()},e}();const nf=(e,t)=>new tf(e).setAlpha(t).toRgbString(),rf=(e,t)=>new tf(e).darken(t).toHexString(),of=e=>{const t=Za(e);return{1:t[0],2:t[1],3:t[2],4:t[3],5:t[4],6:t[5],7:t[6],8:t[4],9:t[5],10:t[6]}},af=(e,t)=>{const n=e||"#fff",r=t||"#000";return{colorBgBase:n,colorTextBase:r,colorText:nf(r,.88),colorTextSecondary:nf(r,.65),colorTextTertiary:nf(r,.45),colorTextQuaternary:nf(r,.25),colorFill:nf(r,.15),colorFillSecondary:nf(r,.06),colorFillTertiary:nf(r,.04),colorFillQuaternary:nf(r,.02),colorBgLayout:rf(n,4),colorBgContainer:rf(n,0),colorBgElevated:rf(n,0),colorBgSpotlight:nf(r,.85),colorBgBlur:"transparent",colorBorder:rf(n,15),colorBorderSecondary:rf(n,6)}},lf=(cf=function(e){const t=Object.keys(Js).map((t=>{const n=Za(e[t]);return new Array(10).fill(1).reduce(((e,r,o)=>(e[`${t}-${o+1}`]=n[o],e[`${t}${o+1}`]=n[o],e)),{})})).reduce(((e,t)=>Object.assign(Object.assign({},e),t)),{});return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},e),t),function(e,t){let{generateColorPalettes:n,generateNeutralColorPalettes:r}=t;const{colorSuccess:o,colorWarning:a,colorError:i,colorInfo:l,colorPrimary:c,colorBgBase:u,colorTextBase:s}=e,f=n(c),d=n(o),p=n(a),h=n(i),m=n(l),y=r(u,s),v=n(e.colorLink||e.colorInfo);return Object.assign(Object.assign({},y),{colorPrimaryBg:f[1],colorPrimaryBgHover:f[2],colorPrimaryBorder:f[3],colorPrimaryBorderHover:f[4],colorPrimaryHover:f[5],colorPrimary:f[6],colorPrimaryActive:f[7],colorPrimaryTextHover:f[8],colorPrimaryText:f[9],colorPrimaryTextActive:f[10],colorSuccessBg:d[1],colorSuccessBgHover:d[2],colorSuccessBorder:d[3],colorSuccessBorderHover:d[4],colorSuccessHover:d[4],colorSuccess:d[6],colorSuccessActive:d[7],colorSuccessTextHover:d[8],colorSuccessText:d[9],colorSuccessTextActive:d[10],colorErrorBg:h[1],colorErrorBgHover:h[2],colorErrorBorder:h[3],colorErrorBorderHover:h[4],colorErrorHover:h[5],colorError:h[6],colorErrorActive:h[7],colorErrorTextHover:h[8],colorErrorText:h[9],colorErrorTextActive:h[10],colorWarningBg:p[1],colorWarningBgHover:p[2],colorWarningBorder:p[3],colorWarningBorderHover:p[4],colorWarningHover:p[4],colorWarning:p[6],colorWarningActive:p[7],colorWarningTextHover:p[8],colorWarningText:p[9],colorWarningTextActive:p[10],colorInfoBg:m[1],colorInfoBgHover:m[2],colorInfoBorder:m[3],colorInfoBorderHover:m[4],colorInfoHover:m[4],colorInfo:m[6],colorInfoActive:m[7],colorInfoTextHover:m[8],colorInfoText:m[9],colorInfoTextActive:m[10],colorLinkHover:v[4],colorLink:v[6],colorLinkActive:v[7],colorBgMask:new tf("#000").setAlpha(.45).toRgbString(),colorWhite:"#fff"})}(e,{generateColorPalettes:of,generateNeutralColorPalettes:af})),(e=>{const t=function(e){const t=new Array(10).fill(null).map(((t,n)=>{const r=n-1,o=e*Math.pow(2.71828,r/5),a=n>1?Math.floor(o):Math.ceil(o);return 2*Math.floor(a/2)}));return t[1]=e,t.map((e=>({size:e,lineHeight:(e+8)/e})))}(e),n=t.map((e=>e.size)),r=t.map((e=>e.lineHeight)),o=n[1],a=n[0],i=n[2],l=r[1],c=r[0],u=r[2];return{fontSizeSM:a,fontSize:o,fontSizeLG:i,fontSizeXL:n[3],fontSizeHeading1:n[6],fontSizeHeading2:n[5],fontSizeHeading3:n[4],fontSizeHeading4:n[3],fontSizeHeading5:n[2],lineHeight:l,lineHeightLG:u,lineHeightSM:c,fontHeight:Math.round(l*o),fontHeightLG:Math.round(u*i),fontHeightSM:Math.round(c*a),lineHeightHeading1:r[6],lineHeightHeading2:r[5],lineHeightHeading3:r[4],lineHeightHeading4:r[3],lineHeightHeading5:r[2]}})(e.fontSize)),function(e){const{sizeUnit:t,sizeStep:n}=e;return{sizeXXL:t*(n+8),sizeXL:t*(n+4),sizeLG:t*(n+2),sizeMD:t*(n+1),sizeMS:t*n,size:t*n,sizeSM:t*(n-1),sizeXS:t*(n-2),sizeXXS:t*(n-3)}}(e)),(e=>{const{controlHeight:t}=e;return{controlHeightSM:.75*t,controlHeightXS:.5*t,controlHeightLG:1.25*t}})(e)),function(e){const{motionUnit:t,motionBase:n,borderRadius:r,lineWidth:o}=e;return Object.assign({motionDurationFast:`${(n+t).toFixed(1)}s`,motionDurationMid:`${(n+2*t).toFixed(1)}s`,motionDurationSlow:`${(n+3*t).toFixed(1)}s`,lineWidthBold:o+1},(e=>{let t=e,n=e,r=e,o=e;return e<6&&e>=5?t=e+1:e<16&&e>=6?t=e+2:e>=16&&(t=16),e<7&&e>=5?n=4:e<8&&e>=7?n=5:e<14&&e>=8?n=6:e<16&&e>=14?n=7:e>=16&&(n=8),e<6&&e>=2?r=1:e>=6&&(r=2),e>4&&e<8?o=4:e>=8&&(o=6),{borderRadius:e,borderRadiusXS:r,borderRadiusSM:n,borderRadiusLG:t,borderRadiusOuter:o}})(r))}(e))},uf=Array.isArray(cf)?cf:[cf],os.has(uf)||os.set(uf,new rs(uf)),os.get(uf));var cf,uf;const sf={token:ef,override:{override:ef},hashed:!0},ff=t.createContext(sf);function df(e){return e>=0&&e<=255}const pf=function(e,t){const{r:n,g:r,b:o,a}=new tf(e).toRgb();if(a<1)return e;const{r:i,g:l,b:c}=new tf(t).toRgb();for(let e=.01;e<=1;e+=.01){const t=Math.round((n-i*(1-e))/e),a=Math.round((r-l*(1-e))/e),u=Math.round((o-c*(1-e))/e);if(df(t)&&df(a)&&df(u))return new tf({r:t,g:a,b:u,a:Math.round(100*e)/100}).toRgbString()}return new tf({r:n,g:r,b:o,a:1}).toRgbString()};var hf=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};function mf(e){const{override:t}=e,n=hf(e,["override"]),r=Object.assign({},t);Object.keys(ef).forEach((e=>{delete r[e]}));const o=Object.assign(Object.assign({},n),r);if(!1===o.motion){const e="0s";o.motionDurationFast=e,o.motionDurationMid=e,o.motionDurationSlow=e}return Object.assign(Object.assign(Object.assign({},o),{colorFillContent:o.colorFillSecondary,colorFillContentHover:o.colorFill,colorFillAlter:o.colorFillQuaternary,colorBgContainerDisabled:o.colorFillTertiary,colorBorderBg:o.colorBgContainer,colorSplit:pf(o.colorBorderSecondary,o.colorBgContainer),colorTextPlaceholder:o.colorTextQuaternary,colorTextDisabled:o.colorTextQuaternary,colorTextHeading:o.colorText,colorTextLabel:o.colorTextSecondary,colorTextDescription:o.colorTextTertiary,colorTextLightSolid:o.colorWhite,colorHighlight:o.colorError,colorBgTextHover:o.colorFillSecondary,colorBgTextActive:o.colorFill,colorIcon:o.colorTextTertiary,colorIconHover:o.colorText,colorErrorOutline:pf(o.colorErrorBg,o.colorBgContainer),colorWarningOutline:pf(o.colorWarningBg,o.colorBgContainer),fontSizeIcon:o.fontSizeSM,lineWidthFocus:4*o.lineWidth,lineWidth:o.lineWidth,controlOutlineWidth:2*o.lineWidth,controlInteractiveSize:o.controlHeight/2,controlItemBgHover:o.colorFillTertiary,controlItemBgActive:o.colorPrimaryBg,controlItemBgActiveHover:o.colorPrimaryBgHover,controlItemBgActiveDisabled:o.colorFill,controlTmpOutline:o.colorFillQuaternary,controlOutline:pf(o.colorPrimaryBg,o.colorBgContainer),lineType:o.lineType,borderRadius:o.borderRadius,borderRadiusXS:o.borderRadiusXS,borderRadiusSM:o.borderRadiusSM,borderRadiusLG:o.borderRadiusLG,fontWeightStrong:600,opacityLoading:.65,linkDecoration:"none",linkHoverDecoration:"none",linkFocusDecoration:"none",controlPaddingHorizontal:12,controlPaddingHorizontalSM:8,paddingXXS:o.sizeXXS,paddingXS:o.sizeXS,paddingSM:o.sizeSM,padding:o.size,paddingMD:o.sizeMD,paddingLG:o.sizeLG,paddingXL:o.sizeXL,paddingContentHorizontalLG:o.sizeLG,paddingContentVerticalLG:o.sizeMS,paddingContentHorizontal:o.sizeMS,paddingContentVertical:o.sizeSM,paddingContentHorizontalSM:o.size,paddingContentVerticalSM:o.sizeXS,marginXXS:o.sizeXXS,marginXS:o.sizeXS,marginSM:o.sizeSM,margin:o.size,marginMD:o.sizeMD,marginLG:o.sizeLG,marginXL:o.sizeXL,marginXXL:o.sizeXXL,boxShadow:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowSecondary:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowTertiary:"\n      0 1px 2px 0 rgba(0, 0, 0, 0.03),\n      0 1px 6px -1px rgba(0, 0, 0, 0.02),\n      0 2px 4px 0 rgba(0, 0, 0, 0.02)\n    ",screenXS:480,screenXSMin:480,screenXSMax:575,screenSM:576,screenSMMin:576,screenSMMax:767,screenMD:768,screenMDMin:768,screenMDMax:991,screenLG:992,screenLGMin:992,screenLGMax:1199,screenXL:1200,screenXLMin:1200,screenXLMax:1599,screenXXL:1600,screenXXLMin:1600,boxShadowPopoverArrow:"2px 2px 5px rgba(0, 0, 0, 0.05)",boxShadowCard:`\n      0 1px 2px -2px ${new tf("rgba(0, 0, 0, 0.16)").toRgbString()},\n      0 3px 6px 0 ${new tf("rgba(0, 0, 0, 0.12)").toRgbString()},\n      0 5px 12px 4px ${new tf("rgba(0, 0, 0, 0.09)").toRgbString()}\n    `,boxShadowDrawerRight:"\n      -6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      -3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      -9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerLeft:"\n      6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerUp:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerDown:"\n      0 -6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 -3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 -9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowTabsOverflowLeft:"inset 10px 0 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowRight:"inset -10px 0 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowTop:"inset 0 10px 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowBottom:"inset 0 -10px 8px -8px rgba(0, 0, 0, 0.08)"}),r)}var yf=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};const vf={lineHeight:!0,lineHeightSM:!0,lineHeightLG:!0,lineHeightHeading1:!0,lineHeightHeading2:!0,lineHeightHeading3:!0,lineHeightHeading4:!0,lineHeightHeading5:!0,opacityLoading:!0,fontWeightStrong:!0,zIndexPopupBase:!0,zIndexBase:!0},gf={size:!0,sizeSM:!0,sizeLG:!0,sizeMD:!0,sizeXS:!0,sizeXXS:!0,sizeMS:!0,sizeXL:!0,sizeXXL:!0,sizeUnit:!0,sizeStep:!0,motionBase:!0,motionUnit:!0},bf={screenXS:!0,screenXSMin:!0,screenXSMax:!0,screenSM:!0,screenSMMin:!0,screenSMMax:!0,screenMD:!0,screenMDMin:!0,screenMDMax:!0,screenLG:!0,screenLGMin:!0,screenLGMax:!0,screenXL:!0,screenXLMin:!0,screenXLMax:!0,screenXXL:!0,screenXXLMin:!0},wf=(e,t,n)=>{const r=n.getDerivativeToken(e),{override:o}=t,a=yf(t,["override"]);let i=Object.assign(Object.assign({},r),{override:o});return i=mf(i),a&&Object.entries(a).forEach((e=>{let[t,n]=e;const{theme:r}=n,o=yf(n,["theme"]);let a=o;r&&(a=wf(Object.assign(Object.assign({},i),o),{override:o},r)),i[t]=a})),i};function xf(){const{token:e,hashed:n,theme:r,override:o,cssVar:a}=t.useContext(ff),i=`${Qs}-${n||""}`,l=r||lf,[c,u,s]=Ns(l,[ef,e],{salt:i,override:o,getComputedToken:wf,formatToken:mf,cssVar:a&&{prefix:a.prefix,key:a.key,unitless:vf,ignore:gf,preserve:bf}});return[l,s,n?u:"",c,a]}const Ef=Lc((function e(){Cc(this,e)}));let Af=function(e){jc(n,e);var t=Nc(n);function n(e){var r;return Cc(this,n),(r=t.call(this)).result=0,e instanceof n?r.result=e.result:"number"==typeof e&&(r.result=e),r}return Lc(n,[{key:"add",value:function(e){return e instanceof n?this.result+=e.result:"number"==typeof e&&(this.result+=e),this}},{key:"sub",value:function(e){return e instanceof n?this.result-=e.result:"number"==typeof e&&(this.result-=e),this}},{key:"mul",value:function(e){return e instanceof n?this.result*=e.result:"number"==typeof e&&(this.result*=e),this}},{key:"div",value:function(e){return e instanceof n?this.result/=e.result:"number"==typeof e&&(this.result/=e),this}},{key:"equal",value:function(){return this.result}}]),n}(Ef);const Sf="CALC_UNIT";function Cf(e){return"number"==typeof e?`${e}${Sf}`:e}let kf=function(e){jc(n,e);var t=Nc(n);function n(e){var r;return Cc(this,n),(r=t.call(this)).result="",e instanceof n?r.result=`(${e.result})`:"number"==typeof e?r.result=Cf(e):"string"==typeof e&&(r.result=e),r}return Lc(n,[{key:"add",value:function(e){return e instanceof n?this.result=`${this.result} + ${e.getResult()}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} + ${Cf(e)}`),this.lowPriority=!0,this}},{key:"sub",value:function(e){return e instanceof n?this.result=`${this.result} - ${e.getResult()}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} - ${Cf(e)}`),this.lowPriority=!0,this}},{key:"mul",value:function(e){return this.lowPriority&&(this.result=`(${this.result})`),e instanceof n?this.result=`${this.result} * ${e.getResult(!0)}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} * ${e}`),this.lowPriority=!1,this}},{key:"div",value:function(e){return this.lowPriority&&(this.result=`(${this.result})`),e instanceof n?this.result=`${this.result} / ${e.getResult(!0)}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} / ${e}`),this.lowPriority=!1,this}},{key:"getResult",value:function(e){return this.lowPriority||e?`(${this.result})`:this.result}},{key:"equal",value:function(e){const{unit:t=!0}=e||{},n=new RegExp(`${Sf}`,"g");return this.result=this.result.replace(n,t?"px":""),void 0!==this.lowPriority?`calc(${this.result})`:this.result}}]),n}(Ef);const Lf="undefined"!=typeof CSSINJS_STATISTIC;let jf=!0;function Of(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];if(!Lf)return Object.assign.apply(Object,[{}].concat(t));jf=!1;const r={};return t.forEach((e=>{Object.keys(e).forEach((t=>{Object.defineProperty(r,t,{configurable:!0,enumerable:!0,get:()=>e[t]})}))})),jf=!0,r}const Nf={};function _f(){}const Bf=(e,t,n)=>{var r;return"function"==typeof n?n(Of(t,null!==(r=t[e])&&void 0!==r?r:{})):null!=n?n:{}},Tf=(e,t,n,r)=>{const o=Object.assign({},t[e]);if(null==r?void 0:r.deprecatedTokens){const{deprecatedTokens:e}=r;e.forEach((e=>{let[t,n]=e;var r;((null==o?void 0:o[t])||(null==o?void 0:o[n]))&&(null!==(r=o[n])&&void 0!==r||(o[n]=null==o?void 0:o[t]))}))}let a=Object.assign(Object.assign({},n),o);return(null==r?void 0:r.format)&&(a=r.format(a)),Object.keys(a).forEach((e=>{a[e]===t[e]&&delete a[e]})),a};function Pf(e,n,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const a=Array.isArray(e)?e:[e,e],[i]=a,l=a.join("-");return e=>{const[a,c,u,s,f]=xf(),{getPrefixCls:d,iconPrefixCls:p,csp:h}=(0,t.useContext)(Uu),m=d(),y=f?"css":"js",v=(e=>{const t="css"===e?kf:Af;return e=>new t(e)})(y),{max:g,min:b}=function(e){return"js"===e?{max:Math.max,min:Math.min}:{max:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return`max(${t.map((e=>hs(e))).join(",")})`},min:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return`min(${t.map((e=>hs(e))).join(",")})`}}}(y),w={theme:a,token:s,hashId:u,nonce:()=>null==h?void 0:h.nonce,clientOnly:o.clientOnly,order:o.order||-999};Us(Object.assign(Object.assign({},w),{clientOnly:!1,path:["Shared",m]}),(()=>[{"&":Vs(s)}])),((e,t)=>{const[n,r]=xf();Us({theme:n,token:r,hashId:"",path:["ant-design-icons",e],nonce:()=>null==t?void 0:t.nonce},(()=>[{[`.${e}`]:Object.assign(Object.assign({},{display:"inline-flex",alignItems:"center",color:"inherit",fontStyle:"normal",lineHeight:0,textAlign:"center",textTransform:"none",verticalAlign:"-0.125em",textRendering:"optimizeLegibility","-webkit-font-smoothing":"antialiased","-moz-osx-font-smoothing":"grayscale","> *":{lineHeight:1},svg:{display:"inline-block"}}),{[`.${e} .${e}-icon`]:{display:"block"}})}]))})(p,h);const x=Us(Object.assign(Object.assign({},w),{path:[l,e,p]}),(()=>{if(!1===o.injectStyle)return[];const{token:t,flush:a}=function(e){let t,n=e,r=_f;return Lf&&"undefined"!=typeof Proxy&&(t=new Set,n=new Proxy(e,{get:(e,n)=>(jf&&t.add(n),e[n])}),r=(e,n)=>{var r;Nf[e]={global:Array.from(t),component:Object.assign(Object.assign({},null===(r=Nf[e])||void 0===r?void 0:r.component),n)}}),{token:n,keys:t,flush:r}}(s),l=Bf(i,c,r),d=`.${e}`,h=Tf(i,c,l,{deprecatedTokens:o.deprecatedTokens,format:o.format});f&&Object.keys(l).forEach((e=>{l[e]=`var(${ys(e,((e,t)=>`${[t,e.replace(/([A-Z]+)([A-Z][a-z]+)/g,"$1-$2").replace(/([a-z])([A-Z])/g,"$1-$2")].filter(Boolean).join("-")}`)(i,f.prefix))})`}));const y=Of(t,{componentCls:d,prefixCls:e,iconCls:`.${p}`,antCls:`.${m}`,calc:v,max:g,min:b},f?l:h),w=n(y,{hashId:u,prefixCls:e,rootPrefixCls:m,iconPrefixCls:p});return a(i,h),[!1===o.resetStyle?null:Ks(y,e),w]}));return[x,sa()(u,null==f?void 0:f.key)]}}const If=e=>{const{componentCls:t,contentBg:n,padding:r,headerBg:o,headerPadding:a,collapseHeaderPaddingSM:i,collapseHeaderPaddingLG:l,collapsePanelBorderRadius:c,lineWidth:u,lineType:s,colorBorder:f,colorText:d,colorTextHeading:p,colorTextDisabled:h,fontSizeLG:m,lineHeight:y,lineHeightLG:v,marginSM:g,paddingSM:b,paddingLG:w,paddingXS:x,motionDurationSlow:E,fontSizeIcon:A,contentPadding:S,fontHeight:C,fontHeightLG:k}=e,L=`${hs(u)} ${s} ${f}`;return{[t]:Object.assign(Object.assign({},qs(e)),{backgroundColor:o,border:L,borderBottom:0,borderRadius:c,"&-rtl":{direction:"rtl"},[`& > ${t}-item`]:{borderBottom:L,"&:last-child":{[`\n            &,\n            & > ${t}-header`]:{borderRadius:`0 0 ${hs(c)} ${hs(c)}`}},[`> ${t}-header`]:{position:"relative",display:"flex",flexWrap:"nowrap",alignItems:"flex-start",padding:a,color:p,lineHeight:y,cursor:"pointer",transition:`all ${E}, visibility 0s`,[`> ${t}-header-text`]:{flex:"auto"},"&:focus":{outline:"none"},[`${t}-expand-icon`]:{height:C,display:"flex",alignItems:"center",paddingInlineEnd:g},[`${t}-arrow`]:Object.assign(Object.assign({},{display:"inline-flex",alignItems:"center",color:"inherit",fontStyle:"normal",lineHeight:0,textAlign:"center",textTransform:"none",verticalAlign:"-0.125em",textRendering:"optimizeLegibility","-webkit-font-smoothing":"antialiased","-moz-osx-font-smoothing":"grayscale","> *":{lineHeight:1},svg:{display:"inline-block"}}),{fontSize:A,svg:{transition:`transform ${E}`}}),[`${t}-header-text`]:{marginInlineEnd:"auto"}},[`${t}-icon-collapsible-only`]:{cursor:"unset",[`${t}-expand-icon`]:{cursor:"pointer"}}},[`${t}-content`]:{color:d,backgroundColor:n,borderTop:L,[`& > ${t}-content-box`]:{padding:S},"&-hidden":{display:"none"}},"&-small":{[`> ${t}-item`]:{[`> ${t}-header`]:{padding:i,paddingInlineStart:x,[`> ${t}-expand-icon`]:{marginInlineStart:e.calc(b).sub(x).equal()}},[`> ${t}-content > ${t}-content-box`]:{padding:b}}},"&-large":{[`> ${t}-item`]:{fontSize:m,lineHeight:v,[`> ${t}-header`]:{padding:l,paddingInlineStart:r,[`> ${t}-expand-icon`]:{height:k,marginInlineStart:e.calc(w).sub(r).equal()}},[`> ${t}-content > ${t}-content-box`]:{padding:w}}},[`${t}-item:last-child`]:{[`> ${t}-content`]:{borderRadius:`0 0 ${hs(c)} ${hs(c)}`}},[`& ${t}-item-disabled > ${t}-header`]:{"\n          &,\n          & > .arrow\n        ":{color:h,cursor:"not-allowed"}},[`&${t}-icon-position-end`]:{[`& > ${t}-item`]:{[`> ${t}-header`]:{[`${t}-expand-icon`]:{order:1,paddingInlineEnd:0,paddingInlineStart:g}}}}})}},zf=e=>{const{componentCls:t}=e;return{[`${t}-rtl`]:{[`> ${t}-item > ${t}-header ${t}-arrow svg`]:{transform:"rotate(180deg)"}}}},Mf=e=>{const{componentCls:t,headerBg:n,paddingXXS:r,colorBorder:o}=e;return{[`${t}-borderless`]:{backgroundColor:n,border:0,[`> ${t}-item`]:{borderBottom:`1px solid ${o}`},[`\n        > ${t}-item:last-child,\n        > ${t}-item:last-child ${t}-header\n      `]:{borderRadius:0},[`> ${t}-item:last-child`]:{borderBottom:0},[`> ${t}-item > ${t}-content`]:{backgroundColor:"transparent",borderTop:0},[`> ${t}-item > ${t}-content > ${t}-content-box`]:{paddingTop:r}}}},Rf=e=>{const{componentCls:t,paddingSM:n}=e;return{[`${t}-ghost`]:{backgroundColor:"transparent",border:0,[`> ${t}-item`]:{borderBottom:0,[`> ${t}-content`]:{backgroundColor:"transparent",border:0,[`> ${t}-content-box`]:{paddingBlock:n}}}}}},Ff=((e,n,r,o)=>{const a=Pf(e,(e=>{const t=Of(e,{collapseHeaderPaddingSM:`${hs(e.paddingXS)} ${hs(e.paddingSM)}`,collapseHeaderPaddingLG:`${hs(e.padding)} ${hs(e.paddingLG)}`,collapsePanelBorderRadius:e.borderRadiusLG});return[If(t),Mf(t),Rf(t),zf(t),Xs(t)]}),r,o),i=((e,n,r)=>{function o(t){return`${e}${t.slice(0,1).toUpperCase()}${t.slice(1)}`}const{unitless:a={},injectStyle:i=!0}={},l={[o("zIndexPopup")]:!0};Object.keys(a).forEach((e=>{l[o(e)]=a[e]}));const c=r=>{let{rootCls:a,cssVar:i}=r;const[,c]=xf();return function(e,n){var r=e.key,o=e.prefix,a=e.unitless,i=e.ignore,l=e.token,c=e.scope,u=void 0===c?"":c,s=(0,t.useContext)(es),f=s.cache.instanceId,d=s.container,p=l._tokenKey,h=[].concat(hc(e.path),[r,u,p]),m=As(Hs,h,(function(){var e=n(),t=oa(gs(e,r,{prefix:o,unitless:a,ignore:i,scope:u}),2),l=t[0],c=t[1];return[l,c,Ds(h,c),r]}),(function(e){var t=oa(e,3)[2];ps&&ii(t,{mark:Xu})}),(function(e){var t=oa(e,3),n=t[1],o=t[2];if(n){var a=li(n,o,{mark:Xu,prepend:"queue",attachTo:d,priority:-999});a[Qu]=f,a.setAttribute(Ku,r)}}))}({path:[e],prefix:i.prefix,key:null==i?void 0:i.key,unitless:Object.assign(Object.assign({},vf),l),ignore:gf,token:c,scope:a},(()=>{const t=Bf(e,c,n),r=Tf(e,c,t,{format:void 0,deprecatedTokens:void 0});return Object.keys(t).forEach((e=>{r[o(e)]=r[e],delete r[e]})),r})),null};return n=>{const[,,,,r]=xf();return o=>i&&r?t.createElement(t.Fragment,null,t.createElement(c,{rootCls:n,cssVar:r,component:e}),o):o}})(e,r);return function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;const[,n]=a(e);return[i(t),n]}})("Collapse",0,(e=>({headerPadding:`${e.paddingSM}px ${e.padding}px`,headerBg:e.colorFillAlter,contentPadding:`${e.padding}px 16px`,contentBg:e.colorBgContainer}))),Gf=t.forwardRef(((e,n)=>{const{getPrefixCls:r,direction:o,collapse:a}=t.useContext(Uu),{prefixCls:i,className:l,rootClassName:c,style:u,bordered:s=!0,ghost:f,size:d,expandIconPosition:p="start",children:h,expandIcon:m}=e,y=(e=>{const n=t.useContext(Wu);return t.useMemo((()=>e?"string"==typeof e?null!=e?e:n:e instanceof Function?e(n):n:n),[e,n])})((e=>{var t;return null!==(t=null!=d?d:e)&&void 0!==t?t:"middle"})),v=r("collapse",i),g=r(),[b,w]=Ff(v),x=t.useMemo((()=>"left"===p?"start":"right"===p?"end":p),[p]),E=sa()(`${v}-icon-position-${x}`,{[`${v}-borderless`]:!s,[`${v}-rtl`]:"rtl"===o,[`${v}-ghost`]:!!f,[`${v}-${y}`]:"middle"!==y},null==a?void 0:a.className,l,c,w),A=Object.assign(Object.assign({},function(){return{motionName:`${arguments.length>0&&void 0!==arguments[0]?arguments[0]:"ant"}-motion-collapse`,onAppearStart:Ru,onEnterStart:Ru,onAppearActive:Fu,onEnterActive:Fu,onLeaveStart:Gu,onLeaveActive:Ru,onAppearEnd:Du,onEnterEnd:Du,onLeaveEnd:Du,motionDeadline:500}}(g)),{motionAppear:!1,leavedClassName:`${v}-content-hidden`}),S=t.useMemo((()=>h?Ac(h).map(((e,t)=>{var n,r;if(null===(n=e.props)||void 0===n?void 0:n.disabled){const n=null!==(r=e.key)&&void 0!==r?r:String(t),{disabled:o,collapsible:a}=e.props;return $u(e,Object.assign(Object.assign({},Mu(e.props,["disabled"])),{key:n,collapsible:null!=a?a:o?"disabled":void 0}))}return e})):null),[h]);return b(t.createElement(zu,Object.assign({ref:n,openMotion:A},Mu(e,["rootClassName"]),{expandIcon:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const n=m?m(e):t.createElement(pc,{rotate:e.isActive?90:void 0});return $u(n,(()=>({className:sa()(n.props.className,`${v}-arrow`)})))},prefixCls:v,className:E,style:Object.assign(Object.assign({},null==a?void 0:a.style),u)}),S))})),Df=Object.assign(Gf,{Panel:Yu});function Zf(e){return Zf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zf(e)}function $f(){$f=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Zf(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Zf(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Uf(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Hf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Wf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wf(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Yf=function(){var e=Hf((0,t.useState)([]),2),n=e[0],r=e[1],o=Hf((0,t.useState)([]),2),a=o[0],i=o[1],l=Hf((0,t.useState)(null),2),c=(l[0],l[1]),u=Hf((0,t.useState)(!0),2),s=u[0],f=u[1];(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=$f().mark((function e(){var t,n,o,a,l;return $f().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/riddles",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/riddles",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:o=e.sent,a=n.data,l=o.data,r(a[0]),i(l[0]),console.log("podaci iz zagonetki",a),f(!1),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),c(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Uf(a,r,o,i,l,"next",e)}function l(e){Uf(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=n.answer,h=a.answer;return s?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement("div",{className:"trivia"},t.createElement("h2",null,"Riddles"),t.createElement("h3",null,n.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("h3",null,a.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},a.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}))};function qf(e){return qf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},qf(e)}function Vf(){Vf=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==qf(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(qf(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Kf(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Xf(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Kf(a,r,o,i,l,"next",e)}function l(e){Kf(a,r,o,i,l,"throw",e)}i(void 0)}))}}function Qf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Jf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Jf(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Jf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ed=function(){var e=Qf((0,t.useState)(null),2),n=(e[0],e[1]),r=Qf((0,t.useState)([]),2),o=r[0],a=r[1],i=Qf((0,t.useState)([]),2),l=i[0],c=i[1];(0,t.useEffect)((function(){u(),s()}),[]);var u=function(){var e=Xf(Vf().mark((function e(){var t,r;return Vf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Vr.get("https://yesno.wtf/api");case 4:t=e.sent,r=t.data,console.log("randum sala",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}(),s=function(){var e=Xf(Vf().mark((function e(){var t,r;return Vf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Vr.get("https://www.punapi.rest/api/pun");case 4:t=e.sent,r=t.data,console.log("random punapi",r),c(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"jokesMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Random GIF"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,t.createElement("img",{src:o.image}))),t.createElement("tr",null,t.createElement("td",{className:"borderGif"},o.answer)),t.createElement("tr",null,t.createElement("td",{className:"pun"},"Pun")),t.createElement("tr",null,t.createElement("td",null,l.pun)))))};function td(e){return td="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},td(e)}function nd(){nd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==td(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(td(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function rd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function od(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ad(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ad(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ad(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const id=function(){var e=od((0,t.useState)(null),2),n=(e[0],e[1]),r=od((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=nd().mark((function e(){var t,r;return nd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Vr.get("https://api.api-ninjas.com/v1/dadjokes?limit=2",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,r=t.data,console.log("randum tatine sale",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){rd(a,r,o,i,l,"next",e)}function l(e){rd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"dadJokes"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Dad jokes"))),o.map((function(e){return t.createElement("tbody",{key:e.joke},t.createElement("tr",null,t.createElement("td",{className:"border"},e.joke)))}))))};function ld(e){return ld="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ld(e)}function cd(){cd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==ld(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(ld(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ud(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function sd(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ud(a,r,o,i,l,"next",e)}function l(e){ud(a,r,o,i,l,"throw",e)}i(void 0)}))}}function fd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return dd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const pd=function(){var e=fd((0,t.useState)(null),2),n=(e[0],e[1]),r=fd((0,t.useState)([]),2),o=r[0],a=r[1],i=fd((0,t.useState)([]),2),l=i[0],c=i[1];(0,t.useEffect)((function(){u(),f()}),[]);var u=function(){var e=sd(cd().mark((function e(){var t,r;return cd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Vr.get("https://api.chucknorris.io/jokes/random");case 4:t=e.sent,r=t.data,console.log("chuk norris sale",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}(),s=Math.random(),f=function(){var e=sd(cd().mark((function e(){var t;return cd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://robohash.org/set_set1/".concat(s,".png"),e.prev=1,e.next=4,Vr.get(t);case 4:e.sent,console.log("robot randum slike",s),c(t),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"dadJokes"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},"Chuk Norris jokes"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,o.value)),t.createElement("tr",null,t.createElement("td",{className:"borderChuk"},"Created: ",o.created_at)),t.createElement("tr",null,t.createElement("td",null,t.createElement("img",{src:l}))))))};function hd(e){return hd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hd(e)}function md(){md=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==hd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(hd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function yd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function vd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return gd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const bd=function(){var e=vd((0,t.useState)(null),2),n=(e[0],e[1]),r=vd((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=md().mark((function e(){var t,r;return md().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Vr.get("https://v2.jokeapi.dev/joke/Any?safe-mode");case 4:t=e.sent,r=t.data,console.log("random jokes",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){yd(a,r,o,i,l,"next",e)}function l(e){yd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),l=o.delivery;return t.createElement(t.Fragment,null,t.createElement("div",{className:"jokeMain"},t.createElement("h3",null,"Joke "),t.createElement("h3",null,"Category: ",o.category),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"jokeAnswer"},o.setup,"  ",o.joke),children:t.createElement("p",{className:"jokeAns"},l),showArrow:!1}]})))};function wd(e){return wd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wd(e)}function xd(){xd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==wd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(wd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Ed(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Ad(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Sd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Sd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Cd=function(){var e=Ad((0,t.useState)(null),2),n=(e[0],e[1]),r=Ad((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=xd().mark((function e(){var t,r;return xd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Vr.get("https://official-joke-api.appspot.com/random_joke");case 4:t=e.sent,r=t.data,console.log("oficial jokes",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ed(a,r,o,i,l,"next",e)}function l(e){Ed(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),l=o.punchline;return t.createElement(t.Fragment,null,t.createElement("div",{className:"jokeMain"},t.createElement("h3",null,"Random Joke"),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"jokeAnswer"},o.setup),children:t.createElement("p",{className:"jokeAns"},l),showArrow:!1}]})))};function kd(e){return kd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kd(e)}function Ld(){Ld=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==kd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(kd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function jd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Od(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Nd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Nd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const _d=function(){var e=Od((0,t.useState)(null),2),n=(e[0],e[1]),r=Od((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=Ld().mark((function e(){var t,r;return Ld().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Vr.get("https://api.api-ninjas.com/v1/jokes?limit=3",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,r=t.data,console.log("rezultat gradova",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){jd(a,r,o,i,l,"next",e)}function l(e){jd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"dadJokes"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null)),t.createElement("tr",null,t.createElement("th",null,"Random Jokes"))),o.map((function(e){return t.createElement("tbody",{key:e.joke},t.createElement("tr",null,t.createElement("td",{className:"border"},e.joke)))}))))};function Bd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Td=function(){var e,n,r=(e=(0,t.useState)(null),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return Bd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Bd(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return r[0],r[1],t.createElement(t.Fragment,null,t.createElement("div",{className:"jokesText"},t.createElement("div",null,t.createElement(bd,null),t.createElement(Cd,null)),t.createElement("div",null,t.createElement(ed,null)),t.createElement("div",null,t.createElement(id,null),t.createElement(_d,null),t.createElement(pd,null))))};function Pd(e){return Pd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Pd(e)}function Id(){Id=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Pd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Pd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function zd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Md(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Rd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Fd=function(e){var n=Md((0,t.useState)([]),2),r=n[0],o=n[1],a=Md((0,t.useState)([]),2),i=a[0],l=a[1],c=Md((0,t.useState)(null),2),u=(c[0],c[1]),s=Md((0,t.useState)(!0),2),f=s[0],d=s[1];Pt().triviaCat,(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=Id().mark((function e(){var t,n,r,a,i;return Id().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=artliterature",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=artliterature",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),console.log("podaci iz  trivia",a),d(!1),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),u(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){zd(a,r,o,i,l,"next",e)}function l(e){zd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Art & Literature"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]}))};function Gd(e){return Gd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gd(e)}function Dd(){Dd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Gd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Gd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Zd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function $d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ud(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ud(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ud(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Hd=function(e){var n=$d((0,t.useState)([]),2),r=n[0],o=n[1],a=$d((0,t.useState)([]),2),i=a[0],l=a[1],c=$d((0,t.useState)(null),2),u=(c[0],c[1]),s=$d((0,t.useState)(!0),2),f=s[0],d=s[1];Pt().triviaCat,(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=Dd().mark((function e(){var t,n,r,a,i;return Dd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=sciencenature",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=sciencenature",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),console.log("podaci iz  trivia",a),d(!1),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),u(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Zd(a,r,o,i,l,"next",e)}function l(e){Zd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Science & Nature"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]}))};function Wd(e){return Wd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wd(e)}function Yd(){Yd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Wd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Wd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function qd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Vd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Xd=function(e){var n=Vd((0,t.useState)([]),2),r=n[0],o=n[1],a=Vd((0,t.useState)([]),2),i=a[0],l=a[1],c=Vd((0,t.useState)(null),2),u=(c[0],c[1]),s=Vd((0,t.useState)(!0),2),f=s[0],d=s[1];Pt(),(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=Yd().mark((function e(){var t,n,r,a,i;return Yd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=general",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=general",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),console.log("podaci iz  trivia general",a),d(!1),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),u(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){qd(a,r,o,i,l,"next",e)}function l(e){qd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement("div",{className:"trivia"},t.createElement("h3",null,"General"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]}))};function Qd(e){return Qd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qd(e)}function Jd(){Jd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Qd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Qd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ep(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function tp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return np(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?np(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function np(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const rp=function(e){var n=tp((0,t.useState)([]),2),r=n[0],o=n[1],a=tp((0,t.useState)([]),2),i=a[0],l=a[1],c=tp((0,t.useState)(null),2),u=(c[0],c[1]),s=tp((0,t.useState)(!0),2),f=s[0],d=s[1];Pt().triviaCat,(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=Jd().mark((function e(){var t,n,r,a,i;return Jd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=fooddrink",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=fooddrink",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ep(a,r,o,i,l,"next",e)}function l(e){ep(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Food & Drink"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function op(e){return op="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},op(e)}function ap(){ap=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==op(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(op(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ip(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function lp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const up=function(e){var n=lp((0,t.useState)([]),2),r=n[0],o=n[1],a=lp((0,t.useState)([]),2),i=a[0],l=a[1],c=lp((0,t.useState)(null),2),u=(c[0],c[1]),s=lp((0,t.useState)(!0),2),f=s[0],d=s[1];Pt().triviaCat,(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=ap().mark((function e(){var t,n,r,a,i;return ap().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=peopleplaces",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=peopleplaces",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ip(a,r,o,i,l,"next",e)}function l(e){ip(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"People & Place"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function sp(e){return sp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sp(e)}function fp(){fp=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==sp(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(sp(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function dp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function pp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return hp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?hp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const mp=function(e){var n=pp((0,t.useState)([]),2),r=n[0],o=n[1],a=pp((0,t.useState)([]),2),i=a[0],l=a[1],c=pp((0,t.useState)(null),2),u=(c[0],c[1]),s=pp((0,t.useState)(!0),2),f=s[0],d=s[1];Pt().triviaCat,(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=fp().mark((function e(){var t,n,r,a,i;return fp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=historyholidays",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=historyholidays",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){dp(a,r,o,i,l,"next",e)}function l(e){dp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"History & Holidays"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function yp(e){return yp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yp(e)}function vp(){vp=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==yp(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(yp(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function gp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function bp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return wp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?wp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const xp=function(e){var n=bp((0,t.useState)([]),2),r=n[0],o=n[1],a=bp((0,t.useState)([]),2),i=a[0],l=a[1],c=bp((0,t.useState)(null),2),u=(c[0],c[1]),s=bp((0,t.useState)(!0),2),f=s[0],d=s[1];Pt().triviaCat,(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=vp().mark((function e(){var t,n,r,a,i;return vp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=geography",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=geography",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){gp(a,r,o,i,l,"next",e)}function l(e){gp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Geography"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function Ep(e){return Ep="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ep(e)}function Ap(){Ap=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Ep(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ep(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Sp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Cp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return kp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?kp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Lp=function(e){var n=Cp((0,t.useState)([]),2),r=n[0],o=n[1],a=Cp((0,t.useState)([]),2),i=a[0],l=a[1],c=Cp((0,t.useState)(null),2),u=(c[0],c[1]),s=Cp((0,t.useState)(!0),2),f=s[0],d=s[1];Pt().triviaCat,(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=Ap().mark((function e(){var t,n,r,a,i;return Ap().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=entertainment",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=entertainment",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Sp(a,r,o,i,l,"next",e)}function l(e){Sp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Entertainment"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function jp(e){return jp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jp(e)}function Op(){Op=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==jp(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(jp(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Np(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function _p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Bp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Bp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Tp=function(e){var n=_p((0,t.useState)([]),2),r=n[0],o=n[1],a=_p((0,t.useState)([]),2),i=a[0],l=a[1],c=_p((0,t.useState)(null),2),u=(c[0],c[1]),s=_p((0,t.useState)(!0),2),f=s[0],d=s[1];Pt().triviaCat,(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=Op().mark((function e(){var t,n,r,a,i;return Op().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=toysgames",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=toysgames",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Np(a,r,o,i,l,"next",e)}function l(e){Np(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Toys & Games"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function Pp(e){return Pp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Pp(e)}function Ip(){Ip=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Pp(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Pp(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function zp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Mp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Rp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Fp=function(e){var n=Mp((0,t.useState)([]),2),r=n[0],o=n[1],a=Mp((0,t.useState)([]),2),i=a[0],l=a[1],c=Mp((0,t.useState)(null),2),u=(c[0],c[1]),s=Mp((0,t.useState)(!0),2),f=s[0],d=s[1];Pt().triviaCat,(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=Ip().mark((function e(){var t,n,r,a,i;return Ip().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=music",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=music",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){zp(a,r,o,i,l,"next",e)}function l(e){zp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Music"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function Gp(e){return Gp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gp(e)}function Dp(){Dp=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Gp(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Gp(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Zp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function $p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Up(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Up(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Up(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Hp=function(e){var n=$p((0,t.useState)([]),2),r=n[0],o=n[1],a=$p((0,t.useState)([]),2),i=a[0],l=a[1],c=$p((0,t.useState)(null),2),u=(c[0],c[1]),s=$p((0,t.useState)(!0),2),f=s[0],d=s[1];Pt().triviaCat,(0,t.useEffect)((function(){p()}),[]);var p=function(){var e,t=(e=Dp().mark((function e(){var t,n,r,a,i;return Dp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=language",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=language",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),d(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Zp(a,r,o,i,l,"next",e)}function l(e){Zp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),h=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Language"),t.createElement("p",null,r.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function Wp(e){return Wp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wp(e)}function Yp(){Yp=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Wp(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Wp(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function qp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Vp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Xp=function(){var e=Vp((0,t.useState)([]),2),n=e[0],r=e[1],o=Vp((0,t.useState)([]),2),a=o[0],i=o[1],l=Vp((0,t.useState)(null),2),c=(l[0],l[1]),u=Vp((0,t.useState)(!0),2),s=u[0],f=u[1];(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=Yp().mark((function e(){var t,n,o,a,l;return Yp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=religionmythology",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=religionmythology",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:o=e.sent,a=n.data[0],l=o.data[0],r(a),i(l),console.log("prvi podaci religija",a),console.log("drugi podaci religija",l),f(!1),e.next=21;break;case 18:e.prev=18,e.t0=e.catch(2),c(e.t0);case 21:case"end":return e.stop()}}),e,null,[[2,18]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){qp(a,r,o,i,l,"next",e)}function l(e){qp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=n.answer,h=a.answer;return s?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Religion & Mythology"),t.createElement("p",null,n.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,a.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},a.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]})))};function Qp(e){return Qp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qp(e)}function Jp(){Jp=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Qp(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Qp(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function eh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function th(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return nh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const rh=function(){var e=th((0,t.useState)([]),2),n=e[0],r=e[1],o=th((0,t.useState)([]),2),a=o[0],i=o[1],l=th((0,t.useState)(null),2),c=(l[0],l[1]),u=th((0,t.useState)(!0),2),s=u[0],f=u[1];(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=Jp().mark((function e(){var t,n,o,a,l;return Jp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=sportsleisure",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=sportsleisure",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:o=e.sent,a=n.data[0],l=o.data[0],r(a),i(l),f(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),c(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){eh(a,r,o,i,l,"next",e)}function l(e){eh(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=n.answer,h=a.answer;return s?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Sports & Leisure"),t.createElement("p",null,n.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,a.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},a.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]})))};function oh(e){return oh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},oh(e)}function ah(){ah=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==oh(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(oh(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ih(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function lh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ch(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ch(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ch(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const uh=function(){var e=lh((0,t.useState)([]),2),n=e[0],r=e[1],o=lh((0,t.useState)([]),2),a=o[0],i=o[1],l=lh((0,t.useState)(null),2),c=(l[0],l[1]),u=lh((0,t.useState)(!0),2),s=u[0],f=u[1];(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=ah().mark((function e(){var t,n,o,a,l;return ah().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=mathematics",e.prev=2,e.next=5,Vr.get("https://api.api-ninjas.com/v1/trivia?category=mathematics",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,Vr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:o=e.sent,a=n.data[0],l=o.data[0],r(a),i(l),f(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),c(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ih(a,r,o,i,l,"next",e)}function l(e){ih(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=n.answer,h=a.answer;return s?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Mathematics"),t.createElement("p",null,n.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,a.title),t.createElement(Df,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},a.question),children:t.createElement("p",{className:"triviaAns"},h),showArrow:!1}]})))};var sh=o(9378),fh=o(6523),dh=o(9766),ph=o(8010);const hh=["sx"],mh=["className","component"];var yh=o(7078);const vh=(0,ue.Z)("MuiBox",["root"]),gh=(0,x.Z)(),bh=function(e={}){const{themeId:n,defaultTheme:r,defaultClassName:o="MuiBox-root",generateClassName:a}=e,i=(0,sh.ZP)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(fh.Z),l=t.forwardRef((function(e,t){const l=(0,Mo.Z)(r),c=function(e){const{sx:t}=e,n=(0,A.Z)(e,hh),{systemProps:r,otherProps:o}=(e=>{var t,n;const r={systemProps:{},otherProps:{}},o=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:ph.Z;return Object.keys(e).forEach((t=>{o[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r})(n);let a;return a=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,dh.P)(n)?(0,E.Z)({},r,n):r}:(0,E.Z)({},r,t),(0,E.Z)({},o,{sx:a})}(e),{className:u,component:s="div"}=c,f=(0,A.Z)(c,mh);return(0,L.jsx)(i,(0,E.Z)({as:s,ref:t,className:(0,R.Z)(u,a?a(o):o),theme:n&&l[n]||l},f))}));return l}({themeId:P.Z,defaultTheme:gh,defaultClassName:vh.root,generateClassName:yh.Z.generate}),wh=bh;var xh="unmounted",Eh="exited",Ah="entering",Sh="entered",Ch="exiting",kh=function(e){function n(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=Eh,r.appearStatus=Ah):o=Sh:o=t.unmountOnExit||t.mountOnEnter?xh:Eh,r.state={status:o},r.nextCallback=null,r}V(n,e),n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===xh?{status:Eh}:null};var r=n.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Ah&&n!==Sh&&(t=Ah):n!==Ah&&n!==Sh||(t=Ch)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===Ah){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:Ze.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Eh&&this.setState({status:xh})},r.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[Ze.findDOMNode(this),r],a=o[0],i=o[1],l=this.getTimeouts(),c=r?l.appear:l.enter;e||n?(this.props.onEnter(a,i),this.safeSetState({status:Ah},(function(){t.props.onEntering(a,i),t.onTransitionEnd(c,(function(){t.safeSetState({status:Sh},(function(){t.props.onEntered(a,i)}))}))}))):this.safeSetState({status:Sh},(function(){t.props.onEntered(a)}))},r.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:Ze.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:Ch},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Eh},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Eh},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:Ze.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var e=this.state.status;if(e===xh)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,(0,A.Z)(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return t.createElement(K.Provider,{value:null},"function"==typeof r?r(e,o):t.cloneElement(t.Children.only(r),o))},n}(t.Component);function Lh(){}kh.contextType=K,kh.propTypes={},kh.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Lh,onEntering:Lh,onEntered:Lh,onExit:Lh,onExiting:Lh,onExited:Lh},kh.UNMOUNTED=xh,kh.EXITED=Eh,kh.ENTERING=Ah,kh.ENTERED=Sh,kh.EXITING=Ch;const jh=kh;var Oh=o(6067);function Nh(e,t){var n,r;const{timeout:o,easing:a,style:i={}}=e;return{duration:null!=(n=i.transitionDuration)?n:"number"==typeof o?o:o[t.mode]||0,easing:null!=(r=i.transitionTimingFunction)?r:"object"==typeof a?a[t.mode]:a,delay:i.transitionDelay}}function _h(e){return(0,Se.Z)("MuiCollapse",e)}(0,ue.Z)("MuiCollapse",["root","horizontal","vertical","entered","hidden","wrapper","wrapperInner"]);const Bh=["addEndListener","children","className","collapsedSize","component","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","orientation","style","timeout","TransitionComponent"],Th=(0,Z.ZP)("div",{name:"MuiCollapse",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.orientation],"entered"===n.state&&t.entered,"exited"===n.state&&!n.in&&"0px"===n.collapsedSize&&t.hidden]}})((({theme:e,ownerState:t})=>(0,E.Z)({height:0,overflow:"hidden",transition:e.transitions.create("height")},"horizontal"===t.orientation&&{height:"auto",width:0,transition:e.transitions.create("width")},"entered"===t.state&&(0,E.Z)({height:"auto",overflow:"visible"},"horizontal"===t.orientation&&{width:"auto"}),"exited"===t.state&&!t.in&&"0px"===t.collapsedSize&&{visibility:"hidden"}))),Ph=(0,Z.ZP)("div",{name:"MuiCollapse",slot:"Wrapper",overridesResolver:(e,t)=>t.wrapper})((({ownerState:e})=>(0,E.Z)({display:"flex",width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"}))),Ih=(0,Z.ZP)("div",{name:"MuiCollapse",slot:"WrapperInner",overridesResolver:(e,t)=>t.wrapperInner})((({ownerState:e})=>(0,E.Z)({width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"}))),zh=t.forwardRef((function(e,n){const r=(0,$.Z)({props:e,name:"MuiCollapse"}),{addEndListener:o,children:a,className:i,collapsedSize:l="0px",component:c,easing:u,in:s,onEnter:f,onEntered:d,onEntering:p,onExit:h,onExited:m,onExiting:y,orientation:v="vertical",style:g,timeout:b=Oh.x9.standard,TransitionComponent:w=jh}=r,x=(0,A.Z)(r,Bh),S=(0,E.Z)({},r,{orientation:v,collapsedSize:l}),C=(e=>{const{orientation:t,classes:n}=e,r={root:["root",`${t}`],entered:["entered"],hidden:["hidden"],wrapper:["wrapper",`${t}`],wrapperInner:["wrapperInner",`${t}`]};return(0,G.Z)(r,_h,n)})(S),k=function(){const e=(0,Mo.Z)(Fo.Z);return e[P.Z]||e}(),j=t.useRef(),O=t.useRef(null),N=t.useRef(),_="number"==typeof l?`${l}px`:l,B="horizontal"===v,T=B?"width":"height";t.useEffect((()=>()=>{clearTimeout(j.current)}),[]);const I=t.useRef(null),z=(0,U.Z)(n,I),M=e=>t=>{if(e){const n=I.current;void 0===t?e(n):e(n,t)}},F=()=>O.current?O.current[B?"clientWidth":"clientHeight"]:0,D=M(((e,t)=>{O.current&&B&&(O.current.style.position="absolute"),e.style[T]=_,f&&f(e,t)})),Z=M(((e,t)=>{const n=F();O.current&&B&&(O.current.style.position="");const{duration:r,easing:o}=Nh({style:g,timeout:b,easing:u},{mode:"enter"});if("auto"===b){const t=k.transitions.getAutoHeightDuration(n);e.style.transitionDuration=`${t}ms`,N.current=t}else e.style.transitionDuration="string"==typeof r?r:`${r}ms`;e.style[T]=`${n}px`,e.style.transitionTimingFunction=o,p&&p(e,t)})),H=M(((e,t)=>{e.style[T]="auto",d&&d(e,t)})),W=M((e=>{e.style[T]=`${F()}px`,h&&h(e)})),Y=M(m),q=M((e=>{const t=F(),{duration:n,easing:r}=Nh({style:g,timeout:b,easing:u},{mode:"exit"});if("auto"===b){const n=k.transitions.getAutoHeightDuration(t);e.style.transitionDuration=`${n}ms`,N.current=n}else e.style.transitionDuration="string"==typeof n?n:`${n}ms`;e.style[T]=_,e.style.transitionTimingFunction=r,y&&y(e)}));return(0,L.jsx)(w,(0,E.Z)({in:s,onEnter:D,onEntered:H,onEntering:Z,onExit:W,onExited:Y,onExiting:q,addEndListener:e=>{"auto"===b&&(j.current=setTimeout(e,N.current||0)),o&&o(I.current,e)},nodeRef:I,timeout:"auto"===b?null:b},x,{children:(e,t)=>(0,L.jsx)(Th,(0,E.Z)({as:c,className:(0,R.Z)(C.root,i,{entered:C.entered,exited:!s&&"0px"===_&&C.hidden}[e]),style:(0,E.Z)({[B?"minWidth":"minHeight"]:_},g),ownerState:(0,E.Z)({},S,{state:e}),ref:z},t,{children:(0,L.jsx)(Ph,{ownerState:(0,E.Z)({},S,{state:e}),className:C.wrapper,ref:O,children:(0,L.jsx)(Ih,{ownerState:(0,E.Z)({},S,{state:e}),className:C.wrapperInner,children:a})})}))}))}));zh.muiSupportAuto=!0;const Mh=zh;var Rh=o(5503);function Fh(e){return Fh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Fh(e)}function Gh(){Gh=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Fh(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Fh(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Dh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Zh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return $h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$h(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Uh=function(e){var n=Zh((0,t.useState)(null),2),r=(n[0],n[1]),o=Zh((0,t.useState)([]),2),a=o[0],i=o[1];(0,t.useEffect)((function(){l()}),[]);var l=function(){var t,n=(t=Gh().mark((function t(){var n,o,a;return Gh().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="https://collectionapi.metmuseum.org/public/collection/v1/objects/".concat(e.metropolitan),t.prev=1,t.next=4,Vr.get(n);case 4:o=t.sent,a=o.data,console.log("rezultat metropolitan",a),i(a),t.next=13;break;case 10:t.prev=10,t.t0=t.catch(1),r(t.t0);case 13:case"end":return t.stop()}}),t,null,[[1,10]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(e){Dh(a,r,o,i,l,"next",e)}function l(e){Dh(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return n.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("tr",{className:"tableRow"},t.createElement("td",null,t.createElement("img",{className:"imgMetro",src:a.primaryImage,onError:function(e){var t=e.currentTarget;t.onerror=null,t.src="../img/noPicture.png"},alt:" no picture"}))),t.createElement("tr",null,t.createElement("td",{className:"dropdown"},t.createElement("span",null,a.artistDisplayName),t.createElement("span",{className:"dropdown-content"},t.createElement("p",null,a.artistRole),t.createElement("p",null,a.artistDisplayBio),t.createElement("a",{href:a.artistWikidata_URL,target:"_blank"},a.artistWikidata_URL),t.createElement("br",null),t.createElement("a",{href:a.artistULAN_URL,target:"_blank"},a.artistULAN_URL)))),t.createElement("tr",null,t.createElement("td",{className:"metroTitle"},a.title)),t.createElement("tr",null,t.createElement("td",null,a.objectDate)),t.createElement("tr",null,t.createElement("td",null,a.classification)),t.createElement("tr",null,t.createElement("td",null,a.medium)),t.createElement("tr",null,t.createElement("td",null,a.dimensions)),t.createElement("tr",null,t.createElement("td",null,a.culture)),t.createElement("tr",null,t.createElement("td",null,a.dynasty)),t.createElement("tr",null,t.createElement("td",null,a.creditLine)),t.createElement("tr",null,t.createElement("td",null,a.portfolio)),t.createElement("tr",null,t.createElement("td",null,a.department)),t.createElement("tr",null,t.createElement("td",{className:"forLink"},t.createElement("a",{href:a.objectURL,target:"_blank"},a.objectURL))),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))};function Hh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Wh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Yh=function(e){var n=Hh((0,t.useState)(null),2),r=(n[0],n[1],Hh((0,t.useState)([]),2)),o=(r[0],r[1],Hh((0,t.useState)(!0),2)),a=(o[0],o[1],Hh((0,t.useState)(!1),2)),i=a[0],l=a[1],c=Hh((0,t.useState)([]),2);return c[0],c[1],Tt(),(0,t.useContext)(ea).searchStringValue,t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{className:"tableRow"},t.createElement(Jo,{"aria-label":"expand row",size:"small",onClick:function(){return l(!i)}},i?t.createElement(fl.Z,null):t.createElement(Rh.Z,null)),"  "+e.metropolitan)),t.createElement(Mh,{in:i,timeout:"auto",unmountOnExit:!0},t.createElement(wh,{sx:{margin:0}},t.createElement(Uh,{metropolitan:null==e?void 0:e.metropolitan}))))};function qh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Vh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Vh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Kh=function(e){var n=qh((0,t.useState)(null),2),r=(n[0],n[1],qh((0,t.useState)([]),2)),o=(r[0],r[1],qh((0,t.useState)(!0),2)),a=(o[0],o[1],qh((0,t.useState)(!1),2)),i=a[0],l=a[1],c=qh((0,t.useState)([]),2);return c[0],c[1],Tt(),(0,t.useContext)(ea).searchStringValue,t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{className:"tableRow"},t.createElement(Jo,{"aria-label":"expand row",size:"small",onClick:function(){return l(!i)}},i?t.createElement(fl.Z,null):t.createElement(Rh.Z,null)),"  "+e.metropolitan)),t.createElement(Mh,{in:i,timeout:"auto",unmountOnExit:!0},t.createElement(wh,{sx:{margin:0}},t.createElement(Uh,{metropolitan:e.metropolitan}))))};function Xh(e){return Xh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xh(e)}function Qh(){Qh=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Xh(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Xh(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Jh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function em(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return tm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?tm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function tm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const nm=function(){var e=em((0,t.useState)(null),2),n=(e[0],e[1]),r=em((0,t.useState)([]),2),o=r[0],a=r[1],i=em((0,t.useState)(!0),2),l=i[0],c=i[1],u=em((0,t.useState)(!1),2),s=(u[0],u[1],em((0,t.useState)([]),2)),f=s[0],d=s[1],p=em((0,t.useState)([]),2),h=p[0],m=p[1],y=em((0,t.useState)([]),2),v=y[0],g=y[1],b=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){w(b)}),[b]);var w=function(){var e,t=(e=Qh().mark((function e(t){var r,o,i,l,u,s;return Qh().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://collectionapi.metmuseum.org/public/collection/v1/search?artistOrCulture=true&q=".concat(t),o="https://collectionapi.metmuseum.org/public/collection/v1/search?title=true&q=".concat(t),e.prev=2,e.next=5,Vr.get(r);case 5:return i=e.sent,l=i.data,e.next=9,Vr.get(o);case 9:u=e.sent,s=u.data,console.log("spisak metropolitan",l),console.log("spisak metropolitan title",s),c(!1),a(l.objectIDs),d(s.objectIDs),m(l.total),g(s.total),c(!1),e.next=25;break;case 22:e.prev=22,e.t0=e.catch(2),n(e.t0);case 25:case"end":return e.stop()}}),e,null,[[2,22]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Jh(a,r,o,i,l,"next",e)}function l(e){Jh(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return l?t.createElement(co,null):0==h&&0==v?t.createElement(t.Fragment,null,t.createElement("table",{className:"metropolitanMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(al,{placeholder:"Metropolitan",linkTo:"/metropolitan"}))),t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement("h2",{className:"history"},"Nothing found")))))):0==v?t.createElement("table",{className:"metropolitanMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(al,{placeholder:"Metropolitan",linkTo:"/metropolitan"}))),t.createElement("tr",null,t.createElement("th",{colSpan:2,className:"results"},"Number of Objects by name ",h,", by title ",v))),t.createElement("tbody",null,o.map((function(e){return t.createElement(Yh,{key:e,metropolitan:e})})))):0==h?t.createElement("table",{className:"metropolitanMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(al,{placeholder:"Metropolitan",linkTo:"/metropolitan"}))),t.createElement("tr",null,t.createElement("th",{colSpan:2,className:"results"},"Number of Objects by name ",h,", by title ",v))),t.createElement("tbody",null,f.map((function(e){return t.createElement(Kh,{key:e,metropolitan:e})})))):t.createElement(t.Fragment,null,t.createElement("table",{className:"metropolitanMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(al,{placeholder:"Metropolitan",linkTo:"/metropolitan"}))),t.createElement("tr",null,t.createElement("th",{colSpan:2,className:"results"},"Number of Objects by name ",h,", by title ",v))),o.map((function(e){return t.createElement(Yh,{key:e,metropolitan:e})})),f.map((function(e){return t.createElement(Kh,{key:e,metropolitan:e})}))),t.createElement(pl,null))};function rm(e){return rm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},rm(e)}function om(){om=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==rm(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(rm(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function am(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function im(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return lm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?lm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function lm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const cm=function(){var e=im((0,t.useState)(null),2),n=(e[0],e[1]),r=im((0,t.useState)([]),2),o=r[0],a=r[1],i=im((0,t.useState)([]),2),l=(i[0],i[1]),c=im((0,t.useState)(!0),2),u=c[0],s=c[1];Tt(),(0,t.useEffect)((function(){f()}),[]);var f=function(){var e,t=(e=om().mark((function e(){var t,r;return om().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Vr.get("../public/colors.json");case 4:t=e.sent,r=t.data,console.log("rezultat boja",r),a(r),l(r.length),s(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){am(a,r,o,i,l,"next",e)}function l(e){am(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return u?t.createElement(co,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"gridColor"},o.map((function(e){return t.createElement("div",{className:"dropdown",style:{backgroundColor:"".concat(e.hex)}},t.createElement("span",{className:"dropdown-content",onClick:function(){navigator.clipboard.writeText(e.hex)}},t.createElement("p",null,e.name),t.createElement("p",null,e.hex)))}))),t.createElement(pl,null))};function um(e){return um="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},um(e)}function sm(){sm=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new N(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",y={};function v(){}function g(){}function b(){}var w={};u(w,i,(function(){return this}));var x=Object.getPrototypeOf,E=x&&x(x(_([])));E&&E!==n&&r.call(E,i)&&(w=E);var A=b.prototype=v.prototype=Object.create(w);function S(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==um(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=L(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(um(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},S(C.prototype),u(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function fm(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function dm(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return pm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const hm=function(){var e=dm((0,t.useState)(null),2),n=(e[0],e[1]),r=dm((0,t.useState)([]),2),o=r[0],a=r[1],i=dm((0,t.useState)(!0),2),l=i[0],c=i[1],u=dm((0,t.useState)([]),2),s=u[0],f=u[1],d=Tt(),p=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){h(p)}),[p]);var h=function(){var e,t=(e=sm().mark((function e(t){var r,o,i;return sm().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,Vr.get("./colors.json");case 4:r=e.sent,o=r.data,i=o.filter((function(e){return e.name.toLowerCase().includes(t.toLowerCase())})),console.log("spisak boja",o),console.log("Pretraga boja",i),c(!1),a(i),f(i.length),e.next=18;break;case 14:e.prev=14,e.t0=e.catch(1),n(e.t0),c(!1);case 18:case"end":return e.stop()}}),e,null,[[1,14]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){fm(a,r,o,i,l,"next",e)}function l(e){fm(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return l?t.createElement(co,null):0==s?t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement(ul,{placeholder:"Colors",linkTo:"/colorsSearch"}))),t.createElement("tr",null,t.createElement("td",null,t.createElement("h2",{className:"results"},"Nothing found"))))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement(ul,{placeholder:"Colors",linkTo:"/colorsSearch"}))),t.createElement("tr",null,t.createElement("th",{className:"results"},"Number of color:"),t.createElement("th",{className:"results"},s)),t.createElement("tr",null,t.createElement("th",{colSpan:2}))),o.map((function(e){return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"networth"},e.name),t.createElement("td",{className:"colorHex",style:{backgroundColor:"".concat(e.hex)},onClick:function(){navigator.clipboard.writeText(e.hex)}},e.hex)))})),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))),t.createElement("tr",null,t.createElement("td",{className:"networth"},"View about 1300 colors"),t.createElement("td",null,t.createElement("p",{className:"colorBut",onClick:function(){d("/colors")}},"Colors"))))),t.createElement(pl,null))};var mm=(0,x.Z)({palette:{primary:M.Z,secondary:{50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5"}}});const ym=function(){return t.createElement(t.Fragment,null,t.createElement(en,{basename:"/"},t.createElement("div",null,t.createElement(z,{theme:mm},t.createElement(on,{to:"/"},t.createElement(Ge,{variant:"contained"},"Home")),t.createElement(on,{to:"/search"},t.createElement(Ge,{variant:"contained",color:"secondary",sx:{ml:1}},"Search")),t.createElement(on,{to:"/jokes"},t.createElement(Ge,{variant:"contained",color:"secondary",sx:{ml:1}},"Jokes")),t.createElement(on,{to:"/pickTrivia"},t.createElement(Ge,{variant:"contained",color:"secondary",sx:{ml:1}},"Quiz")))),t.createElement(Wt,null,t.createElement(Ut,{path:"/",element:t.createElement(yo,null)}),t.createElement(Ut,{path:"/search",element:t.createElement(sl,null)}),t.createElement(Ut,{path:"/poznati",element:t.createElement(Tl,null)}),t.createElement(Ut,{path:"/jokes",element:t.createElement(Td,null)}),t.createElement(Ut,{path:"/pickTrivia",element:t.createElement(oc,null)}),t.createElement(Ut,{path:"/logo",element:t.createElement(bl,null)}),t.createElement(Ut,{path:"/dictionary",element:t.createElement(Ll,null)}),t.createElement(Ut,{path:"/history",element:t.createElement(Fl,null)}),t.createElement(Ut,{path:"/historyEvents",element:t.createElement(Hl,null)}),t.createElement(Ut,{path:"/historyPerson",element:t.createElement(Xl,null)}),t.createElement(Ut,{path:"/historyPerson/:personName",element:t.createElement(rc,null)}),t.createElement(Ut,{path:"/trivia/:triviaCat",element:t.createElement(Fd,null)}),t.createElement(Ut,{path:"/advice",element:t.createElement(sc,null)}),t.createElement(Ut,{path:"/colors",element:t.createElement(cm,null)}),t.createElement(Ut,{path:"/ridles",element:t.createElement(Yf,null)}),t.createElement(Ut,{path:"/art",element:t.createElement(Fd,null)}),t.createElement(Ut,{path:"/science",element:t.createElement(Hd,null)}),t.createElement(Ut,{path:"/general",element:t.createElement(Xd,null)}),t.createElement(Ut,{path:"/food",element:t.createElement(rp,null)}),t.createElement(Ut,{path:"/people",element:t.createElement(up,null)}),t.createElement(Ut,{path:"/holidays",element:t.createElement(mp,null)}),t.createElement(Ut,{path:"/geography",element:t.createElement(xp,null)}),t.createElement(Ut,{path:"/entertainment",element:t.createElement(Lp,null)}),t.createElement(Ut,{path:"/toys",element:t.createElement(Tp,null)}),t.createElement(Ut,{path:"/music",element:t.createElement(Fp,null)}),t.createElement(Ut,{path:"/language",element:t.createElement(Hp,null)}),t.createElement(Ut,{path:"/religion",element:t.createElement(Xp,null)}),t.createElement(Ut,{path:"/sport",element:t.createElement(rh,null)}),t.createElement(Ut,{path:"/mathematics",element:t.createElement(uh,null)}),t.createElement(Ut,{path:"/metropolitan",element:t.createElement(nm,null)}),t.createElement(Ut,{path:"/colors",element:t.createElement(cm,null)}),t.createElement(Ut,{path:"/colorsSearch",element:t.createElement(hm,null)}))),t.createElement(vo,null))};function vm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const gm=function(){var e,n,r=(e=(0,t.useState)("Enter search criterium!"),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return vm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?vm(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];return t.createElement(ea.Provider,{value:{setSearchStringFn:a,searchStringValue:o}},t.createElement(ym,null))};r.createRoot(document.getElementById("app")).render(t.createElement(t.StrictMode,null,t.createElement(gm,{number:10,title:"String from index file",text:"Text from index file"})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,