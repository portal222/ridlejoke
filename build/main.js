/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,n={6194:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),o=n(6411),a=n(6686),i=n(7563),l=n(211),c=n(2190),u=function(e,t,n){for(var r=0,a=0;r=a,a=(0,o.fj)(),38===r&&12===a&&(t[n]=1),!(0,o.r)(a);)(0,o.lp)();return(0,o.tP)(e,o.FK)},s=new WeakMap,f=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||s.get(n))&&!r){s.set(e,!0);for(var i=[],l=function(e,t){return(0,o.cE)(function(e,t){var n=-1,r=44;do{switch((0,o.r)(r)){case 0:38===r&&12===(0,o.fj)()&&(t[n]=1),e[n]+=u(o.FK-1,t,n);break;case 2:e[n]+=(0,o.iF)(r);break;case 4:if(44===r){e[++n]=58===(0,o.fj)()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=(0,a.Dp)(r)}}while(r=(0,o.lp)());return e}((0,o.un)(e),t))}(t,i),c=n.props,f=0,h=0;f<l.length;f++)for(var d=0;d<c.length;d++,h++)e.props[h]=i[f]?l[f].replace(/&\f/g,c[d]):c[d]+" "+l[f]}}},h=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function d(e,t){switch((0,a.vp)(e,t)){case 5103:return i.G$+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return i.G$+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return i.G$+e+i.uj+e+i.MS+e+e;case 6828:case 4268:return i.G$+e+i.MS+e+e;case 6165:return i.G$+e+i.MS+"flex-"+e+e;case 5187:return i.G$+e+(0,a.gx)(e,/(\w+).+(:[^]+)/,i.G$+"box-$1$2"+i.MS+"flex-$1$2")+e;case 5443:return i.G$+e+i.MS+"flex-item-"+(0,a.gx)(e,/flex-|-self/,"")+e;case 4675:return i.G$+e+i.MS+"flex-line-pack"+(0,a.gx)(e,/align-content|flex-|-self/,"")+e;case 5548:return i.G$+e+i.MS+(0,a.gx)(e,"shrink","negative")+e;case 5292:return i.G$+e+i.MS+(0,a.gx)(e,"basis","preferred-size")+e;case 6060:return i.G$+"box-"+(0,a.gx)(e,"-grow","")+i.G$+e+i.MS+(0,a.gx)(e,"grow","positive")+e;case 4554:return i.G$+(0,a.gx)(e,/([^-])(transform)/g,"$1"+i.G$+"$2")+e;case 6187:return(0,a.gx)((0,a.gx)((0,a.gx)(e,/(zoom-|grab)/,i.G$+"$1"),/(image-set)/,i.G$+"$1"),e,"")+e;case 5495:case 3959:return(0,a.gx)(e,/(image-set\([^]*)/,i.G$+"$1$`$1");case 4968:return(0,a.gx)((0,a.gx)(e,/(.+:)(flex-)?(.*)/,i.G$+"box-pack:$3"+i.MS+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+i.G$+e+e;case 4095:case 3583:case 4068:case 2532:return(0,a.gx)(e,/(.+)-inline(.+)/,i.G$+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if((0,a.to)(e)-1-t>6)switch((0,a.uO)(e,t+1)){case 109:if(45!==(0,a.uO)(e,t+4))break;case 102:return(0,a.gx)(e,/(.+:)(.+)-([^]+)/,"$1"+i.G$+"$2-$3$1"+i.uj+(108==(0,a.uO)(e,t+3)?"$3":"$2-$3"))+e;case 115:return~(0,a.Cw)(e,"stretch")?d((0,a.gx)(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==(0,a.uO)(e,t+1))break;case 6444:switch((0,a.uO)(e,(0,a.to)(e)-3-(~(0,a.Cw)(e,"!important")&&10))){case 107:return(0,a.gx)(e,":",":"+i.G$)+e;case 101:return(0,a.gx)(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+i.G$+(45===(0,a.uO)(e,14)?"inline-":"")+"box$3$1"+i.G$+"$2$3$1"+i.MS+"$2box$3")+e}break;case 5936:switch((0,a.uO)(e,t+11)){case 114:return i.G$+e+i.MS+(0,a.gx)(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return i.G$+e+i.MS+(0,a.gx)(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return i.G$+e+i.MS+(0,a.gx)(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return i.G$+e+i.MS+e+e}return e}var p=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case i.h5:e.return=d(e.value,e.length);break;case i.lK:return(0,l.q)([(0,o.JG)(e,{value:(0,a.gx)(e.value,"@","@"+i.G$)})],r);case i.Fr:if(e.length)return(0,a.$e)(e.props,(function(t){switch((0,a.EQ)(t,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return(0,l.q)([(0,o.JG)(e,{props:[(0,a.gx)(t,/:(read-\w+)/,":"+i.uj+"$1")]})],r);case"::placeholder":return(0,l.q)([(0,o.JG)(e,{props:[(0,a.gx)(t,/:(plac\w+)/,":"+i.G$+"input-$1")]}),(0,o.JG)(e,{props:[(0,a.gx)(t,/:(plac\w+)/,":"+i.uj+"$1")]}),(0,o.JG)(e,{props:[(0,a.gx)(t,/:(plac\w+)/,i.MS+"input-$1")]})],r)}return""}))}}],m=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o,i,u=e.stylisPlugins||p,s={},d=[];o=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)s[t[n]]=!0;d.push(e)}));var m,y,v,g,b=[f,h],x=[l.P,(g=function(e){m.insert(e)},function(e){e.root||(e=e.return)&&g(e)})],w=(y=b.concat(u,x),v=(0,a.Ei)(y),function(e,t,n,r){for(var o="",a=0;a<v;a++)o+=y[a](e,t,n,r)||"";return o});i=function(e,t,n,r){var o;m=n,o=e?e+"{"+t.styles+"}":t.styles,(0,l.q)((0,c.MY)(o),w),r&&(E.inserted[t.name]=!0)};var E={key:t,sheet:new r({key:t,container:o,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:s,registered:{},insert:i};return E.sheet.hydrate(d),E}},5042:(e,t,n)=>{"use strict";function r(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}n.d(t,{Z:()=>r})},5260:(e,t,n)=>{"use strict";n.d(t,{T:()=>c,i:()=>a,w:()=>l});var r=n(7294),o=n(6194),a=(n(6797),n(7278),!0),i=r.createContext("undefined"!=typeof HTMLElement?(0,o.Z)({key:"css"}):null);i.Provider;var l=function(e){return(0,r.forwardRef)((function(t,n){var o=(0,r.useContext)(i);return e(t,o,n)}))};a||(l=function(e){return function(t){var n=(0,r.useContext)(i);return null===n?(n=(0,o.Z)({key:"css"}),r.createElement(i.Provider,{value:n},e(t,n))):e(t,n)}});var c=r.createContext({})},6797:(e,t,n)=>{"use strict";n.d(t,{O:()=>p});var r={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},o=n(5042),a=/[A-Z]|^ms/g,i=/_EMO_([^_]+?)_([^]*?)_EMO_/g,l=function(e){return 45===e.charCodeAt(1)},c=function(e){return null!=e&&"boolean"!=typeof e},u=(0,o.Z)((function(e){return l(e)?e:e.replace(a,"-$&").toLowerCase()})),s=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(i,(function(e,t,n){return h={name:t,styles:n,next:h},t}))}return 1===r[e]||l(e)||"number"!=typeof t||0===t?t:t+"px"};function f(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return h={name:n.name,styles:n.styles,next:h},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)h={name:r.name,styles:r.styles,next:h},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=f(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":c(i)&&(r+=u(a)+":"+s(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=f(e,t,i);switch(a){case"animation":case"animationName":r+=u(a)+":"+l+";";break;default:r+=a+"{"+l+"}"}}else for(var h=0;h<i.length;h++)c(i[h])&&(r+=u(a)+":"+s(a,i[h])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=h,a=n(e);return h=o,f(e,t,a)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var h,d=/label:\s*([^\s;\n{]+)\s*(;|$)/g,p=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";h=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=f(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=f(n,t,e[i]),r&&(o+=a[i]);d.lastIndex=0;for(var l,c="";null!==(l=d.exec(o));)c+="-"+l[1];var u=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+c;return{name:u,styles:o,next:h}}},7278:(e,t,n)=>{"use strict";var r;n.d(t,{L:()=>i,j:()=>l});var o=n(7294),a=!!(r||(r=n.t(o,2))).useInsertionEffect&&(r||(r=n.t(o,2))).useInsertionEffect,i=a||function(e){return e()},l=a||o.useLayoutEffect},444:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}n.d(t,{My:()=>a,fp:()=>r,hC:()=>o});var o=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},a=function(e,t,n){o(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}}},5503:(e,t,n)=>{"use strict";var r=n(4836);t.Z=void 0;var o=r(n(4938)),a=n(5893),i=(0,o.default)((0,a.jsx)("path",{d:"M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"}),"KeyboardArrowDown");t.Z=i},813:(e,t,n)=>{"use strict";var r=n(4836);t.Z=void 0;var o=r(n(4938)),a=n(5893),i=(0,o.default)((0,a.jsx)("path",{d:"M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"}),"KeyboardArrowUp");t.Z=i},4938:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(7259)},3486:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"}},9553:(e,t,n)=>{"use strict";n.d(t,{Z:()=>P});var r=n(7462),o=n(3366),a=n(1387),i=n(9766),l=n(6268),c=n(8010),u=n(6523),s=n(1796);const f={black:"#000",white:"#fff"},h={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},d={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},p={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},m={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},y={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},v={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"};var g=n(3486);const b=["mode","contrastThreshold","tonalOffset"],x={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:f.white,default:f.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},w={text:{primary:f.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:f.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function E(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,s.$n)(e.main,o):"dark"===t&&(e.dark=(0,s._j)(e.main,a)))}const A=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],C={textTransform:"uppercase"},S='"Roboto", "Helvetica", "Arial", sans-serif';function k(e,t){const n="function"==typeof t?t(e):t,{fontFamily:a=S,fontSize:l=14,fontWeightLight:c=300,fontWeightRegular:u=400,fontWeightMedium:s=500,fontWeightBold:f=700,htmlFontSize:h=16,allVariants:d,pxToRem:p}=n,m=(0,o.Z)(n,A),y=l/14,v=p||(e=>e/h*y+"rem"),g=(e,t,n,o,i)=>{return(0,r.Z)({fontFamily:a,fontWeight:e,fontSize:v(t),lineHeight:n},a===S?{letterSpacing:(l=o/t,Math.round(1e5*l)/1e5+"em")}:{},i,d);var l},b={h1:g(c,96,1.167,-1.5),h2:g(c,60,1.2,-.5),h3:g(u,48,1.167,0),h4:g(u,34,1.235,.25),h5:g(u,24,1.334,0),h6:g(s,20,1.6,.15),subtitle1:g(u,16,1.75,.15),subtitle2:g(s,14,1.57,.1),body1:g(u,16,1.5,.15),body2:g(u,14,1.43,.15),button:g(s,14,1.75,.4,C),caption:g(u,12,1.66,.4),overline:g(u,12,2.66,1,C),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return(0,i.Z)((0,r.Z)({htmlFontSize:h,pxToRem:v,fontFamily:a,fontSize:l,fontWeightLight:c,fontWeightRegular:u,fontWeightMedium:s,fontWeightBold:f},b),m,{clone:!1})}function B(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const L=["none",B(0,2,1,-1,0,1,1,0,0,1,3,0),B(0,3,1,-2,0,2,2,0,0,1,5,0),B(0,3,3,-2,0,3,4,0,0,1,8,0),B(0,2,4,-1,0,4,5,0,0,1,10,0),B(0,3,5,-1,0,5,8,0,0,1,14,0),B(0,3,5,-1,0,6,10,0,0,1,18,0),B(0,4,5,-2,0,7,10,1,0,2,16,1),B(0,5,5,-3,0,8,10,1,0,3,14,2),B(0,5,6,-3,0,9,12,1,0,3,16,2),B(0,6,6,-3,0,10,14,1,0,4,18,3),B(0,6,7,-4,0,11,15,1,0,4,20,3),B(0,7,8,-4,0,12,17,2,0,5,22,4),B(0,7,8,-4,0,13,19,2,0,5,24,4),B(0,7,9,-4,0,14,21,2,0,5,26,4),B(0,8,9,-5,0,15,22,2,0,6,28,5),B(0,8,10,-5,0,16,24,2,0,6,30,5),B(0,8,11,-5,0,17,26,2,0,6,32,5),B(0,9,11,-5,0,18,28,2,0,7,34,6),B(0,9,12,-6,0,19,29,2,0,7,36,6),B(0,10,13,-6,0,20,31,3,0,8,38,7),B(0,10,13,-6,0,21,33,3,0,8,40,7),B(0,10,14,-6,0,22,35,3,0,8,42,7),B(0,11,14,-7,0,23,36,3,0,9,44,8),B(0,11,15,-7,0,24,38,3,0,9,46,8)];var F=n(6067);const O={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},j=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const P=function(e={},...t){const{mixins:n={},palette:A={},transitions:C={},typography:S={}}=e,B=(0,o.Z)(e,j);if(e.vars)throw new Error((0,a.Z)(18));const P=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:l=.2}=e,c=(0,o.Z)(e,b),u=e.primary||function(e="light"){return"dark"===e?{main:y[200],light:y[50],dark:y[400]}:{main:y[700],light:y[400],dark:y[800]}}(t),A=e.secondary||function(e="light"){return"dark"===e?{main:d[200],light:d[50],dark:d[400]}:{main:d[500],light:d[300],dark:d[700]}}(t),C=e.error||function(e="light"){return"dark"===e?{main:p[500],light:p[300],dark:p[700]}:{main:p[700],light:p[400],dark:p[800]}}(t),S=e.info||function(e="light"){return"dark"===e?{main:v[400],light:v[300],dark:v[700]}:{main:v[700],light:v[500],dark:v[900]}}(t),k=e.success||function(e="light"){return"dark"===e?{main:g.Z[400],light:g.Z[300],dark:g.Z[700]}:{main:g.Z[800],light:g.Z[500],dark:g.Z[900]}}(t),B=e.warning||function(e="light"){return"dark"===e?{main:m[400],light:m[300],dark:m[700]}:{main:"#ed6c02",light:m[500],dark:m[900]}}(t);function L(e){return(0,s.mi)(e,w.text.primary)>=n?w.text.primary:x.text.primary}const F=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:i=700})=>{if(!(e=(0,r.Z)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,a.Z)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,a.Z)(12,t?` (${t})`:"",JSON.stringify(e.main)));return E(e,"light",o,l),E(e,"dark",i,l),e.contrastText||(e.contrastText=L(e.main)),e},O={dark:w,light:x};return(0,i.Z)((0,r.Z)({common:(0,r.Z)({},f),mode:t,primary:F({color:u,name:"primary"}),secondary:F({color:A,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:F({color:C,name:"error"}),warning:F({color:B,name:"warning"}),info:F({color:S,name:"info"}),success:F({color:k,name:"success"}),grey:h,contrastThreshold:n,getContrastText:L,augmentColor:F,tonalOffset:l},O[t]),c)}(A),N=(0,l.Z)(e);let T=(0,i.Z)(N,{mixins:(_=N.breakpoints,D=n,(0,r.Z)({toolbar:{minHeight:56,[_.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[_.up("sm")]:{minHeight:64}}},D)),palette:P,shadows:L.slice(),typography:k(P,S),transitions:(0,F.ZP)(C),zIndex:(0,r.Z)({},O)});var _,D;return T=(0,i.Z)(T,B),T=t.reduce(((e,t)=>(0,i.Z)(e,t)),T),T.unstable_sxConfig=(0,r.Z)({},c.Z,null==B?void 0:B.unstable_sxConfig),T.unstable_sx=function(e){return(0,u.Z)({sx:e,theme:this})},T}},6067:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>s,x9:()=>l});var r=n(3366),o=n(7462);const a=["duration","easing","delay"],i={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},l={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function c(e){return`${Math.round(e)}ms`}function u(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function s(e){const t=(0,o.Z)({},i,e.easing),n=(0,o.Z)({},l,e.duration);return(0,o.Z)({getAutoHeightDuration:u,create:(e=["all"],o={})=>{const{duration:i=n.standard,easing:l=t.easeInOut,delay:u=0}=o;return(0,r.Z)(o,a),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof i?i:c(i)} ${l} ${"string"==typeof u?u:c(u)}`)).join(",")}},e,{easing:t,duration:n})}},247:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(9553).Z)()},606:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r="$$material"},9602:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>k,FO:()=>C});var r=n(3366),o=n(7462),a=n(9378),i=n(9766),l=n(6268),c=n(4142);const u=["variant"];function s(e){return 0===e.length}function f(e){const{variant:t}=e,n=(0,r.Z)(e,u);let o=t||"";return Object.keys(n).sort().forEach((t=>{o+="color"===t?s(o)?e[t]:(0,c.Z)(e[t]):`${s(o)?t:(0,c.Z)(t)}${(0,c.Z)(e[t].toString())}`})),o}var h=n(6523);const d=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],p=e=>{const t={};return e&&e.forEach((e=>{const n=f(e.props);t[n]=e.style})),t},m=(e,t,n)=>{const{ownerState:r={}}=e,o=[];return n&&n.forEach((n=>{let a=!0;Object.keys(n.props).forEach((t=>{r[t]!==n.props[t]&&e[t]!==n.props[t]&&(a=!1)})),a&&o.push(t[f(n.props)])})),o};function y(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const v=(0,l.Z)(),g=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function b({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function x(e){return e?(t,n)=>n[e]:null}const w=({styledArg:e,props:t,defaultTheme:n,themeId:r})=>{const a=e((0,o.Z)({},t,{theme:b((0,o.Z)({},t,{defaultTheme:n,themeId:r}))}));let i;return a&&a.variants&&(i=a.variants,delete a.variants),i?[a,...m(t,p(i),i)]:a};var E=n(247),A=n(606);const C=e=>y(e)&&"classes"!==e,S=function(e={}){const{themeId:t,defaultTheme:n=v,rootShouldForwardProp:l=y,slotShouldForwardProp:c=y}=e,u=e=>(0,h.Z)((0,o.Z)({},e,{theme:b((0,o.Z)({},e,{defaultTheme:n,themeId:t}))}));return u.__mui_systemSx=!0,(e,s={})=>{(0,a.Co)(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:f,slot:h,skipVariantsResolver:v,skipSx:E,overridesResolver:A=x(g(h))}=s,C=(0,r.Z)(s,d),S=void 0!==v?v:h&&"Root"!==h&&"root"!==h||!1,k=E||!1;let B=y;"Root"===h||"root"===h?B=l:h?B=c:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(B=void 0);const L=(0,a.ZP)(e,(0,o.Z)({shouldForwardProp:B,label:void 0},C)),F=(r,...a)=>{const l=a?a.map((e=>{if("function"==typeof e&&e.__emotion_real!==e)return r=>w({styledArg:e,props:r,defaultTheme:n,themeId:t});if((0,i.P)(e)){let t,n=e;return e&&e.variants&&(t=e.variants,delete n.variants,n=n=>{let r=e;return m(n,p(t),t).forEach((e=>{r=(0,i.Z)(r,e)})),r}),n}return e})):[];let c=r;if((0,i.P)(r)){let e;r&&r.variants&&(e=r.variants,delete c.variants,c=t=>{let n=r;return m(t,p(e),e).forEach((e=>{n=(0,i.Z)(n,e)})),n})}else"function"==typeof r&&r.__emotion_real!==r&&(c=e=>w({styledArg:r,props:e,defaultTheme:n,themeId:t}));f&&A&&l.push((e=>{const r=b((0,o.Z)({},e,{defaultTheme:n,themeId:t})),a=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(f,r);if(a){const t={};return Object.entries(a).forEach((([n,a])=>{t[n]="function"==typeof a?a((0,o.Z)({},e,{theme:r})):a})),A(e,t)}return null})),f&&!S&&l.push((e=>{const r=b((0,o.Z)({},e,{defaultTheme:n,themeId:t}));return((e,t,n,r)=>{var o;const a=null==n||null==(o=n.components)||null==(o=o[r])?void 0:o.variants;return m(e,t,a)})(e,((e,t)=>{let n=[];return t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants),p(n)})(f,r),r,f)})),k||l.push(u);const s=l.length-a.length;if(Array.isArray(r)&&s>0){const e=new Array(s).fill("");c=[...r,...e],c.raw=[...r.raw,...e]}const h=L(c,...l);return e.muiName&&(h.muiName=e.muiName),h};return L.withConfig&&(F.withConfig=L.withConfig),F}}({themeId:A.Z,defaultTheme:E.Z,rootShouldForwardProp:C}),k=S},6122:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7925),o=n(6682);var a=n(247),i=n(606);function l({props:e,name:t}){return function({props:e,name:t,defaultTheme:n,themeId:a}){let i=(0,o.Z)(n);a&&(i=i[a]||i);const l=function(e){const{theme:t,name:n,props:o}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?(0,r.Z)(t.components[n].defaultProps,o):o}({theme:i,name:t,props:e});return l}({props:e,name:t,defaultTheme:a.Z,themeId:i.Z})}},8216:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(4142).Z},7259:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>o.Z,createChainedFunction:()=>a,createSvgIcon:()=>E,debounce:()=>A,deprecatedPropType:()=>C,isMuiElement:()=>S,ownerDocument:()=>k,ownerWindow:()=>B,requirePropFactory:()=>L,setRef:()=>F,unstable_ClassNameGenerator:()=>R,unstable_useEnhancedEffect:()=>O.Z,unstable_useId:()=>N,unsupportedProp:()=>T,useControlled:()=>_,useEventCallback:()=>D.Z,useForkRef:()=>I.Z,useIsFocusVisible:()=>M.Z});var r=n(7078),o=n(8216);const a=function(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))};var i=n(7462),l=n(7294),c=n.t(l,2),u=n(3366),s=n(512),f=n(4780),h=n(6122),d=n(9602),p=n(1588),m=n(4867);function y(e){return(0,m.Z)("MuiSvgIcon",e)}(0,p.Z)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var v=n(5893);const g=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],b=(0,d.ZP)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${(0,o.Z)(n.color)}`],t[`fontSize${(0,o.Z)(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,o,a,i,l,c,u,s,f,h,d,p;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(o=e.transitions)||null==(o=o.duration)?void 0:o.shorter}),fontSize:{inherit:"inherit",small:(null==(a=e.typography)||null==(i=a.pxToRem)?void 0:i.call(a,20))||"1.25rem",medium:(null==(l=e.typography)||null==(c=l.pxToRem)?void 0:c.call(l,24))||"1.5rem",large:(null==(u=e.typography)||null==(s=u.pxToRem)?void 0:s.call(u,35))||"2.1875rem"}[t.fontSize],color:null!=(f=null==(h=(e.vars||e).palette)||null==(h=h[t.color])?void 0:h.main)?f:{action:null==(d=(e.vars||e).palette)||null==(d=d.action)?void 0:d.active,disabled:null==(p=(e.vars||e).palette)||null==(p=p.action)?void 0:p.disabled,inherit:void 0}[t.color]}})),x=l.forwardRef((function(e,t){const n=(0,h.Z)({props:e,name:"MuiSvgIcon"}),{children:r,className:a,color:c="inherit",component:d="svg",fontSize:p="medium",htmlColor:m,inheritViewBox:x=!1,titleAccess:w,viewBox:E="0 0 24 24"}=n,A=(0,u.Z)(n,g),C=l.isValidElement(r)&&"svg"===r.type,S=(0,i.Z)({},n,{color:c,component:d,fontSize:p,instanceFontSize:e.fontSize,inheritViewBox:x,viewBox:E,hasSvgAsChild:C}),k={};x||(k.viewBox=E);const B=(e=>{const{color:t,fontSize:n,classes:r}=e,a={root:["root","inherit"!==t&&`color${(0,o.Z)(t)}`,`fontSize${(0,o.Z)(n)}`]};return(0,f.Z)(a,y,r)})(S);return(0,v.jsxs)(b,(0,i.Z)({as:d,className:(0,s.Z)(B.root,a),focusable:"false",color:m,"aria-hidden":!w||void 0,role:w?"img":void 0,ref:t},k,A,C&&r.props,{ownerState:S,children:[C?r.props.children:r,w?(0,v.jsx)("title",{children:w}):null]}))}));x.muiName="SvgIcon";const w=x;function E(e,t){function n(n,r){return(0,v.jsx)(w,(0,i.Z)({"data-testid":`${t}Icon`,ref:r},n,{children:e}))}return n.muiName=w.muiName,l.memo(l.forwardRef(n))}const A=n(9336).Z,C=function(e,t){return()=>null},S=function(e,t){var n,r;return l.isValidElement(e)&&-1!==t.indexOf(null!=(n=e.type.muiName)?n:null==(r=e.type)||null==(r=r._payload)||null==(r=r.value)?void 0:r.muiName)},k=n(2690).Z,B=n(4161).Z,L=function(e,t){return()=>null},F=n(7960).Z;var O=n(8974);let j=0;const P=c["useId".toString()],N=function(e){if(void 0!==P){const t=P();return null!=e?e:t}return function(e){const[t,n]=l.useState(e),r=e||t;return l.useEffect((()=>{null==t&&(j+=1,n(`mui-${j}`))}),[t]),r}(e)},T=function(e,t,n,r,o){return null},_=function({controlled:e,default:t,name:n,state:r="value"}){const{current:o}=l.useRef(void 0!==e),[a,i]=l.useState(t);return[o?e:a,l.useCallback((e=>{o||i(e)}),[])]};var D=n(314),I=n(1705),M=n(3511);const R={configure:e=>{r.Z.configure(e)}}},8974:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(3546).Z},314:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(3546);const a=function(e){const t=r.useRef(e);return(0,o.Z)((()=>{t.current=e})),r.useRef(((...e)=>(0,t.current)(...e))).current}},1705:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(3703).Z},3511:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(7294);let o,a=!0,i=!1;const l={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function c(e){e.metaKey||e.altKey||e.ctrlKey||(a=!0)}function u(){a=!1}function s(){"hidden"===this.visibilityState&&i&&(a=!0)}const f=function(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",c,!0),t.addEventListener("mousedown",u,!0),t.addEventListener("pointerdown",u,!0),t.addEventListener("touchstart",u,!0),t.addEventListener("visibilitychange",s,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return a||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!l[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(i=!0,window.clearTimeout(o),o=window.setTimeout((()=>{i=!1}),100),t.current=!1,!0)},ref:e}}},9378:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>g,Co:()=>b});var r=n(7462),o=n(7294),a=n(5042),i=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,l=(0,a.Z)((function(e){return i.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),c=n(5260),u=n(444),s=n(6797),f=n(7278),h=l,d=function(e){return"theme"!==e},p=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?h:d},m=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},y=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return(0,u.hC)(t,n,r),(0,f.L)((function(){return(0,u.My)(t,n,r)})),null},v=function e(t,n){var a,i,l=t.__emotion_real===t,f=l&&t.__emotion_base||t;void 0!==n&&(a=n.label,i=n.target);var h=m(t,n,l),d=h||p(f),v=!d("as");return function(){var g=arguments,b=l&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==a&&b.push("label:"+a+";"),null==g[0]||void 0===g[0].raw)b.push.apply(b,g);else{b.push(g[0][0]);for(var x=g.length,w=1;w<x;w++)b.push(g[w],g[0][w])}var E=(0,c.w)((function(e,t,n){var r=v&&e.as||f,a="",l=[],m=e;if(null==e.theme){for(var g in m={},e)m[g]=e[g];m.theme=o.useContext(c.T)}"string"==typeof e.className?a=(0,u.fp)(t.registered,l,e.className):null!=e.className&&(a=e.className+" ");var x=(0,s.O)(b.concat(l),t.registered,m);a+=t.key+"-"+x.name,void 0!==i&&(a+=" "+i);var w=v&&void 0===h?p(r):d,E={};for(var A in e)v&&"as"===A||w(A)&&(E[A]=e[A]);return E.className=a,E.ref=n,o.createElement(o.Fragment,null,o.createElement(y,{cache:t,serialized:x,isStringTag:"string"==typeof r}),o.createElement(r,E))}));return E.displayName=void 0!==a?a:"Styled("+("string"==typeof f?f:f.displayName||f.name||"Component")+")",E.defaultProps=t.defaultProps,E.__emotion_real=E,E.__emotion_base=f,E.__emotion_styles=b,E.__emotion_forwardProp=h,Object.defineProperty(E,"toString",{value:function(){return"."+i}}),E.withComponent=function(t,o){return e(t,(0,r.Z)({},n,o,{shouldForwardProp:m(E,o,!0)})).apply(void 0,b)},E}}.bind();function g(e,t){return v(e,t)}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){v[e]=v(e)}));const b=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}},5408:(e,t,n)=>{"use strict";n.d(t,{L7:()=>l,VO:()=>r,W8:()=>i,k9:()=>a});const r={xs:0,sm:600,md:900,lg:1200,xl:1536},o={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${r[e]}px)`};function a(e,t,n){const a=e.theme||{};if(Array.isArray(t)){const e=a.breakpoints||o;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=a.breakpoints||o;return Object.keys(t).reduce(((o,a)=>{if(-1!==Object.keys(e.values||r).indexOf(a))o[e.up(a)]=n(t[a],a);else{const e=a;o[e]=t[e]}return o}),{})}return n(t)}function i(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function l(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}},1796:(e,t,n)=>{"use strict";n.d(t,{$n:()=>f,Fq:()=>u,_j:()=>s,mi:()=>c});var r=n(1387);function o(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function a(e){if(e.type)return e;if("#"===e.charAt(0))return a(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,r.Z)(9,e));let o,i=e.substring(t+1,e.length-1);if("color"===n){if(i=i.split(" "),o=i.shift(),4===i.length&&"/"===i[3].charAt(0)&&(i[3]=i[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(o))throw new Error((0,r.Z)(10,o))}else i=i.split(",");return i=i.map((e=>parseFloat(e))),{type:n,values:i,colorSpace:o}}function i(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function l(e){let t="hsl"===(e=a(e)).type||"hsla"===e.type?a(function(e){e=a(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,l=r*Math.min(o,1-o),c=(e,t=(e+n/30)%12)=>o-l*Math.max(Math.min(t-3,9-t,1),-1);let u="rgb";const s=[Math.round(255*c(0)),Math.round(255*c(8)),Math.round(255*c(4))];return"hsla"===e.type&&(u+="a",s.push(t[3])),i({type:u,values:s})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function c(e,t){const n=l(e),r=l(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e,t){return e=a(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,i(e)}function s(e,t){if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return i(e)}function f(e,t){if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return i(e)}},6268:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(7462),o=n(3366),a=n(9766);const i=["values","unit","step"],l={borderRadius:4};var c=n(2605),u=n(6523),s=n(8010);const f=["breakpoints","palette","spacing","shape"],h=function(e={},...t){const{breakpoints:n={},palette:h={},spacing:d,shape:p={}}=e,m=(0,o.Z)(e,f),y=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:a=5}=e,l=(0,o.Z)(e,i),c=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>(0,r.Z)({},e,{[t.key]:t.val})),{})})(t),u=Object.keys(c);function s(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function f(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-a/100}${n})`}function h(e,r){const o=u.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[u[o]]?t[u[o]]:r)-a/100}${n})`}return(0,r.Z)({keys:u,values:c,up:s,down:f,between:h,only:function(e){return u.indexOf(e)+1<u.length?h(e,u[u.indexOf(e)+1]):s(e)},not:function(e){const t=u.indexOf(e);return 0===t?s(u[1]):t===u.length-1?f(u[t]):h(e,u[u.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},l)}(n),v=function(e=8){if(e.mui)return e;const t=(0,c.hB)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(d);let g=(0,a.Z)({breakpoints:y,direction:"ltr",components:{},palette:(0,r.Z)({mode:"light"},h),spacing:v,shape:(0,r.Z)({},l,p)},m);return g=t.reduce(((e,t)=>(0,a.Z)(e,t)),g),g.unstable_sxConfig=(0,r.Z)({},s.Z,null==m?void 0:m.unstable_sxConfig),g.unstable_sx=function(e){return(0,u.Z)({sx:e,theme:this})},g}},7730:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9766);const o=function(e,t){return t?(0,r.Z)(e,t,{clone:!1}):e}},2605:(e,t,n)=>{"use strict";n.d(t,{hB:()=>p,eI:()=>d,NA:()=>m,e6:()=>v,o3:()=>g});var r=n(5408),o=n(4844),a=n(7730);const i={m:"margin",p:"padding"},l={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},c={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},u=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!c[e])return[e];e=c[e]}const[t,n]=e.split(""),r=i[t],o=l[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),s=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],f=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],h=[...s,...f];function d(e,t,n,r){var a;const i=null!=(a=(0,o.DW)(e,t,!1))?a:n;return"number"==typeof i?e=>"string"==typeof e?e:i*e:Array.isArray(i)?e=>"string"==typeof e?e:i[e]:"function"==typeof i?i:()=>{}}function p(e){return d(e,"spacing",8)}function m(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function y(e,t){const n=p(e.theme);return Object.keys(e).map((o=>function(e,t,n,o){if(-1===t.indexOf(n))return null;const a=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=m(t,n),e)),{})}(u(n),o),i=e[n];return(0,r.k9)(e,i,a)}(e,t,o,n))).reduce(a.Z,{})}function v(e){return y(e,s)}function g(e){return y(e,f)}function b(e){return y(e,h)}v.propTypes={},v.filterProps=s,g.propTypes={},g.filterProps=f,b.propTypes={},b.filterProps=h},4844:(e,t,n)=>{"use strict";n.d(t,{DW:()=>a,Jq:()=>i,ZP:()=>l});var r=n(4142),o=n(5408);function a(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function i(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:a(e,n)||r,t&&(o=t(o,r,e)),o}const l=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:l,transform:c}=e,u=e=>{if(null==e[t])return null;const u=e[t],s=a(e.theme,l)||{};return(0,o.k9)(e,u,(e=>{let o=i(s,c,e);return e===o&&"string"==typeof e&&(o=i(s,c,`${t}${"default"===e?"":(0,r.Z)(e)}`,e)),!1===n?o:{[n]:o}}))};return u.propTypes={},u.filterProps=[t],u}},8010:(e,t,n)=>{"use strict";n.d(t,{Z:()=>T});var r=n(2605),o=n(4844),a=n(7730);const i=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,a.Z)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var l=n(5408);function c(e){return"number"!=typeof e?e:`${e}px solid`}function u(e,t){return(0,o.ZP)({prop:e,themeKey:"borders",transform:t})}const s=u("border",c),f=u("borderTop",c),h=u("borderRight",c),d=u("borderBottom",c),p=u("borderLeft",c),m=u("borderColor"),y=u("borderTopColor"),v=u("borderRightColor"),g=u("borderBottomColor"),b=u("borderLeftColor"),x=u("outline",c),w=u("outlineColor"),E=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,r.eI)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,r.NA)(t,e)});return(0,l.k9)(e,e.borderRadius,n)}return null};E.propTypes={},E.filterProps=["borderRadius"],i(s,f,h,d,p,m,y,v,g,b,E,x,w);const A=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,r.eI)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,r.NA)(t,e)});return(0,l.k9)(e,e.gap,n)}return null};A.propTypes={},A.filterProps=["gap"];const C=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,r.eI)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,r.NA)(t,e)});return(0,l.k9)(e,e.columnGap,n)}return null};C.propTypes={},C.filterProps=["columnGap"];const S=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,r.eI)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,r.NA)(t,e)});return(0,l.k9)(e,e.rowGap,n)}return null};function k(e,t){return"grey"===t?t:e}function B(e){return e<=1&&0!==e?100*e+"%":e}S.propTypes={},S.filterProps=["rowGap"],i(A,C,S,(0,o.ZP)({prop:"gridColumn"}),(0,o.ZP)({prop:"gridRow"}),(0,o.ZP)({prop:"gridAutoFlow"}),(0,o.ZP)({prop:"gridAutoColumns"}),(0,o.ZP)({prop:"gridAutoRows"}),(0,o.ZP)({prop:"gridTemplateColumns"}),(0,o.ZP)({prop:"gridTemplateRows"}),(0,o.ZP)({prop:"gridTemplateAreas"}),(0,o.ZP)({prop:"gridArea"})),i((0,o.ZP)({prop:"color",themeKey:"palette",transform:k}),(0,o.ZP)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:k}),(0,o.ZP)({prop:"backgroundColor",themeKey:"palette",transform:k}));const L=(0,o.ZP)({prop:"width",transform:B}),F=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r;const o=(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||l.VO[t];return o?"px"!==(null==(r=e.theme)||null==(r=r.breakpoints)?void 0:r.unit)?{maxWidth:`${o}${e.theme.breakpoints.unit}`}:{maxWidth:o}:{maxWidth:B(t)}};return(0,l.k9)(e,e.maxWidth,t)}return null};F.filterProps=["maxWidth"];const O=(0,o.ZP)({prop:"minWidth",transform:B}),j=(0,o.ZP)({prop:"height",transform:B}),P=(0,o.ZP)({prop:"maxHeight",transform:B}),N=(0,o.ZP)({prop:"minHeight",transform:B}),T=((0,o.ZP)({prop:"size",cssProperty:"width",transform:B}),(0,o.ZP)({prop:"size",cssProperty:"height",transform:B}),i(L,F,O,j,P,N,(0,o.ZP)({prop:"boxSizing"})),{border:{themeKey:"borders",transform:c},borderTop:{themeKey:"borders",transform:c},borderRight:{themeKey:"borders",transform:c},borderBottom:{themeKey:"borders",transform:c},borderLeft:{themeKey:"borders",transform:c},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:c},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:E},color:{themeKey:"palette",transform:k},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:k},backgroundColor:{themeKey:"palette",transform:k},p:{style:r.o3},pt:{style:r.o3},pr:{style:r.o3},pb:{style:r.o3},pl:{style:r.o3},px:{style:r.o3},py:{style:r.o3},padding:{style:r.o3},paddingTop:{style:r.o3},paddingRight:{style:r.o3},paddingBottom:{style:r.o3},paddingLeft:{style:r.o3},paddingX:{style:r.o3},paddingY:{style:r.o3},paddingInline:{style:r.o3},paddingInlineStart:{style:r.o3},paddingInlineEnd:{style:r.o3},paddingBlock:{style:r.o3},paddingBlockStart:{style:r.o3},paddingBlockEnd:{style:r.o3},m:{style:r.e6},mt:{style:r.e6},mr:{style:r.e6},mb:{style:r.e6},ml:{style:r.e6},mx:{style:r.e6},my:{style:r.e6},margin:{style:r.e6},marginTop:{style:r.e6},marginRight:{style:r.e6},marginBottom:{style:r.e6},marginLeft:{style:r.e6},marginX:{style:r.e6},marginY:{style:r.e6},marginInline:{style:r.e6},marginInlineStart:{style:r.e6},marginInlineEnd:{style:r.e6},marginBlock:{style:r.e6},marginBlockStart:{style:r.e6},marginBlockEnd:{style:r.e6},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:A},rowGap:{style:S},columnGap:{style:C},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:B},maxWidth:{style:F},minWidth:{transform:B},height:{transform:B},maxHeight:{transform:B},minHeight:{transform:B},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}})},6523:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(4142),o=n(7730),a=n(4844),i=n(5408),l=n(8010);const c=function(){function e(e,t,n,o){const l={[e]:t,theme:n},c=o[e];if(!c)return{[e]:t};const{cssProperty:u=e,themeKey:s,transform:f,style:h}=c;if(null==t)return null;if("typography"===s&&"inherit"===t)return{[e]:t};const d=(0,a.DW)(n,s)||{};return h?h(l):(0,i.k9)(l,t,(t=>{let n=(0,a.Jq)(d,f,t);return t===n&&"string"==typeof t&&(n=(0,a.Jq)(d,f,`${e}${"default"===t?"":(0,r.Z)(t)}`,t)),!1===u?n:{[u]:n}}))}return function t(n){var r;const{sx:a,theme:c={}}=n||{};if(!a)return null;const u=null!=(r=c.unstable_sxConfig)?r:l.Z;function s(n){let r=n;if("function"==typeof n)r=n(c);else if("object"!=typeof n)return n;if(!r)return null;const a=(0,i.W8)(c.breakpoints),l=Object.keys(a);let s=a;return Object.keys(r).forEach((n=>{const a="function"==typeof(l=r[n])?l(c):l;var l;if(null!=a)if("object"==typeof a)if(u[n])s=(0,o.Z)(s,e(n,a,c,u));else{const e=(0,i.k9)({theme:c},a,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,a)?s=(0,o.Z)(s,e):s[n]=t({sx:a,theme:c})}else s=(0,o.Z)(s,e(n,a,c,u))})),(0,i.L7)(l,s)}return Array.isArray(a)?a.map(s):s(a)}}();c.filterProps=["sx"];const u=c},6682:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(6268),o=n(4168);const a=(0,r.Z)(),i=function(e=a){return(0,o.Z)(e)}},4168:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(5260);const a=function(e=null){const t=r.useContext(o.T);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}},7078:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const r=e=>e,o=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})()},4142:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(1387);function o(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},4780:(e,t,n)=>{"use strict";function r(e,t,n=void 0){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>{if(r){const o=t(r);""!==o&&e.push(o),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}n.d(t,{Z:()=>r})},9336:(e,t,n)=>{"use strict";function r(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}n.d(t,{Z:()=>r})},9766:(e,t,n)=>{"use strict";n.d(t,{P:()=>o,Z:()=>i});var r=n(7462);function o(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function a(e){if(!o(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=a(e[n])})),t}function i(e,t,n={clone:!0}){const l=n.clone?(0,r.Z)({},e):e;return o(e)&&o(t)&&Object.keys(t).forEach((r=>{"__proto__"!==r&&(o(t[r])&&r in e&&o(e[r])?l[r]=i(e[r],t[r],n):n.clone?l[r]=o(t[r])?a(t[r]):t[r]:l[r]=t[r])})),l}},1387:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},4867:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7078);const o={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function a(e,t,n="Mui"){const a=o[t];return a?`${n}-${a}`:`${r.Z.generate(e)}-${t}`}},1588:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4867);function o(e,t,n="Mui"){const o={};return t.forEach((t=>{o[t]=(0,r.Z)(e,t,n)})),o}},2690:(e,t,n)=>{"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{Z:()=>r})},4161:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(2690);function o(e){return(0,r.Z)(e).defaultView||window}},7925:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7462);function o(e,t){const n=(0,r.Z)({},t);return Object.keys(e).forEach((a=>{if(a.toString().match(/^(components|slots)$/))n[a]=(0,r.Z)({},e[a],n[a]);else if(a.toString().match(/^(componentsProps|slotProps)$/)){const i=e[a]||{},l=t[a];n[a]={},l&&Object.keys(l)?i&&Object.keys(i)?(n[a]=(0,r.Z)({},l),Object.keys(i).forEach((e=>{n[a][e]=o(i[e],l[e])}))):n[a]=l:n[a]=i}else void 0===n[a]&&(n[a]=e[a])})),n}},7960:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:()=>r})},3546:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);const o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect},3703:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(7960);function a(...e){return r.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{(0,o.Z)(e,t)}))}),e)}},4184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"===a||"number"===a)e.push(n);else if(Array.isArray(n)){if(n.length){var i=o.apply(null,n);i&&e.push(i)}}else if("object"===a){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){e.push(n.toString());continue}for(var l in n)r.call(n,l)&&n[l]&&e.push(l)}}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},6528:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,"body{padding:0px;margin:0px}.slika{background-color:#006064}.slika td{padding:0px 20px}.facts{margin:auto;justify-items:center;flex-direction:column;width:100%;background-color:#006064;color:#b2ebf2;font-size:30px;text-shadow:3px 3px 15px black;font-family:'Trebuchet MS', 'Lucida Sans Unicode';font-weight:bold}.facts .table{margin:auto;width:700px;text-align:center}.facts .table td{padding:10px 5px}.facts .table .category{text-align:left;font-size:24px}.facts .table .author{cursor:pointer;font-size:26px;text-align:right;padding-bottom:20px;color:#9fefd6}.facts .table .author:hover{color:#ffdd56;font-weight:bold;text-shadow:2px 2px 8px black}.facts hr{border:1px solid #4dd0e1}.navigation{display:flex;flex-direction:column;background-color:#293629;width:800px}.loader{margin:auto;padding-top:350px;display:flex;justify-content:center;align-items:center}.history{font-size:28px;text-align:center;height:80px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.paper{display:flex;flex-basis:auto;margin-top:8px;height:35px;justify-items:center;width:250px}.paper .base{justify-items:center;height:30px;padding-top:11px;padding-left:15px;font-size:22px;color:dodgerblue}.place{text-align:center;width:900px;height:460px;margin:auto;background-color:#bdd8ee;font-family:'Trebuchet MS', 'Lucida Sans Unicode';padding-top:10px;margin-top:10px}.place .search{width:250px;margin:auto;background-color:#add3f1}.drzava{cursor:pointer}.drzava:hover{color:#ffdd56;font-weight:bold;text-shadow:2px 2px 12px black}.tabelaZemlje{margin:auto;width:800px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.tabelaZemlje .razmak{height:70px}.tabelaZemlje .results{background-color:#bbdefb;font-size:18px}.tabelaZemlje .navod{font-size:24px;display:flex;align-content:flex-start;width:120px;padding-left:5px}.tabelaZemlje .nameComm{font-size:28px;width:650px;padding-left:5px}.tabelaZemlje .history{font-size:28px;text-align:center;height:60px}.tabelaZemlje .celebrity{text-transform:capitalize;text-align:left}.tabelaZemlje .celebrity,.tabelaZemlje .networth{font-weight:bold;font-size:30px}.tabelaZemlje .historyPerson{font-weight:bold;font-size:30px;cursor:pointer}.tabelaZemlje .historyPerson:hover{text-shadow:1px 1px 3px #64b5f6}.tabelaZemlje .phonetics{font-size:16px;background-color:#bcd0df;border:1px solid grey;border-radius:5px;margin-left:10px;max-width:150px;cursor:pointer;overflow:hidden}.tabelaZemlje .logoImg{max-width:300px}.tabelaZemlje .dictionary{width:800px;font-size:28px;padding-left:10px}.tabelaZemlje .nameComm{font-size:24px}.tabelaZemlje .nameComm ul{padding:0}.tabelaZemlje .nameComm li{list-style:none;padding:0}.tabelaZemlje .more{display:block;align-items:end;width:120px;color:#1976d2;cursor:pointer;font-size:24px}.tabelaZemlje .more:hover{color:#64b5f6}.tabelaZemlje img{width:700px}.tabelaZemlje .imgRobot{width:300px}.tabelaZemlje hr{border:2px solid #6a757e}.tabelaZemlje td{font-size:24px}.tabelaZemlje .colorHex{font-size:22px;width:300px;height:60px;cursor:copy}.tabelaZemlje .colorBut{text-align:center;border-radius:10px;width:100px;background-color:#64b5f6;height:45px;font-size:22px;padding:10px;cursor:pointer}.tabelaZemlje .colorBut:hover{background-color:#1976d2;color:#64b5f6}.mainDiv{background-color:#ffe0b2}.jokesMain{background-color:#b2ebf2;width:400px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesMain th{font-size:32px}.jokesMain td{padding:25px;font-size:34px;font-family:'Arial Narrow Bold', sans-serif}.jokesMain td img{width:500px}.jokesMain .borderGif{border-bottom:2px solid #6767bc}.jokesMain .pun{text-align:center;font-size:34px;font-weight:bold}.jokesText{display:flex;justify-content:space-around;width:1700px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesText th{font-size:32px}.jokesText td{padding:25px;font-size:34px;font-family:'Arial Narrow Bold', sans-serif}.jokesText .created{font-size:18px}.poznatiMain{margin:auto;display:flex;justify-content:space-around;border:2px solid black;width:1200px;height:1650px}.punapi{width:500px;border-radius:10px;background-color:#fff8e1;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.punapi th{font-size:28px;color:#2b7f7f;text-align:center}.punapi td{font-size:28px;padding:2px 20px}.jokeMain{border-radius:12px;width:500px;margin:auto;background-color:#f9fbe7;padding:20px 15px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokeMain .jokeAnswer,.jokeMain .jokeAns{font-weight:bold;font-size:28px;color:#1a237e}.jokeMain .jokeAnswer:hover{color:#ff8f00}.trivia{width:600px;height:900px;margin:auto;background-color:#bdd8ee;padding:30px 15px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.trivia .category{width:300px;height:40px;margin-top:10px;background-color:#80deea;border-radius:7px;font-size:24px;padding:5px 15px;cursor:pointer}.trivia .category:hover{background-color:#26c6da}.trivia .triviaAnswer:hover{color:#388e3c}.trivia .triviaAnswer,.trivia .triviaAns{font-weight:bold;font-size:28px;color:#1a237e}.dadJokes{background-color:#c8e6c9;width:500px;font-size:24px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.dadJokes .border{border-bottom:1px solid #4db6ac}.dadJokes .borderChuk{border-bottom:1px solid #4db6ac;font-size:16px}.dadJokes img{width:700px;text-align:center}.footer{font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;text-align:center;padding-top:750px;height:80px}.metropolitanMain{font-family:Tahoma, sans-serif;margin:auto;width:900px}.metropolitanMain .tableRow{width:890px}.metropolitanMain .tableRow .imgMetro{width:895px;border-radius:5px}.metropolitanMain .results{padding:5px;font-size:18px}.metropolitanMain .metroTitle{text-align:center;font-weight:bold;font-size:28px}.metropolitanMain .forLink{text-align:center;font-size:16px}.metropolitanMain td{font-size:24px;width:880px;padding:7px}.metropolitanMain .dropdown{font-size:30px;font-weight:bold;text-align:center;position:relative;display:inline-block;cursor:pointer}.metropolitanMain .dropdown .dropdown-content{display:none;font-size:22px;font-weight:lighter;position:absolute;background-color:#f9f9f9;min-width:40px;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);padding:10px}.metropolitanMain .dropdown .dropdown-content a{font-size:16px}.metropolitanMain .dropdown:hover{color:#fdc714;text-shadow:2px 2px 7px black}.metropolitanMain .dropdown:hover .dropdown-content{display:block;color:black;text-shadow:none}.gridColor{margin:auto;display:grid;grid-template-columns:auto auto auto auto auto auto auto auto;width:1200px;gap:0px;background-image:linear-gradient(#ded3d3, #c2d5c2);font-size:18px}.gridColor .dropdown{position:relative;display:inline-block;cursor:pointer;height:150px}.gridColor .dropdown .dropdown-content{display:none;font-size:22px;font-weight:lighter;position:absolute;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;background-color:#f9f9f9;min-width:145px;max-width:145px;height:150px;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);padding-left:5px;cursor:copy}.gridColor .dropdown:hover .dropdown-content{display:block;color:black;text-shadow:none}.back-to-top{position:fixed;bottom:20px;right:300px;color:#84867b;cursor:pointer;border-radius:5px}.back-to-top .arrowup{align-items:center;width:30px;height:25px;color:#7a9c99ac;background-color:rgba(222,211,211,0.43);border-radius:5px;border:solid 3px #95beba7c}@media screen and (max-width: 500px){.place{margin:0;display:flex;flex-direction:column;width:350px;height:500px}.jokesText{display:block;width:350px;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesText th{font-size:22px}.jokesText td{padding:8px;font-size:20px}.trivia{width:350px}.trivia .triviaAnswer{font-size:22px}.trivia .triviaAns{font-size:22px}.trivia .category{font-size:20px;height:36px}.facts{font-size:18px;text-shadow:1px 1px 3px black}.facts .table{width:340px}.facts .table tr{padding:4px}.facts .table .category{font-size:15px}.facts .table .author{font-size:16px}.jokeMain{width:350px;border-radius:0}.jokeMain .jokeAnswer{font-size:22px}.jokeMain .jokeAns{font-size:22px}.tabelaZemlje{width:350px}.tabelaZemlje .razmak{height:20px}.tabelaZemlje .history,.tabelaZemlje .historyPerson{font-size:20px;height:40px}.tabelaZemlje .celebrity{font-size:22px;padding-left:8px}.tabelaZemlje .logoImg{max-width:200px}.tabelaZemlje .dictionary{padding-left:8px;font-size:20px}.tabelaZemlje img{width:348px}.tabelaZemlje .imgRobot{width:200px}.tabelaZemlje .navod,.tabelaZemlje .more{padding-left:4px;font-size:16px;width:95px}.tabelaZemlje .nameComm{padding-left:4px;font-size:20px;width:255px}.tabelaZemlje .networth{font-size:18px}.tabelaZemlje .phonetics{font-size:10px;border-radius:3px;margin-left:5px;max-width:100px}.tabelaZemlje .colorHex{font-size:18px;width:220px;height:40px}.tabelaZemlje .colorBut{width:80px;border-radius:7px;height:35px;font-size:18px;padding:8px}.dadJokes{width:350px;font-size:18px}.dadJokes .borderChuk,.dadJokes .created{font-size:14px}.dadJokes hr{border:1px solid}.mainJoke{width:350px;font-size:20px}.jokesMain{width:350px;border-radius:0;font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}.jokesMain th{font-size:20px}.jokesMain td{padding:15px;font-size:20px}.jokesMain td img{width:348px}.jokesMain .pun{font-size:22px}.metropolitanMain{width:350px}.metropolitanMain .tableRow{width:340px}.metropolitanMain .tableRow .imgMetro{width:340px;border-radius:5px}.metropolitanMain .results{padding:4px;font-size:16px}.metropolitanMain .metroTitle{text-align:center;font-weight:bold;font-size:22px}.metropolitanMain .forLink{text-align:center;font-size:10px}.metropolitanMain td{font-size:17px;width:335px;padding:2px}.metropolitanMain .dropdown{font-size:24px;font-weight:bold;text-align:center;position:relative;display:inline-block;cursor:pointer}.metropolitanMain .dropdown .dropdown-content{display:none;font-size:18px;font-weight:lighter;position:absolute;background-color:#f9f9f9;min-width:40px;max-width:300px;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);padding:10px}.metropolitanMain .dropdown .dropdown-content a{font-size:10px}.metropolitanMain .dropdown:hover{color:#fdc714;text-shadow:2px 2px 7px black}.metropolitanMain .dropdown:hover .dropdown-content{display:block;color:black;text-shadow:none}.gridColor{grid-template-columns:auto auto auto auto;width:350px;font-size:16px}.gridColor .dropdown{height:87px}.gridColor .dropdown .dropdown-content{font-size:16px;min-width:82px;max-width:82px;height:87px}.back-to-top{right:20px}}\n","",{version:3,sources:["webpack://./src/scss/main.scss"],names:[],mappings:"AAAA,KACI,WAAY,CACZ,UAAW,CACd,OAGG,wBAAyB,CAD7B,UAMQ,gBAAiB,CACpB,OAMD,WAAY,CAEZ,oBAAqB,CACrB,qBAAsB,CAKtB,UAAW,CAIX,wBAAyB,CAEzB,aAAc,CACd,cAAe,CACf,8BAA+B,CAE/B,iDAAkD,CAElD,gBAAiB,CArBrB,cAwBQ,WAAY,CACZ,WAAY,CACZ,iBAAkB,CA1B1B,iBA6BY,gBAAiB,CA7B7B,wBAiCY,eAAgB,CAChB,cAAe,CAlC3B,sBAsCY,cAAe,CACf,cAAe,CACf,gBAAiB,CACjB,mBAAoB,CACpB,aAAc,CA1C1B,4BA6CgB,aAAwB,CACxB,gBAAiB,CACjB,6BAA8B,CA/C9C,UAsDQ,wBAAyB,CAC5B,YAID,YAAa,CACb,qBAAsB,CACtB,wBAAyB,CACzB,WAAY,CACf,QAGG,WAAY,CACZ,iBAAkB,CAClB,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CAEtB,SAGG,cAAe,CACf,iBAAkB,CAClB,WAAY,CACZ,oGAAqG,CACxG,OAGG,YAAa,CACb,eAAgB,CAChB,cAAe,CAEf,WAAY,CACZ,oBAAqB,CACrB,WAAY,CAPhB,aAWQ,oBAAqB,CAErB,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CAEpB,OAQD,iBAAkB,CAClB,WAAY,CACZ,YAAa,CACb,WAAY,CACZ,wBAAyB,CAEzB,iDAAkD,CAElD,gBAAiB,CACjB,eAAgB,CAZpB,eAgBQ,WAAY,CACZ,WAAY,CACZ,wBAAyB,CAE5B,QAOD,cAAe,CADnB,cAIQ,aAAwB,CACxB,gBAAiB,CACjB,8BAA+B,CAClC,cAOD,WAAY,CAIZ,WAAY,CACZ,oGAAqG,CAPzG,sBAUQ,WAAY,CAVpB,uBAcQ,wBAAyB,CACzB,cAAe,CAfvB,qBAmBQ,cAAe,CAEf,YAAa,CACb,wBAAyB,CAEzB,WAAY,CACZ,gBAAiB,CAzBzB,wBA6BQ,cAAe,CACf,WAAY,CACZ,gBAAiB,CA/BzB,uBAmCQ,cAAe,CACf,iBAAkB,CAClB,WAAY,CArCpB,yBAyCQ,yBAA0B,CAC1B,eAAgB,CA1CxB,iDA+CQ,gBAAiB,CACjB,cAAe,CAhDvB,6BAoDQ,gBAAiB,CACjB,cAAe,CACf,cAAe,CAtDvB,mCAyDY,+BAAgC,CAzD5C,yBAgEQ,cAAe,CACf,wBAAyB,CACzB,qBAAsB,CACtB,iBAAkB,CAClB,gBAAiB,CACjB,eAAgB,CAChB,cAAe,CAEf,eAAgB,CAxExB,uBA4EQ,eAAgB,CA5ExB,0BAgFQ,WAAY,CACZ,cAAe,CACf,iBAAkB,CAlF1B,wBAsFQ,cAAe,CAtFvB,2BAyFY,SAAU,CAzFtB,2BA6FY,eAAgB,CAChB,SAAU,CA9FtB,oBAmGQ,aAAc,CACd,eAAgB,CAChB,WAAY,CAEZ,aAAc,CACd,cAAe,CACf,cAAe,CAzGvB,0BA4GY,aAAc,CA5G1B,kBAiHQ,WAAY,CAjHpB,wBAqHQ,WAAY,CArHpB,iBA2HQ,wBAAyB,CA3HjC,iBA+HQ,cAAe,CA/HvB,wBAmIQ,cAAe,CACf,WAAY,CACZ,WAAY,CACZ,WAAY,CAtIpB,wBA0IQ,iBAAkB,CAClB,kBAAmB,CACnB,WAAY,CACZ,wBAAyB,CACzB,WAAY,CACZ,cAAe,CACf,YAAa,CAEb,cAAe,CAlJvB,8BAqJY,wBAAyB,CACzB,aAAc,CACjB,SAML,wBAAyB,CAE5B,WASG,wBAAyB,CACzB,WAAY,CAEZ,oGAAqG,CAJzG,cAOQ,cAAe,CAPvB,cAWQ,YAAa,CACb,cAAe,CACf,2CAA4C,CAbpD,kBAgBY,WAAY,CAhBxB,sBAqBQ,+BAA2C,CArBnD,gBAyBQ,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CACpB,WAID,YAAa,CACb,4BAA6B,CAC7B,YAAa,CAEb,oGAAqG,CALzG,cAQQ,cAAe,CARvB,cAYQ,YAAa,CACb,cAAe,CACf,2CAA4C,CAdpD,oBAmBQ,cAAe,CAClB,aAQD,WAAY,CACZ,YAAa,CACb,4BAA6B,CAC7B,sBAAuB,CACvB,YAAa,CACb,aAAc,CACjB,QAKG,WAAY,CACZ,kBAAmB,CACnB,wBAAyB,CACzB,oGAAqG,CAJzG,WAOQ,cAAe,CACf,aAAwB,CACxB,iBAAkB,CAT1B,WAaQ,cAAe,CACf,gBAAiB,CACpB,UAID,kBAAmB,CACnB,WAAY,CAEZ,WAAY,CACZ,wBAAyB,CACzB,iBAAkB,CAClB,oGAAqG,CAPzG,yCAWQ,gBAAiB,CACjB,cAAe,CACf,aAAc,CAbtB,4BAkBY,aAAc,CACjB,QAKL,WAAY,CACZ,YAAa,CACb,WAAY,CACZ,wBAAyB,CACzB,iBAAkB,CAClB,oGAAqG,CANzG,kBASQ,WAAY,CACZ,WAAY,CACZ,eAAgB,CAChB,wBAAyB,CACzB,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CACjB,cAAe,CAhBvB,wBAmBY,wBAAyB,CAnBrC,4BAyBY,aAAc,CAzB1B,yCA+BQ,gBAAiB,CACjB,cAAe,CACf,aAAc,CACjB,UAID,wBAAyB,CACzB,WAAY,CACZ,cAAe,CACf,oGAAqG,CAJzG,kBAOQ,+BAAgC,CAPxC,sBAaQ,+BAAgC,CAEhC,cAAe,CAfvB,cAqBQ,WAAY,CACZ,iBAAkB,CACrB,QAKD,oGAAqG,CACrG,iBAAkB,CAClB,iBAAkB,CAClB,WAAY,CACf,kBAIG,8BAA+B,CAC/B,WAAY,CACZ,WAAY,CAHhB,4BAMQ,WAAY,CANpB,sCASY,WAAY,CACZ,iBAAkB,CAV9B,2BAeQ,WAAY,CACZ,cAAe,CAhBvB,8BAmBQ,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CArBvB,2BAwBQ,iBAAkB,CAClB,cAAe,CAzBvB,qBA4BQ,cAAe,CACf,WAAY,CACZ,WAAY,CA9BpB,4BAmCQ,cAAe,CACf,gBAAiB,CAEjB,iBAAkB,CAElB,iBAAkB,CAClB,oBAAqB,CACrB,cAAe,CA1CvB,8CA6CY,YAAa,CACb,cAAe,CACf,mBAAoB,CACpB,iBAAkB,CAGlB,wBAAyB,CACzB,cAAe,CACf,2CAA+C,CAC/C,YAAa,CAtDzB,gDA2DgB,cAAe,CA3D/B,kCAiEY,aAAc,CACd,6BAA8B,CAlE1C,oDAsEY,aAAc,CACd,WAAY,CACZ,gBAAiB,CAGpB,WAKL,WAAY,CACZ,YAAa,CACb,6DAA8D,CAC9D,YAAa,CACb,OAAQ,CACR,kDAAyE,CACzE,cAAe,CAPnB,qBAUQ,iBAAkB,CAClB,oBAAqB,CACrB,cAAe,CACf,YAAa,CAbrB,uCAgBY,YAAa,CACb,cAAe,CACf,mBAAoB,CACpB,iBAAkB,CAClB,oGAAqG,CACrG,wBAAyB,CACzB,eAAgB,CAChB,eAAgB,CAChB,YAAa,CACb,2CAA+C,CAC/C,gBAAiB,CACjB,WAAY,CA3BxB,6CA+BY,aAAc,CACd,WAAY,CACZ,gBAAiB,CACpB,aAIL,cAAe,CACf,WAAY,CACZ,WAAY,CAEZ,aAAc,CACd,cAAe,CACf,iBAAkB,CAPtB,sBAUQ,kBAAmB,CAEnB,UAAW,CACX,WAAY,CACZ,eAAgB,CAChB,uCAA2C,CAE3C,iBAAkB,CAClB,0BAA2B,CAC9B,qCAKD,OACI,QAAS,CACT,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,YAAa,CAEhB,WAGG,aAAc,CACd,WAAY,CAEZ,oGAAqG,CAJzG,cAOQ,cAAe,CAPvB,cAWQ,WAAY,CACZ,cAAe,CAGlB,QAID,WAAY,CADhB,sBAIQ,cAAe,CAJvB,mBASQ,cAAe,CATvB,kBAaQ,cAAe,CACf,WAAY,CACf,OAKD,cAAe,CACf,6BAA8B,CAHlC,cAOQ,WAAY,CAPpB,iBAUY,WAAY,CAVxB,wBAcY,cAAe,CAd3B,sBAkBY,cAAe,CAClB,UAML,WAAY,CACZ,eAAgB,CAFpB,sBAKQ,cAAe,CALvB,mBAUQ,cAAe,CAClB,cAMD,WAAY,CADhB,sBAIQ,WAAY,CAJpB,oDASQ,cAAe,CACf,WAAY,CAVpB,yBAeQ,cAAe,CACf,gBAAiB,CAhBzB,uBAoBQ,eAAgB,CApBxB,0BAwBQ,gBAAiB,CACjB,cAAe,CAzBvB,kBA6BQ,WAAY,CA7BpB,wBAiCQ,WAAY,CAjCpB,yCAsCQ,gBAAiB,CACjB,cAAe,CACf,UAAW,CAxCnB,wBA4CQ,gBAAiB,CACjB,cAAe,CACf,WAAY,CA9CpB,wBAkDQ,cAAe,CAlDvB,yBAsDQ,cAAe,CAGf,iBAAkB,CAClB,eAAgB,CAChB,eAAgB,CA3DxB,wBAgEQ,cAAe,CACf,WAAY,CACZ,WAAY,CAlEpB,wBAsEQ,UAAW,CACX,iBAAkB,CAClB,WAAY,CACZ,cAAe,CACf,WAAY,CACf,UAKD,WAAY,CACZ,cAAe,CAHnB,yCAOQ,cAAe,CAPvB,aAWQ,gBAAiB,CACpB,UAID,WAAY,CACZ,cAAe,CAClB,WAIG,WAAY,CACZ,eAAgB,CAChB,oGAAqG,CAJzG,cAOQ,cAAe,CAPvB,cAWQ,YAAa,CACb,cAAe,CAZvB,kBAgBY,WAAY,CAhBxB,gBAqBQ,cAAe,CAClB,kBAKD,WAAY,CAFhB,4BAKQ,WAAY,CALpB,sCAQY,WAAY,CACZ,iBAAkB,CAT9B,2BAcQ,WAAY,CACZ,cAAe,CAfvB,8BAmBQ,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CArBvB,2BAyBQ,iBAAkB,CAClB,cAAe,CA1BvB,qBAgCQ,cAAe,CACf,WAAY,CACZ,WAAY,CAlCpB,4BAsCQ,cAAe,CACf,gBAAiB,CAEjB,iBAAkB,CAElB,iBAAkB,CAClB,oBAAqB,CACrB,cAAe,CA7CvB,8CAgDY,YAAa,CACb,cAAe,CACf,mBAAoB,CACpB,iBAAkB,CAGlB,wBAAyB,CAEzB,cAAe,CACf,eAAgB,CAChB,2CAA+C,CAC/C,YAAa,CA3DzB,gDA+DgB,cAAe,CA/D/B,kCAqEY,aAAc,CACd,6BAA8B,CAtE1C,oDA0EY,aAAc,CACd,WAAY,CACZ,gBAAiB,CAGpB,WAKL,yCAA0C,CAC1C,WAAY,CACZ,cAAe,CAHnB,qBAMQ,WAAY,CANpB,uCASY,cAAe,CACf,cAAe,CACf,cAAe,CACf,WAAY,CACf,aAIL,UAAW,CACd",sourcesContent:["body {\r\n    padding: 0px;\r\n    margin: 0px;\r\n}\r\n\r\n.slika {\r\n    background-color: #006064;\r\n\r\n\r\n\r\n    td {\r\n        padding: 0px 20px;\r\n    }\r\n\r\n\r\n}\r\n\r\n.facts {\r\n    margin: auto;\r\n\r\n    justify-items: center;\r\n    flex-direction: column;\r\n\r\n\r\n\r\n\r\n    width: 100%;\r\n    // height: 300px;\r\n\r\n\r\n    background-color: #006064;\r\n\r\n    color: #b2ebf2;\r\n    font-size: 30px;\r\n    text-shadow: 3px 3px 15px black;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode';\r\n\r\n    font-weight: bold;\r\n\r\n    .table {\r\n        margin: auto;\r\n        width: 700px;\r\n        text-align: center;\r\n\r\n        td {\r\n            padding: 10px 5px;\r\n        }\r\n\r\n        .category {\r\n            text-align: left;\r\n            font-size: 24px;\r\n        }\r\n\r\n        .author {\r\n            cursor: pointer;\r\n            font-size: 26px;\r\n            text-align: right;\r\n            padding-bottom: 20px;\r\n            color: #9fefd6;\r\n\r\n            &:hover {\r\n                color: rgb(255, 221, 86);\r\n                font-weight: bold;\r\n                text-shadow: 2px 2px 8px black;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    hr {\r\n        border: 1px solid #4dd0e1;\r\n    }\r\n}\r\n\r\n.navigation {\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: #293629;\r\n    width: 800px;\r\n}\r\n\r\n.loader {\r\n    margin: auto;\r\n    padding-top: 350px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n}\r\n\r\n.history {\r\n    font-size: 28px;\r\n    text-align: center;\r\n    height: 80px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n\r\n.paper {\r\n    display: flex;\r\n    flex-basis: auto;\r\n    margin-top: 8px;\r\n\r\n    height: 35px;\r\n    justify-items: center;\r\n    width: 250px;\r\n\r\n\r\n    .base {\r\n        justify-items: center;\r\n\r\n        height: 30px;\r\n        padding-top: 11px;\r\n        padding-left: 15px;\r\n        font-size: 22px;\r\n        color: dodgerblue;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n.place {\r\n\r\n\r\n    text-align: center;\r\n    width: 900px;\r\n    height: 460px;\r\n    margin: auto;\r\n    background-color: #bdd8ee;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode';\r\n\r\n    padding-top: 10px;\r\n    margin-top: 10px;\r\n\r\n\r\n    .search {\r\n        width: 250px;\r\n        margin: auto;\r\n        background-color: #add3f1;\r\n        // padding: auto;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n.drzava {\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        color: rgb(255, 221, 86);\r\n        font-weight: bold;\r\n        text-shadow: 2px 2px 12px black;\r\n    }\r\n}\r\n\r\n\r\n\r\n.tabelaZemlje {\r\n\r\n    margin: auto;\r\n\r\n\r\n\r\n    width: 800px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .razmak {\r\n        height: 70px;\r\n    }\r\n\r\n    .results {\r\n        background-color: #bbdefb;\r\n        font-size: 18px;\r\n    }\r\n\r\n    .navod {\r\n        font-size: 24px;\r\n\r\n        display: flex;\r\n        align-content: flex-start;\r\n\r\n        width: 120px;\r\n        padding-left: 5px;\r\n    }\r\n\r\n    .nameComm {\r\n        font-size: 28px;\r\n        width: 650px;\r\n        padding-left: 5px;\r\n    }\r\n\r\n    .history {\r\n        font-size: 28px;\r\n        text-align: center;\r\n        height: 60px;\r\n    }\r\n\r\n    .celebrity {\r\n        text-transform: capitalize;\r\n        text-align: left;\r\n    }\r\n\r\n    .celebrity,\r\n    .networth {\r\n        font-weight: bold;\r\n        font-size: 30px;\r\n    }\r\n\r\n    .historyPerson {\r\n        font-weight: bold;\r\n        font-size: 30px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            text-shadow: 1px 1px 3px #64b5f6;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    .phonetics {\r\n        font-size: 16px;\r\n        background-color: #bcd0df;\r\n        border: 1px solid grey;\r\n        border-radius: 5px;\r\n        margin-left: 10px;\r\n        max-width: 150px;\r\n        cursor: pointer;\r\n\r\n        overflow: hidden;\r\n    }\r\n\r\n    .logoImg {\r\n        max-width: 300px;\r\n    }\r\n\r\n    .dictionary {\r\n        width: 800px;\r\n        font-size: 28px;\r\n        padding-left: 10px;\r\n    }\r\n\r\n    .nameComm {\r\n        font-size: 24px;\r\n\r\n        ul {\r\n            padding: 0;\r\n        }\r\n\r\n        li {\r\n            list-style: none;\r\n            padding: 0;\r\n        }\r\n    }\r\n\r\n    .more {\r\n        display: block;\r\n        align-items: end;\r\n        width: 120px;\r\n        // text-align: right;\r\n        color: #1976d2;\r\n        cursor: pointer;\r\n        font-size: 24px;\r\n\r\n        &:hover {\r\n            color: #64b5f6;\r\n        }\r\n    }\r\n\r\n    img {\r\n        width: 700px;\r\n    }\r\n\r\n    .imgRobot {\r\n        width: 300px;\r\n    }\r\n\r\n    hr {\r\n\r\n\r\n        border: 2px solid #6a757e;\r\n    }\r\n\r\n    td {\r\n        font-size: 24px;\r\n    }\r\n\r\n    .colorHex {\r\n        font-size: 22px;\r\n        width: 300px;\r\n        height: 60px;\r\n        cursor: copy;\r\n    }\r\n\r\n    .colorBut {\r\n        text-align: center;\r\n        border-radius: 10px;\r\n        width: 100px;\r\n        background-color: #64b5f6;\r\n        height: 45px;\r\n        font-size: 22px;\r\n        padding: 10px;\r\n\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: #1976d2;\r\n            color: #64b5f6;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n.mainDiv {\r\n    background-color: #ffe0b2;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n.jokesMain {\r\n    background-color: #b2ebf2;\r\n    width: 400px;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    th {\r\n        font-size: 32px;\r\n    }\r\n\r\n    td {\r\n        padding: 25px;\r\n        font-size: 34px;\r\n        font-family: 'Arial Narrow Bold', sans-serif;\r\n\r\n        img {\r\n            width: 500px;\r\n        }\r\n    }\r\n\r\n    .borderGif {\r\n        border-bottom: 2px solid rgb(103, 103, 188);\r\n    }\r\n\r\n    .pun {\r\n        text-align: center;\r\n        font-size: 34px;\r\n        font-weight: bold;\r\n    }\r\n}\r\n\r\n.jokesText {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 1700px;\r\n\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    th {\r\n        font-size: 32px;\r\n    }\r\n\r\n    td {\r\n        padding: 25px;\r\n        font-size: 34px;\r\n        font-family: 'Arial Narrow Bold', sans-serif;\r\n\r\n    }\r\n\r\n    .created {\r\n        font-size: 18px;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n.poznatiMain {\r\n    margin: auto;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    border: 2px solid black;\r\n    width: 1200px;\r\n    height: 1650px;\r\n}\r\n\r\n\r\n\r\n.punapi {\r\n    width: 500px;\r\n    border-radius: 10px;\r\n    background-color: #fff8e1;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    th {\r\n        font-size: 28px;\r\n        color: rgb(43, 127, 127);\r\n        text-align: center;\r\n    }\r\n\r\n    td {\r\n        font-size: 28px;\r\n        padding: 2px 20px;\r\n    }\r\n}\r\n\r\n.jokeMain {\r\n    border-radius: 12px;\r\n    width: 500px;\r\n    // height: 500px;\r\n    margin: auto;\r\n    background-color: #f9fbe7;\r\n    padding: 20px 15px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .jokeAnswer,\r\n    .jokeAns {\r\n        font-weight: bold;\r\n        font-size: 28px;\r\n        color: #1a237e;\r\n    }\r\n\r\n    .jokeAnswer {\r\n        &:hover {\r\n            color: #ff8f00;\r\n        }\r\n    }\r\n}\r\n\r\n.trivia {\r\n    width: 600px;\r\n    height: 900px;\r\n    margin: auto;\r\n    background-color: #bdd8ee;\r\n    padding: 30px 15px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .category {\r\n        width: 300px;\r\n        height: 40px;\r\n        margin-top: 10px;\r\n        background-color: #80deea;\r\n        border-radius: 7px;\r\n        font-size: 24px;\r\n        padding: 5px 15px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: #26c6da;\r\n        }\r\n    }\r\n\r\n    .triviaAnswer {\r\n        &:hover {\r\n            color: #388e3c;\r\n        }\r\n    }\r\n\r\n    .triviaAnswer,\r\n    .triviaAns {\r\n        font-weight: bold;\r\n        font-size: 28px;\r\n        color: #1a237e;\r\n    }\r\n}\r\n\r\n.dadJokes {\r\n    background-color: #c8e6c9;\r\n    width: 500px;\r\n    font-size: 24px;\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n    .border {\r\n        border-bottom: 1px solid #4db6ac;\r\n\r\n\r\n    }\r\n\r\n    .borderChuk {\r\n        border-bottom: 1px solid #4db6ac;\r\n\r\n        font-size: 16px;\r\n    }\r\n\r\n\r\n\r\n    img {\r\n        width: 700px;\r\n        text-align: center;\r\n    }\r\n}\r\n\r\n\r\n.footer {\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n    text-align: center;\r\n    padding-top: 750px;\r\n    height: 80px;\r\n}\r\n\r\n\r\n.metropolitanMain {\r\n    font-family: Tahoma, sans-serif;\r\n    margin: auto;\r\n    width: 900px;\r\n\r\n    .tableRow {\r\n        width: 890px;\r\n\r\n        .imgMetro {\r\n            width: 895px;\r\n            border-radius: 5px;\r\n        }\r\n    }\r\n\r\n    .results {\r\n        padding: 5px;\r\n        font-size: 18px;\r\n    }\r\n    .metroTitle {\r\n        text-align: center;\r\n        font-weight: bold;\r\n        font-size: 28px;\r\n    }\r\n    .forLink {\r\n        text-align: center;\r\n        font-size: 16px;\r\n    }\r\n    td {\r\n        font-size: 24px;\r\n        width: 880px;\r\n        padding: 7px;\r\n    }\r\n\r\n\r\n    .dropdown {\r\n        font-size: 30px;\r\n        font-weight: bold;\r\n\r\n        text-align: center;\r\n\r\n        position: relative;\r\n        display: inline-block;\r\n        cursor: pointer;\r\n\r\n        .dropdown-content {\r\n            display: none;\r\n            font-size: 22px;\r\n            font-weight: lighter;\r\n            position: absolute;\r\n\r\n\r\n            background-color: #f9f9f9;\r\n            min-width: 40px;\r\n            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n            padding: 10px;\r\n\r\n\r\n            // z-index: 1;\r\n            a {\r\n                font-size: 16px;\r\n            }\r\n\r\n        }\r\n\r\n        &:hover {\r\n            color: #fdc714;\r\n            text-shadow: 2px 2px 7px black;\r\n        }\r\n\r\n        &:hover .dropdown-content {\r\n            display: block;\r\n            color: black;\r\n            text-shadow: none;\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\n.gridColor {\r\n    margin: auto;\r\n    display: grid;\r\n    grid-template-columns: auto auto auto auto auto auto auto auto;\r\n    width: 1200px;\r\n    gap: 0px;\r\n    background-image: linear-gradient(rgb(222, 211, 211), rgb(194, 213, 194));\r\n    font-size: 18px;\r\n\r\n    .dropdown {\r\n        position: relative;\r\n        display: inline-block;\r\n        cursor: pointer;\r\n        height: 150px;\r\n\r\n        .dropdown-content {\r\n            display: none;\r\n            font-size: 22px;\r\n            font-weight: lighter;\r\n            position: absolute;\r\n            font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n            background-color: #f9f9f9;\r\n            min-width: 145px;\r\n            max-width: 145px;\r\n            height: 150px;\r\n            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n            padding-left: 5px;\r\n            cursor: copy;\r\n        }\r\n\r\n        &:hover .dropdown-content {\r\n            display: block;\r\n            color: black;\r\n            text-shadow: none;\r\n        }\r\n    }\r\n}\r\n.back-to-top {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 300px;\r\n\r\n    color: #84867b;\r\n    cursor: pointer;\r\n    border-radius: 5px;\r\n\r\n    .arrowup {\r\n        align-items: center;\r\n\r\n        width: 30px;\r\n        height: 25px;\r\n        color: #7a9c99ac;\r\n        background-color: rgba(222, 211, 211, 0.43);\r\n\r\n        border-radius: 5px;\r\n        border: solid 3px #95beba7c;\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 500px) {\r\n\r\n    .place {\r\n        margin: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        width: 350px;\r\n        height: 500px;\r\n\r\n    }\r\n\r\n    .jokesText {\r\n        display: block;\r\n        width: 350px;\r\n\r\n        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n        th {\r\n            font-size: 22px;\r\n        }\r\n\r\n        td {\r\n            padding: 8px;\r\n            font-size: 20px;\r\n\r\n\r\n        }\r\n    }\r\n\r\n    .trivia {\r\n        width: 350px;\r\n\r\n        .triviaAnswer {\r\n            font-size: 22px;\r\n\r\n        }\r\n\r\n        .triviaAns {\r\n            font-size: 22px;\r\n        }\r\n\r\n        .category {\r\n            font-size: 20px;\r\n            height: 36px;\r\n        }\r\n    }\r\n\r\n    .facts {\r\n\r\n        font-size: 18px;\r\n        text-shadow: 1px 1px 3px black;\r\n\r\n\r\n        .table {\r\n            width: 340px;\r\n\r\n            tr {\r\n                padding: 4px;\r\n            }\r\n\r\n            .category {\r\n                font-size: 15px;\r\n            }\r\n\r\n            .author {\r\n                font-size: 16px;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    .jokeMain {\r\n        width: 350px;\r\n        border-radius: 0;\r\n\r\n        .jokeAnswer {\r\n            font-size: 22px;\r\n\r\n        }\r\n\r\n        .jokeAns {\r\n            font-size: 22px;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    .tabelaZemlje {\r\n        width: 350px;\r\n\r\n        .razmak {\r\n            height: 20px;\r\n        }\r\n\r\n        .history,\r\n        .historyPerson {\r\n            font-size: 20px;\r\n            height: 40px;\r\n        }\r\n\r\n\r\n        .celebrity {\r\n            font-size: 22px;\r\n            padding-left: 8px;\r\n        }\r\n\r\n        .logoImg {\r\n            max-width: 200px;\r\n        }\r\n\r\n        .dictionary {\r\n            padding-left: 8px;\r\n            font-size: 20px;\r\n        }\r\n\r\n        img {\r\n            width: 348px;\r\n        }\r\n\r\n        .imgRobot {\r\n            width: 200px;\r\n        }\r\n\r\n        .navod,\r\n        .more {\r\n            padding-left: 4px;\r\n            font-size: 16px;\r\n            width: 95px;\r\n        }\r\n\r\n        .nameComm {\r\n            padding-left: 4px;\r\n            font-size: 20px;\r\n            width: 255px;\r\n        }\r\n\r\n        .networth {\r\n            font-size: 18px;\r\n        }\r\n\r\n        .phonetics {\r\n            font-size: 10px;\r\n\r\n\r\n            border-radius: 3px;\r\n            margin-left: 5px;\r\n            max-width: 100px;\r\n\r\n        }\r\n\r\n        .colorHex {\r\n            font-size: 18px;\r\n            width: 220px;\r\n            height: 40px;\r\n\r\n        }\r\n        .colorBut {\r\n            width: 80px;\r\n            border-radius: 7px;\r\n            height: 35px;\r\n            font-size: 18px;\r\n            padding: 8px;\r\n        }\r\n    }\r\n\r\n    .dadJokes {\r\n\r\n        width: 350px;\r\n        font-size: 18px;\r\n\r\n        .borderChuk,\r\n        .created {\r\n            font-size: 14px;\r\n        }\r\n\r\n        hr {\r\n            border: 1px solid;\r\n        }\r\n    }\r\n\r\n    .mainJoke {\r\n        width: 350px;\r\n        font-size: 20px;\r\n    }\r\n\r\n    .jokesMain {\r\n\r\n        width: 350px;\r\n        border-radius: 0;\r\n        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n\r\n        th {\r\n            font-size: 20px;\r\n        }\r\n\r\n        td {\r\n            padding: 15px;\r\n            font-size: 20px;\r\n\r\n\r\n            img {\r\n                width: 348px;\r\n            }\r\n        }\r\n\r\n        .pun {\r\n            font-size: 22px;\r\n        }\r\n    }\r\n\r\n    .metropolitanMain {\r\n\r\n        width: 350px;\r\n\r\n        .tableRow {\r\n            width: 340px;\r\n\r\n            .imgMetro {\r\n                width: 340px;\r\n                border-radius: 5px;\r\n            }\r\n        }\r\n\r\n        .results {\r\n            padding: 4px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .metroTitle {\r\n            text-align: center;\r\n            font-weight: bold;\r\n            font-size: 22px;\r\n        }\r\n\r\n        .forLink {\r\n            text-align: center;\r\n            font-size: 10px;\r\n        }\r\n\r\n\r\n\r\n        td {\r\n            font-size: 17px;\r\n            width: 335px;\r\n            padding: 2px;\r\n        }\r\n\r\n        .dropdown {\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n\r\n            text-align: center;\r\n\r\n            position: relative;\r\n            display: inline-block;\r\n            cursor: pointer;\r\n\r\n            .dropdown-content {\r\n                display: none;\r\n                font-size: 18px;\r\n                font-weight: lighter;\r\n                position: absolute;\r\n\r\n\r\n                background-color: #f9f9f9;\r\n               \r\n                min-width: 40px;\r\n                max-width: 300px;\r\n                box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n                padding: 10px;\r\n\r\n                // z-index: 1;\r\n                a {\r\n                    font-size: 10px;\r\n                }\r\n\r\n            }\r\n\r\n            &:hover {\r\n                color: #fdc714;\r\n                text-shadow: 2px 2px 7px black;\r\n            }\r\n\r\n            &:hover .dropdown-content {\r\n                display: block;\r\n                color: black;\r\n                text-shadow: none;\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    .gridColor {\r\n        grid-template-columns: auto auto auto auto;\r\n        width: 350px;\r\n        font-size: 16px;\r\n\r\n        .dropdown {\r\n            height: 87px;\r\n\r\n            .dropdown-content {\r\n                font-size: 16px;\r\n                min-width: 82px;\r\n                max-width: 82px;\r\n                height: 87px;\r\n            }\r\n        }\r\n    }\r\n    .back-to-top {\r\n        right: 20px;\r\n    }\r\n\r\n}"],sourceRoot:""}]);const l=i},5740:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,"/* body {\n    margin: 0;\n}\n.title {\n    background-color: red;\n    color: #fff;\n    padding: 20px;\n    font-size: 18px;\n    text-align: center;\n}\n.custom-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n.custom-table,\n.custom-td {\n\n    border: 1px solid #ddd;\n    text-align: left;\n    padding: 10px;\n}\n\n.custom-table th {\n    background-color: mediumaquamarine;\n    color: #fff;\n}\n.custom-table tr:nth-child(even) {\n    background-color: #ddd;\n}\n\n.main-heading {\n    padding: 30px;\n    font-size: 22px;\n    margin: 20px auto;\n    text-align: center;\n}\n.active {\n    background-color: cornflowerblue;\n    color: #fff;\n    border: 2px solid red;\n}\n\n.form-text {\n    border: 2px solid red;\n}\n\n\n.btn {\n    min-width: 150px;\n    background-color: crimson;\n    color: #fff;\n    font-size: 18px;\n    display: block;\n    padding: 10px;\n    margin: 20px;\n    border: none;\n    cursor: pointer;\n}\n.btn:hover {\n    background-color: rgb(130, 189, 248);\n}\n.btn.btn-warning {\n    background-color: orange;\n}\n\n.btn:disabled {\n    background-color: darkgrey;\n    cursor: not-allowed;\n}\n.top_nav {\n\n    display: flex;\n    background-color: blue;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n.top_nav .navig {\n\n    margin: 15px;\n    padding: 20px;\n    font-size: 18px;\n    color: #fff;\n    text-decoration: none;\n}*/\n.loader-container {\n    height: 100vh;\n \n    background-color: rgb(174, 191, 191);\n\n    width: 800px;\n    display: flex;\n    justify-content: center;\n    margin: auto;\n    /* align-items: center; */\n}\n\n.comments-container {\n    max-width: 450px;\n    margin: auto;\n}\n.comments {\n    padding: 20px 0;\n    border-bottom:  solid 2px  #ccc;\n \n} \n body {\n    padding: 50px;\n    background-color: #cacbda;\n    color: #0d2a32;\n}\n.todo-input-container input{\n    padding: 10px;\n    border: 2px sollid #fff;\n    border-radius: 5px;\n    outline: none;\n}\n.todo-input-container .btn {\n    margin-left: 10px;\n    background-color: #fff;\n    color: #333;\n    cursor: pointer;\n}\n.todo-list {\n    padding: 0;\n    list-style: none;\n    max-width: 350px;\n}\n\n.todo-list li {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    color: #333;\n    background-color: #61dafb;\n    padding: 15px;\n    margin: 15px 0;\n    border-radius: 10px;\n} \n\n.loader-container {\n    height: 100hv;\n   \n    background-color: rgb(195, 204, 204);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.single-comment {\n    background-color: #61dafb;\n    padding: 15px;\n    margin-bottom: 20px;\n    border-radius: 5px;\n    color: #333;\n}\n.single-comment\n.samoID {\n    background-color: blueviolet;\n    padding: 12px;\n    margin-right: 12px;\n    cursor: pointer;\n}\n\n.users-container {\n    min-width: 900px;\n    /* background-color: #61dafb; */\n}\n\n.users-container th,\n.users-container td {\n    padding: 5px;\n    text-align: left;\n    border: 1px solid rgb(156, 161, 199);\n    padding-right: 30px;\n}\n\n.users:nth-child(even) {\n\n    border: 1px solid rgb(156, 161, 199);\n    padding: 10px;\n\n    background-color: rgb(156, 161, 199);\n}\n\n.users td {\n\n    padding: 5px 20px;\n\n}\n\n\n.korisnik {\n    display: flex;\n    justify-content: space-between;\n\n    \n\n    /* width: 750px; */\n    background-color: #61dafb;\n}\n.korisnik h1 {\n    font-size: 20px;\n    font-weight: bolder;\n    padding: 5px 10px;\n    color: darkslateblue;\n    font-family: Calibri, 'Trebuchet MS', sans-serif;\n}\n.korisnik p {\n    padding: 10px 10px;\n    font-size: 12px;\n\n}\n\n.korisnik div {\n    width: 250px;\n    padding: 0 10px;\n    /* padding: 8px; */\n    background-color: rgb(184, 205, 227);\n    color: darkslategrey;\n    border-bottom: 2px solid #7272ab;\n}\n\n.korisnik li {\n    list-style: none;\n    padding: 10px;\n}\n\n.lista {\n    font-family: 'Arial Narrow Bold', sans-serif;\n}\n\n.glavni {\n    display: flex;\n}\n\n.glavni h1 {\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande';\n    text-align: center;\n    background-color: antiquewhite;\n    color: darkslategrey;\n}\n\n/* .karusel img{\n    height: 460px;\n    color: rgb(250, 155, 30);\n    \n    font-size: 18px;\n    text-align: center;\n    background-color: #61dafb;\n   } */\n.vajari {\n    width: 700px;\n    display: flex;\n    justify-content: space-between;\n    border-bottom: 3px solid rgb(81, 88, 137);\n   \n}\n.vajari .vajar-opis p, \n.vajari .vajar-opis h2{\n   width: 300px;\n   \n    padding: 15px;\n}\n.vajar-slika {\ntext-align: center;\npadding: 15px;\n}\n.upis-todo {\n    background-color: aliceblue;\n}\n\n\n.tacke2 {\n    margin-top: 460px;\n    top: 8px;\n    width: 1960px;\n    display: block;\n    position: absolute;\n    border-bottom: 16px dotted;\n    animation: move2 5s infinite linear;\n  \n}\n\n\n\n\n@keyframes move2 {\n    from {\n        transform: translateX(1%);\n    }\n\n    to {\n        transform: translateX(-50%);\n    }\n}\n.zaDigitron {\n   margin: 0px 150px;\n    display: flex;\n   justify-content: space-between;\n    align-items: center;\n}\n.form-tekst {\n    border: 2px solid green;\n}\n.form-tekst:hover {\n    border-color: #61dafb;\n    background-color: #ccc;\n}","",{version:3,sources:["webpack://./src/css/styles.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoFE;AACF;IACI,aAAa;;IAEb,oCAAoC;;IAEpC,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,gBAAgB;IAChB,YAAY;AAChB;AACA;IACI,eAAe;IACf,+BAA+B;;AAEnC;CACC;IACG,aAAa;IACb,yBAAyB;IACzB,cAAc;AAClB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,aAAa;AACjB;AACA;IACI,iBAAiB;IACjB,sBAAsB;IACtB,WAAW;IACX,eAAe;AACnB;AACA;IACI,UAAU;IACV,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,WAAW;IACX,yBAAyB;IACzB,aAAa;IACb,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,aAAa;;IAEb,oCAAoC;IACpC,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,WAAW;AACf;AACA;;IAEI,4BAA4B;IAC5B,aAAa;IACb,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,+BAA+B;AACnC;;AAEA;;IAEI,YAAY;IACZ,gBAAgB;IAChB,oCAAoC;IACpC,mBAAmB;AACvB;;AAEA;;IAEI,oCAAoC;IACpC,aAAa;;IAEb,oCAAoC;AACxC;;AAEA;;IAEI,iBAAiB;;AAErB;;;AAGA;IACI,aAAa;IACb,8BAA8B;;;;IAI9B,kBAAkB;IAClB,yBAAyB;AAC7B;AACA;IACI,eAAe;IACf,mBAAmB;IACnB,iBAAiB;IACjB,oBAAoB;IACpB,gDAAgD;AACpD;AACA;IACI,kBAAkB;IAClB,eAAe;;AAEnB;;AAEA;IACI,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,oCAAoC;IACpC,oBAAoB;IACpB,gCAAgC;AACpC;;AAEA;IACI,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,4CAA4C;AAChD;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,mEAAmE;IACnE,kBAAkB;IAClB,8BAA8B;IAC9B,oBAAoB;AACxB;;AAEA;;;;;;;MAOM;AACN;IACI,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,yCAAyC;;AAE7C;AACA;;GAEG,YAAY;;IAEX,aAAa;AACjB;AACA;AACA,kBAAkB;AAClB,aAAa;AACb;AACA;IACI,2BAA2B;AAC/B;;;AAGA;IACI,iBAAiB;IACjB,QAAQ;IACR,aAAa;IACb,cAAc;IACd,kBAAkB;IAClB,0BAA0B;IAC1B,mCAAmC;;AAEvC;;;;;AAKA;IACI;QACI,yBAAyB;IAC7B;;IAEA;QACI,2BAA2B;IAC/B;AACJ;AACA;GACG,iBAAiB;IAChB,aAAa;GACd,8BAA8B;IAC7B,mBAAmB;AACvB;AACA;IACI,uBAAuB;AAC3B;AACA;IACI,qBAAqB;IACrB,sBAAsB;AAC1B",sourcesContent:["/* body {\r\n    margin: 0;\r\n}\r\n.title {\r\n    background-color: red;\r\n    color: #fff;\r\n    padding: 20px;\r\n    font-size: 18px;\r\n    text-align: center;\r\n}\r\n.custom-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n}\r\n.custom-table,\r\n.custom-td {\r\n\r\n    border: 1px solid #ddd;\r\n    text-align: left;\r\n    padding: 10px;\r\n}\r\n\r\n.custom-table th {\r\n    background-color: mediumaquamarine;\r\n    color: #fff;\r\n}\r\n.custom-table tr:nth-child(even) {\r\n    background-color: #ddd;\r\n}\r\n\r\n.main-heading {\r\n    padding: 30px;\r\n    font-size: 22px;\r\n    margin: 20px auto;\r\n    text-align: center;\r\n}\r\n.active {\r\n    background-color: cornflowerblue;\r\n    color: #fff;\r\n    border: 2px solid red;\r\n}\r\n\r\n.form-text {\r\n    border: 2px solid red;\r\n}\r\n\r\n\r\n.btn {\r\n    min-width: 150px;\r\n    background-color: crimson;\r\n    color: #fff;\r\n    font-size: 18px;\r\n    display: block;\r\n    padding: 10px;\r\n    margin: 20px;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n.btn:hover {\r\n    background-color: rgb(130, 189, 248);\r\n}\r\n.btn.btn-warning {\r\n    background-color: orange;\r\n}\r\n\r\n.btn:disabled {\r\n    background-color: darkgrey;\r\n    cursor: not-allowed;\r\n}\r\n.top_nav {\r\n\r\n    display: flex;\r\n    background-color: blue;\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n.top_nav .navig {\r\n\r\n    margin: 15px;\r\n    padding: 20px;\r\n    font-size: 18px;\r\n    color: #fff;\r\n    text-decoration: none;\r\n}*/\r\n.loader-container {\r\n    height: 100vh;\r\n \r\n    background-color: rgb(174, 191, 191);\r\n\r\n    width: 800px;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: auto;\r\n    /* align-items: center; */\r\n}\r\n\r\n.comments-container {\r\n    max-width: 450px;\r\n    margin: auto;\r\n}\r\n.comments {\r\n    padding: 20px 0;\r\n    border-bottom:  solid 2px  #ccc;\r\n \r\n} \r\n body {\r\n    padding: 50px;\r\n    background-color: #cacbda;\r\n    color: #0d2a32;\r\n}\r\n.todo-input-container input{\r\n    padding: 10px;\r\n    border: 2px sollid #fff;\r\n    border-radius: 5px;\r\n    outline: none;\r\n}\r\n.todo-input-container .btn {\r\n    margin-left: 10px;\r\n    background-color: #fff;\r\n    color: #333;\r\n    cursor: pointer;\r\n}\r\n.todo-list {\r\n    padding: 0;\r\n    list-style: none;\r\n    max-width: 350px;\r\n}\r\n\r\n.todo-list li {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    color: #333;\r\n    background-color: #61dafb;\r\n    padding: 15px;\r\n    margin: 15px 0;\r\n    border-radius: 10px;\r\n} \r\n\r\n.loader-container {\r\n    height: 100hv;\r\n   \r\n    background-color: rgb(195, 204, 204);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.single-comment {\r\n    background-color: #61dafb;\r\n    padding: 15px;\r\n    margin-bottom: 20px;\r\n    border-radius: 5px;\r\n    color: #333;\r\n}\r\n.single-comment\r\n.samoID {\r\n    background-color: blueviolet;\r\n    padding: 12px;\r\n    margin-right: 12px;\r\n    cursor: pointer;\r\n}\r\n\r\n.users-container {\r\n    min-width: 900px;\r\n    /* background-color: #61dafb; */\r\n}\r\n\r\n.users-container th,\r\n.users-container td {\r\n    padding: 5px;\r\n    text-align: left;\r\n    border: 1px solid rgb(156, 161, 199);\r\n    padding-right: 30px;\r\n}\r\n\r\n.users:nth-child(even) {\r\n\r\n    border: 1px solid rgb(156, 161, 199);\r\n    padding: 10px;\r\n\r\n    background-color: rgb(156, 161, 199);\r\n}\r\n\r\n.users td {\r\n\r\n    padding: 5px 20px;\r\n\r\n}\r\n\r\n\r\n.korisnik {\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    \r\n\r\n    /* width: 750px; */\r\n    background-color: #61dafb;\r\n}\r\n.korisnik h1 {\r\n    font-size: 20px;\r\n    font-weight: bolder;\r\n    padding: 5px 10px;\r\n    color: darkslateblue;\r\n    font-family: Calibri, 'Trebuchet MS', sans-serif;\r\n}\r\n.korisnik p {\r\n    padding: 10px 10px;\r\n    font-size: 12px;\r\n\r\n}\r\n\r\n.korisnik div {\r\n    width: 250px;\r\n    padding: 0 10px;\r\n    /* padding: 8px; */\r\n    background-color: rgb(184, 205, 227);\r\n    color: darkslategrey;\r\n    border-bottom: 2px solid #7272ab;\r\n}\r\n\r\n.korisnik li {\r\n    list-style: none;\r\n    padding: 10px;\r\n}\r\n\r\n.lista {\r\n    font-family: 'Arial Narrow Bold', sans-serif;\r\n}\r\n\r\n.glavni {\r\n    display: flex;\r\n}\r\n\r\n.glavni h1 {\r\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande';\r\n    text-align: center;\r\n    background-color: antiquewhite;\r\n    color: darkslategrey;\r\n}\r\n\r\n/* .karusel img{\r\n    height: 460px;\r\n    color: rgb(250, 155, 30);\r\n    \r\n    font-size: 18px;\r\n    text-align: center;\r\n    background-color: #61dafb;\r\n   } */\r\n.vajari {\r\n    width: 700px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-bottom: 3px solid rgb(81, 88, 137);\r\n   \r\n}\r\n.vajari .vajar-opis p, \r\n.vajari .vajar-opis h2{\r\n   width: 300px;\r\n   \r\n    padding: 15px;\r\n}\r\n.vajar-slika {\r\ntext-align: center;\r\npadding: 15px;\r\n}\r\n.upis-todo {\r\n    background-color: aliceblue;\r\n}\r\n\r\n\r\n.tacke2 {\r\n    margin-top: 460px;\r\n    top: 8px;\r\n    width: 1960px;\r\n    display: block;\r\n    position: absolute;\r\n    border-bottom: 16px dotted;\r\n    animation: move2 5s infinite linear;\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n@keyframes move2 {\r\n    from {\r\n        transform: translateX(1%);\r\n    }\r\n\r\n    to {\r\n        transform: translateX(-50%);\r\n    }\r\n}\r\n.zaDigitron {\r\n   margin: 0px 150px;\r\n    display: flex;\r\n   justify-content: space-between;\r\n    align-items: center;\r\n}\r\n.form-tekst {\r\n    border: 2px solid green;\r\n}\r\n.form-tekst:hover {\r\n    border-color: #61dafb;\r\n    background-color: #ccc;\r\n}"],sourceRoot:""}]);const l=i},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var u=0;u<e.length;u++){var s=[].concat(e[u]);r&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},8679:(e,t,n)=>{"use strict";var r=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function c(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,h=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(p){var o=d(n);o&&o!==p&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=c(t),m=c(n),y=0;y<i.length;++y){var v=i[y];if(!(a[v]||r&&r[v]||m&&m[v]||l&&l[v])){var g=h(n,v);try{u(t,v,g)}catch(e){}}}}return t}},6103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,c=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,h=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,x=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case a:case l:case i:case d:return e;default:switch(e=e&&e.$$typeof){case u:case h:case y:case m:case c:return e;default:return t}}case o:return t}}}function E(e){return w(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=c,t.Element=r,t.ForwardRef=h,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=d,t.isAsyncMode=function(e){return E(e)||w(e)===s},t.isConcurrentMode=E,t.isContextConsumer=function(e){return w(e)===u},t.isContextProvider=function(e){return w(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===h},t.isFragment=function(e){return w(e)===a},t.isLazy=function(e){return w(e)===y},t.isMemo=function(e){return w(e)===m},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===i},t.isSuspense=function(e){return w(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===d||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===c||e.$$typeof===u||e.$$typeof===h||e.$$typeof===g||e.$$typeof===b||e.$$typeof===x||e.$$typeof===v)},t.typeOf=w},1296:(e,t,n)=>{"use strict";e.exports=n(6103)},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function c(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,h=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d={},p={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(p,e)||!f.call(d,e)&&(h.test(e)?p[e]=!0:(d[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),E=Symbol.for("react.portal"),A=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),k=Symbol.for("react.provider"),B=Symbol.for("react.context"),L=Symbol.for("react.forward_ref"),F=Symbol.for("react.suspense"),O=Symbol.for("react.suspense_list"),j=Symbol.for("react.memo"),P=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var N=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var T=Symbol.iterator;function _(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var D,I=Object.assign;function M(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var R=!1;function z(e,t){if(!e||R)return"";R=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var c="\n"+o[i].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=i&&0<=l);break}}}finally{R=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function G(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return z(e.type,!1);case 11:return z(e.type.render,!1);case 1:return z(e.type,!0);default:return""}}function Z(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case A:return"Fragment";case E:return"Portal";case S:return"Profiler";case C:return"StrictMode";case F:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case B:return(e.displayName||"Context")+".Consumer";case k:return(e._context.displayName||"Context")+".Provider";case L:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case j:return null!==(t=e.displayName||null)?t:Z(e.type)||"Memo";case P:t=e._payload,e=e._init;try{return Z(e(t))}catch(e){}}return null}function $(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Z(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function U(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function W(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function V(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=U(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Q(e,t){X(e,t);var n=U(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,U(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&V(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+U(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:U(n)}}function ae(e,t){var n=U(t.value),r=U(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ce(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function he(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var de={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||de.hasOwnProperty(e)&&de[e]?(""+t).trim():t+"px"}function ye(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(de).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),de[t]=de[e]}))}));var ve=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Ae=null,Ce=null;function Se(e){if(e=xo(e)){if("function"!=typeof Ee)throw Error(a(280));var t=e.stateNode;t&&(t=Eo(t),Ee(e.stateNode,e.type,t))}}function ke(e){Ae?Ce?Ce.push(e):Ce=[e]:Ae=e}function Be(){if(Ae){var e=Ae,t=Ce;if(Ce=Ae=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}function Le(e,t){return e(t)}function Fe(){}var Oe=!1;function je(e,t,n){if(Oe)return e(t,n);Oe=!0;try{return Le(e,t,n)}finally{Oe=!1,(null!==Ae||null!==Ce)&&(Fe(),Be())}}function Pe(e,t){var n=e.stateNode;if(null===n)return null;var r=Eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Ne=!1;if(s)try{var Te={};Object.defineProperty(Te,"passive",{get:function(){Ne=!0}}),window.addEventListener("test",Te,Te),window.removeEventListener("test",Te,Te)}catch(se){Ne=!1}function _e(e,t,n,r,o,a,i,l,c){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var De=!1,Ie=null,Me=!1,Re=null,ze={onError:function(e){De=!0,Ie=e}};function Ge(e,t,n,r,o,a,i,l,c){De=!1,Ie=null,_e.apply(ze,arguments)}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ue(e){if(Ze(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ue(o),e;if(i===r)return Ue(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,c=o.child;c;){if(c===n){l=!0,n=o,r=i;break}if(c===r){l=!0,r=o,n=i;break}c=c.sibling}if(!l){for(c=i.child;c;){if(c===n){l=!0,n=i,r=o;break}if(c===r){l=!0,r=i,n=o;break}c=c.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=We(e);if(null!==t)return t;e=e.sibling}return null}var Ye=o.unstable_scheduleCallback,Ve=o.unstable_cancelCallback,qe=o.unstable_shouldYield,Ke=o.unstable_requestPaint,Xe=o.unstable_now,Qe=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ct|0)|0},lt=Math.log,ct=Math.LN2,ut=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ht(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=ft(l):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function dt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function yt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function xt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,Et,At,Ct,St,kt=!1,Bt=[],Lt=null,Ft=null,Ot=null,jt=new Map,Pt=new Map,Nt=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function _t(e,t){switch(e){case"focusin":case"focusout":Lt=null;break;case"dragenter":case"dragleave":Ft=null;break;case"mouseover":case"mouseout":Ot=null;break;case"pointerover":case"pointerout":jt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Pt.delete(t.pointerId)}}function Dt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=xo(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function It(e){var t=bo(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void St(e.priority,(function(){At(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=xo(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);xe=r,n.target.dispatchEvent(r),xe=null,t.shift()}return!0}function Rt(e,t,n){Mt(e)&&n.delete(t)}function zt(){kt=!1,null!==Lt&&Mt(Lt)&&(Lt=null),null!==Ft&&Mt(Ft)&&(Ft=null),null!==Ot&&Mt(Ot)&&(Ot=null),jt.forEach(Rt),Pt.forEach(Rt)}function Gt(e,t){e.blockedOn===t&&(e.blockedOn=null,kt||(kt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,zt)))}function Zt(e){function t(t){return Gt(t,e)}if(0<Bt.length){Gt(Bt[0],e);for(var n=1;n<Bt.length;n++){var r=Bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Lt&&Gt(Lt,e),null!==Ft&&Gt(Ft,e),null!==Ot&&Gt(Ot,e),jt.forEach(t),Pt.forEach(t),n=0;n<Nt.length;n++)(r=Nt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Nt.length&&null===(n=Nt[0]).blockedOn;)It(n),null===n.blockedOn&&Nt.shift()}var $t=x.ReactCurrentBatchConfig,Ut=!0;function Ht(e,t,n,r){var o=bt,a=$t.transition;$t.transition=null;try{bt=1,Yt(e,t,n,r)}finally{bt=o,$t.transition=a}}function Wt(e,t,n,r){var o=bt,a=$t.transition;$t.transition=null;try{bt=4,Yt(e,t,n,r)}finally{bt=o,$t.transition=a}}function Yt(e,t,n,r){if(Ut){var o=qt(e,t,n,r);if(null===o)Ur(e,t,r,Vt,n),_t(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Lt=Dt(Lt,e,t,n,r,o),!0;case"dragenter":return Ft=Dt(Ft,e,t,n,r,o),!0;case"mouseover":return Ot=Dt(Ot,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return jt.set(a,Dt(jt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Pt.set(a,Dt(Pt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(_t(e,r),4&t&&-1<Tt.indexOf(e)){for(;null!==o;){var a=xo(o);if(null!==a&&wt(a),null===(a=qt(e,t,n,r))&&Ur(e,t,r,Vt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Ur(e,t,r,null,n)}}var Vt=null;function qt(e,t,n,r){if(Vt=null,null!==(e=bo(e=we(r))))if(null===(t=Ze(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=$e(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Vt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Qe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Qt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Qt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,cn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(un),fn=I({},un,{view:0,detail:0}),hn=on(fn),dn=I({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(an=e.screenX-cn.screenX,ln=e.screenY-cn.screenY):ln=an=0,cn=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),pn=on(dn),mn=on(I({},dn,{dataTransfer:0})),yn=on(I({},fn,{relatedTarget:0})),vn=on(I({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=I({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),xn=on(I({},un,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},An={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=An[e])&&!!t[e]}function Sn(){return Cn}var kn=I({},fn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Bn=on(kn),Ln=on(I({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Fn=on(I({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sn})),On=on(I({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),jn=I({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Pn=on(jn),Nn=[9,13,27,32],Tn=s&&"CompositionEvent"in window,_n=null;s&&"documentMode"in document&&(_n=document.documentMode);var Dn=s&&"TextEvent"in window&&!_n,In=s&&(!Tn||_n&&8<_n&&11>=_n),Mn=String.fromCharCode(32),Rn=!1;function zn(e,t){switch(e){case"keyup":return-1!==Nn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Gn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Zn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Hn(e,t,n,r){ke(r),0<(t=Wr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,Yn=null;function Vn(e){Mr(e,0)}function qn(e){if(Y(wo(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(s){var Qn;if(s){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Qn=Jn}else Qn=!1;Xn=Qn&&(!document.documentMode||9<document.documentMode)}function tr(){Wn&&(Wn.detachEvent("onpropertychange",nr),Yn=Wn=null)}function nr(e){if("value"===e.propertyName&&qn(Yn)){var t=[];Hn(t,Yn,e,we(e)),je(Vn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Yn=n,(Wn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Yn)}function ar(e,t){if("click"===e)return qn(t)}function ir(e,t){if("input"===e||"change"===e)return qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function cr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hr(){for(var e=window,t=V();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=V((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pr(e){var t=hr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&dr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=sr(n,a);var i=sr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=s&&"documentMode"in document&&11>=document.documentMode,yr=null,vr=null,gr=null,br=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==yr||yr!==V(r)||(r="selectionStart"in(r=yr)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&cr(gr,r)||(gr=r,0<(r=Wr(vr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Ar={},Cr={};function Sr(e){if(Ar[e])return Ar[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return Ar[e]=n[t];return e}s&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var kr=Sr("animationend"),Br=Sr("animationiteration"),Lr=Sr("animationstart"),Fr=Sr("transitionend"),Or=new Map,jr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Pr(e,t){Or.set(e,t),c(t,[e])}for(var Nr=0;Nr<jr.length;Nr++){var Tr=jr[Nr];Pr(Tr.toLowerCase(),"on"+(Tr[0].toUpperCase()+Tr.slice(1)))}Pr(kr,"onAnimationEnd"),Pr(Br,"onAnimationIteration"),Pr(Lr,"onAnimationStart"),Pr("dblclick","onDoubleClick"),Pr("focusin","onFocus"),Pr("focusout","onBlur"),Pr(Fr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _r="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(_r));function Ir(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,c,u){if(Ge.apply(this,arguments),De){if(!De)throw Error(a(198));var s=Ie;De=!1,Ie=null,Me||(Me=!0,Re=s)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],c=l.instance,u=l.currentTarget;if(l=l.listener,c!==a&&o.isPropagationStopped())break e;Ir(o,l,u),a=c}else for(i=0;i<r.length;i++){if(c=(l=r[i]).instance,u=l.currentTarget,l=l.listener,c!==a&&o.isPropagationStopped())break e;Ir(o,l,u),a=c}}}if(Me)throw e=Re,Me=!1,Re=null,e}function Rr(e,t){var n=t[yo];void 0===n&&(n=t[yo]=new Set);var r=e+"__bubble";n.has(r)||($r(t,e,2,!1),n.add(r))}function zr(e,t,n){var r=0;t&&(r|=4),$r(n,e,r,t)}var Gr="_reactListening"+Math.random().toString(36).slice(2);function Zr(e){if(!e[Gr]){e[Gr]=!0,i.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||zr(t,!1,e),zr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Gr]||(t[Gr]=!0,zr("selectionchange",!1,t))}}function $r(e,t,n,r){switch(Kt(t)){case 1:var o=Ht;break;case 4:o=Wt;break;default:o=Yt}n=o.bind(null,t,n,e),o=void 0,!Ne||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ur(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var c=i.tag;if((3===c||4===c)&&((c=i.stateNode.containerInfo)===o||8===c.nodeType&&c.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(c=i.tag)||6===c){r=a=i;continue e}l=l.parentNode}}r=r.return}je((function(){var r=a,o=we(n),i=[];e:{var l=Or.get(e);if(void 0!==l){var c=sn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":c=Bn;break;case"focusin":u="focus",c=yn;break;case"focusout":u="blur",c=yn;break;case"beforeblur":case"afterblur":c=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":c=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":c=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":c=Fn;break;case kr:case Br:case Lr:c=vn;break;case Fr:c=On;break;case"scroll":c=hn;break;case"wheel":c=Pn;break;case"copy":case"cut":case"paste":c=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":c=Ln}var s=0!=(4&t),f=!s&&"scroll"===e,h=s?null!==l?l+"Capture":null:l;s=[];for(var d,p=r;null!==p;){var m=(d=p).stateNode;if(5===d.tag&&null!==m&&(d=m,null!==h&&null!=(m=Pe(p,h))&&s.push(Hr(p,m,d))),f)break;p=p.return}0<s.length&&(l=new c(l,u,null,n,o),i.push({event:l,listeners:s}))}}if(0==(7&t)){if(c="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===xe||!(u=n.relatedTarget||n.fromElement)||!bo(u)&&!u[mo])&&(c||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,c?(c=r,null!==(u=(u=n.relatedTarget||n.toElement)?bo(u):null)&&(u!==(f=Ze(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(c=null,u=r),c!==u)){if(s=pn,m="onMouseLeave",h="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(s=Ln,m="onPointerLeave",h="onPointerEnter",p="pointer"),f=null==c?l:wo(c),d=null==u?l:wo(u),(l=new s(m,p+"leave",c,n,o)).target=f,l.relatedTarget=d,m=null,bo(o)===r&&((s=new s(h,p+"enter",u,n,o)).target=d,s.relatedTarget=f,m=s),f=m,c&&u)e:{for(h=u,p=0,d=s=c;d;d=Yr(d))p++;for(d=0,m=h;m;m=Yr(m))d++;for(;0<p-d;)s=Yr(s),p--;for(;0<d-p;)h=Yr(h),d--;for(;p--;){if(s===h||null!==h&&s===h.alternate)break e;s=Yr(s),h=Yr(h)}s=null}else s=null;null!==c&&Vr(i,l,c,s,!1),null!==u&&null!==f&&Vr(i,f,u,s,!0)}if("select"===(c=(l=r?wo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===c&&"file"===l.type)var y=Kn;else if(Un(l))if(Xn)y=ir;else{y=or;var v=rr}else(c=l.nodeName)&&"input"===c.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(y=ar);switch(y&&(y=y(e,r))?Hn(i,y,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?wo(r):window,e){case"focusin":(Un(v)||"true"===v.contentEditable)&&(yr=v,vr=r,gr=null);break;case"focusout":gr=vr=yr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,xr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":xr(i,n,o)}var g;if(Tn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Zn?zn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&(Zn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Zn&&(g=en()):(Qt="value"in(Xt=o)?Xt.value:Xt.textContent,Zn=!0)),0<(v=Wr(r,b)).length&&(b=new xn(b,e,null,n,o),i.push({event:b,listeners:v}),(g||null!==(g=Gn(n)))&&(b.data=g))),(g=Dn?function(e,t){switch(e){case"compositionend":return Gn(t);case"keypress":return 32!==t.which?null:(Rn=!0,Mn);case"textInput":return(e=t.data)===Mn&&Rn?null:e;default:return null}}(e,n):function(e,t){if(Zn)return"compositionend"===e||!Tn&&zn(e,t)?(e=en(),Jt=Qt=Xt=null,Zn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Wr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Mr(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Wr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Pe(e,n))&&r.unshift(Hr(e,a,o)),null!=(a=Pe(e,t))&&r.push(Hr(e,a,o))),e=e.return}return r}function Yr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Vr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,c=l.alternate,u=l.stateNode;if(null!==c&&c===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(c=Pe(n,a))&&i.unshift(Hr(n,c,l)):o||null!=(c=Pe(n,a))&&i.push(Hr(n,c,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var qr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Kr,"")}function Qr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function co(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Zt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Zt(t)}function uo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),ho="__reactFiber$"+fo,po="__reactProps$"+fo,mo="__reactContainer$"+fo,yo="__reactEvents$"+fo,vo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[ho];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[ho]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[ho])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function xo(e){return!(e=e[ho]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Eo(e){return e[po]||null}var Ao=[],Co=-1;function So(e){return{current:e}}function ko(e){0>Co||(e.current=Ao[Co],Ao[Co]=null,Co--)}function Bo(e,t){Co++,Ao[Co]=e.current,e.current=t}var Lo={},Fo=So(Lo),Oo=So(!1),jo=Lo;function Po(e,t){var n=e.type.contextTypes;if(!n)return Lo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function No(e){return null!=e.childContextTypes}function To(){ko(Oo),ko(Fo)}function _o(e,t,n){if(Fo.current!==Lo)throw Error(a(168));Bo(Fo,t),Bo(Oo,n)}function Do(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,$(e)||"Unknown",o));return I({},n,r)}function Io(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Lo,jo=Fo.current,Bo(Fo,e),Bo(Oo,Oo.current),!0}function Mo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Do(e,t,jo),r.__reactInternalMemoizedMergedChildContext=e,ko(Oo),ko(Fo),Bo(Fo,e)):ko(Oo),Bo(Oo,n)}var Ro=null,zo=!1,Go=!1;function Zo(e){null===Ro?Ro=[e]:Ro.push(e)}function $o(){if(!Go&&null!==Ro){Go=!0;var e=0,t=bt;try{var n=Ro;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ro=null,zo=!1}catch(t){throw null!==Ro&&(Ro=Ro.slice(e+1)),Ye(Je,$o),t}finally{bt=t,Go=!1}}return null}var Uo=[],Ho=0,Wo=null,Yo=0,Vo=[],qo=0,Ko=null,Xo=1,Qo="";function Jo(e,t){Uo[Ho++]=Yo,Uo[Ho++]=Wo,Wo=e,Yo=t}function ea(e,t,n){Vo[qo++]=Xo,Vo[qo++]=Qo,Vo[qo++]=Ko,Ko=e;var r=Xo;e=Qo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Xo=1<<32-it(t)+o|n<<o|r,Qo=a+e}else Xo=1<<a|n<<o|r,Qo=e}function ta(e){null!==e.return&&(Jo(e,1),ea(e,1,0))}function na(e){for(;e===Wo;)Wo=Uo[--Ho],Uo[Ho]=null,Yo=Uo[--Ho],Uo[Ho]=null;for(;e===Ko;)Ko=Vo[--qo],Vo[qo]=null,Qo=Vo[--qo],Vo[qo]=null,Xo=Vo[--qo],Vo[qo]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Pu(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ca(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=uo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ko?{id:Xo,overflow:Qo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Pu(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ua(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function sa(e){if(aa){var t=oa;if(t){var n=t;if(!ca(e,t)){if(ua(e))throw Error(a(418));t=uo(n.nextSibling);var r=ra;t&&ca(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ua(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function ha(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ua(e))throw da(),Error(a(418));for(;t;)la(e,t),t=uo(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=uo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?uo(e.stateNode.nextSibling):null;return!0}function da(){for(var e=oa;e;)e=uo(e.nextSibling)}function pa(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var ya=x.ReactCurrentBatchConfig;function va(e,t){if(e&&e.defaultProps){for(var n in t=I({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ga=So(null),ba=null,xa=null,wa=null;function Ea(){wa=xa=ba=null}function Aa(e){var t=ga.current;ko(ga),e._currentValue=t}function Ca(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Sa(e,t){ba=e,wa=xa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(xl=!0),e.firstContext=null)}function ka(e){var t=e._currentValue;if(wa!==e)if(e={context:e,memoizedValue:t,next:null},null===xa){if(null===ba)throw Error(a(308));xa=e,ba.dependencies={lanes:0,firstContext:e}}else xa=xa.next=e;return t}var Ba=null;function La(e){null===Ba?Ba=[e]:Ba.push(e)}function Fa(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,La(t)):(n.next=o.next,o.next=n),t.interleaved=n,Oa(e,r)}function Oa(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var ja=!1;function Pa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Na(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ta(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function _a(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Fc)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Oa(e,n)}return null===(o=r.interleaved)?(t.next=t,La(r)):(t.next=o.next,o.next=t),r.interleaved=t,Oa(e,n)}function Da(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Ia(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ma(e,t,n,r){var o=e.updateQueue;ja=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,u=c.next;c.next=null,null===i?a=u:i.next=u,i=c;var s=e.alternate;null!==s&&(l=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===l?s.firstBaseUpdate=u:l.next=u,s.lastBaseUpdate=c)}if(null!==a){var f=o.baseState;for(i=0,s=u=c=null,l=a;;){var h=l.lane,d=l.eventTime;if((r&h)===h){null!==s&&(s=s.next={eventTime:d,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var p=e,m=l;switch(h=t,d=n,m.tag){case 1:if("function"==typeof(p=m.payload)){f=p.call(d,f,h);break e}f=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(h="function"==typeof(p=m.payload)?p.call(d,f,h):p))break e;f=I({},f,h);break e;case 2:ja=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(h=o.effects)?o.effects=[l]:h.push(l))}else d={eventTime:d,lane:h,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(u=s=d,c=f):s=s.next=d,i|=h;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(h=l).next,h.next=null,o.lastBaseUpdate=h,o.shared.pending=null}}if(null===s&&(c=f),o.baseState=c,o.firstBaseUpdate=u,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Ic|=i,e.lanes=i,e.memoizedState=f}}function Ra(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var za=(new r.Component).refs;function Ga(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:I({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Za={isMounted:function(e){return!!(e=e._reactInternals)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Ta(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=_a(e,a,o))&&(ru(t,e,o,r),Da(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Ta(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=_a(e,a,o))&&(ru(t,e,o,r),Da(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),r=nu(e),o=Ta(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=_a(e,o,r))&&(ru(t,e,r,n),Da(t,e,r))}};function $a(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&cr(n,r)&&cr(o,a))}function Ua(e,t,n){var r=!1,o=Lo,a=t.contextType;return"object"==typeof a&&null!==a?a=ka(a):(o=No(t)?jo:Fo.current,a=(r=null!=(r=t.contextTypes))?Po(e,o):Lo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Za,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ha(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Za.enqueueReplaceState(t,t.state,null)}function Wa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=za,Pa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ka(a):(a=No(t)?jo:Fo.current,o.context=Po(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ga(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Za.enqueueReplaceState(o,o.state,null),Ma(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ya(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===za&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Va(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function qa(e){return(0,e._init)(e._payload)}function Ka(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Tu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Mu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===A?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===P&&qa(a)===t.type)?((r=o(t,n.props)).ref=Ya(e,t,n),r.return=e,r):((r=_u(n.type,n.key,n.props,null,e.mode,r)).ref=Ya(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ru(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Du(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Mu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=_u(t.type,t.key,t.props,null,e.mode,n)).ref=Ya(e,null,t),n.return=e,n;case E:return(t=Ru(t,e.mode,n)).return=e,t;case P:return h(e,(0,t._init)(t._payload),n)}if(te(t)||_(t))return(t=Du(t,e.mode,n,null)).return=e,t;Va(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?u(e,t,n,r):null;case E:return n.key===o?s(e,t,n,r):null;case P:return d(e,t,(o=n._init)(n._payload),r)}if(te(n)||_(n))return null!==o?null:f(e,t,n,r,null);Va(e,n)}return null}function p(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case E:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case P:return p(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||_(r))return f(t,e=e.get(n)||null,r,o,null);Va(t,r)}return null}function m(o,a,l,c){for(var u=null,s=null,f=a,m=a=0,y=null;null!==f&&m<l.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=d(o,f,l[m],c);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,m),null===s?u=v:s.sibling=v,s=v,f=y}if(m===l.length)return n(o,f),aa&&Jo(o,m),u;if(null===f){for(;m<l.length;m++)null!==(f=h(o,l[m],c))&&(a=i(f,a,m),null===s?u=f:s.sibling=f,s=f);return aa&&Jo(o,m),u}for(f=r(o,f);m<l.length;m++)null!==(y=p(f,o,m,l[m],c))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),a=i(y,a,m),null===s?u=y:s.sibling=y,s=y);return e&&f.forEach((function(e){return t(o,e)})),aa&&Jo(o,m),u}function y(o,l,c,u){var s=_(c);if("function"!=typeof s)throw Error(a(150));if(null==(c=s.call(c)))throw Error(a(151));for(var f=s=null,m=l,y=l=0,v=null,g=c.next();null!==m&&!g.done;y++,g=c.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=d(o,m,g.value,u);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,y),null===f?s=b:f.sibling=b,f=b,m=v}if(g.done)return n(o,m),aa&&Jo(o,y),s;if(null===m){for(;!g.done;y++,g=c.next())null!==(g=h(o,g.value,u))&&(l=i(g,l,y),null===f?s=g:f.sibling=g,f=g);return aa&&Jo(o,y),s}for(m=r(o,m);!g.done;y++,g=c.next())null!==(g=p(m,o,y,g.value,u))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),l=i(g,l,y),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),aa&&Jo(o,y),s}return function e(r,a,i,c){if("object"==typeof i&&null!==i&&i.type===A&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case w:e:{for(var u=i.key,s=a;null!==s;){if(s.key===u){if((u=i.type)===A){if(7===s.tag){n(r,s.sibling),(a=o(s,i.props.children)).return=r,r=a;break e}}else if(s.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===P&&qa(u)===s.type){n(r,s.sibling),(a=o(s,i.props)).ref=Ya(r,s,i),a.return=r,r=a;break e}n(r,s);break}t(r,s),s=s.sibling}i.type===A?((a=Du(i.props.children,r.mode,c,i.key)).return=r,r=a):((c=_u(i.type,i.key,i.props,null,r.mode,c)).ref=Ya(r,a,i),c.return=r,r=c)}return l(r);case E:e:{for(s=i.key;null!==a;){if(a.key===s){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Ru(i,r.mode,c)).return=r,r=a}return l(r);case P:return e(r,a,(s=i._init)(i._payload),c)}if(te(i))return m(r,a,i,c);if(_(i))return y(r,a,i,c);Va(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Mu(i,r.mode,c)).return=r,r=a),l(r)):n(r,a)}}var Xa=Ka(!0),Qa=Ka(!1),Ja={},ei=So(Ja),ti=So(Ja),ni=So(Ja);function ri(e){if(e===Ja)throw Error(a(174));return e}function oi(e,t){switch(Bo(ni,t),Bo(ti,e),Bo(ei,Ja),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ce(null,"");break;default:t=ce(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ko(ei),Bo(ei,t)}function ai(){ko(ei),ko(ti),ko(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ce(t,e.type);t!==n&&(Bo(ti,e),Bo(ei,n))}function li(e){ti.current===e&&(ko(ei),ko(ti))}var ci=So(0);function ui(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var si=[];function fi(){for(var e=0;e<si.length;e++)si[e]._workInProgressVersionPrimary=null;si.length=0}var hi=x.ReactCurrentDispatcher,di=x.ReactCurrentBatchConfig,pi=0,mi=null,yi=null,vi=null,gi=!1,bi=!1,xi=0,wi=0;function Ei(){throw Error(a(321))}function Ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Ci(e,t,n,r,o,i){if(pi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,hi.current=null===e||null===e.memoizedState?ll:cl,e=n(r,o),bi){i=0;do{if(bi=!1,xi=0,25<=i)throw Error(a(301));i+=1,vi=yi=null,t.updateQueue=null,hi.current=ul,e=n(r,o)}while(bi)}if(hi.current=il,t=null!==yi&&null!==yi.next,pi=0,vi=yi=mi=null,gi=!1,t)throw Error(a(300));return e}function Si(){var e=0!==xi;return xi=0,e}function ki(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?mi.memoizedState=vi=e:vi=vi.next=e,vi}function Bi(){if(null===yi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=yi.next;var t=null===vi?mi.memoizedState:vi.next;if(null!==t)vi=t,yi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(yi=e).memoizedState,baseState:yi.baseState,baseQueue:yi.baseQueue,queue:yi.queue,next:null},null===vi?mi.memoizedState=vi=e:vi=vi.next=e}return vi}function Li(e,t){return"function"==typeof t?t(e):t}function Fi(e){var t=Bi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=yi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var c=l=null,u=null,s=i;do{var f=s.lane;if((pi&f)===f)null!==u&&(u=u.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var h={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===u?(c=u=h,l=r):u=u.next=h,mi.lanes|=f,Ic|=f}s=s.next}while(null!==s&&s!==i);null===u?l=r:u.next=c,lr(r,t.memoizedState)||(xl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Ic|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Oi(e){var t=Bi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(xl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ji(){}function Pi(e,t){var n=mi,r=Bi(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,xl=!0),r=r.queue,Ui(_i.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(n.flags|=2048,Ri(9,Ti.bind(null,n,r,o,t),void 0,null),null===Oc)throw Error(a(349));0!=(30&pi)||Ni(n,t,o)}return o}function Ni(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ti(e,t,n,r){t.value=n,t.getSnapshot=r,Di(t)&&Ii(e)}function _i(e,t,n){return n((function(){Di(t)&&Ii(e)}))}function Di(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ii(e){var t=Oa(e,1);null!==t&&ru(t,e,1,-1)}function Mi(e){var t=ki();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Li,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,mi,e),[t.memoizedState,e]}function Ri(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function zi(){return Bi().memoizedState}function Gi(e,t,n,r){var o=ki();mi.flags|=e,o.memoizedState=Ri(1|t,n,void 0,void 0===r?null:r)}function Zi(e,t,n,r){var o=Bi();r=void 0===r?null:r;var a=void 0;if(null!==yi){var i=yi.memoizedState;if(a=i.destroy,null!==r&&Ai(r,i.deps))return void(o.memoizedState=Ri(t,n,a,r))}mi.flags|=e,o.memoizedState=Ri(1|t,n,a,r)}function $i(e,t){return Gi(8390656,8,e,t)}function Ui(e,t){return Zi(2048,8,e,t)}function Hi(e,t){return Zi(4,2,e,t)}function Wi(e,t){return Zi(4,4,e,t)}function Yi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Vi(e,t,n){return n=null!=n?n.concat([e]):null,Zi(4,4,Yi.bind(null,t,e),n)}function qi(){}function Ki(e,t){var n=Bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ai(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xi(e,t){var n=Bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ai(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Qi(e,t,n){return 0==(21&pi)?(e.baseState&&(e.baseState=!1,xl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),mi.lanes|=n,Ic|=n,e.baseState=!0),t)}function Ji(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=di.transition;di.transition={};try{e(!1),t()}finally{bt=n,di.transition=r}}function el(){return Bi().memoizedState}function tl(e,t,n){var r=nu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=Fa(e,t,n,r))&&(ru(n,e,r,tu()),al(n,t,r))}function nl(e,t,n){var r=nu(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var c=t.interleaved;return null===c?(o.next=o,La(t)):(o.next=c.next,c.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Fa(e,t,o,r))&&(ru(n,e,r,o=tu()),al(n,t,r))}}function rl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ol(e,t){bi=gi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var il={readContext:ka,useCallback:Ei,useContext:Ei,useEffect:Ei,useImperativeHandle:Ei,useInsertionEffect:Ei,useLayoutEffect:Ei,useMemo:Ei,useReducer:Ei,useRef:Ei,useState:Ei,useDebugValue:Ei,useDeferredValue:Ei,useTransition:Ei,useMutableSource:Ei,useSyncExternalStore:Ei,useId:Ei,unstable_isNewReconciler:!1},ll={readContext:ka,useCallback:function(e,t){return ki().memoizedState=[e,void 0===t?null:t],e},useContext:ka,useEffect:$i,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Gi(4194308,4,Yi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Gi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Gi(4,2,e,t)},useMemo:function(e,t){var n=ki();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ki();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ki().memoizedState=e},useState:Mi,useDebugValue:qi,useDeferredValue:function(e){return ki().memoizedState=e},useTransition:function(){var e=Mi(!1),t=e[0];return e=Ji.bind(null,e[1]),ki().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=ki();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Oc)throw Error(a(349));0!=(30&pi)||Ni(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,$i(_i.bind(null,r,i,e),[e]),r.flags|=2048,Ri(9,Ti.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=ki(),t=Oc.identifierPrefix;if(aa){var n=Qo;t=":"+t+"R"+(n=(Xo&~(1<<32-it(Xo)-1)).toString(32)+n),0<(n=xi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},cl={readContext:ka,useCallback:Ki,useContext:ka,useEffect:Ui,useImperativeHandle:Vi,useInsertionEffect:Hi,useLayoutEffect:Wi,useMemo:Xi,useReducer:Fi,useRef:zi,useState:function(){return Fi(Li)},useDebugValue:qi,useDeferredValue:function(e){return Qi(Bi(),yi.memoizedState,e)},useTransition:function(){return[Fi(Li)[0],Bi().memoizedState]},useMutableSource:ji,useSyncExternalStore:Pi,useId:el,unstable_isNewReconciler:!1},ul={readContext:ka,useCallback:Ki,useContext:ka,useEffect:Ui,useImperativeHandle:Vi,useInsertionEffect:Hi,useLayoutEffect:Wi,useMemo:Xi,useReducer:Oi,useRef:zi,useState:function(){return Oi(Li)},useDebugValue:qi,useDeferredValue:function(e){var t=Bi();return null===yi?t.memoizedState=e:Qi(t,yi.memoizedState,e)},useTransition:function(){return[Oi(Li)[0],Bi().memoizedState]},useMutableSource:ji,useSyncExternalStore:Pi,useId:el,unstable_isNewReconciler:!1};function sl(e,t){try{var n="",r=t;do{n+=G(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function hl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var dl="function"==typeof WeakMap?WeakMap:Map;function pl(e,t,n){(n=Ta(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hc||(Hc=!0,Wc=r),hl(0,t)},n}function ml(e,t,n){(n=Ta(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){hl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){hl(0,t),"function"!=typeof r&&(null===Yc?Yc=new Set([this]):Yc.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function yl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new dl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=ku.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ta(-1,1)).tag=2,_a(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=x.ReactCurrentOwner,xl=!1;function wl(e,t,n,r){t.child=null===e?Qa(t,null,n,r):Xa(t,e.child,n,r)}function El(e,t,n,r,o){n=n.render;var a=t.ref;return Sa(t,o),r=Ci(e,t,n,r,a,o),n=Si(),null===e||xl?(aa&&n&&ta(t),t.flags|=1,wl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Al(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Nu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=_u(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Cl(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:cr)(i,r)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Tu(a,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(cr(a,r)&&e.ref===t.ref){if(xl=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(xl=!0)}}return Bl(e,t,n,r,o)}function Sl(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Bo(Tc,Nc),Nc|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Bo(Tc,Nc),Nc|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Bo(Tc,Nc),Nc|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Bo(Tc,Nc),Nc|=r;return wl(e,t,o,n),t.child}function kl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Bl(e,t,n,r,o){var a=No(n)?jo:Fo.current;return a=Po(t,a),Sa(t,o),n=Ci(e,t,n,r,a,o),r=Si(),null===e||xl?(aa&&r&&ta(t),t.flags|=1,wl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Ll(e,t,n,r,o){if(No(n)){var a=!0;Io(t)}else a=!1;if(Sa(t,o),null===t.stateNode)Ul(e,t),Ua(t,n,r),Wa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var c=i.context,u=n.contextType;u="object"==typeof u&&null!==u?ka(u):Po(t,u=No(n)?jo:Fo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||c!==u)&&Ha(t,i,r,u),ja=!1;var h=t.memoizedState;i.state=h,Ma(t,r,i,o),c=t.memoizedState,l!==r||h!==c||Oo.current||ja?("function"==typeof s&&(Ga(t,n,s,r),c=t.memoizedState),(l=ja||$a(t,n,l,r,h,c,u))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=c),i.props=r,i.state=c,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Na(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:va(t.type,l),i.props=u,f=t.pendingProps,h=i.context,c="object"==typeof(c=n.contextType)&&null!==c?ka(c):Po(t,c=No(n)?jo:Fo.current);var d=n.getDerivedStateFromProps;(s="function"==typeof d||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||h!==c)&&Ha(t,i,r,c),ja=!1,h=t.memoizedState,i.state=h,Ma(t,r,i,o);var p=t.memoizedState;l!==f||h!==p||Oo.current||ja?("function"==typeof d&&(Ga(t,n,d,r),p=t.memoizedState),(u=ja||$a(t,n,u,r,h,p,c)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),i.props=r,i.state=p,i.context=c,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&h===e.memoizedState||(t.flags|=1024),r=!1)}return Fl(e,t,n,r,a,o)}function Fl(e,t,n,r,o,a){kl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Mo(t,n,!1),Hl(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Xa(t,e.child,null,a),t.child=Xa(t,null,l,a)):wl(e,t,l,a),t.memoizedState=r.state,o&&Mo(t,n,!0),t.child}function Ol(e){var t=e.stateNode;t.pendingContext?_o(0,t.pendingContext,t.pendingContext!==t.context):t.context&&_o(0,t.context,!1),oi(e,t.containerInfo)}function jl(e,t,n,r,o){return pa(),ma(o),t.flags|=256,wl(e,t,n,r),t.child}var Pl,Nl,Tl,_l,Dl={dehydrated:null,treeContext:null,retryLane:0};function Il(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ml(e,t,n){var r,o=t.pendingProps,i=ci.current,l=!1,c=0!=(128&t.flags);if((r=c)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Bo(ci,1&i),null===e)return sa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(c=o.children,e=o.fallback,l?(o=t.mode,l=t.child,c={mode:"hidden",children:c},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=c):l=Iu(c,o,0,null),e=Du(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Il(n),t.memoizedState=Dl,e):Rl(t,c));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,zl(e,t,l,r=fl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Iu({mode:"visible",children:r.children},o,0,null),(i=Du(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Xa(t,e.child,null,l),t.child.memoizedState=Il(l),t.memoizedState=Dl,i);if(0==(1&t.mode))return zl(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var c=r.dgst;return r=c,zl(e,t,l,r=fl(i=Error(a(419)),r,void 0))}if(c=0!=(l&e.childLanes),xl||c){if(null!==(r=Oc)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Oa(e,o),ru(r,e,o,-1))}return yu(),zl(e,t,l,r=fl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Lu.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=uo(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Vo[qo++]=Xo,Vo[qo++]=Qo,Vo[qo++]=Ko,Xo=e.id,Qo=e.overflow,Ko=t),(t=Rl(t,r.children)).flags|=4096,t)}(e,t,c,o,r,i,n);if(l){l=o.fallback,c=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:o.children};return 0==(1&c)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=u,t.deletions=null):(o=Tu(i,u)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Tu(r,l):(l=Du(l,c,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,c=null===(c=e.child.memoizedState)?Il(n):{baseLanes:c.baseLanes|n,cachePool:null,transitions:c.transitions},l.memoizedState=c,l.childLanes=e.childLanes&~n,t.memoizedState=Dl,o}return e=(l=e.child).sibling,o=Tu(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Rl(e,t){return(t=Iu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function zl(e,t,n,r){return null!==r&&ma(r),Xa(t,e.child,null,n),(e=Rl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Gl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ca(e.return,t,n)}function Zl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function $l(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(wl(e,t,r.children,n),0!=(2&(r=ci.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Gl(e,n,t);else if(19===e.tag)Gl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Bo(ci,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ui(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Zl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ui(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Zl(t,!0,n,null,a);break;case"together":Zl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ul(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ic|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Tu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Wl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Vl(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Yl(t),null;case 1:case 17:return No(t.type)&&To(),Yl(t),null;case 3:return r=t.stateNode,ai(),ko(Oo),ko(Fo),fi(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(ha(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(lu(ia),ia=null))),Nl(e,t),Yl(t),null;case 5:li(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Tl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Yl(t),null}if(e=ri(ei.current),ha(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[ho]=t,r[po]=i,e=0!=(1&t.mode),n){case"dialog":Rr("cancel",r),Rr("close",r);break;case"iframe":case"object":case"embed":Rr("load",r);break;case"video":case"audio":for(o=0;o<_r.length;o++)Rr(_r[o],r);break;case"source":Rr("error",r);break;case"img":case"image":case"link":Rr("error",r),Rr("load",r);break;case"details":Rr("toggle",r);break;case"input":K(r,i),Rr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Rr("invalid",r);break;case"textarea":oe(r,i),Rr("invalid",r)}for(var c in ge(n,i),o=null,i)if(i.hasOwnProperty(c)){var u=i[c];"children"===c?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Qr(r.textContent,u,e),o=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Qr(r.textContent,u,e),o=["children",""+u]):l.hasOwnProperty(c)&&null!=u&&"onScroll"===c&&Rr("scroll",r)}switch(n){case"input":W(r),J(r,i,!0);break;case"textarea":W(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{c=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[ho]=t,e[po]=r,Pl(e,t,!1,!1),t.stateNode=e;e:{switch(c=be(n,r),n){case"dialog":Rr("cancel",e),Rr("close",e),o=r;break;case"iframe":case"object":case"embed":Rr("load",e),o=r;break;case"video":case"audio":for(o=0;o<_r.length;o++)Rr(_r[o],e);o=r;break;case"source":Rr("error",e),o=r;break;case"img":case"image":case"link":Rr("error",e),Rr("load",e),o=r;break;case"details":Rr("toggle",e),o=r;break;case"input":K(e,r),o=q(e,r),Rr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=I({},r,{value:void 0}),Rr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Rr("invalid",e)}for(i in ge(n,o),u=o)if(u.hasOwnProperty(i)){var s=u[i];"style"===i?ye(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&he(e,s):"number"==typeof s&&he(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=s&&"onScroll"===i&&Rr("scroll",e):null!=s&&b(e,i,s,c))}switch(n){case"input":W(e),J(e,r,!1);break;case"textarea":W(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+U(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Yl(t),null;case 6:if(e&&null!=t.stateNode)_l(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),ha(t)){if(r=t.stateNode,n=t.memoizedProps,r[ho]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Qr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Qr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[ho]=t,t.stateNode=r}return Yl(t),null;case 13:if(ko(ci),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))da(),pa(),t.flags|=98560,i=!1;else if(i=ha(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[ho]=t}else pa(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Yl(t),i=!1}else null!==ia&&(lu(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ci.current)?0===_c&&(_c=3):yu())),null!==t.updateQueue&&(t.flags|=4),Yl(t),null);case 4:return ai(),Nl(e,t),null===e&&Zr(t.stateNode.containerInfo),Yl(t),null;case 10:return Aa(t.type._context),Yl(t),null;case 19:if(ko(ci),null===(i=t.memoizedState))return Yl(t),null;if(r=0!=(128&t.flags),null===(c=i.rendering))if(r)Wl(i,!1);else{if(0!==_c||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(c=ui(e))){for(t.flags|=128,Wl(i,!1),null!==(r=c.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(c=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=c.childLanes,i.lanes=c.lanes,i.child=c.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=c.memoizedProps,i.memoizedState=c.memoizedState,i.updateQueue=c.updateQueue,i.type=c.type,e=c.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Bo(ci,1&ci.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>$c&&(t.flags|=128,r=!0,Wl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ui(c))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Wl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!aa)return Yl(t),null}else 2*Xe()-i.renderingStartTime>$c&&1073741824!==n&&(t.flags|=128,r=!0,Wl(i,!1),t.lanes=4194304);i.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=i.last)?n.sibling=c:t.child=c,i.last=c)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ci.current,Bo(ci,r?1&n|2:1&n),t):(Yl(t),null);case 22:case 23:return hu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Nc)&&(Yl(t),6&t.subtreeFlags&&(t.flags|=8192)):Yl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function ql(e,t){switch(na(t),t.tag){case 1:return No(t.type)&&To(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),ko(Oo),ko(Fo),fi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(ko(ci),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));pa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ko(ci),null;case 4:return ai(),null;case 10:return Aa(t.type._context),null;case 22:case 23:return hu(),null;default:return null}}Pl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Nl=function(){},Tl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=q(e,o),r=q(e,r),i=[];break;case"select":o=I({},o,{value:void 0}),r=I({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(s in ge(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var c=o[s];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var u=r[s];if(c=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&u!==c&&(null!=u||null!=c))if("style"===s)if(c){for(a in c)!c.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&c[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(i||(i=[]),i.push(s,n)),n=u;else"dangerouslySetInnerHTML"===s?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(i=i||[]).push(s,u)):"children"===s?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(s,""+u):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=u&&"onScroll"===s&&Rr("scroll",e),i||c===u||(i=[])):(i=i||[]).push(s,u))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},_l=function(e,t,n,r){n!==r&&(t.flags|=4)};var Kl=!1,Xl=!1,Ql="function"==typeof WeakSet?WeakSet:Set,Jl=null;function ec(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Su(e,t,n)}else n.current=null}function tc(e,t,n){try{n()}catch(n){Su(e,t,n)}}var nc=!1;function rc(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&tc(t,n,a)}o=o.next}while(o!==r)}}function oc(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ac(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ic(e){var t=e.alternate;null!==t&&(e.alternate=null,ic(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[ho],delete t[po],delete t[yo],delete t[vo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lc(e){return 5===e.tag||3===e.tag||4===e.tag}function cc(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lc(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(uc(e,t,n),e=e.sibling;null!==e;)uc(e,t,n),e=e.sibling}function sc(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(sc(e,t,n),e=e.sibling;null!==e;)sc(e,t,n),e=e.sibling}var fc=null,hc=!1;function dc(e,t,n){for(n=n.child;null!==n;)pc(e,t,n),n=n.sibling}function pc(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xl||ec(n,t);case 6:var r=fc,o=hc;fc=null,dc(e,t,n),hc=o,null!==(fc=r)&&(hc?(e=fc,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fc.removeChild(n.stateNode));break;case 18:null!==fc&&(hc?(e=fc,n=n.stateNode,8===e.nodeType?co(e.parentNode,n):1===e.nodeType&&co(e,n),Zt(e)):co(fc,n.stateNode));break;case 4:r=fc,o=hc,fc=n.stateNode.containerInfo,hc=!0,dc(e,t,n),fc=r,hc=o;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&tc(n,t,i),o=o.next}while(o!==r)}dc(e,t,n);break;case 1:if(!Xl&&(ec(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Su(n,t,e)}dc(e,t,n);break;case 21:dc(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,dc(e,t,n),Xl=r):dc(e,t,n);break;default:dc(e,t,n)}}function mc(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ql),t.forEach((function(t){var r=Fu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function yc(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,c=l;e:for(;null!==c;){switch(c.tag){case 5:fc=c.stateNode,hc=!1;break e;case 3:case 4:fc=c.stateNode.containerInfo,hc=!0;break e}c=c.return}if(null===fc)throw Error(a(160));pc(i,l,o),fc=null,hc=!1;var u=o.alternate;null!==u&&(u.return=null),o.return=null}catch(e){Su(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vc(t,e),t=t.sibling}function vc(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(yc(t,e),gc(e),4&r){try{rc(3,e,e.return),oc(3,e)}catch(t){Su(e,e.return,t)}try{rc(5,e,e.return)}catch(t){Su(e,e.return,t)}}break;case 1:yc(t,e),gc(e),512&r&&null!==n&&ec(n,n.return);break;case 5:if(yc(t,e),gc(e),512&r&&null!==n&&ec(n,n.return),32&e.flags){var o=e.stateNode;try{he(o,"")}catch(t){Su(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,c=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===c&&"radio"===i.type&&null!=i.name&&X(o,i),be(c,l);var s=be(c,i);for(l=0;l<u.length;l+=2){var f=u[l],h=u[l+1];"style"===f?ye(o,h):"dangerouslySetInnerHTML"===f?fe(o,h):"children"===f?he(o,h):b(o,f,h,s)}switch(c){case"input":Q(o,i);break;case"textarea":ae(o,i);break;case"select":var d=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var p=i.value;null!=p?ne(o,!!i.multiple,p,!1):d!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[po]=i}catch(t){Su(e,e.return,t)}}break;case 6:if(yc(t,e),gc(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Su(e,e.return,t)}}break;case 3:if(yc(t,e),gc(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Zt(t.containerInfo)}catch(t){Su(e,e.return,t)}break;case 4:default:yc(t,e),gc(e);break;case 13:yc(t,e),gc(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Zc=Xe())),4&r&&mc(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(s=Xl)||f,yc(t,e),Xl=s):yc(t,e),gc(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Jl=e,f=e.child;null!==f;){for(h=Jl=f;null!==Jl;){switch(p=(d=Jl).child,d.tag){case 0:case 11:case 14:case 15:rc(4,d,d.return);break;case 1:ec(d,d.return);var m=d.stateNode;if("function"==typeof m.componentWillUnmount){r=d,n=d.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Su(r,n,e)}}break;case 5:ec(d,d.return);break;case 22:if(null!==d.memoizedState){Ec(h);continue}}null!==p?(p.return=d,Jl=p):Ec(h)}f=f.sibling}e:for(f=null,h=e;;){if(5===h.tag){if(null===f){f=h;try{o=h.stateNode,s?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(c=h.stateNode,l=null!=(u=h.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,c.style.display=me("display",l))}catch(t){Su(e,e.return,t)}}}else if(6===h.tag){if(null===f)try{h.stateNode.nodeValue=s?"":h.memoizedProps}catch(t){Su(e,e.return,t)}}else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===e)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===e)break e;for(;null===h.sibling;){if(null===h.return||h.return===e)break e;f===h&&(f=null),h=h.return}f===h&&(f=null),h.sibling.return=h.return,h=h.sibling}}break;case 19:yc(t,e),gc(e),4&r&&mc(e);case 21:}}function gc(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lc(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(he(o,""),r.flags&=-33),sc(e,cc(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;uc(e,cc(e),i);break;default:throw Error(a(161))}}catch(t){Su(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bc(e,t,n){Jl=e,xc(e,t,n)}function xc(e,t,n){for(var r=0!=(1&e.mode);null!==Jl;){var o=Jl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Kl;if(!i){var l=o.alternate,c=null!==l&&null!==l.memoizedState||Xl;l=Kl;var u=Xl;if(Kl=i,(Xl=c)&&!u)for(Jl=o;null!==Jl;)c=(i=Jl).child,22===i.tag&&null!==i.memoizedState?Ac(o):null!==c?(c.return=i,Jl=c):Ac(o);for(;null!==a;)Jl=a,xc(a,t,n),a=a.sibling;Jl=o,Kl=l,Xl=u}wc(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Jl=a):wc(e)}}function wc(e){for(;null!==Jl;){var t=Jl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||oc(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:va(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Ra(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Ra(t,l,n)}break;case 5:var c=t.stateNode;if(null===n&&4&t.flags){n=c;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var h=f.dehydrated;null!==h&&Zt(h)}}}break;default:throw Error(a(163))}Xl||512&t.flags&&ac(t)}catch(e){Su(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function Ec(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function Ac(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{oc(4,t)}catch(e){Su(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Su(t,o,e)}}var a=t.return;try{ac(t)}catch(e){Su(t,a,e)}break;case 5:var i=t.return;try{ac(t)}catch(e){Su(t,i,e)}}}catch(e){Su(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var Cc,Sc=Math.ceil,kc=x.ReactCurrentDispatcher,Bc=x.ReactCurrentOwner,Lc=x.ReactCurrentBatchConfig,Fc=0,Oc=null,jc=null,Pc=0,Nc=0,Tc=So(0),_c=0,Dc=null,Ic=0,Mc=0,Rc=0,zc=null,Gc=null,Zc=0,$c=1/0,Uc=null,Hc=!1,Wc=null,Yc=null,Vc=!1,qc=null,Kc=0,Xc=0,Qc=null,Jc=-1,eu=0;function tu(){return 0!=(6&Fc)?Xe():-1!==Jc?Jc:Jc=Xe()}function nu(e){return 0==(1&e.mode)?1:0!=(2&Fc)&&0!==Pc?Pc&-Pc:null!==ya.transition?(0===eu&&(eu=mt()),eu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function ru(e,t,n,r){if(50<Xc)throw Xc=0,Qc=null,Error(a(185));vt(e,n,r),0!=(2&Fc)&&e===Oc||(e===Oc&&(0==(2&Fc)&&(Mc|=n),4===_c&&cu(e,Pc)),ou(e,r),1===n&&0===Fc&&0==(1&t.mode)&&($c=Xe()+500,zo&&$o()))}function ou(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,c=o[i];-1===c?0!=(l&n)&&0==(l&r)||(o[i]=dt(l,t)):c<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=ht(e,e===Oc?Pc:0);if(0===r)null!==n&&Ve(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ve(n),1===t)0===e.tag?function(e){zo=!0,Zo(e)}(uu.bind(null,e)):Zo(uu.bind(null,e)),io((function(){0==(6&Fc)&&$o()})),n=null;else{switch(xt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ou(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if(Jc=-1,eu=0,0!=(6&Fc))throw Error(a(327));var n=e.callbackNode;if(Au()&&e.callbackNode!==n)return null;var r=ht(e,e===Oc?Pc:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vu(e,r);else{t=r;var o=Fc;Fc|=2;var i=mu();for(Oc===e&&Pc===t||(Uc=null,$c=Xe()+500,du(e,t));;)try{bu();break}catch(t){pu(e,t)}Ea(),kc.current=i,Fc=o,null!==jc?t=0:(Oc=null,Pc=0,t=_c)}if(0!==t){if(2===t&&0!==(o=pt(e))&&(r=o,t=iu(e,o)),1===t)throw n=Dc,du(e,0),cu(e,r),ou(e,Xe()),n;if(6===t)cu(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=vu(e,r))&&0!==(i=pt(e))&&(r=i,t=iu(e,i)),1===t))throw n=Dc,du(e,0),cu(e,r),ou(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Eu(e,Gc,Uc);break;case 3:if(cu(e,r),(130023424&r)===r&&10<(t=Zc+500-Xe())){if(0!==ht(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Eu.bind(null,e,Gc,Uc),t);break}Eu(e,Gc,Uc);break;case 4:if(cu(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Sc(r/1960))-r)){e.timeoutHandle=ro(Eu.bind(null,e,Gc,Uc),r);break}Eu(e,Gc,Uc);break;default:throw Error(a(329))}}}return ou(e,Xe()),e.callbackNode===n?au.bind(null,e):null}function iu(e,t){var n=zc;return e.current.memoizedState.isDehydrated&&(du(e,t).flags|=256),2!==(e=vu(e,t))&&(t=Gc,Gc=n,null!==t&&lu(t)),e}function lu(e){null===Gc?Gc=e:Gc.push.apply(Gc,e)}function cu(e,t){for(t&=~Rc,t&=~Mc,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function uu(e){if(0!=(6&Fc))throw Error(a(327));Au();var t=ht(e,0);if(0==(1&t))return ou(e,Xe()),null;var n=vu(e,t);if(0!==e.tag&&2===n){var r=pt(e);0!==r&&(t=r,n=iu(e,r))}if(1===n)throw n=Dc,du(e,0),cu(e,t),ou(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Eu(e,Gc,Uc),ou(e,Xe()),null}function su(e,t){var n=Fc;Fc|=1;try{return e(t)}finally{0===(Fc=n)&&($c=Xe()+500,zo&&$o())}}function fu(e){null!==qc&&0===qc.tag&&0==(6&Fc)&&Au();var t=Fc;Fc|=1;var n=Lc.transition,r=bt;try{if(Lc.transition=null,bt=1,e)return e()}finally{bt=r,Lc.transition=n,0==(6&(Fc=t))&&$o()}}function hu(){Nc=Tc.current,ko(Tc)}function du(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==jc)for(n=jc.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&To();break;case 3:ai(),ko(Oo),ko(Fo),fi();break;case 5:li(r);break;case 4:ai();break;case 13:case 19:ko(ci);break;case 10:Aa(r.type._context);break;case 22:case 23:hu()}n=n.return}if(Oc=e,jc=e=Tu(e.current,null),Pc=Nc=t,_c=0,Dc=null,Rc=Mc=Ic=0,Gc=zc=null,null!==Ba){for(t=0;t<Ba.length;t++)if(null!==(r=(n=Ba[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}Ba=null}return e}function pu(e,t){for(;;){var n=jc;try{if(Ea(),hi.current=il,gi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}gi=!1}if(pi=0,vi=yi=mi=null,bi=!1,xi=0,Bc.current=null,null===n||null===n.return){_c=1,Dc=t,jc=null;break}e:{var i=e,l=n.return,c=n,u=t;if(t=Pc,c.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u,f=c,h=f.tag;if(0==(1&f.mode)&&(0===h||11===h||15===h)){var d=f.alternate;d?(f.updateQueue=d.updateQueue,f.memoizedState=d.memoizedState,f.lanes=d.lanes):(f.updateQueue=null,f.memoizedState=null)}var p=vl(l);if(null!==p){p.flags&=-257,gl(p,l,c,0,t),1&p.mode&&yl(i,s,t),u=s;var m=(t=p).updateQueue;if(null===m){var y=new Set;y.add(u),t.updateQueue=y}else m.add(u);break e}if(0==(1&t)){yl(i,s,t),yu();break e}u=Error(a(426))}else if(aa&&1&c.mode){var v=vl(l);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),gl(v,l,c,0,t),ma(sl(u,c));break e}}i=u=sl(u,c),4!==_c&&(_c=2),null===zc?zc=[i]:zc.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Ia(i,pl(0,u,t));break e;case 1:c=u;var g=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Yc||!Yc.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Ia(i,ml(i,c,t));break e}}i=i.return}while(null!==i)}wu(n)}catch(e){t=e,jc===n&&null!==n&&(jc=n=n.return);continue}break}}function mu(){var e=kc.current;return kc.current=il,null===e?il:e}function yu(){0!==_c&&3!==_c&&2!==_c||(_c=4),null===Oc||0==(268435455&Ic)&&0==(268435455&Mc)||cu(Oc,Pc)}function vu(e,t){var n=Fc;Fc|=2;var r=mu();for(Oc===e&&Pc===t||(Uc=null,du(e,t));;)try{gu();break}catch(t){pu(e,t)}if(Ea(),Fc=n,kc.current=r,null!==jc)throw Error(a(261));return Oc=null,Pc=0,_c}function gu(){for(;null!==jc;)xu(jc)}function bu(){for(;null!==jc&&!qe();)xu(jc)}function xu(e){var t=Cc(e.alternate,e,Nc);e.memoizedProps=e.pendingProps,null===t?wu(e):jc=t,Bc.current=null}function wu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Vl(n,t,Nc)))return void(jc=n)}else{if(null!==(n=ql(n,t)))return n.flags&=32767,void(jc=n);if(null===e)return _c=6,void(jc=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(jc=t);jc=t=e}while(null!==t);0===_c&&(_c=5)}function Eu(e,t,n){var r=bt,o=Lc.transition;try{Lc.transition=null,bt=1,function(e,t,n,r){do{Au()}while(null!==qc);if(0!=(6&Fc))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Oc&&(jc=Oc=null,Pc=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Vc||(Vc=!0,Ou(tt,(function(){return Au(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Lc.transition,Lc.transition=null;var l=bt;bt=1;var c=Fc;Fc|=4,Bc.current=null,function(e,t){if(eo=Ut,dr(e=hr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,c=-1,u=-1,s=0,f=0,h=e,d=null;t:for(;;){for(var p;h!==n||0!==o&&3!==h.nodeType||(c=l+o),h!==i||0!==r&&3!==h.nodeType||(u=l+r),3===h.nodeType&&(l+=h.nodeValue.length),null!==(p=h.firstChild);)d=h,h=p;for(;;){if(h===e)break t;if(d===n&&++s===o&&(c=l),d===i&&++f===r&&(u=l),null!==(p=h.nextSibling))break;d=(h=d).parentNode}h=p}n=-1===c||-1===u?null:{start:c,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Ut=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var y=m.memoizedProps,v=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?y:va(t.type,y),v);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var x=t.stateNode.containerInfo;1===x.nodeType?x.textContent="":9===x.nodeType&&x.documentElement&&x.removeChild(x.documentElement);break;default:throw Error(a(163))}}catch(e){Su(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}m=nc,nc=!1}(e,n),vc(n,e),pr(to),Ut=!!eo,to=eo=null,e.current=n,bc(n,e,o),Ke(),Fc=c,bt=l,Lc.transition=i}else e.current=n;if(Vc&&(Vc=!1,qc=e,Kc=o),0===(i=e.pendingLanes)&&(Yc=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ou(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Hc)throw Hc=!1,e=Wc,Wc=null,e;0!=(1&Kc)&&0!==e.tag&&Au(),0!=(1&(i=e.pendingLanes))?e===Qc?Xc++:(Xc=0,Qc=e):Xc=0,$o()}(e,t,n,r)}finally{Lc.transition=o,bt=r}return null}function Au(){if(null!==qc){var e=xt(Kc),t=Lc.transition,n=bt;try{if(Lc.transition=null,bt=16>e?16:e,null===qc)var r=!1;else{if(e=qc,qc=null,Kc=0,0!=(6&Fc))throw Error(a(331));var o=Fc;for(Fc|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(0!=(16&Jl.flags)){var c=i.deletions;if(null!==c){for(var u=0;u<c.length;u++){var s=c[u];for(Jl=s;null!==Jl;){var f=Jl;switch(f.tag){case 0:case 11:case 15:rc(8,f,i)}var h=f.child;if(null!==h)h.return=f,Jl=h;else for(;null!==Jl;){var d=(f=Jl).sibling,p=f.return;if(ic(f),f===s){Jl=null;break}if(null!==d){d.return=p,Jl=d;break}Jl=p}}}var m=i.alternate;if(null!==m){var y=m.child;if(null!==y){m.child=null;do{var v=y.sibling;y.sibling=null,y=v}while(null!==y)}}Jl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(0!=(2048&(i=Jl).flags))switch(i.tag){case 0:case 11:case 15:rc(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Jl=g;break e}Jl=i.return}}var b=e.current;for(Jl=b;null!==Jl;){var x=(l=Jl).child;if(0!=(2064&l.subtreeFlags)&&null!==x)x.return=l,Jl=x;else e:for(l=b;null!==Jl;){if(0!=(2048&(c=Jl).flags))try{switch(c.tag){case 0:case 11:case 15:oc(9,c)}}catch(e){Su(c,c.return,e)}if(c===l){Jl=null;break e}var w=c.sibling;if(null!==w){w.return=c.return,Jl=w;break e}Jl=c.return}}if(Fc=o,$o(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Lc.transition=t}}return!1}function Cu(e,t,n){e=_a(e,t=pl(0,t=sl(n,t),1),1),t=tu(),null!==e&&(vt(e,1,t),ou(e,t))}function Su(e,t,n){if(3===e.tag)Cu(e,e,n);else for(;null!==t;){if(3===t.tag){Cu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yc||!Yc.has(r))){t=_a(t,e=ml(t,e=sl(n,e),1),1),e=tu(),null!==t&&(vt(t,1,e),ou(t,e));break}}t=t.return}}function ku(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,Oc===e&&(Pc&n)===n&&(4===_c||3===_c&&(130023424&Pc)===Pc&&500>Xe()-Zc?du(e,0):Rc|=n),ou(e,t)}function Bu(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=tu();null!==(e=Oa(e,t))&&(vt(e,t,n),ou(e,n))}function Lu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Bu(e,n)}function Fu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Bu(e,n)}function Ou(e,t){return Ye(e,t)}function ju(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Pu(e,t,n,r){return new ju(e,t,n,r)}function Nu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tu(e,t){var n=e.alternate;return null===n?((n=Pu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function _u(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Nu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case A:return Du(n.children,o,i,t);case C:l=8,o|=8;break;case S:return(e=Pu(12,n,t,2|o)).elementType=S,e.lanes=i,e;case F:return(e=Pu(13,n,t,o)).elementType=F,e.lanes=i,e;case O:return(e=Pu(19,n,t,o)).elementType=O,e.lanes=i,e;case N:return Iu(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:l=10;break e;case B:l=9;break e;case L:l=11;break e;case j:l=14;break e;case P:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Pu(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Du(e,t,n,r){return(e=Pu(7,e,r,t)).lanes=n,e}function Iu(e,t,n,r){return(e=Pu(22,e,r,t)).elementType=N,e.lanes=n,e.stateNode={isHidden:!1},e}function Mu(e,t,n){return(e=Pu(6,e,null,t)).lanes=n,e}function Ru(e,t,n){return(t=Pu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function zu(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yt(0),this.expirationTimes=yt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Gu(e,t,n,r,o,a,i,l,c){return e=new zu(e,t,n,l,c),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Pu(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Pa(a),e}function Zu(e){if(!e)return Lo;e:{if(Ze(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(No(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(No(n))return Do(e,n,t)}return t}function $u(e,t,n,r,o,a,i,l,c){return(e=Gu(n,r,!0,e,0,a,0,l,c)).context=Zu(null),n=e.current,(a=Ta(r=tu(),o=nu(n))).callback=null!=t?t:null,_a(n,a,o),e.current.lanes=o,vt(e,o,r),ou(e,r),e}function Uu(e,t,n,r){var o=t.current,a=tu(),i=nu(o);return n=Zu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ta(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=_a(o,t,i))&&(ru(e,o,i,a),Da(e,o,i)),i}function Hu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yu(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}Cc=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oo.current)xl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return xl=!1,function(e,t,n){switch(t.tag){case 3:Ol(t),pa();break;case 5:ii(t);break;case 1:No(t.type)&&Io(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Bo(ga,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Bo(ci,1&ci.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ml(e,t,n):(Bo(ci,1&ci.current),null!==(e=Hl(e,t,n))?e.sibling:null);Bo(ci,1&ci.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return $l(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Bo(ci,ci.current),r)break;return null;case 22:case 23:return t.lanes=0,Sl(e,t,n)}return Hl(e,t,n)}(e,t,n);xl=0!=(131072&e.flags)}else xl=!1,aa&&0!=(1048576&t.flags)&&ea(t,Yo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ul(e,t),e=t.pendingProps;var o=Po(t,Fo.current);Sa(t,n),o=Ci(null,t,r,e,o,n);var i=Si();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,No(r)?(i=!0,Io(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Pa(t),o.updater=Za,t.stateNode=o,o._reactInternals=t,Wa(t,r,e,n),t=Fl(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),wl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ul(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Nu(e)?1:0;if(null!=e){if((e=e.$$typeof)===L)return 11;if(e===j)return 14}return 2}(r),e=va(r,e),o){case 0:t=Bl(null,t,r,e,n);break e;case 1:t=Ll(null,t,r,e,n);break e;case 11:t=El(null,t,r,e,n);break e;case 14:t=Al(null,t,r,va(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Bl(e,t,r,o=t.elementType===r?o:va(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ll(e,t,r,o=t.elementType===r?o:va(r,o),n);case 3:e:{if(Ol(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Na(e,t),Ma(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=jl(e,t,r,n,o=sl(Error(a(423)),t));break e}if(r!==o){t=jl(e,t,r,n,o=sl(Error(a(424)),t));break e}for(oa=uo(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Qa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pa(),r===o){t=Hl(e,t,n);break e}wl(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),kl(e,t),wl(e,t,l,n),t.child;case 6:return null===e&&sa(t),null;case 13:return Ml(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xa(t,null,r,n):wl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,El(e,t,r,o=t.elementType===r?o:va(r,o),n);case 7:return wl(e,t,t.pendingProps,n),t.child;case 8:case 12:return wl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Bo(ga,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!Oo.current){t=Hl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var c=i.dependencies;if(null!==c){l=i.child;for(var u=c.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Ta(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?u.next=u:(u.next=f.next,f.next=u),s.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Ca(i.return,n,t),c.lanes|=n;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),Ca(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}wl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Sa(t,n),r=r(o=ka(o)),t.flags|=1,wl(e,t,r,n),t.child;case 14:return o=va(r=t.type,t.pendingProps),Al(e,t,r,o=va(r.type,o),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:va(r,o),Ul(e,t),t.tag=1,No(r)?(e=!0,Io(t)):e=!1,Sa(t,n),Ua(t,r,o),Wa(t,r,o,n),Fl(null,t,r,!0,e,n);case 19:return $l(e,t,n);case 22:return Sl(e,t,n)}throw Error(a(156,t.tag))};var Vu="function"==typeof reportError?reportError:function(e){console.error(e)};function qu(e){this._internalRoot=e}function Ku(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Qu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ju(){}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Hu(i);l.call(e)}}Uu(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Hu(i);a.call(e)}}var i=$u(t,r,e,0,null,!1,0,"",Ju);return e._reactRootContainer=i,e[mo]=i.current,Zr(8===e.nodeType?e.parentNode:e),fu(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Hu(c);l.call(e)}}var c=Gu(e,0,!1,null,0,!1,0,"",Ju);return e._reactRootContainer=c,e[mo]=c.current,Zr(8===e.nodeType?e.parentNode:e),fu((function(){Uu(t,c,n,r)})),c}(n,t,e,o,r);return Hu(i)}Ku.prototype.render=qu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Uu(e,t,null,null)},Ku.prototype.unmount=qu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fu((function(){Uu(null,e,null,null)})),t[mo]=null}},Ku.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Nt.length&&0!==t&&t<Nt[n].priority;n++);Nt.splice(n,0,e),0===n&&It(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),ou(t,Xe()),0==(6&Fc)&&($c=Xe()+500,$o()))}break;case 13:fu((function(){var t=Oa(e,1);if(null!==t){var n=tu();ru(t,e,1,n)}})),Yu(e,1)}},Et=function(e){if(13===e.tag){var t=Oa(e,134217728);null!==t&&ru(t,e,134217728,tu()),Yu(e,134217728)}},At=function(e){if(13===e.tag){var t=nu(e),n=Oa(e,t);null!==n&&ru(n,e,t,tu()),Yu(e,t)}},Ct=function(){return bt},St=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ee=function(e,t,n){switch(t){case"input":if(Q(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Eo(r);if(!o)throw Error(a(90));Y(r),Q(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Le=su,Fe=fu;var ts={usingClientEntryPoint:!1,Events:[xo,wo,Eo,ke,Be,su]},ns={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ot=os.inject(rs),at=os}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(a(299));var n=!1,r="",o=Vu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Gu(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Zr(8===e.nodeType?e.parentNode:e),new qu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return fu(e)},t.hydrate=function(e,t,n){if(!Qu(t))throw Error(a(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Vu;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=$u(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Zr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Ku(t)},t.render=function(e,t,n){if(!Qu(t))throw Error(a(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Qu(e))throw Error(a(40));return!!e._reactRootContainer&&(fu((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=su,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Qu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return es(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(3935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),c=Symbol.for("react.context"),u=Symbol.for("react.server_context"),s=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),h=Symbol.for("react.suspense_list"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy");Symbol.for("react.offscreen");function m(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case i:case a:case f:case h:return e;default:switch(e=e&&e.$$typeof){case u:case c:case s:case p:case d:case l:return e;default:return t}}case r:return t}}}Symbol.for("react.module.reference"),t.isFragment=function(e){return m(e)===o},t.isMemo=function(e){return m(e)===d}},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},5251:(e,t,n)=>{"use strict";var r=n(7294),o=Symbol.for("react.element"),a=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,a={},u=null,s=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(s=t.ref),t)i.call(t,r)&&!c.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:s,props:a,_owner:l.current}}t.Fragment=a,t.jsx=u,t.jsxs=u},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),c=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),h=Symbol.for("react.lazy"),d=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function v(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||p}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||p}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var x=b.prototype=new g;x.constructor=b,m(x,v.prototype),x.isPureReactComponent=!0;var w=Array.isArray,E=Object.prototype.hasOwnProperty,A={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,o)&&!C.hasOwnProperty(o)&&(a[o]=t[o]);var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){for(var u=Array(c),s=0;s<c;s++)u[s]=arguments[s+2];a.children=u}if(e&&e.defaultProps)for(o in c=e.defaultProps)void 0===a[o]&&(a[o]=c[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:A.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var B=/\/+/g;function L(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function F(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var c=!1;if(null===e)c=!0;else switch(l){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0}}if(c)return i=i(c=e),e=""===a?"."+L(c,0):a,w(i)?(o="",null!=e&&(o=e.replace(B,"$&/")+"/"),F(i,t,o,"",(function(e){return e}))):null!=i&&(k(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||c&&c.key===i.key?"":(""+i.key).replace(B,"$&/")+"/")+e)),t.push(i)),1;if(c=0,a=""===a?".":a+":",w(e))for(var u=0;u<e.length;u++){var s=a+L(l=e[u],u);c+=F(l,t,o,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),u=0;!(l=e.next()).done;)c+=F(l=l.value,t,o,s=a+L(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return c}function O(e,t,n){if(null==e)return e;var r=[],o=0;return F(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function j(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var P={current:null},N={transition:null},T={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:N,ReactCurrentOwner:A};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=A.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)E.call(t,u)&&!C.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){c=Array(u);for(var s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:c,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:j}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=N.transition;N.transition={};try{e()}finally{N.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return P.current.useCallback(e,t)},t.useContext=function(e){return P.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return P.current.useDeferredValue(e)},t.useEffect=function(e,t){return P.current.useEffect(e,t)},t.useId=function(){return P.current.useId()},t.useImperativeHandle=function(e,t,n){return P.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return P.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return P.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return P.current.useMemo(e,t)},t.useReducer=function(e,t,n){return P.current.useReducer(e,t,n)},t.useRef=function(e){return P.current.useRef(e)},t.useState=function(e){return P.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return P.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return P.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,c=e[l],u=l+1,s=e[u];if(0>a(c,n))u<o&&0>a(s,c)?(e[r]=s,e[u]=n,r=u):(e[r]=c,e[l]=n,r=l);else{if(!(u<o&&0>a(s,n)))break e;e[r]=s,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,c=l.now();t.unstable_now=function(){return l.now()-c}}var u=[],s=[],f=1,h=null,d=3,p=!1,m=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(u,t)}t=r(s)}}function w(e){if(y=!1,x(e),!m)if(null!==r(u))m=!0,N(E);else{var t=r(s);null!==t&&T(w,t.startTime-e)}}function E(e,n){m=!1,y&&(y=!1,g(k),k=-1),p=!0;var a=d;try{for(x(n),h=r(u);null!==h&&(!(h.expirationTime>n)||e&&!F());){var i=h.callback;if("function"==typeof i){h.callback=null,d=h.priorityLevel;var l=i(h.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?h.callback=l:h===r(u)&&o(u),x(n)}else o(u);h=r(u)}if(null!==h)var c=!0;else{var f=r(s);null!==f&&T(w,f.startTime-n),c=!1}return c}finally{h=null,d=a,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var A,C=!1,S=null,k=-1,B=5,L=-1;function F(){return!(t.unstable_now()-L<B)}function O(){if(null!==S){var e=t.unstable_now();L=e;var n=!0;try{n=S(!0,e)}finally{n?A():(C=!1,S=null)}}else C=!1}if("function"==typeof b)A=function(){b(O)};else if("undefined"!=typeof MessageChannel){var j=new MessageChannel,P=j.port2;j.port1.onmessage=O,A=function(){P.postMessage(null)}}else A=function(){v(O,0)};function N(e){S=e,C||(C=!0,A())}function T(e,n){k=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||p||(m=!0,N(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):B=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return d},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(d){case 1:case 2:case 3:var t=3;break;default:t=d}var n=d;d=t;try{return e()}finally{d=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=d;d=e;try{return t()}finally{d=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(s,e),null===r(u)&&e===r(s)&&(y?(g(k),k=-1):y=!0,T(w,a-i))):(e.sortIndex=l,n(u,e),m||p||(m=!0,N(E))),e},t.unstable_shouldYield=F,t.unstable_wrapCallback=function(e){var t=d;return function(){var n=d;d=t;try{return e.apply(this,arguments)}finally{d=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var c=e[l],u=r.base?c[0]+r.base:c[0],s=a[u]||0,f="".concat(u," ").concat(s);a[u]=s+1;var h=n(f),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)t[h].references++,t[h].updater(d);else{var p=o(d,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:p,references:1})}i.push(f)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var c=r(e,o),u=0;u<a.length;u++){var s=n(a[u]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}a=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},4836:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},3366:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})},512:(e,t,n)=>{"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:()=>o});const o=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},7563:(e,t,n)=>{"use strict";n.d(t,{Ab:()=>i,Fr:()=>l,G$:()=>a,JM:()=>f,K$:()=>u,MS:()=>r,h5:()=>c,lK:()=>s,uj:()=>o});var r="-ms-",o="-moz-",a="-webkit-",i="comm",l="rule",c="decl",u="@import",s="@keyframes",f="@layer"},2190:(e,t,n)=>{"use strict";n.d(t,{MY:()=>i});var r=n(7563),o=n(6686),a=n(6411);function i(e){return(0,a.cE)(l("",null,null,null,[""],e=(0,a.un)(e),0,[0],e))}function l(e,t,n,r,i,f,h,d,p){for(var m=0,y=0,v=h,g=0,b=0,x=0,w=1,E=1,A=1,C=0,S="",k=i,B=f,L=r,F=S;E;)switch(x=C,C=(0,a.lp)()){case 40:if(108!=x&&58==(0,o.uO)(F,v-1)){-1!=(0,o.Cw)(F+=(0,o.gx)((0,a.iF)(C),"&","&\f"),"&\f")&&(A=-1);break}case 34:case 39:case 91:F+=(0,a.iF)(C);break;case 9:case 10:case 13:case 32:F+=(0,a.Qb)(x);break;case 92:F+=(0,a.kq)((0,a.Ud)()-1,7);continue;case 47:switch((0,a.fj)()){case 42:case 47:(0,o.R3)(u((0,a.q6)((0,a.lp)(),(0,a.Ud)()),t,n),p);break;default:F+="/"}break;case 123*w:d[m++]=(0,o.to)(F)*A;case 125*w:case 59:case 0:switch(C){case 0:case 125:E=0;case 59+y:-1==A&&(F=(0,o.gx)(F,/\f/g,"")),b>0&&(0,o.to)(F)-v&&(0,o.R3)(b>32?s(F+";",r,n,v-1):s((0,o.gx)(F," ","")+";",r,n,v-2),p);break;case 59:F+=";";default:if((0,o.R3)(L=c(F,t,n,m,y,i,d,S,k=[],B=[],v),f),123===C)if(0===y)l(F,t,L,L,k,f,v,d,B);else switch(99===g&&110===(0,o.uO)(F,3)?100:g){case 100:case 108:case 109:case 115:l(e,L,L,r&&(0,o.R3)(c(e,L,L,0,0,i,d,S,i,k=[],v),B),i,B,v,d,r?k:B);break;default:l(F,L,L,L,[""],B,0,d,B)}}m=y=b=0,w=A=1,S=F="",v=h;break;case 58:v=1+(0,o.to)(F),b=x;default:if(w<1)if(123==C)--w;else if(125==C&&0==w++&&125==(0,a.mp)())continue;switch(F+=(0,o.Dp)(C),C*w){case 38:A=y>0?1:(F+="\f",-1);break;case 44:d[m++]=((0,o.to)(F)-1)*A,A=1;break;case 64:45===(0,a.fj)()&&(F+=(0,a.iF)((0,a.lp)())),g=(0,a.fj)(),y=v=(0,o.to)(S=F+=(0,a.QU)((0,a.Ud)())),C++;break;case 45:45===x&&2==(0,o.to)(F)&&(w=0)}}return f}function c(e,t,n,i,l,c,u,s,f,h,d){for(var p=l-1,m=0===l?c:[""],y=(0,o.Ei)(m),v=0,g=0,b=0;v<i;++v)for(var x=0,w=(0,o.tb)(e,p+1,p=(0,o.Wn)(g=u[v])),E=e;x<y;++x)(E=(0,o.fy)(g>0?m[x]+" "+w:(0,o.gx)(w,/&\f/g,m[x])))&&(f[b++]=E);return(0,a.dH)(e,t,n,0===l?r.Fr:s,f,h,d)}function u(e,t,n){return(0,a.dH)(e,t,n,r.Ab,(0,o.Dp)((0,a.Tb)()),(0,o.tb)(e,2,-2),0)}function s(e,t,n,i){return(0,a.dH)(e,t,n,r.h5,(0,o.tb)(e,0,i),(0,o.tb)(e,i+1,-1),i)}},211:(e,t,n)=>{"use strict";n.d(t,{P:()=>i,q:()=>a});var r=n(7563),o=n(6686);function a(e,t){for(var n="",r=(0,o.Ei)(e),a=0;a<r;a++)n+=t(e[a],a,e,t)||"";return n}function i(e,t,n,i){switch(e.type){case r.JM:if(e.children.length)break;case r.K$:case r.h5:return e.return=e.return||e.value;case r.Ab:return"";case r.lK:return e.return=e.value+"{"+a(e.children,i)+"}";case r.Fr:e.value=e.props.join(",")}return(0,o.to)(n=a(e.children,i))?e.return=e.value+"{"+n+"}":""}},6411:(e,t,n)=>{"use strict";n.d(t,{FK:()=>l,JG:()=>f,QU:()=>k,Qb:()=>E,Tb:()=>h,Ud:()=>y,cE:()=>x,dH:()=>s,fj:()=>m,iF:()=>w,kq:()=>A,lp:()=>p,mp:()=>d,q6:()=>S,r:()=>g,tP:()=>v,un:()=>b});var r=n(6686),o=1,a=1,i=0,l=0,c=0,u="";function s(e,t,n,r,i,l,c){return{value:e,root:t,parent:n,type:r,props:i,children:l,line:o,column:a,length:c,return:""}}function f(e,t){return(0,r.f0)(s("",null,null,"",null,null,0),e,{length:-e.length},t)}function h(){return c}function d(){return c=l>0?(0,r.uO)(u,--l):0,a--,10===c&&(a=1,o--),c}function p(){return c=l<i?(0,r.uO)(u,l++):0,a++,10===c&&(a=1,o++),c}function m(){return(0,r.uO)(u,l)}function y(){return l}function v(e,t){return(0,r.tb)(u,e,t)}function g(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function b(e){return o=a=1,i=(0,r.to)(u=e),l=0,[]}function x(e){return u="",e}function w(e){return(0,r.fy)(v(l-1,C(91===e?e+2:40===e?e+1:e)))}function E(e){for(;(c=m())&&c<33;)p();return g(e)>2||g(c)>3?"":" "}function A(e,t){for(;--t&&p()&&!(c<48||c>102||c>57&&c<65||c>70&&c<97););return v(e,y()+(t<6&&32==m()&&32==p()))}function C(e){for(;p();)switch(c){case e:return l;case 34:case 39:34!==e&&39!==e&&C(c);break;case 40:41===e&&C(e);break;case 92:p()}return l}function S(e,t){for(;p()&&e+c!==57&&(e+c!==84||47!==m()););return"/*"+v(t,l-1)+"*"+(0,r.Dp)(47===e?e:p())}function k(e){for(;!g(m());)p();return v(e,l)}},6686:(e,t,n)=>{"use strict";n.d(t,{$e:()=>y,Cw:()=>s,Dp:()=>o,EQ:()=>c,Ei:()=>p,R3:()=>m,Wn:()=>r,f0:()=>a,fy:()=>l,gx:()=>u,tb:()=>h,to:()=>d,uO:()=>f,vp:()=>i});var r=Math.abs,o=String.fromCharCode,a=Object.assign;function i(e,t){return 45^f(e,0)?(((t<<2^f(e,0))<<2^f(e,1))<<2^f(e,2))<<2^f(e,3):0}function l(e){return e.trim()}function c(e,t){return(e=t.exec(e))?e[0]:e}function u(e,t,n){return e.replace(t,n)}function s(e,t){return e.indexOf(t)}function f(e,t){return 0|e.charCodeAt(t)}function h(e,t,n){return e.slice(t,n)}function d(e){return e.length}function p(e){return e.length}function m(e,t){return t.push(e),e}function y(e,t){return e.map(t).join("")}}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={id:e,exports:{}};return n[e](a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0,(()=>{"use strict";var e={};o.r(e),o.d(e,{hasBrowserEnv:()=>lr,hasStandardBrowserEnv:()=>cr,hasStandardBrowserWebWorkerEnv:()=>sr});var t=o(7294),n=o.t(t,2),r=o(745),a=o(3379),i=o.n(a),l=o(7795),c=o.n(l),u=o(569),s=o.n(u),f=o(3565),h=o.n(f),d=o(9216),p=o.n(d),m=o(4589),y=o.n(m),v=o(5740),g={};g.styleTagTransform=y(),g.setAttributes=h(),g.insert=s().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=p(),i()(v.Z,g),v.Z&&v.Z.locals&&v.Z.locals;var b=o(6528),x={};x.styleTagTransform=y(),x.setAttributes=h(),x.insert=s().bind(null,"head"),x.domAPI=c(),x.insertStyleElement=p(),i()(b.Z,x),b.Z&&b.Z.locals&&b.Z.locals;var w=o(9553),E=o(7462),A=o(3366);const C=t.createContext(null);function S(){return t.useContext(C)}const k="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var B=o(5893);const L=function(e){const{children:n,theme:r}=e,o=S(),a=t.useMemo((()=>{const e=null===o?r:function(e,t){return"function"==typeof t?t(e):(0,E.Z)({},e,t)}(o,r);return null!=e&&(e[k]=null!==o),e}),[r,o]);return(0,B.jsx)(C.Provider,{value:a,children:n})};var F=o(5260),O=o(4168);const j={};function P(e,n,r,o=!1){return t.useMemo((()=>{const t=e&&n[e]||n;if("function"==typeof r){const a=r(t),i=e?(0,E.Z)({},n,{[e]:a}):a;return o?()=>i:i}return e?(0,E.Z)({},n,{[e]:r}):(0,E.Z)({},n,r)}),[e,n,r,o])}const N=function(e){const{children:t,theme:n,themeId:r}=e,o=(0,O.Z)(j),a=S()||j,i=P(r,o,n),l=P(r,a,n,!0);return(0,B.jsx)(L,{theme:l,children:(0,B.jsx)(F.T.Provider,{value:i,children:t})})};var T=o(606);const _=["theme"];function D(e){let{theme:t}=e,n=(0,A.Z)(e,_);const r=t[T.Z];return(0,B.jsx)(N,(0,E.Z)({},n,{themeId:r?T.Z:void 0,theme:r||t}))}var I=o(3486);var M=o(512),R=o(7925),z=o(4780),G=o(1796),Z=o(9602),$=o(6122),U=o(1705),H=o(314),W=o(3511);function Y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function V(e,t){return V=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},V(e,t)}function q(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,V(e,t)}const K=t.createContext(null);function X(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function Q(e,t,n){return null!=n[t]?n[t]:e.props[t]}function J(e,n,r){var o=X(e.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var c in t){if(o[c])for(r=0;r<o[c].length;r++){var u=o[c][r];l[o[c][r]]=n(u)}l[c]=n(c)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(n,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,t.isValidElement)(l)){var c=i in n,u=i in o,s=n[i],f=(0,t.isValidElement)(s)&&!s.props.in;!u||c&&!f?u||!c||f?u&&c&&(0,t.isValidElement)(s)&&(a[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:s.props.in,exit:Q(l,"exit",e),enter:Q(l,"enter",e)})):a[i]=(0,t.cloneElement)(l,{in:!1}):a[i]=(0,t.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:Q(l,"exit",e),enter:Q(l,"enter",e)})}})),a}var ee=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},te=function(e){function n(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(Y(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}q(n,e);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(e,n){var r,o,a=n.children,i=n.handleExited;return{children:n.firstRender?(r=e,o=i,X(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:Q(e,"appear",r),enter:Q(e,"enter",r),exit:Q(e,"exit",r)})}))):J(e,a,i),firstRender:!1}},r.handleExited=function(e,t){var n=X(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,E.Z)({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var e=this.props,n=e.component,r=e.childFactory,o=(0,A.Z)(e,["component","childFactory"]),a=this.state.contextValue,i=ee(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?t.createElement(K.Provider,{value:a},i):t.createElement(K.Provider,{value:a},t.createElement(n,o,i))},n}(t.Component);te.propTypes={},te.defaultProps={component:"div",childFactory:function(e){return e}};const ne=te;var re=o(444),oe=o(7278),ae=o(6797),ie=(o(6194),o(8679),(0,F.w)((function(e,n){var r=e.styles,o=(0,ae.O)([r],void 0,t.useContext(F.T));if(!F.i){for(var a,i=o.name,l=o.styles,c=o.next;void 0!==c;)i+=" "+c.name,l+=c.styles,c=c.next;var u=!0===n.compat,s=n.insert("",{name:i,styles:l},n.sheet,u);return u?null:t.createElement("style",((a={})["data-emotion"]=n.key+"-global "+i,a.dangerouslySetInnerHTML={__html:s},a.nonce=n.sheet.nonce,a))}var f=t.useRef();return(0,oe.j)((function(){var e=n.key+"-global",t=new n.sheet.constructor({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),r=!1,a=document.querySelector('style[data-emotion="'+e+" "+o.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==a&&(r=!0,a.setAttribute("data-emotion",e),t.hydrate([a])),f.current=[t,r],function(){t.flush()}}),[n]),(0,oe.j)((function(){var e=f.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==o.next&&(0,re.My)(n,o.next,!0),t.tags.length){var r=t.tags[t.tags.length-1].nextElementSibling;t.before=r,t.flush()}n.insert("",o,t,!1)}}),[n,o.name]),null})));function le(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,ae.O)(t)}var ce=function(){var e=le.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};var ue=o(1588);const se=(0,ue.Z)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),fe=["center","classes","className"];let he,de,pe,me,ye=e=>e;const ve=ce(he||(he=ye`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),ge=ce(de||(de=ye`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),be=ce(pe||(pe=ye`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),xe=(0,Z.ZP)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),we=(0,Z.ZP)((function(e){const{className:n,classes:r,pulsate:o=!1,rippleX:a,rippleY:i,rippleSize:l,in:c,onExited:u,timeout:s}=e,[f,h]=t.useState(!1),d=(0,M.Z)(n,r.ripple,r.rippleVisible,o&&r.ripplePulsate),p={width:l,height:l,top:-l/2+i,left:-l/2+a},m=(0,M.Z)(r.child,f&&r.childLeaving,o&&r.childPulsate);return c||f||h(!0),t.useEffect((()=>{if(!c&&null!=u){const e=setTimeout(u,s);return()=>{clearTimeout(e)}}}),[u,c,s]),(0,B.jsx)("span",{className:d,style:p,children:(0,B.jsx)("span",{className:m})})}),{name:"MuiTouchRipple",slot:"Ripple"})(me||(me=ye`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),se.rippleVisible,ve,550,(({theme:e})=>e.transitions.easing.easeInOut),se.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),se.child,se.childLeaving,ge,550,(({theme:e})=>e.transitions.easing.easeInOut),se.childPulsate,be,(({theme:e})=>e.transitions.easing.easeInOut)),Ee=t.forwardRef((function(e,n){const r=(0,$.Z)({props:e,name:"MuiTouchRipple"}),{center:o=!1,classes:a={},className:i}=r,l=(0,A.Z)(r,fe),[c,u]=t.useState([]),s=t.useRef(0),f=t.useRef(null);t.useEffect((()=>{f.current&&(f.current(),f.current=null)}),[c]);const h=t.useRef(!1),d=t.useRef(0),p=t.useRef(null),m=t.useRef(null);t.useEffect((()=>()=>{d.current&&clearTimeout(d.current)}),[]);const y=t.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:i}=e;u((e=>[...e,(0,B.jsx)(we,{classes:{ripple:(0,M.Z)(a.ripple,se.ripple),rippleVisible:(0,M.Z)(a.rippleVisible,se.rippleVisible),ripplePulsate:(0,M.Z)(a.ripplePulsate,se.ripplePulsate),child:(0,M.Z)(a.child,se.child),childLeaving:(0,M.Z)(a.childLeaving,se.childLeaving),childPulsate:(0,M.Z)(a.childPulsate,se.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},s.current)])),s.current+=1,f.current=i}),[a]),v=t.useCallback(((e={},t={},n=(()=>{}))=>{const{pulsate:r=!1,center:a=o||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&h.current)return void(h.current=!1);"touchstart"===(null==e?void 0:e.type)&&(h.current=!0);const l=i?null:m.current,c=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,s,f;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(c.width/2),s=Math.round(c.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-c.left),s=Math.round(n-c.top)}if(a)f=Math.sqrt((2*c.width**2+c.height**2)/3),f%2==0&&(f+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-s),s)+2;f=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===p.current&&(p.current=()=>{y({pulsate:r,rippleX:u,rippleY:s,rippleSize:f,cb:n})},d.current=setTimeout((()=>{p.current&&(p.current(),p.current=null)}),80)):y({pulsate:r,rippleX:u,rippleY:s,rippleSize:f,cb:n})}),[o,y]),g=t.useCallback((()=>{v({},{pulsate:!0})}),[v]),b=t.useCallback(((e,t)=>{if(clearTimeout(d.current),"touchend"===(null==e?void 0:e.type)&&p.current)return p.current(),p.current=null,void(d.current=setTimeout((()=>{b(e,t)})));p.current=null,u((e=>e.length>0?e.slice(1):e)),f.current=t}),[]);return t.useImperativeHandle(n,(()=>({pulsate:g,start:v,stop:b})),[g,v,b]),(0,B.jsx)(xe,(0,E.Z)({className:(0,M.Z)(se.root,a.root,i),ref:m},l,{children:(0,B.jsx)(ne,{component:null,exit:!0,children:c})}))})),Ae=Ee;var Ce=o(4867);function Se(e){return(0,Ce.Z)("MuiButtonBase",e)}const ke=(0,ue.Z)("MuiButtonBase",["root","disabled","focusVisible"]),Be=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],Le=(0,Z.ZP)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${ke.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),Fe=t.forwardRef((function(e,n){const r=(0,$.Z)({props:e,name:"MuiButtonBase"}),{action:o,centerRipple:a=!1,children:i,className:l,component:c="button",disabled:u=!1,disableRipple:s=!1,disableTouchRipple:f=!1,focusRipple:h=!1,LinkComponent:d="a",onBlur:p,onClick:m,onContextMenu:y,onDragLeave:v,onFocus:g,onFocusVisible:b,onKeyDown:x,onKeyUp:w,onMouseDown:C,onMouseLeave:S,onMouseUp:k,onTouchEnd:L,onTouchMove:F,onTouchStart:O,tabIndex:j=0,TouchRippleProps:P,touchRippleRef:N,type:T}=r,_=(0,A.Z)(r,Be),D=t.useRef(null),I=t.useRef(null),R=(0,U.Z)(I,N),{isFocusVisibleRef:G,onFocus:Z,onBlur:Y,ref:V}=(0,W.Z)(),[q,K]=t.useState(!1);u&&q&&K(!1),t.useImperativeHandle(o,(()=>({focusVisible:()=>{K(!0),D.current.focus()}})),[]);const[X,Q]=t.useState(!1);t.useEffect((()=>{Q(!0)}),[]);const J=X&&!s&&!u;function ee(e,t,n=f){return(0,H.Z)((r=>(t&&t(r),!n&&I.current&&I.current[e](r),!0)))}t.useEffect((()=>{q&&h&&!s&&X&&I.current.pulsate()}),[s,h,q,X]);const te=ee("start",C),ne=ee("stop",y),re=ee("stop",v),oe=ee("stop",k),ae=ee("stop",(e=>{q&&e.preventDefault(),S&&S(e)})),ie=ee("start",O),le=ee("stop",L),ce=ee("stop",F),ue=ee("stop",(e=>{Y(e),!1===G.current&&K(!1),p&&p(e)}),!1),se=(0,H.Z)((e=>{D.current||(D.current=e.currentTarget),Z(e),!0===G.current&&(K(!0),b&&b(e)),g&&g(e)})),fe=()=>{const e=D.current;return c&&"button"!==c&&!("A"===e.tagName&&e.href)},he=t.useRef(!1),de=(0,H.Z)((e=>{h&&!he.current&&q&&I.current&&" "===e.key&&(he.current=!0,I.current.stop(e,(()=>{I.current.start(e)}))),e.target===e.currentTarget&&fe()&&" "===e.key&&e.preventDefault(),x&&x(e),e.target===e.currentTarget&&fe()&&"Enter"===e.key&&!u&&(e.preventDefault(),m&&m(e))})),pe=(0,H.Z)((e=>{h&&" "===e.key&&I.current&&q&&!e.defaultPrevented&&(he.current=!1,I.current.stop(e,(()=>{I.current.pulsate(e)}))),w&&w(e),m&&e.target===e.currentTarget&&fe()&&" "===e.key&&!e.defaultPrevented&&m(e)}));let me=c;"button"===me&&(_.href||_.to)&&(me=d);const ye={};"button"===me?(ye.type=void 0===T?"button":T,ye.disabled=u):(_.href||_.to||(ye.role="button"),u&&(ye["aria-disabled"]=u));const ve=(0,U.Z)(n,V,D),ge=(0,E.Z)({},r,{centerRipple:a,component:c,disabled:u,disableRipple:s,disableTouchRipple:f,focusRipple:h,tabIndex:j,focusVisible:q}),be=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a={root:["root",t&&"disabled",n&&"focusVisible"]},i=(0,z.Z)(a,Se,o);return n&&r&&(i.root+=` ${r}`),i})(ge);return(0,B.jsxs)(Le,(0,E.Z)({as:me,className:(0,M.Z)(be.root,l),ownerState:ge,onBlur:ue,onClick:m,onContextMenu:ne,onFocus:se,onKeyDown:de,onKeyUp:pe,onMouseDown:te,onMouseLeave:ae,onMouseUp:oe,onDragLeave:re,onTouchEnd:le,onTouchMove:ce,onTouchStart:ie,ref:ve,tabIndex:u?-1:j,type:T},ye,_,{children:[i,J?(0,B.jsx)(Ae,(0,E.Z)({ref:R,center:a},P)):null]}))}));var Oe=o(8216);function je(e){return(0,Ce.Z)("MuiButton",e)}const Pe=(0,ue.Z)("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),Ne=t.createContext({}),Te=t.createContext(void 0),_e=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],De=e=>(0,E.Z)({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),Ie=(0,Z.ZP)(Fe,{shouldForwardProp:e=>(0,Z.FO)(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${(0,Oe.Z)(n.color)}`],t[`size${(0,Oe.Z)(n.size)}`],t[`${n.variant}Size${(0,Oe.Z)(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})((({theme:e,ownerState:t})=>{var n,r;const o="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],a="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return(0,E.Z)({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":(0,E.Z)({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,G.Fq)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===t.variant&&"inherit"!==t.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,G.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===t.variant&&"inherit"!==t.color&&{border:`1px solid ${(e.vars||e).palette[t.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,G.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===t.variant&&{backgroundColor:e.vars?e.vars.palette.Button.inheritContainedHoverBg:a,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===t.variant&&"inherit"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":(0,E.Z)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${Pe.focusVisible}`]:(0,E.Z)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${Pe.disabled}`]:(0,E.Z)({color:(e.vars||e).palette.action.disabled},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"contained"===t.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===t.variant&&{padding:"6px 8px"},"text"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main},"outlined"===t.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:`1px solid ${(0,G.Fq)(e.palette[t.color].main,.5)}`},"contained"===t.variant&&{color:e.vars?e.vars.palette.text.primary:null==(n=(r=e.palette).getContrastText)?void 0:n.call(r,e.palette.grey[300]),backgroundColor:e.vars?e.vars.palette.Button.inheritContainedBg:o,boxShadow:(e.vars||e).shadows[2]},"contained"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},"inherit"===t.color&&{color:"inherit",borderColor:"currentColor"},"small"===t.size&&"text"===t.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"text"===t.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"outlined"===t.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"outlined"===t.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"contained"===t.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"contained"===t.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})}),(({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${Pe.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${Pe.disabled}`]:{boxShadow:"none"}})),Me=(0,Z.ZP)("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${(0,Oe.Z)(n.size)}`]]}})((({ownerState:e})=>(0,E.Z)({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},De(e)))),Re=(0,Z.ZP)("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${(0,Oe.Z)(n.size)}`]]}})((({ownerState:e})=>(0,E.Z)({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},De(e)))),ze=t.forwardRef((function(e,n){const r=t.useContext(Ne),o=t.useContext(Te),a=(0,R.Z)(r,e),i=(0,$.Z)({props:a,name:"MuiButton"}),{children:l,color:c="primary",component:u="button",className:s,disabled:f=!1,disableElevation:h=!1,disableFocusRipple:d=!1,endIcon:p,focusVisibleClassName:m,fullWidth:y=!1,size:v="medium",startIcon:g,type:b,variant:x="text"}=i,w=(0,A.Z)(i,_e),C=(0,E.Z)({},i,{color:c,component:u,disabled:f,disableElevation:h,disableFocusRipple:d,fullWidth:y,size:v,type:b,variant:x}),S=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:a,classes:i}=e,l={root:["root",a,`${a}${(0,Oe.Z)(t)}`,`size${(0,Oe.Z)(o)}`,`${a}Size${(0,Oe.Z)(o)}`,"inherit"===t&&"colorInherit",n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["startIcon",`iconSize${(0,Oe.Z)(o)}`],endIcon:["endIcon",`iconSize${(0,Oe.Z)(o)}`]},c=(0,z.Z)(l,je,i);return(0,E.Z)({},i,c)})(C),k=g&&(0,B.jsx)(Me,{className:S.startIcon,ownerState:C,children:g}),L=p&&(0,B.jsx)(Re,{className:S.endIcon,ownerState:C,children:p}),F=o||"";return(0,B.jsxs)(Ie,(0,E.Z)({ownerState:C,className:(0,M.Z)(r.className,S.root,s,F),component:u,disabled:f,focusRipple:!d,focusVisibleClassName:(0,M.Z)(S.focusVisible,m),ref:n,type:b},w,{classes:S,children:[k,l,L]}))}));var Ge,Ze=o(3935),$e=o.t(Ze,2);function Ue(){return Ue=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ue.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(Ge||(Ge={}));const He="popstate";function We(e,t){if(!1===e||null==e)throw new Error(t)}function Ye(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function Ve(e,t){return{usr:e.state,key:e.key,idx:t}}function qe(e,t,n,r){return void 0===n&&(n=null),Ue({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?Xe(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function Ke(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function Xe(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var Qe;function Je(e,t,n){void 0===n&&(n="/");let r=dt(("string"==typeof t?Xe(t):t).pathname||"/",n);if(null==r)return null;let o=et(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=st(o[e],ht(r));return a}function et(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(We(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=vt([r,i.relativePath]),c=n.concat(i);e.children&&e.children.length>0&&(We(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),et(e.children,t,c,l)),(null!=e.path||e.index)&&t.push({path:l,score:ut(l,e.index),routesMeta:c})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of tt(e.path))o(e,t,n);else o(e,t)})),t}function tt(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=tt(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(Qe||(Qe={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const nt=/^:\w+$/,rt=3,ot=2,at=1,it=10,lt=-2,ct=e=>"*"===e;function ut(e,t){let n=e.split("/"),r=n.length;return n.some(ct)&&(r+=lt),t&&(r+=ot),n.filter((e=>!ct(e))).reduce(((e,t)=>e+(nt.test(t)?rt:""===t?at:it)),r)}function st(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,c="/"===o?t:t.slice(o.length)||"/",u=ft({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},c);if(!u)return null;Object.assign(r,u.params);let s=i.route;a.push({params:r,pathname:vt([o,u.pathname]),pathnameBase:gt(vt([o,u.pathnameBase])),route:s}),"/"!==u.pathnameBase&&(o=vt([o,u.pathnameBase]))}return a}function ft(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),Ye("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:o}=t;if("*"===r){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const c=l[n];return e[r]=o&&!c?void 0:function(e,t){try{return decodeURIComponent(e)}catch(n){return Ye(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(c||"",r),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function ht(e){try{return decodeURI(e)}catch(t){return Ye(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function dt(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function pt(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function mt(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function yt(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=Xe(e):(o=Ue({},e),We(!o.pathname||!o.pathname.includes("?"),pt("?","pathname","search",o)),We(!o.pathname||!o.pathname.includes("#"),pt("#","pathname","hash",o)),We(!o.search||!o.search.includes("#"),pt("#","search","hash",o)));let a,i=""===e||""===o.pathname,l=i?"/":o.pathname;if(null==l)a=n;else if(r){let e=t[t.length-1].replace(/^\//,"").split("/");if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e.pop();o.pathname=t.join("/")}a="/"+e.join("/")}else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}a=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?Xe(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:bt(r),hash:xt(o)}}(o,a),u=l&&"/"!==l&&l.endsWith("/"),s=(i||"."===l)&&n.endsWith("/");return c.pathname.endsWith("/")||!u&&!s||(c.pathname+="/"),c}const vt=e=>e.join("/").replace(/\/\/+/g,"/"),gt=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),bt=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",xt=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const wt=["post","put","patch","delete"],Et=(new Set(wt),["get",...wt]);function At(){return At=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},At.apply(this,arguments)}new Set(Et),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const Ct=t.createContext(null),St=t.createContext(null),kt=t.createContext(null),Bt=t.createContext(null),Lt=t.createContext({outlet:null,matches:[],isDataRoute:!1}),Ft=t.createContext(null);function Ot(){return null!=t.useContext(Bt)}function jt(){return Ot()||We(!1),t.useContext(Bt).location}function Pt(e){t.useContext(kt).static||t.useLayoutEffect(e)}function Nt(){let{isDataRoute:e}=t.useContext(Lt);return e?function(){let{router:e}=function(e){let n=t.useContext(Ct);return n||We(!1),n}(Gt.UseNavigateStable),n=$t(Zt.UseNavigateStable),r=t.useRef(!1);Pt((()=>{r.current=!0}));let o=t.useCallback((function(t,o){void 0===o&&(o={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,At({fromRouteId:n},o)))}),[e,n]);return o}():function(){Ot()||We(!1);let e=t.useContext(Ct),{basename:n,navigator:r}=t.useContext(kt),{matches:o}=t.useContext(Lt),{pathname:a}=jt(),i=JSON.stringify(mt(o).map((e=>e.pathnameBase))),l=t.useRef(!1);Pt((()=>{l.current=!0}));let c=t.useCallback((function(t,o){if(void 0===o&&(o={}),!l.current)return;if("number"==typeof t)return void r.go(t);let c=yt(t,JSON.parse(i),a,"path"===o.relative);null==e&&"/"!==n&&(c.pathname="/"===c.pathname?n:vt([n,c.pathname])),(o.replace?r.replace:r.push)(c,o.state,o)}),[n,r,i,a,e]);return c}()}function Tt(){let{matches:e}=t.useContext(Lt),n=e[e.length-1];return n?n.params:{}}function _t(e,n){let{relative:r}=void 0===n?{}:n,{matches:o}=t.useContext(Lt),{pathname:a}=jt(),i=JSON.stringify(mt(o).map((e=>e.pathnameBase)));return t.useMemo((()=>yt(e,JSON.parse(i),a,"path"===r)),[e,i,a,r])}function Dt(e,n,r){Ot()||We(!1);let{navigator:o}=t.useContext(kt),{matches:a}=t.useContext(Lt),i=a[a.length-1],l=i?i.params:{},c=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let u,s=jt();if(n){var f;let e="string"==typeof n?Xe(n):n;"/"===c||(null==(f=e.pathname)?void 0:f.startsWith(c))||We(!1),u=e}else u=s;let h=u.pathname||"/",d=Je(e,{pathname:"/"===c?h:h.slice(c.length)||"/"}),p=function(e,n,r){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),null==e){var a;if(null==(a=r)||!a.errors)return null;e=r.matches}let i=e,l=null==(o=r)?void 0:o.errors;if(null!=l){let e=i.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||We(!1),i=i.slice(0,Math.min(i.length,e+1))}return i.reduceRight(((e,o,a)=>{let c=o.route.id?null==l?void 0:l[o.route.id]:null,u=null;r&&(u=o.route.errorElement||Mt);let s=n.concat(i.slice(0,a+1)),f=()=>{let n;return n=c?u:o.route.Component?t.createElement(o.route.Component,null):o.route.element?o.route.element:e,t.createElement(zt,{match:o,routeContext:{outlet:e,matches:s,isDataRoute:null!=r},children:n})};return r&&(o.route.ErrorBoundary||o.route.errorElement||0===a)?t.createElement(Rt,{location:r.location,revalidation:r.revalidation,component:u,error:c,children:f(),routeContext:{outlet:null,matches:s,isDataRoute:!0}}):f()}),null)}(d&&d.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:vt([c,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:vt([c,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),a,r);return n&&p?t.createElement(Bt.Provider,{value:{location:At({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:Ge.Pop}},p):p}function It(){let e=function(){var e;let n=t.useContext(Ft),r=function(e){let n=t.useContext(St);return n||We(!1),n}(Zt.UseRouteError),o=$t(Zt.UseRouteError);return n||(null==(e=r.errors)?void 0:e[o])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,null)}const Mt=t.createElement(It,null);class Rt extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(Lt.Provider,{value:this.props.routeContext},t.createElement(Ft.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function zt(e){let{routeContext:n,match:r,children:o}=e,a=t.useContext(Ct);return a&&a.static&&a.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(Lt.Provider,{value:n},o)}var Gt=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(Gt||{}),Zt=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Zt||{});function $t(e){let n=function(e){let n=t.useContext(Lt);return n||We(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||We(!1),r.route.id}function Ut(e){We(!1)}function Ht(e){let{basename:n="/",children:r=null,location:o,navigationType:a=Ge.Pop,navigator:i,static:l=!1}=e;Ot()&&We(!1);let c=n.replace(/^\/*/,"/"),u=t.useMemo((()=>({basename:c,navigator:i,static:l})),[c,i,l]);"string"==typeof o&&(o=Xe(o));let{pathname:s="/",search:f="",hash:h="",state:d=null,key:p="default"}=o,m=t.useMemo((()=>{let e=dt(s,c);return null==e?null:{location:{pathname:e,search:f,hash:h,state:d,key:p},navigationType:a}}),[c,s,f,h,d,p,a]);return null==m?null:t.createElement(kt.Provider,{value:u},t.createElement(Bt.Provider,{children:r,value:m}))}function Wt(e){let{children:t,location:n}=e;return Dt(Yt(t),n)}function Yt(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,o)=>{if(!t.isValidElement(e))return;let a=[...n,o];if(e.type===t.Fragment)return void r.push.apply(r,Yt(e.props.children,a));e.type!==Ut&&We(!1),e.props.index&&e.props.children&&We(!1);let i={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=Yt(e.props.children,a)),r.push(i)})),r}function Vt(){return Vt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Vt.apply(this,arguments)}function qt(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Kt=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],Xt=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"],Qt=t.createContext({isTransitioning:!1});new Map;const Jt=n.startTransition;function en(e){let{basename:n,children:r,future:o,window:a}=e,i=t.useRef();null==i.current&&(i.current=function(e){return void 0===e&&(e={}),function(e,t,n,r){void 0===r&&(r={});let{window:o=document.defaultView,v5Compat:a=!1}=r,i=o.history,l=Ge.Pop,c=null,u=s();function s(){return(i.state||{idx:null}).idx}function f(){l=Ge.Pop;let e=s(),t=null==e?null:e-u;u=e,c&&c({action:l,location:d.location,delta:t})}function h(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:Ke(e);return We(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==u&&(u=0,i.replaceState(Ue({},i.state,{idx:u}),""));let d={get action(){return l},get location(){return e(o,i)},listen(e){if(c)throw new Error("A history only accepts one active listener");return o.addEventListener(He,f),c=e,()=>{o.removeEventListener(He,f),c=null}},createHref:e=>t(o,e),createURL:h,encodeLocation(e){let t=h(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){l=Ge.Push;let r=qe(d.location,e,t);n&&n(r,e),u=s()+1;let f=Ve(r,u),h=d.createHref(r);try{i.pushState(f,"",h)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(h)}a&&c&&c({action:l,location:d.location,delta:1})},replace:function(e,t){l=Ge.Replace;let r=qe(d.location,e,t);n&&n(r,e),u=s();let o=Ve(r,u),f=d.createHref(r);i.replaceState(o,"",f),a&&c&&c({action:l,location:d.location,delta:0})},go:e=>i.go(e)};return d}((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=Xe(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),qe("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:Ke(t))}),(function(e,t){Ye("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}({window:a,v5Compat:!0}));let l=i.current,[c,u]=t.useState({action:l.action,location:l.location}),{v7_startTransition:s}=o||{},f=t.useCallback((e=>{s&&Jt?Jt((()=>u(e))):u(e)}),[u,s]);return t.useLayoutEffect((()=>l.listen(f)),[l,f]),t.createElement(Ht,{basename:n,children:r,location:c.location,navigationType:c.action,navigator:l})}$e.flushSync;const tn="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,nn=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,rn=t.forwardRef((function(e,n){let r,{onClick:o,relative:a,reloadDocument:i,replace:l,state:c,target:u,to:s,preventScrollReset:f,unstable_viewTransition:h}=e,d=qt(e,Kt),{basename:p}=t.useContext(kt),m=!1;if("string"==typeof s&&nn.test(s)&&(r=s,tn))try{let e=new URL(window.location.href),t=s.startsWith("//")?new URL(e.protocol+s):new URL(s),n=dt(t.pathname,p);t.origin===e.origin&&null!=n?s=n+t.search+t.hash:m=!0}catch(e){}let y=function(e,n){let{relative:r}=void 0===n?{}:n;Ot()||We(!1);let{basename:o,navigator:a}=t.useContext(kt),{hash:i,pathname:l,search:c}=_t(e,{relative:r}),u=l;return"/"!==o&&(u="/"===l?o:vt([o,l])),a.createHref({pathname:u,search:c,hash:i})}(s,{relative:a}),v=function(e,n){let{target:r,replace:o,state:a,preventScrollReset:i,relative:l,unstable_viewTransition:c}=void 0===n?{}:n,u=Nt(),s=jt(),f=_t(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==o?o:Ke(s)===Ke(f);u(e,{replace:n,state:a,preventScrollReset:i,relative:l,unstable_viewTransition:c})}}),[s,u,f,o,a,r,e,i,l,c])}(s,{replace:l,state:c,target:u,preventScrollReset:f,relative:a,unstable_viewTransition:h});return t.createElement("a",Vt({},d,{href:r||y,onClick:m||i?o:function(e){o&&o(e),e.defaultPrevented||v(e)},ref:n,target:u}))})),on=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:o=!1,className:a="",end:i=!1,style:l,to:c,unstable_viewTransition:u,children:s}=e,f=qt(e,Xt),h=_t(c,{relative:f.relative}),d=jt(),p=t.useContext(St),{navigator:m}=t.useContext(kt),y=null!=p&&function(e,n){void 0===n&&(n={});let r=t.useContext(Qt);null==r&&We(!1);let{basename:o}=function(e){let n=t.useContext(Ct);return n||We(!1),n}(an.useViewTransitionState),a=_t(e,{relative:n.relative});if(!r.isTransitioning)return!1;let i=dt(r.currentLocation.pathname,o)||r.currentLocation.pathname,l=dt(r.nextLocation.pathname,o)||r.nextLocation.pathname;return null!=ft(a.pathname,l)||null!=ft(a.pathname,i)}(h)&&!0===u,v=m.encodeLocation?m.encodeLocation(h).pathname:h.pathname,g=d.pathname,b=p&&p.navigation&&p.navigation.location?p.navigation.location.pathname:null;o||(g=g.toLowerCase(),b=b?b.toLowerCase():null,v=v.toLowerCase());const x="/"!==v&&v.endsWith("/")?v.length-1:v.length;let w,E=g===v||!i&&g.startsWith(v)&&"/"===g.charAt(x),A=null!=b&&(b===v||!i&&b.startsWith(v)&&"/"===b.charAt(v.length)),C={isActive:E,isPending:A,isTransitioning:y},S=E?r:void 0;w="function"==typeof a?a(C):[a,E?"active":null,A?"pending":null,y?"transitioning":null].filter(Boolean).join(" ");let k="function"==typeof l?l(C):l;return t.createElement(rn,Vt({},f,{"aria-current":S,className:w,ref:n,style:k,to:c,unstable_viewTransition:u}),"function"==typeof s?s(C):s)}));var an,ln;function cn(e,t){return function(){return e.apply(t,arguments)}}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(an||(an={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ln||(ln={}));const{toString:un}=Object.prototype,{getPrototypeOf:sn}=Object,fn=(hn=Object.create(null),e=>{const t=un.call(e);return hn[t]||(hn[t]=t.slice(8,-1).toLowerCase())});var hn;const dn=e=>(e=e.toLowerCase(),t=>fn(t)===e),pn=e=>t=>typeof t===e,{isArray:mn}=Array,yn=pn("undefined"),vn=dn("ArrayBuffer"),gn=pn("string"),bn=pn("function"),xn=pn("number"),wn=e=>null!==e&&"object"==typeof e,En=e=>{if("object"!==fn(e))return!1;const t=sn(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},An=dn("Date"),Cn=dn("File"),Sn=dn("Blob"),kn=dn("FileList"),Bn=dn("URLSearchParams");function Ln(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),mn(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(r=0;r<a;r++)i=o[r],t.call(null,e[i],i,e)}}function Fn(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const On="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,jn=e=>!yn(e)&&e!==On,Pn=(Nn="undefined"!=typeof Uint8Array&&sn(Uint8Array),e=>Nn&&e instanceof Nn);var Nn;const Tn=dn("HTMLFormElement"),_n=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),Dn=dn("RegExp"),In=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};Ln(n,((n,o)=>{let a;!1!==(a=t(n,o,e))&&(r[o]=a||n)})),Object.defineProperties(e,r)},Mn="abcdefghijklmnopqrstuvwxyz",Rn="0123456789",zn={DIGIT:Rn,ALPHA:Mn,ALPHA_DIGIT:Mn+Mn.toUpperCase()+Rn},Gn=dn("AsyncFunction"),Zn={isArray:mn,isArrayBuffer:vn,isBuffer:function(e){return null!==e&&!yn(e)&&null!==e.constructor&&!yn(e.constructor)&&bn(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||bn(e.append)&&("formdata"===(t=fn(e))||"object"===t&&bn(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&vn(e.buffer),t},isString:gn,isNumber:xn,isBoolean:e=>!0===e||!1===e,isObject:wn,isPlainObject:En,isUndefined:yn,isDate:An,isFile:Cn,isBlob:Sn,isRegExp:Dn,isFunction:bn,isStream:e=>wn(e)&&bn(e.pipe),isURLSearchParams:Bn,isTypedArray:Pn,isFileList:kn,forEach:Ln,merge:function e(){const{caseless:t}=jn(this)&&this||{},n={},r=(r,o)=>{const a=t&&Fn(n,o)||o;En(n[a])&&En(r)?n[a]=e(n[a],r):En(r)?n[a]=e({},r):mn(r)?n[a]=r.slice():n[a]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&Ln(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(Ln(t,((t,r)=>{n&&bn(t)?e[r]=cn(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,a,i;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),a=o.length;a-- >0;)i=o[a],r&&!r(i,e,t)||l[i]||(t[i]=e[i],l[i]=!0);e=!1!==n&&sn(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:fn,kindOfTest:dn,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(mn(e))return e;let t=e.length;if(!xn(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:Tn,hasOwnProperty:_n,hasOwnProp:_n,reduceDescriptors:In,freezeMethods:e=>{In(e,((t,n)=>{if(bn(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];bn(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return mn(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:Fn,global:On,isContextDefined:jn,ALPHABET:zn,generateString:(e=16,t=zn.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&bn(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(wn(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=mn(e)?[]:{};return Ln(e,((e,t)=>{const a=n(e,r+1);!yn(a)&&(o[t]=a)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:Gn,isThenable:e=>e&&(wn(e)||bn(e))&&bn(e.then)&&bn(e.catch)};function $n(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}Zn.inherits($n,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Zn.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Un=$n.prototype,Hn={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{Hn[e]={value:e}})),Object.defineProperties($n,Hn),Object.defineProperty(Un,"isAxiosError",{value:!0}),$n.from=(e,t,n,r,o,a)=>{const i=Object.create(Un);return Zn.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),$n.call(i,e.message,t,n,r,o),i.cause=e,i.name=e.name,a&&Object.assign(i,a),i};const Wn=$n;function Yn(e){return Zn.isPlainObject(e)||Zn.isArray(e)}function Vn(e){return Zn.endsWith(e,"[]")?e.slice(0,-2):e}function qn(e,t,n){return e?e.concat(t).map((function(e,t){return e=Vn(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const Kn=Zn.toFlatObject(Zn,{},null,(function(e){return/^is[A-Z]/.test(e)})),Xn=function(e,t,n){if(!Zn.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=Zn.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!Zn.isUndefined(t[e])}))).metaTokens,o=n.visitor||u,a=n.dots,i=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&Zn.isSpecCompliantForm(t);if(!Zn.isFunction(o))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(Zn.isDate(e))return e.toISOString();if(!l&&Zn.isBlob(e))throw new Wn("Blob is not supported. Use a Buffer instead.");return Zn.isArrayBuffer(e)||Zn.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function u(e,n,o){let l=e;if(e&&!o&&"object"==typeof e)if(Zn.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(Zn.isArray(e)&&function(e){return Zn.isArray(e)&&!e.some(Yn)}(e)||(Zn.isFileList(e)||Zn.endsWith(n,"[]"))&&(l=Zn.toArray(e)))return n=Vn(n),l.forEach((function(e,r){!Zn.isUndefined(e)&&null!==e&&t.append(!0===i?qn([n],r,a):null===i?n:n+"[]",c(e))})),!1;return!!Yn(e)||(t.append(qn(o,n,a),c(e)),!1)}const s=[],f=Object.assign(Kn,{defaultVisitor:u,convertValue:c,isVisitable:Yn});if(!Zn.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!Zn.isUndefined(n)){if(-1!==s.indexOf(n))throw Error("Circular reference detected in "+r.join("."));s.push(n),Zn.forEach(n,(function(n,a){!0===(!(Zn.isUndefined(n)||null===n)&&o.call(t,n,Zn.isString(a)?a.trim():a,r,f))&&e(n,r?r.concat(a):[a])})),s.pop()}}(e),t};function Qn(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Jn(e,t){this._pairs=[],e&&Xn(e,this,t)}const er=Jn.prototype;er.append=function(e,t){this._pairs.push([e,t])},er.toString=function(e){const t=e?function(t){return e.call(this,t,Qn)}:Qn;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const tr=Jn;function nr(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function rr(e,t,n){if(!t)return e;const r=n&&n.encode||nr,o=n&&n.serialize;let a;if(a=o?o(t,n):Zn.isURLSearchParams(t)?t.toString():new tr(t,n).toString(r),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}const or=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Zn.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},ar={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ir={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:tr,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},lr="undefined"!=typeof window&&"undefined"!=typeof document,cr=(ur="undefined"!=typeof navigator&&navigator.product,lr&&["ReactNative","NativeScript","NS"].indexOf(ur)<0);var ur;const sr="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,fr={...e,...ir},hr=function(e){function t(e,n,r,o){let a=e[o++];const i=Number.isFinite(+a),l=o>=e.length;return a=!a&&Zn.isArray(r)?r.length:a,l?(Zn.hasOwnProp(r,a)?r[a]=[r[a],n]:r[a]=n,!i):(r[a]&&Zn.isObject(r[a])||(r[a]=[]),t(e,n,r[a],o)&&Zn.isArray(r[a])&&(r[a]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let a;for(r=0;r<o;r++)a=n[r],t[a]=e[a];return t}(r[a])),!i)}if(Zn.isFormData(e)&&Zn.isFunction(e.entries)){const n={};return Zn.forEachEntry(e,((e,r)=>{t(function(e){return Zn.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},dr={transitional:ar,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=Zn.isObject(e);if(o&&Zn.isHTMLForm(e)&&(e=new FormData(e)),Zn.isFormData(e))return r&&r?JSON.stringify(hr(e)):e;if(Zn.isArrayBuffer(e)||Zn.isBuffer(e)||Zn.isStream(e)||Zn.isFile(e)||Zn.isBlob(e))return e;if(Zn.isArrayBufferView(e))return e.buffer;if(Zn.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Xn(e,new fr.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return fr.isNode&&Zn.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=Zn.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Xn(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(Zn.isString(e))try{return(0,JSON.parse)(e),Zn.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||dr.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&Zn.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw Wn.from(e,Wn.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:fr.classes.FormData,Blob:fr.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Zn.forEach(["delete","get","head","post","put","patch"],(e=>{dr.headers[e]={}}));const pr=dr,mr=Zn.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),yr=Symbol("internals");function vr(e){return e&&String(e).trim().toLowerCase()}function gr(e){return!1===e||null==e?e:Zn.isArray(e)?e.map(gr):String(e)}function br(e,t,n,r,o){return Zn.isFunction(r)?r.call(this,t,n):(o&&(t=n),Zn.isString(t)?Zn.isString(r)?-1!==t.indexOf(r):Zn.isRegExp(r)?r.test(t):void 0:void 0)}class xr{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=vr(t);if(!o)throw new Error("header name must be a non-empty string");const a=Zn.findKey(r,o);(!a||void 0===r[a]||!0===n||void 0===n&&!1!==r[a])&&(r[a||t]=gr(e))}const a=(e,t)=>Zn.forEach(e,((e,n)=>o(e,n,t)));return Zn.isPlainObject(e)||e instanceof this.constructor?a(e,t):Zn.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?a((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&mr[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=vr(e)){const n=Zn.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(Zn.isFunction(t))return t.call(this,e,n);if(Zn.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=vr(e)){const n=Zn.findKey(this,e);return!(!n||void 0===this[n]||t&&!br(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=vr(e)){const o=Zn.findKey(n,e);!o||t&&!br(0,n[o],o,t)||(delete n[o],r=!0)}}return Zn.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!br(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return Zn.forEach(this,((r,o)=>{const a=Zn.findKey(n,o);if(a)return t[a]=gr(r),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();i!==o&&delete t[o],t[i]=gr(r),n[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Zn.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&Zn.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[yr]=this[yr]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=vr(e);t[r]||(function(e,t){const n=Zn.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return Zn.isArray(e)?e.forEach(r):r(e),this}}xr.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Zn.reduceDescriptors(xr.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),Zn.freezeMethods(xr);const wr=xr;function Er(e,t){const n=this||pr,r=t||n,o=wr.from(r.headers);let a=r.data;return Zn.forEach(e,(function(e){a=e.call(n,a,o.normalize(),t?t.status:void 0)})),o.normalize(),a}function Ar(e){return!(!e||!e.__CANCEL__)}function Cr(e,t,n){Wn.call(this,null==e?"canceled":e,Wn.ERR_CANCELED,t,n),this.name="CanceledError"}Zn.inherits(Cr,Wn,{__CANCEL__:!0});const Sr=Cr,kr=fr.hasStandardBrowserEnv?{write(e,t,n,r,o,a){const i=[e+"="+encodeURIComponent(t)];Zn.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),Zn.isString(r)&&i.push("path="+r),Zn.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Br(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Lr=fr.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=Zn.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function Fr(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,a=0,i=0;return t=void 0!==t?t:1e3,function(l){const c=Date.now(),u=r[i];o||(o=c),n[a]=l,r[a]=c;let s=i,f=0;for(;s!==a;)f+=n[s++],s%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),c-o<t)return;const h=u&&c-u;return h?Math.round(1e3*f/h):void 0}}(50,250);return o=>{const a=o.loaded,i=o.lengthComputable?o.total:void 0,l=a-n,c=r(l);n=a;const u={loaded:a,total:i,progress:i?a/i:void 0,bytes:l,rate:c||void 0,estimated:c&&i&&a<=i?(i-a)/c:void 0,event:o};u[t?"download":"upload"]=!0,e(u)}}const Or={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=wr.from(e.headers).normalize();let a,i,{responseType:l,withXSRFToken:c}=e;function u(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}if(Zn.isFormData(r))if(fr.hasStandardBrowserEnv||fr.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(i=o.getContentType())){const[e,...t]=i?i.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}let s=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const f=Br(e.baseURL,e.url);function h(){if(!s)return;const r=wr.from("getAllResponseHeaders"in s&&s.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new Wn("Request failed with status code "+n.status,[Wn.ERR_BAD_REQUEST,Wn.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),u()}),(function(e){n(e),u()}),{data:l&&"text"!==l&&"json"!==l?s.response:s.responseText,status:s.status,statusText:s.statusText,headers:r,config:e,request:s}),s=null}if(s.open(e.method.toUpperCase(),rr(f,e.params,e.paramsSerializer),!0),s.timeout=e.timeout,"onloadend"in s?s.onloadend=h:s.onreadystatechange=function(){s&&4===s.readyState&&(0!==s.status||s.responseURL&&0===s.responseURL.indexOf("file:"))&&setTimeout(h)},s.onabort=function(){s&&(n(new Wn("Request aborted",Wn.ECONNABORTED,e,s)),s=null)},s.onerror=function(){n(new Wn("Network Error",Wn.ERR_NETWORK,e,s)),s=null},s.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||ar;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new Wn(t,r.clarifyTimeoutError?Wn.ETIMEDOUT:Wn.ECONNABORTED,e,s)),s=null},fr.hasStandardBrowserEnv&&(c&&Zn.isFunction(c)&&(c=c(e)),c||!1!==c&&Lr(f))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&kr.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in s&&Zn.forEach(o.toJSON(),(function(e,t){s.setRequestHeader(t,e)})),Zn.isUndefined(e.withCredentials)||(s.withCredentials=!!e.withCredentials),l&&"json"!==l&&(s.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&s.addEventListener("progress",Fr(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&s.upload&&s.upload.addEventListener("progress",Fr(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{s&&(n(!t||t.type?new Sr(null,e,s):t),s.abort(),s=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const d=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(f);d&&-1===fr.protocols.indexOf(d)?n(new Wn("Unsupported protocol "+d+":",Wn.ERR_BAD_REQUEST,e)):s.send(r||null)}))}};Zn.forEach(Or,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const jr=e=>`- ${e}`,Pr=e=>Zn.isFunction(e)||null===e||!1===e,Nr=e=>{e=Zn.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let a=0;a<t;a++){let t;if(n=e[a],r=n,!Pr(n)&&(r=Or[(t=String(n)).toLowerCase()],void 0===r))throw new Wn(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+a]=r}if(!r){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(jr).join("\n"):" "+jr(e[0]):"as no adapter specified";throw new Wn("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function Tr(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Sr(null,e)}function _r(e){return Tr(e),e.headers=wr.from(e.headers),e.data=Er.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Nr(e.adapter||pr.adapter)(e).then((function(t){return Tr(e),t.data=Er.call(e,e.transformResponse,t),t.headers=wr.from(t.headers),t}),(function(t){return Ar(t)||(Tr(e),t&&t.response&&(t.response.data=Er.call(e,e.transformResponse,t.response),t.response.headers=wr.from(t.response.headers))),Promise.reject(t)}))}const Dr=e=>e instanceof wr?e.toJSON():e;function Ir(e,t){t=t||{};const n={};function r(e,t,n){return Zn.isPlainObject(e)&&Zn.isPlainObject(t)?Zn.merge.call({caseless:n},e,t):Zn.isPlainObject(t)?Zn.merge({},t):Zn.isArray(t)?t.slice():t}function o(e,t,n){return Zn.isUndefined(t)?Zn.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function a(e,t){if(!Zn.isUndefined(t))return r(void 0,t)}function i(e,t){return Zn.isUndefined(t)?Zn.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,a){return a in t?r(n,o):a in e?r(void 0,n):void 0}const c={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t)=>o(Dr(e),Dr(t),!0)};return Zn.forEach(Object.keys(Object.assign({},e,t)),(function(r){const a=c[r]||o,i=a(e[r],t[r],r);Zn.isUndefined(i)&&a!==l||(n[r]=i)})),n}const Mr={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Mr[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Rr={};Mr.transitional=function(e,t,n){function r(e,t){return"[Axios v1.6.2] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,a)=>{if(!1===e)throw new Wn(r(o," has been removed"+(t?" in "+t:"")),Wn.ERR_DEPRECATED);return t&&!Rr[o]&&(Rr[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,a)}};const zr={assertOptions:function(e,t,n){if("object"!=typeof e)throw new Wn("options must be an object",Wn.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const a=r[o],i=t[a];if(i){const t=e[a],n=void 0===t||i(t,a,e);if(!0!==n)throw new Wn("option "+a+" must be "+n,Wn.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new Wn("Unknown option "+a,Wn.ERR_BAD_OPTION)}},validators:Mr},Gr=zr.validators;class Zr{constructor(e){this.defaults=e,this.interceptors={request:new or,response:new or}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Ir(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&zr.assertOptions(n,{silentJSONParsing:Gr.transitional(Gr.boolean),forcedJSONParsing:Gr.transitional(Gr.boolean),clarifyTimeoutError:Gr.transitional(Gr.boolean)},!1),null!=r&&(Zn.isFunction(r)?t.paramsSerializer={serialize:r}:zr.assertOptions(r,{encode:Gr.function,serialize:Gr.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let a=o&&Zn.merge(o.common,o[t.method]);o&&Zn.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=wr.concat(a,o);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const c=[];let u;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let s,f=0;if(!l){const e=[_r.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,c),s=e.length,u=Promise.resolve(t);f<s;)u=u.then(e[f++],e[f++]);return u}s=i.length;let h=t;for(f=0;f<s;){const e=i[f++],t=i[f++];try{h=e(h)}catch(e){t.call(this,e);break}}try{u=_r.call(this,h)}catch(e){return Promise.reject(e)}for(f=0,s=c.length;f<s;)u=u.then(c[f++],c[f++]);return u}getUri(e){return rr(Br((e=Ir(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}Zn.forEach(["delete","get","head","options"],(function(e){Zr.prototype[e]=function(t,n){return this.request(Ir(n||{},{method:e,url:t,data:(n||{}).data}))}})),Zn.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(Ir(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Zr.prototype[e]=t(),Zr.prototype[e+"Form"]=t(!0)}));const $r=Zr;class Ur{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new Sr(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new Ur((function(t){e=t})),cancel:e}}}const Hr=Ur,Wr={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Wr).forEach((([e,t])=>{Wr[t]=e}));const Yr=Wr,Vr=function e(t){const n=new $r(t),r=cn($r.prototype.request,n);return Zn.extend(r,$r.prototype,n,{allOwnKeys:!0}),Zn.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(Ir(t,n))},r}(pr);Vr.Axios=$r,Vr.CanceledError=Sr,Vr.CancelToken=Hr,Vr.isCancel=Ar,Vr.VERSION="1.6.2",Vr.toFormData=Xn,Vr.AxiosError=Wn,Vr.Cancel=Vr.CanceledError,Vr.all=function(e){return Promise.all(e)},Vr.spread=function(e){return function(t){return e.apply(null,t)}},Vr.isAxiosError=function(e){return Zn.isObject(e)&&!0===e.isAxiosError},Vr.mergeConfig=Ir,Vr.AxiosHeaders=wr,Vr.formToJSON=e=>hr(Zn.isHTMLForm(e)?new FormData(e):e),Vr.getAdapter=Nr,Vr.HttpStatusCode=Yr,Vr.default=Vr;const qr=Vr;function Kr(e){return Kr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Kr(e)}function Xr(){Xr=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Kr(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Kr(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Qr(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Jr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return eo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?eo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const to=function(){var e=Jr((0,t.useState)(null),2),n=(e[0],e[1]),r=Jr((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=Xr().mark((function e(){var t,r;return Xr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,qr.get("https://api.api-ninjas.com/v1/facts?limit=3",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,r=t.data,console.log("rezultat cinjenica",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Qr(a,r,o,i,l,"next",e)}function l(e){Qr(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("div",{className:"facts"},t.createElement("table",{className:"table"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement("h2",null,"WELCOME"),t.createElement("h3",null,"Random Facts:")))),t.createElement("tbody",null,o.map((function(e){return t.createElement("tr",{key:e.fact},t.createElement("td",null,e.fact))})),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null)))))))};var no={cm:!0,mm:!0,in:!0,px:!0,pt:!0,pc:!0,em:!0,ex:!0,ch:!0,rem:!0,vw:!0,vh:!0,vmin:!0,vmax:!0,"%":!0};function ro(e){var t=function(e){if("number"==typeof e)return{value:e,unit:"px"};var t,n=(e.match(/^[0-9.]*/)||"").toString();t=n.includes(".")?parseFloat(n):parseInt(n,10);var r=(e.match(/[^0-9]*$/)||"").toString();return no[r]?{value:t,unit:r}:(console.warn("React Spinners: ".concat(e," is not a valid css value. Defaulting to ").concat(t,"px.")),{value:t,unit:"px"})}(e);return"".concat(t.value).concat(t.unit)}var oo=function(e,t,n){var r="react-spinners-".concat(e,"-").concat(n);if("undefined"==typeof window||!window.document)return r;var o=document.createElement("style");document.head.appendChild(o);var a=o.sheet,i="\n    @keyframes ".concat(r," {\n      ").concat(t,"\n    }\n  ");return a&&a.insertRule(i,0),r},ao=function(){return ao=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ao.apply(this,arguments)},io=[oo("PuffLoader","0% {transform: scale(0)} 100% {transform: scale(1.0)}","puff-1"),oo("PuffLoader","0% {opacity: 1} 100% {opacity: 0}","puff-2")];const lo=function(e){var n=e.loading,r=void 0===n||n,o=e.color,a=void 0===o?"#000000":o,i=e.speedMultiplier,l=void 0===i?1:i,c=e.cssOverride,u=void 0===c?{}:c,s=e.size,f=void 0===s?60:s,h=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["loading","color","speedMultiplier","cssOverride","size"]),d=ao({display:"inherit",position:"relative",width:ro(f),height:ro(f)},u),p=function(e){return{position:"absolute",height:ro(f),width:ro(f),border:"thick solid ".concat(a),borderRadius:"50%",opacity:"1",top:"0",left:"0",animationFillMode:"both",animation:"".concat(io[0],", ").concat(io[1]),animationDuration:"".concat(2/l,"s"),animationIterationCount:"infinite",animationTimingFunction:"cubic-bezier(0.165, 0.84, 0.44, 1), cubic-bezier(0.3, 0.61, 0.355, 1)",animationDelay:1===e?"-1s":"0s"}};return r?t.createElement("span",ao({style:d},h),t.createElement("span",{style:p(1)}),t.createElement("span",{style:p(2)})):null},co=function(){return t.createElement("div",{className:"loader"},t.createElement(lo,{size:"170px",color:"dodgerblue",speedMultiplier:"0.3"}))};function uo(e){return uo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},uo(e)}function so(){so=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==uo(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(uo(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function fo(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function ho(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return po(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?po(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function po(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const mo=function(){var e=ho((0,t.useState)(null),2),n=(e[0],e[1]),r=ho((0,t.useState)([]),2),o=r[0],a=r[1],i=ho((0,t.useState)([]),2),l=i[0],c=i[1],u=ho((0,t.useState)([]),2),s=u[0],f=u[1],h=ho((0,t.useState)(!0),2),d=h[0],p=h[1],m=Nt();(0,t.useEffect)((function(){y()}),[]),console.log("quotes");var y=function(){var e,t=(e=so().mark((function e(){var t,r,o,i,l,u,s,h;return so().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/quotes?all",r="https://api.api-ninjas.com/v1/quotes?all",e.prev=3,e.next=6,qr.get("https://api.api-ninjas.com/v1/quotes?all",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 6:return o=e.sent,e.next=9,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 9:return i=e.sent,e.next=12,qr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 12:l=e.sent,u=o.data,s=i.data,h=l.data,console.log("rezultat quotes",u),a(u[0]),c(s[0]),f(h[0]),p(!1),e.next=26;break;case 23:e.prev=23,e.t0=e.catch(3),n(e.t0);case 26:case"end":return e.stop()}}),e,null,[[3,23]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){fo(a,r,o,i,l,"next",e)}function l(e){fo(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),v=function(e){console.log("klik na personu iz quotes",e);var t="/historyPerson/".concat(e);m(t)};return d?t.createElement(co,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"facts"},t.createElement("div",{className:"table"},t.createElement("h3",null,"Random Quotes:"),t.createElement("p",{className:"category"},o.category),t.createElement("p",null,o.quote),t.createElement("p",{className:"author",onClick:function(){return v(o.author)}},o.author)),t.createElement("div",{className:"table"},t.createElement("p",{className:"category"},l.category),t.createElement("p",null,l.quote),t.createElement("p",{className:"author",onClick:function(){return v(l.author)}},l.author)),t.createElement("div",{className:"table"},t.createElement("p",{className:"category"},s.category),t.createElement("p",null,s.quote),t.createElement("p",{className:"author",onClick:function(){return v(s.author)}},s.author),t.createElement("hr",null))))},yo=function(){return t.createElement(t.Fragment,null,t.createElement("div",{className:"slika"},t.createElement(to,null),t.createElement(mo,null)))},vo=function(){return t.createElement("div",{className:"footer"},t.createElement("hr",null),"Interval ©®")},go=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function bo(e){return(0,Ce.Z)("MuiPaper",e)}(0,ue.Z)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const xo=["className","component","elevation","square","variant"],wo=(0,Z.ZP)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>{var n;return(0,E.Z)({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&(0,E.Z)({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${(0,G.Fq)("#fff",go(t.elevation))}, ${(0,G.Fq)("#fff",go(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))})),Eo=t.forwardRef((function(e,t){const n=(0,$.Z)({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:a=1,square:i=!1,variant:l="elevation"}=n,c=(0,A.Z)(n,xo),u=(0,E.Z)({},n,{component:o,elevation:a,square:i,variant:l}),s=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e,a={root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]};return(0,z.Z)(a,bo,o)})(u);return(0,B.jsx)(wo,(0,E.Z)({as:o,ownerState:u,className:(0,M.Z)(s.root,r),ref:t},c))}));var Ao=o(1387),Co=o(3703),So=o(4161),ko=o(3546),Bo=o(9336);const Lo=["onChange","maxRows","minRows","style","value"];function Fo(e){return parseInt(e,10)||0}const Oo={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function jo(e){return null==e||0===Object.keys(e).length||0===e.outerHeightStyle&&!e.overflow}const Po=t.forwardRef((function(e,n){const{onChange:r,maxRows:o,minRows:a=1,style:i,value:l}=e,c=(0,A.Z)(e,Lo),{current:u}=t.useRef(null!=l),s=t.useRef(null),f=(0,Co.Z)(n,s),h=t.useRef(null),d=t.useRef(0),[p,m]=t.useState({outerHeightStyle:0}),y=t.useCallback((()=>{const t=s.current,n=(0,So.Z)(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0};const r=h.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const i=n.boxSizing,l=Fo(n.paddingBottom)+Fo(n.paddingTop),c=Fo(n.borderBottomWidth)+Fo(n.borderTopWidth),u=r.scrollHeight;r.value="x";const f=r.scrollHeight;let d=u;return a&&(d=Math.max(Number(a)*f,d)),o&&(d=Math.min(Number(o)*f,d)),d=Math.max(d,f),{outerHeightStyle:d+("border-box"===i?l+c:0),overflow:Math.abs(d-u)<=1}}),[o,a,e.placeholder]),v=(e,t)=>{const{outerHeightStyle:n,overflow:r}=t;return d.current<20&&(n>0&&Math.abs((e.outerHeightStyle||0)-n)>1||e.overflow!==r)?(d.current+=1,{overflow:r,outerHeightStyle:n}):e},g=t.useCallback((()=>{const e=y();jo(e)||m((t=>v(t,e)))}),[y]);return(0,ko.Z)((()=>{const e=()=>{d.current=0,(()=>{const e=y();jo(e)||Ze.flushSync((()=>{m((t=>v(t,e)))}))})()};const t=(0,Bo.Z)(e),n=s.current,r=(0,So.Z)(n);let o;return r.addEventListener("resize",t),"undefined"!=typeof ResizeObserver&&(o=new ResizeObserver(e),o.observe(n)),()=>{t.clear(),cancelAnimationFrame(undefined),r.removeEventListener("resize",t),o&&o.disconnect()}}),[y]),(0,ko.Z)((()=>{g()})),t.useEffect((()=>{d.current=0}),[l]),(0,B.jsxs)(t.Fragment,{children:[(0,B.jsx)("textarea",(0,E.Z)({value:l,onChange:e=>{d.current=0,u||g(),r&&r(e)},ref:f,rows:a,style:(0,E.Z)({height:p.outerHeightStyle,overflow:p.overflow?"hidden":void 0},i)},c)),(0,B.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:h,tabIndex:-1,style:(0,E.Z)({},Oo,i,{paddingTop:0,paddingBottom:0})})]})}));function No(e){return"string"==typeof e}const To=t.createContext(void 0);var _o=o(8974);function Do(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,B.jsx)(ie,{styles:r})}var Io=o(6682);const Mo=function({styles:e,themeId:t,defaultTheme:n={}}){const r=(0,Io.Z)(n),o="function"==typeof e?e(t&&r[t]||r):e;return(0,B.jsx)(Do,{styles:o})};var Ro=o(247);const zo=function(e){return(0,B.jsx)(Mo,(0,E.Z)({},e,{defaultTheme:Ro.Z,themeId:T.Z}))};function Go(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Zo(e){return(0,Ce.Z)("MuiInputBase",e)}const $o=(0,ue.Z)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),Uo=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],Ho=(0,Z.ZP)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${(0,Oe.Z)(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]}})((({theme:e,ownerState:t})=>(0,E.Z)({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${$o.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&(0,E.Z)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),Wo=(0,Z.ZP)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=(0,E.Z)({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),o={opacity:"0 !important"},a=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return(0,E.Z)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${$o.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},[`&.${$o.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),Yo=(0,B.jsx)(zo,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),Vo=t.forwardRef((function(e,n){var r;const o=(0,$.Z)({props:e,name:"MuiInputBase"}),{"aria-describedby":a,autoComplete:i,autoFocus:l,className:c,components:u={},componentsProps:s={},defaultValue:f,disabled:h,disableInjectingGlobalStyles:d,endAdornment:p,fullWidth:m=!1,id:y,inputComponent:v="input",inputProps:g={},inputRef:b,maxRows:x,minRows:w,multiline:C=!1,name:S,onBlur:k,onChange:L,onClick:F,onFocus:O,onKeyDown:j,onKeyUp:P,placeholder:N,readOnly:T,renderSuffix:_,rows:D,slotProps:I={},slots:R={},startAdornment:G,type:Z="text",value:H}=o,W=(0,A.Z)(o,Uo),Y=null!=g.value?g.value:H,{current:V}=t.useRef(null!=Y),q=t.useRef(),K=t.useCallback((e=>{}),[]),X=(0,U.Z)(q,b,g.ref,K),[Q,J]=t.useState(!1),ee=t.useContext(To),te=function({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}({props:o,muiFormControl:ee,states:["color","disabled","error","hiddenLabel","size","required","filled"]});te.focused=ee?ee.focused:Q,t.useEffect((()=>{!ee&&h&&Q&&(J(!1),k&&k())}),[ee,h,Q,k]);const ne=ee&&ee.onFilled,re=ee&&ee.onEmpty,oe=t.useCallback((e=>{!function(e,t=!1){return e&&(Go(e.value)&&""!==e.value||t&&Go(e.defaultValue)&&""!==e.defaultValue)}(e)?re&&re():ne&&ne()}),[ne,re]);(0,_o.Z)((()=>{V&&oe({value:Y})}),[Y,oe,V]),t.useEffect((()=>{oe(q.current)}),[]);let ae=v,ie=g;C&&"input"===ae&&(ie=D?(0,E.Z)({type:void 0,minRows:D,maxRows:D},ie):(0,E.Z)({type:void 0,maxRows:x,minRows:w},ie),ae=Po),t.useEffect((()=>{ee&&ee.setAdornedStart(Boolean(G))}),[ee,G]);const le=(0,E.Z)({},o,{color:te.color||"primary",disabled:te.disabled,endAdornment:p,error:te.error,focused:te.focused,formControl:ee,fullWidth:m,hiddenLabel:te.hiddenLabel,multiline:C,size:te.size,startAdornment:G,type:Z}),ce=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:a,focused:i,formControl:l,fullWidth:c,hiddenLabel:u,multiline:s,readOnly:f,size:h,startAdornment:d,type:p}=e,m={root:["root",`color${(0,Oe.Z)(n)}`,r&&"disabled",o&&"error",c&&"fullWidth",i&&"focused",l&&"formControl",h&&"medium"!==h&&`size${(0,Oe.Z)(h)}`,s&&"multiline",d&&"adornedStart",a&&"adornedEnd",u&&"hiddenLabel",f&&"readOnly"],input:["input",r&&"disabled","search"===p&&"inputTypeSearch",s&&"inputMultiline","small"===h&&"inputSizeSmall",u&&"inputHiddenLabel",d&&"inputAdornedStart",a&&"inputAdornedEnd",f&&"readOnly"]};return(0,z.Z)(m,Zo,t)})(le),ue=R.root||u.Root||Ho,se=I.root||s.root||{},fe=R.input||u.Input||Wo;return ie=(0,E.Z)({},ie,null!=(r=I.input)?r:s.input),(0,B.jsxs)(t.Fragment,{children:[!d&&Yo,(0,B.jsxs)(ue,(0,E.Z)({},se,!No(ue)&&{ownerState:(0,E.Z)({},le,se.ownerState)},{ref:n,onClick:e=>{q.current&&e.currentTarget===e.target&&q.current.focus(),F&&F(e)}},W,{className:(0,M.Z)(ce.root,se.className,c,T&&"MuiInputBase-readOnly"),children:[G,(0,B.jsx)(To.Provider,{value:null,children:(0,B.jsx)(fe,(0,E.Z)({ownerState:le,"aria-invalid":te.error,"aria-describedby":a,autoComplete:i,autoFocus:l,defaultValue:f,disabled:te.disabled,id:y,onAnimationStart:e=>{oe("mui-auto-fill-cancel"===e.animationName?q.current:{value:"x"})},name:S,placeholder:N,readOnly:T,required:te.required,rows:D,value:Y,onKeyDown:j,onKeyUp:P,type:Z},ie,!No(fe)&&{as:ae,ownerState:(0,E.Z)({},le,ie.ownerState)},{ref:X,className:(0,M.Z)(ce.input,ie.className,T&&"MuiInputBase-readOnly"),onBlur:e=>{k&&k(e),g.onBlur&&g.onBlur(e),ee&&ee.onBlur?ee.onBlur(e):J(!1)},onChange:(e,...t)=>{if(!V){const t=e.target||q.current;if(null==t)throw new Error((0,Ao.Z)(1));oe({value:t.value})}g.onChange&&g.onChange(e,...t),L&&L(e,...t)},onFocus:e=>{te.disabled?e.stopPropagation():(O&&O(e),g.onFocus&&g.onFocus(e),ee&&ee.onFocus?ee.onFocus(e):J(!0))}}))}),p,_?_((0,E.Z)({},te,{startAdornment:G})):null]}))]})}));function qo(e){return(0,Ce.Z)("MuiIconButton",e)}const Ko=(0,ue.Z)("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),Xo=["edge","children","className","color","disabled","disableFocusRipple","size"],Qo=(0,Z.ZP)(Fe,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t[`color${(0,Oe.Z)(n.color)}`],n.edge&&t[`edge${(0,Oe.Z)(n.edge)}`],t[`size${(0,Oe.Z)(n.size)}`]]}})((({theme:e,ownerState:t})=>(0,E.Z)({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,G.Fq)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>{var n;const r=null==(n=(e.vars||e).palette)?void 0:n[t.color];return(0,E.Z)({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&(0,E.Z)({color:null==r?void 0:r.main},!t.disableRipple&&{"&:hover":(0,E.Z)({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,G.Fq)(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${Ko.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),Jo=t.forwardRef((function(e,t){const n=(0,$.Z)({props:e,name:"MuiIconButton"}),{edge:r=!1,children:o,className:a,color:i="default",disabled:l=!1,disableFocusRipple:c=!1,size:u="medium"}=n,s=(0,A.Z)(n,Xo),f=(0,E.Z)({},n,{edge:r,color:i,disabled:l,disableFocusRipple:c,size:u}),h=(e=>{const{classes:t,disabled:n,color:r,edge:o,size:a}=e,i={root:["root",n&&"disabled","default"!==r&&`color${(0,Oe.Z)(r)}`,o&&`edge${(0,Oe.Z)(o)}`,`size${(0,Oe.Z)(a)}`]};return(0,z.Z)(i,qo,t)})(f);return(0,B.jsx)(Qo,(0,E.Z)({className:(0,M.Z)(h.root,a),centerRipple:!0,focusRipple:!c,disabled:l,ref:t,ownerState:f},s,{children:o}))})),ea=t.createContext({searchStringValue:"",setSearchStringFn:function(){}}),ta={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M824.2 699.9a301.55 301.55 0 00-86.4-60.4C783.1 602.8 812 546.8 812 484c0-110.8-92.4-201.7-203.2-200-109.1 1.7-197 90.6-197 200 0 62.8 29 118.8 74.2 155.5a300.95 300.95 0 00-86.4 60.4C345 754.6 314 826.8 312 903.8a8 8 0 008 8.2h56c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5A226.62 226.62 0 01612 684c60.9 0 118.2 23.7 161.3 66.8C814.5 792 838 846.3 840 904.3c.1 4.3 3.7 7.7 8 7.7h56a8 8 0 008-8.2c-2-77-33-149.2-87.8-203.9zM612 612c-34.2 0-66.4-13.3-90.5-37.5a126.86 126.86 0 01-37.5-91.8c.3-32.8 13.4-64.5 36.3-88 24-24.6 56.1-38.3 90.4-38.7 33.9-.3 66.8 12.9 91 36.6 24.8 24.3 38.4 56.8 38.4 91.4 0 34.2-13.3 66.3-37.5 90.5A127.3 127.3 0 01612 612zM361.5 510.4c-.9-8.7-1.4-17.5-1.4-26.4 0-15.9 1.5-31.4 4.3-46.5.7-3.6-1.2-7.3-4.5-8.8-13.6-6.1-26.1-14.5-36.9-25.1a127.54 127.54 0 01-38.7-95.4c.9-32.1 13.8-62.6 36.3-85.6 24.7-25.3 57.9-39.1 93.2-38.7 31.9.3 62.7 12.6 86 34.4 7.9 7.4 14.7 15.6 20.4 24.4 2 3.1 5.9 4.4 9.3 3.2 17.6-6.1 36.2-10.4 55.3-12.4 5.6-.6 8.8-6.6 6.3-11.6-32.5-64.3-98.9-108.7-175.7-109.9-110.9-1.7-203.3 89.2-203.3 199.9 0 62.8 28.9 118.8 74.2 155.5-31.8 14.7-61.1 35-86.5 60.4-54.8 54.7-85.8 126.9-87.8 204a8 8 0 008 8.2h56.1c4.3 0 7.9-3.4 8-7.7 1.9-58 25.4-112.3 66.7-153.5 29.4-29.4 65.4-49.8 104.7-59.7 3.9-1 6.5-4.7 6-8.7z"}}]},name:"team",theme:"outlined"};function na(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ra(e,t){if(e){if("string"==typeof e)return na(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?na(e,t):void 0}}function oa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||ra(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function aa(e){return aa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},aa(e)}function ia(e){var t=function(e,t){if("object"!==aa(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==aa(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===aa(t)?t:String(t)}function la(e,t,n){return(t=ia(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ca(e,t){if(null==e)return{};var n,r,o=(0,A.Z)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ua=o(4184),sa=o.n(ua);function fa(e,t){(function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var n=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=360===t?e:Math.min(t,Math.max(0,parseFloat(e))),n&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:e=360===t?(e<0?e%t+t:e%t)/parseFloat(String(t)):e%t/parseFloat(String(t))}function ha(e){return Math.min(1,Math.max(0,e))}function da(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function pa(e){return e<=1?"".concat(100*Number(e),"%"):e}function ma(e){return 1===e.length?"0"+e:String(e)}function ya(e,t,n){e=fa(e,255),t=fa(t,255),n=fa(n,255);var r=Math.max(e,t,n),o=Math.min(e,t,n),a=0,i=0,l=(r+o)/2;if(r===o)i=0,a=0;else{var c=r-o;switch(i=l>.5?c/(2-r-o):c/(r+o),r){case e:a=(t-n)/c+(t<n?6:0);break;case t:a=(n-e)/c+2;break;case n:a=(e-t)/c+4}a/=6}return{h:a,s:i,l}}function va(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*n*(t-e):n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function ga(e,t,n){e=fa(e,255),t=fa(t,255),n=fa(n,255);var r=Math.max(e,t,n),o=Math.min(e,t,n),a=0,i=r,l=r-o,c=0===r?0:l/r;if(r===o)a=0;else{switch(r){case e:a=(t-n)/l+(t<n?6:0);break;case t:a=(n-e)/l+2;break;case n:a=(e-t)/l+4}a/=6}return{h:a,s:c,v:i}}function ba(e,t,n,r){var o=[ma(Math.round(e).toString(16)),ma(Math.round(t).toString(16)),ma(Math.round(n).toString(16))];return r&&o[0].startsWith(o[0].charAt(1))&&o[1].startsWith(o[1].charAt(1))&&o[2].startsWith(o[2].charAt(1))?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0):o.join("")}function xa(e){return wa(e)/255}function wa(e){return parseInt(e,16)}var Ea={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function Aa(e){var t,n,r,o={r:0,g:0,b:0},a=1,i=null,l=null,c=null,u=!1,s=!1;return"string"==typeof e&&(e=function(e){if(0===(e=e.trim().toLowerCase()).length)return!1;var t=!1;if(Ea[e])e=Ea[e],t=!0;else if("transparent"===e)return{r:0,g:0,b:0,a:0,format:"name"};var n=Ba.rgb.exec(e);return n?{r:n[1],g:n[2],b:n[3]}:(n=Ba.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=Ba.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=Ba.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=Ba.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=Ba.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=Ba.hex8.exec(e))?{r:wa(n[1]),g:wa(n[2]),b:wa(n[3]),a:xa(n[4]),format:t?"name":"hex8"}:(n=Ba.hex6.exec(e))?{r:wa(n[1]),g:wa(n[2]),b:wa(n[3]),format:t?"name":"hex"}:(n=Ba.hex4.exec(e))?{r:wa(n[1]+n[1]),g:wa(n[2]+n[2]),b:wa(n[3]+n[3]),a:xa(n[4]+n[4]),format:t?"name":"hex8"}:!!(n=Ba.hex3.exec(e))&&{r:wa(n[1]+n[1]),g:wa(n[2]+n[2]),b:wa(n[3]+n[3]),format:t?"name":"hex"}}(e)),"object"==typeof e&&(La(e.r)&&La(e.g)&&La(e.b)?(t=e.r,n=e.g,r=e.b,o={r:255*fa(t,255),g:255*fa(n,255),b:255*fa(r,255)},u=!0,s="%"===String(e.r).substr(-1)?"prgb":"rgb"):La(e.h)&&La(e.s)&&La(e.v)?(i=pa(e.s),l=pa(e.v),o=function(e,t,n){e=6*fa(e,360),t=fa(t,100),n=fa(n,100);var r=Math.floor(e),o=e-r,a=n*(1-t),i=n*(1-o*t),l=n*(1-(1-o)*t),c=r%6;return{r:255*[n,i,a,a,l,n][c],g:255*[l,n,n,i,a,a][c],b:255*[a,a,l,n,n,i][c]}}(e.h,i,l),u=!0,s="hsv"):La(e.h)&&La(e.s)&&La(e.l)&&(i=pa(e.s),c=pa(e.l),o=function(e,t,n){var r,o,a;if(e=fa(e,360),t=fa(t,100),n=fa(n,100),0===t)o=n,a=n,r=n;else{var i=n<.5?n*(1+t):n+t-n*t,l=2*n-i;r=va(l,i,e+1/3),o=va(l,i,e),a=va(l,i,e-1/3)}return{r:255*r,g:255*o,b:255*a}}(e.h,i,c),u=!0,s="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(a=e.a)),a=da(a),{ok:u,format:e.format||s,r:Math.min(255,Math.max(o.r,0)),g:Math.min(255,Math.max(o.g,0)),b:Math.min(255,Math.max(o.b,0)),a}}var Ca="(?:".concat("[-\\+]?\\d*\\.\\d+%?",")|(?:").concat("[-\\+]?\\d+%?",")"),Sa="[\\s|\\(]+(".concat(Ca,")[,|\\s]+(").concat(Ca,")[,|\\s]+(").concat(Ca,")\\s*\\)?"),ka="[\\s|\\(]+(".concat(Ca,")[,|\\s]+(").concat(Ca,")[,|\\s]+(").concat(Ca,")[,|\\s]+(").concat(Ca,")\\s*\\)?"),Ba={CSS_UNIT:new RegExp(Ca),rgb:new RegExp("rgb"+Sa),rgba:new RegExp("rgba"+ka),hsl:new RegExp("hsl"+Sa),hsla:new RegExp("hsla"+ka),hsv:new RegExp("hsv"+Sa),hsva:new RegExp("hsva"+ka),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function La(e){return Boolean(Ba.CSS_UNIT.exec(String(e)))}var Fa=2,Oa=.16,ja=.05,Pa=.05,Na=.15,Ta=5,_a=4,Da=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function Ia(e){var t=ga(e.r,e.g,e.b);return{h:360*t.h,s:t.s,v:t.v}}function Ma(e){var t=e.r,n=e.g,r=e.b;return"#".concat(ba(t,n,r,!1))}function Ra(e,t,n){var r;return(r=Math.round(e.h)>=60&&Math.round(e.h)<=240?n?Math.round(e.h)-Fa*t:Math.round(e.h)+Fa*t:n?Math.round(e.h)+Fa*t:Math.round(e.h)-Fa*t)<0?r+=360:r>=360&&(r-=360),r}function za(e,t,n){return 0===e.h&&0===e.s?e.s:((r=n?e.s-Oa*t:t===_a?e.s+Oa:e.s+ja*t)>1&&(r=1),n&&t===Ta&&r>.1&&(r=.1),r<.06&&(r=.06),Number(r.toFixed(2)));var r}function Ga(e,t,n){var r;return(r=n?e.v+Pa*t:e.v-Na*t)>1&&(r=1),Number(r.toFixed(2))}function Za(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[],r=Aa(e),o=Ta;o>0;o-=1){var a=Ia(r),i=Ma(Aa({h:Ra(a,o,!0),s:za(a,o,!0),v:Ga(a,o,!0)}));n.push(i)}n.push(Ma(r));for(var l=1;l<=_a;l+=1){var c=Ia(r),u=Ma(Aa({h:Ra(c,l),s:za(c,l),v:Ga(c,l)}));n.push(u)}return"dark"===t.theme?Da.map((function(e){var r,o,a,i=e.index,l=e.opacity;return Ma((r=Aa(t.backgroundColor||"#141414"),a=100*l/100,{r:((o=Aa(n[i])).r-r.r)*a+r.r,g:(o.g-r.g)*a+r.g,b:(o.b-r.b)*a+r.b}))})):n}var $a={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1677FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},Ua={},Ha={};Object.keys($a).forEach((function(e){Ua[e]=Za($a[e]),Ua[e].primary=Ua[e][5],Ha[e]=Za($a[e],{theme:"dark",backgroundColor:"#141414"}),Ha[e].primary=Ha[e][5]})),Ua.red,Ua.volcano,Ua.gold,Ua.orange,Ua.yellow,Ua.lime,Ua.green,Ua.cyan;var Wa=Ua.blue;Ua.geekblue,Ua.purple,Ua.magenta,Ua.grey,Ua.grey;const Ya=(0,t.createContext)({});function Va(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function qa(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Va(Object(n),!0).forEach((function(t){la(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Va(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ka(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}var Xa="data-rc-order",Qa="data-rc-priority",Ja="rc-util-key",ei=new Map;function ti(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).mark;return e?e.startsWith("data-")?e:"data-".concat(e):Ja}function ni(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function ri(e){return Array.from((ei.get(e)||e).children).filter((function(e){return"STYLE"===e.tagName}))}function oi(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!Ka())return null;var n=t.csp,r=t.prepend,o=t.priority,a=void 0===o?0:o,i=function(e){return"queue"===e?"prependQueue":e?"prepend":"append"}(r),l="prependQueue"===i,c=document.createElement("style");c.setAttribute(Xa,i),l&&a&&c.setAttribute(Qa,"".concat(a)),null!=n&&n.nonce&&(c.nonce=null==n?void 0:n.nonce),c.innerHTML=e;var u=ni(t),s=u.firstChild;if(r){if(l){var f=ri(u).filter((function(e){if(!["prepend","prependQueue"].includes(e.getAttribute(Xa)))return!1;var t=Number(e.getAttribute(Qa)||0);return a>=t}));if(f.length)return u.insertBefore(c,f[f.length-1].nextSibling),c}u.insertBefore(c,s)}else u.appendChild(c);return c}function ai(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return ri(ni(t)).find((function(n){return n.getAttribute(ti(t))===e}))}function ii(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=ai(e,t);n&&ni(t).removeChild(n)}function li(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){var n=ei.get(e);if(!n||!function(e,t){if(!e)return!1;if(e.contains)return e.contains(t);for(var n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}(document,n)){var r=oi("",t),o=r.parentNode;ei.set(e,o),e.removeChild(r)}}(ni(n),n);var r,o,a,i=ai(t,n);if(i)return null!==(r=n.csp)&&void 0!==r&&r.nonce&&i.nonce!==(null===(o=n.csp)||void 0===o?void 0:o.nonce)&&(i.nonce=null===(a=n.csp)||void 0===a?void 0:a.nonce),i.innerHTML!==e&&(i.innerHTML=e),i;var l=oi(e,n);return l.setAttribute(ti(n),t),l}function ci(e){var t;return null==e||null===(t=e.getRootNode)||void 0===t?void 0:t.call(e)}var ui={},si=[];function fi(e,t){}function hi(e,t){}function di(e,t,n){t||ui[n]||(e(!1,n),ui[n]=!0)}function pi(e,t){di(fi,e,t)}pi.preMessage=function(e){si.push(e)},pi.resetWarned=function(){ui={}},pi.noteOnce=function(e,t){di(hi,e,t)};const mi=pi;function yi(e){return"object"===aa(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===aa(e.icon)||"function"==typeof e.icon)}function vi(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){var r,o=e[n];return"class"===n?(t.className=o,delete t.class):(delete t[n],t[(r=n,r.replace(/-(.)/g,(function(e,t){return t.toUpperCase()})))]=o),t}),{})}function gi(e,n,r){return r?t.createElement(e.tag,qa(qa({key:n},vi(e.attrs)),r),(e.children||[]).map((function(t,r){return gi(t,"".concat(n,"-").concat(e.tag,"-").concat(r))}))):t.createElement(e.tag,qa({key:n},vi(e.attrs)),(e.children||[]).map((function(t,r){return gi(t,"".concat(n,"-").concat(e.tag,"-").concat(r))})))}function bi(e){return Za(e)[0]}function xi(e){return e?Array.isArray(e)?e:[e]:[]}var wi=["icon","className","onClick","style","primaryColor","secondaryColor"],Ei={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1},Ai=function(e){var n,r,o,a,i,l,c,u=e.icon,s=e.className,f=e.onClick,h=e.style,d=e.primaryColor,p=e.secondaryColor,m=ca(e,wi),y=t.useRef(),v=Ei;if(d&&(v={primaryColor:d,secondaryColor:p||bi(d)}),n=y,r=(0,t.useContext)(Ya),o=r.csp,a=r.prefixCls,i="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",a&&(i=i.replace(/anticon/g,a)),(0,t.useEffect)((function(){var e,t=function(e){return ci(e)instanceof ShadowRoot}(e=n.current)?ci(e):null;li(i,"@ant-design-icons",{prepend:!0,csp:o,attachTo:t})}),[]),l=yi(u),c="icon should be icon definiton, but got ".concat(u),mi(l,"[@ant-design/icons] ".concat(c)),!yi(u))return null;var g=u;return g&&"function"==typeof g.icon&&(g=qa(qa({},g),{},{icon:g.icon(v.primaryColor,v.secondaryColor)})),gi(g.icon,"svg-".concat(g.name),qa(qa({className:s,onClick:f,style:h,"data-icon":g.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},m),{},{ref:y}))};Ai.displayName="IconReact",Ai.getTwoToneColors=function(){return qa({},Ei)},Ai.setTwoToneColors=function(e){var t=e.primaryColor,n=e.secondaryColor;Ei.primaryColor=t,Ei.secondaryColor=n||bi(t),Ei.calculated=!!n};const Ci=Ai;function Si(e){var t=oa(xi(e),2),n=t[0],r=t[1];return Ci.setTwoToneColors({primaryColor:n,secondaryColor:r})}var ki=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];Si(Wa.primary);var Bi=t.forwardRef((function(e,n){var r,o=e.className,a=e.icon,i=e.spin,l=e.rotate,c=e.tabIndex,u=e.onClick,s=e.twoToneColor,f=ca(e,ki),h=t.useContext(Ya),d=h.prefixCls,p=void 0===d?"anticon":d,m=h.rootClassName,y=sa()(m,p,(la(r={},"".concat(p,"-").concat(a.name),!!a.name),la(r,"".concat(p,"-spin"),!!i||"loading"===a.name),r),o),v=c;void 0===v&&u&&(v=-1);var g=l?{msTransform:"rotate(".concat(l,"deg)"),transform:"rotate(".concat(l,"deg)")}:void 0,b=oa(xi(s),2),x=b[0],w=b[1];return t.createElement("span",(0,E.Z)({role:"img","aria-label":a.name},f,{ref:n,tabIndex:v,onClick:u,className:y}),t.createElement(Ci,{icon:a,primaryColor:x,secondaryColor:w,style:g}))}));Bi.displayName="AntdIcon",Bi.getTwoToneColor=function(){var e=Ci.getTwoToneColors();return e.calculated?[e.primaryColor,e.secondaryColor]:e.primaryColor},Bi.setTwoToneColor=Si;const Li=Bi;var Fi=function(e,n){return t.createElement(Li,(0,E.Z)({},e,{ref:n,icon:ta}))};const Oi=t.forwardRef(Fi),ji=function(e){var n=(0,t.useContext)(ea),r=Nt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga poznatih",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(Vo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Oi,null)))},Pi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm5.6-532.7c53 0 89 33.8 93 83.4.3 4.2 3.8 7.4 8 7.4h56.7c2.6 0 4.7-2.1 4.7-4.7 0-86.7-68.4-147.4-162.7-147.4C407.4 290 344 364.2 344 486.8v52.3C344 660.8 407.4 734 517.3 734c94 0 162.7-58.8 162.7-141.4 0-2.6-2.1-4.7-4.7-4.7h-56.8c-4.2 0-7.6 3.2-8 7.3-4.2 46.1-40.1 77.8-93 77.8-65.3 0-102.1-47.9-102.1-133.6v-52.6c.1-87 37-135.5 102.2-135.5z"}}]},name:"copyright",theme:"outlined"};var Ni=function(e,n){return t.createElement(Li,(0,E.Z)({},e,{ref:n,icon:Pi}))};const Ti=t.forwardRef(Ni),_i=function(e){var n=(0,t.useContext)(ea),r=Nt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("logo pretraga",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(Vo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Ti,null)))},Di={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"defs",attrs:{},children:[{tag:"style",attrs:{}}]},{tag:"path",attrs:{d:"M140 188h584v164h76V144c0-17.7-14.3-32-32-32H96c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h544v-76H140V188z"}},{tag:"path",attrs:{d:"M414.3 256h-60.6c-3.4 0-6.4 2.2-7.6 5.4L219 629.4c-.3.8-.4 1.7-.4 2.6 0 4.4 3.6 8 8 8h55.1c3.4 0 6.4-2.2 7.6-5.4L322 540h196.2L422 261.4a8.42 8.42 0 00-7.7-5.4zm12.4 228h-85.5L384 360.2 426.7 484zM936 528H800v-93c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v93H592c-13.3 0-24 10.7-24 24v176c0 13.3 10.7 24 24 24h136v152c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V752h136c13.3 0 24-10.7 24-24V552c0-13.3-10.7-24-24-24zM728 680h-88v-80h88v80zm160 0h-88v-80h88v80z"}}]},name:"translation",theme:"outlined"};var Ii=function(e,n){return t.createElement(Li,(0,E.Z)({},e,{ref:n,icon:Di}))};const Mi=t.forwardRef(Ii),Ri=function(e){var n=(0,t.useContext)(ea),r=Nt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("dictionary pretraga",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(Vo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Mi,null)))},zi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M536.1 273H488c-4.4 0-8 3.6-8 8v275.3c0 2.6 1.2 5 3.3 6.5l165.3 120.7c3.6 2.6 8.6 1.9 11.2-1.7l28.6-39c2.7-3.7 1.9-8.7-1.7-11.2L544.1 528.5V281c0-4.4-3.6-8-8-8zm219.8 75.2l156.8 38.3c5 1.2 9.9-2.6 9.9-7.7l.8-161.5c0-6.7-7.7-10.5-12.9-6.3L752.9 334.1a8 8 0 003 14.1zm167.7 301.1l-56.7-19.5a8 8 0 00-10.1 4.8c-1.9 5.1-3.9 10.1-6 15.1-17.8 42.1-43.3 80-75.9 112.5a353 353 0 01-112.5 75.9 352.18 352.18 0 01-137.7 27.8c-47.8 0-94.1-9.3-137.7-27.8a353 353 0 01-112.5-75.9c-32.5-32.5-58-70.4-75.9-112.5A353.44 353.44 0 01171 512c0-47.8 9.3-94.2 27.8-137.8 17.8-42.1 43.3-80 75.9-112.5a353 353 0 01112.5-75.9C430.6 167.3 477 158 524.8 158s94.1 9.3 137.7 27.8A353 353 0 01775 261.7c10.2 10.3 19.8 21 28.6 32.3l59.8-46.8C784.7 146.6 662.2 81.9 524.6 82 285 82.1 92.6 276.7 95 516.4 97.4 751.9 288.9 942 524.8 942c185.5 0 343.5-117.6 403.7-282.3 1.5-4.2-.7-8.9-4.9-10.4z"}}]},name:"history",theme:"outlined"};var Gi=function(e,n){return t.createElement(Li,(0,E.Z)({},e,{ref:n,icon:zi}))};const Zi=t.forwardRef(Gi),$i=function(e){var n=(0,t.useContext)(ea),r=Nt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("SearchHistory pretraga",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(Vo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Zi,null)))},Ui={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M928 161H699.2c-49.1 0-97.1 14.1-138.4 40.7L512 233l-48.8-31.3A255.2 255.2 0 00324.8 161H96c-17.7 0-32 14.3-32 32v568c0 17.7 14.3 32 32 32h228.8c49.1 0 97.1 14.1 138.4 40.7l44.4 28.6c1.3.8 2.8 1.3 4.3 1.3s3-.4 4.3-1.3l44.4-28.6C602 807.1 650.1 793 699.2 793H928c17.7 0 32-14.3 32-32V193c0-17.7-14.3-32-32-32zM324.8 721H136V233h188.8c35.4 0 69.8 10.1 99.5 29.2l48.8 31.3 6.9 4.5v462c-47.6-25.6-100.8-39-155.2-39zm563.2 0H699.2c-54.4 0-107.6 13.4-155.2 39V298l6.9-4.5 48.8-31.3c29.7-19.1 64.1-29.2 99.5-29.2H888v488zM396.9 361H211.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5zm223.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c0-4.1-3.2-7.5-7.1-7.5H627.1c-3.9 0-7.1 3.4-7.1 7.5zM396.9 501H211.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5zm416 0H627.1c-3.9 0-7.1 3.4-7.1 7.5v45c0 4.1 3.2 7.5 7.1 7.5h185.7c3.9 0 7.1-3.4 7.1-7.5v-45c.1-4.1-3.1-7.5-7-7.5z"}}]},name:"read",theme:"outlined"};var Hi=function(e,n){return t.createElement(Li,(0,E.Z)({},e,{ref:n,icon:Ui}))};const Wi=t.forwardRef(Hi),Yi=function(e){var n=(0,t.useContext)(ea),r=Nt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("SearchHistoryEvents pretraga",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(Vo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Wi,null)))},Vi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M858.5 763.6a374 374 0 00-80.6-119.5 375.63 375.63 0 00-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 00-80.6 119.5A371.7 371.7 0 00136 901.8a8 8 0 008 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 008-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z"}}]},name:"user",theme:"outlined"};var qi=function(e,n){return t.createElement(Li,(0,E.Z)({},e,{ref:n,icon:Vi}))};const Ki=t.forwardRef(qi),Xi=function(e){var n=(0,t.useContext)(ea),r=Nt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga istoriskih licnosti",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(Vo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(Ki,null)))},Qi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z"}}]},name:"question-circle",theme:"outlined"};var Ji=function(e,n){return t.createElement(Li,(0,E.Z)({},e,{ref:n,icon:Qi}))};const el=t.forwardRef(Ji),tl=function(e){var n=(0,t.useContext)(ea),r=Nt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga saveta",o)};return t.createElement(Eo,{className:"paper",component:"form",se:{p:"2px 4px",display:"flex",alignItems:"center",width:"40rem",fontSize:"28px",backgroundColor:"red"}},t.createElement(Vo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,sx:{p:"10px"},"aria-label":"search"},t.createElement(el,null)))},nl={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2zM304 456a88 88 0 100-176 88 88 0 000 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z"}}]},name:"picture",theme:"outlined"};var rl=function(e,n){return t.createElement(Li,(0,E.Z)({},e,{ref:n,icon:nl}))};const ol=t.forwardRef(rl),al=function(e){var n=(0,t.useContext)(ea),r=Nt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga metropolitan",o)};return t.createElement(Eo,{className:"paper",component:"form",se:{p:"2px 4px",display:"flex",alignItems:"center",width:"40rem",fontSize:"28px",backgroundColor:"red"}},t.createElement(Vo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,sx:{p:"10px"},"aria-label":"search"},t.createElement(ol,null)))},il={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M766.4 744.3c43.7 0 79.4-36.2 79.4-80.5 0-53.5-79.4-140.8-79.4-140.8S687 610.3 687 663.8c0 44.3 35.7 80.5 79.4 80.5zm-377.1-44.1c7.1 7.1 18.6 7.1 25.6 0l256.1-256c7.1-7.1 7.1-18.6 0-25.6l-256-256c-.6-.6-1.3-1.2-2-1.7l-78.2-78.2a9.11 9.11 0 00-12.8 0l-48 48a9.11 9.11 0 000 12.8l67.2 67.2-207.8 207.9c-7.1 7.1-7.1 18.6 0 25.6l255.9 256zm12.9-448.6l178.9 178.9H223.4l178.8-178.9zM904 816H120c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-80c0-4.4-3.6-8-8-8z"}}]},name:"bg-colors",theme:"outlined"};var ll=function(e,n){return t.createElement(Li,(0,E.Z)({},e,{ref:n,icon:il}))};const cl=t.forwardRef(ll),ul=function(e){var n=(0,t.useContext)(ea),r=Nt(),o=(0,t.useRef)(),a=function(){if(0===o.current.value.trim().length)return!1;n.setSearchStringFn(o.current.value.trim()),r(e.linkTo),console.log("pretraga boja",o)};return t.createElement(Eo,{className:"paper",component:"form"},t.createElement(Vo,{className:"base",autoFocus:!0,placeholder:e.placeholder,inputRef:o,onKeyDown:function(e){"Enter"===e.key&&(e.preventDefault(),a())}}),t.createElement(Jo,{type:"button",onClick:a,"aria-label":"search"},t.createElement(cl,null)))},sl=function(){return t.createElement("div",{className:"place"},t.createElement("div",{className:"search"},t.createElement(ji,{placeholder:"Celebrity",linkTo:"/poznati"}),t.createElement(_i,{placeholder:"Logo",linkTo:"/logo"}),t.createElement(ul,{placeholder:"Colors",linkTo:"/colorsSearch"}),t.createElement(Ri,{placeholder:"Word",linkTo:"/dictionary"}),t.createElement(tl,{placeholder:"Advice",linkTo:"/advice"}),t.createElement(al,{placeholder:"Metropolitan",linkTo:"/metropolitan"})),t.createElement("div",{className:"search"},t.createElement("h3",null,"Search History"),t.createElement($i,{placeholder:"Year",linkTo:"/history"}),t.createElement(Yi,{placeholder:"Events",linkTo:"/historyEvents"}),t.createElement(Xi,{placeholder:"Persons",linkTo:"/historyPerson"})))};var fl=o(813);function hl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function dl(){var e,n,r=(e=(0,t.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return hl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?hl(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];return(0,t.useEffect)((function(){var e=function(){window.pageYOffset>300?a(!0):a(!1)};return window.addEventListener("scroll",e),function(){window.removeEventListener("scroll",e)}}),[]),t.createElement("div",null,o&&t.createElement("span",null,t.createElement("div",{onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},className:"back-to-top"},t.createElement("div",{className:"arrowup"},t.createElement(fl.Z,null)))))}function pl(e){return pl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},pl(e)}function ml(){ml=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==pl(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(pl(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function yl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function vl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return gl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const bl=function(){var e=vl((0,t.useState)(null),2),n=(e[0],e[1]),r=vl((0,t.useState)([]),2),o=r[0],a=r[1],i=vl((0,t.useState)([]),2),l=i[0],c=i[1],u=vl((0,t.useState)([]),2),s=u[0],f=u[1],h=vl((0,t.useState)([]),2),d=h[0],p=h[1],m=vl((0,t.useState)(!0),2),y=m[0],v=m[1],g=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){b(g)}),[g]),console.log("iz resultLogo searchStringValue:",g);var b=function(){var e,t=(e=ml().mark((function e(t){var r,o,i,l,u,s;return ml().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/logo?name=".concat(t),o="https://autocomplete.clearbit.com/v1/companies/suggest?query=".concat(t),e.prev=2,e.next=5,qr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return i=e.sent,e.next=8,qr.get(o);case 8:l=e.sent,u=i.data,s=l.data,console.log("rezultat Logoa",u),console.log("drugi logo podaci",s),a(u),c(s),f(u.length),p(s.length),v(!1),e.next=23;break;case 20:e.prev=20,e.t0=e.catch(2),n(e.t0);case 23:case"end":return e.stop()}}),e,null,[[2,20]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){yl(a,r,o,i,l,"next",e)}function l(e){yl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return y?t.createElement(co,null):0==s&&0==d?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(_i,{placeholder:"Logo",linkTo:"/logo"}))),t.createElement("tr",null,t.createElement("th",{className:"history",colSpan:2},"Logo ",g)),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of Logo:",s+d))),o.map((function(e){return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.ticker)),t.createElement("tr",null,t.createElement("td",null,t.createElement("img",{className:"logoImg",src:e.image}))),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))})),l.map((function(e){return t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.domain,"   ")),t.createElement("tr",null,t.createElement("td",{className:"celebrity"},t.createElement("img",{src:e.logo,className:"logoImg",alt:"no picture"}))),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(dl,null))},xl=function(e){return t.createElement(t.Fragment,null,t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.dictRow.word)),t.createElement("tr",null,t.createElement("td",{className:"dictionary"},e.dictRow.definition)))},wl=function(e){return t.createElement(t.Fragment,null,t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.dictRow2.word+" "+e.dictRow2.phonetic)),e.dictRow2.phonetics.map((function(e){return t.createElement("tr",null,t.createElement("td",null,t.createElement("a",{href:e.audio,target:"_blank",className:"phonetics"},e.audio)))})),e.dictRow2.meanings.map((function(e){var n,r,o,a,i,l,c;return t.createElement(t.Fragment,null,e.definitions.map((function(e){return t.createElement("tr",null,t.createElement("td",null,e.definition,"         "))})),t.createElement("tr",null,t.createElement("td",{className:"nameComm"}," synonyms",t.createElement("ul",null,t.createElement("li",null,null===(n=e.synonyms)||void 0===n?void 0:n[0]),t.createElement("li",null,null===(r=e.synonyms)||void 0===r?void 0:r[1]),t.createElement("li",null,null===(o=e.synonyms)||void 0===o?void 0:o[2]),t.createElement("li",null,null===(a=e.synonyms)||void 0===a?void 0:a[3]),t.createElement("li",null,null===(i=e.synonyms)||void 0===i?void 0:i[5]),t.createElement("li",null,null===(l=e.synonyms)||void 0===l?void 0:l[6]),t.createElement("li",null,null===(c=e.synonyms)||void 0===c?void 0:c[7])))),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))})))};function El(e){return El="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},El(e)}function Al(){Al=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==El(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(El(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Cl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Sl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return kl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?kl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Bl=function(){var e=Sl((0,t.useState)(null),2),n=(e[0],e[1]),r=Sl((0,t.useState)([]),2),o=r[0],a=r[1],i=Sl((0,t.useState)([]),2),l=i[0],c=i[1],u=Sl((0,t.useState)([]),2),s=u[0],f=u[1],h=Sl((0,t.useState)([]),2),d=h[0],p=h[1],m=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){y(m)}),[m]),console.log("iz resultDictionary searchStringValue:",m);var y=function(){var e,t=(e=Al().mark((function e(t){var r,o,i,l,u,h;return Al().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/dictionary?word=".concat(t),o="https://api.dictionaryapi.dev/api/v2/entries/en/".concat(t),e.prev=2,e.next=5,qr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return i=e.sent,e.next=8,qr.get(o);case 8:l=e.sent,u=i.data,h=l.data,console.log("rezultat recnika",u),console.log("rezultat drugo recnika",h),a(u),c(h),f(u.length),p(h.length),console.log("prvi niz",s),console.log("drugi niz",d),e.next=24;break;case 21:e.prev=21,e.t0=e.catch(2),n(e.t0);case 24:case"end":return e.stop()}}),e,null,[[2,21]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Cl(a,r,o,i,l,"next",e)}function l(e){Cl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return 0==s&&0==d?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Ri,{placeholder:"Word",linkTo:"/dictionary"}))),t.createElement("tr",null,t.createElement("th",{className:"results"},"Word ",m))),t.createElement("tbody",null,t.createElement(xl,{dictRow:o}),l.map((function(e){return t.createElement(wl,{dictRow2:e})})))),t.createElement(dl,null))};function Ll(e){return Ll="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ll(e)}function Fl(){Fl=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Ll(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ll(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Ol(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function jl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Pl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Pl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Nl=function(){var e=jl((0,t.useState)(null),2),n=(e[0],e[1]),r=jl((0,t.useState)([]),2),o=r[0],a=r[1],i=jl((0,t.useState)([]),2),l=i[0],c=i[1],u=jl((0,t.useState)(!0),2),s=u[0],f=u[1],h=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){d(h)}),[h]),console.log("iz resultCelebs searchStringValue:",h);var d=function(){var e,t=(e=Fl().mark((function e(t){var r,o,i;return Fl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/celebrity?name=".concat(t),e.prev=1,e.next=4,qr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat poznatih",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ol(a,r,o,i,l,"next",e)}function l(e){Ol(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(co,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(ji,{placeholder:"Celebrity",linkTo:"/poznati"}))),t.createElement("tr",null,t.createElement("th",{className:"history",colSpan:2},"Celebrity ",h)),t.createElement("tr",null,t.createElement("th",{className:"results",colSpan:2},"Number of Celebrity: ",l))),o.map((function(e){var n,r,o,a,i,l,c,u,s,f,h,d,p;return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"navod"},"Name:"),t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Gender:"),t.createElement("td",{className:"nameComm"},e.gender)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Age:"),t.createElement("td",{className:"nameComm"},e.age)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Occupation:"),t.createElement("td",{className:"nameComm"},t.createElement("ul",null,t.createElement("li",null,null===(n=e.occupation)||void 0===n?void 0:n[0]),t.createElement("li",null,null===(r=e.occupation)||void 0===r?void 0:r[1]),t.createElement("li",null,null===(o=e.occupation)||void 0===o?void 0:o[2]),t.createElement("li",null,null===(a=e.occupation)||void 0===a?void 0:a[3]),t.createElement("li",null,null===(i=e.occupation)||void 0===i?void 0:i[4]),t.createElement("li",null,null===(l=e.occupation)||void 0===l?void 0:l[5]),t.createElement("li",null,null===(c=e.occupation)||void 0===c?void 0:c[6]),t.createElement("li",null,null===(u=e.occupation)||void 0===u?void 0:u[7]),t.createElement("li",null,null===(s=e.occupation)||void 0===s?void 0:s[8]),t.createElement("li",null,null===(f=e.occupation)||void 0===f?void 0:f[9]),t.createElement("li",null,null===(h=e.occupation)||void 0===h?void 0:h[10]),t.createElement("li",null,null===(d=e.occupation)||void 0===d?void 0:d[11]),t.createElement("li",null,null===(p=e.occupation)||void 0===p?void 0:p[12])))),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Birthday:"),t.createElement("td",{className:"nameComm"},e.birthday)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Death:"),t.createElement("td",{className:"nameComm"},e.death)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Nationality:"),t.createElement("td",{className:"celebrity"},e.nationality)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Height:"),t.createElement("td",{className:"nameComm"},e.height)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Net worth:"),t.createElement("td",{className:"networth"},e.net_worth)),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))))}))),t.createElement(dl,null))};function Tl(e){return Tl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tl(e)}function _l(){_l=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Tl(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Tl(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Dl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Il(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ml(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ml(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ml(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Rl=function(){var e=Il((0,t.useState)(null),2),n=(e[0],e[1]),r=Il((0,t.useState)([]),2),o=r[0],a=r[1],i=Il((0,t.useState)([]),2),l=i[0],c=i[1],u=Il((0,t.useState)(!0),2),s=u[0],f=u[1],h=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){d(h)}),[h]),console.log("iz resulthistory searchStringValue:",h);var d=function(){var e,t=(e=_l().mark((function e(t){var r,o,i;return _l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/historicalevents?year=".concat(t),e.prev=1,e.next=4,qr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat recnika",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Dl(a,r,o,i,l,"next",e)}function l(e){Dl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(co,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement($i,{placeholder:"Year",linkTo:"/history"}))),t.createElement("tr",null,t.createElement("th",{className:"history"},"Historical Year ",h)),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of History Events: ",l))),o.map((function(e){return t.createElement("tbody",{key:o.word},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.day+" "+e.month+" "+e.year)),t.createElement("tr",null,t.createElement("td",{className:"dictionary"},e.event)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(dl,null))};function zl(e){return zl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zl(e)}function Gl(){Gl=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==zl(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(zl(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Zl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function $l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ul(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ul(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ul(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Hl=function(){var e=$l((0,t.useState)(null),2),n=(e[0],e[1]),r=$l((0,t.useState)([]),2),o=r[0],a=r[1],i=$l((0,t.useState)([]),2),l=i[0],c=i[1],u=$l((0,t.useState)(!0),2),s=u[0],f=u[1],h=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){d(h)}),[h]),console.log("iz resulthistoryEvents searchStringValue:",h);var d=function(){var e,t=(e=Gl().mark((function e(t){var r,o,i;return Gl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/historicalevents?text=".concat(t),e.prev=1,e.next=4,qr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat recnika",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Zl(a,r,o,i,l,"next",e)}function l(e){Zl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return s?t.createElement(co,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement(Yi,{placeholder:"Events",linkTo:"/historyEvents"}))),t.createElement("tr",null,t.createElement("th",{className:"history"},"Historical Event ",h)),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of Event:",l))),o.map((function(e){return t.createElement("tbody",{key:o.word},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.day+" "+e.month+" "+e.year)),t.createElement("tr",null,t.createElement("td",{className:"dictionary"},e.event)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(dl,null))};function Wl(e){return Wl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wl(e)}function Yl(){Yl=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Wl(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Wl(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Vl(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function ql(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Xl=function(){var e=ql((0,t.useState)(null),2),n=(e[0],e[1]),r=ql((0,t.useState)([]),2),o=r[0],a=r[1],i=ql((0,t.useState)([]),2),l=i[0],c=i[1],u=ql((0,t.useState)(!0),2),s=u[0],f=u[1],h=Nt(),d=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){p(d)}),[d]),console.log("iz resultPerson searchStringValue:",d);var p=function(){var e,t=(e=Yl().mark((function e(t){var r,o,i;return Yl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.api-ninjas.com/v1/historicalfigures?name=".concat(t),e.prev=1,e.next=4,qr.get(r,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:o=e.sent,i=o.data,console.log("rezultat poznatih",i),a(i),c(i.length),f(!1),e.next=15;break;case 12:e.prev=12,e.t0=e.catch(1),n(e.t0);case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Vl(a,r,o,i,l,"next",e)}function l(e){Vl(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),m=function(e){var t="/historyPerson/".concat(e);h(t)};return s?t.createElement(co,null):0==l?t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement(sl,null),t.createElement("h2",{className:"history"},"Nothing found"))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Xi,{placeholder:"Persons",linkTo:"/historyPerson"}))),t.createElement("tr",null,t.createElement("th",{className:"history",colSpan:2},"Persons ",d)),t.createElement("tr",{className:"results"},t.createElement("th",{colSpan:2},"Number of Historyc persons: ",l))),o.map((function(e){return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"navod"},"Name:"),t.createElement("td",{className:"historyPerson",onClick:function(){return m(e.name)}},e.name)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Title:"),t.createElement("td",{className:"nameComm"},e.title)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Birthday:"),t.createElement("td",{className:"nameComm"},e.info.born)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Death:"),t.createElement("td",{className:"nameComm"},e.info.died)),t.createElement("tr",null,t.createElement("td",{colSpan:2,className:"more",onClick:function(){return m(e.name)}},"more...")),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))))}))),t.createElement(dl,null))};function Ql(e){return Ql="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ql(e)}function Jl(){Jl=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Ql(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ql(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ec(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function tc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return nc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const rc=function(e){var n=tc((0,t.useState)(null),2),r=(n[0],n[1]),o=tc((0,t.useState)([]),2),a=o[0],i=o[1],l=tc((0,t.useState)(!0),2),c=l[0],u=l[1],s=tc((0,t.useState)([]),2),f=s[0],h=s[1],d=Tt().personName;(0,t.useEffect)((function(){p()}),[]),console.log("iz detailsPerson params:",d);var p=function(){var e,t=(e=Jl().mark((function e(){var t,n,o,a,l,c;return Jl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/historicalfigures?name=".concat(d),n="https://api.api-ninjas.com/v1/celebrity?name=".concat(d),e.prev=2,e.next=5,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return o=e.sent,e.next=8,qr.get(n,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:a=e.sent,l=o.data,c=a.data,console.log("detalji istorijske persone",l),i(l),h(c),u(!1),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),r(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ec(a,r,o,i,l,"next",e)}function l(e){ec(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return c?t.createElement(co,null):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(Xi,{placeholder:"Persons",linkTo:"/historyPerson"})))),a.map((function(e){var n,r,o,a,i,l,c,u,s,f,h,d,p,m,y,v,g,b,x,w,E,A,C,S,k;return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"navod"},"Name:"),t.createElement("td",{className:"celebrity"},e.name)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.native_name)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.nicknames)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.birth_name)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.other_names)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Title:"),t.createElement("td",{className:"nameComm"},e.title)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.other_posts)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Predecessor:"),t.createElement("td",{className:"nameComm"},e.info.predecessor||e.info.preceded_by)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Successor:"),t.createElement("td",{className:"nameComm"},e.info.successor||e.info.succeeded_by)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Fields:"),t.createElement("td",{className:"nameComm"},e.info.fields)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.movement)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Genres:"),t.createElement("td",{className:"nameComm"},t.createElement("ul",null,t.createElement("li",null,(null===(n=e.info.genres)||void 0===n?void 0:n[0])||(null===(r=e.info.genre)||void 0===r?void 0:r[0])),t.createElement("li",null,(null===(o=e.info.genres)||void 0===o?void 0:o[1])||(null===(a=e.info.genre)||void 0===a?void 0:a[1])),t.createElement("li",null,(null===(i=e.info.genres)||void 0===i?void 0:i[2])||(null===(l=e.info.genre)||void 0===l?void 0:l[2])),t.createElement("li",null,(null===(c=e.info.genres)||void 0===c?void 0:c[3])||(null===(u=e.info.genre)||void 0===u?void 0:u[3])),t.createElement("li",null,(null===(s=e.info.genres)||void 0===s?void 0:s[4])||(null===(f=e.info.genre)||void 0===f?void 0:f[4])),t.createElement("li",null,(null===(h=e.info.genres)||void 0===h?void 0:h[5])||(null===(d=e.info.genre)||void 0===d?void 0:d[5])),t.createElement("li",null,(null===(p=e.info.genres)||void 0===p?void 0:p[6])||(null===(m=e.info.genre)||void 0===m?void 0:m[6])),t.createElement("li",null,(null===(y=e.info.genres)||void 0===y?void 0:y[7])||(null===(v=e.info.genre)||void 0===v?void 0:v[7])),t.createElement("li",null,(null===(g=e.info.genres)||void 0===g?void 0:g[8])||(null===(b=e.info.genre)||void 0===b?void 0:b[8]))))),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.discipline)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.attributes)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Profession:"),t.createElement("td",{className:"nameComm"},e.info.profession)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Occupation:"),t.createElement("td",{className:"nameComm"},t.createElement("ul",null,t.createElement("li",null,null===(x=e.info.occupation)||void 0===x?void 0:x[0]),t.createElement("li",null,null===(w=e.info.occupation)||void 0===w?void 0:w[1]),t.createElement("li",null,null===(E=e.info.occupation)||void 0===E?void 0:E[2]),t.createElement("li",null,null===(A=e.info.occupation)||void 0===A?void 0:A[3]),t.createElement("li",null,null===(C=e.info.occupation)||void 0===C?void 0:C[4]),t.createElement("li",null,null===(S=e.info.occupation)||void 0===S?void 0:S[5])))),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Known for:"),t.createElement("td",{className:"nameComm"},e.info.known_for)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.notable_work)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Associated Acts:"),t.createElement("td",{className:"nameComm"},e.info.associated_acts)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Nationality:"),t.createElement("td",{className:"nameComm"},e.info.nationality||e.info.allegiance)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Residence:"),t.createElement("td",{className:"nameComm"},e.info.citizenship||e.info.residence||e.info.residences)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Birthday:"),t.createElement("td",{className:"nameComm"},e.info.born)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Death:"),t.createElement("td",{className:"nameComm"},e.info.died)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Buried:"),t.createElement("td",{className:"nameComm"},e.info.resting_place||e.info.burial||e.info.buried)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.cause_of_death)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Height:"),t.createElement("td",{className:"nameComm"},e.info.height)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Weight:"),t.createElement("td",{className:"nameComm"}," ",e.info.weight)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Awards:"),t.createElement("td",{className:"nameComm"},e.info.awards||e.info.notable_awards)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.office)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.notable_works)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Convictions:"),t.createElement("td",{className:"nameCom"},e.info.convictions)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Political Party:"),t.createElement("td",{className:"nameComm"},e.info.political_party)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},null===(k=e.info)||void 0===k?void 0:k.other_politicalaffiliations)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Organization"),t.createElement("td",{className:"nameComm"},e.info.organization)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Religion:"),t.createElement("td",{className:"nameComm"},e.info.religion||e.info.stance)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.church)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Education:"),t.createElement("td",{className:"nameComm"},e.info.education||e.info.alma_mater||e.info.university)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Rank:"),t.createElement("td",{className:"nameComm"},e.info.rank)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Years of Service:"),t.createElement("td",{className:"nameComm"},e.info.years_of_service)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Branch:"),t.createElement("td",{className:"nameComm"},e.info.branch)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Wars:"),t.createElement("td",{className:"nameComm"},e.info.wars)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.conflicts)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.battles)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Spouse:"),t.createElement("td",{className:"nameComm"},e.info.spouse||e.info.spouses)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Parents:"),t.createElement("td",{className:"nameComm"},e.info.parents)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.father)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.mother)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Children:"),t.createElement("td",{className:"nameComm"},e.info.children)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Relatives:"),t.createElement("td",{className:"nameComm"},e.info.relatives||e.info.notable_relatives||e.info.family)),t.createElement("tr",null,t.createElement("td",{className:"navod"}),t.createElement("td",{className:"nameComm"},e.info.issue)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Years Active:"),t.createElement("td",{className:"nameComm"},e.info.years_active||e.info.active_years||e.info.reign)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Website:"),t.createElement("td",{className:"nameComm"},t.createElement("a",{href:e.info.website},e.info.website))),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))))}))),t.createElement("table",{className:"tabelaZemlje"},f.map((function(e){var n,r,o,a,i,l,c,u,s,f,h,d,p;return t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{className:"navod"},"Height:"),t.createElement("td",{className:"nameComm"},e.height)),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Occupation:"),t.createElement("td",{className:"nameComm"},t.createElement("ul",null,t.createElement("li",null,null===(n=e.occupation)||void 0===n?void 0:n[0]),t.createElement("li",null,null===(r=e.occupation)||void 0===r?void 0:r[1]),t.createElement("li",null,null===(o=e.occupation)||void 0===o?void 0:o[2]),t.createElement("li",null,null===(a=e.occupation)||void 0===a?void 0:a[3]),t.createElement("li",null,null===(i=e.occupation)||void 0===i?void 0:i[4]),t.createElement("li",null,null===(l=e.occupation)||void 0===l?void 0:l[5]),t.createElement("li",null,null===(c=e.occupation)||void 0===c?void 0:c[6]),t.createElement("li",null,null===(u=e.occupation)||void 0===u?void 0:u[7]),t.createElement("li",null,null===(s=e.occupation)||void 0===s?void 0:s[8]),t.createElement("li",null,null===(f=e.occupation)||void 0===f?void 0:f[9]),t.createElement("li",null,null===(h=e.occupation)||void 0===h?void 0:h[10]),t.createElement("li",null,null===(d=e.occupation)||void 0===d?void 0:d[11]),t.createElement("li",null,null===(p=e.occupation)||void 0===p?void 0:p[12])))),t.createElement("tr",null,t.createElement("td",{className:"navod"},"Net worth:"),t.createElement("td",{className:"networth"},e.net_worth)))}))))},oc=function(){var e=Nt(),n=function(){e("/language")};return t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("div",{onClick:function(){return console.log("klik na ridles"),void e("/ridles")},className:"category"},"Riddles"),t.createElement("div",{onClick:function(){e("/general")},className:"category"},"General"),t.createElement("div",{onClick:function(){return n()},className:"category"},"Language"),t.createElement("div",{onClick:function(){return console.log("klik na Art Literature"),void e("/art")},className:"category"},"Art & Literature"),t.createElement("div",{onClick:function(){return console.log("klik na Science"),void e("/science")},className:"category"},"Science & Nature"),t.createElement("div",{onClick:function(){e("/food")},className:"category"},"Food & Drink"),t.createElement("div",{onClick:function(){e("/people")},className:"category"},"People & Place"),t.createElement("div",{onClick:function(){e("/holidays")},className:"category"},"History & Holidays"),t.createElement("div",{onClick:function(){e("/geography")},className:"category"},"Geography"),t.createElement("div",{onClick:function(){e("/entertainment")},className:"category"},"Entertainment"),t.createElement("div",{onClick:function(){e("/toys")},className:"category"},"Toys & Games"),t.createElement("div",{onClick:function(){e("/music")},className:"category"},"Music"),t.createElement("div",{onClick:function(){return n()},className:"category"},"Language"),t.createElement("div",{onClick:function(){e("/religion")},className:"category"},"Religion & Mythology"),t.createElement("div",{onClick:function(){e("/sport")},className:"category"},"Sports & Leisure"),t.createElement("div",{onClick:function(){e("/mathematics")},className:"category"},"Mathematicss")))};function ac(e){return ac="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ac(e)}function ic(){ic=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==ac(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(ac(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function lc(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function cc(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return uc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?uc(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function uc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const sc=function(){var e=cc((0,t.useState)(null),2),n=(e[0],e[1]),r=cc((0,t.useState)({}),2),o=r[0],a=r[1],i=cc((0,t.useState)([]),2),l=i[0],c=i[1],u=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){s(u)}),[u]),console.log("iz advice searchStringValue:",u);var s=function(){var e,t=(e=ic().mark((function e(t){var r,o,i;return ic().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://api.adviceslip.com/advice/search/".concat(t),e.prev=1,e.next=4,qr.get(r);case 4:o=e.sent,i=o.data.slips,console.log("rezultat advicea",i),a(i),c(i.length),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),n(e.t0);case 14:case"end":return e.stop()}}),e,null,[[1,11]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){lc(a,r,o,i,l,"next",e)}function l(e){lc(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return 0==l?t.createElement(t.Fragment,null,t.createElement("br",null),t.createElement("br",null),t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,t.createElement(sl,null))),t.createElement("tr",null,t.createElement("th",null,"Nothing found"))))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(tl,{placeholder:"Advice",linkTo:"/advice"}))),t.createElement("tr",null,t.createElement("th",{className:"celebrity",colSpan:2},u," Advice")),t.createElement("tr",{className:"results"},t.createElement("th",null,"Number of Advice: ",l)),t.createElement("tr",null,t.createElement("th",null))),o.map((function(e){return t.createElement("tbody",{key:e.id},t.createElement("tr",null,t.createElement("td",{className:"celebrity"},e.advice)),t.createElement("tr",null,t.createElement("td",{className:"nameComm"},e.date)),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))}))),t.createElement(dl,null))},fc={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z"}}]},name:"right",theme:"outlined"};var hc=function(e,n){return t.createElement(Li,(0,E.Z)({},e,{ref:n,icon:fc}))};const dc=t.forwardRef(hc);function pc(e){return function(e){if(Array.isArray(e))return na(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ra(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mc(e){var n=t.useRef();n.current=e;var r=t.useCallback((function(){for(var e,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return null===(e=n.current)||void 0===e?void 0:e.call.apply(e,[n].concat(r))}),[]);return r}var yc=Ka()?t.useLayoutEffect:t.useEffect,vc=function(e,n){var r=t.useRef(!0);yc((function(){return e(r.current)}),n),yc((function(){return r.current=!1,function(){r.current=!0}}),[])},gc=function(e,t){vc((function(t){if(!t)return e()}),t)};const bc=vc;function xc(e){var n=t.useRef(!1),r=oa(t.useState(e),2),o=r[0],a=r[1];return t.useEffect((function(){return n.current=!1,function(){n.current=!0}}),[]),[o,function(e,t){t&&n.current||a(e)}]}function wc(e){return void 0!==e}var Ec=o(9864);function Ac(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[];return t.Children.forEach(e,(function(e){(null!=e||n.keepEmpty)&&(Array.isArray(e)?r=r.concat(Ac(e)):(0,Ec.isFragment)(e)&&e.props?r=r.concat(Ac(e.props.children,n)):r.push(e))})),r}var Cc=t.createContext({});function Sc(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function kc(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,ia(r.key),r)}}function Bc(e,t,n){return t&&kc(e.prototype,t),n&&kc(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function Lc(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&V(e,t)}function Fc(e){return Fc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Fc(e)}function Oc(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Fc(e);if(t){var o=Fc(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return function(e,t){if(t&&("object"===aa(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Y(e)}(this,n)}}const jc=function(e){Lc(n,e);var t=Oc(n);function n(){return Sc(this,n),t.apply(this,arguments)}return Bc(n,[{key:"render",value:function(){return this.props.children}}]),n}(t.Component);var Pc="none",Nc="appear",Tc="enter",_c="leave",Dc="none",Ic="prepare",Mc="start",Rc="active",zc="end",Gc="prepared";function Zc(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit".concat(e)]="webkit".concat(t),n["Moz".concat(e)]="moz".concat(t),n["ms".concat(e)]="MS".concat(t),n["O".concat(e)]="o".concat(t.toLowerCase()),n}var $c,Uc,Hc,Wc=($c=Ka(),Uc="undefined"!=typeof window?window:{},Hc={animationend:Zc("Animation","AnimationEnd"),transitionend:Zc("Transition","TransitionEnd")},$c&&("AnimationEvent"in Uc||delete Hc.animationend.animation,"TransitionEvent"in Uc||delete Hc.transitionend.transition),Hc),Yc={};if(Ka()){var Vc=document.createElement("div");Yc=Vc.style}var qc={};function Kc(e){if(qc[e])return qc[e];var t=Wc[e];if(t)for(var n=Object.keys(t),r=n.length,o=0;o<r;o+=1){var a=n[o];if(Object.prototype.hasOwnProperty.call(t,a)&&a in Yc)return qc[e]=t[a],qc[e]}return""}var Xc=Kc("animationend"),Qc=Kc("transitionend"),Jc=!(!Xc||!Qc),eu=Xc||"animationend",tu=Qc||"transitionend";function nu(e,t){return e?"object"===aa(e)?e[t.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(t):null}const ru=Ka()?t.useLayoutEffect:t.useEffect;var ou=function(e){return+setTimeout(e,16)},au=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(ou=function(e){return window.requestAnimationFrame(e)},au=function(e){return window.cancelAnimationFrame(e)});var iu=0,lu=new Map;function cu(e){lu.delete(e)}var uu=function(e){var t=iu+=1;return function n(r){if(0===r)cu(t),e();else{var o=ou((function(){n(r-1)}));lu.set(t,o)}}(arguments.length>1&&void 0!==arguments[1]?arguments[1]:1),t};uu.cancel=function(e){var t=lu.get(e);return cu(e),au(t)};const su=uu;var fu=[Ic,Mc,Rc,zc],hu=[Ic,Gc];function du(e){return e===Rc||e===zc}const pu=function(e){var n=e;"object"===aa(e)&&(n=e.transitionSupport);var r=t.forwardRef((function(e,r){var o=e.visible,a=void 0===o||o,i=e.removeOnLeave,l=void 0===i||i,c=e.forceRender,u=e.children,s=e.motionName,f=e.leavedClassName,h=e.eventProps,d=function(e,t){return!(!e.motionName||!n||!1===t)}(e,t.useContext(Cc).motion),p=(0,t.useRef)(),m=(0,t.useRef)(),y=function(e,n,r,o){var a=o.motionEnter,i=void 0===a||a,l=o.motionAppear,c=void 0===l||l,u=o.motionLeave,s=void 0===u||u,f=o.motionDeadline,h=o.motionLeaveImmediately,d=o.onAppearPrepare,p=o.onEnterPrepare,m=o.onLeavePrepare,y=o.onAppearStart,v=o.onEnterStart,g=o.onLeaveStart,b=o.onAppearActive,x=o.onEnterActive,w=o.onLeaveActive,E=o.onAppearEnd,A=o.onEnterEnd,C=o.onLeaveEnd,S=o.onVisibleChanged,k=oa(xc(),2),B=k[0],L=k[1],F=oa(xc(Pc),2),O=F[0],j=F[1],P=oa(xc(null),2),N=P[0],T=P[1],_=(0,t.useRef)(!1),D=(0,t.useRef)(null);function I(){return r()}var M=(0,t.useRef)(!1);function R(){j(Pc,!0),T(null,!0)}function z(e){var t=I();if(!e||e.deadline||e.target===t){var n,r=M.current;O===Nc&&r?n=null==E?void 0:E(t,e):O===Tc&&r?n=null==A?void 0:A(t,e):O===_c&&r&&(n=null==C?void 0:C(t,e)),O!==Pc&&r&&!1!==n&&R()}}var G=oa(function(e){var n=(0,t.useRef)(),r=(0,t.useRef)(e);r.current=e;var o=t.useCallback((function(e){r.current(e)}),[]);function a(e){e&&(e.removeEventListener(tu,o),e.removeEventListener(eu,o))}return t.useEffect((function(){return function(){a(n.current)}}),[]),[function(e){n.current&&n.current!==e&&a(n.current),e&&e!==n.current&&(e.addEventListener(tu,o),e.addEventListener(eu,o),n.current=e)},a]}(z),1)[0],Z=function(e){var t,n,r;switch(e){case Nc:return la(t={},Ic,d),la(t,Mc,y),la(t,Rc,b),t;case Tc:return la(n={},Ic,p),la(n,Mc,v),la(n,Rc,x),n;case _c:return la(r={},Ic,m),la(r,Mc,g),la(r,Rc,w),r;default:return{}}},$=t.useMemo((function(){return Z(O)}),[O]),U=oa(function(e,n,r){var o=oa(xc(Dc),2),a=o[0],i=o[1],l=function(){var e=t.useRef(null);function n(){su.cancel(e.current)}return t.useEffect((function(){return function(){n()}}),[]),[function t(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;n();var a=su((function(){o<=1?r({isCanceled:function(){return a!==e.current}}):t(r,o-1)}));e.current=a},n]}(),c=oa(l,2),u=c[0],s=c[1],f=n?hu:fu;return ru((function(){if(a!==Dc&&a!==zc){var e=f.indexOf(a),t=f[e+1],n=r(a);!1===n?i(t,!0):t&&u((function(e){function r(){e.isCanceled()||i(t,!0)}!0===n?r():Promise.resolve(n).then(r)}))}}),[e,a]),t.useEffect((function(){return function(){s()}}),[]),[function(){i(Ic,!0)},a]}(O,!e,(function(e){if(e===Ic){var t=$[Ic];return!!t&&t(I())}var n;return W in $&&T((null===(n=$[W])||void 0===n?void 0:n.call($,I(),null))||null),W===Rc&&(G(I()),f>0&&(clearTimeout(D.current),D.current=setTimeout((function(){z({deadline:!0})}),f))),W===Gc&&R(),true})),2),H=U[0],W=U[1],Y=du(W);M.current=Y,ru((function(){L(n);var t,r=_.current;_.current=!0,!r&&n&&c&&(t=Nc),r&&n&&i&&(t=Tc),(r&&!n&&s||!r&&h&&!n&&s)&&(t=_c);var o=Z(t);t&&(e||o[Ic])?(j(t),H()):j(Pc)}),[n]),(0,t.useEffect)((function(){(O===Nc&&!c||O===Tc&&!i||O===_c&&!s)&&j(Pc)}),[c,i,s]),(0,t.useEffect)((function(){return function(){_.current=!1,clearTimeout(D.current)}}),[]);var V=t.useRef(!1);(0,t.useEffect)((function(){B&&(V.current=!0),void 0!==B&&O===Pc&&((V.current||B)&&(null==S||S(B)),V.current=!0)}),[B,O]);var q=N;return $[Ic]&&W===Mc&&(q=qa({transition:"none"},q)),[O,W,q,null!=B?B:n]}(d,a,(function(){try{return p.current instanceof HTMLElement?p.current:function(e){return e instanceof HTMLElement||e instanceof SVGElement}(e=m.current)?e:e instanceof t.Component?Ze.findDOMNode(e):null}catch(e){return null}var e}),e),v=oa(y,4),g=v[0],b=v[1],x=v[2],w=v[3],E=t.useRef(w);w&&(E.current=!0);var A,C,S,k,B,L=t.useCallback((function(e){p.current=e,function(e,t){"function"==typeof e?e(t):"object"===aa(e)&&e&&"current"in e&&(e.current=t)}(r,e)}),[r]),F=qa(qa({},h),{},{visible:a});if(u)if(g===Pc)A=w?u(qa({},F),L):!l&&E.current&&f?u(qa(qa({},F),{},{className:f}),L):c||!l&&!f?u(qa(qa({},F),{},{style:{display:"none"}}),L):null;else{var O,j;b===Ic?j="prepare":du(b)?j="active":b===Mc&&(j="start");var P=nu(s,"".concat(g,"-").concat(j));A=u(qa(qa({},F),{},{className:sa()(nu(s,g),(O={},la(O,P,P&&j),la(O,s,"string"==typeof s),O)),style:x}),L)}else A=null;return t.isValidElement(A)&&(C=A,("function"!=typeof(B=(0,Ec.isMemo)(C)?C.type.type:C.type)||null!==(S=B.prototype)&&void 0!==S&&S.render)&&("function"!=typeof C||null!==(k=C.prototype)&&void 0!==k&&k.render))&&(A.ref||(A=t.cloneElement(A,{ref:L}))),t.createElement(jc,{ref:m},A)}));return r.displayName="CSSMotion",r}(Jc);var mu="add",yu="keep",vu="remove",gu="removed";function bu(e){var t;return qa(qa({},t=e&&"object"===aa(e)&&"key"in e?e:{key:e}),{},{key:String(t.key)})}function xu(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map(bu)}var wu=["component","children","onVisibleChanged","onAllRemoved"],Eu=["status"],Au=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearPrepare","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];!function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:pu,r=function(e){Lc(o,e);var r=Oc(o);function o(){var e;Sc(this,o);for(var t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];return la(Y(e=r.call.apply(r,[this].concat(n))),"state",{keyEntities:[]}),la(Y(e),"removeKey",(function(t){var n=e.state.keyEntities.map((function(e){return e.key!==t?e:qa(qa({},e),{},{status:gu})}));return e.setState({keyEntities:n}),n.filter((function(e){return e.status!==gu})).length})),e}return Bc(o,[{key:"render",value:function(){var e=this,r=this.state.keyEntities,o=this.props,a=o.component,i=o.children,l=o.onVisibleChanged,c=o.onAllRemoved,u=ca(o,wu),s=a||t.Fragment,f={};return Au.forEach((function(e){f[e]=u[e],delete u[e]})),delete u.keys,t.createElement(s,u,r.map((function(r,o){var a=r.status,u=ca(r,Eu),s=a===mu||a===yu;return t.createElement(n,(0,E.Z)({},f,{key:u.key,visible:s,eventProps:u,onVisibleChanged:function(t){null==l||l(t,{key:u.key}),t||0===e.removeKey(u.key)&&c&&c()}}),(function(e,t){return i(qa(qa({},e),{},{index:o}),t)}))})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.keys,r=t.keyEntities,o=xu(n),a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=[],r=0,o=t.length,a=xu(e),i=xu(t);a.forEach((function(e){for(var t=!1,a=r;a<o;a+=1){var l=i[a];if(l.key===e.key){r<a&&(n=n.concat(i.slice(r,a).map((function(e){return qa(qa({},e),{},{status:mu})}))),r=a),n.push(qa(qa({},l),{},{status:yu})),r+=1,t=!0;break}}t||n.push(qa(qa({},e),{},{status:vu}))})),r<o&&(n=n.concat(i.slice(r).map((function(e){return qa(qa({},e),{},{status:mu})}))));var l={};return n.forEach((function(e){var t=e.key;l[t]=(l[t]||0)+1})),Object.keys(l).filter((function(e){return l[e]>1})).forEach((function(e){(n=n.filter((function(t){var n=t.key,r=t.status;return n!==e||r!==vu}))).forEach((function(t){t.key===e&&(t.status=yu)}))})),n}(r,o);return{keyEntities:a.filter((function(e){var t=r.find((function(t){var n=t.key;return e.key===n}));return!t||t.status!==gu||e.status!==vu}))}}}]),o}(t.Component);la(r,"defaultProps",{component:"div"})}(Jc);const Cu=pu;var Su={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=Su.F1&&t<=Su.F12)return!1;switch(t){case Su.ALT:case Su.CAPS_LOCK:case Su.CONTEXT_MENU:case Su.CTRL:case Su.DOWN:case Su.END:case Su.ESC:case Su.HOME:case Su.INSERT:case Su.LEFT:case Su.MAC_FF_META:case Su.META:case Su.NUMLOCK:case Su.NUM_CENTER:case Su.PAGE_DOWN:case Su.PAGE_UP:case Su.PAUSE:case Su.PRINT_SCREEN:case Su.RIGHT:case Su.SHIFT:case Su.UP:case Su.WIN_KEY:case Su.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=Su.ZERO&&e<=Su.NINE)return!0;if(e>=Su.NUM_ZERO&&e<=Su.NUM_MULTIPLY)return!0;if(e>=Su.A&&e<=Su.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case Su.SPACE:case Su.QUESTION_MARK:case Su.NUM_PLUS:case Su.NUM_MINUS:case Su.NUM_PERIOD:case Su.NUM_DIVISION:case Su.SEMICOLON:case Su.DASH:case Su.EQUALS:case Su.COMMA:case Su.PERIOD:case Su.SLASH:case Su.APOSTROPHE:case Su.SINGLE_QUOTE:case Su.OPEN_SQUARE_BRACKET:case Su.BACKSLASH:case Su.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};const ku=Su;var Bu=t.forwardRef((function(e,n){var r,o=e.prefixCls,a=e.forceRender,i=e.className,l=e.style,c=e.children,u=e.isActive,s=e.role,f=oa(t.useState(u||a),2),h=f[0],d=f[1];return t.useEffect((function(){(a||u)&&d(!0)}),[a,u]),h?t.createElement("div",{ref:n,className:sa()("".concat(o,"-content"),(r={},la(r,"".concat(o,"-content-active"),u),la(r,"".concat(o,"-content-inactive"),!u),r),i),style:l,role:s},t.createElement("div",{className:"".concat(o,"-content-box")},c)):null}));Bu.displayName="PanelContent";const Lu=Bu;var Fu=["showArrow","headerClass","isActive","onItemClick","forceRender","className","prefixCls","collapsible","accordion","panelKey","extra","header","expandIcon","openMotion","destroyInactivePanel","children"],Ou=t.forwardRef((function(e,n){var r,o,a=e.showArrow,i=void 0===a||a,l=e.headerClass,c=e.isActive,u=e.onItemClick,s=e.forceRender,f=e.className,h=e.prefixCls,d=e.collapsible,p=e.accordion,m=e.panelKey,y=e.extra,v=e.header,g=e.expandIcon,b=e.openMotion,x=e.destroyInactivePanel,w=e.children,A=ca(e,Fu),C="disabled"===d,S="header"===d,k="icon"===d,B=null!=y&&"boolean"!=typeof y,L=function(){null==u||u(m)},F="function"==typeof g?g(e):t.createElement("i",{className:"arrow"});F&&(F=t.createElement("div",{className:"".concat(h,"-expand-icon"),onClick:["header","icon"].includes(d)?L:void 0},F));var O=sa()((la(r={},"".concat(h,"-item"),!0),la(r,"".concat(h,"-item-active"),c),la(r,"".concat(h,"-item-disabled"),C),r),f),j={className:sa()(l,(la(o={},"".concat(h,"-header"),!0),la(o,"".concat(h,"-header-collapsible-only"),S),la(o,"".concat(h,"-icon-collapsible-only"),k),o)),"aria-expanded":c,"aria-disabled":C,onKeyDown:function(e){"Enter"!==e.key&&e.keyCode!==ku.ENTER&&e.which!==ku.ENTER||L()}};return S||k||(j.onClick=L,j.role=p?"tab":"button",j.tabIndex=C?-1:0),t.createElement("div",(0,E.Z)({},A,{ref:n,className:O}),t.createElement("div",j,i&&F,t.createElement("span",{className:"".concat(h,"-header-text"),onClick:"header"===d?L:void 0},v),B&&t.createElement("div",{className:"".concat(h,"-extra")},y)),t.createElement(Cu,(0,E.Z)({visible:c,leavedClassName:"".concat(h,"-content-hidden")},b,{forceRender:s,removeOnLeave:x}),(function(e,n){var r=e.className,o=e.style;return t.createElement(Lu,{ref:n,prefixCls:h,className:r,style:o,isActive:c,forceRender:s,role:p?"tabpanel":void 0},w)})))}));const ju=Ou;var Pu=["children","label","key","collapsible","onItemClick","destroyInactivePanel"];function Nu(e){var t=e;if(!Array.isArray(t)){var n=aa(t);t="number"===n||"string"===n?[t]:[]}return t.map((function(e){return String(e)}))}var Tu=t.forwardRef((function(e,n){var r,o,a,i,l,c,u,s,f,h,d,p,m,y,v,g=e.prefixCls,b=void 0===g?"rc-collapse":g,x=e.destroyInactivePanel,w=void 0!==x&&x,A=e.style,C=e.accordion,S=e.className,k=e.children,B=e.collapsible,L=e.openMotion,F=e.expandIcon,O=e.activeKey,j=e.defaultActiveKey,P=e.onChange,N=e.items,T=sa()(b,S),_=(r=[],a=(o={value:O,onChange:function(e){return null==P?void 0:P(e)},defaultValue:j,postState:Nu}||{}).defaultValue,i=o.value,l=o.onChange,c=o.postState,u=oa(xc((function(){return wc(i)?i:wc(a)?"function"==typeof a?a():a:"function"==typeof r?r():r})),2),s=u[0],f=u[1],h=void 0!==i?i:s,d=c?c(h):h,p=mc(l),m=oa(xc([h]),2),y=m[0],v=m[1],gc((function(){var e=y[0];s!==e&&p(s,e)}),[y]),gc((function(){wc(i)||f(i)}),[i]),[d,mc((function(e,t){f(e,t),v([h],t)}))]),D=oa(_,2),I=D[0],M=D[1];mi(!k,"[rc-collapse] `children` will be removed in next major version. Please use `items` instead.");var R=function(e,n,r){return Array.isArray(e)?function(e,n){var r=n.prefixCls,o=n.accordion,a=n.collapsible,i=n.destroyInactivePanel,l=n.onItemClick,c=n.activeKey,u=n.openMotion,s=n.expandIcon;return e.map((function(e,n){var f,h=e.children,d=e.label,p=e.key,m=e.collapsible,y=e.onItemClick,v=e.destroyInactivePanel,g=ca(e,Pu),b=String(null!=p?p:n),x=null!=m?m:a,w=null!=v?v:i;return f=o?c[0]===b:c.indexOf(b)>-1,t.createElement(ju,(0,E.Z)({},g,{prefixCls:r,key:b,panelKey:b,isActive:f,accordion:o,openMotion:u,expandIcon:s,header:d,collapsible:x,onItemClick:function(e){"disabled"!==x&&(l(e),null==y||y(e))},destroyInactivePanel:w}),h)}))}(e,r):Ac(n).map((function(e,n){return function(e,n,r){if(!e)return null;var o,a=r.prefixCls,i=r.accordion,l=r.collapsible,c=r.destroyInactivePanel,u=r.onItemClick,s=r.activeKey,f=r.openMotion,h=r.expandIcon,d=e.key||String(n),p=e.props,m=p.header,y=p.headerClass,v=p.destroyInactivePanel,g=p.collapsible,b=p.onItemClick;o=i?s[0]===d:s.indexOf(d)>-1;var x=null!=g?g:l,w={key:d,panelKey:d,header:m,headerClass:y,isActive:o,prefixCls:a,destroyInactivePanel:null!=v?v:c,openMotion:f,accordion:i,children:e.props.children,onItemClick:function(e){"disabled"!==x&&(u(e),null==b||b(e))},expandIcon:h,collapsible:x};return"string"==typeof e.type?e:(Object.keys(w).forEach((function(e){void 0===w[e]&&delete w[e]})),t.cloneElement(e,w))}(e,n,r)}))}(N,k,{prefixCls:b,accordion:C,openMotion:L,expandIcon:F,collapsible:B,destroyInactivePanel:w,onItemClick:function(e){return M((function(){return C?I[0]===e?[]:[e]:I.indexOf(e)>-1?I.filter((function(t){return t!==e})):[].concat(pc(I),[e])}))},activeKey:I});return t.createElement("div",{ref:n,className:T,style:A,role:C?"tablist":void 0},R)}));const _u=Object.assign(Tu,{Panel:ju}),Du=_u;function Iu(e,t){var n=qa({},e);return Array.isArray(t)&&t.forEach((function(e){delete n[e]})),n}_u.Panel;const Mu=()=>({height:0,opacity:0}),Ru=e=>{const{scrollHeight:t}=e;return{height:t,opacity:1}},zu=e=>({height:e?e.offsetHeight:0}),Gu=(e,t)=>!0===(null==t?void 0:t.deadline)||"height"===t.propertyName,{isValidElement:Zu}=n;function $u(e,n){return function(e,n,r){return Zu(e)?t.cloneElement(e,"function"==typeof r?r(e.props||{}):r):n}(e,e,n)}const Uu=t.createContext({getPrefixCls:(e,t)=>t||(e?`ant-${e}`:"ant"),iconPrefixCls:"anticon"}),{Consumer:Hu}=Uu,Wu=t.createContext(void 0),Yu=t.forwardRef(((e,n)=>{const{getPrefixCls:r}=t.useContext(Uu),{prefixCls:o,className:a,showArrow:i=!0}=e,l=r("collapse",o),c=sa()({[`${l}-no-arrow`]:!i},a);return t.createElement(Du.Panel,Object.assign({ref:n},e,{prefixCls:l,className:c}))})),Vu=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)};const qu=function(){function e(t){Sc(this,e),la(this,"instanceId",void 0),la(this,"cache",new Map),this.instanceId=t}return Bc(e,[{key:"get",value:function(e){return this.cache.get(e.join("%"))||null}},{key:"update",value:function(e,t){var n=e.join("%"),r=t(this.cache.get(n));null===r?this.cache.delete(n):this.cache.set(n,r)}}]),e}();var Ku="data-token-hash",Xu="data-css-hash",Qu="__cssinjs_instance__";var Ju=t.createContext({hashPriority:"low",cache:function(){var e=Math.random().toString(12).slice(2);if("undefined"!=typeof document&&document.head&&document.body){var t=document.body.querySelectorAll("style[".concat(Xu,"]"))||[],n=document.head.firstChild;Array.from(t).forEach((function(t){t[Qu]=t[Qu]||e,t[Qu]===e&&document.head.insertBefore(t,n)}));var r={};Array.from(document.querySelectorAll("style[".concat(Xu,"]"))).forEach((function(t){var n,o=t.getAttribute(Xu);r[o]?t[Qu]===e&&(null===(n=t.parentNode)||void 0===n||n.removeChild(t)):r[o]=!0}))}return new qu(e)}(),defaultCache:!0});const es=Ju;var ts=function(){function e(){Sc(this,e),la(this,"cache",void 0),la(this,"keys",void 0),la(this,"cacheCallTimes",void 0),this.cache=new Map,this.keys=[],this.cacheCallTimes=0}return Bc(e,[{key:"size",value:function(){return this.keys.length}},{key:"internalGet",value:function(e){var t,n,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o={map:this.cache};return e.forEach((function(e){var t;o=o?null===(t=o)||void 0===t||null===(t=t.map)||void 0===t?void 0:t.get(e):void 0})),null!==(t=o)&&void 0!==t&&t.value&&r&&(o.value[1]=this.cacheCallTimes++),null===(n=o)||void 0===n?void 0:n.value}},{key:"get",value:function(e){var t;return null===(t=this.internalGet(e,!0))||void 0===t?void 0:t[0]}},{key:"has",value:function(e){return!!this.internalGet(e)}},{key:"set",value:function(t,n){var r=this;if(!this.has(t)){if(this.size()+1>e.MAX_CACHE_SIZE+e.MAX_CACHE_OFFSET){var o=this.keys.reduce((function(e,t){var n=oa(e,2)[1];return r.internalGet(t)[1]<n?[t,r.internalGet(t)[1]]:e}),[this.keys[0],this.cacheCallTimes]),a=oa(o,1)[0];this.delete(a)}this.keys.push(t)}var i=this.cache;t.forEach((function(e,o){if(o===t.length-1)i.set(e,{value:[n,r.cacheCallTimes++]});else{var a=i.get(e);a?a.map||(a.map=new Map):i.set(e,{map:new Map}),i=i.get(e).map}}))}},{key:"deleteByPath",value:function(e,t){var n,r=e.get(t[0]);if(1===t.length)return r.map?e.set(t[0],{map:r.map}):e.delete(t[0]),null===(n=r.value)||void 0===n?void 0:n[0];var o=this.deleteByPath(r.map,t.slice(1));return r.map&&0!==r.map.size||r.value||e.delete(t[0]),o}},{key:"delete",value:function(e){if(this.has(e))return this.keys=this.keys.filter((function(t){return!function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(t,e)})),this.deleteByPath(this.cache,e)}}]),e}();la(ts,"MAX_CACHE_SIZE",20),la(ts,"MAX_CACHE_OFFSET",5);var ns=0,rs=function(){function e(t){Sc(this,e),la(this,"derivatives",void 0),la(this,"id",void 0),this.derivatives=Array.isArray(t)?t:[t],this.id=ns,0===t.length&&t.length,ns+=1}return Bc(e,[{key:"getDerivativeToken",value:function(e){return this.derivatives.reduce((function(t,n){return n(e,t)}),void 0)}}]),e}(),os=new ts,as=new WeakMap,is={},ls=new WeakMap;function cs(e){var t=ls.get(e)||"";return t||(Object.keys(e).forEach((function(n){var r=e[n];t+=n,r instanceof rs?t+=r.id:r&&"object"===aa(r)?t+=cs(r):t+=r})),ls.set(e,t)),t}function us(e,t){return Vu("".concat(t,"_").concat(cs(e)))}var ss="random-".concat(Date.now(),"-").concat(Math.random()).replace(/\./g,""),fs="_bAmBoO_";var hs=void 0,ds=Ka();function ps(e){return"number"==typeof e?"".concat(e,"px"):e}function ms(e,t,n){var r;if(arguments.length>4&&void 0!==arguments[4]&&arguments[4])return e;var o=qa(qa({},arguments.length>3&&void 0!==arguments[3]?arguments[3]:{}),{},(la(r={},Ku,t),la(r,Xu,n),r)),a=Object.keys(o).map((function(e){var t=o[e];return t?"".concat(e,'="').concat(t,'"'):null})).filter((function(e){return e})).join(" ");return"<style ".concat(a,">").concat(e,"</style>")}var ys=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"--".concat(t?"".concat(t,"-"):"").concat(e).replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z]+)([A-Z][a-z0-9]+)/g,"$1-$2").replace(/([a-z])([A-Z0-9])/g,"$1-$2").toLowerCase()},vs=function(e,t,n){return Object.keys(e).length?".".concat(t).concat(null!=n&&n.scope?".".concat(n.scope):"","{").concat(Object.entries(e).map((function(e){var t=oa(e,2),n=t[0],r=t[1];return"".concat(n,":").concat(r,";")})).join(""),"}"):""},gs=function(e,t,n){var r={},o={};return Object.entries(e).forEach((function(e){var t,a,i=oa(e,2),l=i[0],c=i[1];if(null!=n&&null!==(t=n.preserve)&&void 0!==t&&t[l])o[l]=c;else if(!("string"!=typeof c&&"number"!=typeof c||null!=n&&null!==(a=n.ignore)&&void 0!==a&&a[l])){var u,s=ys(l,null==n?void 0:n.prefix);r[s]="number"!=typeof c||null!=n&&null!==(u=n.unitless)&&void 0!==u&&u[l]?String(c):"".concat(c,"px"),o[l]="var(".concat(s,")")}})),[o,vs(r,t,{scope:null==n?void 0:n.scope})]},bs=qa({},n).useInsertionEffect;const xs=bs?function(e,t,n){return bs((function(){return e(),t()}),n)}:function(e,n,r){t.useMemo(e,r),bc((function(){return n(!0)}),r)},ws=void 0!==qa({},n).useInsertionEffect?function(e){var n=[],r=!1;return t.useEffect((function(){return r=!1,function(){r=!0,n.length&&n.forEach((function(e){return e()}))}}),e),function(e){r||n.push(e)}}:function(){return function(e){e()}},Es=function(){return!1};function As(e,n,r,o,a){var i=t.useContext(es).cache,l=[e].concat(pc(n)),c=l.join("_"),u=ws([c]),s=(Es(),function(e){i.update(l,(function(t){var n=oa(t||[void 0,void 0],2),o=n[0],a=[void 0===o?0:o,n[1]||r()];return e?e(a):a}))});t.useMemo((function(){s()}),[c]);var f=i.get(l)[1];return xs((function(){null==a||a(f)}),(function(e){return s((function(t){var n=oa(t,2),r=n[0],o=n[1];return e&&0===r&&(null==a||a(f)),[r+1,o]})),function(){i.update(l,(function(t){var n=oa(t||[],2),r=n[0],a=void 0===r?0:r,c=n[1];return 0==a-1?(u((function(){!e&&i.get(l)||null==o||o(c,!1)})),null):[a-1,c]}))}}),[c]),f}var Cs={},Ss="css",ks=new Map,Bs=0;var Ls=function(e,t,n,r){var o=qa(qa({},n.getDerivativeToken(e)),t);return r&&(o=r(o)),o},Fs="token";function Os(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=(0,t.useContext)(es),a=o.cache.instanceId,i=o.container,l=r.salt,c=void 0===l?"":l,u=r.override,s=void 0===u?Cs:u,f=r.formatToken,h=r.getComputedToken,d=r.cssVar,p=function(e,t){for(var r=as,o=0;o<t.length;o+=1){var a=t[o];r.has(a)||r.set(a,new WeakMap),r=r.get(a)}return r.has(is)||r.set(is,Object.assign.apply(Object,[{}].concat(pc(n)))),r.get(is)}(0,n),m=cs(p),y=cs(s),v=d?cs(d):"",g=As(Fs,[c,e.id,m,y,v],(function(){var t,n=h?h(p,s,e):Ls(p,s,e,f),r=qa({},n),o="";if(d){var a=oa(gs(n,d.key,{prefix:d.prefix,ignore:d.ignore,unitless:d.unitless,preserve:d.preserve}),2);n=a[0],o=a[1]}var i=us(n,c);n._tokenKey=i,r._tokenKey=us(r,c);var l=null!==(t=null==d?void 0:d.key)&&void 0!==t?t:i;n._themeKey=l,function(e){ks.set(e,(ks.get(e)||0)+1)}(l);var u="".concat(Ss,"-").concat(Vu(i));return n._hashId=u,[n,u,r,o,(null==d?void 0:d.key)||""]}),(function(e){!function(e,t){ks.set(e,(ks.get(e)||0)-1);var n=Array.from(ks.keys()),r=n.filter((function(e){return(ks.get(e)||0)<=0}));n.length-r.length>Bs&&r.forEach((function(e){!function(e,t){"undefined"!=typeof document&&document.querySelectorAll("style[".concat(Ku,'="').concat(e,'"]')).forEach((function(e){var n;e[Qu]===t&&(null===(n=e.parentNode)||void 0===n||n.removeChild(e))}))}(e,t),ks.delete(e)}))}(e[0]._themeKey,a)}),(function(e){var t=oa(e,4),n=t[0],r=t[3];if(d&&r){var o=li(r,Vu("css-variables-".concat(n._themeKey)),{mark:Xu,prepend:"queue",attachTo:i,priority:-999});o[Qu]=a,o.setAttribute(Ku,n._themeKey)}}));return g}const js={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Ps,Ns=o(211),Ts=o(2190),_s="data-ant-cssinjs-cache-path",Ds="_FILE_STYLE__",Is=!0;var Ms="_multi_value_";function Rs(e){return(0,Ns.q)((0,Ts.MY)(e),Ns.P).replace(/\{%%%\:[^;];}/g,";")}var zs=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{root:!0,parentSelectors:[]},o=r.root,a=r.injectHash,i=r.parentSelectors,l=n.hashId,c=n.layer,u=(n.path,n.hashPriority),s=n.transformers,f=void 0===s?[]:s,h=(n.linters,""),d={};function p(t){var r=t.getName(l);if(!d[r]){var o=oa(e(t.style,n,{root:!1,parentSelectors:i}),1)[0];d[r]="@keyframes ".concat(t.getName(l)).concat(o)}}var m=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return t.forEach((function(t){Array.isArray(t)?e(t,n):t&&n.push(t)})),n}(Array.isArray(t)?t:[t]);if(m.forEach((function(t){var r="string"!=typeof t||o?t:{};if("string"==typeof r)h+="".concat(r,"\n");else if(r._keyframe)p(r);else{var c=f.reduce((function(e,t){var n;return(null==t||null===(n=t.visit)||void 0===n?void 0:n.call(t,e))||e}),r);Object.keys(c).forEach((function(t){var r=c[t];if("object"!==aa(r)||!r||"animationName"===t&&r._keyframe||function(e){return"object"===aa(e)&&e&&("_skip_check_"in e||Ms in e)}(r)){var s;function w(e,t){var n=e.replace(/[A-Z]/g,(function(e){return"-".concat(e.toLowerCase())})),r=t;js[e]||"number"!=typeof r||0===r||(r="".concat(r,"px")),"animationName"===e&&null!=t&&t._keyframe&&(p(t),r=t.getName(l)),h+="".concat(n,":").concat(r,";")}var f=null!==(s=null==r?void 0:r.value)&&void 0!==s?s:r;"object"===aa(r)&&null!=r&&r[Ms]&&Array.isArray(f)?f.forEach((function(e){w(t,e)})):w(t,f)}else{var m=!1,y=t.trim(),v=!1;(o||a)&&l?y.startsWith("@")?m=!0:y=function(e,t,n){if(!t)return e;var r=".".concat(t),o="low"===n?":where(".concat(r,")"):r;return e.split(",").map((function(e){var t,n=e.trim().split(/\s+/),r=n[0]||"",a=(null===(t=r.match(/^\w+/))||void 0===t?void 0:t[0])||"";return[r="".concat(a).concat(o).concat(r.slice(a.length))].concat(pc(n.slice(1))).join(" ")})).join(",")}(t,l,u):!o||l||"&"!==y&&""!==y||(y="",v=!0);var g=oa(e(r,n,{root:v,injectHash:m,parentSelectors:[].concat(pc(i),[y])}),2),b=g[0],x=g[1];d=qa(qa({},d),x),h+="".concat(y).concat(b)}}))}})),o){if(c&&(void 0===hs&&(hs=function(e,t,n){if(Ka()){var r,o;li(e,ss);var a=document.createElement("div");a.style.position="fixed",a.style.left="0",a.style.top="0",null==t||t(a),document.body.appendChild(a);var i=n?n(a):null===(r=getComputedStyle(a).content)||void 0===r?void 0:r.includes(fs);return null===(o=a.parentNode)||void 0===o||o.removeChild(a),ii(ss),i}return!1}("@layer ".concat(ss," { .").concat(ss,' { content: "').concat(fs,'"!important; } }'),(function(e){e.className=ss}))),hs)){var y=c.split(","),v=y[y.length-1].trim();h="@layer ".concat(v," {").concat(h,"}"),y.length>1&&(h="@layer ".concat(c,"{%%%:%}").concat(h))}}else h="{".concat(h,"}");return[h,d]};function Gs(e,t){return Vu("".concat(e.join("%")).concat(t))}function Zs(){return null}var $s="style";function Us(e,n){var r=e.token,o=e.path,a=e.hashId,i=e.layer,l=e.nonce,c=e.clientOnly,u=e.order,s=void 0===u?0:u,f=t.useContext(es),h=f.autoClear,d=(f.mock,f.defaultCache),p=f.hashPriority,m=f.container,y=f.ssrInline,v=f.transformers,g=f.linters,b=f.cache,x=r._tokenKey,w=[x].concat(pc(o)),A=ds,C=As($s,w,(function(){var e=w.join("|");if(function(e){return function(){if(!Ps&&(Ps={},Ka())){var e=document.createElement("div");e.className=_s,e.style.position="fixed",e.style.visibility="hidden",e.style.top="-9999px",document.body.appendChild(e);var t=getComputedStyle(e).content||"";(t=t.replace(/^"/,"").replace(/"$/,"")).split(";").forEach((function(e){var t=oa(e.split(":"),2),n=t[0],r=t[1];Ps[n]=r}));var n,r=document.querySelector("style[".concat(_s,"]"));r&&(Is=!1,null===(n=r.parentNode)||void 0===n||n.removeChild(r)),document.body.removeChild(e)}}(),!!Ps[e]}(e)){var t=function(e){var t=Ps[e],n=null;if(t&&Ka())if(Is)n=Ds;else{var r=document.querySelector("style[".concat(Xu,'="').concat(Ps[e],'"]'));r?n=r.innerHTML:delete Ps[e]}return[n,t]}(e),r=oa(t,2),l=r[0],u=r[1];if(l)return[l,x,u,{},c,s]}var f=n(),h=oa(zs(f,{hashId:a,hashPriority:p,layer:i,path:o.join("-"),transformers:v,linters:g}),2),d=h[0],m=h[1],y=Rs(d),b=Gs(w,y);return[y,x,b,m,c,s]}),(function(e,t){var n=oa(e,3)[2];(t||h)&&ds&&ii(n,{mark:Xu})}),(function(e){var t=oa(e,4),n=t[0],r=(t[1],t[2]),o=t[3];if(A&&n!==Ds){var a={mark:Xu,prepend:"queue",attachTo:m,priority:s},i="function"==typeof l?l():l;i&&(a.csp={nonce:i});var c=li(n,r,a);c[Qu]=b.instanceId,c.setAttribute(Ku,x),Object.keys(o).forEach((function(e){li(Rs(o[e]),"_effect-".concat(e),a)}))}})),S=oa(C,3),k=S[0],B=S[1],L=S[2];return function(e){var n,r;return n=y&&!A&&d?t.createElement("style",(0,E.Z)({},(la(r={},Ku,B),la(r,Xu,L),r),{dangerouslySetInnerHTML:{__html:k}})):t.createElement(Zs,null),t.createElement(t.Fragment,null,n,e)}}var Hs="cssVar";var Ws;function Ys(e){return e.notSplit=!0,e}la(Ws={},$s,(function(e,t,n){var r=oa(e,6),o=r[0],a=r[1],i=r[2],l=r[3],c=r[4],u=r[5],s=(n||{}).plain;if(c)return null;var f=o,h={"data-rc-order":"prependQueue","data-rc-priority":"".concat(u)};return f=ms(o,a,i,h,s),l&&Object.keys(l).forEach((function(e){if(!t[e]){t[e]=!0;var n=Rs(l[e]);f+=ms(n,a,"_effect-".concat(e),h,s)}})),[u,i,f]})),la(Ws,Fs,(function(e,t,n){var r=oa(e,5),o=r[2],a=r[3],i=r[4],l=(n||{}).plain;if(!a)return null;var c=o._tokenKey;return[-999,c,ms(a,i,c,{"data-rc-order":"prependQueue","data-rc-priority":"".concat(-999)},l)]})),la(Ws,Hs,(function(e,t,n){var r=oa(e,4),o=r[1],a=r[2],i=r[3],l=(n||{}).plain;return o?[-999,a,ms(o,i,a,{"data-rc-order":"prependQueue","data-rc-priority":"".concat(-999)},l)]:null})),Ys(["borderTop","borderBottom"]),Ys(["borderTop"]),Ys(["borderBottom"]),Ys(["borderLeft","borderRight"]),Ys(["borderLeft"]),Ys(["borderRight"]);const Vs=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return{boxSizing:"border-box",margin:0,padding:0,color:e.colorText,fontSize:e.fontSize,lineHeight:e.lineHeight,listStyle:"none",fontFamily:t?"inherit":e.fontFamily}},qs=e=>({a:{color:e.colorLink,textDecoration:e.linkDecoration,backgroundColor:"transparent",outline:"none",cursor:"pointer",transition:`color ${e.motionDurationSlow}`,"-webkit-text-decoration-skip":"objects","&:hover":{color:e.colorLinkHover},"&:active":{color:e.colorLinkActive},"&:active,\n  &:hover":{textDecoration:e.linkHoverDecoration,outline:0},"&:focus":{textDecoration:e.linkFocusDecoration,outline:0},"&[disabled]":{color:e.colorTextDisabled,cursor:"not-allowed"}}}),Ks=(e,t)=>{const{fontFamily:n,fontSize:r}=e,o=`[class^="${t}"], [class*=" ${t}"]`;return{[o]:{fontFamily:n,fontSize:r,boxSizing:"border-box","&::before, &::after":{boxSizing:"border-box"},[o]:{boxSizing:"border-box","&::before, &::after":{boxSizing:"border-box"}}}}},Xs=e=>({[e.componentCls]:{[`${e.antCls}-motion-collapse-legacy`]:{overflow:"hidden","&-active":{transition:`height ${e.motionDurationMid} ${e.motionEaseInOut},\n        opacity ${e.motionDurationMid} ${e.motionEaseInOut} !important`}},[`${e.antCls}-motion-collapse`]:{overflow:"hidden",transition:`height ${e.motionDurationMid} ${e.motionEaseInOut},\n        opacity ${e.motionDurationMid} ${e.motionEaseInOut} !important`}}});"undefined"==typeof Reflect?Object.keys:Reflect.ownKeys;const Qs="5.12.1",Js={blue:"#1677ff",purple:"#722ED1",cyan:"#13C2C2",green:"#52C41A",magenta:"#EB2F96",pink:"#eb2f96",red:"#F5222D",orange:"#FA8C16",yellow:"#FADB14",volcano:"#FA541C",geekblue:"#2F54EB",gold:"#FAAD14",lime:"#A0D911"},ef=Object.assign(Object.assign({},Js),{colorPrimary:"#1677ff",colorSuccess:"#52c41a",colorWarning:"#faad14",colorError:"#ff4d4f",colorInfo:"#1677ff",colorLink:"",colorTextBase:"",colorBgBase:"",fontFamily:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n'Noto Color Emoji'",fontFamilyCode:"'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace",fontSize:14,lineWidth:1,lineType:"solid",motionUnit:.1,motionBase:0,motionEaseOutCirc:"cubic-bezier(0.08, 0.82, 0.17, 1)",motionEaseInOutCirc:"cubic-bezier(0.78, 0.14, 0.15, 0.86)",motionEaseOut:"cubic-bezier(0.215, 0.61, 0.355, 1)",motionEaseInOut:"cubic-bezier(0.645, 0.045, 0.355, 1)",motionEaseOutBack:"cubic-bezier(0.12, 0.4, 0.29, 1.46)",motionEaseInBack:"cubic-bezier(0.71, -0.46, 0.88, 0.6)",motionEaseInQuint:"cubic-bezier(0.755, 0.05, 0.855, 0.06)",motionEaseOutQuint:"cubic-bezier(0.23, 1, 0.32, 1)",borderRadius:6,sizeUnit:4,sizeStep:4,sizePopupArrow:16,controlHeight:32,zIndexBase:0,zIndexPopupBase:1e3,opacityImage:1,wireframe:!1,motion:!0});var tf=function(){function e(t,n){var r;if(void 0===t&&(t=""),void 0===n&&(n={}),t instanceof e)return t;"number"==typeof t&&(t=function(e){return{r:e>>16,g:(65280&e)>>8,b:255&e}}(t)),this.originalInput=t;var o=Aa(t);this.originalInput=t,this.r=o.r,this.g=o.g,this.b=o.b,this.a=o.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(r=n.format)&&void 0!==r?r:o.format,this.gradientType=n.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=o.ok}return e.prototype.isDark=function(){return this.getBrightness()<128},e.prototype.isLight=function(){return!this.isDark()},e.prototype.getBrightness=function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},e.prototype.getLuminance=function(){var e=this.toRgb(),t=e.r/255,n=e.g/255,r=e.b/255;return.2126*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))},e.prototype.getAlpha=function(){return this.a},e.prototype.setAlpha=function(e){return this.a=da(e),this.roundA=Math.round(100*this.a)/100,this},e.prototype.isMonochrome=function(){return 0===this.toHsl().s},e.prototype.toHsv=function(){var e=ga(this.r,this.g,this.b);return{h:360*e.h,s:e.s,v:e.v,a:this.a}},e.prototype.toHsvString=function(){var e=ga(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.v);return 1===this.a?"hsv(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsva(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHsl=function(){var e=ya(this.r,this.g,this.b);return{h:360*e.h,s:e.s,l:e.l,a:this.a}},e.prototype.toHslString=function(){var e=ya(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.l);return 1===this.a?"hsl(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsla(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHex=function(e){return void 0===e&&(e=!1),ba(this.r,this.g,this.b,e)},e.prototype.toHexString=function(e){return void 0===e&&(e=!1),"#"+this.toHex(e)},e.prototype.toHex8=function(e){return void 0===e&&(e=!1),function(e,t,n,r,o){var a,i=[ma(Math.round(e).toString(16)),ma(Math.round(t).toString(16)),ma(Math.round(n).toString(16)),ma((a=r,Math.round(255*parseFloat(a)).toString(16)))];return o&&i[0].startsWith(i[0].charAt(1))&&i[1].startsWith(i[1].charAt(1))&&i[2].startsWith(i[2].charAt(1))&&i[3].startsWith(i[3].charAt(1))?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0)+i[3].charAt(0):i.join("")}(this.r,this.g,this.b,this.a,e)},e.prototype.toHex8String=function(e){return void 0===e&&(e=!1),"#"+this.toHex8(e)},e.prototype.toHexShortString=function(e){return void 0===e&&(e=!1),1===this.a?this.toHexString(e):this.toHex8String(e)},e.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},e.prototype.toRgbString=function(){var e=Math.round(this.r),t=Math.round(this.g),n=Math.round(this.b);return 1===this.a?"rgb(".concat(e,", ").concat(t,", ").concat(n,")"):"rgba(".concat(e,", ").concat(t,", ").concat(n,", ").concat(this.roundA,")")},e.prototype.toPercentageRgb=function(){var e=function(e){return"".concat(Math.round(100*fa(e,255)),"%")};return{r:e(this.r),g:e(this.g),b:e(this.b),a:this.a}},e.prototype.toPercentageRgbString=function(){var e=function(e){return Math.round(100*fa(e,255))};return 1===this.a?"rgb(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%)"):"rgba(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%, ").concat(this.roundA,")")},e.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var e="#"+ba(this.r,this.g,this.b,!1),t=0,n=Object.entries(Ea);t<n.length;t++){var r=n[t],o=r[0];if(e===r[1])return o}return!1},e.prototype.toString=function(e){var t=Boolean(e);e=null!=e?e:this.format;var n=!1,r=this.a<1&&this.a>=0;return t||!r||!e.startsWith("hex")&&"name"!==e?("rgb"===e&&(n=this.toRgbString()),"prgb"===e&&(n=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(n=this.toHexString()),"hex3"===e&&(n=this.toHexString(!0)),"hex4"===e&&(n=this.toHex8String(!0)),"hex8"===e&&(n=this.toHex8String()),"name"===e&&(n=this.toName()),"hsl"===e&&(n=this.toHslString()),"hsv"===e&&(n=this.toHsvString()),n||this.toHexString()):"name"===e&&0===this.a?this.toName():this.toRgbString()},e.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},e.prototype.clone=function(){return new e(this.toString())},e.prototype.lighten=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l+=t/100,n.l=ha(n.l),new e(n)},e.prototype.brighten=function(t){void 0===t&&(t=10);var n=this.toRgb();return n.r=Math.max(0,Math.min(255,n.r-Math.round(-t/100*255))),n.g=Math.max(0,Math.min(255,n.g-Math.round(-t/100*255))),n.b=Math.max(0,Math.min(255,n.b-Math.round(-t/100*255))),new e(n)},e.prototype.darken=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l-=t/100,n.l=ha(n.l),new e(n)},e.prototype.tint=function(e){return void 0===e&&(e=10),this.mix("white",e)},e.prototype.shade=function(e){return void 0===e&&(e=10),this.mix("black",e)},e.prototype.desaturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s-=t/100,n.s=ha(n.s),new e(n)},e.prototype.saturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s+=t/100,n.s=ha(n.s),new e(n)},e.prototype.greyscale=function(){return this.desaturate(100)},e.prototype.spin=function(t){var n=this.toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,new e(n)},e.prototype.mix=function(t,n){void 0===n&&(n=50);var r=this.toRgb(),o=new e(t).toRgb(),a=n/100;return new e({r:(o.r-r.r)*a+r.r,g:(o.g-r.g)*a+r.g,b:(o.b-r.b)*a+r.b,a:(o.a-r.a)*a+r.a})},e.prototype.analogous=function(t,n){void 0===t&&(t=6),void 0===n&&(n=30);var r=this.toHsl(),o=360/n,a=[this];for(r.h=(r.h-(o*t>>1)+720)%360;--t;)r.h=(r.h+o)%360,a.push(new e(r));return a},e.prototype.complement=function(){var t=this.toHsl();return t.h=(t.h+180)%360,new e(t)},e.prototype.monochromatic=function(t){void 0===t&&(t=6);for(var n=this.toHsv(),r=n.h,o=n.s,a=n.v,i=[],l=1/t;t--;)i.push(new e({h:r,s:o,v:a})),a=(a+l)%1;return i},e.prototype.splitcomplement=function(){var t=this.toHsl(),n=t.h;return[this,new e({h:(n+72)%360,s:t.s,l:t.l}),new e({h:(n+216)%360,s:t.s,l:t.l})]},e.prototype.onBackground=function(t){var n=this.toRgb(),r=new e(t).toRgb(),o=n.a+r.a*(1-n.a);return new e({r:(n.r*n.a+r.r*r.a*(1-n.a))/o,g:(n.g*n.a+r.g*r.a*(1-n.a))/o,b:(n.b*n.a+r.b*r.a*(1-n.a))/o,a:o})},e.prototype.triad=function(){return this.polyad(3)},e.prototype.tetrad=function(){return this.polyad(4)},e.prototype.polyad=function(t){for(var n=this.toHsl(),r=n.h,o=[this],a=360/t,i=1;i<t;i++)o.push(new e({h:(r+i*a)%360,s:n.s,l:n.l}));return o},e.prototype.equals=function(t){return this.toRgbString()===new e(t).toRgbString()},e}();const nf=(e,t)=>new tf(e).setAlpha(t).toRgbString(),rf=(e,t)=>new tf(e).darken(t).toHexString(),of=e=>{const t=Za(e);return{1:t[0],2:t[1],3:t[2],4:t[3],5:t[4],6:t[5],7:t[6],8:t[4],9:t[5],10:t[6]}},af=(e,t)=>{const n=e||"#fff",r=t||"#000";return{colorBgBase:n,colorTextBase:r,colorText:nf(r,.88),colorTextSecondary:nf(r,.65),colorTextTertiary:nf(r,.45),colorTextQuaternary:nf(r,.25),colorFill:nf(r,.15),colorFillSecondary:nf(r,.06),colorFillTertiary:nf(r,.04),colorFillQuaternary:nf(r,.02),colorBgLayout:rf(n,4),colorBgContainer:rf(n,0),colorBgElevated:rf(n,0),colorBgSpotlight:nf(r,.85),colorBgBlur:"transparent",colorBorder:rf(n,15),colorBorderSecondary:rf(n,6)}},lf=(cf=function(e){const t=Object.keys(Js).map((t=>{const n=Za(e[t]);return new Array(10).fill(1).reduce(((e,r,o)=>(e[`${t}-${o+1}`]=n[o],e[`${t}${o+1}`]=n[o],e)),{})})).reduce(((e,t)=>Object.assign(Object.assign({},e),t)),{});return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},e),t),function(e,t){let{generateColorPalettes:n,generateNeutralColorPalettes:r}=t;const{colorSuccess:o,colorWarning:a,colorError:i,colorInfo:l,colorPrimary:c,colorBgBase:u,colorTextBase:s}=e,f=n(c),h=n(o),d=n(a),p=n(i),m=n(l),y=r(u,s),v=n(e.colorLink||e.colorInfo);return Object.assign(Object.assign({},y),{colorPrimaryBg:f[1],colorPrimaryBgHover:f[2],colorPrimaryBorder:f[3],colorPrimaryBorderHover:f[4],colorPrimaryHover:f[5],colorPrimary:f[6],colorPrimaryActive:f[7],colorPrimaryTextHover:f[8],colorPrimaryText:f[9],colorPrimaryTextActive:f[10],colorSuccessBg:h[1],colorSuccessBgHover:h[2],colorSuccessBorder:h[3],colorSuccessBorderHover:h[4],colorSuccessHover:h[4],colorSuccess:h[6],colorSuccessActive:h[7],colorSuccessTextHover:h[8],colorSuccessText:h[9],colorSuccessTextActive:h[10],colorErrorBg:p[1],colorErrorBgHover:p[2],colorErrorBorder:p[3],colorErrorBorderHover:p[4],colorErrorHover:p[5],colorError:p[6],colorErrorActive:p[7],colorErrorTextHover:p[8],colorErrorText:p[9],colorErrorTextActive:p[10],colorWarningBg:d[1],colorWarningBgHover:d[2],colorWarningBorder:d[3],colorWarningBorderHover:d[4],colorWarningHover:d[4],colorWarning:d[6],colorWarningActive:d[7],colorWarningTextHover:d[8],colorWarningText:d[9],colorWarningTextActive:d[10],colorInfoBg:m[1],colorInfoBgHover:m[2],colorInfoBorder:m[3],colorInfoBorderHover:m[4],colorInfoHover:m[4],colorInfo:m[6],colorInfoActive:m[7],colorInfoTextHover:m[8],colorInfoText:m[9],colorInfoTextActive:m[10],colorLinkHover:v[4],colorLink:v[6],colorLinkActive:v[7],colorBgMask:new tf("#000").setAlpha(.45).toRgbString(),colorWhite:"#fff"})}(e,{generateColorPalettes:of,generateNeutralColorPalettes:af})),(e=>{const t=function(e){const t=new Array(10).fill(null).map(((t,n)=>{const r=n-1,o=e*Math.pow(2.71828,r/5),a=n>1?Math.floor(o):Math.ceil(o);return 2*Math.floor(a/2)}));return t[1]=e,t.map((e=>({size:e,lineHeight:(e+8)/e})))}(e),n=t.map((e=>e.size)),r=t.map((e=>e.lineHeight)),o=n[1],a=n[0],i=n[2],l=r[1],c=r[0],u=r[2];return{fontSizeSM:a,fontSize:o,fontSizeLG:i,fontSizeXL:n[3],fontSizeHeading1:n[6],fontSizeHeading2:n[5],fontSizeHeading3:n[4],fontSizeHeading4:n[3],fontSizeHeading5:n[2],lineHeight:l,lineHeightLG:u,lineHeightSM:c,fontHeight:Math.round(l*o),fontHeightLG:Math.round(u*i),fontHeightSM:Math.round(c*a),lineHeightHeading1:r[6],lineHeightHeading2:r[5],lineHeightHeading3:r[4],lineHeightHeading4:r[3],lineHeightHeading5:r[2]}})(e.fontSize)),function(e){const{sizeUnit:t,sizeStep:n}=e;return{sizeXXL:t*(n+8),sizeXL:t*(n+4),sizeLG:t*(n+2),sizeMD:t*(n+1),sizeMS:t*n,size:t*n,sizeSM:t*(n-1),sizeXS:t*(n-2),sizeXXS:t*(n-3)}}(e)),(e=>{const{controlHeight:t}=e;return{controlHeightSM:.75*t,controlHeightXS:.5*t,controlHeightLG:1.25*t}})(e)),function(e){const{motionUnit:t,motionBase:n,borderRadius:r,lineWidth:o}=e;return Object.assign({motionDurationFast:`${(n+t).toFixed(1)}s`,motionDurationMid:`${(n+2*t).toFixed(1)}s`,motionDurationSlow:`${(n+3*t).toFixed(1)}s`,lineWidthBold:o+1},(e=>{let t=e,n=e,r=e,o=e;return e<6&&e>=5?t=e+1:e<16&&e>=6?t=e+2:e>=16&&(t=16),e<7&&e>=5?n=4:e<8&&e>=7?n=5:e<14&&e>=8?n=6:e<16&&e>=14?n=7:e>=16&&(n=8),e<6&&e>=2?r=1:e>=6&&(r=2),e>4&&e<8?o=4:e>=8&&(o=6),{borderRadius:e,borderRadiusXS:r,borderRadiusSM:n,borderRadiusLG:t,borderRadiusOuter:o}})(r))}(e))},uf=Array.isArray(cf)?cf:[cf],os.has(uf)||os.set(uf,new rs(uf)),os.get(uf));var cf,uf;const sf={token:ef,override:{override:ef},hashed:!0},ff=t.createContext(sf);function hf(e){return e>=0&&e<=255}const df=function(e,t){const{r:n,g:r,b:o,a}=new tf(e).toRgb();if(a<1)return e;const{r:i,g:l,b:c}=new tf(t).toRgb();for(let e=.01;e<=1;e+=.01){const t=Math.round((n-i*(1-e))/e),a=Math.round((r-l*(1-e))/e),u=Math.round((o-c*(1-e))/e);if(hf(t)&&hf(a)&&hf(u))return new tf({r:t,g:a,b:u,a:Math.round(100*e)/100}).toRgbString()}return new tf({r:n,g:r,b:o,a:1}).toRgbString()};var pf=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};function mf(e){const{override:t}=e,n=pf(e,["override"]),r=Object.assign({},t);Object.keys(ef).forEach((e=>{delete r[e]}));const o=Object.assign(Object.assign({},n),r);if(!1===o.motion){const e="0s";o.motionDurationFast=e,o.motionDurationMid=e,o.motionDurationSlow=e}return Object.assign(Object.assign(Object.assign({},o),{colorFillContent:o.colorFillSecondary,colorFillContentHover:o.colorFill,colorFillAlter:o.colorFillQuaternary,colorBgContainerDisabled:o.colorFillTertiary,colorBorderBg:o.colorBgContainer,colorSplit:df(o.colorBorderSecondary,o.colorBgContainer),colorTextPlaceholder:o.colorTextQuaternary,colorTextDisabled:o.colorTextQuaternary,colorTextHeading:o.colorText,colorTextLabel:o.colorTextSecondary,colorTextDescription:o.colorTextTertiary,colorTextLightSolid:o.colorWhite,colorHighlight:o.colorError,colorBgTextHover:o.colorFillSecondary,colorBgTextActive:o.colorFill,colorIcon:o.colorTextTertiary,colorIconHover:o.colorText,colorErrorOutline:df(o.colorErrorBg,o.colorBgContainer),colorWarningOutline:df(o.colorWarningBg,o.colorBgContainer),fontSizeIcon:o.fontSizeSM,lineWidthFocus:4*o.lineWidth,lineWidth:o.lineWidth,controlOutlineWidth:2*o.lineWidth,controlInteractiveSize:o.controlHeight/2,controlItemBgHover:o.colorFillTertiary,controlItemBgActive:o.colorPrimaryBg,controlItemBgActiveHover:o.colorPrimaryBgHover,controlItemBgActiveDisabled:o.colorFill,controlTmpOutline:o.colorFillQuaternary,controlOutline:df(o.colorPrimaryBg,o.colorBgContainer),lineType:o.lineType,borderRadius:o.borderRadius,borderRadiusXS:o.borderRadiusXS,borderRadiusSM:o.borderRadiusSM,borderRadiusLG:o.borderRadiusLG,fontWeightStrong:600,opacityLoading:.65,linkDecoration:"none",linkHoverDecoration:"none",linkFocusDecoration:"none",controlPaddingHorizontal:12,controlPaddingHorizontalSM:8,paddingXXS:o.sizeXXS,paddingXS:o.sizeXS,paddingSM:o.sizeSM,padding:o.size,paddingMD:o.sizeMD,paddingLG:o.sizeLG,paddingXL:o.sizeXL,paddingContentHorizontalLG:o.sizeLG,paddingContentVerticalLG:o.sizeMS,paddingContentHorizontal:o.sizeMS,paddingContentVertical:o.sizeSM,paddingContentHorizontalSM:o.size,paddingContentVerticalSM:o.sizeXS,marginXXS:o.sizeXXS,marginXS:o.sizeXS,marginSM:o.sizeSM,margin:o.size,marginMD:o.sizeMD,marginLG:o.sizeLG,marginXL:o.sizeXL,marginXXL:o.sizeXXL,boxShadow:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowSecondary:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowTertiary:"\n      0 1px 2px 0 rgba(0, 0, 0, 0.03),\n      0 1px 6px -1px rgba(0, 0, 0, 0.02),\n      0 2px 4px 0 rgba(0, 0, 0, 0.02)\n    ",screenXS:480,screenXSMin:480,screenXSMax:575,screenSM:576,screenSMMin:576,screenSMMax:767,screenMD:768,screenMDMin:768,screenMDMax:991,screenLG:992,screenLGMin:992,screenLGMax:1199,screenXL:1200,screenXLMin:1200,screenXLMax:1599,screenXXL:1600,screenXXLMin:1600,boxShadowPopoverArrow:"2px 2px 5px rgba(0, 0, 0, 0.05)",boxShadowCard:`\n      0 1px 2px -2px ${new tf("rgba(0, 0, 0, 0.16)").toRgbString()},\n      0 3px 6px 0 ${new tf("rgba(0, 0, 0, 0.12)").toRgbString()},\n      0 5px 12px 4px ${new tf("rgba(0, 0, 0, 0.09)").toRgbString()}\n    `,boxShadowDrawerRight:"\n      -6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      -3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      -9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerLeft:"\n      6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerUp:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerDown:"\n      0 -6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 -3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 -9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowTabsOverflowLeft:"inset 10px 0 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowRight:"inset -10px 0 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowTop:"inset 0 10px 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowBottom:"inset 0 -10px 8px -8px rgba(0, 0, 0, 0.08)"}),r)}var yf=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};const vf={lineHeight:!0,lineHeightSM:!0,lineHeightLG:!0,lineHeightHeading1:!0,lineHeightHeading2:!0,lineHeightHeading3:!0,lineHeightHeading4:!0,lineHeightHeading5:!0,opacityLoading:!0,fontWeightStrong:!0,zIndexPopupBase:!0,zIndexBase:!0},gf={size:!0,sizeSM:!0,sizeLG:!0,sizeMD:!0,sizeXS:!0,sizeXXS:!0,sizeMS:!0,sizeXL:!0,sizeXXL:!0,sizeUnit:!0,sizeStep:!0,motionBase:!0,motionUnit:!0},bf={screenXS:!0,screenXSMin:!0,screenXSMax:!0,screenSM:!0,screenSMMin:!0,screenSMMax:!0,screenMD:!0,screenMDMin:!0,screenMDMax:!0,screenLG:!0,screenLGMin:!0,screenLGMax:!0,screenXL:!0,screenXLMin:!0,screenXLMax:!0,screenXXL:!0,screenXXLMin:!0},xf=(e,t,n)=>{const r=n.getDerivativeToken(e),{override:o}=t,a=yf(t,["override"]);let i=Object.assign(Object.assign({},r),{override:o});return i=mf(i),a&&Object.entries(a).forEach((e=>{let[t,n]=e;const{theme:r}=n,o=yf(n,["theme"]);let a=o;r&&(a=xf(Object.assign(Object.assign({},i),o),{override:o},r)),i[t]=a})),i};function wf(){const{token:e,hashed:n,theme:r,override:o,cssVar:a}=t.useContext(ff),i=`${Qs}-${n||""}`,l=r||lf,[c,u,s]=Os(l,[ef,e],{salt:i,override:o,getComputedToken:xf,formatToken:mf,cssVar:a&&{prefix:a.prefix,key:a.key,unitless:vf,ignore:gf,preserve:bf}});return[l,s,n?u:"",c,a]}const Ef=Bc((function e(){Sc(this,e)}));let Af=function(e){Lc(n,e);var t=Oc(n);function n(e){var r;return Sc(this,n),(r=t.call(this)).result=0,e instanceof n?r.result=e.result:"number"==typeof e&&(r.result=e),r}return Bc(n,[{key:"add",value:function(e){return e instanceof n?this.result+=e.result:"number"==typeof e&&(this.result+=e),this}},{key:"sub",value:function(e){return e instanceof n?this.result-=e.result:"number"==typeof e&&(this.result-=e),this}},{key:"mul",value:function(e){return e instanceof n?this.result*=e.result:"number"==typeof e&&(this.result*=e),this}},{key:"div",value:function(e){return e instanceof n?this.result/=e.result:"number"==typeof e&&(this.result/=e),this}},{key:"equal",value:function(){return this.result}}]),n}(Ef);const Cf="CALC_UNIT";function Sf(e){return"number"==typeof e?`${e}${Cf}`:e}let kf=function(e){Lc(n,e);var t=Oc(n);function n(e){var r;return Sc(this,n),(r=t.call(this)).result="",e instanceof n?r.result=`(${e.result})`:"number"==typeof e?r.result=Sf(e):"string"==typeof e&&(r.result=e),r}return Bc(n,[{key:"add",value:function(e){return e instanceof n?this.result=`${this.result} + ${e.getResult()}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} + ${Sf(e)}`),this.lowPriority=!0,this}},{key:"sub",value:function(e){return e instanceof n?this.result=`${this.result} - ${e.getResult()}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} - ${Sf(e)}`),this.lowPriority=!0,this}},{key:"mul",value:function(e){return this.lowPriority&&(this.result=`(${this.result})`),e instanceof n?this.result=`${this.result} * ${e.getResult(!0)}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} * ${e}`),this.lowPriority=!1,this}},{key:"div",value:function(e){return this.lowPriority&&(this.result=`(${this.result})`),e instanceof n?this.result=`${this.result} / ${e.getResult(!0)}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} / ${e}`),this.lowPriority=!1,this}},{key:"getResult",value:function(e){return this.lowPriority||e?`(${this.result})`:this.result}},{key:"equal",value:function(e){const{unit:t=!0}=e||{},n=new RegExp(`${Cf}`,"g");return this.result=this.result.replace(n,t?"px":""),void 0!==this.lowPriority?`calc(${this.result})`:this.result}}]),n}(Ef);const Bf="undefined"!=typeof CSSINJS_STATISTIC;let Lf=!0;function Ff(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];if(!Bf)return Object.assign.apply(Object,[{}].concat(t));Lf=!1;const r={};return t.forEach((e=>{Object.keys(e).forEach((t=>{Object.defineProperty(r,t,{configurable:!0,enumerable:!0,get:()=>e[t]})}))})),Lf=!0,r}const Of={};function jf(){}const Pf=(e,t,n)=>{var r;return"function"==typeof n?n(Ff(t,null!==(r=t[e])&&void 0!==r?r:{})):null!=n?n:{}},Nf=(e,t,n,r)=>{const o=Object.assign({},t[e]);if(null==r?void 0:r.deprecatedTokens){const{deprecatedTokens:e}=r;e.forEach((e=>{let[t,n]=e;var r;((null==o?void 0:o[t])||(null==o?void 0:o[n]))&&(null!==(r=o[n])&&void 0!==r||(o[n]=null==o?void 0:o[t]))}))}let a=Object.assign(Object.assign({},n),o);return(null==r?void 0:r.format)&&(a=r.format(a)),Object.keys(a).forEach((e=>{a[e]===t[e]&&delete a[e]})),a};function Tf(e,n,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const a=Array.isArray(e)?e:[e,e],[i]=a,l=a.join("-");return e=>{const[a,c,u,s,f]=wf(),{getPrefixCls:h,iconPrefixCls:d,csp:p}=(0,t.useContext)(Uu),m=h(),y=f?"css":"js",v=(e=>{const t="css"===e?kf:Af;return e=>new t(e)})(y),{max:g,min:b}=function(e){return"js"===e?{max:Math.max,min:Math.min}:{max:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return`max(${t.map((e=>ps(e))).join(",")})`},min:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return`min(${t.map((e=>ps(e))).join(",")})`}}}(y),x={theme:a,token:s,hashId:u,nonce:()=>null==p?void 0:p.nonce,clientOnly:o.clientOnly,order:o.order||-999};Us(Object.assign(Object.assign({},x),{clientOnly:!1,path:["Shared",m]}),(()=>[{"&":qs(s)}])),((e,t)=>{const[n,r]=wf();Us({theme:n,token:r,hashId:"",path:["ant-design-icons",e],nonce:()=>null==t?void 0:t.nonce},(()=>[{[`.${e}`]:Object.assign(Object.assign({},{display:"inline-flex",alignItems:"center",color:"inherit",fontStyle:"normal",lineHeight:0,textAlign:"center",textTransform:"none",verticalAlign:"-0.125em",textRendering:"optimizeLegibility","-webkit-font-smoothing":"antialiased","-moz-osx-font-smoothing":"grayscale","> *":{lineHeight:1},svg:{display:"inline-block"}}),{[`.${e} .${e}-icon`]:{display:"block"}})}]))})(d,p);const w=Us(Object.assign(Object.assign({},x),{path:[l,e,d]}),(()=>{if(!1===o.injectStyle)return[];const{token:t,flush:a}=function(e){let t,n=e,r=jf;return Bf&&"undefined"!=typeof Proxy&&(t=new Set,n=new Proxy(e,{get:(e,n)=>(Lf&&t.add(n),e[n])}),r=(e,n)=>{var r;Of[e]={global:Array.from(t),component:Object.assign(Object.assign({},null===(r=Of[e])||void 0===r?void 0:r.component),n)}}),{token:n,keys:t,flush:r}}(s),l=Pf(i,c,r),h=`.${e}`,p=Nf(i,c,l,{deprecatedTokens:o.deprecatedTokens,format:o.format});f&&Object.keys(l).forEach((e=>{l[e]=`var(${ys(e,((e,t)=>`${[t,e.replace(/([A-Z]+)([A-Z][a-z]+)/g,"$1-$2").replace(/([a-z])([A-Z])/g,"$1-$2")].filter(Boolean).join("-")}`)(i,f.prefix))})`}));const y=Ff(t,{componentCls:h,prefixCls:e,iconCls:`.${d}`,antCls:`.${m}`,calc:v,max:g,min:b},f?l:p),x=n(y,{hashId:u,prefixCls:e,rootPrefixCls:m,iconPrefixCls:d});return a(i,p),[!1===o.resetStyle?null:Ks(y,e),x]}));return[w,sa()(u,null==f?void 0:f.key)]}}const _f=e=>{const{componentCls:t,contentBg:n,padding:r,headerBg:o,headerPadding:a,collapseHeaderPaddingSM:i,collapseHeaderPaddingLG:l,collapsePanelBorderRadius:c,lineWidth:u,lineType:s,colorBorder:f,colorText:h,colorTextHeading:d,colorTextDisabled:p,fontSizeLG:m,lineHeight:y,lineHeightLG:v,marginSM:g,paddingSM:b,paddingLG:x,paddingXS:w,motionDurationSlow:E,fontSizeIcon:A,contentPadding:C,fontHeight:S,fontHeightLG:k}=e,B=`${ps(u)} ${s} ${f}`;return{[t]:Object.assign(Object.assign({},Vs(e)),{backgroundColor:o,border:B,borderBottom:0,borderRadius:c,"&-rtl":{direction:"rtl"},[`& > ${t}-item`]:{borderBottom:B,"&:last-child":{[`\n            &,\n            & > ${t}-header`]:{borderRadius:`0 0 ${ps(c)} ${ps(c)}`}},[`> ${t}-header`]:{position:"relative",display:"flex",flexWrap:"nowrap",alignItems:"flex-start",padding:a,color:d,lineHeight:y,cursor:"pointer",transition:`all ${E}, visibility 0s`,[`> ${t}-header-text`]:{flex:"auto"},"&:focus":{outline:"none"},[`${t}-expand-icon`]:{height:S,display:"flex",alignItems:"center",paddingInlineEnd:g},[`${t}-arrow`]:Object.assign(Object.assign({},{display:"inline-flex",alignItems:"center",color:"inherit",fontStyle:"normal",lineHeight:0,textAlign:"center",textTransform:"none",verticalAlign:"-0.125em",textRendering:"optimizeLegibility","-webkit-font-smoothing":"antialiased","-moz-osx-font-smoothing":"grayscale","> *":{lineHeight:1},svg:{display:"inline-block"}}),{fontSize:A,svg:{transition:`transform ${E}`}}),[`${t}-header-text`]:{marginInlineEnd:"auto"}},[`${t}-icon-collapsible-only`]:{cursor:"unset",[`${t}-expand-icon`]:{cursor:"pointer"}}},[`${t}-content`]:{color:h,backgroundColor:n,borderTop:B,[`& > ${t}-content-box`]:{padding:C},"&-hidden":{display:"none"}},"&-small":{[`> ${t}-item`]:{[`> ${t}-header`]:{padding:i,paddingInlineStart:w,[`> ${t}-expand-icon`]:{marginInlineStart:e.calc(b).sub(w).equal()}},[`> ${t}-content > ${t}-content-box`]:{padding:b}}},"&-large":{[`> ${t}-item`]:{fontSize:m,lineHeight:v,[`> ${t}-header`]:{padding:l,paddingInlineStart:r,[`> ${t}-expand-icon`]:{height:k,marginInlineStart:e.calc(x).sub(r).equal()}},[`> ${t}-content > ${t}-content-box`]:{padding:x}}},[`${t}-item:last-child`]:{[`> ${t}-content`]:{borderRadius:`0 0 ${ps(c)} ${ps(c)}`}},[`& ${t}-item-disabled > ${t}-header`]:{"\n          &,\n          & > .arrow\n        ":{color:p,cursor:"not-allowed"}},[`&${t}-icon-position-end`]:{[`& > ${t}-item`]:{[`> ${t}-header`]:{[`${t}-expand-icon`]:{order:1,paddingInlineEnd:0,paddingInlineStart:g}}}}})}},Df=e=>{const{componentCls:t}=e;return{[`${t}-rtl`]:{[`> ${t}-item > ${t}-header ${t}-arrow svg`]:{transform:"rotate(180deg)"}}}},If=e=>{const{componentCls:t,headerBg:n,paddingXXS:r,colorBorder:o}=e;return{[`${t}-borderless`]:{backgroundColor:n,border:0,[`> ${t}-item`]:{borderBottom:`1px solid ${o}`},[`\n        > ${t}-item:last-child,\n        > ${t}-item:last-child ${t}-header\n      `]:{borderRadius:0},[`> ${t}-item:last-child`]:{borderBottom:0},[`> ${t}-item > ${t}-content`]:{backgroundColor:"transparent",borderTop:0},[`> ${t}-item > ${t}-content > ${t}-content-box`]:{paddingTop:r}}}},Mf=e=>{const{componentCls:t,paddingSM:n}=e;return{[`${t}-ghost`]:{backgroundColor:"transparent",border:0,[`> ${t}-item`]:{borderBottom:0,[`> ${t}-content`]:{backgroundColor:"transparent",border:0,[`> ${t}-content-box`]:{paddingBlock:n}}}}}},Rf=((e,n,r,o)=>{const a=Tf(e,(e=>{const t=Ff(e,{collapseHeaderPaddingSM:`${ps(e.paddingXS)} ${ps(e.paddingSM)}`,collapseHeaderPaddingLG:`${ps(e.padding)} ${ps(e.paddingLG)}`,collapsePanelBorderRadius:e.borderRadiusLG});return[_f(t),If(t),Mf(t),Df(t),Xs(t)]}),r,o),i=((e,n,r)=>{function o(t){return`${e}${t.slice(0,1).toUpperCase()}${t.slice(1)}`}const{unitless:a={},injectStyle:i=!0}={},l={[o("zIndexPopup")]:!0};Object.keys(a).forEach((e=>{l[o(e)]=a[e]}));const c=r=>{let{rootCls:a,cssVar:i}=r;const[,c]=wf();return function(e,n){var r=e.key,o=e.prefix,a=e.unitless,i=e.ignore,l=e.token,c=e.scope,u=void 0===c?"":c,s=(0,t.useContext)(es),f=s.cache.instanceId,h=s.container,d=l._tokenKey,p=[].concat(pc(e.path),[r,u,d]),m=As(Hs,p,(function(){var e=n(),t=oa(gs(e,r,{prefix:o,unitless:a,ignore:i,scope:u}),2),l=t[0],c=t[1];return[l,c,Gs(p,c),r]}),(function(e){var t=oa(e,3)[2];ds&&ii(t,{mark:Xu})}),(function(e){var t=oa(e,3),n=t[1],o=t[2];if(n){var a=li(n,o,{mark:Xu,prepend:"queue",attachTo:h,priority:-999});a[Qu]=f,a.setAttribute(Ku,r)}}))}({path:[e],prefix:i.prefix,key:null==i?void 0:i.key,unitless:Object.assign(Object.assign({},vf),l),ignore:gf,token:c,scope:a},(()=>{const t=Pf(e,c,n),r=Nf(e,c,t,{format:void 0,deprecatedTokens:void 0});return Object.keys(t).forEach((e=>{r[o(e)]=r[e],delete r[e]})),r})),null};return n=>{const[,,,,r]=wf();return o=>i&&r?t.createElement(t.Fragment,null,t.createElement(c,{rootCls:n,cssVar:r,component:e}),o):o}})(e,r);return function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;const[,n]=a(e);return[i(t),n]}})("Collapse",0,(e=>({headerPadding:`${e.paddingSM}px ${e.padding}px`,headerBg:e.colorFillAlter,contentPadding:`${e.padding}px 16px`,contentBg:e.colorBgContainer}))),zf=t.forwardRef(((e,n)=>{const{getPrefixCls:r,direction:o,collapse:a}=t.useContext(Uu),{prefixCls:i,className:l,rootClassName:c,style:u,bordered:s=!0,ghost:f,size:h,expandIconPosition:d="start",children:p,expandIcon:m}=e,y=(e=>{const n=t.useContext(Wu);return t.useMemo((()=>e?"string"==typeof e?null!=e?e:n:e instanceof Function?e(n):n:n),[e,n])})((e=>{var t;return null!==(t=null!=h?h:e)&&void 0!==t?t:"middle"})),v=r("collapse",i),g=r(),[b,x]=Rf(v),w=t.useMemo((()=>"left"===d?"start":"right"===d?"end":d),[d]),E=sa()(`${v}-icon-position-${w}`,{[`${v}-borderless`]:!s,[`${v}-rtl`]:"rtl"===o,[`${v}-ghost`]:!!f,[`${v}-${y}`]:"middle"!==y},null==a?void 0:a.className,l,c,x),A=Object.assign(Object.assign({},function(){return{motionName:`${arguments.length>0&&void 0!==arguments[0]?arguments[0]:"ant"}-motion-collapse`,onAppearStart:Mu,onEnterStart:Mu,onAppearActive:Ru,onEnterActive:Ru,onLeaveStart:zu,onLeaveActive:Mu,onAppearEnd:Gu,onEnterEnd:Gu,onLeaveEnd:Gu,motionDeadline:500}}(g)),{motionAppear:!1,leavedClassName:`${v}-content-hidden`}),C=t.useMemo((()=>p?Ac(p).map(((e,t)=>{var n,r;if(null===(n=e.props)||void 0===n?void 0:n.disabled){const n=null!==(r=e.key)&&void 0!==r?r:String(t),{disabled:o,collapsible:a}=e.props;return $u(e,Object.assign(Object.assign({},Iu(e.props,["disabled"])),{key:n,collapsible:null!=a?a:o?"disabled":void 0}))}return e})):null),[p]);return b(t.createElement(Du,Object.assign({ref:n,openMotion:A},Iu(e,["rootClassName"]),{expandIcon:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const n=m?m(e):t.createElement(dc,{rotate:e.isActive?90:void 0});return $u(n,(()=>({className:sa()(n.props.className,`${v}-arrow`)})))},prefixCls:v,className:E,style:Object.assign(Object.assign({},null==a?void 0:a.style),u)}),C))})),Gf=Object.assign(zf,{Panel:Yu});function Zf(e){return Zf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zf(e)}function $f(){$f=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Zf(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Zf(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Uf(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Hf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Wf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wf(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Yf=function(){var e=Hf((0,t.useState)([]),2),n=e[0],r=e[1],o=Hf((0,t.useState)([]),2),a=o[0],i=o[1],l=Hf((0,t.useState)(null),2),c=(l[0],l[1]),u=Hf((0,t.useState)(!0),2),s=u[0],f=u[1];(0,t.useEffect)((function(){h()}),[]);var h=function(){var e,t=(e=$f().mark((function e(){var t,n,o,a,l;return $f().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/riddles",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/riddles",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:o=e.sent,a=n.data,l=o.data,r(a[0]),i(l[0]),console.log("podaci iz zagonetki",a),f(!1),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),c(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Uf(a,r,o,i,l,"next",e)}function l(e){Uf(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),d=n.answer,p=a.answer;return s?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement("div",{className:"trivia"},t.createElement("h2",null,"Riddles"),t.createElement("h3",null,n.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},d),showArrow:!1}]}),t.createElement("h3",null,a.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},a.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}))};function Vf(e){return Vf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Vf(e)}function qf(){qf=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Vf(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Vf(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Kf(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Xf(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Kf(a,r,o,i,l,"next",e)}function l(e){Kf(a,r,o,i,l,"throw",e)}i(void 0)}))}}function Qf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Jf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Jf(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Jf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const eh=function(){var e=Qf((0,t.useState)(null),2),n=(e[0],e[1]),r=Qf((0,t.useState)([]),2),o=r[0],a=r[1],i=Qf((0,t.useState)([]),2),l=i[0],c=i[1];(0,t.useEffect)((function(){u(),s()}),[]);var u=function(){var e=Xf(qf().mark((function e(){var t,r;return qf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,qr.get("https://yesno.wtf/api");case 4:t=e.sent,r=t.data,console.log("randum sala",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}(),s=function(){var e=Xf(qf().mark((function e(){var t,r;return qf().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,qr.get("https://www.punapi.rest/api/pun");case 4:t=e.sent,r=t.data,console.log("random punapi",r),c(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"jokesMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Random GIF"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,t.createElement("img",{src:o.image}))),t.createElement("tr",null,t.createElement("td",{className:"borderGif"},o.answer)),t.createElement("tr",null,t.createElement("td",{className:"pun"},"Pun")),t.createElement("tr",null,t.createElement("td",null,l.pun)))))};function th(e){return th="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},th(e)}function nh(){nh=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==th(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(th(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function rh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function oh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ah(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ah(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ah(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ih=function(){var e=oh((0,t.useState)(null),2),n=(e[0],e[1]),r=oh((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=nh().mark((function e(){var t,r;return nh().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,qr.get("https://api.api-ninjas.com/v1/dadjokes?limit=2",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,r=t.data,console.log("randum tatine sale",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){rh(a,r,o,i,l,"next",e)}function l(e){rh(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"dadJokes"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Dad jokes"))),o.map((function(e){return t.createElement("tbody",{key:e.joke},t.createElement("tr",null,t.createElement("td",{className:"border"},e.joke)))}))))};function lh(e){return lh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},lh(e)}function ch(){ch=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==lh(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(lh(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function uh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function sh(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){uh(a,r,o,i,l,"next",e)}function l(e){uh(a,r,o,i,l,"throw",e)}i(void 0)}))}}function fh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return hh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?hh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const dh=function(){var e=fh((0,t.useState)(null),2),n=(e[0],e[1]),r=fh((0,t.useState)([]),2),o=r[0],a=r[1],i=fh((0,t.useState)([]),2),l=i[0],c=i[1];(0,t.useEffect)((function(){u(),f()}),[]);var u=function(){var e=sh(ch().mark((function e(){var t,r;return ch().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,qr.get("https://api.chucknorris.io/jokes/random");case 4:t=e.sent,r=t.data,console.log("chuk norris sale",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}(),s=Math.random(),f=function(){var e=sh(ch().mark((function e(){var t;return ch().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://robohash.org/set_set1/".concat(s,".png"),e.prev=1,e.next=4,qr.get(t);case 4:e.sent,console.log("robot randum slike",s),c(t),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})));return function(){return e.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"dadJokes"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},"Chuk Norris jokes"))),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,o.value)),t.createElement("tr",null,t.createElement("td",{className:"borderChuk"},"Created: ",o.created_at)),t.createElement("tr",null,t.createElement("td",null,t.createElement("img",{src:l}))))))};function ph(e){return ph="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ph(e)}function mh(){mh=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==ph(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(ph(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function yh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function vh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return gh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const bh=function(){var e=vh((0,t.useState)(null),2),n=(e[0],e[1]),r=vh((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=mh().mark((function e(){var t,r;return mh().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,qr.get("https://v2.jokeapi.dev/joke/Any?safe-mode");case 4:t=e.sent,r=t.data,console.log("random jokes",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){yh(a,r,o,i,l,"next",e)}function l(e){yh(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),l=o.delivery;return t.createElement(t.Fragment,null,t.createElement("div",{className:"jokeMain"},t.createElement("h3",null,"Joke "),t.createElement("h3",null,"Category: ",o.category),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"jokeAnswer"},o.setup,"  ",o.joke),children:t.createElement("p",{className:"jokeAns"},l),showArrow:!1}]})))};function xh(e){return xh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xh(e)}function wh(){wh=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==xh(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(xh(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Eh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Ah(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ch(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ch(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ch(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Sh=function(){var e=Ah((0,t.useState)(null),2),n=(e[0],e[1]),r=Ah((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=wh().mark((function e(){var t,r;return wh().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,qr.get("https://official-joke-api.appspot.com/random_joke");case 4:t=e.sent,r=t.data,console.log("oficial jokes",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Eh(a,r,o,i,l,"next",e)}function l(e){Eh(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),l=o.punchline;return t.createElement(t.Fragment,null,t.createElement("div",{className:"jokeMain"},t.createElement("h3",null,"Random Joke"),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"jokeAnswer"},o.setup),children:t.createElement("p",{className:"jokeAns"},l),showArrow:!1}]})))};function kh(e){return kh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kh(e)}function Bh(){Bh=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==kh(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(kh(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Lh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Fh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Oh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Oh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Oh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const jh=function(){var e=Fh((0,t.useState)(null),2),n=(e[0],e[1]),r=Fh((0,t.useState)([]),2),o=r[0],a=r[1];(0,t.useEffect)((function(){i()}),[]);var i=function(){var e,t=(e=Bh().mark((function e(){var t,r;return Bh().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=1,e.next=4,qr.get("https://api.api-ninjas.com/v1/jokes?limit=3",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 4:t=e.sent,r=t.data,console.log("rezultat gradova",r),a(r),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),n(e.t0);case 13:case"end":return e.stop()}}),e,null,[[1,10]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Lh(a,r,o,i,l,"next",e)}function l(e){Lh(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("table",{className:"dadJokes"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null)),t.createElement("tr",null,t.createElement("th",null,"Random Jokes"))),o.map((function(e){return t.createElement("tbody",{key:e.joke},t.createElement("tr",null,t.createElement("td",{className:"border"},e.joke)))}))))};function Ph(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Nh=function(){var e,n,r=(e=(0,t.useState)(null),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return Ph(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ph(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return r[0],r[1],t.createElement(t.Fragment,null,t.createElement("div",{className:"jokesText"},t.createElement("div",null,t.createElement(bh,null),t.createElement(Sh,null)),t.createElement("div",null,t.createElement(eh,null)),t.createElement("div",null,t.createElement(ih,null),t.createElement(jh,null),t.createElement(dh,null))))};function Th(e){return Th="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Th(e)}function _h(){_h=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Th(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Th(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Dh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Ih(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Mh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Mh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Rh=function(e){var n=Ih((0,t.useState)([]),2),r=n[0],o=n[1],a=Ih((0,t.useState)([]),2),i=a[0],l=a[1],c=Ih((0,t.useState)(null),2),u=(c[0],c[1]),s=Ih((0,t.useState)(!0),2),f=s[0],h=s[1];Tt().triviaCat,(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=_h().mark((function e(){var t,n,r,a,i;return _h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=artliterature",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=artliterature",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),console.log("podaci iz  trivia",a),h(!1),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),u(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Dh(a,r,o,i,l,"next",e)}function l(e){Dh(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Art & Literature"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]}))};function zh(e){return zh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zh(e)}function Gh(){Gh=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==zh(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(zh(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Zh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function $h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Uh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Uh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Uh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Hh=function(e){var n=$h((0,t.useState)([]),2),r=n[0],o=n[1],a=$h((0,t.useState)([]),2),i=a[0],l=a[1],c=$h((0,t.useState)(null),2),u=(c[0],c[1]),s=$h((0,t.useState)(!0),2),f=s[0],h=s[1];Tt().triviaCat,(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=Gh().mark((function e(){var t,n,r,a,i;return Gh().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=sciencenature",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=sciencenature",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),console.log("podaci iz  trivia",a),h(!1),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),u(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Zh(a,r,o,i,l,"next",e)}function l(e){Zh(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Science & Nature"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]}))};function Wh(e){return Wh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wh(e)}function Yh(){Yh=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Wh(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Wh(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Vh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function qh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Xh=function(e){var n=qh((0,t.useState)([]),2),r=n[0],o=n[1],a=qh((0,t.useState)([]),2),i=a[0],l=a[1],c=qh((0,t.useState)(null),2),u=(c[0],c[1]),s=qh((0,t.useState)(!0),2),f=s[0],h=s[1];Tt(),(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=Yh().mark((function e(){var t,n,r,a,i;return Yh().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=general",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=general",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),console.log("podaci iz  trivia general",a),h(!1),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(2),u(e.t0);case 20:case"end":return e.stop()}}),e,null,[[2,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Vh(a,r,o,i,l,"next",e)}function l(e){Vh(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement("div",{className:"trivia"},t.createElement("h3",null,"General"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]}))};function Qh(e){return Qh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qh(e)}function Jh(){Jh=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Qh(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Qh(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ed(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function td(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return nd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const rd=function(e){var n=td((0,t.useState)([]),2),r=n[0],o=n[1],a=td((0,t.useState)([]),2),i=a[0],l=a[1],c=td((0,t.useState)(null),2),u=(c[0],c[1]),s=td((0,t.useState)(!0),2),f=s[0],h=s[1];Tt().triviaCat,(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=Jh().mark((function e(){var t,n,r,a,i;return Jh().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=fooddrink",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=fooddrink",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),h(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ed(a,r,o,i,l,"next",e)}function l(e){ed(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Food & Drink"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function od(e){return od="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},od(e)}function ad(){ad=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==od(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(od(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function id(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function ld(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ud=function(e){var n=ld((0,t.useState)([]),2),r=n[0],o=n[1],a=ld((0,t.useState)([]),2),i=a[0],l=a[1],c=ld((0,t.useState)(null),2),u=(c[0],c[1]),s=ld((0,t.useState)(!0),2),f=s[0],h=s[1];Tt().triviaCat,(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=ad().mark((function e(){var t,n,r,a,i;return ad().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=peopleplaces",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=peopleplaces",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),h(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){id(a,r,o,i,l,"next",e)}function l(e){id(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"People & Place"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function sd(e){return sd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sd(e)}function fd(){fd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==sd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(sd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function hd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function dd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return pd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const md=function(e){var n=dd((0,t.useState)([]),2),r=n[0],o=n[1],a=dd((0,t.useState)([]),2),i=a[0],l=a[1],c=dd((0,t.useState)(null),2),u=(c[0],c[1]),s=dd((0,t.useState)(!0),2),f=s[0],h=s[1];Tt().triviaCat,(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=fd().mark((function e(){var t,n,r,a,i;return fd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=historyholidays",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=historyholidays",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),h(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){hd(a,r,o,i,l,"next",e)}function l(e){hd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"History & Holidays"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function yd(e){return yd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yd(e)}function vd(){vd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==yd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(yd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function gd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function bd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return xd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const wd=function(e){var n=bd((0,t.useState)([]),2),r=n[0],o=n[1],a=bd((0,t.useState)([]),2),i=a[0],l=a[1],c=bd((0,t.useState)(null),2),u=(c[0],c[1]),s=bd((0,t.useState)(!0),2),f=s[0],h=s[1];Tt().triviaCat,(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=vd().mark((function e(){var t,n,r,a,i;return vd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=geography",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=geography",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),h(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){gd(a,r,o,i,l,"next",e)}function l(e){gd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Geography"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function Ed(e){return Ed="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ed(e)}function Ad(){Ad=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Ed(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ed(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Cd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Sd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return kd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?kd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function kd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Bd=function(e){var n=Sd((0,t.useState)([]),2),r=n[0],o=n[1],a=Sd((0,t.useState)([]),2),i=a[0],l=a[1],c=Sd((0,t.useState)(null),2),u=(c[0],c[1]),s=Sd((0,t.useState)(!0),2),f=s[0],h=s[1];Tt().triviaCat,(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=Ad().mark((function e(){var t,n,r,a,i;return Ad().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=entertainment",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=entertainment",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),h(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Cd(a,r,o,i,l,"next",e)}function l(e){Cd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Entertainment"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function Ld(e){return Ld="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ld(e)}function Fd(){Fd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Ld(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ld(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Od(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function jd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Pd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Pd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Nd=function(e){var n=jd((0,t.useState)([]),2),r=n[0],o=n[1],a=jd((0,t.useState)([]),2),i=a[0],l=a[1],c=jd((0,t.useState)(null),2),u=(c[0],c[1]),s=jd((0,t.useState)(!0),2),f=s[0],h=s[1];Tt().triviaCat,(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=Fd().mark((function e(){var t,n,r,a,i;return Fd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=toysgames",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=toysgames",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),h(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Od(a,r,o,i,l,"next",e)}function l(e){Od(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Toys & Games"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function Td(e){return Td="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Td(e)}function _d(){_d=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Td(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Td(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Dd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Id(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Md(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Md(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Md(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Rd=function(e){var n=Id((0,t.useState)([]),2),r=n[0],o=n[1],a=Id((0,t.useState)([]),2),i=a[0],l=a[1],c=Id((0,t.useState)(null),2),u=(c[0],c[1]),s=Id((0,t.useState)(!0),2),f=s[0],h=s[1];Tt().triviaCat,(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=_d().mark((function e(){var t,n,r,a,i;return _d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=music",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=music",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),h(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Dd(a,r,o,i,l,"next",e)}function l(e){Dd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Music"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function zd(e){return zd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zd(e)}function Gd(){Gd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==zd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(zd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Zd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function $d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ud(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ud(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ud(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Hd=function(e){var n=$d((0,t.useState)([]),2),r=n[0],o=n[1],a=$d((0,t.useState)([]),2),i=a[0],l=a[1],c=$d((0,t.useState)(null),2),u=(c[0],c[1]),s=$d((0,t.useState)(!0),2),f=s[0],h=s[1];Tt().triviaCat,(0,t.useEffect)((function(){d()}),[]);var d=function(){var e,t=(e=Gd().mark((function e(){var t,n,r,a,i;return Gd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=language",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=language",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:r=e.sent,a=n.data[0],i=r.data[0],o(a),l(i),h(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),u(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Zd(a,r,o,i,l,"next",e)}function l(e){Zd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),p=r.answer,m=i.answer;return f?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Language"),t.createElement("p",null,r.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},r.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]}),t.createElement("p",null,i.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},i.question),children:t.createElement("p",{className:"triviaAns"},m),showArrow:!1}]})))};function Wd(e){return Wd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wd(e)}function Yd(){Yd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Wd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Wd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Vd(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function qd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kd(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Xd=function(){var e=qd((0,t.useState)([]),2),n=e[0],r=e[1],o=qd((0,t.useState)([]),2),a=o[0],i=o[1],l=qd((0,t.useState)(null),2),c=(l[0],l[1]),u=qd((0,t.useState)(!0),2),s=u[0],f=u[1];(0,t.useEffect)((function(){h()}),[]);var h=function(){var e,t=(e=Yd().mark((function e(){var t,n,o,a,l;return Yd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=religionmythology",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=religionmythology",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:o=e.sent,a=n.data[0],l=o.data[0],r(a),i(l),console.log("prvi podaci religija",a),console.log("drugi podaci religija",l),f(!1),e.next=21;break;case 18:e.prev=18,e.t0=e.catch(2),c(e.t0);case 21:case"end":return e.stop()}}),e,null,[[2,18]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Vd(a,r,o,i,l,"next",e)}function l(e){Vd(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),d=n.answer,p=a.answer;return s?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Religion & Mythology"),t.createElement("p",null,n.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},d),showArrow:!1}]}),t.createElement("p",null,a.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},a.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]})))};function Qd(e){return Qd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qd(e)}function Jd(){Jd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Qd(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Qd(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ep(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function tp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return np(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?np(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function np(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const rp=function(){var e=tp((0,t.useState)([]),2),n=e[0],r=e[1],o=tp((0,t.useState)([]),2),a=o[0],i=o[1],l=tp((0,t.useState)(null),2),c=(l[0],l[1]),u=tp((0,t.useState)(!0),2),s=u[0],f=u[1];(0,t.useEffect)((function(){h()}),[]);var h=function(){var e,t=(e=Jd().mark((function e(){var t,n,o,a,l;return Jd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=sportsleisure",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=sportsleisure",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:o=e.sent,a=n.data[0],l=o.data[0],r(a),i(l),f(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),c(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ep(a,r,o,i,l,"next",e)}function l(e){ep(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),d=n.answer,p=a.answer;return s?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Sports & Leisure"),t.createElement("p",null,n.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},d),showArrow:!1}]}),t.createElement("p",null,a.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},a.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]})))};function op(e){return op="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},op(e)}function ap(){ap=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==op(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(op(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function ip(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function lp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const up=function(){var e=lp((0,t.useState)([]),2),n=e[0],r=e[1],o=lp((0,t.useState)([]),2),a=o[0],i=o[1],l=lp((0,t.useState)(null),2),c=(l[0],l[1]),u=lp((0,t.useState)(!0),2),s=u[0],f=u[1];(0,t.useEffect)((function(){h()}),[]);var h=function(){var e,t=(e=ap().mark((function e(){var t,n,o,a,l;return ap().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="https://api.api-ninjas.com/v1/trivia?category=mathematics",e.prev=2,e.next=5,qr.get("https://api.api-ninjas.com/v1/trivia?category=mathematics",{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 5:return n=e.sent,e.next=8,qr.get(t,{headers:{"X-Api-Key":"D+dYjCxDSm5fEkIqyoCIeA==c2GvujXTiAbMIH05"}});case 8:o=e.sent,a=n.data[0],l=o.data[0],r(a),i(l),f(!1),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(2),c(e.t0);case 19:case"end":return e.stop()}}),e,null,[[2,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ip(a,r,o,i,l,"next",e)}function l(e){ip(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}(),d=n.answer,p=a.answer;return s?t.createElement("div",{className:"trivia"},t.createElement(co,null)):t.createElement(t.Fragment,null,t.createElement("div",{className:"trivia"},t.createElement("h3",null,"Mathematics"),t.createElement("p",null,n.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},n.question),children:t.createElement("p",{className:"triviaAns"},d),showArrow:!1}]}),t.createElement("p",null,a.title),t.createElement(Gf,{size:"large",items:[{label:t.createElement("p",{className:"triviaAnswer"},a.question),children:t.createElement("p",{className:"triviaAns"},p),showArrow:!1}]})))};var sp=o(9378),fp=o(6523),hp=o(9766),dp=o(8010);const pp=["sx"],mp=["className","component"];var yp=o(7078);const vp=(0,ue.Z)("MuiBox",["root"]),gp=(0,w.Z)(),bp=function(e={}){const{themeId:n,defaultTheme:r,defaultClassName:o="MuiBox-root",generateClassName:a}=e,i=(0,sp.ZP)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(fp.Z),l=t.forwardRef((function(e,t){const l=(0,Io.Z)(r),c=function(e){const{sx:t}=e,n=(0,A.Z)(e,pp),{systemProps:r,otherProps:o}=(e=>{var t,n;const r={systemProps:{},otherProps:{}},o=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:dp.Z;return Object.keys(e).forEach((t=>{o[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r})(n);let a;return a=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,hp.P)(n)?(0,E.Z)({},r,n):r}:(0,E.Z)({},r,t),(0,E.Z)({},o,{sx:a})}(e),{className:u,component:s="div"}=c,f=(0,A.Z)(c,mp);return(0,B.jsx)(i,(0,E.Z)({as:s,ref:t,className:(0,M.Z)(u,a?a(o):o),theme:n&&l[n]||l},f))}));return l}({themeId:T.Z,defaultTheme:gp,defaultClassName:vp.root,generateClassName:yp.Z.generate}),xp=bp;var wp="unmounted",Ep="exited",Ap="entering",Cp="entered",Sp="exiting",kp=function(e){function n(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=Ep,r.appearStatus=Ap):o=Cp:o=t.unmountOnExit||t.mountOnEnter?wp:Ep,r.state={status:o},r.nextCallback=null,r}q(n,e),n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===wp?{status:Ep}:null};var r=n.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Ap&&n!==Cp&&(t=Ap):n!==Ap&&n!==Cp||(t=Sp)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===Ap){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:Ze.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Ep&&this.setState({status:wp})},r.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[Ze.findDOMNode(this),r],a=o[0],i=o[1],l=this.getTimeouts(),c=r?l.appear:l.enter;e||n?(this.props.onEnter(a,i),this.safeSetState({status:Ap},(function(){t.props.onEntering(a,i),t.onTransitionEnd(c,(function(){t.safeSetState({status:Cp},(function(){t.props.onEntered(a,i)}))}))}))):this.safeSetState({status:Cp},(function(){t.props.onEntered(a)}))},r.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:Ze.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:Sp},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Ep},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Ep},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:Ze.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var e=this.state.status;if(e===wp)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,(0,A.Z)(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return t.createElement(K.Provider,{value:null},"function"==typeof r?r(e,o):t.cloneElement(t.Children.only(r),o))},n}(t.Component);function Bp(){}kp.contextType=K,kp.propTypes={},kp.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Bp,onEntering:Bp,onEntered:Bp,onExit:Bp,onExiting:Bp,onExited:Bp},kp.UNMOUNTED=wp,kp.EXITED=Ep,kp.ENTERING=Ap,kp.ENTERED=Cp,kp.EXITING=Sp;const Lp=kp;var Fp=o(6067);function Op(e,t){var n,r;const{timeout:o,easing:a,style:i={}}=e;return{duration:null!=(n=i.transitionDuration)?n:"number"==typeof o?o:o[t.mode]||0,easing:null!=(r=i.transitionTimingFunction)?r:"object"==typeof a?a[t.mode]:a,delay:i.transitionDelay}}function jp(e){return(0,Ce.Z)("MuiCollapse",e)}(0,ue.Z)("MuiCollapse",["root","horizontal","vertical","entered","hidden","wrapper","wrapperInner"]);const Pp=["addEndListener","children","className","collapsedSize","component","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","orientation","style","timeout","TransitionComponent"],Np=(0,Z.ZP)("div",{name:"MuiCollapse",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.orientation],"entered"===n.state&&t.entered,"exited"===n.state&&!n.in&&"0px"===n.collapsedSize&&t.hidden]}})((({theme:e,ownerState:t})=>(0,E.Z)({height:0,overflow:"hidden",transition:e.transitions.create("height")},"horizontal"===t.orientation&&{height:"auto",width:0,transition:e.transitions.create("width")},"entered"===t.state&&(0,E.Z)({height:"auto",overflow:"visible"},"horizontal"===t.orientation&&{width:"auto"}),"exited"===t.state&&!t.in&&"0px"===t.collapsedSize&&{visibility:"hidden"}))),Tp=(0,Z.ZP)("div",{name:"MuiCollapse",slot:"Wrapper",overridesResolver:(e,t)=>t.wrapper})((({ownerState:e})=>(0,E.Z)({display:"flex",width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"}))),_p=(0,Z.ZP)("div",{name:"MuiCollapse",slot:"WrapperInner",overridesResolver:(e,t)=>t.wrapperInner})((({ownerState:e})=>(0,E.Z)({width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"}))),Dp=t.forwardRef((function(e,n){const r=(0,$.Z)({props:e,name:"MuiCollapse"}),{addEndListener:o,children:a,className:i,collapsedSize:l="0px",component:c,easing:u,in:s,onEnter:f,onEntered:h,onEntering:d,onExit:p,onExited:m,onExiting:y,orientation:v="vertical",style:g,timeout:b=Fp.x9.standard,TransitionComponent:x=Lp}=r,w=(0,A.Z)(r,Pp),C=(0,E.Z)({},r,{orientation:v,collapsedSize:l}),S=(e=>{const{orientation:t,classes:n}=e,r={root:["root",`${t}`],entered:["entered"],hidden:["hidden"],wrapper:["wrapper",`${t}`],wrapperInner:["wrapperInner",`${t}`]};return(0,z.Z)(r,jp,n)})(C),k=function(){const e=(0,Io.Z)(Ro.Z);return e[T.Z]||e}(),L=t.useRef(),F=t.useRef(null),O=t.useRef(),j="number"==typeof l?`${l}px`:l,P="horizontal"===v,N=P?"width":"height";t.useEffect((()=>()=>{clearTimeout(L.current)}),[]);const _=t.useRef(null),D=(0,U.Z)(n,_),I=e=>t=>{if(e){const n=_.current;void 0===t?e(n):e(n,t)}},R=()=>F.current?F.current[P?"clientWidth":"clientHeight"]:0,G=I(((e,t)=>{F.current&&P&&(F.current.style.position="absolute"),e.style[N]=j,f&&f(e,t)})),Z=I(((e,t)=>{const n=R();F.current&&P&&(F.current.style.position="");const{duration:r,easing:o}=Op({style:g,timeout:b,easing:u},{mode:"enter"});if("auto"===b){const t=k.transitions.getAutoHeightDuration(n);e.style.transitionDuration=`${t}ms`,O.current=t}else e.style.transitionDuration="string"==typeof r?r:`${r}ms`;e.style[N]=`${n}px`,e.style.transitionTimingFunction=o,d&&d(e,t)})),H=I(((e,t)=>{e.style[N]="auto",h&&h(e,t)})),W=I((e=>{e.style[N]=`${R()}px`,p&&p(e)})),Y=I(m),V=I((e=>{const t=R(),{duration:n,easing:r}=Op({style:g,timeout:b,easing:u},{mode:"exit"});if("auto"===b){const n=k.transitions.getAutoHeightDuration(t);e.style.transitionDuration=`${n}ms`,O.current=n}else e.style.transitionDuration="string"==typeof n?n:`${n}ms`;e.style[N]=j,e.style.transitionTimingFunction=r,y&&y(e)}));return(0,B.jsx)(x,(0,E.Z)({in:s,onEnter:G,onEntered:H,onEntering:Z,onExit:W,onExited:Y,onExiting:V,addEndListener:e=>{"auto"===b&&(L.current=setTimeout(e,O.current||0)),o&&o(_.current,e)},nodeRef:_,timeout:"auto"===b?null:b},w,{children:(e,t)=>(0,B.jsx)(Np,(0,E.Z)({as:c,className:(0,M.Z)(S.root,i,{entered:S.entered,exited:!s&&"0px"===j&&S.hidden}[e]),style:(0,E.Z)({[P?"minWidth":"minHeight"]:j},g),ownerState:(0,E.Z)({},C,{state:e}),ref:D},t,{children:(0,B.jsx)(Tp,{ownerState:(0,E.Z)({},C,{state:e}),className:S.wrapper,ref:F,children:(0,B.jsx)(_p,{ownerState:(0,E.Z)({},C,{state:e}),className:S.wrapperInner,children:a})})}))}))}));Dp.muiSupportAuto=!0;const Ip=Dp;var Mp=o(5503);function Rp(e){return Rp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Rp(e)}function zp(){zp=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Rp(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Rp(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Gp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Zp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return $p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$p(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Up=function(e){var n=Zp((0,t.useState)(null),2),r=(n[0],n[1]),o=Zp((0,t.useState)([]),2),a=o[0],i=o[1];(0,t.useEffect)((function(){l()}),[]);var l=function(){var t,n=(t=zp().mark((function t(){var n,o,a;return zp().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n="https://collectionapi.metmuseum.org/public/collection/v1/objects/".concat(e.metropolitan),t.prev=1,t.next=4,qr.get(n);case 4:o=t.sent,a=o.data,console.log("rezultat metropolitan",a),i(a),t.next=13;break;case 10:t.prev=10,t.t0=t.catch(1),r(t.t0);case 13:case"end":return t.stop()}}),t,null,[[1,10]])})),function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(e){Gp(a,r,o,i,l,"next",e)}function l(e){Gp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return n.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement("tr",{className:"tableRow"},t.createElement("td",null,t.createElement("img",{className:"imgMetro",src:a.primaryImage,onError:function(e){var t=e.currentTarget;t.onerror=null,t.src="./img/noPicture.png"},alt:" no picture"}))),t.createElement("tr",null,t.createElement("td",{className:"dropdown"},t.createElement("span",null,a.artistDisplayName),t.createElement("span",{className:"dropdown-content"},t.createElement("p",null,a.artistRole),t.createElement("p",null,a.artistDisplayBio),t.createElement("a",{href:a.artistWikidata_URL,target:"_blank"},a.artistWikidata_URL),t.createElement("br",null),t.createElement("a",{href:a.artistULAN_URL,target:"_blank"},a.artistULAN_URL)))),t.createElement("tr",null,t.createElement("td",{className:"metroTitle"},a.title)),t.createElement("tr",null,t.createElement("td",null,a.objectDate)),t.createElement("tr",null,t.createElement("td",null,a.classification)),t.createElement("tr",null,t.createElement("td",null,a.medium)),t.createElement("tr",null,t.createElement("td",null,a.dimensions)),t.createElement("tr",null,t.createElement("td",null,a.culture)),t.createElement("tr",null,t.createElement("td",null,a.dynasty)),t.createElement("tr",null,t.createElement("td",null,a.creditLine)),t.createElement("tr",null,t.createElement("td",null,a.portfolio)),t.createElement("tr",null,t.createElement("td",null,a.department)),t.createElement("tr",null,t.createElement("td",{className:"forLink"},t.createElement("a",{href:a.objectURL,target:"_blank"},a.objectURL))),t.createElement("tr",null,t.createElement("td",null,t.createElement("hr",null))))};function Hp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Wp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Yp=function(e){var n=Hp((0,t.useState)(null),2),r=(n[0],n[1],Hp((0,t.useState)([]),2)),o=(r[0],r[1],Hp((0,t.useState)(!0),2)),a=(o[0],o[1],Hp((0,t.useState)(!1),2)),i=a[0],l=a[1],c=Hp((0,t.useState)([]),2);return c[0],c[1],Nt(),(0,t.useContext)(ea).searchStringValue,t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{className:"tableRow"},t.createElement(Jo,{"aria-label":"expand row",size:"small",onClick:function(){return l(!i)}},i?t.createElement(fl.Z,null):t.createElement(Mp.Z,null)),"  "+e.metropolitan)),t.createElement(Ip,{in:i,timeout:"auto",unmountOnExit:!0},t.createElement(xp,{sx:{margin:0}},t.createElement(Up,{metropolitan:null==e?void 0:e.metropolitan}))))};function Vp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return qp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Kp=function(e){var n=Vp((0,t.useState)(null),2),r=(n[0],n[1],Vp((0,t.useState)([]),2)),o=(r[0],r[1],Vp((0,t.useState)(!0),2)),a=(o[0],o[1],Vp((0,t.useState)(!1),2)),i=a[0],l=a[1],c=Vp((0,t.useState)([]),2);return c[0],c[1],Nt(),(0,t.useContext)(ea).searchStringValue,t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{className:"tableRow"},t.createElement(Jo,{"aria-label":"expand row",size:"small",onClick:function(){return l(!i)}},i?t.createElement(fl.Z,null):t.createElement(Mp.Z,null)),"  "+e.metropolitan)),t.createElement(Ip,{in:i,timeout:"auto",unmountOnExit:!0},t.createElement(xp,{sx:{margin:0}},t.createElement(Up,{metropolitan:e.metropolitan}))))};function Xp(e){return Xp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xp(e)}function Qp(){Qp=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,i=Object.create(a.prototype),l=new O(r||[]);return o(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var h="suspendedStart",d="suspendedYield",p="executing",m="completed",y={};function v(){}function g(){}function b(){}var x={};u(x,i,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(j([])));E&&E!==n&&r.call(E,i)&&(x=E);var A=b.prototype=v.prototype=Object.create(x);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,a,i,l){var c=f(e[o],e,a);if("throw"!==c.type){var u=c.arg,s=u.value;return s&&"object"==Xp(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function k(t,n,r){var o=h;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=B(l,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var u=f(t,n,r);if("normal"===u.type){if(o=r.done?m:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function B(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,y;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function F(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function j(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Xp(t)+" is not iterable")}return g.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=u(b,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,c,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(S.prototype),u(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new S(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(A),u(A,c,"Generator"),u(A,i,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=j,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,y):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),y},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),F(n),y}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;F(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}function Jp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function em(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return tm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?tm(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function tm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const nm=function(){var e=em((0,t.useState)(null),2),n=(e[0],e[1]),r=em((0,t.useState)([]),2),o=r[0],a=r[1],i=em((0,t.useState)(!0),2),l=i[0],c=i[1],u=em((0,t.useState)(!1),2),s=(u[0],u[1],em((0,t.useState)([]),2)),f=s[0],h=s[1],d=em((0,t.useState)([]),2),p=d[0],m=d[1],y=em((0,t.useState)([]),2),v=y[0],g=y[1],b=(0,t.useContext)(ea).searchStringValue;(0,t.useEffect)((function(){x(b)}),[b]);var x=function(){var e,t=(e=Qp().mark((function e(t){var r,o,i,l,u,s;return Qp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="https://collectionapi.metmuseum.org/public/collection/v1/search?artistOrCulture=true&q=".concat(t),o="https://collectionapi.metmuseum.org/public/collection/v1/search?title=true&q=".concat(t),e.prev=2,e.next=5,qr.get(r);case 5:return i=e.sent,l=i.data,e.next=9,qr.get(o);case 9:u=e.sent,s=u.data,console.log("spisak metropolitan",l),console.log("spisak metropolitan title",s),c(!1),a(l.objectIDs),h(s.objectIDs),m(l.total),g(s.total),c(!1),e.next=25;break;case 22:e.prev=22,e.t0=e.catch(2),n(e.t0);case 25:case"end":return e.stop()}}),e,null,[[2,22]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Jp(a,r,o,i,l,"next",e)}function l(e){Jp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return l?t.createElement(co,null):0==p&&0==v?t.createElement(t.Fragment,null,t.createElement("table",{className:"metropolitanMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(al,{placeholder:"Metropolitan",linkTo:"/metropolitan"}))),t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement("h2",{className:"history"},"Nothing found")))))):0==v?t.createElement("table",{className:"metropolitanMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(al,{placeholder:"Metropolitan",linkTo:"/metropolitan"}))),t.createElement("tr",null,t.createElement("th",{colSpan:2,className:"results"},"Number of Objects by name ",p,", by title ",v))),t.createElement("tbody",null,o.map((function(e){return t.createElement(Yp,{key:e,metropolitan:e})})))):0==p?t.createElement("table",{className:"metropolitanMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(al,{placeholder:"Metropolitan",linkTo:"/metropolitan"}))),t.createElement("tr",null,t.createElement("th",{colSpan:2,className:"results"},"Number of Objects by name ",p,", by title ",v))),t.createElement("tbody",null,f.map((function(e){return t.createElement(Kp,{key:e,metropolitan:e})})))):t.createElement(t.Fragment,null,t.createElement("table",{className:"metropolitanMain"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",{colSpan:2},t.createElement(al,{placeholder:"Metropolitan",linkTo:"/metropolitan"}))),t.createElement("tr",null,t.createElement("th",{colSpan:2,className:"results"},"Number of Objects by name ",p,", by title ",v))),o.map((function(e){return t.createElement(Yp,{key:e,metropolitan:e})})),f.map((function(e){return t.createElement(Kp,{key:e,metropolitan:e})}))),t.createElement(dl,null))},rm=JSON.parse('[{"name":"Absolute Zero","hex":"#0048BA"},{"name":"Acid Green","hex":"#B0BF1A"},{"name":"Aero","hex":"#7CB9E8"},{"name":"Aero Blue","hex":"#C9FFE5"},{"name":"African Violet","hex":"#B284BE"},{"name":"Air Force Blue (RAF)","hex":"#5D8AA8"},{"name":"Air Force Blue (USAF)","hex":"#00308F"},{"name":"Air Superiority Blue","hex":"#72A0C1"},{"name":"Alabama Crimson","hex":"#AF002A"},{"name":"Alabaster","hex":"#F2F0E6"},{"name":"Alice Blue","hex":"#F0F8FF"},{"name":"Alien Armpit","hex":"#84DE02"},{"name":"Alizarin Crimson","hex":"#E32636"},{"name":"Alloy Orange","hex":"#C46210"},{"name":"Almond","hex":"#EFDECD"},{"name":"Amaranth","hex":"#E52B50"},{"name":"Amaranth Deep Purple","hex":"#9F2B68"},{"name":"Amaranth Pink","hex":"#F19CBB"},{"name":"Amaranth Purple","hex":"#AB274F"},{"name":"Amaranth Red","hex":"#D3212D"},{"name":"Amazon Store","hex":"#3B7A57"},{"name":"Amazonite","hex":"#00C4B0"},{"name":"Amber","hex":"#FFBF00"},{"name":"Amber (SAE/ECE)","hex":"#FF7E00"},{"name":"American Rose","hex":"#FF033E"},{"name":"Amethyst","hex":"#9966CC"},{"name":"Android Green","hex":"#A4C639"},{"name":"Anti-Flash White","hex":"#F2F3F4"},{"name":"Antique Brass","hex":"#CD9575"},{"name":"Antique Bronze","hex":"#665D1E"},{"name":"Antique Fuchsia","hex":"#915C83"},{"name":"Antique Ruby","hex":"#841B2D"},{"name":"Antique White","hex":"#FAEBD7"},{"name":"Ao (English)","hex":"#008000"},{"name":"Apple Green","hex":"#8DB600"},{"name":"Apricot","hex":"#FBCEB1"},{"name":"Aqua","hex":"#00FFFF"},{"name":"Aquamarine","hex":"#7FFFD4"},{"name":"Arctic Lime","hex":"#D0FF14"},{"name":"Army Green","hex":"#4B5320"},{"name":"Arsenic","hex":"#3B444B"},{"name":"Artichoke","hex":"#8F9779"},{"name":"Arylide Yellow","hex":"#E9D66B"},{"name":"Ash Gray","hex":"#B2BEB5"},{"name":"Asparagus","hex":"#87A96B"},{"name":"Atomic Tangerine","hex":"#FF9966"},{"name":"Auburn","hex":"#A52A2A"},{"name":"Aureolin","hex":"#FDEE00"},{"name":"AuroMetalSaurus","hex":"#6E7F80"},{"name":"Avocado","hex":"#568203"},{"name":"Awesome","hex":"#FF2052"},{"name":"Aztec Gold","hex":"#C39953"},{"name":"Azure","hex":"#007FFF"},{"name":"Azure (Web Color)","hex":"#F0FFFF"},{"name":"Azure Mist","hex":"#F0FFFF"},{"name":"Azureish White","hex":"#DBE9F4"},{"name":"Baby Blue","hex":"#89CFF0"},{"name":"Baby Blue Eyes","hex":"#A1CAF1"},{"name":"Baby Pink","hex":"#F4C2C2"},{"name":"Baby Powder","hex":"#FEFEFA"},{"name":"Baker-Miller Pink","hex":"#FF91AF"},{"name":"Ball Blue","hex":"#21ABCD"},{"name":"Banana Mania","hex":"#FAE7B5"},{"name":"Banana Yellow","hex":"#FFE135"},{"name":"Bangladesh Green","hex":"#006A4E"},{"name":"Barbie Pink","hex":"#E0218A"},{"name":"Barn Red","hex":"#7C0A02"},{"name":"Battery Charged Blue","hex":"#1DACD6"},{"name":"Battleship Grey","hex":"#848482"},{"name":"Bazaar","hex":"#98777B"},{"name":"Beau Blue","hex":"#BCD4E6"},{"name":"Beaver","hex":"#9F8170"},{"name":"Begonia","hex":"#FA6E79"},{"name":"Beige","hex":"#F5F5DC"},{"name":"B\'dazzled Blue","hex":"#2E5894"},{"name":"Big Dip O\'ruby","hex":"#9C2542"},{"name":"Big Foot Feet","hex":"#E88E5A"},{"name":"Bisque","hex":"#FFE4C4"},{"name":"Bistre","hex":"#3D2B1F"},{"name":"Bistre Brown","hex":"#967117"},{"name":"Bitter Lemon","hex":"#CAE00D"},{"name":"Bitter Lime","hex":"#BFFF00"},{"name":"Bittersweet","hex":"#FE6F5E"},{"name":"Bittersweet Shimmer","hex":"#BF4F51"},{"name":"Black","hex":"#000000"},{"name":"Black Bean","hex":"#3D0C02"},{"name":"Black Coral","hex":"#54626F"},{"name":"Black Leather Jacket","hex":"#253529"},{"name":"Black Olive","hex":"#3B3C36"},{"name":"Black Shadows","hex":"#BFAFB2"},{"name":"Blanched Almond","hex":"#FFEBCD"},{"name":"Blast-Off Bronze","hex":"#A57164"},{"name":"Bleu De France","hex":"#318CE7"},{"name":"Blizzard Blue","hex":"#ACE5EE"},{"name":"Blond","hex":"#FAF0BE"},{"name":"Blue","hex":"#0000FF"},{"name":"Blue (Crayola)","hex":"#1F75FE"},{"name":"Blue (Munsell)","hex":"#0093AF"},{"name":"Blue (NCS)","hex":"#0087BD"},{"name":"Blue (Pantone)","hex":"#0018A8"},{"name":"Blue (Pigment)","hex":"#333399"},{"name":"Blue (RYB)","hex":"#0247FE"},{"name":"Blue Bell","hex":"#A2A2D0"},{"name":"Blue Bolt","hex":"#00B9FB"},{"name":"Blue-Gray","hex":"#6699CC"},{"name":"Blue-Green","hex":"#0D98BA"},{"name":"Blue Jeans","hex":"#5DADEC"},{"name":"Blue Lagoon","hex":"#ACE5EE"},{"name":"Blue-Magenta Violet","hex":"#553592"},{"name":"Blue Sapphire","hex":"#126180"},{"name":"Blue-Violet","hex":"#8A2BE2"},{"name":"Blue Yonder","hex":"#5072A7"},{"name":"Blueberry","hex":"#4F86F7"},{"name":"Bluebonnet","hex":"#1C1CF0"},{"name":"Blush","hex":"#DE5D83"},{"name":"Bole","hex":"#79443B"},{"name":"Bondi Blue","hex":"#0095B6"},{"name":"Bone","hex":"#E3DAC9"},{"name":"Booger Buster","hex":"#DDE26A"},{"name":"Boston University Red","hex":"#CC0000"},{"name":"Bottle Green","hex":"#006A4E"},{"name":"Boysenberry","hex":"#873260"},{"name":"Brandeis Blue","hex":"#0070FF"},{"name":"Brass","hex":"#B5A642"},{"name":"Brick Red","hex":"#CB4154"},{"name":"Bright Cerulean","hex":"#1DACD6"},{"name":"Bright Green","hex":"#66FF00"},{"name":"Bright Lavender","hex":"#BF94E4"},{"name":"Bright Lilac","hex":"#D891EF"},{"name":"Bright Maroon","hex":"#C32148"},{"name":"Bright Navy Blue","hex":"#1974D2"},{"name":"Bright Pink","hex":"#FF007F"},{"name":"Bright Turquoise","hex":"#08E8DE"},{"name":"Bright Ube","hex":"#D19FE8"},{"name":"Bright Yellow (Crayola)","hex":"#FFAA1D"},{"name":"Brilliant Azure","hex":"#3399FF"},{"name":"Brilliant Lavender","hex":"#F4BBFF"},{"name":"Brilliant Rose","hex":"#FF55A3"},{"name":"Brink Pink","hex":"#FB607F"},{"name":"British Racing Green","hex":"#004225"},{"name":"Bronze","hex":"#CD7F32"},{"name":"Bronze Yellow","hex":"#737000"},{"name":"Brown (Traditional)","hex":"#964B00"},{"name":"Brown (Web)","hex":"#A52A2A"},{"name":"Brown-Nose","hex":"#6B4423"},{"name":"Brown Sugar","hex":"#AF6E4D"},{"name":"Brown Yellow","hex":"#cc9966"},{"name":"Brunswick Green","hex":"#1B4D3E"},{"name":"Bubble Gum","hex":"#FFC1CC"},{"name":"Bubbles","hex":"#E7FEFF"},{"name":"Bud Green","hex":"#7BB661"},{"name":"Buff","hex":"#F0DC82"},{"name":"Bulgarian Rose","hex":"#480607"},{"name":"Burgundy","hex":"#800020"},{"name":"Burlywood","hex":"#DEB887"},{"name":"Burnished Brown","hex":"#A17A74"},{"name":"Burnt Orange","hex":"#CC5500"},{"name":"Burnt Sienna","hex":"#E97451"},{"name":"Burnt Umber","hex":"#8A3324"},{"name":"Button Blue","hex":"#24A0ED"},{"name":"Byzantine","hex":"#BD33A4"},{"name":"Byzantium","hex":"#702963"},{"name":"Cadet","hex":"#536872"},{"name":"Cadet Blue","hex":"#5F9EA0"},{"name":"Cadet Grey","hex":"#91A3B0"},{"name":"Cadmium Green","hex":"#006B3C"},{"name":"Cadmium Orange","hex":"#ED872D"},{"name":"Cadmium Red","hex":"#E30022"},{"name":"Cadmium Yellow","hex":"#FFF600"},{"name":"Cafe Au Lait","hex":"#A67B5B"},{"name":"Cafe Noir","hex":"#4B3621"},{"name":"Cal Poly Pomona Green","hex":"#1E4D2B"},{"name":"Cambridge Blue","hex":"#A3C1AD"},{"name":"Camel","hex":"#C19A6B"},{"name":"Cameo Pink","hex":"#EFBBCC"},{"name":"Camouflage Green","hex":"#78866B"},{"name":"Canary","hex":"#FFFF99"},{"name":"Canary Yellow","hex":"#FFEF00"},{"name":"Candy Apple Red","hex":"#FF0800"},{"name":"Candy Pink","hex":"#E4717A"},{"name":"Capri","hex":"#00BFFF"},{"name":"Caput Mortuum","hex":"#592720"},{"name":"Cardinal","hex":"#C41E3A"},{"name":"Caribbean Green","hex":"#00CC99"},{"name":"Carmine","hex":"#960018"},{"name":"Carmine (M&P)","hex":"#D70040"},{"name":"Carmine Pink","hex":"#EB4C42"},{"name":"Carmine Red","hex":"#FF0038"},{"name":"Carnation Pink","hex":"#FFA6C9"},{"name":"Carnelian","hex":"#B31B1B"},{"name":"Carolina Blue","hex":"#56A0D3"},{"name":"Carrot Orange","hex":"#ED9121"},{"name":"Castleton Green","hex":"#00563F"},{"name":"Catalina Blue","hex":"#062A78"},{"name":"Catawba","hex":"#703642"},{"name":"Cedar Chest","hex":"#C95A49"},{"name":"Ceil","hex":"#92A1CF"},{"name":"Celadon","hex":"#ACE1AF"},{"name":"Celadon Blue","hex":"#007BA7"},{"name":"Celadon Green","hex":"#2F847C"},{"name":"Celeste","hex":"#B2FFFF"},{"name":"Celestial Blue","hex":"#4997D0"},{"name":"Cerise","hex":"#DE3163"},{"name":"Cerise Pink","hex":"#EC3B83"},{"name":"Cerulean","hex":"#007BA7"},{"name":"Cerulean Blue","hex":"#2A52BE"},{"name":"Cerulean Frost","hex":"#6D9BC3"},{"name":"CG Blue","hex":"#007AA5"},{"name":"CG Red","hex":"#E03C31"},{"name":"Chamoisee","hex":"#A0785A"},{"name":"Champagne","hex":"#F7E7CE"},{"name":"Champagne Pink","hex":"#F1DDCF"},{"name":"Charcoal","hex":"#36454F"},{"name":"Charleston Green","hex":"#232B2B"},{"name":"Charm Pink","hex":"#E68FAC"},{"name":"Chartreuse (Traditional)","hex":"#DFFF00"},{"name":"Chartreuse (Web)","hex":"#7FFF00"},{"name":"Cherry","hex":"#DE3163"},{"name":"Cherry Blossom Pink","hex":"#FFB7C5"},{"name":"Chestnut","hex":"#954535"},{"name":"China Pink","hex":"#DE6FA1"},{"name":"China Rose","hex":"#A8516E"},{"name":"Chinese Red","hex":"#AA381E"},{"name":"Chinese Violet","hex":"#856088"},{"name":"Chlorophyll Green","hex":"#4AFF00"},{"name":"Chocolate (Traditional)","hex":"#7B3F00"},{"name":"Chocolate (Web)","hex":"#D2691E"},{"name":"Chrome Yellow","hex":"#FFA700"},{"name":"Cinereous","hex":"#98817B"},{"name":"Cinnabar","hex":"#E34234"},{"name":"Cinnamon","hex":"#D2691E"},{"name":"Cinnamon Satin","hex":"#CD607E"},{"name":"Citrine","hex":"#E4D00A"},{"name":"Citron","hex":"#9FA91F"},{"name":"Claret","hex":"#7F1734"},{"name":"Classic Rose","hex":"#FBCCE7"},{"name":"Cobalt Blue","hex":"#0047AB"},{"name":"Cocoa Brown","hex":"#D2691E"},{"name":"Coconut","hex":"#965A3E"},{"name":"Coffee","hex":"#6F4E37"},{"name":"Columbia Blue","hex":"#C4D8E2"},{"name":"Congo Pink","hex":"#F88379"},{"name":"Cool Black","hex":"#002E63"},{"name":"Cool Grey","hex":"#8C92AC"},{"name":"Copper","hex":"#B87333"},{"name":"Copper (Crayola)","hex":"#DA8A67"},{"name":"Copper Penny","hex":"#AD6F69"},{"name":"Copper Red","hex":"#CB6D51"},{"name":"Copper Rose","hex":"#996666"},{"name":"Coquelicot","hex":"#FF3800"},{"name":"Coral","hex":"#FF7F50"},{"name":"Coral Pink","hex":"#F88379"},{"name":"Coral Red","hex":"#FF4040"},{"name":"Coral Reef","hex":"#FD7C6E"},{"name":"Cordovan","hex":"#893F45"},{"name":"Corn","hex":"#FBEC5D"},{"name":"Cornell Red","hex":"#B31B1B"},{"name":"Cornflower Blue","hex":"#6495ED"},{"name":"Cornsilk","hex":"#FFF8DC"},{"name":"Cosmic Cobalt","hex":"#2E2D88"},{"name":"Cosmic Latte","hex":"#FFF8E7"},{"name":"Coyote Brown","hex":"#81613C"},{"name":"Cotton Candy","hex":"#FFBCD9"},{"name":"Cream","hex":"#FFFDD0"},{"name":"Crimson","hex":"#DC143C"},{"name":"Crimson Glory","hex":"#BE0032"},{"name":"Crimson Red","hex":"#990000"},{"name":"Cultured","hex":"#F5F5F5"},{"name":"Cyan","hex":"#00FFFF"},{"name":"Cyan Azure","hex":"#4E82B4"},{"name":"Cyan-Blue Azure","hex":"#4682BF"},{"name":"Cyan Cobalt Blue","hex":"#28589C"},{"name":"Cyan Cornflower Blue","hex":"#188BC2"},{"name":"Cyan (Process)","hex":"#00B7EB"},{"name":"Cyber Grape","hex":"#58427C"},{"name":"Cyber Yellow","hex":"#FFD300"},{"name":"Cyclamen","hex":"#F56FA1"},{"name":"Daffodil","hex":"#FFFF31"},{"name":"Dandelion","hex":"#F0E130"},{"name":"Dark Blue","hex":"#00008B"},{"name":"Dark Blue-Gray","hex":"#666699"},{"name":"Dark Brown","hex":"#654321"},{"name":"Dark Brown-Tangelo","hex":"#88654E"},{"name":"Dark Byzantium","hex":"#5D3954"},{"name":"Dark Candy Apple Red","hex":"#A40000"},{"name":"Dark Cerulean","hex":"#08457E"},{"name":"Dark Chestnut","hex":"#986960"},{"name":"Dark Coral","hex":"#CD5B45"},{"name":"Dark Cyan","hex":"#008B8B"},{"name":"Dark Electric Blue","hex":"#536878"},{"name":"Dark Goldenrod","hex":"#B8860B"},{"name":"Dark Gray (X11)","hex":"#A9A9A9"},{"name":"Dark Green","hex":"#013220"},{"name":"Dark Green (X11)","hex":"#006400"},{"name":"Dark Gunmetal","hex":"#1F262A"},{"name":"Dark Imperial Blue","hex":"#00416A"},{"name":"Dark Imperial Blue","hex":"#00147E"},{"name":"Dark Jungle Green","hex":"#1A2421"},{"name":"Dark Khaki","hex":"#BDB76B"},{"name":"Dark Lava","hex":"#483C32"},{"name":"Dark Lavender","hex":"#734F96"},{"name":"Dark Liver","hex":"#534B4F"},{"name":"Dark Liver (Horses)","hex":"#543D37"},{"name":"Dark Magenta","hex":"#8B008B"},{"name":"Dark Medium Gray","hex":"#A9A9A9"},{"name":"Dark Midnight Blue","hex":"#003366"},{"name":"Dark Moss Green","hex":"#4A5D23"},{"name":"Dark Olive Green","hex":"#556B2F"},{"name":"Dark Orange","hex":"#FF8C00"},{"name":"Dark Orchid","hex":"#9932CC"},{"name":"Dark Pastel Blue","hex":"#779ECB"},{"name":"Dark Pastel Green","hex":"#03C03C"},{"name":"Dark Pastel Purple","hex":"#966FD6"},{"name":"Dark Pastel Red","hex":"#C23B22"},{"name":"Dark Pink","hex":"#E75480"},{"name":"Dark Powder Blue","hex":"#003399"},{"name":"Dark Puce","hex":"#4F3A3C"},{"name":"Dark Purple","hex":"#301934"},{"name":"Dark Raspberry","hex":"#872657"},{"name":"Dark Red","hex":"#8B0000"},{"name":"Dark Salmon","hex":"#E9967A"},{"name":"Dark Scarlet","hex":"#560319"},{"name":"Dark Sea Green","hex":"#8FBC8F"},{"name":"Dark Sienna","hex":"#3C1414"},{"name":"Dark Sky Blue","hex":"#8CBED6"},{"name":"Dark Slate Blue","hex":"#483D8B"},{"name":"Dark Slate Gray","hex":"#2F4F4F"},{"name":"Dark Spring Green","hex":"#177245"},{"name":"Dark Tan","hex":"#918151"},{"name":"Dark Tangerine","hex":"#FFA812"},{"name":"Dark Taupe","hex":"#483C32"},{"name":"Dark Terra Cotta","hex":"#CC4E5C"},{"name":"Dark Turquoise","hex":"#00CED1"},{"name":"Dark Vanilla","hex":"#D1BEA8"},{"name":"Dark Violet","hex":"#9400D3"},{"name":"Dark Yellow","hex":"#9B870C"},{"name":"Dartmouth Green","hex":"#00703C"},{"name":"Davy\'s Grey","hex":"#555555"},{"name":"Debian Red","hex":"#D70A53"},{"name":"Deep Aquamarine","hex":"#40826D"},{"name":"Deep Carmine","hex":"#A9203E"},{"name":"Deep Carmine Pink","hex":"#EF3038"},{"name":"Deep Carrot Orange","hex":"#E9692C"},{"name":"Deep Cerise","hex":"#DA3287"},{"name":"Deep Champagne","hex":"#FAD6A5"},{"name":"Deep Chestnut","hex":"#B94E48"},{"name":"Deep Coffee","hex":"#704241"},{"name":"Deep Fuchsia","hex":"#C154C1"},{"name":"Deep Green","hex":"#056608"},{"name":"Deep Green-Cyan Turquoise","hex":"#0E7C61"},{"name":"Deep Jungle Green","hex":"#004B49"},{"name":"Deep Koamaru","hex":"#333366"},{"name":"Deep Lemon","hex":"#F5C71A"},{"name":"Deep Lilac","hex":"#9955BB"},{"name":"Deep Magenta","hex":"#CC00CC"},{"name":"Deep Maroon","hex":"#820000"},{"name":"Deep Mauve","hex":"#D473D4"},{"name":"Deep Moss Green","hex":"#355E3B"},{"name":"Deep Peach","hex":"#FFCBA4"},{"name":"Deep Pink","hex":"#FF1493"},{"name":"Deep Puce","hex":"#A95C68"},{"name":"Deep Red","hex":"#850101"},{"name":"Deep Ruby","hex":"#843F5B"},{"name":"Deep Saffron","hex":"#FF9933"},{"name":"Deep Sky Blue","hex":"#00BFFF"},{"name":"Deep Space Sparkle","hex":"#4A646C"},{"name":"Deep Spring Bud","hex":"#556B2F"},{"name":"Deep Taupe","hex":"#7E5E60"},{"name":"Deep Tuscan Red","hex":"#66424D"},{"name":"Deep Violet","hex":"#330066"},{"name":"Deer","hex":"#BA8759"},{"name":"Denim","hex":"#1560BD"},{"name":"Denim Blue","hex":"#2243B6"},{"name":"Desaturated Cyan","hex":"#669999"},{"name":"Desert","hex":"#C19A6B"},{"name":"Desert Sand","hex":"#EDC9AF"},{"name":"Desire","hex":"#EA3C53"},{"name":"Diamond","hex":"#B9F2FF"},{"name":"Dim Gray","hex":"#696969"},{"name":"Dingy Dungeon","hex":"#C53151"},{"name":"Dirt","hex":"#9B7653"},{"name":"Dodger Blue","hex":"#1E90FF"},{"name":"Dodie Yellow","hex":"#FEF65B"},{"name":"Dogwood Rose","hex":"#D71868"},{"name":"Dollar Bill","hex":"#85BB65"},{"name":"Dolphin Gray","hex":"#828E84"},{"name":"Donkey Brown","hex":"#664C28"},{"name":"Drab","hex":"#967117"},{"name":"Duke Blue","hex":"#00009C"},{"name":"Dust Storm","hex":"#E5CCC9"},{"name":"Dutch White","hex":"#EFDFBB"},{"name":"Earth Yellow","hex":"#E1A95F"},{"name":"Ebony","hex":"#555D50"},{"name":"Ecru","hex":"#C2B280"},{"name":"Eerie Black","hex":"#1B1B1B"},{"name":"Eggplant","hex":"#614051"},{"name":"Eggshell","hex":"#F0EAD6"},{"name":"Egyptian Blue","hex":"#1034A6"},{"name":"Electric Blue","hex":"#7DF9FF"},{"name":"Electric Crimson","hex":"#FF003F"},{"name":"Electric Cyan","hex":"#00FFFF"},{"name":"Electric Green","hex":"#00FF00"},{"name":"Electric Indigo","hex":"#6F00FF"},{"name":"Electric Lavender","hex":"#F4BBFF"},{"name":"Electric Lime","hex":"#CCFF00"},{"name":"Electric Purple","hex":"#BF00FF"},{"name":"Electric Ultramarine","hex":"#3F00FF"},{"name":"Electric Violet","hex":"#8F00FF"},{"name":"Electric Yellow","hex":"#FFFF33"},{"name":"Emerald","hex":"#50C878"},{"name":"Eminence","hex":"#6C3082"},{"name":"English Green","hex":"#1B4D3E"},{"name":"English Lavender","hex":"#B48395"},{"name":"English Red","hex":"#AB4B52"},{"name":"English Vermillion","hex":"#CC474B"},{"name":"English Violet","hex":"#563C5C"},{"name":"Eton Blue","hex":"#96C8A2"},{"name":"Eucalyptus","hex":"#44D7A8"},{"name":"Fallow","hex":"#C19A6B"},{"name":"Falu Red","hex":"#801818"},{"name":"Fandango","hex":"#B53389"},{"name":"Fandango Pink","hex":"#DE5285"},{"name":"Fashion Fuchsia","hex":"#F400A1"},{"name":"Fawn","hex":"#E5AA70"},{"name":"Feldgrau","hex":"#4D5D53"},{"name":"Feldspar","hex":"#FDD5B1"},{"name":"Fern Green","hex":"#4F7942"},{"name":"Ferrari Red","hex":"#FF2800"},{"name":"Field Drab","hex":"#6C541E"},{"name":"Fiery Rose","hex":"#FF5470"},{"name":"Firebrick","hex":"#B22222"},{"name":"Fire Engine Red","hex":"#CE2029"},{"name":"Flame","hex":"#E25822"},{"name":"Flamingo Pink","hex":"#FC8EAC"},{"name":"Flattery","hex":"#6B4423"},{"name":"Flavescent","hex":"#F7E98E"},{"name":"Flax","hex":"#EEDC82"},{"name":"Flirt","hex":"#A2006D"},{"name":"Floral White","hex":"#FFFAF0"},{"name":"Fluorescent Orange","hex":"#FFBF00"},{"name":"Fluorescent Pink","hex":"#FF1493"},{"name":"Fluorescent Yellow","hex":"#CCFF00"},{"name":"Folly","hex":"#FF004F"},{"name":"Forest Green (Traditional)","hex":"#014421"},{"name":"Forest Green (Web)","hex":"#228B22"},{"name":"French Beige","hex":"#A67B5B"},{"name":"French Bistre","hex":"#856D4D"},{"name":"French Blue","hex":"#0072BB"},{"name":"French Fuchsia","hex":"#FD3F92"},{"name":"French Lilac","hex":"#86608E"},{"name":"French Lime","hex":"#9EFD38"},{"name":"French Mauve","hex":"#D473D4"},{"name":"French Pink","hex":"#FD6C9E"},{"name":"French Plum","hex":"#811453"},{"name":"French Puce","hex":"#4E1609"},{"name":"French Raspberry","hex":"#C72C48"},{"name":"French Rose","hex":"#F64A8A"},{"name":"French Sky Blue","hex":"#77B5FE"},{"name":"French Violet","hex":"#8806CE"},{"name":"French Wine","hex":"#AC1E44"},{"name":"Fresh Air","hex":"#A6E7FF"},{"name":"Frogert","hex":"#E936A7"},{"name":"Fuchsia","hex":"#FF00FF"},{"name":"Fuchsia (Crayola)","hex":"#C154C1"},{"name":"Fuchsia Pink","hex":"#FF77FF"},{"name":"Fuchsia Purple","hex":"#CC397B"},{"name":"Fuchsia Rose","hex":"#C74375"},{"name":"Fulvous","hex":"#E48400"},{"name":"Fuzzy Wuzzy","hex":"#CC6666"},{"name":"Gainsboro","hex":"#DCDCDC"},{"name":"Gamboge","hex":"#E49B0F"},{"name":"Gamboge Orange (Brown)","hex":"#996600"},{"name":"Gargoyle Gas","hex":"#FFDF46"},{"name":"Generic Viridian","hex":"#007F66"},{"name":"Ghost White","hex":"#F8F8FF"},{"name":"Giant\'s Club","hex":"#B05C52"},{"name":"Giants Orange","hex":"#FE5A1D"},{"name":"Ginger","hex":"#B06500"},{"name":"Glaucous","hex":"#6082B6"},{"name":"Glitter","hex":"#E6E8FA"},{"name":"Glossy Grape","hex":"#AB92B3"},{"name":"GO Green","hex":"#00AB66"},{"name":"Gold (Metallic)","hex":"#D4AF37"},{"name":"Gold (Web) (Golden)","hex":"#FFD700"},{"name":"Gold Fusion","hex":"#85754E"},{"name":"Golden Brown","hex":"#996515"},{"name":"Golden Poppy","hex":"#FCC200"},{"name":"Golden Yellow","hex":"#FFDF00"},{"name":"Goldenrod","hex":"#DAA520"},{"name":"Granite Gray","hex":"#676767"},{"name":"Granny Smith Apple","hex":"#A8E4A0"},{"name":"Grape","hex":"#6F2DA8"},{"name":"Gray","hex":"#808080"},{"name":"Gray (HTML/CSS Gray)","hex":"#808080"},{"name":"Gray (X11 Gray)","hex":"#BEBEBE"},{"name":"Gray-Asparagus","hex":"#465945"},{"name":"Gray-Blue","hex":"#8C92AC"},{"name":"Green (Color Wheel) (X11 Green)","hex":"#00FF00"},{"name":"Green (Crayola)","hex":"#1CAC78"},{"name":"Green (HTML/CSS Color)","hex":"#008000"},{"name":"Green (Munsell)","hex":"#00A877"},{"name":"Green (NCS)","hex":"#009F6B"},{"name":"Green (Pantone)","hex":"#00AD43"},{"name":"Green (Pigment)","hex":"#00A550"},{"name":"Green (RYB)","hex":"#66B032"},{"name":"Green-Blue","hex":"#1164B4"},{"name":"Green-Cyan","hex":"#009966"},{"name":"Green Lizard","hex":"#A7F432"},{"name":"Green Sheen","hex":"#6EAEA1"},{"name":"Green-Yellow","hex":"#ADFF2F"},{"name":"Grizzly","hex":"#885818"},{"name":"Grullo","hex":"#A99A86"},{"name":"Guppie Green","hex":"#00FF7F"},{"name":"Gunmetal","hex":"#2a3439"},{"name":"Halaya Ube","hex":"#663854"},{"name":"Han Blue","hex":"#446CCF"},{"name":"Han Purple","hex":"#5218FA"},{"name":"Hansa Yellow","hex":"#E9D66B"},{"name":"Harlequin","hex":"#3FFF00"},{"name":"Harlequin Green","hex":"#46CB18"},{"name":"Harvard Crimson","hex":"#C90016"},{"name":"Harvest Gold","hex":"#DA9100"},{"name":"Heart Gold","hex":"#808000"},{"name":"Heat Wave","hex":"#FF7A00"},{"name":"Heidelberg Red","hex":"#960018"},{"name":"Heliotrope","hex":"#DF73FF"},{"name":"Heliotrope Gray","hex":"#AA98A9"},{"name":"Heliotrope Magenta","hex":"#AA00BB"},{"name":"Hollywood Cerise","hex":"#F400A1"},{"name":"Honeydew","hex":"#F0FFF0"},{"name":"Honolulu Blue","hex":"#006DB0"},{"name":"Hooker\'s Green","hex":"#49796B"},{"name":"Hot Magenta","hex":"#FF1DCE"},{"name":"Hot Pink","hex":"#FF69B4"},{"name":"Hunter Green","hex":"#355E3B"},{"name":"Iceberg","hex":"#71A6D2"},{"name":"Icterine","hex":"#FCF75E"},{"name":"Iguana Green","hex":"#71BC78"},{"name":"Illuminating Emerald","hex":"#319177"},{"name":"Imperial","hex":"#602F6B"},{"name":"Imperial Blue","hex":"#002395"},{"name":"Imperial Purple","hex":"#66023C"},{"name":"Imperial Red","hex":"#ED2939"},{"name":"Inchworm","hex":"#B2EC5D"},{"name":"Independence","hex":"#4C516D"},{"name":"India Green","hex":"#138808"},{"name":"Indian Red","hex":"#CD5C5C"},{"name":"Indian Yellow","hex":"#E3A857"},{"name":"Indigo","hex":"#4B0082"},{"name":"Indigo Dye","hex":"#091F92"},{"name":"Indigo (Web)","hex":"#4B0082"},{"name":"Infra Red","hex":"#FF496C"},{"name":"Interdimensional Blue","hex":"#360CCC"},{"name":"International Klein Blue","hex":"#002FA7"},{"name":"International Orange (Aerospace)","hex":"#FF4F00"},{"name":"International Orange (Engineering)","hex":"#BA160C"},{"name":"International Orange (Golden Gate Bridge)","hex":"#C0362C"},{"name":"Iris","hex":"#5A4FCF"},{"name":"Irresistible","hex":"#B3446C"},{"name":"Isabelline","hex":"#F4F0EC"},{"name":"Islamic Green","hex":"#009000"},{"name":"Italian Sky Blue","hex":"#B2FFFF"},{"name":"Ivory","hex":"#FFFFF0"},{"name":"Jade","hex":"#00A86B"},{"name":"Japanese Carmine","hex":"#9D2933"},{"name":"Japanese Indigo","hex":"#264348"},{"name":"Japanese Violet","hex":"#5B3256"},{"name":"Jasmine","hex":"#F8DE7E"},{"name":"Jasper","hex":"#D73B3E"},{"name":"Jazzberry Jam","hex":"#A50B5E"},{"name":"Jelly Bean","hex":"#DA614E"},{"name":"Jet","hex":"#343434"},{"name":"Jonquil","hex":"#F4CA16"},{"name":"Jordy Blue","hex":"#8AB9F1"},{"name":"June Bud","hex":"#BDDA57"},{"name":"Jungle Green","hex":"#29AB87"},{"name":"Kelly Green","hex":"#4CBB17"},{"name":"Kenyan Copper","hex":"#7C1C05"},{"name":"Keppel","hex":"#3AB09E"},{"name":"Key Lime","hex":"#E8F48C"},{"name":"Khaki (HTML/CSS) (Khaki)","hex":"#C3B091"},{"name":"Khaki (X11) (Light Khaki)","hex":"#F0E68C"},{"name":"Kiwi","hex":"#8EE53F"},{"name":"Kobe","hex":"#882D17"},{"name":"Kobi","hex":"#E79FC4"},{"name":"Kobicha","hex":"#6B4423"},{"name":"Kombu Green","hex":"#354230"},{"name":"KSU Purple","hex":"#512888"},{"name":"KU Crimson","hex":"#E8000D"},{"name":"La Salle Green","hex":"#087830"},{"name":"Languid Lavender","hex":"#D6CADD"},{"name":"Lapis Lazuli","hex":"#26619C"},{"name":"Laser Lemon","hex":"#FFFF66"},{"name":"Laurel Green","hex":"#A9BA9D"},{"name":"Lava","hex":"#CF1020"},{"name":"Lavender (Floral)","hex":"#B57EDC"},{"name":"Lavender (Web)","hex":"#E6E6FA"},{"name":"Lavender Blue","hex":"#CCCCFF"},{"name":"Lavender Blush","hex":"#FFF0F5"},{"name":"Lavender Gray","hex":"#C4C3D0"},{"name":"Lavender Indigo","hex":"#9457EB"},{"name":"Lavender Magenta","hex":"#EE82EE"},{"name":"Lavender Mist","hex":"#E6E6FA"},{"name":"Lavender Pink","hex":"#FBAED2"},{"name":"Lavender Purple","hex":"#967BB6"},{"name":"Lavender Rose","hex":"#FBA0E3"},{"name":"Lawn Green","hex":"#7CFC00"},{"name":"Lemon","hex":"#FFF700"},{"name":"Lemon Chiffon","hex":"#FFFACD"},{"name":"Lemon Curry","hex":"#CCA01D"},{"name":"Lemon Glacier","hex":"#FDFF00"},{"name":"Lemon Lime","hex":"#E3FF00"},{"name":"Lemon Meringue","hex":"#F6EABE"},{"name":"Lemon Yellow","hex":"#FFF44F"},{"name":"Licorice","hex":"#1A1110"},{"name":"Liberty","hex":"#545AA7"},{"name":"Light Apricot","hex":"#FDD5B1"},{"name":"Light Blue","hex":"#ADD8E6"},{"name":"Light Brown","hex":"#B5651D"},{"name":"Light Carmine Pink","hex":"#E66771"},{"name":"Light Cobalt Blue","hex":"#88ACE0"},{"name":"Light Coral","hex":"#F08080"},{"name":"Light Cornflower Blue","hex":"#93CCEA"},{"name":"Light Crimson","hex":"#F56991"},{"name":"Light Cyan","hex":"#E0FFFF"},{"name":"Light Deep Pink","hex":"#FF5CCD"},{"name":"Light French Beige","hex":"#C8AD7F"},{"name":"Light Fuchsia Pink","hex":"#F984EF"},{"name":"Light Goldenrod Yellow","hex":"#FAFAD2"},{"name":"Light Gray","hex":"#D3D3D3"},{"name":"Light Grayish Magenta","hex":"#CC99CC"},{"name":"Light Green","hex":"#90EE90"},{"name":"Light Hot Pink","hex":"#FFB3DE"},{"name":"Light Khaki","hex":"#F0E68C"},{"name":"Light Medium Orchid","hex":"#D39BCB"},{"name":"Light Moss Green","hex":"#ADDFAD"},{"name":"Light Orange","hex":"#FED8B1"},{"name":"Light Orchid","hex":"#E6A8D7"},{"name":"Light Pastel Purple","hex":"#B19CD9"},{"name":"Light Pink","hex":"#FFB6C1"},{"name":"Light Red Ochre","hex":"#E97451"},{"name":"Light Salmon","hex":"#FFA07A"},{"name":"Light Salmon Pink","hex":"#FF9999"},{"name":"Light Sea Green","hex":"#20B2AA"},{"name":"Light Sky Blue","hex":"#87CEFA"},{"name":"Light Slate Gray","hex":"#778899"},{"name":"Light Steel Blue","hex":"#B0C4DE"},{"name":"Light Taupe","hex":"#B38B6D"},{"name":"Light Thulian Pink","hex":"#E68FAC"},{"name":"Light Yellow","hex":"#FFFFE0"},{"name":"Lilac","hex":"#C8A2C8"},{"name":"Lilac Luster","hex":"#AE98AA"},{"name":"Lime (Color Wheel)","hex":"#BFFF00"},{"name":"Lime (Web) (X11 Green)","hex":"#00FF00"},{"name":"Lime Green","hex":"#32CD32"},{"name":"Limerick","hex":"#9DC209"},{"name":"Lincoln Green","hex":"#195905"},{"name":"Linen","hex":"#FAF0E6"},{"name":"Loeen (Lopen) Look","hex":"#15F2FD"},{"name":"Liseran Purple","hex":"#DE6FA1"},{"name":"Little Boy Blue","hex":"#6CA0DC"},{"name":"Liver","hex":"#674C47"},{"name":"Liver (Dogs)","hex":"#B86D29"},{"name":"Liver (Organ)","hex":"#6C2E1F"},{"name":"Liver Chestnut","hex":"#987456"},{"name":"Livid","hex":"#6699CC"},{"name":"Lumber","hex":"#FFE4CD"},{"name":"Lust","hex":"#E62020"},{"name":"Maastricht Blue","hex":"#001C3D"},{"name":"Macaroni And Cheese","hex":"#FFBD88"},{"name":"Madder Lake","hex":"#CC3336"},{"name":"Magenta","hex":"#FF00FF"},{"name":"Magenta (Crayola)","hex":"#FF55A3"},{"name":"Magenta (Dye)","hex":"#CA1F7B"},{"name":"Magenta (Pantone)","hex":"#D0417E"},{"name":"Magenta (Process)","hex":"#FF0090"},{"name":"Magenta Haze","hex":"#9F4576"},{"name":"Magenta-Pink","hex":"#CC338B"},{"name":"Magic Mint","hex":"#AAF0D1"},{"name":"Magic Potion","hex":"#FF4466"},{"name":"Magnolia","hex":"#F8F4FF"},{"name":"Mahogany","hex":"#C04000"},{"name":"Maize","hex":"#FBEC5D"},{"name":"Majorelle Blue","hex":"#6050DC"},{"name":"Malachite","hex":"#0BDA51"},{"name":"Manatee","hex":"#979AAA"},{"name":"Mandarin","hex":"#F37A48"},{"name":"Mango Tango","hex":"#FF8243"},{"name":"Mantis","hex":"#74C365"},{"name":"Mardi Gras","hex":"#880085"},{"name":"Marigold","hex":"#EAA221"},{"name":"Maroon (Crayola)","hex":"#C32148"},{"name":"Maroon (HTML/CSS)","hex":"#800000"},{"name":"Maroon (X11)","hex":"#B03060"},{"name":"Mauve","hex":"#E0B0FF"},{"name":"Mauve Taupe","hex":"#915F6D"},{"name":"Mauvelous","hex":"#EF98AA"},{"name":"Maximum Blue","hex":"#47ABCC"},{"name":"Maximum Blue Green","hex":"#30BFBF"},{"name":"Maximum Blue Purple","hex":"#ACACE6"},{"name":"Maximum Green","hex":"#5E8C31"},{"name":"Maximum Green Yellow","hex":"#D9E650"},{"name":"Maximum Purple","hex":"#733380"},{"name":"Maximum Red","hex":"#D92121"},{"name":"Maximum Red Purple","hex":"#A63A79"},{"name":"Maximum Yellow","hex":"#FAFA37"},{"name":"Maximum Yellow Red","hex":"#F2BA49"},{"name":"May Green","hex":"#4C9141"},{"name":"Maya Blue","hex":"#73C2FB"},{"name":"Meat Brown","hex":"#E5B73B"},{"name":"Medium Aquamarine","hex":"#66DDAA"},{"name":"Medium Blue","hex":"#0000CD"},{"name":"Medium Candy Apple Red","hex":"#E2062C"},{"name":"Medium Carmine","hex":"#AF4035"},{"name":"Medium Champagne","hex":"#F3E5AB"},{"name":"Medium Electric Blue","hex":"#035096"},{"name":"Medium Jungle Green","hex":"#1C352D"},{"name":"Medium Lavender Magenta","hex":"#DDA0DD"},{"name":"Medium Orchid","hex":"#BA55D3"},{"name":"Medium Persian Blue","hex":"#0067A5"},{"name":"Medium Purple","hex":"#9370DB"},{"name":"Medium Red-Violet","hex":"#BB3385"},{"name":"Medium Ruby","hex":"#AA4069"},{"name":"Medium Sea Green","hex":"#3CB371"},{"name":"Medium Sky Blue","hex":"#80DAEB"},{"name":"Medium Slate Blue","hex":"#7B68EE"},{"name":"Medium Spring Bud","hex":"#C9DC87"},{"name":"Medium Spring Green","hex":"#00FA9A"},{"name":"Medium Taupe","hex":"#674C47"},{"name":"Medium Turquoise","hex":"#48D1CC"},{"name":"Medium Tuscan Red","hex":"#79443B"},{"name":"Medium Vermilion","hex":"#D9603B"},{"name":"Medium Violet-Red","hex":"#C71585"},{"name":"Mellow Apricot","hex":"#F8B878"},{"name":"Mellow Yellow","hex":"#F8DE7E"},{"name":"Melon","hex":"#FDBCB4"},{"name":"Metallic Seaweed","hex":"#0A7E8C"},{"name":"Metallic Sunburst","hex":"#9C7C38"},{"name":"Mexican Pink","hex":"#E4007C"},{"name":"Middle Blue","hex":"#7ED4E6"},{"name":"Middle Blue Green","hex":"#8DD9CC"},{"name":"Middle Blue Purple","hex":"#8B72BE"},{"name":"Middle Red Purple","hex":"#210837"},{"name":"Middle Green","hex":"#4D8C57"},{"name":"Middle Green Yellow","hex":"#ACBF60"},{"name":"Middle Purple","hex":"#D982B5"},{"name":"Middle Red","hex":"#E58E73"},{"name":"Middle Red Purple","hex":"#A55353"},{"name":"Middle Yellow","hex":"#FFEB00"},{"name":"Middle Yellow Red","hex":"#ECB176"},{"name":"Midnight","hex":"#702670"},{"name":"Midnight Blue","hex":"#191970"},{"name":"Midnight Green (Eagle Green)","hex":"#004953"},{"name":"Mikado Yellow","hex":"#FFC40C"},{"name":"Milk","hex":"#FDFFF5"},{"name":"Mimi Pink","hex":"#FFDAE9"},{"name":"Mindaro","hex":"#E3F988"},{"name":"Ming","hex":"#36747D"},{"name":"Minion Yellow","hex":"#F5E050"},{"name":"Mint","hex":"#3EB489"},{"name":"Mint Cream","hex":"#F5FFFA"},{"name":"Mint Green","hex":"#98FF98"},{"name":"Misty Moss","hex":"#BBB477"},{"name":"Misty Rose","hex":"#FFE4E1"},{"name":"Moccasin","hex":"#FAEBD7"},{"name":"Mode Beige","hex":"#967117"},{"name":"Moonstone Blue","hex":"#73A9C2"},{"name":"Mordant Red 19","hex":"#AE0C00"},{"name":"Morning Blue","hex":"#8DA399"},{"name":"Moss Green","hex":"#8A9A5B"},{"name":"Mountain Meadow","hex":"#30BA8F"},{"name":"Mountbatten Pink","hex":"#997A8D"},{"name":"MSU Green","hex":"#18453B"},{"name":"Mughal Green","hex":"#306030"},{"name":"Mulberry","hex":"#C54B8C"},{"name":"Mummy\'s Tomb","hex":"#828E84"},{"name":"Mustard","hex":"#FFDB58"},{"name":"Myrtle Green","hex":"#317873"},{"name":"Mystic","hex":"#D65282"},{"name":"Mystic Maroon","hex":"#AD4379"},{"name":"Nadeshiko Pink","hex":"#F6ADC6"},{"name":"Napier Green","hex":"#2A8000"},{"name":"Naples Yellow","hex":"#FADA5E"},{"name":"Navajo White","hex":"#FFDEAD"},{"name":"Navy","hex":"#000080"},{"name":"Navy Purple","hex":"#9457EB"},{"name":"Neon Carrot","hex":"#FFA343"},{"name":"Neon Fuchsia","hex":"#FE4164"},{"name":"Neon Green","hex":"#39FF14"},{"name":"New Car","hex":"#214FC6"},{"name":"New York Pink","hex":"#D7837F"},{"name":"Nickel","hex":"#727472"},{"name":"Non-Photo Blue","hex":"#A4DDED"},{"name":"North Texas Green","hex":"#059033"},{"name":"Nyanza","hex":"#E9FFDB"},{"name":"Ocean Blue","hex":"#4F42B5"},{"name":"Ocean Boat Blue","hex":"#0077BE"},{"name":"Ocean Green","hex":"#48BF91"},{"name":"Ochre","hex":"#CC7722"},{"name":"Office Green","hex":"#008000"},{"name":"Ogre Odor","hex":"#FD5240"},{"name":"Old Burgundy","hex":"#43302E"},{"name":"Old Gold","hex":"#CFB53B"},{"name":"Old Heliotrope","hex":"#563C5C"},{"name":"Old Lace","hex":"#FDF5E6"},{"name":"Old Lavender","hex":"#796878"},{"name":"Old Mauve","hex":"#673147"},{"name":"Old Moss Green","hex":"#867E36"},{"name":"Old Rose","hex":"#C08081"},{"name":"Old Silver","hex":"#848482"},{"name":"Olive","hex":"#808000"},{"name":"Olive Drab (#3)","hex":"#6B8E23"},{"name":"Olive Drab #7","hex":"#3C341F"},{"name":"Olivine","hex":"#9AB973"},{"name":"Onyx","hex":"#353839"},{"name":"Opera Mauve","hex":"#B784A7"},{"name":"Orange (Color Wheel)","hex":"#FF7F00"},{"name":"Orange (Crayola)","hex":"#FF7538"},{"name":"Orange (Pantone)","hex":"#FF5800"},{"name":"Orange (RYB)","hex":"#FB9902"},{"name":"Orange (Web)","hex":"#FFA500"},{"name":"Orange Peel","hex":"#FF9F00"},{"name":"Orange-Red","hex":"#FF4500"},{"name":"Orange Soda","hex":"#FA5B3D"},{"name":"Orange-Yellow","hex":"#F8D568"},{"name":"Orchid","hex":"#DA70D6"},{"name":"Orchid Pink","hex":"#F2BDCD"},{"name":"Orioles Orange","hex":"#FB4F14"},{"name":"Otter Brown","hex":"#654321"},{"name":"Outer Space","hex":"#414A4C"},{"name":"Outrageous Orange","hex":"#FF6E4A"},{"name":"Oxford Blue","hex":"#002147"},{"name":"OU Crimson Red","hex":"#990000"},{"name":"Pacific Blue","hex":"#1CA9C9"},{"name":"Pakistan Green","hex":"#006600"},{"name":"Palatinate Blue","hex":"#273BE2"},{"name":"Palatinate Purple","hex":"#682860"},{"name":"Pale Aqua","hex":"#BCD4E6"},{"name":"Pale Blue","hex":"#AFEEEE"},{"name":"Pale Brown","hex":"#987654"},{"name":"Pale Carmine","hex":"#AF4035"},{"name":"Pale Cerulean","hex":"#9BC4E2"},{"name":"Pale Chestnut","hex":"#DDADAF"},{"name":"Pale Copper","hex":"#DA8A67"},{"name":"Pale Cornflower Blue","hex":"#ABCDEF"},{"name":"Pale Cyan","hex":"#87D3F8"},{"name":"Pale Gold","hex":"#E6BE8A"},{"name":"Pale Goldenrod","hex":"#EEE8AA"},{"name":"Pale Green","hex":"#98FB98"},{"name":"Pale Lavender","hex":"#DCD0FF"},{"name":"Pale Magenta","hex":"#F984E5"},{"name":"Pale Magenta-Pink","hex":"#FF99CC"},{"name":"Pale Pink","hex":"#FADADD"},{"name":"Pale Plum","hex":"#DDA0DD"},{"name":"Pale Red-Violet","hex":"#DB7093"},{"name":"Pale Robin Egg Blue","hex":"#96DED1"},{"name":"Pale Silver","hex":"#C9C0BB"},{"name":"Pale Spring Bud","hex":"#ECEBBD"},{"name":"Pale Taupe","hex":"#BC987E"},{"name":"Pale Turquoise","hex":"#AFEEEE"},{"name":"Pale Violet","hex":"#CC99FF"},{"name":"Pale Violet-Red","hex":"#DB7093"},{"name":"Palm Leaf","hex":"#6F9940"},{"name":"Pansy Purple","hex":"#78184A"},{"name":"Paolo Veronese Green","hex":"#009B7D"},{"name":"Papaya Whip","hex":"#FFEFD5"},{"name":"Paradise Pink","hex":"#E63E62"},{"name":"Paris Green","hex":"#50C878"},{"name":"Parrot Pink","hex":"#D998A0"},{"name":"Pastel Blue","hex":"#AEC6CF"},{"name":"Pastel Brown","hex":"#836953"},{"name":"Pastel Gray","hex":"#CFCFC4"},{"name":"Pastel Green","hex":"#77DD77"},{"name":"Pastel Magenta","hex":"#F49AC2"},{"name":"Pastel Orange","hex":"#FFB347"},{"name":"Pastel Pink","hex":"#DEA5A4"},{"name":"Pastel Purple","hex":"#B39EB5"},{"name":"Pastel Red","hex":"#FF6961"},{"name":"Pastel Violet","hex":"#CB99C9"},{"name":"Pastel Yellow","hex":"#FDFD96"},{"name":"Patriarch","hex":"#800080"},{"name":"Payne\'s Grey","hex":"#536878"},{"name":"Peach","hex":"#FFE5B4"},{"name":"Peach","hex":"#FFCBA4"},{"name":"Peach-Orange","hex":"#FFCC99"},{"name":"Peach Puff","hex":"#FFDAB9"},{"name":"Peach-Yellow","hex":"#FADFAD"},{"name":"Pear","hex":"#D1E231"},{"name":"Pearl","hex":"#EAE0C8"},{"name":"Pearl Aqua","hex":"#88D8C0"},{"name":"Pearly Purple","hex":"#B768A2"},{"name":"Peridot","hex":"#E6E200"},{"name":"Periwinkle","hex":"#CCCCFF"},{"name":"Permanent Geranium Lake","hex":"#E12C2C"},{"name":"Persian Blue","hex":"#1C39BB"},{"name":"Persian Green","hex":"#00A693"},{"name":"Persian Indigo","hex":"#32127A"},{"name":"Persian Orange","hex":"#D99058"},{"name":"Persian Pink","hex":"#F77FBE"},{"name":"Persian Plum","hex":"#701C1C"},{"name":"Persian Red","hex":"#CC3333"},{"name":"Persian Rose","hex":"#FE28A2"},{"name":"Persimmon","hex":"#EC5800"},{"name":"Peru","hex":"#CD853F"},{"name":"Pewter Blue","hex":"#8BA8B7"},{"name":"Phlox","hex":"#DF00FF"},{"name":"Phthalo Blue","hex":"#000F89"},{"name":"Phthalo Green","hex":"#123524"},{"name":"Picton Blue","hex":"#45B1E8"},{"name":"Pictorial Carmine","hex":"#C30B4E"},{"name":"Piggy Pink","hex":"#FDDDE6"},{"name":"Pine Green","hex":"#01796F"},{"name":"Pineapple","hex":"#563C0D"},{"name":"Pink","hex":"#FFC0CB"},{"name":"Pink (Pantone)","hex":"#D74894"},{"name":"Pink Flamingo","hex":"#FC74FD"},{"name":"Pink Lace","hex":"#FFDDF4"},{"name":"Pink Lavender","hex":"#D8B2D1"},{"name":"Pink-Orange","hex":"#FF9966"},{"name":"Pink Pearl","hex":"#E7ACCF"},{"name":"Pink Raspberry","hex":"#980036"},{"name":"Pink Sherbet","hex":"#F78FA7"},{"name":"Pistachio","hex":"#93C572"},{"name":"Pixie Powder","hex":"#391285"},{"name":"Platinum","hex":"#E5E4E2"},{"name":"Plum","hex":"#8E4585"},{"name":"Plum (Web)","hex":"#DDA0DD"},{"name":"Plump Purple","hex":"#5946B2"},{"name":"Polished Pine","hex":"#5DA493"},{"name":"Pomp And Power","hex":"#86608E"},{"name":"Popstar","hex":"#BE4F62"},{"name":"Portland Orange","hex":"#FF5A36"},{"name":"Powder Blue","hex":"#B0E0E6"},{"name":"Princess Perfume","hex":"#FF85CF"},{"name":"Princeton Orange","hex":"#F58025"},{"name":"Prune","hex":"#701C1C"},{"name":"Prussian Blue","hex":"#003153"},{"name":"Psychedelic Purple","hex":"#DF00FF"},{"name":"Puce","hex":"#CC8899"},{"name":"Puce Red","hex":"#722F37"},{"name":"Pullman Brown (UPS Brown)","hex":"#644117"},{"name":"Pullman Green","hex":"#3B331C"},{"name":"Pumpkin","hex":"#FF7518"},{"name":"Purple (HTML)","hex":"#800080"},{"name":"Purple (Munsell)","hex":"#9F00C5"},{"name":"Purple (X11)","hex":"#A020F0"},{"name":"Purple Heart","hex":"#69359C"},{"name":"Purple Mountain Majesty","hex":"#9678B6"},{"name":"Purple Navy","hex":"#4E5180"},{"name":"Purple Pizzazz","hex":"#FE4EDA"},{"name":"Purple Plum","hex":"#9C51B6"},{"name":"Purple Taupe","hex":"#50404D"},{"name":"Purpureus","hex":"#9A4EAE"},{"name":"Quartz","hex":"#51484F"},{"name":"Queen Blue","hex":"#436B95"},{"name":"Queen Pink","hex":"#E8CCD7"},{"name":"Quick Silver","hex":"#A6A6A6"},{"name":"Quinacridone Magenta","hex":"#8E3A59"},{"name":"Rackley","hex":"#5D8AA8"},{"name":"Radical Red","hex":"#FF355E"},{"name":"Raisin Black","hex":"#242124"},{"name":"Rajah","hex":"#FBAB60"},{"name":"Raspberry","hex":"#E30B5D"},{"name":"Raspberry Glace","hex":"#915F6D"},{"name":"Raspberry Pink","hex":"#E25098"},{"name":"Raspberry Rose","hex":"#B3446C"},{"name":"Raw Sienna","hex":"#D68A59"},{"name":"Raw Umber","hex":"#826644"},{"name":"Razzle Dazzle Rose","hex":"#FF33CC"},{"name":"Razzmatazz","hex":"#E3256B"},{"name":"Razzmic Berry","hex":"#8D4E85"},{"name":"Rebecca Purple","hex":"#663399"},{"name":"Red","hex":"#FF0000"},{"name":"Red (Crayola)","hex":"#EE204D"},{"name":"Red (Munsell)","hex":"#F2003C"},{"name":"Red (NCS)","hex":"#C40233"},{"name":"Red (Pantone)","hex":"#ED2939"},{"name":"Red (Pigment)","hex":"#ED1C24"},{"name":"Red (RYB)","hex":"#FE2712"},{"name":"Red-Brown","hex":"#A52A2A"},{"name":"Red Devil","hex":"#860111"},{"name":"Red-Orange","hex":"#FF5349"},{"name":"Red-Purple","hex":"#E40078"},{"name":"Red Salsa","hex":"#FD3A4A"},{"name":"Red-Violet","hex":"#C71585"},{"name":"Redwood","hex":"#A45A52"},{"name":"Regalia","hex":"#522D80"},{"name":"Registration Black","hex":"#000000"},{"name":"Resolution Blue","hex":"#002387"},{"name":"Rhythm","hex":"#777696"},{"name":"Rich Black","hex":"#004040"},{"name":"Rich Black (FOGRA29)","hex":"#010B13"},{"name":"Rich Black (FOGRA39)","hex":"#010203"},{"name":"Rich Brilliant Lavender","hex":"#F1A7FE"},{"name":"Rich Carmine","hex":"#D70040"},{"name":"Rich Electric Blue","hex":"#0892D0"},{"name":"Rich Lavender","hex":"#A76BCF"},{"name":"Rich Lilac","hex":"#B666D2"},{"name":"Rich Maroon","hex":"#B03060"},{"name":"Rifle Green","hex":"#444C38"},{"name":"Roast Coffee","hex":"#704241"},{"name":"Robin Egg Blue","hex":"#00CCCC"},{"name":"Rocket Metallic","hex":"#8A7F80"},{"name":"Roman Silver","hex":"#838996"},{"name":"Rose","hex":"#FF007F"},{"name":"Rose Bonbon","hex":"#F9429E"},{"name":"Rose Dust","hex":"#9E5E6F"},{"name":"Rose Ebony","hex":"#674846"},{"name":"Rose Gold","hex":"#B76E79"},{"name":"Rose Madder","hex":"#E32636"},{"name":"Rose Pink","hex":"#FF66CC"},{"name":"Rose Quartz","hex":"#AA98A9"},{"name":"Rose Red","hex":"#C21E56"},{"name":"Rose Taupe","hex":"#905D5D"},{"name":"Rose Vale","hex":"#AB4E52"},{"name":"Rosewood","hex":"#65000B"},{"name":"Rosso Corsa","hex":"#D40000"},{"name":"Rosy Brown","hex":"#BC8F8F"},{"name":"Royal Azure","hex":"#0038A8"},{"name":"Royal Blue","hex":"#002366"},{"name":"Royal Blue","hex":"#4169E1"},{"name":"Royal Fuchsia","hex":"#CA2C92"},{"name":"Royal Purple","hex":"#7851A9"},{"name":"Royal Yellow","hex":"#FADA5E"},{"name":"Ruber","hex":"#CE4676"},{"name":"Rubine Red","hex":"#D10056"},{"name":"Ruby","hex":"#E0115F"},{"name":"Ruby Red","hex":"#9B111E"},{"name":"Ruddy","hex":"#FF0028"},{"name":"Ruddy Brown","hex":"#BB6528"},{"name":"Ruddy Pink","hex":"#E18E96"},{"name":"Rufous","hex":"#A81C07"},{"name":"Russet","hex":"#80461B"},{"name":"Russian Green","hex":"#679267"},{"name":"Russian Violet","hex":"#32174D"},{"name":"Rust","hex":"#B7410E"},{"name":"Rusty Red","hex":"#DA2C43"},{"name":"Sacramento State Green","hex":"#00563F"},{"name":"Saddle Brown","hex":"#8B4513"},{"name":"Safety Orange","hex":"#FF7800"},{"name":"Safety Orange (Blaze Orange)","hex":"#FF6700"},{"name":"Safety Yellow","hex":"#EED202"},{"name":"Saffron","hex":"#F4C430"},{"name":"Sage","hex":"#BCB88A"},{"name":"St. Patrick\'s Blue","hex":"#23297A"},{"name":"Salmon","hex":"#FA8072"},{"name":"Salmon Pink","hex":"#FF91A4"},{"name":"Sand","hex":"#C2B280"},{"name":"Sand Dune","hex":"#967117"},{"name":"Sandstorm","hex":"#ECD540"},{"name":"Sandy Brown","hex":"#F4A460"},{"name":"Sandy Tan","hex":"#FDD9B5"},{"name":"Sandy Taupe","hex":"#967117"},{"name":"Sangria","hex":"#92000A"},{"name":"Sap Green","hex":"#507D2A"},{"name":"Sapphire","hex":"#0F52BA"},{"name":"Sapphire Blue","hex":"#0067A5"},{"name":"Sasquatch Socks","hex":"#FF4681"},{"name":"Satin Sheen Gold","hex":"#CBA135"},{"name":"Scarlet","hex":"#FF2400"},{"name":"Scarlet","hex":"#FD0E35"},{"name":"Schauss Pink","hex":"#FF91AF"},{"name":"School Bus Yellow","hex":"#FFD800"},{"name":"Screamin\' Green","hex":"#66FF66"},{"name":"Sea Blue","hex":"#006994"},{"name":"Sea Foam Green","hex":"#9FE2BF"},{"name":"Sea Green","hex":"#2E8B57"},{"name":"Sea Serpent","hex":"#4BC7CF"},{"name":"Seal Brown","hex":"#59260B"},{"name":"Seashell","hex":"#FFF5EE"},{"name":"Selective Yellow","hex":"#FFBA00"},{"name":"Sepia","hex":"#704214"},{"name":"Shadow","hex":"#8A795D"},{"name":"Shadow Blue","hex":"#778BA5"},{"name":"Shampoo","hex":"#FFCFF1"},{"name":"Shamrock Green","hex":"#009E60"},{"name":"Sheen Green","hex":"#8FD400"},{"name":"Shimmering Blush","hex":"#D98695"},{"name":"Shiny Shamrock","hex":"#5FA778"},{"name":"Shocking Pink","hex":"#FC0FC0"},{"name":"Shocking Pink (Crayola)","hex":"#FF6FFF"},{"name":"Sienna","hex":"#882D17"},{"name":"Silver","hex":"#C0C0C0"},{"name":"Silver Chalice","hex":"#ACACAC"},{"name":"Silver Lake Blue","hex":"#5D89BA"},{"name":"Silver Pink","hex":"#C4AEAD"},{"name":"Silver Sand","hex":"#BFC1C2"},{"name":"Sinopia","hex":"#CB410B"},{"name":"Sizzling Red","hex":"#FF3855"},{"name":"Sizzling Sunrise","hex":"#FFDB00"},{"name":"Skobeloff","hex":"#007474"},{"name":"Sky Blue","hex":"#87CEEB"},{"name":"Sky Magenta","hex":"#CF71AF"},{"name":"Slate Blue","hex":"#6A5ACD"},{"name":"Slate Gray","hex":"#708090"},{"name":"Smalt (Dark Powder Blue)","hex":"#003399"},{"name":"Slimy Green","hex":"#299617"},{"name":"Smashed Pumpkin","hex":"#FF6D3A"},{"name":"Smitten","hex":"#C84186"},{"name":"Smoke","hex":"#738276"},{"name":"Smokey Topaz","hex":"#832A0D"},{"name":"Smoky Black","hex":"#100C08"},{"name":"Smoky Topaz","hex":"#933D41"},{"name":"Snow","hex":"#FFFAFA"},{"name":"Soap","hex":"#CEC8EF"},{"name":"Solid Pink","hex":"#893843"},{"name":"Sonic Silver","hex":"#757575"},{"name":"Spartan Crimson","hex":"#9E1316"},{"name":"Space Cadet","hex":"#1D2951"},{"name":"Spanish Bistre","hex":"#807532"},{"name":"Spanish Blue","hex":"#0070B8"},{"name":"Spanish Carmine","hex":"#D10047"},{"name":"Spanish Crimson","hex":"#E51A4C"},{"name":"Spanish Gray","hex":"#989898"},{"name":"Spanish Green","hex":"#009150"},{"name":"Spanish Orange","hex":"#E86100"},{"name":"Spanish Pink","hex":"#F7BFBE"},{"name":"Spanish Red","hex":"#E60026"},{"name":"Spanish Sky Blue","hex":"#00FFFF"},{"name":"Spanish Violet","hex":"#4C2882"},{"name":"Spanish Viridian","hex":"#007F5C"},{"name":"Spicy Mix","hex":"#8B5f4D"},{"name":"Spiro Disco Ball","hex":"#0FC0FC"},{"name":"Spring Bud","hex":"#A7FC00"},{"name":"Spring Frost","hex":"#87FF2A"},{"name":"Spring Green","hex":"#00FF7F"},{"name":"Star Command Blue","hex":"#007BB8"},{"name":"Steel Blue","hex":"#4682B4"},{"name":"Steel Pink","hex":"#CC33CC"},{"name":"Steel Teal","hex":"#5F8A8B"},{"name":"Stil De Grain Yellow","hex":"#FADA5E"},{"name":"Stizza","hex":"#990000"},{"name":"Stormcloud","hex":"#4F666A"},{"name":"Straw","hex":"#E4D96F"},{"name":"Strawberry","hex":"#FC5A8D"},{"name":"Sugar Plum","hex":"#914E75"},{"name":"Sunburnt Cyclops","hex":"#FF404C"},{"name":"Sunglow","hex":"#FFCC33"},{"name":"Sunny","hex":"#F2F27A"},{"name":"Sunray","hex":"#E3AB57"},{"name":"Sunset","hex":"#FAD6A5"},{"name":"Sunset Orange","hex":"#FD5E53"},{"name":"Super Pink","hex":"#CF6BA9"},{"name":"Sweet Brown","hex":"#A83731"},{"name":"Tan","hex":"#D2B48C"},{"name":"Tangelo","hex":"#F94D00"},{"name":"Tangerine","hex":"#F28500"},{"name":"Tangerine Yellow","hex":"#FFCC00"},{"name":"Tango Pink","hex":"#E4717A"},{"name":"Tart Orange","hex":"#FB4D46"},{"name":"Taupe","hex":"#483C32"},{"name":"Taupe Gray","hex":"#8B8589"},{"name":"Tea Green","hex":"#D0F0C0"},{"name":"Tea Rose","hex":"#F88379"},{"name":"Tea Rose","hex":"#F4C2C2"},{"name":"Teal","hex":"#008080"},{"name":"Teal Blue","hex":"#367588"},{"name":"Teal Deer","hex":"#99E6B3"},{"name":"Teal Green","hex":"#00827F"},{"name":"Telemagenta","hex":"#CF3476"},{"name":"Tenne (Tawny)","hex":"#CD5700"},{"name":"Terra Cotta","hex":"#E2725B"},{"name":"Thistle","hex":"#D8BFD8"},{"name":"Thulian Pink","hex":"#DE6FA1"},{"name":"Tickle Me Pink","hex":"#FC89AC"},{"name":"Tiffany Blue","hex":"#0ABAB5"},{"name":"Tiger\'s Eye","hex":"#E08D3C"},{"name":"Timberwolf","hex":"#DBD7D2"},{"name":"Titanium Yellow","hex":"#EEE600"},{"name":"Tomato","hex":"#FF6347"},{"name":"Toolbox","hex":"#746CC0"},{"name":"Topaz","hex":"#FFC87C"},{"name":"Tractor Red","hex":"#FD0E35"},{"name":"Trolley Grey","hex":"#808080"},{"name":"Tropical Rain Forest","hex":"#00755E"},{"name":"Tropical Violet","hex":"#CDA4DE"},{"name":"True Blue","hex":"#0073CF"},{"name":"Tufts Blue","hex":"#3E8EDE"},{"name":"Tulip","hex":"#FF878D"},{"name":"Tumbleweed","hex":"#DEAA88"},{"name":"Turkish Rose","hex":"#B57281"},{"name":"Turquoise","hex":"#40E0D0"},{"name":"Turquoise Blue","hex":"#00FFEF"},{"name":"Turquoise Green","hex":"#A0D6B4"},{"name":"Turquoise Surf","hex":"#00C5CD"},{"name":"Turtle Green","hex":"#8A9A5B"},{"name":"Tuscan","hex":"#FAD6A5"},{"name":"Tuscan Brown","hex":"#6F4E37"},{"name":"Tuscan Red","hex":"#7C4848"},{"name":"Tuscan Tan","hex":"#A67B5B"},{"name":"Tuscany","hex":"#C09999"},{"name":"Twilight Lavender","hex":"#8A496B"},{"name":"Tyrian Purple","hex":"#66023C"},{"name":"UA Blue","hex":"#0033AA"},{"name":"UA Red","hex":"#D9004C"},{"name":"Ube","hex":"#8878C3"},{"name":"UCLA Blue","hex":"#536895"},{"name":"UCLA Gold","hex":"#FFB300"},{"name":"UFO Green","hex":"#3CD070"},{"name":"Ultramarine","hex":"#3F00FF"},{"name":"Ultramarine Blue","hex":"#4166F5"},{"name":"Ultra Pink","hex":"#FF6FFF"},{"name":"Ultra Red","hex":"#FC6C85"},{"name":"Umber","hex":"#635147"},{"name":"Unbleached Silk","hex":"#FFDDCA"},{"name":"United Nations Blue","hex":"#5B92E5"},{"name":"University Of California Gold","hex":"#B78727"},{"name":"Unmellow Yellow","hex":"#FFFF66"},{"name":"UP Forest Green","hex":"#014421"},{"name":"UP Maroon","hex":"#7B1113"},{"name":"Upsdell Red","hex":"#AE2029"},{"name":"Urobilin","hex":"#E1AD21"},{"name":"USAFA Blue","hex":"#004F98"},{"name":"USC Cardinal","hex":"#990000"},{"name":"USC Gold","hex":"#FFCC00"},{"name":"University Of Tennessee Orange","hex":"#F77F00"},{"name":"Utah Crimson","hex":"#D3003F"},{"name":"Van Dyke Brown","hex":"#664228"},{"name":"Vanilla","hex":"#F3E5AB"},{"name":"Vanilla Ice","hex":"#F38FA9"},{"name":"Vegas Gold","hex":"#C5B358"},{"name":"Venetian Red","hex":"#C80815"},{"name":"Verdigris","hex":"#43B3AE"},{"name":"Vermilion","hex":"#E34234"},{"name":"Vermilion","hex":"#D9381E"},{"name":"Veronica","hex":"#A020F0"},{"name":"Very Light Azure","hex":"#74BBFB"},{"name":"Very Light Blue","hex":"#6666FF"},{"name":"Very Light Malachite Green","hex":"#64E986"},{"name":"Very Light Tangelo","hex":"#FFB077"},{"name":"Very Pale Orange","hex":"#FFDFBF"},{"name":"Very Pale Yellow","hex":"#FFFFBF"},{"name":"Violet","hex":"#8F00FF"},{"name":"Violet (Color Wheel)","hex":"#7F00FF"},{"name":"Violet (RYB)","hex":"#8601AF"},{"name":"Violet (Web)","hex":"#EE82EE"},{"name":"Violet-Blue","hex":"#324AB2"},{"name":"Violet-Red","hex":"#F75394"},{"name":"Viridian","hex":"#40826D"},{"name":"Viridian Green","hex":"#009698"},{"name":"Vista Blue","hex":"#7C9ED9"},{"name":"Vivid Amber","hex":"#CC9900"},{"name":"Vivid Auburn","hex":"#922724"},{"name":"Vivid Burgundy","hex":"#9F1D35"},{"name":"Vivid Cerise","hex":"#DA1D81"},{"name":"Vivid Cerulean","hex":"#00AAEE"},{"name":"Vivid Crimson","hex":"#CC0033"},{"name":"Vivid Gamboge","hex":"#FF9900"},{"name":"Vivid Lime Green","hex":"#A6D608"},{"name":"Vivid Malachite","hex":"#00CC33"},{"name":"Vivid Mulberry","hex":"#B80CE3"},{"name":"Vivid Orange","hex":"#FF5F00"},{"name":"Vivid Orange Peel","hex":"#FFA000"},{"name":"Vivid Orchid","hex":"#CC00FF"},{"name":"Vivid Raspberry","hex":"#FF006C"},{"name":"Vivid Red","hex":"#F70D1A"},{"name":"Vivid Red-Tangelo","hex":"#DF6124"},{"name":"Vivid Sky Blue","hex":"#00CCFF"},{"name":"Vivid Tangelo","hex":"#F07427"},{"name":"Vivid Tangerine","hex":"#FFA089"},{"name":"Vivid Vermilion","hex":"#E56024"},{"name":"Vivid Violet","hex":"#9F00FF"},{"name":"Vivid Yellow","hex":"#FFE302"},{"name":"Volt","hex":"#CEFF00"},{"name":"Wageningen Green","hex":"#34B233"},{"name":"Warm Black","hex":"#004242"},{"name":"Waterspout","hex":"#A4F4F9"},{"name":"Weldon Blue","hex":"#7C98AB"},{"name":"Wenge","hex":"#645452"},{"name":"Wheat","hex":"#F5DEB3"},{"name":"White","hex":"#FFFFFF"},{"name":"White Smoke","hex":"#F5F5F5"},{"name":"Wild Blue Yonder","hex":"#A2ADD0"},{"name":"Wild Orchid","hex":"#D470A2"},{"name":"Wild Strawberry","hex":"#FF43A4"},{"name":"Wild Watermelon","hex":"#FC6C85"},{"name":"Willpower Orange","hex":"#FD5800"},{"name":"Windsor Tan","hex":"#A75502"},{"name":"Wine","hex":"#722F37"},{"name":"Wine Dregs","hex":"#673147"},{"name":"Winter Sky","hex":"#FF007C"},{"name":"Winter Wizard","hex":"#A0E6FF"},{"name":"Wintergreen Dream","hex":"#56887D"},{"name":"Wisteria","hex":"#C9A0DC"},{"name":"Wood Brown","hex":"#C19A6B"},{"name":"Xanadu","hex":"#738678"},{"name":"Yale Blue","hex":"#0F4D92"},{"name":"Yankees Blue","hex":"#1C2841"},{"name":"Yellow","hex":"#FFFF00"},{"name":"Yellow (Crayola)","hex":"#FCE883"},{"name":"Yellow (Munsell)","hex":"#EFCC00"},{"name":"Yellow (NCS)","hex":"#FFD300"},{"name":"Yellow (Pantone)","hex":"#FEDF00"},{"name":"Yellow (Process)","hex":"#FFEF00"},{"name":"Yellow (RYB)","hex":"#FEFE33"},{"name":"Yellow-Green","hex":"#9ACD32"},{"name":"Yellow Orange","hex":"#FFAE42"},{"name":"Yellow Rose","hex":"#FFF000"},{"name":"Yellow Sunshine","hex":"#FFF700"},{"name":"Zaffre","hex":"#0014A8"},{"name":"Zinnwaldite Brown","hex":"#2C1608"},{"name":"Zomp","hex":"#39A78E"}]'),om=function(){return t.createElement(t.Fragment,null,t.createElement("div",{className:"gridColor"},rm.map((function(e){return t.createElement("div",{className:"dropdown",style:{backgroundColor:"".concat(e.hex)}},t.createElement("span",{className:"dropdown-content",onClick:function(){navigator.clipboard.writeText(e.hex)}},t.createElement("p",null,e.name),t.createElement("p",null,e.hex)))}))),t.createElement(dl,null))};function am(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return im(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?im(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function im(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const lm=function(){var e=am((0,t.useState)(null),2),n=(e[0],e[1]),r=am((0,t.useState)([]),2),o=r[0],a=r[1],i=am((0,t.useState)(!0),2),l=i[0],c=i[1],u=am((0,t.useState)([]),2),s=u[0],f=u[1],h=Nt(),d=(0,t.useContext)(ea).searchStringValue;console.log("trazena boja",d),console.log("podaci datas boje",rm),(0,t.useEffect)((function(){p(d)}),[d]);var p=function(e){try{var t=rm.filter((function(t){return t.name.toLowerCase().includes(e.toLowerCase())}));console.log("spisak boja",rm),console.log("Pretraga boja",t),c(!1),a(t),f(t.length)}catch(e){n(e),c(!1)}},m=function(){h("/colors")};return l?t.createElement(co,null):0==s?t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement(ul,{placeholder:"Colors",linkTo:"/colorsSearch"}))),t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("h2",{className:"results"},"Nothing found"))),t.createElement("tr",null,t.createElement("td",{className:"networth"},"View about 1300 colors"),t.createElement("td",null,t.createElement("p",{className:"colorBut",onClick:function(){return m()}},"Colors")))))):t.createElement(t.Fragment,null,t.createElement("table",{className:"tabelaZemlje"},t.createElement("thead",null,t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement(ul,{placeholder:"Colors",linkTo:"/colorsSearch"}))),t.createElement("tr",null,t.createElement("th",{className:"results"},"Number of color:"),t.createElement("th",{className:"results"},s)),t.createElement("tr",null,t.createElement("th",{colSpan:2}))),o.map((function(e){return t.createElement("tbody",{key:e.name},t.createElement("tr",null,t.createElement("td",{className:"networth"},e.name),t.createElement("td",{className:"colorHex",style:{backgroundColor:"".concat(e.hex)},onClick:function(){navigator.clipboard.writeText(e.hex)}},e.hex)))})),t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",{colSpan:2},t.createElement("hr",null))),t.createElement("tr",null,t.createElement("td",{className:"networth"},"View about 1300 colors"),t.createElement("td",null,t.createElement("p",{className:"colorBut",onClick:function(){return m()}},"Colors"))))),t.createElement(dl,null))};var cm=(0,w.Z)({palette:{primary:I.Z,secondary:{50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5"}}});const um=function(){return t.createElement(t.Fragment,null,t.createElement(en,{basename:"/"},t.createElement("div",null,t.createElement(D,{theme:cm},t.createElement(on,{to:"/"},t.createElement(ze,{variant:"contained"},"Home")),t.createElement(on,{to:"/search"},t.createElement(ze,{variant:"contained",color:"secondary",sx:{ml:1}},"Search")),t.createElement(on,{to:"/jokes"},t.createElement(ze,{variant:"contained",color:"secondary",sx:{ml:1}},"Jokes")),t.createElement(on,{to:"/pickTrivia"},t.createElement(ze,{variant:"contained",color:"secondary",sx:{ml:1}},"Quiz")))),t.createElement(Wt,null,t.createElement(Ut,{path:"/",element:t.createElement(yo,null)}),t.createElement(Ut,{path:"/search",element:t.createElement(sl,null)}),t.createElement(Ut,{path:"/poznati",element:t.createElement(Nl,null)}),t.createElement(Ut,{path:"/jokes",element:t.createElement(Nh,null)}),t.createElement(Ut,{path:"/pickTrivia",element:t.createElement(oc,null)}),t.createElement(Ut,{path:"/logo",element:t.createElement(bl,null)}),t.createElement(Ut,{path:"/dictionary",element:t.createElement(Bl,null)}),t.createElement(Ut,{path:"/history",element:t.createElement(Rl,null)}),t.createElement(Ut,{path:"/historyEvents",element:t.createElement(Hl,null)}),t.createElement(Ut,{path:"/historyPerson",element:t.createElement(Xl,null)}),t.createElement(Ut,{path:"/historyPerson/:personName",element:t.createElement(rc,null)}),t.createElement(Ut,{path:"/trivia/:triviaCat",element:t.createElement(Rh,null)}),t.createElement(Ut,{path:"/advice",element:t.createElement(sc,null)}),t.createElement(Ut,{path:"/colors",element:t.createElement(om,null)}),t.createElement(Ut,{path:"/ridles",element:t.createElement(Yf,null)}),t.createElement(Ut,{path:"/art",element:t.createElement(Rh,null)}),t.createElement(Ut,{path:"/science",element:t.createElement(Hh,null)}),t.createElement(Ut,{path:"/general",element:t.createElement(Xh,null)}),t.createElement(Ut,{path:"/food",element:t.createElement(rd,null)}),t.createElement(Ut,{path:"/people",element:t.createElement(ud,null)}),t.createElement(Ut,{path:"/holidays",element:t.createElement(md,null)}),t.createElement(Ut,{path:"/geography",element:t.createElement(wd,null)}),t.createElement(Ut,{path:"/entertainment",element:t.createElement(Bd,null)}),t.createElement(Ut,{path:"/toys",element:t.createElement(Nd,null)}),t.createElement(Ut,{path:"/music",element:t.createElement(Rd,null)}),t.createElement(Ut,{path:"/language",element:t.createElement(Hd,null)}),t.createElement(Ut,{path:"/religion",element:t.createElement(Xd,null)}),t.createElement(Ut,{path:"/sport",element:t.createElement(rp,null)}),t.createElement(Ut,{path:"/mathematics",element:t.createElement(up,null)}),t.createElement(Ut,{path:"/metropolitan",element:t.createElement(nm,null)}),t.createElement(Ut,{path:"/colors",element:t.createElement(om,null)}),t.createElement(Ut,{path:"/colorsSearch",element:t.createElement(lm,null)}))),t.createElement(vo,null))};function sm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const fm=function(){var e,n,r=(e=(0,t.useState)("Enter search criterium!"),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){u=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return sm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?sm(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1];return t.createElement(ea.Provider,{value:{setSearchStringFn:a,searchStringValue:o}},t.createElement(um,null))};r.createRoot(document.getElementById("app")).render(t.createElement(t.StrictMode,null,t.createElement(fm,{number:10,title:"String from index file",text:"Text from index file"})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,